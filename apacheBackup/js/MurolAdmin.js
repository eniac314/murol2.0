(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEBUG mode. Follow the advice at https://elm-lang.org/0.19.0/optimize for better performance and smaller assets.');


var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File === 'function' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[94m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = elm$core$Set$toList(x);
		y = elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = elm$core$Dict$toList(x);
		y = elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = elm$core$Dict$toList(x);
		y = elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? elm$core$Basics$LT : n ? elm$core$Basics$GT : elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === elm$core$Basics$EQ ? 0 : ord === elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return word
		? elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? elm$core$Maybe$Nothing
		: elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? elm$core$Maybe$Just(n) : elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




/**/
function _Json_errorToString(error)
{
	return elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? elm$core$Result$Ok(value)
		: (value instanceof String)
			? elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return elm$core$Result$Err(A2(elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return (elm$core$Result$isOk(result)) ? result : elm$core$Result$Err(A2(elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return (elm$core$Result$isOk(result)) ? result : elm$core$Result$Err(A2(elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!elm$core$Result$isOk(result))
					{
						return elm$core$Result$Err(A2(elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return elm$core$Result$Ok(elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if (elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return elm$core$Result$Err(elm$json$Json$Decode$OneOf(elm$core$List$reverse(errors)));

		case 1:
			return elm$core$Result$Err(A2(elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!elm$core$Result$isOk(result))
		{
			return elm$core$Result$Err(A2(elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList === 'function' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2(elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return elm$core$Result$Err(A2(elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	result = init(result.a);
	var model = result.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		result = A2(update, msg, model);
		stepper(model = result.a, viewMetadata);
		_Platform_dispatchEffects(managers, result.b, subscriptions(model));
	}

	_Platform_dispatchEffects(managers, result.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				p: bag.n,
				q: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.q)
		{
			x = temp.p(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		r: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].r;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		r: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].r;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^(on|formAction$)/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2(elm$json$Json$Decode$map, func, handler.a)
				:
			A3(elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// HELPERS


function _Debugger_unsafeCoerce(value)
{
	return value;
}



// PROGRAMS


var _Debugger_element = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		A3(elm$browser$Debugger$Main$wrapInit, _Json_wrap(debugMetadata), _Debugger_popout(), impl.init),
		elm$browser$Debugger$Main$wrapUpdate(impl.update),
		elm$browser$Debugger$Main$wrapSubs(impl.subscriptions),
		function(sendToApp, initialModel)
		{
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			var currNode = _VirtualDom_virtualize(domNode);
			var currBlocker = elm$browser$Debugger$Main$toBlockerType(initialModel);
			var currPopout;

			var cornerNode = _VirtualDom_doc.createElement('div');
			domNode.parentNode.insertBefore(cornerNode, domNode.nextSibling);
			var cornerCurr = _VirtualDom_virtualize(cornerNode);

			initialModel.popout.a = sendToApp;

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = A2(_VirtualDom_map, elm$browser$Debugger$Main$UserMsg, view(elm$browser$Debugger$Main$getUserModel(model)));
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;

				// update blocker

				var nextBlocker = elm$browser$Debugger$Main$toBlockerType(model);
				_Debugger_updateBlocker(currBlocker, nextBlocker);
				currBlocker = nextBlocker;

				// view corner

				if (!model.popout.b)
				{
					var cornerNext = elm$browser$Debugger$Main$cornerView(model);
					var cornerPatches = _VirtualDom_diff(cornerCurr, cornerNext);
					cornerNode = _VirtualDom_applyPatches(cornerNode, cornerCurr, cornerPatches, sendToApp);
					cornerCurr = cornerNext;
					currPopout = undefined;
					return;
				}

				// view popout

				_VirtualDom_doc = model.popout.b; // SWITCH TO POPOUT DOC
				currPopout || (currPopout = _VirtualDom_virtualize(model.popout.b));
				var nextPopout = elm$browser$Debugger$Main$popoutView(model);
				var popoutPatches = _VirtualDom_diff(currPopout, nextPopout);
				_VirtualDom_applyPatches(model.popout.b.body, currPopout, popoutPatches, sendToApp);
				currPopout = nextPopout;
				_VirtualDom_doc = document; // SWITCH BACK TO NORMAL DOC
			});
		}
	);
});


var _Debugger_document = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		A3(elm$browser$Debugger$Main$wrapInit, _Json_wrap(debugMetadata), _Debugger_popout(), impl.init),
		elm$browser$Debugger$Main$wrapUpdate(impl.update),
		elm$browser$Debugger$Main$wrapSubs(impl.subscriptions),
		function(sendToApp, initialModel)
		{
			var divertHrefToApp = impl.setup && impl.setup(function(x) { return sendToApp(elm$browser$Debugger$Main$UserMsg(x)); });
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			var currBlocker = elm$browser$Debugger$Main$toBlockerType(initialModel);
			var currPopout;

			initialModel.popout.a = sendToApp;

			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(elm$browser$Debugger$Main$getUserModel(model));
				var nextNode = _VirtualDom_node('body')(_List_Nil)(
					_Utils_ap(
						A2(elm$core$List$map, _VirtualDom_map(elm$browser$Debugger$Main$UserMsg), doc.body),
						_List_Cons(elm$browser$Debugger$Main$cornerView(model), _List_Nil)
					)
				);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);

				// update blocker

				var nextBlocker = elm$browser$Debugger$Main$toBlockerType(model);
				_Debugger_updateBlocker(currBlocker, nextBlocker);
				currBlocker = nextBlocker;

				// view popout

				if (!model.popout.b) { currPopout = undefined; return; }

				_VirtualDom_doc = model.popout.b; // SWITCH TO POPOUT DOC
				currPopout || (currPopout = _VirtualDom_virtualize(model.popout.b));
				var nextPopout = elm$browser$Debugger$Main$popoutView(model);
				var popoutPatches = _VirtualDom_diff(currPopout, nextPopout);
				_VirtualDom_applyPatches(model.popout.b.body, currPopout, popoutPatches, sendToApp);
				currPopout = nextPopout;
				_VirtualDom_doc = document; // SWITCH BACK TO NORMAL DOC
			});
		}
	);
});


function _Debugger_popout()
{
	return {
		b: undefined,
		a: undefined
	};
}

function _Debugger_isOpen(popout)
{
	return !!popout.b;
}

function _Debugger_open(popout)
{
	return _Scheduler_binding(function(callback)
	{
		_Debugger_openWindow(popout);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}

function _Debugger_openWindow(popout)
{
	var w = 900, h = 360, x = screen.width - w, y = screen.height - h;
	var debuggerWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);
	var doc = debuggerWindow.document;
	doc.title = 'Elm Debugger';

	// handle arrow keys
	doc.addEventListener('keydown', function(event) {
		event.metaKey && event.which === 82 && window.location.reload();
		event.which === 38 && (popout.a(elm$browser$Debugger$Main$Up), event.preventDefault());
		event.which === 40 && (popout.a(elm$browser$Debugger$Main$Down), event.preventDefault());
	});

	// handle window close
	window.addEventListener('unload', close);
	debuggerWindow.addEventListener('unload', function() {
		popout.b = undefined;
		popout.a(elm$browser$Debugger$Main$NoOp);
		window.removeEventListener('unload', close);
	});
	function close() {
		popout.b = undefined;
		popout.a(elm$browser$Debugger$Main$NoOp);
		debuggerWindow.close();
	}

	// register new window
	popout.b = doc;
}



// SCROLL


function _Debugger_scroll(popout)
{
	return _Scheduler_binding(function(callback)
	{
		if (popout.b)
		{
			var msgs = popout.b.getElementById('elm-debugger-sidebar');
			if (msgs)
			{
				msgs.scrollTop = msgs.scrollHeight;
			}
		}
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}



// UPLOAD


function _Debugger_upload()
{
	return _Scheduler_binding(function(callback)
	{
		var element = document.createElement('input');
		element.setAttribute('type', 'file');
		element.setAttribute('accept', 'text/json');
		element.style.display = 'none';
		element.addEventListener('change', function(event)
		{
			var fileReader = new FileReader();
			fileReader.onload = function(e)
			{
				callback(_Scheduler_succeed(e.target.result));
			};
			fileReader.readAsText(event.target.files[0]);
			document.body.removeChild(element);
		});
		document.body.appendChild(element);
		element.click();
	});
}



// DOWNLOAD


var _Debugger_download = F2(function(historyLength, json)
{
	return _Scheduler_binding(function(callback)
	{
		var fileName = 'history-' + historyLength + '.txt';
		var jsonString = JSON.stringify(json);
		var mime = 'text/plain;charset=utf-8';
		var done = _Scheduler_succeed(_Utils_Tuple0);

		// for IE10+
		if (navigator.msSaveBlob)
		{
			navigator.msSaveBlob(new Blob([jsonString], {type: mime}), fileName);
			return callback(done);
		}

		// for HTML5
		var element = document.createElement('a');
		element.setAttribute('href', 'data:' + mime + ',' + encodeURIComponent(jsonString));
		element.setAttribute('download', fileName);
		element.style.display = 'none';
		document.body.appendChild(element);
		element.click();
		document.body.removeChild(element);
		callback(done);
	});
});



// POPOUT CONTENT


function _Debugger_messageToString(value)
{
	if (typeof value === 'boolean')
	{
		return value ? 'True' : 'False';
	}

	if (typeof value === 'number')
	{
		return value + '';
	}

	if (typeof value === 'string')
	{
		return '"' + _Debugger_addSlashes(value, false) + '"';
	}

	if (value instanceof String)
	{
		return "'" + _Debugger_addSlashes(value, true) + "'";
	}

	if (typeof value !== 'object' || value === null || !('$' in value))
	{
		return '…';
	}

	if (typeof value.$ === 'number')
	{
		return '…';
	}

	var code = value.$.charCodeAt(0);
	if (code === 0x23 /* # */ || /* a */ 0x61 <= code && code <= 0x7A /* z */)
	{
		return '…';
	}

	if (['Array_elm_builtin', 'Set_elm_builtin', 'RBNode_elm_builtin', 'RBEmpty_elm_builtin'].indexOf(value.$) >= 0)
	{
		return '…';
	}

	var keys = Object.keys(value);
	switch (keys.length)
	{
		case 1:
			return value.$;
		case 2:
			return value.$ + ' ' + _Debugger_messageToString(value.a);
		default:
			return value.$ + ' … ' + _Debugger_messageToString(value[keys[keys.length - 1]]);
	}
}


function _Debugger_init(value)
{
	if (typeof value === 'boolean')
	{
		return A3(elm$browser$Debugger$Expando$Constructor, elm$core$Maybe$Just(value ? 'True' : 'False'), true, _List_Nil);
	}

	if (typeof value === 'number')
	{
		return elm$browser$Debugger$Expando$Primitive(value + '');
	}

	if (typeof value === 'string')
	{
		return elm$browser$Debugger$Expando$S('"' + _Debugger_addSlashes(value, false) + '"');
	}

	if (value instanceof String)
	{
		return elm$browser$Debugger$Expando$S("'" + _Debugger_addSlashes(value, true) + "'");
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (tag === '::' || tag === '[]')
		{
			return A3(elm$browser$Debugger$Expando$Sequence, elm$browser$Debugger$Expando$ListSeq, true,
				A2(elm$core$List$map, _Debugger_init, value)
			);
		}

		if (tag === 'Set_elm_builtin')
		{
			return A3(elm$browser$Debugger$Expando$Sequence, elm$browser$Debugger$Expando$SetSeq, true,
				A3(elm$core$Set$foldr, _Debugger_initCons, _List_Nil, value)
			);
		}

		if (tag === 'RBNode_elm_builtin' || tag == 'RBEmpty_elm_builtin')
		{
			return A2(elm$browser$Debugger$Expando$Dictionary, true,
				A3(elm$core$Dict$foldr, _Debugger_initKeyValueCons, _List_Nil, value)
			);
		}

		if (tag === 'Array_elm_builtin')
		{
			return A3(elm$browser$Debugger$Expando$Sequence, elm$browser$Debugger$Expando$ArraySeq, true,
				A3(elm$core$Array$foldr, _Debugger_initCons, _List_Nil, value)
			);
		}

		if (typeof tag === 'number')
		{
			return elm$browser$Debugger$Expando$Primitive('<internals>');
		}

		var char = tag.charCodeAt(0);
		if (char === 35 || 65 <= char && char <= 90)
		{
			var list = _List_Nil;
			for (var i in value)
			{
				if (i === '$') continue;
				list = _List_Cons(_Debugger_init(value[i]), list);
			}
			return A3(elm$browser$Debugger$Expando$Constructor, char === 35 ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(tag), true, elm$core$List$reverse(list));
		}

		return elm$browser$Debugger$Expando$Primitive('<internals>');
	}

	if (typeof value === 'object')
	{
		var dict = elm$core$Dict$empty;
		for (var i in value)
		{
			dict = A3(elm$core$Dict$insert, i, _Debugger_init(value[i]), dict);
		}
		return A2(elm$browser$Debugger$Expando$Record, true, dict);
	}

	return elm$browser$Debugger$Expando$Primitive('<internals>');
}

var _Debugger_initCons = F2(function initConsHelp(value, list)
{
	return _List_Cons(_Debugger_init(value), list);
});

var _Debugger_initKeyValueCons = F3(function(key, value, list)
{
	return _List_Cons(
		_Utils_Tuple2(_Debugger_init(key), _Debugger_init(value)),
		list
	);
});

function _Debugger_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}



// BLOCK EVENTS


function _Debugger_updateBlocker(oldBlocker, newBlocker)
{
	if (oldBlocker === newBlocker) return;

	var oldEvents = _Debugger_blockerToEvents(oldBlocker);
	var newEvents = _Debugger_blockerToEvents(newBlocker);

	// remove old blockers
	for (var i = 0; i < oldEvents.length; i++)
	{
		document.removeEventListener(oldEvents[i], _Debugger_blocker, true);
	}

	// add new blockers
	for (var i = 0; i < newEvents.length; i++)
	{
		document.addEventListener(newEvents[i], _Debugger_blocker, true);
	}
}


function _Debugger_blocker(event)
{
	if (event.type === 'keydown' && event.metaKey && event.which === 82)
	{
		return;
	}

	var isScroll = event.type === 'scroll' || event.type === 'wheel';
	for (var node = event.target; node; node = node.parentNode)
	{
		if (isScroll ? node.id === 'elm-debugger-details' : node.id === 'elm-debugger-overlay')
		{
			return;
		}
	}

	event.stopPropagation();
	event.preventDefault();
}

function _Debugger_blockerToEvents(blocker)
{
	return blocker === elm$browser$Debugger$Overlay$BlockNone
		? []
		: blocker === elm$browser$Debugger$Overlay$BlockMost
			? _Debugger_mostEvents
			: _Debugger_allEvents;
}

var _Debugger_mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var _Debugger_allEvents = _Debugger_mostEvents.concat('wheel', 'scroll');





// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? elm$browser$Browser$Internal(next)
							: elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return elm$core$Result$isOk(result) ? elm$core$Maybe$Just(result.a) : elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail(elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}



function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2(elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.expect.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done(elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done(elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.expect.b, xhr)); });
		elm$core$Maybe$isJust(request.tracker) && _Http_track(router, xhr, request.tracker.a);

		try {
			xhr.open(request.method, request.url, true);
		} catch (e) {
			return done(elm$http$Http$BadUrl_(request.url));
		}

		_Http_configureRequest(xhr, request);

		request.body.a && xhr.setRequestHeader('Content-Type', request.body.a);
		xhr.send(request.body.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.headers; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.timeout.a || 0;
	xhr.responseType = request.expect.d;
	xhr.withCredentials = request.allowCookiesFromOtherDomains;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? elm$http$Http$GoodStatus_ : elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		url: xhr.responseURL,
		statusCode: xhr.status,
		statusText: xhr.statusText,
		headers: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return elm$core$Dict$empty;
	}

	var headers = elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3(elm$core$Dict$update, key, function(oldValue) {
				return elm$core$Maybe$Just(elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2(elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, elm$http$Http$Sending({
			sent: event.loaded,
			size: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2(elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, elm$http$Http$Receiving({
			received: event.loaded,
			size: event.lengthComputable ? elm$core$Maybe$Just(event.total) : elm$core$Maybe$Nothing
		}))));
	});
}

// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? elm$core$Maybe$Just(submatch)
				: elm$core$Maybe$Nothing;
		}
		out.push(A4(elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? elm$core$Maybe$Just(submatch)
				: elm$core$Maybe$Nothing;
		}
		return replacer(A4(elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;



// DECODER

var _File_decoder = _Json_decodePrim(function(value) {
	// NOTE: checks if `File` exists in case this is run on node
	return (typeof File === 'function' && value instanceof File)
		? elm$core$Result$Ok(value)
		: _Json_expecting('a FILE', value);
});


// METADATA

function _File_name(file) { return file.name; }
function _File_mime(file) { return file.type; }
function _File_size(file) { return file.size; }

function _File_lastModified(file)
{
	return elm$time$Time$millisToPosix(file.lastModified);
}


// DOWNLOAD

var _File_downloadNode;

function _File_getDownloadNode()
{
	return _File_downloadNode || (_File_downloadNode = document.createElementNS('http://www.w3.org/1999/xhtml', 'a'));
}

var _File_download = F3(function(name, mime, content)
{
	return _Scheduler_binding(function(callback)
	{
		var blob = new Blob([content], {type: mime});

		// for IE10+
		if (navigator.msSaveOrOpenBlob)
		{
			navigator.msSaveOrOpenBlob(blob, name);
			return;
		}

		// for HTML5
		var node = _File_getDownloadNode();
		var objectUrl = URL.createObjectURL(blob);
		node.setAttribute('href', objectUrl);
		node.setAttribute('download', name);
		node.dispatchEvent(new MouseEvent('click'));
		URL.revokeObjectURL(objectUrl);
	});
});

function _File_downloadUrl(href)
{
	return _Scheduler_binding(function(callback)
	{
		var node = _File_getDownloadNode();
		node.setAttribute('href', href);
		node.setAttribute('download', '');
		node.dispatchEvent(new MouseEvent('click'));
	});
}


// UPLOAD

function _File_uploadOne(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		var node = document.createElementNS('http://www.w3.org/1999/xhtml', 'input');
		node.setAttribute('type', 'file');
		node.setAttribute('accept', A2(elm$core$String$join, ',', mimes));
		node.addEventListener('change', function(event)
		{
			callback(_Scheduler_succeed(event.target.files[0]));
		});
		node.dispatchEvent(new MouseEvent('click'));
	});
}

function _File_uploadOneOrMore(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		var node = document.createElementNS('http://www.w3.org/1999/xhtml', 'input');
		node.setAttribute('type', 'file');
		node.setAttribute('accept', A2(elm$core$String$join, ',', mimes));
		node.setAttribute('multiple', '');
		node.addEventListener('change', function(event)
		{
			var elmFiles = _List_fromArray(event.target.files);
			callback(_Scheduler_succeed(_Utils_Tuple2(elmFiles.a, elmFiles.b)));
		});
		node.dispatchEvent(new MouseEvent('click'));
	});
}


// CONTENT

function _File_toString(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsText(blob);
		return function() { reader.abort(); };
	});
}

function _File_toBytes(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(new DataView(reader.result)));
		});
		reader.readAsArrayBuffer(blob);
		return function() { reader.abort(); };
	});
}

function _File_toUrl(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsDataURL(blob);
		return function() { reader.abort(); };
	});
}

var author$project$Auth$AuthPlugin$LoggedOut = {$: 'LoggedOut'};
var author$project$Auth$AuthPlugin$LoginMode = function (a) {
	return {$: 'LoginMode', a: a};
};
var author$project$Internals$CommonHelpers$Initial = {$: 'Initial'};
var elm$core$Basics$EQ = {$: 'EQ'};
var elm$core$Basics$LT = {$: 'LT'};
var elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var elm$core$Array$foldr = F3(
	function (func, baseCase, _n0) {
		var tree = _n0.c;
		var tail = _n0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3(elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3(elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			elm$core$Elm$JsArray$foldr,
			helper,
			A3(elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var elm$core$List$cons = _List_cons;
var elm$core$Array$toList = function (array) {
	return A3(elm$core$Array$foldr, elm$core$List$cons, _List_Nil, array);
};
var elm$core$Basics$GT = {$: 'GT'};
var elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3(elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var elm$core$Dict$toList = function (dict) {
	return A3(
		elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var elm$core$Dict$keys = function (dict) {
	return A3(
		elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2(elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var elm$core$Set$toList = function (_n0) {
	var dict = _n0.a;
	return elm$core$Dict$keys(dict);
};
var author$project$Auth$AuthPlugin$init = function (externalMsg) {
	return {
		confirmPassword: '',
		externalMsg: externalMsg,
		logInfo: author$project$Auth$AuthPlugin$LoggedOut,
		logs: _List_Nil,
		password: '',
		pluginMode: author$project$Auth$AuthPlugin$LoginMode(author$project$Internals$CommonHelpers$Initial),
		username: ''
	};
};
var author$project$FileExplorer$FileExplorer$ImagesRoot = {$: 'ImagesRoot'};
var author$project$FileExplorer$FileExplorer$FileReader = {$: 'FileReader'};
var author$project$FileExplorer$FileExplorer$FilesysDisplay = {$: 'FilesysDisplay'};
var author$project$FileExplorer$FileExplorer$RegUpload = {$: 'RegUpload'};
var author$project$Internals$ToolHelpers$ToolLoadingWaiting = {$: 'ToolLoadingWaiting'};
var elm$core$Basics$False = {$: 'False'};
var elm$core$Maybe$Nothing = {$: 'Nothing'};
var author$project$FileExplorer$FileExplorer$init = F2(
	function (root, externalMsg) {
		return {canResize: false, canUpload: false, cutBuffer: elm$core$Maybe$Nothing, debug: '', desiredFilename: elm$core$Maybe$Nothing, desiredHeight: elm$core$Maybe$Nothing, desiredRotationAngle: 0, desiredWidth: elm$core$Maybe$Nothing, docFiles: elm$core$Maybe$Nothing, externalMsg: externalMsg, filesToUpload: _List_Nil, imageControllerMode: author$project$FileExplorer$FileExplorer$FileReader, imageFiles: elm$core$Maybe$Nothing, imageUploadType: author$project$FileExplorer$FileExplorer$RegUpload, lastLocation: elm$core$Maybe$Nothing, loadingStatus: author$project$Internals$ToolHelpers$ToolLoadingWaiting, lockedFsItems: _List_Nil, logs: _List_Nil, mainPanelDisplay: author$project$FileExplorer$FileExplorer$FilesysDisplay, mbDFilesys: elm$core$Maybe$Nothing, mbIFilesys: elm$core$Maybe$Nothing, mbImageFromFile: elm$core$Maybe$Nothing, mbOriFileSize: elm$core$Maybe$Nothing, mbOriImageHeight: elm$core$Maybe$Nothing, mbOriImageWidth: elm$core$Maybe$Nothing, needToResize: false, needToRotate: false, needToUpload: false, newFolderNameBuffer: '', renameBuffer: '', root: root, selectedFsItem: elm$core$Maybe$Nothing, sliderValue: 100};
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$PreviewFiche = {$: 'PreviewFiche'};
var TSFoster$elm_uuid$UUID$UUID = function (a) {
	return {$: 'UUID', a: a};
};
var elm$core$Basics$identity = function (x) {
	return x;
};
var elm$core$Basics$le = _Utils_le;
var elm$core$Basics$sub = _Basics_sub;
var elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2(elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var elm$core$List$repeat = F2(
	function (n, value) {
		return A3(elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var TSFoster$elm_uuid$UUID$nil = TSFoster$elm_uuid$UUID$UUID(
	A2(elm$core$List$repeat, 16, 0));
var elm$time$Time$Posix = function (a) {
	return {$: 'Posix', a: a};
};
var elm$time$Time$millisToPosix = elm$time$Time$Posix;
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyFiche = {
	adresse: '',
	categories: _List_Nil,
	description: _List_Nil,
	email: _List_Nil,
	fax: elm$core$Maybe$Nothing,
	label: _List_Nil,
	lastEdit: elm$time$Time$millisToPosix(0),
	linkedDocs: _List_Nil,
	natureActiv: _List_Nil,
	nomEntite: '',
	ouverture: elm$core$Maybe$Nothing,
	pjaun: elm$core$Maybe$Nothing,
	rank: {epis: elm$core$Maybe$Nothing, stars: elm$core$Maybe$Nothing},
	refOt: elm$core$Maybe$Nothing,
	responsables: _List_Nil,
	site: elm$core$Maybe$Nothing,
	telNumber: elm$core$Maybe$Nothing,
	uuid: TSFoster$elm_uuid$UUID$nil,
	visuel: ''
};
var elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var elm$core$Dict$empty = elm$core$Dict$RBEmpty_elm_builtin;
var elm$core$Basics$True = {$: 'True'};
var elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var elm$core$Array$branchFactor = 32;
var elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var elm$core$Basics$ceiling = _Basics_ceiling;
var elm$core$Basics$fdiv = _Basics_fdiv;
var elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var elm$core$Basics$toFloat = _Basics_toFloat;
var elm$core$Array$shiftStep = elm$core$Basics$ceiling(
	A2(elm$core$Basics$logBase, 2, elm$core$Array$branchFactor));
var elm$core$Elm$JsArray$empty = _JsArray_empty;
var elm$core$Array$empty = A4(elm$core$Array$Array_elm_builtin, 0, elm$core$Array$shiftStep, elm$core$Elm$JsArray$empty, elm$core$Elm$JsArray$empty);
var elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var elm$core$List$reverse = function (list) {
	return A3(elm$core$List$foldl, elm$core$List$cons, _List_Nil, list);
};
var elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _n0 = A2(elm$core$Elm$JsArray$initializeFromList, elm$core$Array$branchFactor, nodes);
			var node = _n0.a;
			var remainingNodes = _n0.b;
			var newAcc = A2(
				elm$core$List$cons,
				elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var elm$core$Basics$eq = _Utils_equal;
var elm$core$Tuple$first = function (_n0) {
	var x = _n0.a;
	return x;
};
var elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = elm$core$Basics$ceiling(nodeListSize / elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2(elm$core$Elm$JsArray$initializeFromList, elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2(elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var elm$core$Basics$add = _Basics_add;
var elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var elm$core$Basics$floor = _Basics_floor;
var elm$core$Basics$gt = _Utils_gt;
var elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var elm$core$Basics$mul = _Basics_mul;
var elm$core$Elm$JsArray$length = _JsArray_length;
var elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				elm$core$Array$Array_elm_builtin,
				elm$core$Elm$JsArray$length(builder.tail),
				elm$core$Array$shiftStep,
				elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * elm$core$Array$branchFactor;
			var depth = elm$core$Basics$floor(
				A2(elm$core$Basics$logBase, elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2(elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				elm$core$Array$Array_elm_builtin,
				elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2(elm$core$Basics$max, 5, depth * elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var elm$core$Basics$idiv = _Basics_idiv;
var elm$core$Basics$lt = _Utils_lt;
var elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = elm$core$Array$Leaf(
					A3(elm$core$Elm$JsArray$initialize, elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2(elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var elm$core$Basics$remainderBy = _Basics_remainderBy;
var elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return elm$core$Array$empty;
		} else {
			var tailLen = len % elm$core$Array$branchFactor;
			var tail = A3(elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - elm$core$Array$branchFactor;
			return A5(elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var elm$core$Basics$and = _Basics_and;
var elm$core$Basics$append = _Utils_append;
var elm$core$Basics$or = _Basics_or;
var elm$core$Char$toCode = _Char_toCode;
var elm$core$Char$isLower = function (_char) {
	var code = elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var elm$core$Char$isUpper = function (_char) {
	var code = elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var elm$core$Char$isAlpha = function (_char) {
	return elm$core$Char$isLower(_char) || elm$core$Char$isUpper(_char);
};
var elm$core$Char$isDigit = function (_char) {
	var code = elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var elm$core$Char$isAlphaNum = function (_char) {
	return elm$core$Char$isLower(_char) || (elm$core$Char$isUpper(_char) || elm$core$Char$isDigit(_char));
};
var elm$core$List$length = function (xs) {
	return A3(
		elm$core$List$foldl,
		F2(
			function (_n0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var elm$core$List$map2 = _List_map2;
var elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2(elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var elm$core$List$range = F2(
	function (lo, hi) {
		return A3(elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			elm$core$List$map2,
			f,
			A2(
				elm$core$List$range,
				0,
				elm$core$List$length(xs) - 1),
			xs);
	});
var elm$core$String$all = _String_all;
var elm$core$String$fromInt = _String_fromNumber;
var elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var elm$core$String$uncons = _String_uncons;
var elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var elm$json$Json$Decode$indent = function (str) {
	return A2(
		elm$core$String$join,
		'\n    ',
		A2(elm$core$String$split, '\n', str));
};
var elm$json$Json$Encode$encode = _Json_encode;
var elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + (elm$core$String$fromInt(i + 1) + (') ' + elm$json$Json$Decode$indent(
			elm$json$Json$Decode$errorToString(error))));
	});
var elm$json$Json$Decode$errorToString = function (error) {
	return A2(elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _n1 = elm$core$String$uncons(f);
						if (_n1.$ === 'Nothing') {
							return false;
						} else {
							var _n2 = _n1.a;
							var _char = _n2.a;
							var rest = _n2.b;
							return elm$core$Char$isAlpha(_char) && A2(elm$core$String$all, elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2(elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + (elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2(elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									elm$core$String$join,
									'',
									elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										elm$core$String$join,
										'',
										elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + (elm$core$String$fromInt(
								elm$core$List$length(errors)) + ' ways:'));
							return A2(
								elm$core$String$join,
								'\n\n',
								A2(
									elm$core$List$cons,
									introduction,
									A2(elm$core$List$indexedMap, elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								elm$core$String$join,
								'',
								elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + (elm$json$Json$Decode$indent(
						A2(elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var elm$core$Platform$Cmd$batch = _Platform_batch;
var elm$core$Platform$Cmd$none = elm$core$Platform$Cmd$batch(_List_Nil);
var elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var elm$core$Set$empty = elm$core$Set$Set_elm_builtin(elm$core$Dict$empty);
var author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$init = function (externalMsg) {
	return _Utils_Tuple2(
		{
			activBuffer: elm$core$Maybe$Nothing,
			activFilter: elm$core$Maybe$Nothing,
			activites: elm$core$Set$empty,
			catBuffer: elm$core$Maybe$Nothing,
			catFilter: elm$core$Maybe$Nothing,
			categories: elm$core$Set$empty,
			currentTime: elm$time$Time$millisToPosix(0),
			debug: _List_Nil,
			descrBuffer: elm$core$Maybe$Nothing,
			docPickerOpen: false,
			emailBuffer: elm$core$Maybe$Nothing,
			expiryDateBuffer: elm$core$Maybe$Nothing,
			externalMsg: externalMsg,
			ficheBuffer: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyFiche,
			fiches: elm$core$Dict$empty,
			labelBuffer: elm$core$Maybe$Nothing,
			labelFilter: elm$core$Maybe$Nothing,
			labelPickerOpen: false,
			labelVisualPickerOpen: false,
			labels: _List_Nil,
			linkedDocBuffer: elm$core$Maybe$Nothing,
			loadingStatus: author$project$Internals$ToolHelpers$ToolLoadingWaiting,
			lockedFiches: _List_Nil,
			nameFilter: elm$core$Maybe$Nothing,
			respBuffer: elm$core$Maybe$Nothing,
			rightPanelDisplay: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$PreviewFiche,
			seed: elm$core$Maybe$Nothing,
			selectedActivInFiche: elm$core$Maybe$Nothing,
			selectedAvailableActiv: elm$core$Maybe$Nothing,
			selectedAvailableCat: elm$core$Maybe$Nothing,
			selectedAvailableLabel: elm$core$Maybe$Nothing,
			selectedCatInFiche: elm$core$Maybe$Nothing,
			selectedDescr: elm$core$Maybe$Nothing,
			selectedEmail: elm$core$Maybe$Nothing,
			selectedFiche: elm$core$Maybe$Nothing,
			selectedLabelInFiche: elm$core$Maybe$Nothing,
			selectedLinkedDoc: elm$core$Maybe$Nothing,
			selectedResp: elm$core$Maybe$Nothing,
			visualPickerOpen: false
		},
		elm$core$Platform$Cmd$none);
};
var author$project$MurolAdmin$AuthMsg = function (a) {
	return {$: 'AuthMsg', a: a};
};
var author$project$MurolAdmin$AuthTool = {$: 'AuthTool'};
var author$project$MurolAdmin$CurrentViewport = function (a) {
	return {$: 'CurrentViewport', a: a};
};
var author$project$MurolAdmin$FileExplorerMsg = function (a) {
	return {$: 'FileExplorerMsg', a: a};
};
var author$project$MurolAdmin$GeneralDirectoryMsg = function (a) {
	return {$: 'GeneralDirectoryMsg', a: a};
};
var author$project$MurolAdmin$NewsEditorMsg = function (a) {
	return {$: 'NewsEditorMsg', a: a};
};
var author$project$MurolAdmin$PageEditorMsg = function (a) {
	return {$: 'PageEditorMsg', a: a};
};
var author$project$MurolAdmin$PageTreeEditorMsg = function (a) {
	return {$: 'PageTreeEditorMsg', a: a};
};
var author$project$MurolAdmin$SetZone = function (a) {
	return {$: 'SetZone', a: a};
};
var author$project$MurolAdmin$WaitingForLogin = {$: 'WaitingForLogin'};
var author$project$NewsEditor$NewsEditor$NewsSelector = {$: 'NewsSelector'};
var author$project$NewsEditor$NewsEditor$TextBlockPluginMsg = function (a) {
	return {$: 'TextBlockPluginMsg', a: a};
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$Heading = function (a) {
	return {$: 'Heading', a: a};
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$defmeta = F2(
	function (uid, value) {
		return {start: 0, stop: 0, uid: uid, value: value};
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$ExternalLink = function (a) {
	return {$: 'ExternalLink', a: a};
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$InlineStyled = {$: 'InlineStyled'};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$InternalLink = F2(
	function (a, b) {
		return {$: 'InternalLink', a: a, b: b};
	});
var elm$core$String$startsWith = _String_startsWith;
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$fromTextBlocPrimitive = F2(
	function (nextUid, tbp) {
		if (tbp.$ === 'Text') {
			if (!tbp.a.b) {
				var s = tbp.b;
				return {nextUid: nextUid, resultString: s, trackedData: _List_Nil};
			} else {
				var attrs = tbp.a;
				var s = tbp.b;
				return {
					nextUid: nextUid + 1,
					resultString: '< style ' + (elm$core$String$fromInt(nextUid) + (' > ' + (s + ' </>'))),
					trackedData: _List_fromArray(
						[
							_Utils_Tuple2(
							nextUid,
							{
								attrs: attrs,
								dataKind: author$project$PageEditor$EditorPlugins$TextBlockPlugin$InlineStyled,
								meta: A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$defmeta, nextUid, s)
							})
						])
				};
			}
		} else {
			var attrs = tbp.a;
			var targetBlank = tbp.b.targetBlank;
			var url = tbp.b.url;
			var label = tbp.b.label;
			return {
				nextUid: nextUid + 1,
				resultString: (targetBlank ? '< lien-externe ' : '< lien-interne ') + (elm$core$String$fromInt(nextUid) + (' > ' + (label + ' </>'))),
				trackedData: _List_fromArray(
					[
						_Utils_Tuple2(
						nextUid,
						{
							attrs: attrs,
							dataKind: targetBlank ? author$project$PageEditor$EditorPlugins$TextBlockPlugin$ExternalLink(url) : A2(
								author$project$PageEditor$EditorPlugins$TextBlockPlugin$InternalLink,
								A2(elm$core$String$startsWith, '/baseDocumentaire', url),
								url),
							meta: A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$defmeta, nextUid, label)
						})
					])
			};
		}
	});
var elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							elm$core$List$foldl,
							fn,
							acc,
							elm$core$List$reverse(r4)) : A4(elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4(elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$fromTextBlocElement = F2(
	function (nextUid_, tbe) {
		switch (tbe.$) {
			case 'Paragraph':
				var tbps = tbe.b;
				return function (res) {
					return _Utils_update(
						res,
						{resultString: res.resultString + '\n\n'});
				}(
					A3(
						elm$core$List$foldr,
						F2(
							function (tbp, _n1) {
								var resultString = _n1.resultString;
								var trackedData = _n1.trackedData;
								var nextUid = _n1.nextUid;
								var newProcessedInput = A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$fromTextBlocPrimitive, nextUid, tbp);
								return {
									nextUid: nextUid + elm$core$List$length(newProcessedInput.trackedData),
									resultString: newProcessedInput.resultString + (' ' + resultString),
									trackedData: _Utils_ap(newProcessedInput.trackedData, trackedData)
								};
							}),
						{nextUid: nextUid_, resultString: '', trackedData: _List_Nil},
						tbps));
			case 'UList':
				var tbps = tbe.b;
				var processLi = F2(
					function (li, nextUid__) {
						return function (res) {
							return _Utils_update(
								res,
								{resultString: '* ' + (res.resultString + '\n')});
						}(
							A3(
								elm$core$List$foldr,
								F2(
									function (tbp, _n3) {
										var resultString = _n3.resultString;
										var trackedData = _n3.trackedData;
										var nextUid = _n3.nextUid;
										var newProcessedInput = A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$fromTextBlocPrimitive, nextUid, tbp);
										return {
											nextUid: nextUid + elm$core$List$length(newProcessedInput.trackedData),
											resultString: newProcessedInput.resultString + (' ' + resultString),
											trackedData: _Utils_ap(newProcessedInput.trackedData, trackedData)
										};
									}),
								{nextUid: nextUid__, resultString: '', trackedData: _List_Nil},
								li));
					});
				return A3(
					elm$core$List$foldr,
					F2(
						function (li, _n2) {
							var resultString = _n2.resultString;
							var trackedData = _n2.trackedData;
							var nextUid = _n2.nextUid;
							var newProcessedInput = A2(processLi, li, nextUid);
							return {
								nextUid: nextUid + newProcessedInput.nextUid,
								resultString: _Utils_ap(newProcessedInput.resultString, resultString),
								trackedData: _Utils_ap(newProcessedInput.trackedData, trackedData)
							};
						}),
					{nextUid: nextUid_, resultString: '', trackedData: _List_Nil},
					tbps);
			case 'Heading':
				var _n4 = tbe.b;
				var level = _n4.a;
				var value = _n4.b;
				return {
					nextUid: nextUid_ + 1,
					resultString: '< titre ' + (elm$core$String$fromInt(nextUid_) + (' > ' + (value + ' </>\n'))),
					trackedData: _List_fromArray(
						[
							_Utils_Tuple2(
							nextUid_,
							{
								attrs: _List_Nil,
								dataKind: author$project$PageEditor$EditorPlugins$TextBlockPlugin$Heading(level),
								meta: A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$defmeta, nextUid_, value)
							})
						])
				};
			default:
				var prim = tbe.a;
				return A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$fromTextBlocPrimitive, nextUid_, prim);
		}
	});
var elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			elm$core$String$join,
			after,
			A2(elm$core$String$split, before, string));
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$fromTextBloc = function (tbes) {
	var fixSymbols = function (s) {
		return A3(
			elm$core$String$replace,
			' </> ,',
			'</> ,',
			A3(elm$core$String$replace, ' </> .', '</> .', s));
	};
	return function (res) {
		return _Utils_update(
			res,
			{
				resultString: fixSymbols(res.resultString)
			});
	}(
		A3(
			elm$core$List$foldr,
			F2(
				function (tbe, _n0) {
					var resultString = _n0.resultString;
					var trackedData = _n0.trackedData;
					var nextUid = _n0.nextUid;
					var newProcessedInput = A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$fromTextBlocElement, nextUid, tbe);
					return {
						nextUid: nextUid + elm$core$List$length(newProcessedInput.trackedData),
						resultString: newProcessedInput.resultString + (' ' + resultString),
						trackedData: _Utils_ap(newProcessedInput.trackedData, trackedData)
					};
				}),
			{nextUid: 0, resultString: '', trackedData: _List_Nil},
			tbes));
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$HeadingElement = function (a) {
	return {$: 'HeadingElement', a: a};
};
var elm$parser$Parser$Expecting = function (a) {
	return {$: 'Expecting', a: a};
};
var elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 'Token', a: a, b: b};
	});
var elm$parser$Parser$toToken = function (str) {
	return A2(
		elm$parser$Parser$Advanced$Token,
		str,
		elm$parser$Parser$Expecting(str));
};
var elm$core$Basics$negate = function (n) {
	return -n;
};
var elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 'Bad', a: a, b: b};
	});
var elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 'Good', a: a, b: b, c: c};
	});
var elm$parser$Parser$Advanced$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
var elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 'AddRight', a: a, b: b};
	});
var elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {col: col, contextStack: contextStack, problem: problem, row: row};
	});
var elm$parser$Parser$Advanced$Empty = {$: 'Empty'};
var elm$parser$Parser$Advanced$fromInfo = F4(
	function (row, col, x, context) {
		return A2(
			elm$parser$Parser$Advanced$AddRight,
			elm$parser$Parser$Advanced$Empty,
			A4(elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var elm$parser$Parser$Advanced$chompUntil = function (_n0) {
	var str = _n0.a;
	var expecting = _n0.b;
	return elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _n1 = A5(elm$parser$Parser$Advanced$findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _n1.a;
			var newRow = _n1.b;
			var newCol = _n1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				elm$parser$Parser$Advanced$Bad,
				false,
				A4(elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.context)) : A3(
				elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, newOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var elm$parser$Parser$chompUntil = function (str) {
	return elm$parser$Parser$Advanced$chompUntil(
		elm$parser$Parser$toToken(str));
};
var elm$parser$Parser$ExpectingEnd = {$: 'ExpectingEnd'};
var elm$core$String$length = _String_length;
var elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			elm$parser$Parser$Advanced$AddRight,
			elm$parser$Parser$Advanced$Empty,
			A4(elm$parser$Parser$Advanced$DeadEnd, s.row, s.col, x, s.context));
	});
var elm$parser$Parser$Advanced$end = function (x) {
	return elm$parser$Parser$Advanced$Parser(
		function (s) {
			return _Utils_eq(
				elm$core$String$length(s.src),
				s.offset) ? A3(elm$parser$Parser$Advanced$Good, false, _Utils_Tuple0, s) : A2(
				elm$parser$Parser$Advanced$Bad,
				false,
				A2(elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var elm$parser$Parser$end = elm$parser$Parser$Advanced$end(elm$parser$Parser$ExpectingEnd);
var elm$core$Basics$always = F2(
	function (a, _n0) {
		return a;
	});
var elm$core$String$slice = _String_slice;
var elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _n0) {
		var parse = _n0.a;
		return elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _n1 = parse(s0);
				if (_n1.$ === 'Bad') {
					var p = _n1.a;
					var x = _n1.b;
					return A2(elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p = _n1.a;
					var a = _n1.b;
					var s1 = _n1.c;
					return A3(
						elm$parser$Parser$Advanced$Good,
						p,
						A2(
							func,
							A3(elm$core$String$slice, s0.offset, s1.offset, s0.src),
							a),
						s1);
				}
			});
	});
var elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2(elm$parser$Parser$Advanced$mapChompedString, elm$core$Basics$always, parser);
};
var elm$parser$Parser$getChompedString = elm$parser$Parser$Advanced$getChompedString;
var elm$parser$Parser$Advanced$getOffset = elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3(elm$parser$Parser$Advanced$Good, false, s.offset, s);
	});
var elm$parser$Parser$getOffset = elm$parser$Parser$Advanced$getOffset;
var elm$parser$Parser$Advanced$map2 = F3(
	function (func, _n0, _n1) {
		var parseA = _n0.a;
		var parseB = _n1.a;
		return elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _n2 = parseA(s0);
				if (_n2.$ === 'Bad') {
					var p = _n2.a;
					var x = _n2.b;
					return A2(elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _n2.a;
					var a = _n2.b;
					var s1 = _n2.c;
					var _n3 = parseB(s1);
					if (_n3.$ === 'Bad') {
						var p2 = _n3.a;
						var x = _n3.b;
						return A2(elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _n3.a;
						var b = _n3.b;
						var s2 = _n3.c;
						return A3(
							elm$parser$Parser$Advanced$Good,
							p1 || p2,
							A2(func, a, b),
							s2);
					}
				}
			});
	});
var elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3(elm$parser$Parser$Advanced$map2, elm$core$Basics$always, keepParser, ignoreParser);
	});
var elm$parser$Parser$ignorer = elm$parser$Parser$Advanced$ignorer;
var elm$parser$Parser$ExpectingInt = {$: 'ExpectingInt'};
var elm$parser$Parser$Advanced$consumeBase = _Parser_consumeBase;
var elm$parser$Parser$Advanced$consumeBase16 = _Parser_consumeBase16;
var elm$core$String$toFloat = _String_toFloat;
var elm$parser$Parser$Advanced$bumpOffset = F2(
	function (newOffset, s) {
		return {col: s.col + (newOffset - s.offset), context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src};
	});
var elm$parser$Parser$Advanced$chompBase10 = _Parser_chompBase10;
var elm$parser$Parser$Advanced$isAsciiCode = _Parser_isAsciiCode;
var elm$parser$Parser$Advanced$consumeExp = F2(
	function (offset, src) {
		if (A3(elm$parser$Parser$Advanced$isAsciiCode, 101, offset, src) || A3(elm$parser$Parser$Advanced$isAsciiCode, 69, offset, src)) {
			var eOffset = offset + 1;
			var expOffset = (A3(elm$parser$Parser$Advanced$isAsciiCode, 43, eOffset, src) || A3(elm$parser$Parser$Advanced$isAsciiCode, 45, eOffset, src)) ? (eOffset + 1) : eOffset;
			var newOffset = A2(elm$parser$Parser$Advanced$chompBase10, expOffset, src);
			return _Utils_eq(expOffset, newOffset) ? (-newOffset) : newOffset;
		} else {
			return offset;
		}
	});
var elm$parser$Parser$Advanced$consumeDotAndExp = F2(
	function (offset, src) {
		return A3(elm$parser$Parser$Advanced$isAsciiCode, 46, offset, src) ? A2(
			elm$parser$Parser$Advanced$consumeExp,
			A2(elm$parser$Parser$Advanced$chompBase10, offset + 1, src),
			src) : A2(elm$parser$Parser$Advanced$consumeExp, offset, src);
	});
var elm$parser$Parser$Advanced$finalizeInt = F5(
	function (invalid, handler, startOffset, _n0, s) {
		var endOffset = _n0.a;
		var n = _n0.b;
		if (handler.$ === 'Err') {
			var x = handler.a;
			return A2(
				elm$parser$Parser$Advanced$Bad,
				true,
				A2(elm$parser$Parser$Advanced$fromState, s, x));
		} else {
			var toValue = handler.a;
			return _Utils_eq(startOffset, endOffset) ? A2(
				elm$parser$Parser$Advanced$Bad,
				_Utils_cmp(s.offset, startOffset) < 0,
				A2(elm$parser$Parser$Advanced$fromState, s, invalid)) : A3(
				elm$parser$Parser$Advanced$Good,
				true,
				toValue(n),
				A2(elm$parser$Parser$Advanced$bumpOffset, endOffset, s));
		}
	});
var elm$parser$Parser$Advanced$finalizeFloat = F6(
	function (invalid, expecting, intSettings, floatSettings, intPair, s) {
		var intOffset = intPair.a;
		var floatOffset = A2(elm$parser$Parser$Advanced$consumeDotAndExp, intOffset, s.src);
		if (floatOffset < 0) {
			return A2(
				elm$parser$Parser$Advanced$Bad,
				true,
				A4(elm$parser$Parser$Advanced$fromInfo, s.row, s.col - (floatOffset + s.offset), invalid, s.context));
		} else {
			if (_Utils_eq(s.offset, floatOffset)) {
				return A2(
					elm$parser$Parser$Advanced$Bad,
					false,
					A2(elm$parser$Parser$Advanced$fromState, s, expecting));
			} else {
				if (_Utils_eq(intOffset, floatOffset)) {
					return A5(elm$parser$Parser$Advanced$finalizeInt, invalid, intSettings, s.offset, intPair, s);
				} else {
					if (floatSettings.$ === 'Err') {
						var x = floatSettings.a;
						return A2(
							elm$parser$Parser$Advanced$Bad,
							true,
							A2(elm$parser$Parser$Advanced$fromState, s, invalid));
					} else {
						var toValue = floatSettings.a;
						var _n1 = elm$core$String$toFloat(
							A3(elm$core$String$slice, s.offset, floatOffset, s.src));
						if (_n1.$ === 'Nothing') {
							return A2(
								elm$parser$Parser$Advanced$Bad,
								true,
								A2(elm$parser$Parser$Advanced$fromState, s, invalid));
						} else {
							var n = _n1.a;
							return A3(
								elm$parser$Parser$Advanced$Good,
								true,
								toValue(n),
								A2(elm$parser$Parser$Advanced$bumpOffset, floatOffset, s));
						}
					}
				}
			}
		}
	});
var elm$parser$Parser$Advanced$number = function (c) {
	return elm$parser$Parser$Advanced$Parser(
		function (s) {
			if (A3(elm$parser$Parser$Advanced$isAsciiCode, 48, s.offset, s.src)) {
				var zeroOffset = s.offset + 1;
				var baseOffset = zeroOffset + 1;
				return A3(elm$parser$Parser$Advanced$isAsciiCode, 120, zeroOffset, s.src) ? A5(
					elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.hex,
					baseOffset,
					A2(elm$parser$Parser$Advanced$consumeBase16, baseOffset, s.src),
					s) : (A3(elm$parser$Parser$Advanced$isAsciiCode, 111, zeroOffset, s.src) ? A5(
					elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.octal,
					baseOffset,
					A3(elm$parser$Parser$Advanced$consumeBase, 8, baseOffset, s.src),
					s) : (A3(elm$parser$Parser$Advanced$isAsciiCode, 98, zeroOffset, s.src) ? A5(
					elm$parser$Parser$Advanced$finalizeInt,
					c.invalid,
					c.binary,
					baseOffset,
					A3(elm$parser$Parser$Advanced$consumeBase, 2, baseOffset, s.src),
					s) : A6(
					elm$parser$Parser$Advanced$finalizeFloat,
					c.invalid,
					c.expecting,
					c._int,
					c._float,
					_Utils_Tuple2(zeroOffset, 0),
					s)));
			} else {
				return A6(
					elm$parser$Parser$Advanced$finalizeFloat,
					c.invalid,
					c.expecting,
					c._int,
					c._float,
					A3(elm$parser$Parser$Advanced$consumeBase, 10, s.offset, s.src),
					s);
			}
		});
};
var elm$parser$Parser$Advanced$int = F2(
	function (expecting, invalid) {
		return elm$parser$Parser$Advanced$number(
			{
				binary: elm$core$Result$Err(invalid),
				expecting: expecting,
				_float: elm$core$Result$Err(invalid),
				hex: elm$core$Result$Err(invalid),
				_int: elm$core$Result$Ok(elm$core$Basics$identity),
				invalid: invalid,
				octal: elm$core$Result$Err(invalid)
			});
	});
var elm$parser$Parser$int = A2(elm$parser$Parser$Advanced$int, elm$parser$Parser$ExpectingInt, elm$parser$Parser$ExpectingInt);
var elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3(elm$parser$Parser$Advanced$map2, elm$core$Basics$apL, parseFunc, parseArg);
	});
var elm$parser$Parser$keeper = elm$parser$Parser$Advanced$keeper;
var elm$parser$Parser$ExpectingKeyword = function (a) {
	return {$: 'ExpectingKeyword', a: a};
};
var elm$core$Basics$not = _Basics_not;
var elm$core$String$isEmpty = function (string) {
	return string === '';
};
var elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var elm$parser$Parser$Advanced$keyword = function (_n0) {
	var kwd = _n0.a;
	var expecting = _n0.b;
	var progress = !elm$core$String$isEmpty(kwd);
	return elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _n1 = A5(elm$parser$Parser$Advanced$isSubString, kwd, s.offset, s.row, s.col, s.src);
			var newOffset = _n1.a;
			var newRow = _n1.b;
			var newCol = _n1.c;
			return (_Utils_eq(newOffset, -1) || (0 <= A3(
				elm$parser$Parser$Advanced$isSubChar,
				function (c) {
					return elm$core$Char$isAlphaNum(c) || _Utils_eq(
						c,
						_Utils_chr('_'));
				},
				newOffset,
				s.src))) ? A2(
				elm$parser$Parser$Advanced$Bad,
				false,
				A2(elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var elm$parser$Parser$keyword = function (kwd) {
	return elm$parser$Parser$Advanced$keyword(
		A2(
			elm$parser$Parser$Advanced$Token,
			kwd,
			elm$parser$Parser$ExpectingKeyword(kwd)));
};
var elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 'Append', a: a, b: b};
	});
var elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2(elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a.a;
				var remainingParsers = parsers.b;
				var _n1 = parse(s0);
				if (_n1.$ === 'Good') {
					var step = _n1;
					return step;
				} else {
					var step = _n1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2(elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3(elm$parser$Parser$Advanced$oneOfHelp, s, elm$parser$Parser$Advanced$Empty, parsers);
		});
};
var elm$parser$Parser$oneOf = elm$parser$Parser$Advanced$oneOf;
var elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3(elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.src);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.offset, offset) < 0,
					_Utils_Tuple0,
					{col: col, context: s0.context, indent: s0.indent, offset: offset, row: row, src: s0.src});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A5(elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.offset, s.row, s.col, s);
		});
};
var elm$parser$Parser$Advanced$spaces = elm$parser$Parser$Advanced$chompWhile(
	function (c) {
		return _Utils_eq(
			c,
			_Utils_chr(' ')) || (_Utils_eq(
			c,
			_Utils_chr('\n')) || _Utils_eq(
			c,
			_Utils_chr('\r')));
	});
var elm$parser$Parser$spaces = elm$parser$Parser$Advanced$spaces;
var elm$parser$Parser$Advanced$succeed = function (a) {
	return elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3(elm$parser$Parser$Advanced$Good, false, a, s);
		});
};
var elm$parser$Parser$succeed = elm$parser$Parser$Advanced$succeed;
var elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 'ExpectingSymbol', a: a};
};
var elm$parser$Parser$Advanced$token = function (_n0) {
	var str = _n0.a;
	var expecting = _n0.b;
	var progress = !elm$core$String$isEmpty(str);
	return elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _n1 = A5(elm$parser$Parser$Advanced$isSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _n1.a;
			var newRow = _n1.b;
			var newCol = _n1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				elm$parser$Parser$Advanced$Bad,
				false,
				A2(elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var elm$parser$Parser$Advanced$symbol = elm$parser$Parser$Advanced$token;
var elm$parser$Parser$symbol = function (str) {
	return elm$parser$Parser$Advanced$symbol(
		A2(
			elm$parser$Parser$Advanced$Token,
			str,
			elm$parser$Parser$ExpectingSymbol(str)));
};
var elm$parser$Parser$token = function (str) {
	return elm$parser$Parser$Advanced$token(
		elm$parser$Parser$toToken(str));
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$heading = A2(
	elm$parser$Parser$keeper,
	A2(
		elm$parser$Parser$keeper,
		A2(
			elm$parser$Parser$keeper,
			A2(
				elm$parser$Parser$keeper,
				A2(
					elm$parser$Parser$ignorer,
					elm$parser$Parser$succeed(
						F4(
							function (start, uid, val, stop) {
								return author$project$PageEditor$EditorPlugins$TextBlockPlugin$HeadingElement(
									{start: start, stop: stop, uid: uid, value: val});
							})),
					elm$parser$Parser$spaces),
				A2(
					elm$parser$Parser$ignorer,
					A2(
						elm$parser$Parser$ignorer,
						A2(
							elm$parser$Parser$ignorer,
							A2(
								elm$parser$Parser$ignorer,
								elm$parser$Parser$getOffset,
								elm$parser$Parser$symbol('<')),
							elm$parser$Parser$spaces),
						elm$parser$Parser$token('titre')),
					elm$parser$Parser$spaces)),
			A2(
				elm$parser$Parser$ignorer,
				A2(elm$parser$Parser$ignorer, elm$parser$Parser$int, elm$parser$Parser$spaces),
				elm$parser$Parser$symbol('>'))),
		A2(
			elm$parser$Parser$ignorer,
			elm$parser$Parser$getChompedString(
				elm$parser$Parser$chompUntil('<')),
			elm$parser$Parser$keyword('</>'))),
	A2(
		elm$parser$Parser$ignorer,
		elm$parser$Parser$getOffset,
		elm$parser$Parser$oneOf(
			_List_fromArray(
				[elm$parser$Parser$end, elm$parser$Parser$spaces]))));
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$ParagraphElement = function (a) {
	return {$: 'ParagraphElement', a: a};
};
var elm$parser$Parser$chompWhile = elm$parser$Parser$Advanced$chompWhile;
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$reallyspaces = elm$parser$Parser$chompWhile(
	function (c) {
		return _Utils_eq(
			c,
			_Utils_chr(' '));
	});
var elm$parser$Parser$Advanced$backtrackable = function (_n0) {
	var parse = _n0.a;
	return elm$parser$Parser$Advanced$Parser(
		function (s0) {
			var _n1 = parse(s0);
			if (_n1.$ === 'Bad') {
				var x = _n1.b;
				return A2(elm$parser$Parser$Advanced$Bad, false, x);
			} else {
				var a = _n1.b;
				var s1 = _n1.c;
				return A3(elm$parser$Parser$Advanced$Good, false, a, s1);
			}
		});
};
var elm$parser$Parser$backtrackable = elm$parser$Parser$Advanced$backtrackable;
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$break = elm$parser$Parser$backtrackable(
	A2(
		elm$parser$Parser$ignorer,
		A2(
			elm$parser$Parser$ignorer,
			A2(
				elm$parser$Parser$ignorer,
				elm$parser$Parser$succeed(_Utils_Tuple0),
				author$project$PageEditor$EditorPlugins$TextBlockPlugin$reallyspaces),
			elm$parser$Parser$keyword('\n')),
		elm$parser$Parser$spaces));
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$TextPrimitive = function (a) {
	return {$: 'TextPrimitive', a: a};
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$groupWordsIntoText = function (prims) {
	var helper = F3(
		function (buffer, acc, xs) {
			helper:
			while (true) {
				if (!xs.b) {
					if (!buffer.b) {
						return elm$core$List$reverse(acc);
					} else {
						return function (nw) {
							return elm$core$List$reverse(
								A2(elm$core$List$cons, nw, acc));
						}(
							author$project$PageEditor$EditorPlugins$TextBlockPlugin$TextPrimitive(
								A2(
									elm$core$String$join,
									' ',
									elm$core$List$reverse(buffer))));
					}
				} else {
					var x = xs.a;
					var xs_ = xs.b;
					if (x.$ === 'WordPrimitive') {
						var w = x.a;
						var $temp$buffer = A2(elm$core$List$cons, w, buffer),
							$temp$acc = acc,
							$temp$xs = xs_;
						buffer = $temp$buffer;
						acc = $temp$acc;
						xs = $temp$xs;
						continue helper;
					} else {
						if (!buffer.b) {
							var $temp$buffer = buffer,
								$temp$acc = A2(elm$core$List$cons, x, acc),
								$temp$xs = xs_;
							buffer = $temp$buffer;
							acc = $temp$acc;
							xs = $temp$xs;
							continue helper;
						} else {
							var $temp$buffer = _List_Nil,
								$temp$acc = function (nw) {
								return A2(
									elm$core$List$cons,
									x,
									A2(elm$core$List$cons, nw, acc));
							}(
								author$project$PageEditor$EditorPlugins$TextBlockPlugin$TextPrimitive(
									A2(
										elm$core$String$join,
										' ',
										elm$core$List$reverse(buffer)))),
								$temp$xs = xs_;
							buffer = $temp$buffer;
							acc = $temp$acc;
							xs = $temp$xs;
							continue helper;
						}
					}
				}
			}
		});
	return A3(helper, _List_Nil, _List_Nil, prims);
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$ExternalLinkPrimitive = function (a) {
	return {$: 'ExternalLinkPrimitive', a: a};
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$externalLink = A2(
	elm$parser$Parser$keeper,
	A2(
		elm$parser$Parser$keeper,
		A2(
			elm$parser$Parser$keeper,
			A2(
				elm$parser$Parser$keeper,
				A2(
					elm$parser$Parser$ignorer,
					elm$parser$Parser$succeed(
						F4(
							function (start, uid, val, stop) {
								return author$project$PageEditor$EditorPlugins$TextBlockPlugin$ExternalLinkPrimitive(
									{start: start, stop: stop, uid: uid, value: val});
							})),
					elm$parser$Parser$spaces),
				A2(
					elm$parser$Parser$ignorer,
					A2(
						elm$parser$Parser$ignorer,
						A2(
							elm$parser$Parser$ignorer,
							A2(
								elm$parser$Parser$ignorer,
								elm$parser$Parser$getOffset,
								elm$parser$Parser$symbol('<')),
							elm$parser$Parser$spaces),
						elm$parser$Parser$keyword('lien-externe')),
					elm$parser$Parser$spaces)),
			A2(
				elm$parser$Parser$ignorer,
				A2(elm$parser$Parser$ignorer, elm$parser$Parser$int, elm$parser$Parser$spaces),
				elm$parser$Parser$symbol('>'))),
		A2(
			elm$parser$Parser$ignorer,
			elm$parser$Parser$getChompedString(
				elm$parser$Parser$chompUntil('<')),
			elm$parser$Parser$keyword('</>'))),
	elm$parser$Parser$getOffset);
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$InlineStylePrimitive = function (a) {
	return {$: 'InlineStylePrimitive', a: a};
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$inlineStyle = A2(
	elm$parser$Parser$keeper,
	A2(
		elm$parser$Parser$keeper,
		A2(
			elm$parser$Parser$keeper,
			A2(
				elm$parser$Parser$keeper,
				A2(
					elm$parser$Parser$ignorer,
					elm$parser$Parser$succeed(
						F4(
							function (start, uid, val, stop) {
								return author$project$PageEditor$EditorPlugins$TextBlockPlugin$InlineStylePrimitive(
									{start: start, stop: stop, uid: uid, value: val});
							})),
					elm$parser$Parser$spaces),
				A2(
					elm$parser$Parser$ignorer,
					A2(
						elm$parser$Parser$ignorer,
						A2(
							elm$parser$Parser$ignorer,
							A2(
								elm$parser$Parser$ignorer,
								elm$parser$Parser$getOffset,
								elm$parser$Parser$symbol('<')),
							elm$parser$Parser$spaces),
						elm$parser$Parser$keyword('style')),
					elm$parser$Parser$spaces)),
			A2(
				elm$parser$Parser$ignorer,
				A2(elm$parser$Parser$ignorer, elm$parser$Parser$int, elm$parser$Parser$spaces),
				elm$parser$Parser$symbol('>'))),
		A2(
			elm$parser$Parser$ignorer,
			elm$parser$Parser$getChompedString(
				elm$parser$Parser$chompUntil('<')),
			elm$parser$Parser$keyword('</>'))),
	elm$parser$Parser$getOffset);
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$InternalLinkPrimitive = function (a) {
	return {$: 'InternalLinkPrimitive', a: a};
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$internalLink = A2(
	elm$parser$Parser$keeper,
	A2(
		elm$parser$Parser$keeper,
		A2(
			elm$parser$Parser$keeper,
			A2(
				elm$parser$Parser$keeper,
				A2(
					elm$parser$Parser$ignorer,
					elm$parser$Parser$succeed(
						F4(
							function (start, uid, val, stop) {
								return author$project$PageEditor$EditorPlugins$TextBlockPlugin$InternalLinkPrimitive(
									{start: start, stop: stop, uid: uid, value: val});
							})),
					elm$parser$Parser$spaces),
				A2(
					elm$parser$Parser$ignorer,
					A2(
						elm$parser$Parser$ignorer,
						A2(
							elm$parser$Parser$ignorer,
							A2(
								elm$parser$Parser$ignorer,
								elm$parser$Parser$getOffset,
								elm$parser$Parser$symbol('<')),
							elm$parser$Parser$spaces),
						elm$parser$Parser$keyword('lien-interne')),
					elm$parser$Parser$spaces)),
			A2(
				elm$parser$Parser$ignorer,
				A2(elm$parser$Parser$ignorer, elm$parser$Parser$int, elm$parser$Parser$spaces),
				elm$parser$Parser$symbol('>'))),
		A2(
			elm$parser$Parser$ignorer,
			elm$parser$Parser$getChompedString(
				elm$parser$Parser$chompUntil('<')),
			elm$parser$Parser$keyword('</>'))),
	elm$parser$Parser$getOffset);
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$allPrimitivesButText = elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			elm$parser$Parser$backtrackable(author$project$PageEditor$EditorPlugins$TextBlockPlugin$internalLink),
			elm$parser$Parser$backtrackable(author$project$PageEditor$EditorPlugins$TextBlockPlugin$externalLink),
			author$project$PageEditor$EditorPlugins$TextBlockPlugin$inlineStyle
		]));
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$WordPrimitive = function (a) {
	return {$: 'WordPrimitive', a: a};
};
var elm$parser$Parser$Advanced$map = F2(
	function (func, _n0) {
		var parse = _n0.a;
		return elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _n1 = parse(s0);
				if (_n1.$ === 'Good') {
					var p = _n1.a;
					var a = _n1.b;
					var s1 = _n1.c;
					return A3(
						elm$parser$Parser$Advanced$Good,
						p,
						func(a),
						s1);
				} else {
					var p = _n1.a;
					var x = _n1.b;
					return A2(elm$parser$Parser$Advanced$Bad, p, x);
				}
			});
	});
var elm$parser$Parser$map = elm$parser$Parser$Advanced$map;
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$word = A2(
	elm$parser$Parser$map,
	author$project$PageEditor$EditorPlugins$TextBlockPlugin$WordPrimitive,
	A2(
		elm$parser$Parser$keeper,
		A2(
			elm$parser$Parser$ignorer,
			elm$parser$Parser$succeed(elm$core$Basics$identity),
			elm$parser$Parser$spaces),
		elm$parser$Parser$getChompedString(
			elm$parser$Parser$chompWhile(
				function (c) {
					return !(_Utils_eq(
						c,
						_Utils_chr(' ')) || (_Utils_eq(
						c,
						_Utils_chr('\t')) || _Utils_eq(
						c,
						_Utils_chr('\n'))));
				}))));
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$primitive = elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			elm$parser$Parser$backtrackable(author$project$PageEditor$EditorPlugins$TextBlockPlugin$allPrimitivesButText),
			author$project$PageEditor$EditorPlugins$TextBlockPlugin$word
		]));
var elm$parser$Parser$Done = function (a) {
	return {$: 'Done', a: a};
};
var elm$parser$Parser$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 'Done', a: a};
};
var elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var elm$parser$Parser$toAdvancedStep = function (step) {
	if (step.$ === 'Loop') {
		var s = step.a;
		return elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return elm$parser$Parser$Advanced$Done(a);
	}
};
var elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _n0 = callback(state);
			var parse = _n0.a;
			var _n1 = parse(s0);
			if (_n1.$ === 'Good') {
				var p1 = _n1.a;
				var step = _n1.b;
				var s1 = _n1.c;
				if (step.$ === 'Loop') {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3(elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _n1.a;
				var x = _n1.b;
				return A2(elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return elm$parser$Parser$Advanced$Parser(
			function (s) {
				return A4(elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
			});
	});
var elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					elm$parser$Parser$map,
					elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$paragraph = function () {
	var helper = function (prims) {
		return elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					elm$parser$Parser$map,
					function (_n0) {
						return elm$parser$Parser$Done(
							elm$core$List$reverse(prims));
					},
					author$project$PageEditor$EditorPlugins$TextBlockPlugin$break),
					A2(
					elm$parser$Parser$map,
					function (_n1) {
						return elm$parser$Parser$Done(
							elm$core$List$reverse(prims));
					},
					elm$parser$Parser$end),
					A2(
					elm$parser$Parser$keeper,
					elm$parser$Parser$succeed(
						function (p) {
							return elm$parser$Parser$Loop(
								A2(elm$core$List$cons, p, prims));
						}),
					author$project$PageEditor$EditorPlugins$TextBlockPlugin$primitive)
				]));
	};
	return A2(
		elm$parser$Parser$map,
		author$project$PageEditor$EditorPlugins$TextBlockPlugin$ParagraphElement,
		A2(
			elm$parser$Parser$map,
			author$project$PageEditor$EditorPlugins$TextBlockPlugin$groupWordsIntoText,
			A2(elm$parser$Parser$loop, _List_Nil, helper)));
}();
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$UListElement = function (a) {
	return {$: 'UListElement', a: a};
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$uList = function () {
	var helper = function (prims) {
		return elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					elm$parser$Parser$map,
					function (_n0) {
						return elm$parser$Parser$Done(
							elm$core$List$reverse(prims));
					},
					author$project$PageEditor$EditorPlugins$TextBlockPlugin$break),
					A2(
					elm$parser$Parser$map,
					function (_n1) {
						return elm$parser$Parser$Done(
							elm$core$List$reverse(prims));
					},
					elm$parser$Parser$end),
					A2(
					elm$parser$Parser$keeper,
					elm$parser$Parser$succeed(
						function (p) {
							return elm$parser$Parser$Loop(
								A2(elm$core$List$cons, p, prims));
						}),
					author$project$PageEditor$EditorPlugins$TextBlockPlugin$primitive)
				]));
	};
	return A2(
		elm$parser$Parser$map,
		author$project$PageEditor$EditorPlugins$TextBlockPlugin$UListElement,
		A2(
			elm$parser$Parser$keeper,
			A2(
				elm$parser$Parser$ignorer,
				A2(
					elm$parser$Parser$ignorer,
					A2(
						elm$parser$Parser$ignorer,
						elm$parser$Parser$succeed(elm$core$Basics$identity),
						elm$parser$Parser$spaces),
					elm$parser$Parser$keyword('*')),
				elm$parser$Parser$spaces),
			A2(
				elm$parser$Parser$map,
				author$project$PageEditor$EditorPlugins$TextBlockPlugin$groupWordsIntoText,
				A2(elm$parser$Parser$loop, _List_Nil, helper))));
}();
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$textBlock = function () {
	var helper = function (elems) {
		return elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					elm$parser$Parser$map,
					function (_n0) {
						return elm$parser$Parser$Done(
							elm$core$List$reverse(elems));
					},
					elm$parser$Parser$end),
					elm$parser$Parser$backtrackable(
					A2(
						elm$parser$Parser$keeper,
						elm$parser$Parser$succeed(
							function (h) {
								return elm$parser$Parser$Loop(
									A2(elm$core$List$cons, h, elems));
							}),
						author$project$PageEditor$EditorPlugins$TextBlockPlugin$heading)),
					elm$parser$Parser$backtrackable(
					A2(
						elm$parser$Parser$keeper,
						elm$parser$Parser$succeed(
							function (ul) {
								return elm$parser$Parser$Loop(
									A2(elm$core$List$cons, ul, elems));
							}),
						author$project$PageEditor$EditorPlugins$TextBlockPlugin$uList)),
					A2(
					elm$parser$Parser$keeper,
					elm$parser$Parser$succeed(
						function (p) {
							return elm$parser$Parser$Loop(
								A2(elm$core$List$cons, p, elems));
						}),
					author$project$PageEditor$EditorPlugins$TextBlockPlugin$paragraph)
				]));
	};
	return A2(elm$parser$Parser$loop, _List_Nil, helper);
}();
var author$project$Document$Document$Heading = F2(
	function (a, b) {
		return {$: 'Heading', a: a, b: b};
	});
var author$project$Document$Document$Paragraph = F2(
	function (a, b) {
		return {$: 'Paragraph', a: a, b: b};
	});
var author$project$Document$Document$TBPrimitive = function (a) {
	return {$: 'TBPrimitive', a: a};
};
var author$project$Document$Document$UList = F2(
	function (a, b) {
		return {$: 'UList', a: a, b: b};
	});
var author$project$Document$Document$Link = F2(
	function (a, b) {
		return {$: 'Link', a: a, b: b};
	});
var author$project$Document$Document$Text = F2(
	function (a, b) {
		return {$: 'Text', a: a, b: b};
	});
var elm$core$Basics$compare = _Utils_compare;
var elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _n1 = A2(elm$core$Basics$compare, targetKey, key);
				switch (_n1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return elm$core$Maybe$Just(
				f(value));
		} else {
			return elm$core$Maybe$Nothing;
		}
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$toTextBlockPrimitive = F2(
	function (trackedData, prim) {
		switch (prim.$) {
			case 'ExternalLinkPrimitive':
				var uid = prim.a.uid;
				var value = prim.a.value;
				var _n1 = A2(
					elm$core$Maybe$map,
					function (td) {
						return _Utils_Tuple2(td.attrs, td.dataKind);
					},
					A2(elm$core$Dict$get, uid, trackedData));
				if ((_n1.$ === 'Just') && (_n1.a.b.$ === 'ExternalLink')) {
					var _n2 = _n1.a;
					var attrs = _n2.a;
					var url = _n2.b.a;
					return elm$core$Maybe$Just(
						A2(
							author$project$Document$Document$Link,
							attrs,
							{label: value, targetBlank: true, url: url}));
				} else {
					return elm$core$Maybe$Nothing;
				}
			case 'InternalLinkPrimitive':
				var uid = prim.a.uid;
				var value = prim.a.value;
				var _n3 = A2(
					elm$core$Maybe$map,
					function (td) {
						return _Utils_Tuple2(td.attrs, td.dataKind);
					},
					A2(elm$core$Dict$get, uid, trackedData));
				if ((_n3.$ === 'Just') && (_n3.a.b.$ === 'InternalLink')) {
					var _n4 = _n3.a;
					var attrs = _n4.a;
					var _n5 = _n4.b;
					var isFile = _n5.a;
					var url = _n5.b;
					return elm$core$Maybe$Just(
						A2(
							author$project$Document$Document$Link,
							attrs,
							{label: value, targetBlank: isFile, url: url}));
				} else {
					return elm$core$Maybe$Nothing;
				}
			case 'InlineStylePrimitive':
				var uid = prim.a.uid;
				var value = prim.a.value;
				var _n6 = A2(
					elm$core$Maybe$map,
					function (td) {
						return _Utils_Tuple2(td.attrs, td.dataKind);
					},
					A2(elm$core$Dict$get, uid, trackedData));
				if ((_n6.$ === 'Just') && (_n6.a.b.$ === 'InlineStyled')) {
					var _n7 = _n6.a;
					var attrs = _n7.a;
					var _n8 = _n7.b;
					return elm$core$Maybe$Just(
						A2(author$project$Document$Document$Text, attrs, value));
				} else {
					return elm$core$Maybe$Nothing;
				}
			case 'TextPrimitive':
				var value = prim.a;
				return elm$core$Maybe$Just(
					A2(author$project$Document$Document$Text, _List_Nil, value));
			default:
				return elm$core$Maybe$Nothing;
		}
	});
var elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _n0 = f(mx);
		if (_n0.$ === 'Just') {
			var x = _n0.a;
			return A2(elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			elm$core$List$foldr,
			elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$toTextBlocElement = F2(
	function (trackedData, elem) {
		switch (elem.$) {
			case 'ParagraphElement':
				var prims = elem.a;
				return elm$core$Maybe$Just(
					A2(
						author$project$Document$Document$Paragraph,
						_List_Nil,
						A2(
							elm$core$List$filterMap,
							author$project$PageEditor$EditorPlugins$TextBlockPlugin$toTextBlockPrimitive(trackedData),
							prims)));
			case 'UListElement':
				var prims = elem.a;
				return elm$core$Maybe$Just(
					A2(
						author$project$Document$Document$UList,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								elm$core$List$filterMap,
								author$project$PageEditor$EditorPlugins$TextBlockPlugin$toTextBlockPrimitive(trackedData),
								prims)
							])));
			case 'HeadingElement':
				var uid = elem.a.uid;
				var value = elem.a.value;
				var _n1 = A2(
					elm$core$Maybe$map,
					function (td) {
						return _Utils_Tuple2(td.attrs, td.dataKind);
					},
					A2(elm$core$Dict$get, uid, trackedData));
				if ((_n1.$ === 'Just') && (_n1.a.b.$ === 'Heading')) {
					var _n2 = _n1.a;
					var attrs = _n2.a;
					var level = _n2.b.a;
					return elm$core$Maybe$Just(
						A2(
							author$project$Document$Document$Heading,
							attrs,
							_Utils_Tuple2(level, value)));
				} else {
					return elm$core$Maybe$Nothing;
				}
			default:
				var prim = elem.a;
				return A2(
					elm$core$Maybe$map,
					author$project$Document$Document$TBPrimitive,
					A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$toTextBlockPrimitive, trackedData, prim));
		}
	});
var elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var elm$core$Dict$Black = {$: 'Black'};
var elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var elm$core$Dict$Red = {$: 'Red'};
var elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _n1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _n3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Red,
					key,
					value,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _n5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _n6 = left.d;
				var _n7 = _n6.a;
				var llK = _n6.b;
				var llV = _n6.c;
				var llLeft = _n6.d;
				var llRight = _n6.e;
				var lRight = left.e;
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Red,
					lK,
					lV,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5(elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _n1 = dict.d;
			var lClr = _n1.a;
			var lK = _n1.b;
			var lV = _n1.c;
			var lLeft = _n1.d;
			var lRight = _n1.e;
			var _n2 = dict.e;
			var rClr = _n2.a;
			var rK = _n2.b;
			var rV = _n2.c;
			var rLeft = _n2.d;
			var _n3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _n2.e;
			return A5(
				elm$core$Dict$RBNode_elm_builtin,
				elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Black,
					k,
					v,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _n4 = dict.d;
			var lClr = _n4.a;
			var lK = _n4.b;
			var lV = _n4.c;
			var lLeft = _n4.d;
			var lRight = _n4.e;
			var _n5 = dict.e;
			var rClr = _n5.a;
			var rK = _n5.b;
			var rV = _n5.c;
			var rLeft = _n5.d;
			var rRight = _n5.e;
			if (clr.$ === 'Black') {
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Black,
					k,
					v,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Black,
					k,
					v,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _n1 = dict.d;
			var lClr = _n1.a;
			var lK = _n1.b;
			var lV = _n1.c;
			var _n2 = _n1.d;
			var _n3 = _n2.a;
			var llK = _n2.b;
			var llV = _n2.c;
			var llLeft = _n2.d;
			var llRight = _n2.e;
			var lRight = _n1.e;
			var _n4 = dict.e;
			var rClr = _n4.a;
			var rK = _n4.b;
			var rV = _n4.c;
			var rLeft = _n4.d;
			var rRight = _n4.e;
			return A5(
				elm$core$Dict$RBNode_elm_builtin,
				elm$core$Dict$Red,
				lK,
				lV,
				A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _n5 = dict.d;
			var lClr = _n5.a;
			var lK = _n5.b;
			var lV = _n5.c;
			var lLeft = _n5.d;
			var lRight = _n5.e;
			var _n6 = dict.e;
			var rClr = _n6.a;
			var rK = _n6.b;
			var rV = _n6.c;
			var rLeft = _n6.d;
			var rRight = _n6.e;
			if (clr.$ === 'Black') {
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Black,
					k,
					v,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Black,
					k,
					v,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _n1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_n2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _n3 = right.a;
							var _n4 = right.d;
							var _n5 = _n4.a;
							return elm$core$Dict$moveRedRight(dict);
						} else {
							break _n2$2;
						}
					} else {
						var _n6 = right.a;
						var _n7 = right.d;
						return elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _n2$2;
				}
			}
			return dict;
		}
	});
var elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _n3 = lLeft.a;
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					elm$core$Dict$removeMin(left),
					right);
			} else {
				var _n4 = elm$core$Dict$moveRedLeft(dict);
				if (_n4.$ === 'RBNode_elm_builtin') {
					var nColor = _n4.a;
					var nKey = _n4.b;
					var nValue = _n4.c;
					var nLeft = _n4.d;
					var nRight = _n4.e;
					return A5(
						elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _n4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _n6 = lLeft.a;
						return A5(
							elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2(elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _n7 = elm$core$Dict$moveRedLeft(dict);
						if (_n7.$ === 'RBNode_elm_builtin') {
							var nColor = _n7.a;
							var nKey = _n7.b;
							var nValue = _n7.c;
							var nLeft = _n7.d;
							var nRight = _n7.e;
							return A5(
								elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2(elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2(elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7(elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _n1 = elm$core$Dict$getMin(right);
				if (_n1.$ === 'RBNode_elm_builtin') {
					var minKey = _n1.b;
					var minValue = _n1.c;
					return A5(
						elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						elm$core$Dict$removeMin(right));
				} else {
					return elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2(elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var elm$core$Dict$remove = F2(
	function (key, dict) {
		var _n0 = A2(elm$core$Dict$removeHelp, key, dict);
		if ((_n0.$ === 'RBNode_elm_builtin') && (_n0.a.$ === 'Red')) {
			var _n1 = _n0.a;
			var k = _n0.b;
			var v = _n0.c;
			var l = _n0.d;
			var r = _n0.e;
			return A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _n0;
			return x;
		}
	});
var elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, key, value, elm$core$Dict$RBEmpty_elm_builtin, elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _n1 = A2(elm$core$Basics$compare, key, nKey);
			switch (_n1.$) {
				case 'LT':
					return A5(
						elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3(elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5(elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3(elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _n0 = A3(elm$core$Dict$insertHelp, key, value, dict);
		if ((_n0.$ === 'RBNode_elm_builtin') && (_n0.a.$ === 'Red')) {
			var _n1 = _n0.a;
			var k = _n0.b;
			var v = _n0.c;
			var l = _n0.d;
			var r = _n0.e;
			return A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _n0;
			return x;
		}
	});
var elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _n0 = alter(
			A2(elm$core$Dict$get, targetKey, dictionary));
		if (_n0.$ === 'Just') {
			var value = _n0.a;
			return A3(elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2(elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3(elm$core$List$foldr, elm$core$List$cons, ys, xs);
		}
	});
var elm$core$List$concat = function (lists) {
	return A3(elm$core$List$foldr, elm$core$List$append, _List_Nil, lists);
};
var elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$updateTrackedData = F2(
	function (currentTrackedData, elems) {
		var getTrackedPrim = function (p) {
			switch (p.$) {
				case 'InternalLinkPrimitive':
					var pm = p.a;
					return elm$core$Maybe$Just(
						{
							attrs: _List_Nil,
							dataKind: A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$InternalLink, false, ''),
							meta: pm
						});
				case 'ExternalLinkPrimitive':
					var pm = p.a;
					return elm$core$Maybe$Just(
						{
							attrs: _List_Nil,
							dataKind: author$project$PageEditor$EditorPlugins$TextBlockPlugin$ExternalLink(''),
							meta: pm
						});
				case 'InlineStylePrimitive':
					var pm = p.a;
					return elm$core$Maybe$Just(
						{attrs: _List_Nil, dataKind: author$project$PageEditor$EditorPlugins$TextBlockPlugin$InlineStyled, meta: pm});
				default:
					return elm$core$Maybe$Nothing;
			}
		};
		var newTrackedDataList = elm$core$List$concat(
			A2(
				elm$core$List$filterMap,
				function (e) {
					switch (e.$) {
						case 'HeadingElement':
							var meta = e.a;
							return elm$core$Maybe$Just(
								_List_fromArray(
									[
										{
										attrs: _List_Nil,
										dataKind: author$project$PageEditor$EditorPlugins$TextBlockPlugin$Heading(1),
										meta: meta
									}
									]));
						case 'ParagraphElement':
							var xs = e.a;
							return elm$core$Maybe$Just(
								A2(elm$core$List$filterMap, getTrackedPrim, xs));
						case 'UListElement':
							var xs = e.a;
							return elm$core$Maybe$Just(
								A2(elm$core$List$filterMap, getTrackedPrim, xs));
						default:
							var p = e.a;
							return A2(
								elm$core$Maybe$map,
								function (td) {
									return _List_fromArray(
										[td]);
								},
								getTrackedPrim(p));
					}
				},
				elems));
		return function (d) {
			var newKeys = A2(
				elm$core$List$map,
				A2(
					elm$core$Basics$composeR,
					function ($) {
						return $.meta;
					},
					function ($) {
						return $.uid;
					}),
				newTrackedDataList);
			return A3(
				elm$core$List$foldr,
				F2(
					function (k, acc) {
						return (!A2(elm$core$List$member, k, newKeys)) ? A2(elm$core$Dict$remove, k, acc) : acc;
					}),
				d,
				elm$core$Dict$keys(d));
		}(
			function (tds) {
				return A3(
					elm$core$List$foldr,
					F2(
						function (_n0, acc) {
							var uid = _n0.a;
							var td = _n0.b;
							return A3(
								elm$core$Dict$update,
								uid,
								function (mbValue) {
									if (mbValue.$ === 'Nothing') {
										return elm$core$Maybe$Just(td);
									} else {
										var meta = mbValue.a.meta;
										var attrs = mbValue.a.attrs;
										var dataKind = mbValue.a.dataKind;
										return elm$core$Maybe$Just(
											{attrs: attrs, dataKind: dataKind, meta: td.meta});
									}
								},
								acc);
						}),
					currentTrackedData,
					tds);
			}(
				A2(
					elm$core$List$map,
					function (td) {
						return _Utils_Tuple2(td.meta.uid, td);
					},
					newTrackedDataList)));
	});
var elm$core$Dict$fromList = function (assocs) {
	return A3(
		elm$core$List$foldl,
		F2(
			function (_n0, dict) {
				var key = _n0.a;
				var value = _n0.b;
				return A3(elm$core$Dict$insert, key, value, dict);
			}),
		elm$core$Dict$empty,
		assocs);
};
var elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var elm$core$Platform$Cmd$map = _Platform_map;
var elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {col: col, problem: problem, row: row};
	});
var elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3(elm$parser$Parser$DeadEnd, p.row, p.col, p.problem);
};
var elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 'Empty':
					return list;
				case 'AddRight':
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2(elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2(elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var elm$parser$Parser$Advanced$run = F2(
	function (_n0, src) {
		var parse = _n0.a;
		var _n1 = parse(
			{col: 1, context: _List_Nil, indent: 1, offset: 0, row: 1, src: src});
		if (_n1.$ === 'Good') {
			var value = _n1.b;
			return elm$core$Result$Ok(value);
		} else {
			var bag = _n1.b;
			return elm$core$Result$Err(
				A2(elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var elm$parser$Parser$run = F2(
	function (parser, source) {
		var _n0 = A2(elm$parser$Parser$Advanced$run, parser, source);
		if (_n0.$ === 'Ok') {
			var a = _n0.a;
			return elm$core$Result$Ok(a);
		} else {
			var problems = _n0.a;
			return elm$core$Result$Err(
				A2(elm$core$List$map, elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$init = F3(
	function (attrs, mbInput, externalMsg) {
		var _n0 = author$project$PageEditor$EditorPlugins$TextBlockPlugin$fromTextBloc(
			A2(elm$core$Maybe$withDefault, _List_Nil, mbInput));
		var resultString = _n0.resultString;
		var trackedData = _n0.trackedData;
		var nextUid = _n0.nextUid;
		var _n1 = A2(elm$parser$Parser$run, author$project$PageEditor$EditorPlugins$TextBlockPlugin$textBlock, resultString);
		if (_n1.$ === 'Ok') {
			var res = _n1.a;
			var newTrackedData = A2(
				author$project$PageEditor$EditorPlugins$TextBlockPlugin$updateTrackedData,
				elm$core$Dict$fromList(trackedData),
				res);
			return _Utils_Tuple2(
				{
					colorPickerOpen: elm$core$Maybe$Nothing,
					currentTrackedData: elm$core$Maybe$Nothing,
					cursorPos: elm$core$Maybe$Nothing,
					externalMsg: externalMsg,
					headingLevel: elm$core$Maybe$Nothing,
					internalUrlSelectorOpen: false,
					nextUid: nextUid,
					output: A2(
						elm$core$List$filterMap,
						author$project$PageEditor$EditorPlugins$TextBlockPlugin$toTextBlocElement(newTrackedData),
						res),
					parsedInput: elm$core$Result$Ok(res),
					rawInput: resultString,
					selected: elm$core$Maybe$Nothing,
					setSelection: elm$core$Maybe$Nothing,
					trackedData: newTrackedData,
					wholeTextBlocAttr: attrs
				},
				A2(elm$core$Platform$Cmd$map, externalMsg, elm$core$Platform$Cmd$none));
		} else {
			return _Utils_Tuple2(
				{
					colorPickerOpen: elm$core$Maybe$Nothing,
					currentTrackedData: elm$core$Maybe$Nothing,
					cursorPos: elm$core$Maybe$Nothing,
					externalMsg: externalMsg,
					headingLevel: elm$core$Maybe$Nothing,
					internalUrlSelectorOpen: false,
					nextUid: 0,
					output: _List_Nil,
					parsedInput: elm$core$Result$Ok(_List_Nil),
					rawInput: resultString,
					selected: elm$core$Maybe$Nothing,
					setSelection: elm$core$Maybe$Nothing,
					trackedData: elm$core$Dict$empty,
					wholeTextBlocAttr: attrs
				},
				A2(elm$core$Platform$Cmd$map, externalMsg, elm$core$Platform$Cmd$none));
		}
	});
var elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var author$project$NewsEditor$NewsEditor$init = function (externalMsg) {
	var _n0 = A3(
		author$project$PageEditor$EditorPlugins$TextBlockPlugin$init,
		_List_Nil,
		elm$core$Maybe$Nothing,
		A2(elm$core$Basics$composeL, externalMsg, author$project$NewsEditor$NewsEditor$TextBlockPluginMsg));
	var newTextBlockPlugin = _n0.a;
	var textBlockPluginCmds = _n0.b;
	return _Utils_Tuple2(
		{
			buffer: elm$core$Maybe$Nothing,
			checkedNews: elm$core$Set$empty,
			contentPreview: false,
			currentTime: elm$time$Time$millisToPosix(0),
			expiryBuffer: '',
			externalMsg: externalMsg,
			loadingStatus: author$project$Internals$ToolHelpers$ToolLoadingWaiting,
			news: elm$core$Dict$empty,
			newsEditorMode: author$project$NewsEditor$NewsEditor$NewsSelector,
			picPickerOpen: false,
			seed: elm$core$Maybe$Nothing,
			textBlockPlugin: newTextBlockPlugin
		},
		textBlockPluginCmds);
};
var author$project$Document$DocumentViews$StyleSheets$PreviewScreen = {$: 'PreviewScreen'};
var author$project$Document$DocumentViews$StyleSheets$Spring = {$: 'Spring'};
var author$project$Document$DocumentViews$StyleSheets$Autumn = {$: 'Autumn'};
var author$project$Document$DocumentViews$StyleSheets$Summer = {$: 'Summer'};
var author$project$Document$DocumentViews$StyleSheets$Winter = {$: 'Winter'};
var elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return elm$core$Basics$floor(numerator / denominator);
	});
var elm$time$Time$posixToMillis = function (_n0) {
	var millis = _n0.a;
	return millis;
};
var elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.start, posixMinutes) < 0) {
					return posixMinutes + era.offset;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var elm$time$Time$toAdjustedMinutes = F2(
	function (_n0, time) {
		var defaultOffset = _n0.a;
		var eras = _n0.b;
		return A3(
			elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				elm$time$Time$flooredDiv,
				elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var elm$core$Basics$ge = _Utils_ge;
var elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2(elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		day: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		month: month,
		year: year + ((month <= 2) ? 1 : 0)
	};
};
var elm$time$Time$toDay = F2(
	function (zone, time) {
		return elm$time$Time$toCivil(
			A2(elm$time$Time$toAdjustedMinutes, zone, time)).day;
	});
var elm$time$Time$Apr = {$: 'Apr'};
var elm$time$Time$Aug = {$: 'Aug'};
var elm$time$Time$Dec = {$: 'Dec'};
var elm$time$Time$Feb = {$: 'Feb'};
var elm$time$Time$Jan = {$: 'Jan'};
var elm$time$Time$Jul = {$: 'Jul'};
var elm$time$Time$Jun = {$: 'Jun'};
var elm$time$Time$Mar = {$: 'Mar'};
var elm$time$Time$May = {$: 'May'};
var elm$time$Time$Nov = {$: 'Nov'};
var elm$time$Time$Oct = {$: 'Oct'};
var elm$time$Time$Sep = {$: 'Sep'};
var elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _n0 = elm$time$Time$toCivil(
			A2(elm$time$Time$toAdjustedMinutes, zone, time)).month;
		switch (_n0) {
			case 1:
				return elm$time$Time$Jan;
			case 2:
				return elm$time$Time$Feb;
			case 3:
				return elm$time$Time$Mar;
			case 4:
				return elm$time$Time$Apr;
			case 5:
				return elm$time$Time$May;
			case 6:
				return elm$time$Time$Jun;
			case 7:
				return elm$time$Time$Jul;
			case 8:
				return elm$time$Time$Aug;
			case 9:
				return elm$time$Time$Sep;
			case 10:
				return elm$time$Time$Oct;
			case 11:
				return elm$time$Time$Nov;
			default:
				return elm$time$Time$Dec;
		}
	});
var author$project$Document$DocumentViews$StyleSheets$timeToSeason = F2(
	function (zone, time) {
		var month = A2(elm$time$Time$toMonth, zone, time);
		var day = A2(elm$time$Time$toDay, zone, time);
		switch (month.$) {
			case 'Jan':
				return author$project$Document$DocumentViews$StyleSheets$Winter;
			case 'Feb':
				return author$project$Document$DocumentViews$StyleSheets$Winter;
			case 'Mar':
				return (day < 21) ? author$project$Document$DocumentViews$StyleSheets$Winter : author$project$Document$DocumentViews$StyleSheets$Spring;
			case 'Apr':
				return author$project$Document$DocumentViews$StyleSheets$Spring;
			case 'May':
				return author$project$Document$DocumentViews$StyleSheets$Spring;
			case 'Jun':
				return (day < 21) ? author$project$Document$DocumentViews$StyleSheets$Spring : author$project$Document$DocumentViews$StyleSheets$Summer;
			case 'Jul':
				return author$project$Document$DocumentViews$StyleSheets$Summer;
			case 'Aug':
				return author$project$Document$DocumentViews$StyleSheets$Summer;
			case 'Sep':
				return (day < 21) ? author$project$Document$DocumentViews$StyleSheets$Summer : author$project$Document$DocumentViews$StyleSheets$Autumn;
			case 'Oct':
				return author$project$Document$DocumentViews$StyleSheets$Autumn;
			case 'Nov':
				return author$project$Document$DocumentViews$StyleSheets$Autumn;
			default:
				return (day < 21) ? author$project$Document$DocumentViews$StyleSheets$Autumn : author$project$Document$DocumentViews$StyleSheets$Winter;
		}
	});
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Closed = {$: 'Closed'};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$InternalLink = {$: 'InternalLink'};
var elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$init = F2(
	function (mbInput, externalMsg) {
		return {
			blocks: A2(
				elm$core$Maybe$withDefault,
				elm$core$Dict$empty,
				A2(
					elm$core$Maybe$map,
					elm$core$Dict$fromList,
					A2(
						elm$core$Maybe$map,
						elm$core$List$indexedMap(elm$core$Tuple$pair),
						mbInput))),
			externalLinkInput: elm$core$Maybe$Nothing,
			externalMsg: externalMsg,
			labelPromptInput: elm$core$Maybe$Nothing,
			linkType: author$project$PageEditor$EditorPlugins$BlockLinksPlugin$InternalLink,
			selectedBlock: elm$core$Maybe$Nothing,
			selector: author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Closed
		};
	});
var elm$core$Set$insert = F2(
	function (key, _n0) {
		var dict = _n0.a;
		return elm$core$Set$Set_elm_builtin(
			A3(elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var elm$core$Set$fromList = function (list) {
	return A3(elm$core$List$foldl, elm$core$Set$insert, elm$core$Set$empty, list);
};
var author$project$PageEditor$EditorPlugins$FichesPlugin$init = F2(
	function (selectedFiches, externalMsg) {
		return {
			activFilter: elm$core$Maybe$Nothing,
			catFilter: elm$core$Maybe$Nothing,
			externalMsg: externalMsg,
			groupSel: elm$core$Maybe$Nothing,
			labelFilter: elm$core$Maybe$Nothing,
			nameFilter: elm$core$Maybe$Nothing,
			selectedFiche: elm$core$Maybe$Nothing,
			selectedFiches: elm$core$Set$fromList(selectedFiches)
		};
	});
var author$project$PageEditor$EditorPlugins$GalleryPlugin$init = F3(
	function (mbGalleryMeta, availableThreads, externalMsg) {
		return {
			base64Pics: elm$core$Dict$empty,
			busyWorkers: _List_Nil,
			externalMsg: externalMsg,
			files: _List_Nil,
			idleWorkers: A2(elm$core$List$range, 0, availableThreads - 1),
			processingQueue: _List_Nil
		};
	});
var author$project$PageEditor$EditorPlugins$ImagePlugin$ImageAttributeEditor = {$: 'ImageAttributeEditor'};
var author$project$PageEditor$Internals$DocumentEditorHelpers$ACenter = {$: 'ACenter'};
var author$project$PageEditor$Internals$DocumentEditorHelpers$ALeft = {$: 'ALeft'};
var author$project$PageEditor$Internals$DocumentEditorHelpers$ARight = {$: 'ARight'};
var author$project$PageEditor$Internals$DocumentEditorHelpers$findAlignment = function (attrs) {
	var helper = function (xs) {
		helper:
		while (true) {
			if (!xs.b) {
				return author$project$PageEditor$Internals$DocumentEditorHelpers$ACenter;
			} else {
				switch (xs.a.$) {
					case 'AlignRight':
						var _n1 = xs.a;
						return author$project$PageEditor$Internals$DocumentEditorHelpers$ARight;
					case 'AlignLeft':
						var _n2 = xs.a;
						return author$project$PageEditor$Internals$DocumentEditorHelpers$ALeft;
					default:
						var y = xs.a;
						var ys = xs.b;
						var $temp$xs = ys;
						xs = $temp$xs;
						continue helper;
				}
			}
		}
	};
	return helper(attrs);
};
var elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return elm$core$Maybe$Nothing;
		}
	});
var elm$core$Tuple$second = function (_n0) {
	var y = _n0.b;
	return y;
};
var author$project$PageEditor$EditorPlugins$ImagePlugin$init = F2(
	function (mbInput, externalMsg) {
		return _Utils_Tuple2(
			{
				alignment: A2(
					elm$core$Maybe$withDefault,
					author$project$PageEditor$Internals$DocumentEditorHelpers$ACenter,
					A2(
						elm$core$Maybe$map,
						A2(elm$core$Basics$composeL, author$project$PageEditor$Internals$DocumentEditorHelpers$findAlignment, elm$core$Tuple$second),
						mbInput)),
				externalMsg: externalMsg,
				imageAttrs: A2(
					elm$core$Maybe$withDefault,
					_List_Nil,
					A2(elm$core$Maybe$map, elm$core$Tuple$second, mbInput)),
				mbCaption: A2(
					elm$core$Maybe$andThen,
					A2(
						elm$core$Basics$composeL,
						function ($) {
							return $.caption;
						},
						elm$core$Tuple$first),
					mbInput),
				mbImageMeta: A2(elm$core$Maybe$map, elm$core$Tuple$first, mbInput),
				mode: author$project$PageEditor$EditorPlugins$ImagePlugin$ImageAttributeEditor
			},
			A2(elm$core$Platform$Cmd$map, externalMsg, elm$core$Platform$Cmd$none));
	});
var elm$core$Bitwise$and = _Bitwise_and;
var elm$core$Bitwise$or = _Bitwise_or;
var TSFoster$elm_uuid$UUID$setVariantBits = function (v) {
	switch (v) {
		case 1:
			return A2(
				elm$core$Basics$composeR,
				elm$core$Bitwise$and(63),
				elm$core$Bitwise$or(128));
		case 2:
			return A2(
				elm$core$Basics$composeR,
				elm$core$Bitwise$and(31),
				elm$core$Bitwise$or(192));
		default:
			return elm$core$Basics$identity;
	}
};
var elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2(elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var elm$core$List$takeTailRec = F2(
	function (n, list) {
		return elm$core$List$reverse(
			A3(elm$core$List$takeReverse, n, list, _List_Nil));
	});
var elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _n0 = _Utils_Tuple2(n, list);
			_n0$1:
			while (true) {
				_n0$5:
				while (true) {
					if (!_n0.b.b) {
						return list;
					} else {
						if (_n0.b.b.b) {
							switch (_n0.a) {
								case 1:
									break _n0$1;
								case 2:
									var _n2 = _n0.b;
									var x = _n2.a;
									var _n3 = _n2.b;
									var y = _n3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_n0.b.b.b.b) {
										var _n4 = _n0.b;
										var x = _n4.a;
										var _n5 = _n4.b;
										var y = _n5.a;
										var _n6 = _n5.b;
										var z = _n6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _n0$5;
									}
								default:
									if (_n0.b.b.b.b && _n0.b.b.b.b.b) {
										var _n7 = _n0.b;
										var x = _n7.a;
										var _n8 = _n7.b;
										var y = _n8.a;
										var _n9 = _n8.b;
										var z = _n9.a;
										var _n10 = _n9.b;
										var w = _n10.a;
										var tl = _n10.b;
										return (ctr > 1000) ? A2(
											elm$core$List$cons,
											x,
											A2(
												elm$core$List$cons,
												y,
												A2(
													elm$core$List$cons,
													z,
													A2(
														elm$core$List$cons,
														w,
														A2(elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											elm$core$List$cons,
											x,
											A2(
												elm$core$List$cons,
												y,
												A2(
													elm$core$List$cons,
													z,
													A2(
														elm$core$List$cons,
														w,
														A3(elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _n0$5;
									}
							}
						} else {
							if (_n0.a === 1) {
								break _n0$1;
							} else {
								break _n0$5;
							}
						}
					}
				}
				return list;
			}
			var _n1 = _n0.b;
			var x = _n1.a;
			return _List_fromArray(
				[x]);
		}
	});
var elm$core$List$take = F2(
	function (n, list) {
		return A3(elm$core$List$takeFast, 0, n, list);
	});
var elm_community$list_extra$List$Extra$updateAt = F3(
	function (index, fn, list) {
		if (index < 0) {
			return list;
		} else {
			var tail = A2(elm$core$List$drop, index, list);
			var head = A2(elm$core$List$take, index, list);
			if (tail.b) {
				var x = tail.a;
				var xs = tail.b;
				return _Utils_ap(
					head,
					A2(
						elm$core$List$cons,
						fn(x),
						xs));
			} else {
				return list;
			}
		}
	});
var TSFoster$elm_uuid$UUID$toVariant = F2(
	function (v, _n0) {
		var bytes = _n0.a;
		return TSFoster$elm_uuid$UUID$UUID(
			A3(
				elm_community$list_extra$List$Extra$updateAt,
				8,
				TSFoster$elm_uuid$UUID$setVariantBits(v),
				bytes));
	});
var elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var TSFoster$elm_uuid$UUID$toVersion = F2(
	function (v, _n0) {
		var bytes = _n0.a;
		var updateFn = A2(
			elm_community$list_extra$List$Extra$updateAt,
			6,
			A2(
				elm$core$Basics$composeR,
				elm$core$Bitwise$and(15),
				elm$core$Bitwise$or((15 & v) << 4)));
		return TSFoster$elm_uuid$UUID$UUID(
			updateFn(bytes));
	});
var elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var elm$random$Random$Generator = function (a) {
	return {$: 'Generator', a: a};
};
var elm$random$Random$Seed = F2(
	function (a, b) {
		return {$: 'Seed', a: a, b: b};
	});
var elm$random$Random$next = function (_n0) {
	var state0 = _n0.a;
	var incr = _n0.b;
	return A2(elm$random$Random$Seed, ((state0 * 1664525) + incr) >>> 0, incr);
};
var elm$core$Bitwise$xor = _Bitwise_xor;
var elm$random$Random$peel = function (_n0) {
	var state = _n0.a;
	var word = (state ^ (state >>> ((state >>> 28) + 4))) * 277803737;
	return ((word >>> 22) ^ word) >>> 0;
};
var elm$random$Random$int = F2(
	function (a, b) {
		return elm$random$Random$Generator(
			function (seed0) {
				var _n0 = (_Utils_cmp(a, b) < 0) ? _Utils_Tuple2(a, b) : _Utils_Tuple2(b, a);
				var lo = _n0.a;
				var hi = _n0.b;
				var range = (hi - lo) + 1;
				if (!((range - 1) & range)) {
					return _Utils_Tuple2(
						(((range - 1) & elm$random$Random$peel(seed0)) >>> 0) + lo,
						elm$random$Random$next(seed0));
				} else {
					var threshhold = (((-range) >>> 0) % range) >>> 0;
					var accountForBias = function (seed) {
						accountForBias:
						while (true) {
							var x = elm$random$Random$peel(seed);
							var seedN = elm$random$Random$next(seed);
							if (_Utils_cmp(x, threshhold) < 0) {
								var $temp$seed = seedN;
								seed = $temp$seed;
								continue accountForBias;
							} else {
								return _Utils_Tuple2((x % range) + lo, seedN);
							}
						}
					};
					return accountForBias(seed0);
				}
			});
	});
var elm$random$Random$listHelp = F4(
	function (revList, n, gen, seed) {
		listHelp:
		while (true) {
			if (n < 1) {
				return _Utils_Tuple2(revList, seed);
			} else {
				var _n0 = gen(seed);
				var value = _n0.a;
				var newSeed = _n0.b;
				var $temp$revList = A2(elm$core$List$cons, value, revList),
					$temp$n = n - 1,
					$temp$gen = gen,
					$temp$seed = newSeed;
				revList = $temp$revList;
				n = $temp$n;
				gen = $temp$gen;
				seed = $temp$seed;
				continue listHelp;
			}
		}
	});
var elm$random$Random$list = F2(
	function (n, _n0) {
		var gen = _n0.a;
		return elm$random$Random$Generator(
			function (seed) {
				return A4(elm$random$Random$listHelp, _List_Nil, n, gen, seed);
			});
	});
var elm$random$Random$map = F2(
	function (func, _n0) {
		var genA = _n0.a;
		return elm$random$Random$Generator(
			function (seed0) {
				var _n1 = genA(seed0);
				var a = _n1.a;
				var seed1 = _n1.b;
				return _Utils_Tuple2(
					func(a),
					seed1);
			});
	});
var TSFoster$elm_uuid$UUID$generator = A2(
	elm$random$Random$map,
	TSFoster$elm_uuid$UUID$toVariant(1),
	A2(
		elm$random$Random$map,
		TSFoster$elm_uuid$UUID$toVersion(4),
		A2(
			elm$random$Random$map,
			TSFoster$elm_uuid$UUID$UUID,
			A2(
				elm$random$Random$list,
				16,
				A2(elm$random$Random$int, 0, 255)))));
var elm$random$Random$initialSeed = function (x) {
	var _n0 = elm$random$Random$next(
		A2(elm$random$Random$Seed, 0, 1013904223));
	var state1 = _n0.a;
	var incr = _n0.b;
	var state2 = (state1 + x) >>> 0;
	return elm$random$Random$next(
		A2(elm$random$Random$Seed, state2, incr));
};
var elm$random$Random$step = F2(
	function (_n0, seed) {
		var generator = _n0.a;
		return generator(seed);
	});
var author$project$PageEditor$EditorPlugins$PictureLinksPlugin$init = F2(
	function (input, externalMsg) {
		var _n0 = A3(
			elm$core$List$foldr,
			F2(
				function (pl, _n1) {
					var acc = _n1.a;
					var seed = _n1.b;
					var _n2 = A2(elm$random$Random$step, TSFoster$elm_uuid$UUID$generator, seed);
					var uuid = _n2.a;
					var ns = _n2.b;
					return _Utils_Tuple2(
						A2(
							elm$core$List$cons,
							{picLink: pl, uuid: uuid},
							acc),
						ns);
				}),
			_Utils_Tuple2(
				_List_Nil,
				elm$random$Random$initialSeed(0)),
			input);
		var newBuffer = _n0.a;
		var newSeed = _n0.b;
		return {buffer: newBuffer, externalMsg: externalMsg, imagePickerOpen: false, seed: newSeed, selectedPic: elm$core$Maybe$Nothing, urlBuffer: elm$core$Maybe$Nothing};
	});
var author$project$PageEditor$EditorPlugins$TablePlugin$Edit = {$: 'Edit'};
var author$project$PageEditor$EditorPlugins$TablePlugin$emptyDocTable = function (externalMsg) {
	return {currentFocusedCell: elm$core$Maybe$Nothing, currentStyle: 'bleu-blanc', data: elm$core$Array$empty, error: '', externalMsg: externalMsg, mode: author$project$PageEditor$EditorPlugins$TablePlugin$Edit, nbrCols: 0, nbrColsInput: '', nbrRows: 0, nbrRowsInput: '', setupDone: false, styleSelectorFocused: false, styleSelectorInput: ''};
};
var elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _n0 = A2(elm$core$Elm$JsArray$initializeFromList, elm$core$Array$branchFactor, list);
			var jsArray = _n0.a;
			var remainingItems = _n0.b;
			if (_Utils_cmp(
				elm$core$Elm$JsArray$length(jsArray),
				elm$core$Array$branchFactor) < 0) {
				return A2(
					elm$core$Array$builderToArray,
					true,
					{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					elm$core$List$cons,
					elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return elm$core$Array$empty;
	} else {
		return A3(elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var author$project$PageEditor$EditorPlugins$TablePlugin$init = F2(
	function (mbTableMeta, externalMsg) {
		if (mbTableMeta.$ === 'Nothing') {
			return author$project$PageEditor$EditorPlugins$TablePlugin$emptyDocTable(externalMsg);
		} else {
			var style = mbTableMeta.a.style;
			var nbrRows = mbTableMeta.a.nbrRows;
			var nbrCols = mbTableMeta.a.nbrCols;
			var data = mbTableMeta.a.data;
			return _Utils_eq(data, _List_Nil) ? author$project$PageEditor$EditorPlugins$TablePlugin$emptyDocTable(externalMsg) : {
				currentFocusedCell: elm$core$Maybe$Nothing,
				currentStyle: style,
				data: elm$core$Array$fromList(data),
				error: '',
				externalMsg: externalMsg,
				mode: author$project$PageEditor$EditorPlugins$TablePlugin$Edit,
				nbrCols: nbrCols,
				nbrColsInput: '',
				nbrRows: nbrRows,
				nbrRowsInput: '',
				setupDone: true,
				styleSelectorFocused: false,
				styleSelectorInput: ''
			};
		}
	});
var author$project$Document$Document$VideoSize = F2(
	function (videoWidth, videoHeight) {
		return {videoHeight: videoHeight, videoWidth: videoWidth};
	});
var author$project$PageEditor$EditorPlugins$VideoPlugin$init = F2(
	function (mbInput, externalMsg) {
		return {
			alignment: A2(
				elm$core$Maybe$withDefault,
				author$project$PageEditor$Internals$DocumentEditorHelpers$ACenter,
				A2(
					elm$core$Maybe$map,
					A2(elm$core$Basics$composeL, author$project$PageEditor$Internals$DocumentEditorHelpers$findAlignment, elm$core$Tuple$second),
					mbInput)),
			controls: A2(
				elm$core$Maybe$withDefault,
				false,
				A2(
					elm$core$Maybe$map,
					A2(
						elm$core$Basics$composeL,
						function ($) {
							return $.controls;
						},
						elm$core$Tuple$first),
					mbInput)),
			error: '',
			externalMsg: externalMsg,
			frameBorder: A2(
				elm$core$Maybe$withDefault,
				false,
				A2(
					elm$core$Maybe$map,
					A2(
						elm$core$Basics$composeL,
						function ($) {
							return $.frameBorder;
						},
						elm$core$Tuple$first),
					mbInput)),
			mbVideoMeta: A2(elm$core$Maybe$map, elm$core$Tuple$first, mbInput),
			newSrc: elm$core$Maybe$Nothing,
			pastedHtml: elm$core$Maybe$Nothing,
			privacy: A2(
				elm$core$Maybe$withDefault,
				false,
				A2(
					elm$core$Maybe$map,
					A2(
						elm$core$Basics$composeL,
						function ($) {
							return $.privacy;
						},
						elm$core$Tuple$first),
					mbInput)),
			size: A2(
				elm$core$Maybe$withDefault,
				A2(author$project$Document$Document$VideoSize, 560, 314),
				A2(
					elm$core$Maybe$map,
					A2(
						elm$core$Basics$composeL,
						function ($) {
							return $.size;
						},
						elm$core$Tuple$first),
					mbInput)),
			sizeRatio: A2(
				elm$core$Maybe$withDefault,
				560 / 315,
				A2(
					elm$core$Maybe$map,
					function (mbI) {
						var _n0 = function (s) {
							return _Utils_Tuple2(s.videoWidth, s.videoHeight);
						}(mbI.a.size);
						var w = _n0.a;
						var h = _n0.b;
						return w / h;
					},
					mbInput)),
			startAt: A2(
				elm$core$Maybe$andThen,
				A2(
					elm$core$Basics$composeL,
					function ($) {
						return $.startAt;
					},
					elm$core$Tuple$first),
				mbInput),
			suggestions: A2(
				elm$core$Maybe$withDefault,
				false,
				A2(
					elm$core$Maybe$map,
					A2(
						elm$core$Basics$composeL,
						function ($) {
							return $.suggestions;
						},
						elm$core$Tuple$first),
					mbInput)),
			title: A2(
				elm$core$Maybe$withDefault,
				false,
				A2(
					elm$core$Maybe$map,
					A2(
						elm$core$Basics$composeL,
						function ($) {
							return $.title;
						},
						elm$core$Tuple$first),
					mbInput)),
			videoAttrs: A2(
				elm$core$Maybe$withDefault,
				_List_Nil,
				A2(elm$core$Maybe$map, elm$core$Tuple$second, mbInput))
		};
	});
var author$project$Document$Document$Cell = function (a) {
	return {$: 'Cell', a: a};
};
var author$project$Document$Document$Container = F2(
	function (a, b) {
		return {$: 'Container', a: a, b: b};
	});
var author$project$Document$Document$DocColumn = {$: 'DocColumn'};
var author$project$Document$Document$EmptyCell = {$: 'EmptyCell'};
var author$project$PageEditor$Internals$DocumentEditorHelpers$emptyDoc = A2(
	author$project$Document$Document$Container,
	{
		attrs: _List_Nil,
		containerLabel: author$project$Document$Document$DocColumn,
		id: {
			classes: elm$core$Set$fromList(_List_Nil),
			docStyleId: elm$core$Maybe$Just('root'),
			htmlId: elm$core$Maybe$Just('mainContainer'),
			uid: 0
		}
	},
	_List_fromArray(
		[
			author$project$Document$Document$Cell(
			{
				attrs: _List_Nil,
				cellContent: author$project$Document$Document$EmptyCell,
				id: {
					classes: elm$core$Set$fromList(_List_Nil),
					docStyleId: elm$core$Maybe$Nothing,
					htmlId: elm$core$Maybe$Nothing,
					uid: 1
				}
			})
		]));
var author$project$PageEditor$Internals$DocumentEditorHelpers$docSize = function (doc) {
	if (doc.$ === 'Cell') {
		return 1;
	} else {
		var xs = doc.b;
		return A3(
			elm$core$List$foldr,
			F2(
				function (d, acc) {
					return author$project$PageEditor$Internals$DocumentEditorHelpers$docSize(d) + acc;
				}),
			1,
			xs);
	}
};
var author$project$PageEditor$Internals$DocumentEditorHelpers$fixUids = F2(
	function (nextUid, document) {
		if (document.$ === 'Container') {
			if (!document.b.b) {
				var nv = document.a;
				var id = nv.id;
				return A2(
					author$project$Document$Document$Container,
					_Utils_update(
						nv,
						{
							id: _Utils_update(
								id,
								{
									htmlId: elm$core$Maybe$Just(
										'defaultHtmlId' + elm$core$String$fromInt(nextUid)),
									uid: nextUid
								})
						}),
					_List_Nil);
			} else {
				var nv = document.a;
				var id = nv.id;
				var children = document.b;
				return A2(
					author$project$Document$Document$Container,
					_Utils_update(
						nv,
						{
							id: _Utils_update(
								id,
								{
									htmlId: elm$core$Maybe$Just(
										'defaultHtmlId' + elm$core$String$fromInt(nextUid)),
									uid: nextUid
								})
						}),
					A3(
						elm$core$List$foldr,
						F2(
							function (doc, _n1) {
								var done = _n1.a;
								var nUid = _n1.b;
								return _Utils_Tuple2(
									A2(
										elm$core$List$cons,
										A2(author$project$PageEditor$Internals$DocumentEditorHelpers$fixUids, nUid, doc),
										done),
									nUid + author$project$PageEditor$Internals$DocumentEditorHelpers$docSize(doc));
							}),
						_Utils_Tuple2(_List_Nil, nextUid + 1),
						children).a);
			}
		} else {
			var lv = document.a;
			var id = lv.id;
			return author$project$Document$Document$Cell(
				_Utils_update(
					lv,
					{
						id: _Utils_update(
							id,
							{
								htmlId: elm$core$Maybe$Just(
									'defaultHtmlId' + elm$core$String$fromInt(nextUid)),
								uid: nextUid
							})
					}));
		}
	});
var author$project$PageEditor$Internals$DocumentEditorHelpers$maxUid = function (doc) {
	var listMax = A2(
		elm$core$List$foldr,
		F2(
			function (x, acc) {
				return A2(elm$core$Basics$max, x, acc);
			}),
		0);
	var helper = F2(
		function (acc, doc_) {
			if (doc.$ === 'Cell') {
				var id = doc.a.id;
				return A2(elm$core$Basics$max, id.uid, acc);
			} else {
				var id = doc.a.id;
				var xs = doc.b;
				return listMax(
					A2(elm$core$List$map, author$project$PageEditor$Internals$DocumentEditorHelpers$maxUid, xs));
			}
		});
	var getUid = function (doc_) {
		if (doc_.$ === 'Cell') {
			var cellContent = doc_.a.cellContent;
			var id = doc_.a.id;
			var attrs = doc_.a.attrs;
			return id.uid;
		} else {
			var containerLabel = doc_.a.containerLabel;
			var id = doc_.a.id;
			var attrs = doc_.a.attrs;
			return id.uid;
		}
	};
	return A2(helper, 0, doc);
};
var author$project$PageEditor$Internals$DocumentZipper$initZip = function (doc) {
	return {contexts: _List_Nil, current: doc};
};
var author$project$PageEditor$PageEditor$BlockLinksPluginMsg = function (a) {
	return {$: 'BlockLinksPluginMsg', a: a};
};
var author$project$PageEditor$PageEditor$CurrentViewport = function (a) {
	return {$: 'CurrentViewport', a: a};
};
var author$project$PageEditor$PageEditor$EditCell = {$: 'EditCell'};
var author$project$PageEditor$PageEditor$FichesPluginMsg = function (a) {
	return {$: 'FichesPluginMsg', a: a};
};
var author$project$PageEditor$PageEditor$GalleryPluginMsg = function (a) {
	return {$: 'GalleryPluginMsg', a: a};
};
var author$project$PageEditor$PageEditor$ImagePluginMsg = function (a) {
	return {$: 'ImagePluginMsg', a: a};
};
var author$project$PageEditor$PageEditor$MainInterfaceViewport = function (a) {
	return {$: 'MainInterfaceViewport', a: a};
};
var author$project$PageEditor$PageEditor$NoOp = {$: 'NoOp'};
var author$project$PageEditor$PageEditor$PictureLinksPluginMsg = function (a) {
	return {$: 'PictureLinksPluginMsg', a: a};
};
var author$project$PageEditor$PageEditor$Rewind = {$: 'Rewind'};
var author$project$PageEditor$PageEditor$SelectDoc = function (a) {
	return {$: 'SelectDoc', a: a};
};
var author$project$PageEditor$PageEditor$SetSeason = function (a) {
	return {$: 'SetSeason', a: a};
};
var author$project$PageEditor$PageEditor$TablePluginMsg = function (a) {
	return {$: 'TablePluginMsg', a: a};
};
var author$project$PageEditor$PageEditor$TextBlockPluginMsg = function (a) {
	return {$: 'TextBlockPluginMsg', a: a};
};
var author$project$PageEditor$PageEditor$VideoPluginMsg = function (a) {
	return {$: 'VideoPluginMsg', a: a};
};
var author$project$PageEditor$PageEditor$cmdPort = _Platform_outgoingPort('cmdPort', elm$core$Basics$identity);
var billstclair$elm_localstorage$PortFunnel$LocalStorage$State = function (a) {
	return {$: 'State', a: a};
};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$initialState = function (prefix) {
	return billstclair$elm_localstorage$PortFunnel$LocalStorage$State(
		{isLoaded: false, prefix: prefix, simulationDict: elm$core$Dict$empty});
};
var billstclair$elm_localstorage$PortFunnel$InternalTypes$ListKeys = function (a) {
	return {$: 'ListKeys', a: a};
};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$listKeys = billstclair$elm_localstorage$PortFunnel$InternalTypes$ListKeys;
var billstclair$elm_localstorage$PortFunnel$InternalTypes$Clear = function (a) {
	return {$: 'Clear', a: a};
};
var billstclair$elm_localstorage$PortFunnel$InternalTypes$Get = function (a) {
	return {$: 'Get', a: a};
};
var billstclair$elm_localstorage$PortFunnel$InternalTypes$Put = F2(
	function (a, b) {
		return {$: 'Put', a: a, b: b};
	});
var billstclair$elm_localstorage$PortFunnel$LocalStorage$addPrefix = F2(
	function (prefix, key) {
		return (prefix === '') ? key : (prefix + ('.' + key));
	});
var billstclair$elm_localstorage$PortFunnel$InternalTypes$Keys = F2(
	function (a, b) {
		return {$: 'Keys', a: a, b: b};
	});
var billstclair$elm_localstorage$PortFunnel$InternalTypes$SimulateClear = function (a) {
	return {$: 'SimulateClear', a: a};
};
var billstclair$elm_localstorage$PortFunnel$InternalTypes$SimulateGet = function (a) {
	return {$: 'SimulateGet', a: a};
};
var billstclair$elm_localstorage$PortFunnel$InternalTypes$SimulateListKeys = function (a) {
	return {$: 'SimulateListKeys', a: a};
};
var billstclair$elm_localstorage$PortFunnel$InternalTypes$SimulatePut = F2(
	function (a, b) {
		return {$: 'SimulatePut', a: a, b: b};
	});
var billstclair$elm_localstorage$PortFunnel$InternalTypes$Startup = {$: 'Startup'};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$KeysRecord = F2(
	function (prefix, keys) {
		return {keys: keys, prefix: prefix};
	});
var elm$json$Json$Decode$field = _Json_decodeField;
var elm$json$Json$Decode$list = _Json_decodeList;
var elm$json$Json$Decode$map2 = _Json_map2;
var elm$json$Json$Decode$string = _Json_decodeString;
var billstclair$elm_localstorage$PortFunnel$LocalStorage$keysDecoder = A3(
	elm$json$Json$Decode$map2,
	billstclair$elm_localstorage$PortFunnel$LocalStorage$KeysRecord,
	A2(elm$json$Json$Decode$field, 'prefix', elm$json$Json$Decode$string),
	A2(
		elm$json$Json$Decode$field,
		'keys',
		elm$json$Json$Decode$list(elm$json$Json$Decode$string)));
var billstclair$elm_localstorage$PortFunnel$LocalStorage$PutRecord = F2(
	function (key, value) {
		return {key: key, value: value};
	});
var elm$json$Json$Decode$value = _Json_decodeValue;
var billstclair$elm_localstorage$PortFunnel$LocalStorage$putDecoder = A3(
	elm$json$Json$Decode$map2,
	billstclair$elm_localstorage$PortFunnel$LocalStorage$PutRecord,
	A2(elm$json$Json$Decode$field, 'key', elm$json$Json$Decode$string),
	A2(elm$json$Json$Decode$field, 'value', elm$json$Json$Decode$value));
var billstclair$elm_localstorage$PortFunnel$LocalStorage$NOTAG = {$: 'NOTAG'};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$ClearTag = {$: 'ClearTag'};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$GetTag = {$: 'GetTag'};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$KeysTag = {$: 'KeysTag'};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$ListKeysTag = {$: 'ListKeysTag'};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$PutTag = {$: 'PutTag'};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$SimulateClearTag = {$: 'SimulateClearTag'};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$SimulateGetTag = {$: 'SimulateGetTag'};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$SimulateListKeysTag = {$: 'SimulateListKeysTag'};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$SimulatePutTag = {$: 'SimulatePutTag'};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$StartupTag = {$: 'StartupTag'};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$clearTag = 'clear';
var billstclair$elm_localstorage$PortFunnel$LocalStorage$getTag = 'get';
var billstclair$elm_localstorage$PortFunnel$LocalStorage$keysTag = 'keys';
var billstclair$elm_localstorage$PortFunnel$LocalStorage$listKeysTag = 'listkeys';
var billstclair$elm_localstorage$PortFunnel$LocalStorage$putTag = 'put';
var billstclair$elm_localstorage$PortFunnel$LocalStorage$simulateClearTag = 'simulateclear';
var billstclair$elm_localstorage$PortFunnel$LocalStorage$simulateGetTag = 'simulateget';
var billstclair$elm_localstorage$PortFunnel$LocalStorage$simulateListKeysTag = 'simulatelistkeys';
var billstclair$elm_localstorage$PortFunnel$LocalStorage$simulatePutTag = 'simulateput';
var billstclair$elm_localstorage$PortFunnel$LocalStorage$startupTag = 'startup';
var billstclair$elm_localstorage$PortFunnel$LocalStorage$tagDict = elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(billstclair$elm_localstorage$PortFunnel$LocalStorage$startupTag, billstclair$elm_localstorage$PortFunnel$LocalStorage$StartupTag),
			_Utils_Tuple2(billstclair$elm_localstorage$PortFunnel$LocalStorage$getTag, billstclair$elm_localstorage$PortFunnel$LocalStorage$GetTag),
			_Utils_Tuple2(billstclair$elm_localstorage$PortFunnel$LocalStorage$putTag, billstclair$elm_localstorage$PortFunnel$LocalStorage$PutTag),
			_Utils_Tuple2(billstclair$elm_localstorage$PortFunnel$LocalStorage$listKeysTag, billstclair$elm_localstorage$PortFunnel$LocalStorage$ListKeysTag),
			_Utils_Tuple2(billstclair$elm_localstorage$PortFunnel$LocalStorage$keysTag, billstclair$elm_localstorage$PortFunnel$LocalStorage$KeysTag),
			_Utils_Tuple2(billstclair$elm_localstorage$PortFunnel$LocalStorage$clearTag, billstclair$elm_localstorage$PortFunnel$LocalStorage$ClearTag),
			_Utils_Tuple2(billstclair$elm_localstorage$PortFunnel$LocalStorage$simulateGetTag, billstclair$elm_localstorage$PortFunnel$LocalStorage$SimulateGetTag),
			_Utils_Tuple2(billstclair$elm_localstorage$PortFunnel$LocalStorage$simulatePutTag, billstclair$elm_localstorage$PortFunnel$LocalStorage$SimulatePutTag),
			_Utils_Tuple2(billstclair$elm_localstorage$PortFunnel$LocalStorage$simulateListKeysTag, billstclair$elm_localstorage$PortFunnel$LocalStorage$SimulateListKeysTag),
			_Utils_Tuple2(billstclair$elm_localstorage$PortFunnel$LocalStorage$simulateClearTag, billstclair$elm_localstorage$PortFunnel$LocalStorage$SimulateClearTag)
		]));
var billstclair$elm_localstorage$PortFunnel$LocalStorage$strtag = function (str) {
	var _n0 = A2(elm$core$Dict$get, str, billstclair$elm_localstorage$PortFunnel$LocalStorage$tagDict);
	if (_n0.$ === 'Just') {
		var tag = _n0.a;
		return tag;
	} else {
		return billstclair$elm_localstorage$PortFunnel$LocalStorage$NOTAG;
	}
};
var elm$json$Json$Decode$decodeValue = _Json_run;
var elm$json$Json$Encode$null = _Json_encodeNull;
var billstclair$elm_localstorage$PortFunnel$LocalStorage$decode = function (_n0) {
	var tag = _n0.tag;
	var args = _n0.args;
	var _n1 = billstclair$elm_localstorage$PortFunnel$LocalStorage$strtag(tag);
	switch (_n1.$) {
		case 'GetTag':
			var _n2 = A2(elm$json$Json$Decode$decodeValue, elm$json$Json$Decode$string, args);
			if (_n2.$ === 'Ok') {
				var key = _n2.a;
				return elm$core$Result$Ok(
					billstclair$elm_localstorage$PortFunnel$InternalTypes$Get(key));
			} else {
				return elm$core$Result$Err(
					'Get key not a string: ' + A2(elm$json$Json$Encode$encode, 0, args));
			}
		case 'PutTag':
			var _n3 = A2(elm$json$Json$Decode$decodeValue, billstclair$elm_localstorage$PortFunnel$LocalStorage$putDecoder, args);
			if (_n3.$ === 'Ok') {
				var key = _n3.a.key;
				var value = _n3.a.value;
				return elm$core$Result$Ok(
					A2(
						billstclair$elm_localstorage$PortFunnel$InternalTypes$Put,
						key,
						_Utils_eq(value, elm$json$Json$Encode$null) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(value)));
			} else {
				return elm$core$Result$Err(
					'Put not { key, value }: ' + A2(elm$json$Json$Encode$encode, 0, args));
			}
		case 'ListKeysTag':
			var _n4 = A2(elm$json$Json$Decode$decodeValue, elm$json$Json$Decode$string, args);
			if (_n4.$ === 'Ok') {
				var prefix = _n4.a;
				return elm$core$Result$Ok(
					billstclair$elm_localstorage$PortFunnel$InternalTypes$ListKeys(prefix));
			} else {
				return elm$core$Result$Err(
					'ListKeys prefix not a string: ' + A2(elm$json$Json$Encode$encode, 0, args));
			}
		case 'KeysTag':
			var _n5 = A2(elm$json$Json$Decode$decodeValue, billstclair$elm_localstorage$PortFunnel$LocalStorage$keysDecoder, args);
			if (_n5.$ === 'Ok') {
				var prefix = _n5.a.prefix;
				var keys = _n5.a.keys;
				return elm$core$Result$Ok(
					A2(billstclair$elm_localstorage$PortFunnel$InternalTypes$Keys, prefix, keys));
			} else {
				return elm$core$Result$Err(
					'Keys not { prefix, keys }: ' + A2(elm$json$Json$Encode$encode, 0, args));
			}
		case 'ClearTag':
			var _n6 = A2(elm$json$Json$Decode$decodeValue, elm$json$Json$Decode$string, args);
			if (_n6.$ === 'Ok') {
				var prefix = _n6.a;
				return elm$core$Result$Ok(
					billstclair$elm_localstorage$PortFunnel$InternalTypes$Clear(prefix));
			} else {
				return elm$core$Result$Err(
					'Clear prefix not a string: ' + A2(elm$json$Json$Encode$encode, 0, args));
			}
		case 'StartupTag':
			return elm$core$Result$Ok(billstclair$elm_localstorage$PortFunnel$InternalTypes$Startup);
		case 'SimulateGetTag':
			var _n7 = A2(elm$json$Json$Decode$decodeValue, elm$json$Json$Decode$string, args);
			if (_n7.$ === 'Ok') {
				var key = _n7.a;
				return elm$core$Result$Ok(
					billstclair$elm_localstorage$PortFunnel$InternalTypes$SimulateGet(key));
			} else {
				return elm$core$Result$Err(
					'Get key not a string: ' + A2(elm$json$Json$Encode$encode, 0, args));
			}
		case 'SimulatePutTag':
			var _n8 = A2(elm$json$Json$Decode$decodeValue, billstclair$elm_localstorage$PortFunnel$LocalStorage$putDecoder, args);
			if (_n8.$ === 'Ok') {
				var key = _n8.a.key;
				var value = _n8.a.value;
				return elm$core$Result$Ok(
					A2(
						billstclair$elm_localstorage$PortFunnel$InternalTypes$SimulatePut,
						key,
						_Utils_eq(value, elm$json$Json$Encode$null) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(value)));
			} else {
				return elm$core$Result$Err(
					'SimulatePut not { key, value }: ' + A2(elm$json$Json$Encode$encode, 0, args));
			}
		case 'SimulateListKeysTag':
			var _n9 = A2(elm$json$Json$Decode$decodeValue, elm$json$Json$Decode$string, args);
			if (_n9.$ === 'Ok') {
				var prefix = _n9.a;
				return elm$core$Result$Ok(
					billstclair$elm_localstorage$PortFunnel$InternalTypes$SimulateListKeys(prefix));
			} else {
				return elm$core$Result$Err(
					'SimulateListKeys prefix not a string: ' + A2(elm$json$Json$Encode$encode, 0, args));
			}
		case 'SimulateClearTag':
			var _n10 = A2(elm$json$Json$Decode$decodeValue, elm$json$Json$Decode$string, args);
			if (_n10.$ === 'Ok') {
				var prefix = _n10.a;
				return elm$core$Result$Ok(
					billstclair$elm_localstorage$PortFunnel$InternalTypes$SimulateClear(prefix));
			} else {
				return elm$core$Result$Err(
					'SimulateClear prefix not a string: ' + A2(elm$json$Json$Encode$encode, 0, args));
			}
		default:
			return elm$core$Result$Err('Unknown tag: ' + tag);
	}
};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName = 'LocalStorage';
var billstclair$elm_port_funnel$PortFunnel$GenericMessage = F3(
	function (moduleName, tag, args) {
		return {args: args, moduleName: moduleName, tag: tag};
	});
var elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			elm$core$List$foldl,
			F2(
				function (_n0, obj) {
					var k = _n0.a;
					var v = _n0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var elm$json$Json$Encode$string = _Json_wrap;
var billstclair$elm_localstorage$PortFunnel$LocalStorage$encode = function (message) {
	switch (message.$) {
		case 'Startup':
			return A3(billstclair$elm_port_funnel$PortFunnel$GenericMessage, billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName, billstclair$elm_localstorage$PortFunnel$LocalStorage$startupTag, elm$json$Json$Encode$null);
		case 'Get':
			var key = message.a;
			return A3(
				billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				billstclair$elm_localstorage$PortFunnel$LocalStorage$getTag,
				elm$json$Json$Encode$string(key));
		case 'Put':
			var key = message.a;
			var value = message.b;
			return A3(
				billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				billstclair$elm_localstorage$PortFunnel$LocalStorage$putTag,
				elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'key',
							elm$json$Json$Encode$string(key)),
							_Utils_Tuple2(
							'value',
							function () {
								if (value.$ === 'Nothing') {
									return elm$json$Json$Encode$null;
								} else {
									var v = value.a;
									return v;
								}
							}())
						])));
		case 'ListKeys':
			var prefix = message.a;
			return A3(
				billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				billstclair$elm_localstorage$PortFunnel$LocalStorage$listKeysTag,
				elm$json$Json$Encode$string(prefix));
		case 'Keys':
			var prefix = message.a;
			var keys = message.b;
			return A3(
				billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				billstclair$elm_localstorage$PortFunnel$LocalStorage$keysTag,
				elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'prefix',
							elm$json$Json$Encode$string(prefix)),
							_Utils_Tuple2(
							'keys',
							A2(elm$json$Json$Encode$list, elm$json$Json$Encode$string, keys))
						])));
		case 'Clear':
			var prefix = message.a;
			return A3(
				billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				billstclair$elm_localstorage$PortFunnel$LocalStorage$clearTag,
				elm$json$Json$Encode$string(prefix));
		case 'SimulateGet':
			var key = message.a;
			return A3(
				billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				billstclair$elm_localstorage$PortFunnel$LocalStorage$simulateGetTag,
				elm$json$Json$Encode$string(key));
		case 'SimulatePut':
			var key = message.a;
			var value = message.b;
			return A3(
				billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				billstclair$elm_localstorage$PortFunnel$LocalStorage$simulatePutTag,
				elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'key',
							elm$json$Json$Encode$string(key)),
							_Utils_Tuple2(
							'value',
							function () {
								if (value.$ === 'Nothing') {
									return elm$json$Json$Encode$null;
								} else {
									var v = value.a;
									return v;
								}
							}())
						])));
		case 'SimulateListKeys':
			var prefix = message.a;
			return A3(
				billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				billstclair$elm_localstorage$PortFunnel$LocalStorage$simulateListKeysTag,
				elm$json$Json$Encode$string(prefix));
		default:
			var prefix = message.a;
			return A3(
				billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				billstclair$elm_localstorage$PortFunnel$LocalStorage$simulateClearTag,
				elm$json$Json$Encode$string(prefix));
	}
};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$GetResponse = function (a) {
	return {$: 'GetResponse', a: a};
};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$ListKeysResponse = function (a) {
	return {$: 'ListKeysResponse', a: a};
};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$NoResponse = {$: 'NoResponse'};
var elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			elm$core$String$slice,
			n,
			elm$core$String$length(string),
			string);
	});
var billstclair$elm_localstorage$PortFunnel$LocalStorage$stripPrefix = F2(
	function (prefix, key) {
		return (prefix === '') ? key : A2(
			elm$core$String$dropLeft,
			1 + elm$core$String$length(prefix),
			key);
	});
var elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3(elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var elm$core$Dict$filter = F2(
	function (isGood, dict) {
		return A3(
			elm$core$Dict$foldl,
			F3(
				function (k, v, d) {
					return A2(isGood, k, v) ? A3(elm$core$Dict$insert, k, v, d) : d;
				}),
			elm$core$Dict$empty,
			dict);
	});
var elm_community$dict_extra$Dict$Extra$removeWhen = F2(
	function (pred, dict) {
		return A2(
			elm$core$Dict$filter,
			F2(
				function (k, v) {
					return !A2(pred, k, v);
				}),
			dict);
	});
var billstclair$elm_localstorage$PortFunnel$LocalStorage$process = F2(
	function (message, boxedState) {
		var state = boxedState.a;
		switch (message.$) {
			case 'Put':
				var key = message.a;
				var value = message.b;
				return _Utils_Tuple2(
					boxedState,
					billstclair$elm_localstorage$PortFunnel$LocalStorage$GetResponse(
						{
							key: A2(billstclair$elm_localstorage$PortFunnel$LocalStorage$stripPrefix, state.prefix, key),
							value: value
						}));
			case 'Keys':
				var prefix = message.a;
				var keys = message.b;
				return _Utils_Tuple2(
					boxedState,
					billstclair$elm_localstorage$PortFunnel$LocalStorage$ListKeysResponse(
						{
							keys: A2(
								elm$core$List$map,
								billstclair$elm_localstorage$PortFunnel$LocalStorage$stripPrefix(state.prefix),
								keys),
							prefix: A2(billstclair$elm_localstorage$PortFunnel$LocalStorage$stripPrefix, state.prefix, prefix)
						}));
			case 'Startup':
				return _Utils_Tuple2(
					billstclair$elm_localstorage$PortFunnel$LocalStorage$State(
						_Utils_update(
							state,
							{isLoaded: true})),
					billstclair$elm_localstorage$PortFunnel$LocalStorage$NoResponse);
			case 'SimulateGet':
				var key = message.a;
				return _Utils_Tuple2(
					boxedState,
					billstclair$elm_localstorage$PortFunnel$LocalStorage$GetResponse(
						{
							key: A2(billstclair$elm_localstorage$PortFunnel$LocalStorage$stripPrefix, state.prefix, key),
							value: A2(elm$core$Dict$get, key, state.simulationDict)
						}));
			case 'SimulatePut':
				var key = message.a;
				var value = message.b;
				return _Utils_Tuple2(
					billstclair$elm_localstorage$PortFunnel$LocalStorage$State(
						_Utils_update(
							state,
							{
								simulationDict: function () {
									if (value.$ === 'Nothing') {
										return A2(elm$core$Dict$remove, key, state.simulationDict);
									} else {
										var v = value.a;
										return A3(elm$core$Dict$insert, key, v, state.simulationDict);
									}
								}()
							})),
					billstclair$elm_localstorage$PortFunnel$LocalStorage$NoResponse);
			case 'SimulateListKeys':
				var prefix = message.a;
				return _Utils_Tuple2(
					boxedState,
					billstclair$elm_localstorage$PortFunnel$LocalStorage$ListKeysResponse(
						{
							keys: A3(
								elm$core$Dict$foldr,
								F3(
									function (k, _n2, res) {
										return A2(elm$core$String$startsWith, prefix, k) ? A2(
											elm$core$List$cons,
											A2(billstclair$elm_localstorage$PortFunnel$LocalStorage$stripPrefix, state.prefix, k),
											res) : res;
									}),
								_List_Nil,
								state.simulationDict),
							prefix: A2(billstclair$elm_localstorage$PortFunnel$LocalStorage$stripPrefix, state.prefix, prefix)
						}));
			case 'SimulateClear':
				var prefix = message.a;
				return _Utils_Tuple2(
					billstclair$elm_localstorage$PortFunnel$LocalStorage$State(
						_Utils_update(
							state,
							{
								simulationDict: A2(
									elm_community$dict_extra$Dict$Extra$removeWhen,
									F2(
										function (k, _n3) {
											return A2(elm$core$String$startsWith, prefix, k);
										}),
									state.simulationDict)
							})),
					billstclair$elm_localstorage$PortFunnel$LocalStorage$NoResponse);
			default:
				return _Utils_Tuple2(
					billstclair$elm_localstorage$PortFunnel$LocalStorage$State(state),
					billstclair$elm_localstorage$PortFunnel$LocalStorage$NoResponse);
		}
	});
var billstclair$elm_port_funnel$PortFunnel$ModuleDesc = function (a) {
	return {$: 'ModuleDesc', a: a};
};
var billstclair$elm_port_funnel$PortFunnel$ModuleDescRecord = F4(
	function (moduleName, encoder, decoder, process) {
		return {decoder: decoder, encoder: encoder, moduleName: moduleName, process: process};
	});
var billstclair$elm_port_funnel$PortFunnel$makeModuleDesc = F4(
	function (name, encoder, decoder, processor) {
		return billstclair$elm_port_funnel$PortFunnel$ModuleDesc(
			A4(billstclair$elm_port_funnel$PortFunnel$ModuleDescRecord, name, encoder, decoder, processor));
	});
var billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleDesc = A4(billstclair$elm_port_funnel$PortFunnel$makeModuleDesc, billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName, billstclair$elm_localstorage$PortFunnel$LocalStorage$encode, billstclair$elm_localstorage$PortFunnel$LocalStorage$decode, billstclair$elm_localstorage$PortFunnel$LocalStorage$process);
var billstclair$elm_port_funnel$PortFunnel$encodeGenericMessage = function (message) {
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'module',
				elm$json$Json$Encode$string(message.moduleName)),
				_Utils_Tuple2(
				'tag',
				elm$json$Json$Encode$string(message.tag)),
				_Utils_Tuple2('args', message.args)
			]));
};
var billstclair$elm_port_funnel$PortFunnel$messageToValue = F2(
	function (_n0, message) {
		var moduleDesc = _n0.a;
		return billstclair$elm_port_funnel$PortFunnel$encodeGenericMessage(
			moduleDesc.encoder(message));
	});
var billstclair$elm_port_funnel$PortFunnel$sendMessage = F3(
	function (moduleDesc, cmdPort, message) {
		return cmdPort(
			A2(billstclair$elm_port_funnel$PortFunnel$messageToValue, moduleDesc, message));
	});
var billstclair$elm_localstorage$PortFunnel$LocalStorage$send = F3(
	function (wrapper, message, _n0) {
		var state = _n0.a;
		var prefix = state.prefix;
		var mess = function () {
			switch (message.$) {
				case 'Get':
					var key = message.a;
					return billstclair$elm_localstorage$PortFunnel$InternalTypes$Get(
						A2(billstclair$elm_localstorage$PortFunnel$LocalStorage$addPrefix, prefix, key));
				case 'Put':
					var key = message.a;
					var value = message.b;
					return A2(
						billstclair$elm_localstorage$PortFunnel$InternalTypes$Put,
						A2(billstclair$elm_localstorage$PortFunnel$LocalStorage$addPrefix, prefix, key),
						value);
				case 'ListKeys':
					var pref = message.a;
					return billstclair$elm_localstorage$PortFunnel$InternalTypes$ListKeys(
						A2(billstclair$elm_localstorage$PortFunnel$LocalStorage$addPrefix, prefix, pref));
				case 'Clear':
					var pref = message.a;
					return billstclair$elm_localstorage$PortFunnel$InternalTypes$Clear(
						A2(billstclair$elm_localstorage$PortFunnel$LocalStorage$addPrefix, prefix, pref));
				default:
					return message;
			}
		}();
		return A3(billstclair$elm_port_funnel$PortFunnel$sendMessage, billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleDesc, wrapper, mess);
	});
var elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var elm$core$Basics$never = function (_n0) {
	never:
	while (true) {
		var nvr = _n0.a;
		var $temp$_n0 = nvr;
		_n0 = $temp$_n0;
		continue never;
	}
};
var elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var elm$core$Task$succeed = _Scheduler_succeed;
var elm$core$Task$init = elm$core$Task$succeed(_Utils_Tuple0);
var elm$core$Task$andThen = _Scheduler_andThen;
var elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			elm$core$Task$andThen,
			function (a) {
				return elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			elm$core$Task$andThen,
			function (a) {
				return A2(
					elm$core$Task$andThen,
					function (b) {
						return elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var elm$core$Task$sequence = function (tasks) {
	return A3(
		elm$core$List$foldr,
		elm$core$Task$map2(elm$core$List$cons),
		elm$core$Task$succeed(_List_Nil),
		tasks);
};
var elm$core$Platform$sendToApp = _Platform_sendToApp;
var elm$core$Task$spawnCmd = F2(
	function (router, _n0) {
		var task = _n0.a;
		return _Scheduler_spawn(
			A2(
				elm$core$Task$andThen,
				elm$core$Platform$sendToApp(router),
				task));
	});
var elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			elm$core$Task$map,
			function (_n0) {
				return _Utils_Tuple0;
			},
			elm$core$Task$sequence(
				A2(
					elm$core$List$map,
					elm$core$Task$spawnCmd(router),
					commands)));
	});
var elm$core$Task$onSelfMsg = F3(
	function (_n0, _n1, _n2) {
		return elm$core$Task$succeed(_Utils_Tuple0);
	});
var elm$core$Task$cmdMap = F2(
	function (tagger, _n0) {
		var task = _n0.a;
		return elm$core$Task$Perform(
			A2(elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager(elm$core$Task$init, elm$core$Task$onEffects, elm$core$Task$onSelfMsg, elm$core$Task$cmdMap);
var elm$core$Task$command = _Platform_leaf('Task');
var elm$core$Task$perform = F2(
	function (toMessage, task) {
		return elm$core$Task$command(
			elm$core$Task$Perform(
				A2(elm$core$Task$map, toMessage, task)));
	});
var elm$json$Json$Decode$map = _Json_map1;
var elm$browser$Debugger$Expando$ArraySeq = {$: 'ArraySeq'};
var elm$browser$Debugger$Expando$Constructor = F3(
	function (a, b, c) {
		return {$: 'Constructor', a: a, b: b, c: c};
	});
var elm$browser$Debugger$Expando$Dictionary = F2(
	function (a, b) {
		return {$: 'Dictionary', a: a, b: b};
	});
var elm$browser$Debugger$Expando$ListSeq = {$: 'ListSeq'};
var elm$browser$Debugger$Expando$Primitive = function (a) {
	return {$: 'Primitive', a: a};
};
var elm$browser$Debugger$Expando$Record = F2(
	function (a, b) {
		return {$: 'Record', a: a, b: b};
	});
var elm$browser$Debugger$Expando$S = function (a) {
	return {$: 'S', a: a};
};
var elm$browser$Debugger$Expando$Sequence = F3(
	function (a, b, c) {
		return {$: 'Sequence', a: a, b: b, c: c};
	});
var elm$browser$Debugger$Expando$SetSeq = {$: 'SetSeq'};
var elm$browser$Debugger$Main$Down = {$: 'Down'};
var elm$browser$Debugger$Main$NoOp = {$: 'NoOp'};
var elm$browser$Debugger$Main$Up = {$: 'Up'};
var elm$browser$Debugger$Main$UserMsg = function (a) {
	return {$: 'UserMsg', a: a};
};
var elm$browser$Debugger$History$size = function (history) {
	return history.numMessages;
};
var elm$browser$Debugger$Main$Export = {$: 'Export'};
var elm$browser$Debugger$Main$Import = {$: 'Import'};
var elm$browser$Debugger$Main$Open = {$: 'Open'};
var elm$browser$Debugger$Main$OverlayMsg = function (a) {
	return {$: 'OverlayMsg', a: a};
};
var elm$browser$Debugger$Main$Resume = {$: 'Resume'};
var elm$browser$Debugger$Main$isPaused = function (state) {
	if (state.$ === 'Running') {
		return false;
	} else {
		return true;
	}
};
var elm$browser$Debugger$Overlay$Accept = function (a) {
	return {$: 'Accept', a: a};
};
var elm$browser$Debugger$Overlay$Choose = F2(
	function (a, b) {
		return {$: 'Choose', a: a, b: b};
	});
var elm$browser$Debugger$Overlay$goodNews1 = '\nThe good news is that having values like this in your message type is not\nso great in the long run. You are better off using simpler data, like\n';
var elm$browser$Debugger$Overlay$goodNews2 = '\nfunction can pattern match on that data and call whatever functions, JSON\ndecoders, etc. you need. This makes the code much more explicit and easy to\nfollow for other readers (or you in a few months!)\n';
var elm$json$Json$Decode$succeed = _Json_succeed;
var elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var elm$html$Html$code = _VirtualDom_node('code');
var elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var elm$html$Html$text = elm$virtual_dom$VirtualDom$text;
var elm$browser$Debugger$Overlay$viewCode = function (name) {
	return A2(
		elm$html$Html$code,
		_List_Nil,
		_List_fromArray(
			[
				elm$html$Html$text(name)
			]));
};
var elm$browser$Debugger$Overlay$addCommas = function (items) {
	if (!items.b) {
		return '';
	} else {
		if (!items.b.b) {
			var item = items.a;
			return item;
		} else {
			if (!items.b.b.b) {
				var item1 = items.a;
				var _n1 = items.b;
				var item2 = _n1.a;
				return item1 + (' and ' + item2);
			} else {
				var lastItem = items.a;
				var otherItems = items.b;
				return A2(
					elm$core$String$join,
					', ',
					_Utils_ap(
						otherItems,
						_List_fromArray(
							[' and ' + lastItem])));
			}
		}
	}
};
var elm$browser$Debugger$Overlay$problemToString = function (problem) {
	switch (problem.$) {
		case 'Function':
			return 'functions';
		case 'Decoder':
			return 'JSON decoders';
		case 'Task':
			return 'tasks';
		case 'Process':
			return 'processes';
		case 'Socket':
			return 'web sockets';
		case 'Request':
			return 'HTTP requests';
		case 'Program':
			return 'programs';
		default:
			return 'virtual DOM values';
	}
};
var elm$html$Html$li = _VirtualDom_node('li');
var elm$browser$Debugger$Overlay$viewProblemType = function (_n0) {
	var name = _n0.name;
	var problems = _n0.problems;
	return A2(
		elm$html$Html$li,
		_List_Nil,
		_List_fromArray(
			[
				elm$browser$Debugger$Overlay$viewCode(name),
				elm$html$Html$text(
				' can contain ' + (elm$browser$Debugger$Overlay$addCommas(
					A2(elm$core$List$map, elm$browser$Debugger$Overlay$problemToString, problems)) + '.'))
			]));
};
var elm$html$Html$a = _VirtualDom_node('a');
var elm$html$Html$p = _VirtualDom_node('p');
var elm$html$Html$ul = _VirtualDom_node('ul');
var elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			elm$json$Json$Encode$string(string));
	});
var elm$html$Html$Attributes$href = function (url) {
	return A2(
		elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var elm$browser$Debugger$Overlay$viewBadMetadata = function (_n0) {
	var message = _n0.message;
	var problems = _n0.problems;
	return _List_fromArray(
		[
			A2(
			elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					elm$html$Html$text('The '),
					elm$browser$Debugger$Overlay$viewCode(message),
					elm$html$Html$text(' type of your program cannot be reliably serialized for history files.')
				])),
			A2(
			elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					elm$html$Html$text('Functions cannot be serialized, nor can values that contain functions. This is a problem in these places:')
				])),
			A2(
			elm$html$Html$ul,
			_List_Nil,
			A2(elm$core$List$map, elm$browser$Debugger$Overlay$viewProblemType, problems)),
			A2(
			elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					elm$html$Html$text(elm$browser$Debugger$Overlay$goodNews1),
					A2(
					elm$html$Html$a,
					_List_fromArray(
						[
							elm$html$Html$Attributes$href('https://guide.elm-lang.org/types/union_types.html')
						]),
					_List_fromArray(
						[
							elm$html$Html$text('union types')
						])),
					elm$html$Html$text(', in your messages. From there, your '),
					elm$browser$Debugger$Overlay$viewCode('update'),
					elm$html$Html$text(elm$browser$Debugger$Overlay$goodNews2)
				]))
		]);
};
var elm$browser$Debugger$Overlay$Cancel = {$: 'Cancel'};
var elm$browser$Debugger$Overlay$Proceed = {$: 'Proceed'};
var elm$html$Html$button = _VirtualDom_node('button');
var elm$html$Html$div = _VirtualDom_node('div');
var elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var elm$html$Html$Attributes$style = elm$virtual_dom$VirtualDom$style;
var elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			elm$virtual_dom$VirtualDom$on,
			event,
			elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var elm$html$Html$Events$onClick = function (msg) {
	return A2(
		elm$html$Html$Events$on,
		'click',
		elm$json$Json$Decode$succeed(msg));
};
var elm$browser$Debugger$Overlay$viewButtons = function (buttons) {
	var btn = F2(
		function (msg, string) {
			return A2(
				elm$html$Html$button,
				_List_fromArray(
					[
						A2(elm$html$Html$Attributes$style, 'margin-right', '20px'),
						elm$html$Html$Events$onClick(msg)
					]),
				_List_fromArray(
					[
						elm$html$Html$text(string)
					]));
		});
	var buttonNodes = function () {
		if (buttons.$ === 'Accept') {
			var proceed = buttons.a;
			return _List_fromArray(
				[
					A2(btn, elm$browser$Debugger$Overlay$Proceed, proceed)
				]);
		} else {
			var cancel = buttons.a;
			var proceed = buttons.b;
			return _List_fromArray(
				[
					A2(btn, elm$browser$Debugger$Overlay$Cancel, cancel),
					A2(btn, elm$browser$Debugger$Overlay$Proceed, proceed)
				]);
		}
	}();
	return A2(
		elm$html$Html$div,
		_List_fromArray(
			[
				A2(elm$html$Html$Attributes$style, 'height', '60px'),
				A2(elm$html$Html$Attributes$style, 'line-height', '60px'),
				A2(elm$html$Html$Attributes$style, 'text-align', 'right'),
				A2(elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
			]),
		buttonNodes);
};
var elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var elm$html$Html$map = elm$virtual_dom$VirtualDom$map;
var elm$html$Html$Attributes$id = elm$html$Html$Attributes$stringProperty('id');
var elm$browser$Debugger$Overlay$viewMessage = F4(
	function (config, title, details, buttons) {
		return A2(
			elm$html$Html$div,
			_List_fromArray(
				[
					elm$html$Html$Attributes$id('elm-debugger-overlay'),
					A2(elm$html$Html$Attributes$style, 'position', 'fixed'),
					A2(elm$html$Html$Attributes$style, 'top', '0'),
					A2(elm$html$Html$Attributes$style, 'left', '0'),
					A2(elm$html$Html$Attributes$style, 'width', '100%'),
					A2(elm$html$Html$Attributes$style, 'height', '100%'),
					A2(elm$html$Html$Attributes$style, 'color', 'white'),
					A2(elm$html$Html$Attributes$style, 'pointer-events', 'none'),
					A2(elm$html$Html$Attributes$style, 'font-family', '\'Trebuchet MS\', \'Lucida Grande\', \'Bitstream Vera Sans\', \'Helvetica Neue\', sans-serif'),
					A2(elm$html$Html$Attributes$style, 'z-index', '2147483647')
				]),
			_List_fromArray(
				[
					A2(
					elm$html$Html$div,
					_List_fromArray(
						[
							A2(elm$html$Html$Attributes$style, 'position', 'absolute'),
							A2(elm$html$Html$Attributes$style, 'width', '600px'),
							A2(elm$html$Html$Attributes$style, 'height', '100%'),
							A2(elm$html$Html$Attributes$style, 'padding-left', 'calc(50% - 300px)'),
							A2(elm$html$Html$Attributes$style, 'padding-right', 'calc(50% - 300px)'),
							A2(elm$html$Html$Attributes$style, 'background-color', 'rgba(200, 200, 200, 0.7)'),
							A2(elm$html$Html$Attributes$style, 'pointer-events', 'auto')
						]),
					_List_fromArray(
						[
							A2(
							elm$html$Html$div,
							_List_fromArray(
								[
									A2(elm$html$Html$Attributes$style, 'font-size', '36px'),
									A2(elm$html$Html$Attributes$style, 'height', '80px'),
									A2(elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)'),
									A2(elm$html$Html$Attributes$style, 'padding-left', '22px'),
									A2(elm$html$Html$Attributes$style, 'vertical-align', 'middle'),
									A2(elm$html$Html$Attributes$style, 'line-height', '80px')
								]),
							_List_fromArray(
								[
									elm$html$Html$text(title)
								])),
							A2(
							elm$html$Html$div,
							_List_fromArray(
								[
									elm$html$Html$Attributes$id('elm-debugger-details'),
									A2(elm$html$Html$Attributes$style, 'padding', ' 8px 20px'),
									A2(elm$html$Html$Attributes$style, 'overflow-y', 'auto'),
									A2(elm$html$Html$Attributes$style, 'max-height', 'calc(100% - 156px)'),
									A2(elm$html$Html$Attributes$style, 'background-color', 'rgb(61, 61, 61)')
								]),
							details),
							A2(
							elm$html$Html$map,
							config.wrap,
							elm$browser$Debugger$Overlay$viewButtons(buttons))
						]))
				]));
	});
var elm$html$Html$span = _VirtualDom_node('span');
var elm$browser$Debugger$Overlay$button = F2(
	function (msg, label) {
		return A2(
			elm$html$Html$span,
			_List_fromArray(
				[
					elm$html$Html$Events$onClick(msg),
					A2(elm$html$Html$Attributes$style, 'cursor', 'pointer')
				]),
			_List_fromArray(
				[
					elm$html$Html$text(label)
				]));
	});
var elm$browser$Debugger$Overlay$viewImportExport = F3(
	function (props, importMsg, exportMsg) {
		return A2(
			elm$html$Html$div,
			props,
			_List_fromArray(
				[
					A2(elm$browser$Debugger$Overlay$button, importMsg, 'Import'),
					elm$html$Html$text(' / '),
					A2(elm$browser$Debugger$Overlay$button, exportMsg, 'Export')
				]));
	});
var elm$browser$Debugger$Overlay$viewMiniControls = F2(
	function (config, numMsgs) {
		return A2(
			elm$html$Html$div,
			_List_fromArray(
				[
					A2(elm$html$Html$Attributes$style, 'position', 'fixed'),
					A2(elm$html$Html$Attributes$style, 'bottom', '0'),
					A2(elm$html$Html$Attributes$style, 'right', '6px'),
					A2(elm$html$Html$Attributes$style, 'border-radius', '4px'),
					A2(elm$html$Html$Attributes$style, 'background-color', 'rgb(61, 61, 61)'),
					A2(elm$html$Html$Attributes$style, 'color', 'white'),
					A2(elm$html$Html$Attributes$style, 'font-family', 'monospace'),
					A2(elm$html$Html$Attributes$style, 'pointer-events', 'auto'),
					A2(elm$html$Html$Attributes$style, 'z-index', '2147483647')
				]),
			_List_fromArray(
				[
					A2(
					elm$html$Html$div,
					_List_fromArray(
						[
							A2(elm$html$Html$Attributes$style, 'padding', '6px'),
							A2(elm$html$Html$Attributes$style, 'cursor', 'pointer'),
							A2(elm$html$Html$Attributes$style, 'text-align', 'center'),
							A2(elm$html$Html$Attributes$style, 'min-width', '24ch'),
							elm$html$Html$Events$onClick(config.open)
						]),
					_List_fromArray(
						[
							elm$html$Html$text(
							'Explore History (' + (elm$core$String$fromInt(numMsgs) + ')'))
						])),
					A3(
					elm$browser$Debugger$Overlay$viewImportExport,
					_List_fromArray(
						[
							A2(elm$html$Html$Attributes$style, 'padding', '4px 0'),
							A2(elm$html$Html$Attributes$style, 'font-size', '0.8em'),
							A2(elm$html$Html$Attributes$style, 'text-align', 'center'),
							A2(elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
						]),
					config.importHistory,
					config.exportHistory)
				]));
	});
var elm$browser$Debugger$Overlay$explanationBad = '\nThe messages in this history do not match the messages handled by your\nprogram. I noticed changes in the following types:\n';
var elm$browser$Debugger$Overlay$explanationRisky = '\nThis history seems old. It will work with this program, but some\nmessages have been added since the history was created:\n';
var elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						elm$core$List$cons,
						sep,
						A2(elm$core$List$cons, x, rest));
				});
			var spersed = A3(elm$core$List$foldr, step, _List_Nil, tl);
			return A2(elm$core$List$cons, hd, spersed);
		}
	});
var elm$browser$Debugger$Overlay$viewMention = F2(
	function (tags, verbed) {
		var _n0 = A2(
			elm$core$List$map,
			elm$browser$Debugger$Overlay$viewCode,
			elm$core$List$reverse(tags));
		if (!_n0.b) {
			return elm$html$Html$text('');
		} else {
			if (!_n0.b.b) {
				var tag = _n0.a;
				return A2(
					elm$html$Html$li,
					_List_Nil,
					_List_fromArray(
						[
							elm$html$Html$text(verbed),
							tag,
							elm$html$Html$text('.')
						]));
			} else {
				if (!_n0.b.b.b) {
					var tag2 = _n0.a;
					var _n1 = _n0.b;
					var tag1 = _n1.a;
					return A2(
						elm$html$Html$li,
						_List_Nil,
						_List_fromArray(
							[
								elm$html$Html$text(verbed),
								tag1,
								elm$html$Html$text(' and '),
								tag2,
								elm$html$Html$text('.')
							]));
				} else {
					var lastTag = _n0.a;
					var otherTags = _n0.b;
					return A2(
						elm$html$Html$li,
						_List_Nil,
						A2(
							elm$core$List$cons,
							elm$html$Html$text(verbed),
							_Utils_ap(
								A2(
									elm$core$List$intersperse,
									elm$html$Html$text(', '),
									elm$core$List$reverse(otherTags)),
								_List_fromArray(
									[
										elm$html$Html$text(', and '),
										lastTag,
										elm$html$Html$text('.')
									]))));
				}
			}
		}
	});
var elm$browser$Debugger$Overlay$viewChange = function (change) {
	return A2(
		elm$html$Html$li,
		_List_fromArray(
			[
				A2(elm$html$Html$Attributes$style, 'margin', '8px 0')
			]),
		function () {
			if (change.$ === 'AliasChange') {
				var name = change.a;
				return _List_fromArray(
					[
						A2(
						elm$html$Html$span,
						_List_fromArray(
							[
								A2(elm$html$Html$Attributes$style, 'font-size', '1.5em')
							]),
						_List_fromArray(
							[
								elm$browser$Debugger$Overlay$viewCode(name)
							]))
					]);
			} else {
				var name = change.a;
				var removed = change.b.removed;
				var changed = change.b.changed;
				var added = change.b.added;
				var argsMatch = change.b.argsMatch;
				return _List_fromArray(
					[
						A2(
						elm$html$Html$span,
						_List_fromArray(
							[
								A2(elm$html$Html$Attributes$style, 'font-size', '1.5em')
							]),
						_List_fromArray(
							[
								elm$browser$Debugger$Overlay$viewCode(name)
							])),
						A2(
						elm$html$Html$ul,
						_List_fromArray(
							[
								A2(elm$html$Html$Attributes$style, 'list-style-type', 'disc'),
								A2(elm$html$Html$Attributes$style, 'padding-left', '2em')
							]),
						_List_fromArray(
							[
								A2(elm$browser$Debugger$Overlay$viewMention, removed, 'Removed '),
								A2(elm$browser$Debugger$Overlay$viewMention, changed, 'Changed '),
								A2(elm$browser$Debugger$Overlay$viewMention, added, 'Added ')
							])),
						argsMatch ? elm$html$Html$text('') : elm$html$Html$text('This may be due to the fact that the type variable names changed.')
					]);
			}
		}());
};
var elm$browser$Debugger$Overlay$viewReport = F2(
	function (isBad, report) {
		switch (report.$) {
			case 'CorruptHistory':
				return _List_fromArray(
					[
						elm$html$Html$text('Looks like this history file is corrupt. I cannot understand it.')
					]);
			case 'VersionChanged':
				var old = report.a;
				var _new = report.b;
				return _List_fromArray(
					[
						elm$html$Html$text('This history was created with Elm ' + (old + (', but you are using Elm ' + (_new + ' right now.'))))
					]);
			case 'MessageChanged':
				var old = report.a;
				var _new = report.b;
				return _List_fromArray(
					[
						elm$html$Html$text('To import some other history, the overall message type must' + ' be the same. The old history has '),
						elm$browser$Debugger$Overlay$viewCode(old),
						elm$html$Html$text(' messages, but the new program works with '),
						elm$browser$Debugger$Overlay$viewCode(_new),
						elm$html$Html$text(' messages.')
					]);
			default:
				var changes = report.a;
				return _List_fromArray(
					[
						A2(
						elm$html$Html$p,
						_List_Nil,
						_List_fromArray(
							[
								elm$html$Html$text(
								isBad ? elm$browser$Debugger$Overlay$explanationBad : elm$browser$Debugger$Overlay$explanationRisky)
							])),
						A2(
						elm$html$Html$ul,
						_List_fromArray(
							[
								A2(elm$html$Html$Attributes$style, 'list-style-type', 'none'),
								A2(elm$html$Html$Attributes$style, 'padding-left', '20px')
							]),
						A2(elm$core$List$map, elm$browser$Debugger$Overlay$viewChange, changes))
					]);
		}
	});
var elm$browser$Debugger$Overlay$view = F5(
	function (config, isPaused, isOpen, numMsgs, state) {
		switch (state.$) {
			case 'None':
				return isOpen ? elm$html$Html$text('') : (isPaused ? A2(
					elm$html$Html$div,
					_List_fromArray(
						[
							A2(elm$html$Html$Attributes$style, 'width', '100%'),
							A2(elm$html$Html$Attributes$style, 'height', '100%'),
							A2(elm$html$Html$Attributes$style, 'cursor', 'pointer'),
							A2(elm$html$Html$Attributes$style, 'text-align', 'center'),
							A2(elm$html$Html$Attributes$style, 'pointer-events', 'auto'),
							A2(elm$html$Html$Attributes$style, 'background-color', 'rgba(200, 200, 200, 0.7)'),
							A2(elm$html$Html$Attributes$style, 'color', 'white'),
							A2(elm$html$Html$Attributes$style, 'font-family', '\'Trebuchet MS\', \'Lucida Grande\', \'Bitstream Vera Sans\', \'Helvetica Neue\', sans-serif'),
							A2(elm$html$Html$Attributes$style, 'z-index', '2147483646'),
							elm$html$Html$Events$onClick(config.resume)
						]),
					_List_fromArray(
						[
							A2(
							elm$html$Html$div,
							_List_fromArray(
								[
									A2(elm$html$Html$Attributes$style, 'position', 'absolute'),
									A2(elm$html$Html$Attributes$style, 'top', 'calc(50% - 40px)'),
									A2(elm$html$Html$Attributes$style, 'font-size', '80px'),
									A2(elm$html$Html$Attributes$style, 'line-height', '80px'),
									A2(elm$html$Html$Attributes$style, 'height', '80px'),
									A2(elm$html$Html$Attributes$style, 'width', '100%')
								]),
							_List_fromArray(
								[
									elm$html$Html$text('Click to Resume')
								])),
							A2(elm$browser$Debugger$Overlay$viewMiniControls, config, numMsgs)
						])) : A2(elm$browser$Debugger$Overlay$viewMiniControls, config, numMsgs));
			case 'BadMetadata':
				var badMetadata_ = state.a;
				return A4(
					elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Cannot use Import or Export',
					elm$browser$Debugger$Overlay$viewBadMetadata(badMetadata_),
					elm$browser$Debugger$Overlay$Accept('Ok'));
			case 'BadImport':
				var report = state.a;
				return A4(
					elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Cannot Import History',
					A2(elm$browser$Debugger$Overlay$viewReport, true, report),
					elm$browser$Debugger$Overlay$Accept('Ok'));
			default:
				var report = state.a;
				return A4(
					elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Warning',
					A2(elm$browser$Debugger$Overlay$viewReport, false, report),
					A2(elm$browser$Debugger$Overlay$Choose, 'Cancel', 'Import Anyway'));
		}
	});
var elm$browser$Debugger$Main$cornerView = function (model) {
	return A5(
		elm$browser$Debugger$Overlay$view,
		{exportHistory: elm$browser$Debugger$Main$Export, importHistory: elm$browser$Debugger$Main$Import, open: elm$browser$Debugger$Main$Open, resume: elm$browser$Debugger$Main$Resume, wrap: elm$browser$Debugger$Main$OverlayMsg},
		elm$browser$Debugger$Main$isPaused(model.state),
		_Debugger_isOpen(model.popout),
		elm$browser$Debugger$History$size(model.history),
		model.overlay);
};
var elm$browser$Debugger$Main$getCurrentModel = function (state) {
	if (state.$ === 'Running') {
		var model = state.a;
		return model;
	} else {
		var model = state.b;
		return model;
	}
};
var elm$browser$Debugger$Main$getUserModel = function (model) {
	return elm$browser$Debugger$Main$getCurrentModel(model.state);
};
var elm$browser$Debugger$Expando$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var elm$browser$Debugger$Expando$Index = F3(
	function (a, b, c) {
		return {$: 'Index', a: a, b: b, c: c};
	});
var elm$browser$Debugger$Expando$Key = {$: 'Key'};
var elm$browser$Debugger$Expando$None = {$: 'None'};
var elm$browser$Debugger$Expando$Toggle = {$: 'Toggle'};
var elm$browser$Debugger$Expando$Value = {$: 'Value'};
var elm$browser$Debugger$Expando$blue = A2(elm$html$Html$Attributes$style, 'color', 'rgb(28, 0, 207)');
var elm$browser$Debugger$Expando$leftPad = function (maybeKey) {
	if (maybeKey.$ === 'Nothing') {
		return _List_Nil;
	} else {
		return _List_fromArray(
			[
				A2(elm$html$Html$Attributes$style, 'padding-left', '4ch')
			]);
	}
};
var elm$browser$Debugger$Expando$makeArrow = function (arrow) {
	return A2(
		elm$html$Html$span,
		_List_fromArray(
			[
				A2(elm$html$Html$Attributes$style, 'color', '#777'),
				A2(elm$html$Html$Attributes$style, 'padding-left', '2ch'),
				A2(elm$html$Html$Attributes$style, 'width', '2ch'),
				A2(elm$html$Html$Attributes$style, 'display', 'inline-block')
			]),
		_List_fromArray(
			[
				elm$html$Html$text(arrow)
			]));
};
var elm$browser$Debugger$Expando$purple = A2(elm$html$Html$Attributes$style, 'color', 'rgb(136, 19, 145)');
var elm$browser$Debugger$Expando$lineStarter = F3(
	function (maybeKey, maybeIsClosed, description) {
		var arrow = function () {
			if (maybeIsClosed.$ === 'Nothing') {
				return elm$browser$Debugger$Expando$makeArrow('');
			} else {
				if (maybeIsClosed.a) {
					return elm$browser$Debugger$Expando$makeArrow('▸');
				} else {
					return elm$browser$Debugger$Expando$makeArrow('▾');
				}
			}
		}();
		if (maybeKey.$ === 'Nothing') {
			return A2(elm$core$List$cons, arrow, description);
		} else {
			var key = maybeKey.a;
			return A2(
				elm$core$List$cons,
				arrow,
				A2(
					elm$core$List$cons,
					A2(
						elm$html$Html$span,
						_List_fromArray(
							[elm$browser$Debugger$Expando$purple]),
						_List_fromArray(
							[
								elm$html$Html$text(key)
							])),
					A2(
						elm$core$List$cons,
						elm$html$Html$text(' = '),
						description)));
		}
	});
var elm$browser$Debugger$Expando$red = A2(elm$html$Html$Attributes$style, 'color', 'rgb(196, 26, 22)');
var elm$browser$Debugger$Expando$seqTypeToString = F2(
	function (n, seqType) {
		switch (seqType.$) {
			case 'ListSeq':
				return 'List(' + (elm$core$String$fromInt(n) + ')');
			case 'SetSeq':
				return 'Set(' + (elm$core$String$fromInt(n) + ')');
			default:
				return 'Array(' + (elm$core$String$fromInt(n) + ')');
		}
	});
var elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(elm$core$String$slice, 0, n, string);
	});
var elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			elm$core$String$slice,
			-n,
			elm$core$String$length(string),
			string);
	});
var elm$browser$Debugger$Expando$elideMiddle = function (str) {
	return (elm$core$String$length(str) <= 18) ? str : (A2(elm$core$String$left, 8, str) + ('...' + A2(elm$core$String$right, 8, str)));
};
var elm$browser$Debugger$Expando$viewExtraTinyRecord = F3(
	function (length, starter, entries) {
		if (!entries.b) {
			return _Utils_Tuple2(
				length + 1,
				_List_fromArray(
					[
						elm$html$Html$text('}')
					]));
		} else {
			var field = entries.a;
			var rest = entries.b;
			var nextLength = (length + elm$core$String$length(field)) + 1;
			if (nextLength > 18) {
				return _Utils_Tuple2(
					length + 2,
					_List_fromArray(
						[
							elm$html$Html$text('…}')
						]));
			} else {
				var _n1 = A3(elm$browser$Debugger$Expando$viewExtraTinyRecord, nextLength, ',', rest);
				var finalLength = _n1.a;
				var otherHtmls = _n1.b;
				return _Utils_Tuple2(
					finalLength,
					A2(
						elm$core$List$cons,
						elm$html$Html$text(starter),
						A2(
							elm$core$List$cons,
							A2(
								elm$html$Html$span,
								_List_fromArray(
									[elm$browser$Debugger$Expando$purple]),
								_List_fromArray(
									[
										elm$html$Html$text(field)
									])),
							otherHtmls)));
			}
		}
	});
var elm$browser$Debugger$Expando$viewTinyHelp = function (str) {
	return _Utils_Tuple2(
		elm$core$String$length(str),
		_List_fromArray(
			[
				elm$html$Html$text(str)
			]));
};
var elm$core$Dict$isEmpty = function (dict) {
	if (dict.$ === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var elm$browser$Debugger$Expando$viewExtraTiny = function (value) {
	if (value.$ === 'Record') {
		var record = value.b;
		return A3(
			elm$browser$Debugger$Expando$viewExtraTinyRecord,
			0,
			'{',
			elm$core$Dict$keys(record));
	} else {
		return elm$browser$Debugger$Expando$viewTiny(value);
	}
};
var elm$browser$Debugger$Expando$viewTiny = function (value) {
	switch (value.$) {
		case 'S':
			var stringRep = value.a;
			var str = elm$browser$Debugger$Expando$elideMiddle(stringRep);
			return _Utils_Tuple2(
				elm$core$String$length(str),
				_List_fromArray(
					[
						A2(
						elm$html$Html$span,
						_List_fromArray(
							[elm$browser$Debugger$Expando$red]),
						_List_fromArray(
							[
								elm$html$Html$text(str)
							]))
					]));
		case 'Primitive':
			var stringRep = value.a;
			return _Utils_Tuple2(
				elm$core$String$length(stringRep),
				_List_fromArray(
					[
						A2(
						elm$html$Html$span,
						_List_fromArray(
							[elm$browser$Debugger$Expando$blue]),
						_List_fromArray(
							[
								elm$html$Html$text(stringRep)
							]))
					]));
		case 'Sequence':
			var seqType = value.a;
			var valueList = value.c;
			return elm$browser$Debugger$Expando$viewTinyHelp(
				A2(
					elm$browser$Debugger$Expando$seqTypeToString,
					elm$core$List$length(valueList),
					seqType));
		case 'Dictionary':
			var keyValuePairs = value.b;
			return elm$browser$Debugger$Expando$viewTinyHelp(
				'Dict(' + (elm$core$String$fromInt(
					elm$core$List$length(keyValuePairs)) + ')'));
		case 'Record':
			var record = value.b;
			return elm$browser$Debugger$Expando$viewTinyRecord(record);
		default:
			if (!value.c.b) {
				var maybeName = value.a;
				return elm$browser$Debugger$Expando$viewTinyHelp(
					A2(elm$core$Maybe$withDefault, 'Unit', maybeName));
			} else {
				var maybeName = value.a;
				var valueList = value.c;
				return elm$browser$Debugger$Expando$viewTinyHelp(
					function () {
						if (maybeName.$ === 'Nothing') {
							return 'Tuple(' + (elm$core$String$fromInt(
								elm$core$List$length(valueList)) + ')');
						} else {
							var name = maybeName.a;
							return name + ' …';
						}
					}());
			}
	}
};
var elm$browser$Debugger$Expando$viewTinyRecord = function (record) {
	return elm$core$Dict$isEmpty(record) ? _Utils_Tuple2(
		2,
		_List_fromArray(
			[
				elm$html$Html$text('{}')
			])) : A3(
		elm$browser$Debugger$Expando$viewTinyRecordHelp,
		0,
		'{ ',
		elm$core$Dict$toList(record));
};
var elm$browser$Debugger$Expando$viewTinyRecordHelp = F3(
	function (length, starter, entries) {
		if (!entries.b) {
			return _Utils_Tuple2(
				length + 2,
				_List_fromArray(
					[
						elm$html$Html$text(' }')
					]));
		} else {
			var _n1 = entries.a;
			var field = _n1.a;
			var value = _n1.b;
			var rest = entries.b;
			var fieldLen = elm$core$String$length(field);
			var _n2 = elm$browser$Debugger$Expando$viewExtraTiny(value);
			var valueLen = _n2.a;
			var valueHtmls = _n2.b;
			var newLength = ((length + fieldLen) + valueLen) + 5;
			if (newLength > 60) {
				return _Utils_Tuple2(
					length + 4,
					_List_fromArray(
						[
							elm$html$Html$text(', … }')
						]));
			} else {
				var _n3 = A3(elm$browser$Debugger$Expando$viewTinyRecordHelp, newLength, ', ', rest);
				var finalLength = _n3.a;
				var otherHtmls = _n3.b;
				return _Utils_Tuple2(
					finalLength,
					A2(
						elm$core$List$cons,
						elm$html$Html$text(starter),
						A2(
							elm$core$List$cons,
							A2(
								elm$html$Html$span,
								_List_fromArray(
									[elm$browser$Debugger$Expando$purple]),
								_List_fromArray(
									[
										elm$html$Html$text(field)
									])),
							A2(
								elm$core$List$cons,
								elm$html$Html$text(' = '),
								A2(
									elm$core$List$cons,
									A2(elm$html$Html$span, _List_Nil, valueHtmls),
									otherHtmls)))));
			}
		}
	});
var elm$browser$Debugger$Expando$view = F2(
	function (maybeKey, expando) {
		switch (expando.$) {
			case 'S':
				var stringRep = expando.a;
				return A2(
					elm$html$Html$div,
					elm$browser$Debugger$Expando$leftPad(maybeKey),
					A3(
						elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						elm$core$Maybe$Nothing,
						_List_fromArray(
							[
								A2(
								elm$html$Html$span,
								_List_fromArray(
									[elm$browser$Debugger$Expando$red]),
								_List_fromArray(
									[
										elm$html$Html$text(stringRep)
									]))
							])));
			case 'Primitive':
				var stringRep = expando.a;
				return A2(
					elm$html$Html$div,
					elm$browser$Debugger$Expando$leftPad(maybeKey),
					A3(
						elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						elm$core$Maybe$Nothing,
						_List_fromArray(
							[
								A2(
								elm$html$Html$span,
								_List_fromArray(
									[elm$browser$Debugger$Expando$blue]),
								_List_fromArray(
									[
										elm$html$Html$text(stringRep)
									]))
							])));
			case 'Sequence':
				var seqType = expando.a;
				var isClosed = expando.b;
				var valueList = expando.c;
				return A4(elm$browser$Debugger$Expando$viewSequence, maybeKey, seqType, isClosed, valueList);
			case 'Dictionary':
				var isClosed = expando.a;
				var keyValuePairs = expando.b;
				return A3(elm$browser$Debugger$Expando$viewDictionary, maybeKey, isClosed, keyValuePairs);
			case 'Record':
				var isClosed = expando.a;
				var valueDict = expando.b;
				return A3(elm$browser$Debugger$Expando$viewRecord, maybeKey, isClosed, valueDict);
			default:
				var maybeName = expando.a;
				var isClosed = expando.b;
				var valueList = expando.c;
				return A4(elm$browser$Debugger$Expando$viewConstructor, maybeKey, maybeName, isClosed, valueList);
		}
	});
var elm$browser$Debugger$Expando$viewConstructor = F4(
	function (maybeKey, maybeName, isClosed, valueList) {
		var tinyArgs = A2(
			elm$core$List$map,
			A2(elm$core$Basics$composeL, elm$core$Tuple$second, elm$browser$Debugger$Expando$viewExtraTiny),
			valueList);
		var description = function () {
			var _n7 = _Utils_Tuple2(maybeName, tinyArgs);
			if (_n7.a.$ === 'Nothing') {
				if (!_n7.b.b) {
					var _n8 = _n7.a;
					return _List_fromArray(
						[
							elm$html$Html$text('()')
						]);
				} else {
					var _n9 = _n7.a;
					var _n10 = _n7.b;
					var x = _n10.a;
					var xs = _n10.b;
					return A2(
						elm$core$List$cons,
						elm$html$Html$text('( '),
						A2(
							elm$core$List$cons,
							A2(elm$html$Html$span, _List_Nil, x),
							A3(
								elm$core$List$foldr,
								F2(
									function (args, rest) {
										return A2(
											elm$core$List$cons,
											elm$html$Html$text(', '),
											A2(
												elm$core$List$cons,
												A2(elm$html$Html$span, _List_Nil, args),
												rest));
									}),
								_List_fromArray(
									[
										elm$html$Html$text(' )')
									]),
								xs)));
				}
			} else {
				if (!_n7.b.b) {
					var name = _n7.a.a;
					return _List_fromArray(
						[
							elm$html$Html$text(name)
						]);
				} else {
					var name = _n7.a.a;
					var _n11 = _n7.b;
					var x = _n11.a;
					var xs = _n11.b;
					return A2(
						elm$core$List$cons,
						elm$html$Html$text(name + ' '),
						A2(
							elm$core$List$cons,
							A2(elm$html$Html$span, _List_Nil, x),
							A3(
								elm$core$List$foldr,
								F2(
									function (args, rest) {
										return A2(
											elm$core$List$cons,
											elm$html$Html$text(' '),
											A2(
												elm$core$List$cons,
												A2(elm$html$Html$span, _List_Nil, args),
												rest));
									}),
								_List_Nil,
								xs)));
				}
			}
		}();
		var _n4 = function () {
			if (!valueList.b) {
				return _Utils_Tuple2(
					elm$core$Maybe$Nothing,
					A2(elm$html$Html$div, _List_Nil, _List_Nil));
			} else {
				if (!valueList.b.b) {
					var entry = valueList.a;
					switch (entry.$) {
						case 'S':
							return _Utils_Tuple2(
								elm$core$Maybe$Nothing,
								A2(elm$html$Html$div, _List_Nil, _List_Nil));
						case 'Primitive':
							return _Utils_Tuple2(
								elm$core$Maybe$Nothing,
								A2(elm$html$Html$div, _List_Nil, _List_Nil));
						case 'Sequence':
							var subValueList = entry.c;
							return _Utils_Tuple2(
								elm$core$Maybe$Just(isClosed),
								isClosed ? A2(elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									elm$html$Html$map,
									A2(elm$browser$Debugger$Expando$Index, elm$browser$Debugger$Expando$None, 0),
									elm$browser$Debugger$Expando$viewSequenceOpen(subValueList)));
						case 'Dictionary':
							var keyValuePairs = entry.b;
							return _Utils_Tuple2(
								elm$core$Maybe$Just(isClosed),
								isClosed ? A2(elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									elm$html$Html$map,
									A2(elm$browser$Debugger$Expando$Index, elm$browser$Debugger$Expando$None, 0),
									elm$browser$Debugger$Expando$viewDictionaryOpen(keyValuePairs)));
						case 'Record':
							var record = entry.b;
							return _Utils_Tuple2(
								elm$core$Maybe$Just(isClosed),
								isClosed ? A2(elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									elm$html$Html$map,
									A2(elm$browser$Debugger$Expando$Index, elm$browser$Debugger$Expando$None, 0),
									elm$browser$Debugger$Expando$viewRecordOpen(record)));
						default:
							var subValueList = entry.c;
							return _Utils_Tuple2(
								elm$core$Maybe$Just(isClosed),
								isClosed ? A2(elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									elm$html$Html$map,
									A2(elm$browser$Debugger$Expando$Index, elm$browser$Debugger$Expando$None, 0),
									elm$browser$Debugger$Expando$viewConstructorOpen(subValueList)));
					}
				} else {
					return _Utils_Tuple2(
						elm$core$Maybe$Just(isClosed),
						isClosed ? A2(elm$html$Html$div, _List_Nil, _List_Nil) : elm$browser$Debugger$Expando$viewConstructorOpen(valueList));
				}
			}
		}();
		var maybeIsClosed = _n4.a;
		var openHtml = _n4.b;
		return A2(
			elm$html$Html$div,
			elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					elm$html$Html$div,
					_List_fromArray(
						[
							elm$html$Html$Events$onClick(elm$browser$Debugger$Expando$Toggle)
						]),
					A3(elm$browser$Debugger$Expando$lineStarter, maybeKey, maybeIsClosed, description)),
					openHtml
				]));
	});
var elm$browser$Debugger$Expando$viewConstructorEntry = F2(
	function (index, value) {
		return A2(
			elm$html$Html$map,
			A2(elm$browser$Debugger$Expando$Index, elm$browser$Debugger$Expando$None, index),
			A2(
				elm$browser$Debugger$Expando$view,
				elm$core$Maybe$Just(
					elm$core$String$fromInt(index)),
				value));
	});
var elm$browser$Debugger$Expando$viewConstructorOpen = function (valueList) {
	return A2(
		elm$html$Html$div,
		_List_Nil,
		A2(elm$core$List$indexedMap, elm$browser$Debugger$Expando$viewConstructorEntry, valueList));
};
var elm$browser$Debugger$Expando$viewDictionary = F3(
	function (maybeKey, isClosed, keyValuePairs) {
		var starter = 'Dict(' + (elm$core$String$fromInt(
			elm$core$List$length(keyValuePairs)) + ')');
		return A2(
			elm$html$Html$div,
			elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					elm$html$Html$div,
					_List_fromArray(
						[
							elm$html$Html$Events$onClick(elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						elm$core$Maybe$Just(isClosed),
						_List_fromArray(
							[
								elm$html$Html$text(starter)
							]))),
					isClosed ? elm$html$Html$text('') : elm$browser$Debugger$Expando$viewDictionaryOpen(keyValuePairs)
				]));
	});
var elm$browser$Debugger$Expando$viewDictionaryEntry = F2(
	function (index, _n2) {
		var key = _n2.a;
		var value = _n2.b;
		switch (key.$) {
			case 'S':
				var stringRep = key.a;
				return A2(
					elm$html$Html$map,
					A2(elm$browser$Debugger$Expando$Index, elm$browser$Debugger$Expando$Value, index),
					A2(
						elm$browser$Debugger$Expando$view,
						elm$core$Maybe$Just(stringRep),
						value));
			case 'Primitive':
				var stringRep = key.a;
				return A2(
					elm$html$Html$map,
					A2(elm$browser$Debugger$Expando$Index, elm$browser$Debugger$Expando$Value, index),
					A2(
						elm$browser$Debugger$Expando$view,
						elm$core$Maybe$Just(stringRep),
						value));
			default:
				return A2(
					elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							elm$html$Html$map,
							A2(elm$browser$Debugger$Expando$Index, elm$browser$Debugger$Expando$Key, index),
							A2(
								elm$browser$Debugger$Expando$view,
								elm$core$Maybe$Just('key'),
								key)),
							A2(
							elm$html$Html$map,
							A2(elm$browser$Debugger$Expando$Index, elm$browser$Debugger$Expando$Value, index),
							A2(
								elm$browser$Debugger$Expando$view,
								elm$core$Maybe$Just('value'),
								value))
						]));
		}
	});
var elm$browser$Debugger$Expando$viewDictionaryOpen = function (keyValuePairs) {
	return A2(
		elm$html$Html$div,
		_List_Nil,
		A2(elm$core$List$indexedMap, elm$browser$Debugger$Expando$viewDictionaryEntry, keyValuePairs));
};
var elm$browser$Debugger$Expando$viewRecord = F3(
	function (maybeKey, isClosed, record) {
		var _n1 = isClosed ? _Utils_Tuple3(
			elm$browser$Debugger$Expando$viewTinyRecord(record).b,
			elm$html$Html$text(''),
			elm$html$Html$text('')) : _Utils_Tuple3(
			_List_fromArray(
				[
					elm$html$Html$text('{')
				]),
			elm$browser$Debugger$Expando$viewRecordOpen(record),
			A2(
				elm$html$Html$div,
				elm$browser$Debugger$Expando$leftPad(
					elm$core$Maybe$Just(_Utils_Tuple0)),
				_List_fromArray(
					[
						elm$html$Html$text('}')
					])));
		var start = _n1.a;
		var middle = _n1.b;
		var end = _n1.c;
		return A2(
			elm$html$Html$div,
			elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					elm$html$Html$div,
					_List_fromArray(
						[
							elm$html$Html$Events$onClick(elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						elm$core$Maybe$Just(isClosed),
						start)),
					middle,
					end
				]));
	});
var elm$browser$Debugger$Expando$viewRecordEntry = function (_n0) {
	var field = _n0.a;
	var value = _n0.b;
	return A2(
		elm$html$Html$map,
		elm$browser$Debugger$Expando$Field(field),
		A2(
			elm$browser$Debugger$Expando$view,
			elm$core$Maybe$Just(field),
			value));
};
var elm$browser$Debugger$Expando$viewRecordOpen = function (record) {
	return A2(
		elm$html$Html$div,
		_List_Nil,
		A2(
			elm$core$List$map,
			elm$browser$Debugger$Expando$viewRecordEntry,
			elm$core$Dict$toList(record)));
};
var elm$browser$Debugger$Expando$viewSequence = F4(
	function (maybeKey, seqType, isClosed, valueList) {
		var starter = A2(
			elm$browser$Debugger$Expando$seqTypeToString,
			elm$core$List$length(valueList),
			seqType);
		return A2(
			elm$html$Html$div,
			elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					elm$html$Html$div,
					_List_fromArray(
						[
							elm$html$Html$Events$onClick(elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						elm$core$Maybe$Just(isClosed),
						_List_fromArray(
							[
								elm$html$Html$text(starter)
							]))),
					isClosed ? elm$html$Html$text('') : elm$browser$Debugger$Expando$viewSequenceOpen(valueList)
				]));
	});
var elm$browser$Debugger$Expando$viewSequenceOpen = function (values) {
	return A2(
		elm$html$Html$div,
		_List_Nil,
		A2(elm$core$List$indexedMap, elm$browser$Debugger$Expando$viewConstructorEntry, values));
};
var elm$browser$Debugger$Main$ExpandoMsg = function (a) {
	return {$: 'ExpandoMsg', a: a};
};
var elm$html$Html$Attributes$class = elm$html$Html$Attributes$stringProperty('className');
var elm$html$Html$Attributes$title = elm$html$Html$Attributes$stringProperty('title');
var elm$browser$Debugger$History$viewMessage = F3(
	function (currentIndex, index, msg) {
		var messageName = _Debugger_messageToString(msg);
		var className = _Utils_eq(currentIndex, index) ? 'elm-debugger-entry elm-debugger-entry-selected' : 'elm-debugger-entry';
		return A2(
			elm$html$Html$div,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class(className),
					elm$html$Html$Events$onClick(index)
				]),
			_List_fromArray(
				[
					A2(
					elm$html$Html$span,
					_List_fromArray(
						[
							elm$html$Html$Attributes$title(messageName),
							elm$html$Html$Attributes$class('elm-debugger-entry-content')
						]),
					_List_fromArray(
						[
							elm$html$Html$text(messageName)
						])),
					A2(
					elm$html$Html$span,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class('elm-debugger-entry-index')
						]),
					_List_fromArray(
						[
							elm$html$Html$text(
							elm$core$String$fromInt(index))
						]))
				]));
	});
var elm$virtual_dom$VirtualDom$lazy3 = _VirtualDom_lazy3;
var elm$html$Html$Lazy$lazy3 = elm$virtual_dom$VirtualDom$lazy3;
var elm$browser$Debugger$History$consMsg = F3(
	function (currentIndex, msg, _n0) {
		var index = _n0.a;
		var rest = _n0.b;
		return _Utils_Tuple2(
			index - 1,
			A2(
				elm$core$List$cons,
				A4(elm$html$Html$Lazy$lazy3, elm$browser$Debugger$History$viewMessage, currentIndex, index, msg),
				rest));
	});
var elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var elm$html$Html$node = elm$virtual_dom$VirtualDom$node;
var elm$browser$Debugger$History$styles = A3(
	elm$html$Html$node,
	'style',
	_List_Nil,
	_List_fromArray(
		[
			elm$html$Html$text('\n\n.elm-debugger-entry {\n  cursor: pointer;\n  width: 100%;\n}\n\n.elm-debugger-entry:hover {\n  background-color: rgb(41, 41, 41);\n}\n\n.elm-debugger-entry-selected, .elm-debugger-entry-selected:hover {\n  background-color: rgb(10, 10, 10);\n}\n\n.elm-debugger-entry-content {\n  width: calc(100% - 7ch);\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 1ch;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: inline-block;\n}\n\n.elm-debugger-entry-index {\n  color: #666;\n  width: 5ch;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-right: 1ch;\n  text-align: right;\n  display: block;\n  float: right;\n}\n\n')
		]));
var elm$browser$Debugger$History$maxSnapshotSize = 64;
var elm$core$Elm$JsArray$foldl = _JsArray_foldl;
var elm$core$Array$foldl = F3(
	function (func, baseCase, _n0) {
		var tree = _n0.c;
		var tail = _n0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3(elm$core$Elm$JsArray$foldl, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3(elm$core$Elm$JsArray$foldl, func, acc, values);
				}
			});
		return A3(
			elm$core$Elm$JsArray$foldl,
			func,
			A3(elm$core$Elm$JsArray$foldl, helper, baseCase, tree),
			tail);
	});
var elm$browser$Debugger$History$viewSnapshot = F3(
	function (currentIndex, index, _n0) {
		var messages = _n0.messages;
		return A2(
			elm$html$Html$div,
			_List_Nil,
			A3(
				elm$core$Array$foldl,
				elm$browser$Debugger$History$consMsg(currentIndex),
				_Utils_Tuple2(index - 1, _List_Nil),
				messages).b);
	});
var elm$browser$Debugger$History$consSnapshot = F3(
	function (currentIndex, snapshot, _n0) {
		var index = _n0.a;
		var rest = _n0.b;
		var nextIndex = index - elm$browser$Debugger$History$maxSnapshotSize;
		var currentIndexHelp = ((_Utils_cmp(nextIndex, currentIndex) < 1) && (_Utils_cmp(currentIndex, index) < 0)) ? currentIndex : (-1);
		return _Utils_Tuple2(
			index - elm$browser$Debugger$History$maxSnapshotSize,
			A2(
				elm$core$List$cons,
				A4(elm$html$Html$Lazy$lazy3, elm$browser$Debugger$History$viewSnapshot, currentIndexHelp, index, snapshot),
				rest));
	});
var elm$core$Array$length = function (_n0) {
	var len = _n0.a;
	return len;
};
var elm$browser$Debugger$History$viewSnapshots = F2(
	function (currentIndex, snapshots) {
		var highIndex = elm$browser$Debugger$History$maxSnapshotSize * elm$core$Array$length(snapshots);
		return A2(
			elm$html$Html$div,
			_List_Nil,
			A3(
				elm$core$Array$foldr,
				elm$browser$Debugger$History$consSnapshot(currentIndex),
				_Utils_Tuple2(highIndex, _List_Nil),
				snapshots).b);
	});
var elm$virtual_dom$VirtualDom$lazy2 = _VirtualDom_lazy2;
var elm$html$Html$Lazy$lazy2 = elm$virtual_dom$VirtualDom$lazy2;
var elm$browser$Debugger$History$view = F2(
	function (maybeIndex, _n0) {
		var snapshots = _n0.snapshots;
		var recent = _n0.recent;
		var numMessages = _n0.numMessages;
		var _n1 = function () {
			if (maybeIndex.$ === 'Nothing') {
				return _Utils_Tuple2(-1, 'calc(100% - 24px)');
			} else {
				var i = maybeIndex.a;
				return _Utils_Tuple2(i, 'calc(100% - 54px)');
			}
		}();
		var index = _n1.a;
		var height = _n1.b;
		var newStuff = A3(
			elm$core$List$foldl,
			elm$browser$Debugger$History$consMsg(index),
			_Utils_Tuple2(numMessages - 1, _List_Nil),
			recent.messages).b;
		var oldStuff = A3(elm$html$Html$Lazy$lazy2, elm$browser$Debugger$History$viewSnapshots, index, snapshots);
		return A2(
			elm$html$Html$div,
			_List_fromArray(
				[
					elm$html$Html$Attributes$id('elm-debugger-sidebar'),
					A2(elm$html$Html$Attributes$style, 'width', '100%'),
					A2(elm$html$Html$Attributes$style, 'overflow-y', 'auto'),
					A2(elm$html$Html$Attributes$style, 'height', height)
				]),
			A2(
				elm$core$List$cons,
				elm$browser$Debugger$History$styles,
				A2(elm$core$List$cons, oldStuff, newStuff)));
	});
var elm$browser$Debugger$Main$Jump = function (a) {
	return {$: 'Jump', a: a};
};
var elm$browser$Debugger$Main$resumeStyle = '\n\n.elm-debugger-resume {\n  width: 100%;\n  height: 30px;\n  line-height: 30px;\n  cursor: pointer;\n}\n\n.elm-debugger-resume:hover {\n  background-color: rgb(41, 41, 41);\n}\n\n';
var elm$browser$Debugger$Main$viewResumeButton = function (maybeIndex) {
	if (maybeIndex.$ === 'Nothing') {
		return elm$html$Html$text('');
	} else {
		return A2(
			elm$html$Html$div,
			_List_fromArray(
				[
					elm$html$Html$Events$onClick(elm$browser$Debugger$Main$Resume),
					elm$html$Html$Attributes$class('elm-debugger-resume')
				]),
			_List_fromArray(
				[
					elm$html$Html$text('Resume'),
					A3(
					elm$html$Html$node,
					'style',
					_List_Nil,
					_List_fromArray(
						[
							elm$html$Html$text(elm$browser$Debugger$Main$resumeStyle)
						]))
				]));
	}
};
var elm$browser$Debugger$Main$viewTextButton = F2(
	function (msg, label) {
		return A2(
			elm$html$Html$span,
			_List_fromArray(
				[
					elm$html$Html$Events$onClick(msg),
					A2(elm$html$Html$Attributes$style, 'cursor', 'pointer')
				]),
			_List_fromArray(
				[
					elm$html$Html$text(label)
				]));
	});
var elm$browser$Debugger$Main$playButton = function (maybeIndex) {
	return A2(
		elm$html$Html$div,
		_List_fromArray(
			[
				A2(elm$html$Html$Attributes$style, 'width', '100%'),
				A2(elm$html$Html$Attributes$style, 'text-align', 'center'),
				A2(elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
			]),
		_List_fromArray(
			[
				elm$browser$Debugger$Main$viewResumeButton(maybeIndex),
				A2(
				elm$html$Html$div,
				_List_fromArray(
					[
						A2(elm$html$Html$Attributes$style, 'width', '100%'),
						A2(elm$html$Html$Attributes$style, 'height', '24px'),
						A2(elm$html$Html$Attributes$style, 'line-height', '24px'),
						A2(elm$html$Html$Attributes$style, 'font-size', '12px')
					]),
				_List_fromArray(
					[
						A2(elm$browser$Debugger$Main$viewTextButton, elm$browser$Debugger$Main$Import, 'Import'),
						elm$html$Html$text(' / '),
						A2(elm$browser$Debugger$Main$viewTextButton, elm$browser$Debugger$Main$Export, 'Export')
					]))
			]));
};
var elm$browser$Debugger$Main$viewSidebar = F2(
	function (state, history) {
		var maybeIndex = function () {
			if (state.$ === 'Running') {
				return elm$core$Maybe$Nothing;
			} else {
				var index = state.a;
				return elm$core$Maybe$Just(index);
			}
		}();
		return A2(
			elm$html$Html$div,
			_List_fromArray(
				[
					A2(elm$html$Html$Attributes$style, 'display', 'block'),
					A2(elm$html$Html$Attributes$style, 'float', 'left'),
					A2(elm$html$Html$Attributes$style, 'width', '30ch'),
					A2(elm$html$Html$Attributes$style, 'height', '100%'),
					A2(elm$html$Html$Attributes$style, 'color', 'white'),
					A2(elm$html$Html$Attributes$style, 'background-color', 'rgb(61, 61, 61)')
				]),
			_List_fromArray(
				[
					A2(
					elm$html$Html$map,
					elm$browser$Debugger$Main$Jump,
					A2(elm$browser$Debugger$History$view, maybeIndex, history)),
					elm$browser$Debugger$Main$playButton(maybeIndex)
				]));
	});
var elm$browser$Debugger$Main$popoutView = function (_n0) {
	var history = _n0.history;
	var state = _n0.state;
	var expando = _n0.expando;
	return A3(
		elm$html$Html$node,
		'body',
		_List_fromArray(
			[
				A2(elm$html$Html$Attributes$style, 'margin', '0'),
				A2(elm$html$Html$Attributes$style, 'padding', '0'),
				A2(elm$html$Html$Attributes$style, 'width', '100%'),
				A2(elm$html$Html$Attributes$style, 'height', '100%'),
				A2(elm$html$Html$Attributes$style, 'font-family', 'monospace'),
				A2(elm$html$Html$Attributes$style, 'overflow', 'auto')
			]),
		_List_fromArray(
			[
				A2(elm$browser$Debugger$Main$viewSidebar, state, history),
				A2(
				elm$html$Html$map,
				elm$browser$Debugger$Main$ExpandoMsg,
				A2(
					elm$html$Html$div,
					_List_fromArray(
						[
							A2(elm$html$Html$Attributes$style, 'display', 'block'),
							A2(elm$html$Html$Attributes$style, 'float', 'left'),
							A2(elm$html$Html$Attributes$style, 'height', '100%'),
							A2(elm$html$Html$Attributes$style, 'width', 'calc(100% - 30ch)'),
							A2(elm$html$Html$Attributes$style, 'margin', '0'),
							A2(elm$html$Html$Attributes$style, 'overflow', 'auto'),
							A2(elm$html$Html$Attributes$style, 'cursor', 'default')
						]),
					_List_fromArray(
						[
							A2(elm$browser$Debugger$Expando$view, elm$core$Maybe$Nothing, expando)
						])))
			]));
};
var elm$browser$Debugger$Overlay$BlockAll = {$: 'BlockAll'};
var elm$browser$Debugger$Overlay$BlockMost = {$: 'BlockMost'};
var elm$browser$Debugger$Overlay$BlockNone = {$: 'BlockNone'};
var elm$browser$Debugger$Overlay$toBlockerType = F2(
	function (isPaused, state) {
		switch (state.$) {
			case 'None':
				return isPaused ? elm$browser$Debugger$Overlay$BlockAll : elm$browser$Debugger$Overlay$BlockNone;
			case 'BadMetadata':
				return elm$browser$Debugger$Overlay$BlockMost;
			case 'BadImport':
				return elm$browser$Debugger$Overlay$BlockMost;
			default:
				return elm$browser$Debugger$Overlay$BlockMost;
		}
	});
var elm$browser$Debugger$Main$toBlockerType = function (model) {
	return A2(
		elm$browser$Debugger$Overlay$toBlockerType,
		elm$browser$Debugger$Main$isPaused(model.state),
		model.overlay);
};
var elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2(elm$core$Dict$map, func, left),
				A2(elm$core$Dict$map, func, right));
		}
	});
var elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2(elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var elm$core$Dict$size = function (dict) {
	return A2(elm$core$Dict$sizeHelp, 0, dict);
};
var elm$browser$Debugger$Expando$initHelp = F2(
	function (isOuter, expando) {
		switch (expando.$) {
			case 'S':
				return expando;
			case 'Primitive':
				return expando;
			case 'Sequence':
				var seqType = expando.a;
				var isClosed = expando.b;
				var items = expando.c;
				return isOuter ? A3(
					elm$browser$Debugger$Expando$Sequence,
					seqType,
					false,
					A2(
						elm$core$List$map,
						elm$browser$Debugger$Expando$initHelp(false),
						items)) : ((elm$core$List$length(items) <= 8) ? A3(elm$browser$Debugger$Expando$Sequence, seqType, false, items) : expando);
			case 'Dictionary':
				var isClosed = expando.a;
				var keyValuePairs = expando.b;
				return isOuter ? A2(
					elm$browser$Debugger$Expando$Dictionary,
					false,
					A2(
						elm$core$List$map,
						function (_n1) {
							var k = _n1.a;
							var v = _n1.b;
							return _Utils_Tuple2(
								k,
								A2(elm$browser$Debugger$Expando$initHelp, false, v));
						},
						keyValuePairs)) : ((elm$core$List$length(keyValuePairs) <= 8) ? A2(elm$browser$Debugger$Expando$Dictionary, false, keyValuePairs) : expando);
			case 'Record':
				var isClosed = expando.a;
				var entries = expando.b;
				return isOuter ? A2(
					elm$browser$Debugger$Expando$Record,
					false,
					A2(
						elm$core$Dict$map,
						F2(
							function (_n2, v) {
								return A2(elm$browser$Debugger$Expando$initHelp, false, v);
							}),
						entries)) : ((elm$core$Dict$size(entries) <= 4) ? A2(elm$browser$Debugger$Expando$Record, false, entries) : expando);
			default:
				var maybeName = expando.a;
				var isClosed = expando.b;
				var args = expando.c;
				return isOuter ? A3(
					elm$browser$Debugger$Expando$Constructor,
					maybeName,
					false,
					A2(
						elm$core$List$map,
						elm$browser$Debugger$Expando$initHelp(false),
						args)) : ((elm$core$List$length(args) <= 4) ? A3(elm$browser$Debugger$Expando$Constructor, maybeName, false, args) : expando);
		}
	});
var elm$browser$Debugger$Expando$init = function (value) {
	return A2(
		elm$browser$Debugger$Expando$initHelp,
		true,
		_Debugger_init(value));
};
var elm$browser$Debugger$History$History = F3(
	function (snapshots, recent, numMessages) {
		return {numMessages: numMessages, recent: recent, snapshots: snapshots};
	});
var elm$browser$Debugger$History$RecentHistory = F3(
	function (model, messages, numMessages) {
		return {messages: messages, model: model, numMessages: numMessages};
	});
var elm$browser$Debugger$History$empty = function (model) {
	return A3(
		elm$browser$Debugger$History$History,
		elm$core$Array$empty,
		A3(elm$browser$Debugger$History$RecentHistory, model, _List_Nil, 0),
		0);
};
var elm$browser$Debugger$Main$Running = function (a) {
	return {$: 'Running', a: a};
};
var elm$browser$Debugger$Metadata$Error = F2(
	function (message, problems) {
		return {message: message, problems: problems};
	});
var elm$browser$Debugger$Metadata$Metadata = F2(
	function (versions, types) {
		return {types: types, versions: versions};
	});
var elm$browser$Debugger$Metadata$Types = F3(
	function (message, aliases, unions) {
		return {aliases: aliases, message: message, unions: unions};
	});
var elm$browser$Debugger$Metadata$Alias = F2(
	function (args, tipe) {
		return {args: args, tipe: tipe};
	});
var elm$browser$Debugger$Metadata$decodeAlias = A3(
	elm$json$Json$Decode$map2,
	elm$browser$Debugger$Metadata$Alias,
	A2(
		elm$json$Json$Decode$field,
		'args',
		elm$json$Json$Decode$list(elm$json$Json$Decode$string)),
	A2(elm$json$Json$Decode$field, 'type', elm$json$Json$Decode$string));
var elm$browser$Debugger$Metadata$Union = F2(
	function (args, tags) {
		return {args: args, tags: tags};
	});
var elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var elm$json$Json$Decode$dict = function (decoder) {
	return A2(
		elm$json$Json$Decode$map,
		elm$core$Dict$fromList,
		elm$json$Json$Decode$keyValuePairs(decoder));
};
var elm$browser$Debugger$Metadata$decodeUnion = A3(
	elm$json$Json$Decode$map2,
	elm$browser$Debugger$Metadata$Union,
	A2(
		elm$json$Json$Decode$field,
		'args',
		elm$json$Json$Decode$list(elm$json$Json$Decode$string)),
	A2(
		elm$json$Json$Decode$field,
		'tags',
		elm$json$Json$Decode$dict(
			elm$json$Json$Decode$list(elm$json$Json$Decode$string))));
var elm$json$Json$Decode$map3 = _Json_map3;
var elm$browser$Debugger$Metadata$decodeTypes = A4(
	elm$json$Json$Decode$map3,
	elm$browser$Debugger$Metadata$Types,
	A2(elm$json$Json$Decode$field, 'message', elm$json$Json$Decode$string),
	A2(
		elm$json$Json$Decode$field,
		'aliases',
		elm$json$Json$Decode$dict(elm$browser$Debugger$Metadata$decodeAlias)),
	A2(
		elm$json$Json$Decode$field,
		'unions',
		elm$json$Json$Decode$dict(elm$browser$Debugger$Metadata$decodeUnion)));
var elm$browser$Debugger$Metadata$Versions = function (elm) {
	return {elm: elm};
};
var elm$browser$Debugger$Metadata$decodeVersions = A2(
	elm$json$Json$Decode$map,
	elm$browser$Debugger$Metadata$Versions,
	A2(elm$json$Json$Decode$field, 'elm', elm$json$Json$Decode$string));
var elm$browser$Debugger$Metadata$decoder = A3(
	elm$json$Json$Decode$map2,
	elm$browser$Debugger$Metadata$Metadata,
	A2(elm$json$Json$Decode$field, 'versions', elm$browser$Debugger$Metadata$decodeVersions),
	A2(elm$json$Json$Decode$field, 'types', elm$browser$Debugger$Metadata$decodeTypes));
var elm$browser$Debugger$Metadata$ProblemType = F2(
	function (name, problems) {
		return {name: name, problems: problems};
	});
var elm$core$String$contains = _String_contains;
var elm$browser$Debugger$Metadata$hasProblem = F2(
	function (tipe, _n0) {
		var problem = _n0.a;
		var token = _n0.b;
		return A2(elm$core$String$contains, token, tipe) ? elm$core$Maybe$Just(problem) : elm$core$Maybe$Nothing;
	});
var elm$browser$Debugger$Metadata$Decoder = {$: 'Decoder'};
var elm$browser$Debugger$Metadata$Function = {$: 'Function'};
var elm$browser$Debugger$Metadata$Process = {$: 'Process'};
var elm$browser$Debugger$Metadata$Program = {$: 'Program'};
var elm$browser$Debugger$Metadata$Request = {$: 'Request'};
var elm$browser$Debugger$Metadata$Socket = {$: 'Socket'};
var elm$browser$Debugger$Metadata$Task = {$: 'Task'};
var elm$browser$Debugger$Metadata$VirtualDom = {$: 'VirtualDom'};
var elm$browser$Debugger$Metadata$problemTable = _List_fromArray(
	[
		_Utils_Tuple2(elm$browser$Debugger$Metadata$Function, '->'),
		_Utils_Tuple2(elm$browser$Debugger$Metadata$Decoder, 'Json.Decode.Decoder'),
		_Utils_Tuple2(elm$browser$Debugger$Metadata$Task, 'Task.Task'),
		_Utils_Tuple2(elm$browser$Debugger$Metadata$Process, 'Process.Id'),
		_Utils_Tuple2(elm$browser$Debugger$Metadata$Socket, 'WebSocket.LowLevel.WebSocket'),
		_Utils_Tuple2(elm$browser$Debugger$Metadata$Request, 'Http.Request'),
		_Utils_Tuple2(elm$browser$Debugger$Metadata$Program, 'Platform.Program'),
		_Utils_Tuple2(elm$browser$Debugger$Metadata$VirtualDom, 'VirtualDom.Node'),
		_Utils_Tuple2(elm$browser$Debugger$Metadata$VirtualDom, 'VirtualDom.Attribute')
	]);
var elm$browser$Debugger$Metadata$findProblems = function (tipe) {
	return A2(
		elm$core$List$filterMap,
		elm$browser$Debugger$Metadata$hasProblem(tipe),
		elm$browser$Debugger$Metadata$problemTable);
};
var elm$browser$Debugger$Metadata$collectBadAliases = F3(
	function (name, _n0, list) {
		var tipe = _n0.tipe;
		var _n1 = elm$browser$Debugger$Metadata$findProblems(tipe);
		if (!_n1.b) {
			return list;
		} else {
			var problems = _n1;
			return A2(
				elm$core$List$cons,
				A2(elm$browser$Debugger$Metadata$ProblemType, name, problems),
				list);
		}
	});
var elm$core$Dict$values = function (dict) {
	return A3(
		elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2(elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var elm$core$List$concatMap = F2(
	function (f, list) {
		return elm$core$List$concat(
			A2(elm$core$List$map, f, list));
	});
var elm$browser$Debugger$Metadata$collectBadUnions = F3(
	function (name, _n0, list) {
		var tags = _n0.tags;
		var _n1 = A2(
			elm$core$List$concatMap,
			elm$browser$Debugger$Metadata$findProblems,
			elm$core$List$concat(
				elm$core$Dict$values(tags)));
		if (!_n1.b) {
			return list;
		} else {
			var problems = _n1;
			return A2(
				elm$core$List$cons,
				A2(elm$browser$Debugger$Metadata$ProblemType, name, problems),
				list);
		}
	});
var elm$browser$Debugger$Metadata$isPortable = function (_n0) {
	var types = _n0.types;
	var badAliases = A3(elm$core$Dict$foldl, elm$browser$Debugger$Metadata$collectBadAliases, _List_Nil, types.aliases);
	var _n1 = A3(elm$core$Dict$foldl, elm$browser$Debugger$Metadata$collectBadUnions, badAliases, types.unions);
	if (!_n1.b) {
		return elm$core$Maybe$Nothing;
	} else {
		var problems = _n1;
		return elm$core$Maybe$Just(
			A2(elm$browser$Debugger$Metadata$Error, types.message, problems));
	}
};
var elm$browser$Debugger$Metadata$decode = function (value) {
	var _n0 = A2(elm$json$Json$Decode$decodeValue, elm$browser$Debugger$Metadata$decoder, value);
	if (_n0.$ === 'Err') {
		return elm$core$Result$Err(
			A2(elm$browser$Debugger$Metadata$Error, 'The compiler is generating bad metadata. This is a compiler bug!', _List_Nil));
	} else {
		var metadata = _n0.a;
		var _n1 = elm$browser$Debugger$Metadata$isPortable(metadata);
		if (_n1.$ === 'Nothing') {
			return elm$core$Result$Ok(metadata);
		} else {
			var error = _n1.a;
			return elm$core$Result$Err(error);
		}
	}
};
var elm$browser$Debugger$Overlay$None = {$: 'None'};
var elm$browser$Debugger$Overlay$none = elm$browser$Debugger$Overlay$None;
var elm$browser$Debugger$Main$wrapInit = F4(
	function (metadata, popout, init, flags) {
		var _n0 = init(flags);
		var userModel = _n0.a;
		var userCommands = _n0.b;
		return _Utils_Tuple2(
			{
				expando: elm$browser$Debugger$Expando$init(userModel),
				history: elm$browser$Debugger$History$empty(userModel),
				metadata: elm$browser$Debugger$Metadata$decode(metadata),
				overlay: elm$browser$Debugger$Overlay$none,
				popout: popout,
				state: elm$browser$Debugger$Main$Running(userModel)
			},
			A2(elm$core$Platform$Cmd$map, elm$browser$Debugger$Main$UserMsg, userCommands));
	});
var elm$browser$Debugger$Main$getLatestModel = function (state) {
	if (state.$ === 'Running') {
		var model = state.a;
		return model;
	} else {
		var model = state.c;
		return model;
	}
};
var elm$core$Platform$Sub$map = _Platform_map;
var elm$browser$Debugger$Main$wrapSubs = F2(
	function (subscriptions, model) {
		return A2(
			elm$core$Platform$Sub$map,
			elm$browser$Debugger$Main$UserMsg,
			subscriptions(
				elm$browser$Debugger$Main$getLatestModel(model.state)));
	});
var elm$browser$Debugger$Expando$mergeDictHelp = F3(
	function (oldDict, key, value) {
		var _n12 = A2(elm$core$Dict$get, key, oldDict);
		if (_n12.$ === 'Nothing') {
			return value;
		} else {
			var oldValue = _n12.a;
			return A2(elm$browser$Debugger$Expando$mergeHelp, oldValue, value);
		}
	});
var elm$browser$Debugger$Expando$mergeHelp = F2(
	function (old, _new) {
		var _n3 = _Utils_Tuple2(old, _new);
		_n3$6:
		while (true) {
			switch (_n3.b.$) {
				case 'S':
					return _new;
				case 'Primitive':
					return _new;
				case 'Sequence':
					if (_n3.a.$ === 'Sequence') {
						var _n4 = _n3.a;
						var isClosed = _n4.b;
						var oldValues = _n4.c;
						var _n5 = _n3.b;
						var seqType = _n5.a;
						var newValues = _n5.c;
						return A3(
							elm$browser$Debugger$Expando$Sequence,
							seqType,
							isClosed,
							A2(elm$browser$Debugger$Expando$mergeListHelp, oldValues, newValues));
					} else {
						break _n3$6;
					}
				case 'Dictionary':
					if (_n3.a.$ === 'Dictionary') {
						var _n6 = _n3.a;
						var isClosed = _n6.a;
						var _n7 = _n3.b;
						var keyValuePairs = _n7.b;
						return A2(elm$browser$Debugger$Expando$Dictionary, isClosed, keyValuePairs);
					} else {
						break _n3$6;
					}
				case 'Record':
					if (_n3.a.$ === 'Record') {
						var _n8 = _n3.a;
						var isClosed = _n8.a;
						var oldDict = _n8.b;
						var _n9 = _n3.b;
						var newDict = _n9.b;
						return A2(
							elm$browser$Debugger$Expando$Record,
							isClosed,
							A2(
								elm$core$Dict$map,
								elm$browser$Debugger$Expando$mergeDictHelp(oldDict),
								newDict));
					} else {
						break _n3$6;
					}
				default:
					if (_n3.a.$ === 'Constructor') {
						var _n10 = _n3.a;
						var isClosed = _n10.b;
						var oldValues = _n10.c;
						var _n11 = _n3.b;
						var maybeName = _n11.a;
						var newValues = _n11.c;
						return A3(
							elm$browser$Debugger$Expando$Constructor,
							maybeName,
							isClosed,
							A2(elm$browser$Debugger$Expando$mergeListHelp, oldValues, newValues));
					} else {
						break _n3$6;
					}
			}
		}
		return _new;
	});
var elm$browser$Debugger$Expando$mergeListHelp = F2(
	function (olds, news) {
		var _n0 = _Utils_Tuple2(olds, news);
		if (!_n0.a.b) {
			return news;
		} else {
			if (!_n0.b.b) {
				return news;
			} else {
				var _n1 = _n0.a;
				var x = _n1.a;
				var xs = _n1.b;
				var _n2 = _n0.b;
				var y = _n2.a;
				var ys = _n2.b;
				return A2(
					elm$core$List$cons,
					A2(elm$browser$Debugger$Expando$mergeHelp, x, y),
					A2(elm$browser$Debugger$Expando$mergeListHelp, xs, ys));
			}
		}
	});
var elm$browser$Debugger$Expando$merge = F2(
	function (value, expando) {
		return A2(
			elm$browser$Debugger$Expando$mergeHelp,
			expando,
			_Debugger_init(value));
	});
var elm$browser$Debugger$Expando$updateIndex = F3(
	function (n, func, list) {
		if (!list.b) {
			return _List_Nil;
		} else {
			var x = list.a;
			var xs = list.b;
			return (n <= 0) ? A2(
				elm$core$List$cons,
				func(x),
				xs) : A2(
				elm$core$List$cons,
				x,
				A3(elm$browser$Debugger$Expando$updateIndex, n - 1, func, xs));
		}
	});
var elm$browser$Debugger$Expando$update = F2(
	function (msg, value) {
		switch (value.$) {
			case 'S':
				return value;
			case 'Primitive':
				return value;
			case 'Sequence':
				var seqType = value.a;
				var isClosed = value.b;
				var valueList = value.c;
				switch (msg.$) {
					case 'Toggle':
						return A3(elm$browser$Debugger$Expando$Sequence, seqType, !isClosed, valueList);
					case 'Index':
						if (msg.a.$ === 'None') {
							var _n3 = msg.a;
							var index = msg.b;
							var subMsg = msg.c;
							return A3(
								elm$browser$Debugger$Expando$Sequence,
								seqType,
								isClosed,
								A3(
									elm$browser$Debugger$Expando$updateIndex,
									index,
									elm$browser$Debugger$Expando$update(subMsg),
									valueList));
						} else {
							return value;
						}
					default:
						return value;
				}
			case 'Dictionary':
				var isClosed = value.a;
				var keyValuePairs = value.b;
				switch (msg.$) {
					case 'Toggle':
						return A2(elm$browser$Debugger$Expando$Dictionary, !isClosed, keyValuePairs);
					case 'Index':
						var redirect = msg.a;
						var index = msg.b;
						var subMsg = msg.c;
						switch (redirect.$) {
							case 'None':
								return value;
							case 'Key':
								return A2(
									elm$browser$Debugger$Expando$Dictionary,
									isClosed,
									A3(
										elm$browser$Debugger$Expando$updateIndex,
										index,
										function (_n6) {
											var k = _n6.a;
											var v = _n6.b;
											return _Utils_Tuple2(
												A2(elm$browser$Debugger$Expando$update, subMsg, k),
												v);
										},
										keyValuePairs));
							default:
								return A2(
									elm$browser$Debugger$Expando$Dictionary,
									isClosed,
									A3(
										elm$browser$Debugger$Expando$updateIndex,
										index,
										function (_n7) {
											var k = _n7.a;
											var v = _n7.b;
											return _Utils_Tuple2(
												k,
												A2(elm$browser$Debugger$Expando$update, subMsg, v));
										},
										keyValuePairs));
						}
					default:
						return value;
				}
			case 'Record':
				var isClosed = value.a;
				var valueDict = value.b;
				switch (msg.$) {
					case 'Toggle':
						return A2(elm$browser$Debugger$Expando$Record, !isClosed, valueDict);
					case 'Index':
						return value;
					default:
						var field = msg.a;
						var subMsg = msg.b;
						return A2(
							elm$browser$Debugger$Expando$Record,
							isClosed,
							A3(
								elm$core$Dict$update,
								field,
								elm$browser$Debugger$Expando$updateField(subMsg),
								valueDict));
				}
			default:
				var maybeName = value.a;
				var isClosed = value.b;
				var valueList = value.c;
				switch (msg.$) {
					case 'Toggle':
						return A3(elm$browser$Debugger$Expando$Constructor, maybeName, !isClosed, valueList);
					case 'Index':
						if (msg.a.$ === 'None') {
							var _n10 = msg.a;
							var index = msg.b;
							var subMsg = msg.c;
							return A3(
								elm$browser$Debugger$Expando$Constructor,
								maybeName,
								isClosed,
								A3(
									elm$browser$Debugger$Expando$updateIndex,
									index,
									elm$browser$Debugger$Expando$update(subMsg),
									valueList));
						} else {
							return value;
						}
					default:
						return value;
				}
		}
	});
var elm$browser$Debugger$Expando$updateField = F2(
	function (msg, maybeExpando) {
		if (maybeExpando.$ === 'Nothing') {
			return maybeExpando;
		} else {
			var expando = maybeExpando.a;
			return elm$core$Maybe$Just(
				A2(elm$browser$Debugger$Expando$update, msg, expando));
		}
	});
var elm$browser$Debugger$History$Snapshot = F2(
	function (model, messages) {
		return {messages: messages, model: model};
	});
var elm$browser$Debugger$History$addRecent = F3(
	function (msg, newModel, _n0) {
		var model = _n0.model;
		var messages = _n0.messages;
		var numMessages = _n0.numMessages;
		return _Utils_eq(numMessages, elm$browser$Debugger$History$maxSnapshotSize) ? _Utils_Tuple2(
			elm$core$Maybe$Just(
				A2(
					elm$browser$Debugger$History$Snapshot,
					model,
					elm$core$Array$fromList(messages))),
			A3(
				elm$browser$Debugger$History$RecentHistory,
				newModel,
				_List_fromArray(
					[msg]),
				1)) : _Utils_Tuple2(
			elm$core$Maybe$Nothing,
			A3(
				elm$browser$Debugger$History$RecentHistory,
				model,
				A2(elm$core$List$cons, msg, messages),
				numMessages + 1));
	});
var elm$core$Array$bitMask = 4294967295 >>> (32 - elm$core$Array$shiftStep);
var elm$core$Elm$JsArray$push = _JsArray_push;
var elm$core$Elm$JsArray$singleton = _JsArray_singleton;
var elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var elm$core$Array$insertTailInTree = F4(
	function (shift, index, tail, tree) {
		var pos = elm$core$Array$bitMask & (index >>> shift);
		if (_Utils_cmp(
			pos,
			elm$core$Elm$JsArray$length(tree)) > -1) {
			if (shift === 5) {
				return A2(
					elm$core$Elm$JsArray$push,
					elm$core$Array$Leaf(tail),
					tree);
			} else {
				var newSub = elm$core$Array$SubTree(
					A4(elm$core$Array$insertTailInTree, shift - elm$core$Array$shiftStep, index, tail, elm$core$Elm$JsArray$empty));
				return A2(elm$core$Elm$JsArray$push, newSub, tree);
			}
		} else {
			var value = A2(elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (value.$ === 'SubTree') {
				var subTree = value.a;
				var newSub = elm$core$Array$SubTree(
					A4(elm$core$Array$insertTailInTree, shift - elm$core$Array$shiftStep, index, tail, subTree));
				return A3(elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			} else {
				var newSub = elm$core$Array$SubTree(
					A4(
						elm$core$Array$insertTailInTree,
						shift - elm$core$Array$shiftStep,
						index,
						tail,
						elm$core$Elm$JsArray$singleton(value)));
				return A3(elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			}
		}
	});
var elm$core$Array$unsafeReplaceTail = F2(
	function (newTail, _n0) {
		var len = _n0.a;
		var startShift = _n0.b;
		var tree = _n0.c;
		var tail = _n0.d;
		var originalTailLen = elm$core$Elm$JsArray$length(tail);
		var newTailLen = elm$core$Elm$JsArray$length(newTail);
		var newArrayLen = len + (newTailLen - originalTailLen);
		if (_Utils_eq(newTailLen, elm$core$Array$branchFactor)) {
			var overflow = _Utils_cmp(newArrayLen >>> elm$core$Array$shiftStep, 1 << startShift) > 0;
			if (overflow) {
				var newShift = startShift + elm$core$Array$shiftStep;
				var newTree = A4(
					elm$core$Array$insertTailInTree,
					newShift,
					len,
					newTail,
					elm$core$Elm$JsArray$singleton(
						elm$core$Array$SubTree(tree)));
				return A4(elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, elm$core$Elm$JsArray$empty);
			} else {
				return A4(
					elm$core$Array$Array_elm_builtin,
					newArrayLen,
					startShift,
					A4(elm$core$Array$insertTailInTree, startShift, len, newTail, tree),
					elm$core$Elm$JsArray$empty);
			}
		} else {
			return A4(elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
		}
	});
var elm$core$Array$push = F2(
	function (a, array) {
		var tail = array.d;
		return A2(
			elm$core$Array$unsafeReplaceTail,
			A2(elm$core$Elm$JsArray$push, a, tail),
			array);
	});
var elm$browser$Debugger$History$add = F3(
	function (msg, model, _n0) {
		var snapshots = _n0.snapshots;
		var recent = _n0.recent;
		var numMessages = _n0.numMessages;
		var _n1 = A3(elm$browser$Debugger$History$addRecent, msg, model, recent);
		if (_n1.a.$ === 'Just') {
			var snapshot = _n1.a.a;
			var newRecent = _n1.b;
			return A3(
				elm$browser$Debugger$History$History,
				A2(elm$core$Array$push, snapshot, snapshots),
				newRecent,
				numMessages + 1);
		} else {
			var _n2 = _n1.a;
			var newRecent = _n1.b;
			return A3(elm$browser$Debugger$History$History, snapshots, newRecent, numMessages + 1);
		}
	});
var elm$browser$Debugger$History$Stepping = F2(
	function (a, b) {
		return {$: 'Stepping', a: a, b: b};
	});
var elm$browser$Debugger$History$Done = F2(
	function (a, b) {
		return {$: 'Done', a: a, b: b};
	});
var elm$browser$Debugger$History$getHelp = F3(
	function (update, msg, getResult) {
		if (getResult.$ === 'Done') {
			return getResult;
		} else {
			var n = getResult.a;
			var model = getResult.b;
			return (!n) ? A2(
				elm$browser$Debugger$History$Done,
				msg,
				A2(update, msg, model).a) : A2(
				elm$browser$Debugger$History$Stepping,
				n - 1,
				A2(update, msg, model).a);
		}
	});
var elm$browser$Debugger$History$undone = function (getResult) {
	undone:
	while (true) {
		if (getResult.$ === 'Done') {
			var msg = getResult.a;
			var model = getResult.b;
			return _Utils_Tuple2(model, msg);
		} else {
			var $temp$getResult = getResult;
			getResult = $temp$getResult;
			continue undone;
		}
	}
};
var elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = elm$core$Array$bitMask & (index >>> shift);
			var _n0 = A2(elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_n0.$ === 'SubTree') {
				var subTree = _n0.a;
				var $temp$shift = shift - elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _n0.a;
				return A2(elm$core$Elm$JsArray$unsafeGet, elm$core$Array$bitMask & index, values);
			}
		}
	});
var elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var elm$core$Array$get = F2(
	function (index, _n0) {
		var len = _n0.a;
		var startShift = _n0.b;
		var tree = _n0.c;
		var tail = _n0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			elm$core$Array$tailIndex(len)) > -1) ? elm$core$Maybe$Just(
			A2(elm$core$Elm$JsArray$unsafeGet, elm$core$Array$bitMask & index, tail)) : elm$core$Maybe$Just(
			A3(elm$core$Array$getHelp, startShift, index, tree)));
	});
var elm$browser$Debugger$History$get = F3(
	function (update, index, history) {
		get:
		while (true) {
			var recent = history.recent;
			var snapshotMax = history.numMessages - recent.numMessages;
			if (_Utils_cmp(index, snapshotMax) > -1) {
				return elm$browser$Debugger$History$undone(
					A3(
						elm$core$List$foldr,
						elm$browser$Debugger$History$getHelp(update),
						A2(elm$browser$Debugger$History$Stepping, index - snapshotMax, recent.model),
						recent.messages));
			} else {
				var _n0 = A2(elm$core$Array$get, (index / elm$browser$Debugger$History$maxSnapshotSize) | 0, history.snapshots);
				if (_n0.$ === 'Nothing') {
					var $temp$update = update,
						$temp$index = index,
						$temp$history = history;
					update = $temp$update;
					index = $temp$index;
					history = $temp$history;
					continue get;
				} else {
					var model = _n0.a.model;
					var messages = _n0.a.messages;
					return elm$browser$Debugger$History$undone(
						A3(
							elm$core$Array$foldr,
							elm$browser$Debugger$History$getHelp(update),
							A2(elm$browser$Debugger$History$Stepping, index % elm$browser$Debugger$History$maxSnapshotSize, model),
							messages));
				}
			}
		}
	});
var elm$browser$Debugger$Main$Paused = F3(
	function (a, b, c) {
		return {$: 'Paused', a: a, b: b, c: c};
	});
var elm$browser$Debugger$History$elmToJs = _Debugger_unsafeCoerce;
var elm$browser$Debugger$History$encodeHelp = F2(
	function (snapshot, allMessages) {
		return A3(elm$core$Array$foldl, elm$core$List$cons, allMessages, snapshot.messages);
	});
var elm$browser$Debugger$History$encode = function (_n0) {
	var snapshots = _n0.snapshots;
	var recent = _n0.recent;
	return A2(
		elm$json$Json$Encode$list,
		elm$browser$Debugger$History$elmToJs,
		A3(
			elm$core$Array$foldr,
			elm$browser$Debugger$History$encodeHelp,
			elm$core$List$reverse(recent.messages),
			snapshots));
};
var elm$browser$Debugger$Metadata$encodeAlias = function (_n0) {
	var args = _n0.args;
	var tipe = _n0.tipe;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'args',
				A2(elm$json$Json$Encode$list, elm$json$Json$Encode$string, args)),
				_Utils_Tuple2(
				'type',
				elm$json$Json$Encode$string(tipe))
			]));
};
var elm$browser$Debugger$Metadata$encodeDict = F2(
	function (f, dict) {
		return elm$json$Json$Encode$object(
			elm$core$Dict$toList(
				A2(
					elm$core$Dict$map,
					F2(
						function (key, value) {
							return f(value);
						}),
					dict)));
	});
var elm$browser$Debugger$Metadata$encodeUnion = function (_n0) {
	var args = _n0.args;
	var tags = _n0.tags;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'args',
				A2(elm$json$Json$Encode$list, elm$json$Json$Encode$string, args)),
				_Utils_Tuple2(
				'tags',
				A2(
					elm$browser$Debugger$Metadata$encodeDict,
					elm$json$Json$Encode$list(elm$json$Json$Encode$string),
					tags))
			]));
};
var elm$browser$Debugger$Metadata$encodeTypes = function (_n0) {
	var message = _n0.message;
	var unions = _n0.unions;
	var aliases = _n0.aliases;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'message',
				elm$json$Json$Encode$string(message)),
				_Utils_Tuple2(
				'aliases',
				A2(elm$browser$Debugger$Metadata$encodeDict, elm$browser$Debugger$Metadata$encodeAlias, aliases)),
				_Utils_Tuple2(
				'unions',
				A2(elm$browser$Debugger$Metadata$encodeDict, elm$browser$Debugger$Metadata$encodeUnion, unions))
			]));
};
var elm$browser$Debugger$Metadata$encodeVersions = function (_n0) {
	var elm = _n0.elm;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'elm',
				elm$json$Json$Encode$string(elm))
			]));
};
var elm$browser$Debugger$Metadata$encode = function (_n0) {
	var versions = _n0.versions;
	var types = _n0.types;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'versions',
				elm$browser$Debugger$Metadata$encodeVersions(versions)),
				_Utils_Tuple2(
				'types',
				elm$browser$Debugger$Metadata$encodeTypes(types))
			]));
};
var elm$browser$Debugger$Main$download = F2(
	function (metadata, history) {
		var json = elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'metadata',
					elm$browser$Debugger$Metadata$encode(metadata)),
					_Utils_Tuple2(
					'history',
					elm$browser$Debugger$History$encode(history))
				]));
		var historyLength = elm$browser$Debugger$History$size(history);
		return A2(
			elm$core$Task$perform,
			function (_n0) {
				return elm$browser$Debugger$Main$NoOp;
			},
			A2(_Debugger_download, historyLength, json));
	});
var elm$browser$Debugger$History$jsToElm = _Debugger_unsafeCoerce;
var elm$browser$Debugger$History$decoder = F2(
	function (initialModel, update) {
		var addMessage = F2(
			function (rawMsg, _n0) {
				var model = _n0.a;
				var history = _n0.b;
				var msg = elm$browser$Debugger$History$jsToElm(rawMsg);
				return _Utils_Tuple2(
					A2(update, msg, model),
					A3(elm$browser$Debugger$History$add, msg, model, history));
			});
		var updateModel = function (rawMsgs) {
			return A3(
				elm$core$List$foldl,
				addMessage,
				_Utils_Tuple2(
					initialModel,
					elm$browser$Debugger$History$empty(initialModel)),
				rawMsgs);
		};
		return A2(
			elm$json$Json$Decode$map,
			updateModel,
			elm$json$Json$Decode$list(elm$json$Json$Decode$value));
	});
var elm$browser$Debugger$History$getInitialModel = function (_n0) {
	var snapshots = _n0.snapshots;
	var recent = _n0.recent;
	var _n1 = A2(elm$core$Array$get, 0, snapshots);
	if (_n1.$ === 'Just') {
		var model = _n1.a.model;
		return model;
	} else {
		return recent.model;
	}
};
var elm$browser$Debugger$Overlay$BadImport = function (a) {
	return {$: 'BadImport', a: a};
};
var elm$browser$Debugger$Report$CorruptHistory = {$: 'CorruptHistory'};
var elm$browser$Debugger$Overlay$corruptImport = elm$browser$Debugger$Overlay$BadImport(elm$browser$Debugger$Report$CorruptHistory);
var elm$browser$Debugger$Main$loadNewHistory = F3(
	function (rawHistory, update, model) {
		var pureUserUpdate = F2(
			function (msg, userModel) {
				return A2(update, msg, userModel).a;
			});
		var initialUserModel = elm$browser$Debugger$History$getInitialModel(model.history);
		var decoder = A2(elm$browser$Debugger$History$decoder, initialUserModel, pureUserUpdate);
		var _n0 = A2(elm$json$Json$Decode$decodeValue, decoder, rawHistory);
		if (_n0.$ === 'Err') {
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{overlay: elm$browser$Debugger$Overlay$corruptImport}),
				elm$core$Platform$Cmd$none);
		} else {
			var _n1 = _n0.a;
			var latestUserModel = _n1.a;
			var newHistory = _n1.b;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						expando: elm$browser$Debugger$Expando$init(latestUserModel),
						history: newHistory,
						overlay: elm$browser$Debugger$Overlay$none,
						state: elm$browser$Debugger$Main$Running(latestUserModel)
					}),
				elm$core$Platform$Cmd$none);
		}
	});
var elm$browser$Debugger$Main$scroll = function (popout) {
	return A2(
		elm$core$Task$perform,
		elm$core$Basics$always(elm$browser$Debugger$Main$NoOp),
		_Debugger_scroll(popout));
};
var elm$browser$Debugger$Main$Upload = function (a) {
	return {$: 'Upload', a: a};
};
var elm$browser$Debugger$Main$upload = A2(
	elm$core$Task$perform,
	elm$browser$Debugger$Main$Upload,
	_Debugger_upload(_Utils_Tuple0));
var elm$browser$Debugger$Overlay$BadMetadata = function (a) {
	return {$: 'BadMetadata', a: a};
};
var elm$browser$Debugger$Overlay$badMetadata = elm$browser$Debugger$Overlay$BadMetadata;
var elm$browser$Debugger$Main$withGoodMetadata = F2(
	function (model, func) {
		var _n0 = model.metadata;
		if (_n0.$ === 'Ok') {
			var metadata = _n0.a;
			return func(metadata);
		} else {
			var error = _n0.a;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						overlay: elm$browser$Debugger$Overlay$badMetadata(error)
					}),
				elm$core$Platform$Cmd$none);
		}
	});
var elm$browser$Debugger$Report$AliasChange = function (a) {
	return {$: 'AliasChange', a: a};
};
var elm$browser$Debugger$Metadata$checkAlias = F4(
	function (name, old, _new, changes) {
		return (_Utils_eq(old.tipe, _new.tipe) && _Utils_eq(old.args, _new.args)) ? changes : A2(
			elm$core$List$cons,
			elm$browser$Debugger$Report$AliasChange(name),
			changes);
	});
var elm$browser$Debugger$Metadata$addTag = F3(
	function (tag, _n0, changes) {
		return _Utils_update(
			changes,
			{
				added: A2(elm$core$List$cons, tag, changes.added)
			});
	});
var elm$browser$Debugger$Metadata$checkTag = F4(
	function (tag, old, _new, changes) {
		return _Utils_eq(old, _new) ? changes : _Utils_update(
			changes,
			{
				changed: A2(elm$core$List$cons, tag, changes.changed)
			});
	});
var elm$browser$Debugger$Metadata$removeTag = F3(
	function (tag, _n0, changes) {
		return _Utils_update(
			changes,
			{
				removed: A2(elm$core$List$cons, tag, changes.removed)
			});
	});
var elm$browser$Debugger$Report$UnionChange = F2(
	function (a, b) {
		return {$: 'UnionChange', a: a, b: b};
	});
var elm$browser$Debugger$Report$TagChanges = F4(
	function (removed, changed, added, argsMatch) {
		return {added: added, argsMatch: argsMatch, changed: changed, removed: removed};
	});
var elm$browser$Debugger$Report$emptyTagChanges = function (argsMatch) {
	return A4(elm$browser$Debugger$Report$TagChanges, _List_Nil, _List_Nil, _List_Nil, argsMatch);
};
var elm$browser$Debugger$Report$hasTagChanges = function (tagChanges) {
	return _Utils_eq(
		tagChanges,
		A4(elm$browser$Debugger$Report$TagChanges, _List_Nil, _List_Nil, _List_Nil, true));
};
var elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _n0) {
				stepState:
				while (true) {
					var list = _n0.a;
					var result = _n0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _n2 = list.a;
						var lKey = _n2.a;
						var lValue = _n2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_n0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_n0 = $temp$_n0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _n3 = A3(
			elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _n3.a;
		var intermediateResult = _n3.b;
		return A3(
			elm$core$List$foldl,
			F2(
				function (_n4, result) {
					var k = _n4.a;
					var v = _n4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var elm$browser$Debugger$Metadata$checkUnion = F4(
	function (name, old, _new, changes) {
		var tagChanges = A6(
			elm$core$Dict$merge,
			elm$browser$Debugger$Metadata$removeTag,
			elm$browser$Debugger$Metadata$checkTag,
			elm$browser$Debugger$Metadata$addTag,
			old.tags,
			_new.tags,
			elm$browser$Debugger$Report$emptyTagChanges(
				_Utils_eq(old.args, _new.args)));
		return elm$browser$Debugger$Report$hasTagChanges(tagChanges) ? changes : A2(
			elm$core$List$cons,
			A2(elm$browser$Debugger$Report$UnionChange, name, tagChanges),
			changes);
	});
var elm$browser$Debugger$Metadata$ignore = F3(
	function (key, value, report) {
		return report;
	});
var elm$browser$Debugger$Report$MessageChanged = F2(
	function (a, b) {
		return {$: 'MessageChanged', a: a, b: b};
	});
var elm$browser$Debugger$Report$SomethingChanged = function (a) {
	return {$: 'SomethingChanged', a: a};
};
var elm$core$Basics$neq = _Utils_notEqual;
var elm$browser$Debugger$Metadata$checkTypes = F2(
	function (old, _new) {
		return (!_Utils_eq(old.message, _new.message)) ? A2(elm$browser$Debugger$Report$MessageChanged, old.message, _new.message) : elm$browser$Debugger$Report$SomethingChanged(
			A6(
				elm$core$Dict$merge,
				elm$browser$Debugger$Metadata$ignore,
				elm$browser$Debugger$Metadata$checkUnion,
				elm$browser$Debugger$Metadata$ignore,
				old.unions,
				_new.unions,
				A6(elm$core$Dict$merge, elm$browser$Debugger$Metadata$ignore, elm$browser$Debugger$Metadata$checkAlias, elm$browser$Debugger$Metadata$ignore, old.aliases, _new.aliases, _List_Nil)));
	});
var elm$browser$Debugger$Report$VersionChanged = F2(
	function (a, b) {
		return {$: 'VersionChanged', a: a, b: b};
	});
var elm$browser$Debugger$Metadata$check = F2(
	function (old, _new) {
		return (!_Utils_eq(old.versions.elm, _new.versions.elm)) ? A2(elm$browser$Debugger$Report$VersionChanged, old.versions.elm, _new.versions.elm) : A2(elm$browser$Debugger$Metadata$checkTypes, old.types, _new.types);
	});
var elm$browser$Debugger$Overlay$RiskyImport = F2(
	function (a, b) {
		return {$: 'RiskyImport', a: a, b: b};
	});
var elm$browser$Debugger$Overlay$uploadDecoder = A3(
	elm$json$Json$Decode$map2,
	F2(
		function (x, y) {
			return _Utils_Tuple2(x, y);
		}),
	A2(elm$json$Json$Decode$field, 'metadata', elm$browser$Debugger$Metadata$decoder),
	A2(elm$json$Json$Decode$field, 'history', elm$json$Json$Decode$value));
var elm$browser$Debugger$Report$Fine = {$: 'Fine'};
var elm$browser$Debugger$Report$Impossible = {$: 'Impossible'};
var elm$browser$Debugger$Report$Risky = {$: 'Risky'};
var elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var elm$browser$Debugger$Report$some = function (list) {
	return !elm$core$List$isEmpty(list);
};
var elm$browser$Debugger$Report$evaluateChange = function (change) {
	if (change.$ === 'AliasChange') {
		return elm$browser$Debugger$Report$Impossible;
	} else {
		var removed = change.b.removed;
		var changed = change.b.changed;
		var added = change.b.added;
		var argsMatch = change.b.argsMatch;
		return ((!argsMatch) || (elm$browser$Debugger$Report$some(changed) || elm$browser$Debugger$Report$some(removed))) ? elm$browser$Debugger$Report$Impossible : (elm$browser$Debugger$Report$some(added) ? elm$browser$Debugger$Report$Risky : elm$browser$Debugger$Report$Fine);
	}
};
var elm$browser$Debugger$Report$worstCase = F2(
	function (status, statusList) {
		worstCase:
		while (true) {
			if (!statusList.b) {
				return status;
			} else {
				switch (statusList.a.$) {
					case 'Impossible':
						var _n1 = statusList.a;
						return elm$browser$Debugger$Report$Impossible;
					case 'Risky':
						var _n2 = statusList.a;
						var rest = statusList.b;
						var $temp$status = elm$browser$Debugger$Report$Risky,
							$temp$statusList = rest;
						status = $temp$status;
						statusList = $temp$statusList;
						continue worstCase;
					default:
						var _n3 = statusList.a;
						var rest = statusList.b;
						var $temp$status = status,
							$temp$statusList = rest;
						status = $temp$status;
						statusList = $temp$statusList;
						continue worstCase;
				}
			}
		}
	});
var elm$browser$Debugger$Report$evaluate = function (report) {
	switch (report.$) {
		case 'CorruptHistory':
			return elm$browser$Debugger$Report$Impossible;
		case 'VersionChanged':
			return elm$browser$Debugger$Report$Impossible;
		case 'MessageChanged':
			return elm$browser$Debugger$Report$Impossible;
		default:
			var changes = report.a;
			return A2(
				elm$browser$Debugger$Report$worstCase,
				elm$browser$Debugger$Report$Fine,
				A2(elm$core$List$map, elm$browser$Debugger$Report$evaluateChange, changes));
	}
};
var elm$json$Json$Decode$decodeString = _Json_runOnString;
var elm$browser$Debugger$Overlay$assessImport = F2(
	function (metadata, jsonString) {
		var _n0 = A2(elm$json$Json$Decode$decodeString, elm$browser$Debugger$Overlay$uploadDecoder, jsonString);
		if (_n0.$ === 'Err') {
			return elm$core$Result$Err(elm$browser$Debugger$Overlay$corruptImport);
		} else {
			var _n1 = _n0.a;
			var foreignMetadata = _n1.a;
			var rawHistory = _n1.b;
			var report = A2(elm$browser$Debugger$Metadata$check, foreignMetadata, metadata);
			var _n2 = elm$browser$Debugger$Report$evaluate(report);
			switch (_n2.$) {
				case 'Impossible':
					return elm$core$Result$Err(
						elm$browser$Debugger$Overlay$BadImport(report));
				case 'Risky':
					return elm$core$Result$Err(
						A2(elm$browser$Debugger$Overlay$RiskyImport, report, rawHistory));
				default:
					return elm$core$Result$Ok(rawHistory);
			}
		}
	});
var elm$browser$Debugger$Overlay$close = F2(
	function (msg, state) {
		switch (state.$) {
			case 'None':
				return elm$core$Maybe$Nothing;
			case 'BadMetadata':
				return elm$core$Maybe$Nothing;
			case 'BadImport':
				return elm$core$Maybe$Nothing;
			default:
				var rawHistory = state.b;
				if (msg.$ === 'Cancel') {
					return elm$core$Maybe$Nothing;
				} else {
					return elm$core$Maybe$Just(rawHistory);
				}
		}
	});
var elm$browser$Debugger$Main$wrapUpdate = F3(
	function (update, msg, model) {
		wrapUpdate:
		while (true) {
			switch (msg.$) {
				case 'NoOp':
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				case 'UserMsg':
					var userMsg = msg.a;
					var userModel = elm$browser$Debugger$Main$getLatestModel(model.state);
					var newHistory = A3(elm$browser$Debugger$History$add, userMsg, userModel, model.history);
					var _n1 = A2(update, userMsg, userModel);
					var newUserModel = _n1.a;
					var userCmds = _n1.b;
					var commands = A2(elm$core$Platform$Cmd$map, elm$browser$Debugger$Main$UserMsg, userCmds);
					var _n2 = model.state;
					if (_n2.$ === 'Running') {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									expando: A2(elm$browser$Debugger$Expando$merge, newUserModel, model.expando),
									history: newHistory,
									state: elm$browser$Debugger$Main$Running(newUserModel)
								}),
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										commands,
										elm$browser$Debugger$Main$scroll(model.popout)
									])));
					} else {
						var index = _n2.a;
						var indexModel = _n2.b;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									history: newHistory,
									state: A3(elm$browser$Debugger$Main$Paused, index, indexModel, newUserModel)
								}),
							commands);
					}
				case 'ExpandoMsg':
					var eMsg = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								expando: A2(elm$browser$Debugger$Expando$update, eMsg, model.expando)
							}),
						elm$core$Platform$Cmd$none);
				case 'Resume':
					var _n3 = model.state;
					if (_n3.$ === 'Running') {
						return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
					} else {
						var userModel = _n3.c;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									expando: A2(elm$browser$Debugger$Expando$merge, userModel, model.expando),
									state: elm$browser$Debugger$Main$Running(userModel)
								}),
							elm$browser$Debugger$Main$scroll(model.popout));
					}
				case 'Jump':
					var index = msg.a;
					var _n4 = A3(elm$browser$Debugger$History$get, update, index, model.history);
					var indexModel = _n4.a;
					var indexMsg = _n4.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								expando: A2(elm$browser$Debugger$Expando$merge, indexModel, model.expando),
								state: A3(
									elm$browser$Debugger$Main$Paused,
									index,
									indexModel,
									elm$browser$Debugger$Main$getLatestModel(model.state))
							}),
						elm$core$Platform$Cmd$none);
				case 'Open':
					return _Utils_Tuple2(
						model,
						A2(
							elm$core$Task$perform,
							function (_n5) {
								return elm$browser$Debugger$Main$NoOp;
							},
							_Debugger_open(model.popout)));
				case 'Up':
					var index = function () {
						var _n6 = model.state;
						if (_n6.$ === 'Paused') {
							var i = _n6.a;
							return i;
						} else {
							return elm$browser$Debugger$History$size(model.history);
						}
					}();
					if (index > 0) {
						var $temp$update = update,
							$temp$msg = elm$browser$Debugger$Main$Jump(index - 1),
							$temp$model = model;
						update = $temp$update;
						msg = $temp$msg;
						model = $temp$model;
						continue wrapUpdate;
					} else {
						return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
					}
				case 'Down':
					var _n7 = model.state;
					if (_n7.$ === 'Running') {
						return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
					} else {
						var index = _n7.a;
						var userModel = _n7.c;
						if (_Utils_eq(
							index,
							elm$browser$Debugger$History$size(model.history) - 1)) {
							var $temp$update = update,
								$temp$msg = elm$browser$Debugger$Main$Resume,
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						} else {
							var $temp$update = update,
								$temp$msg = elm$browser$Debugger$Main$Jump(index + 1),
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						}
					}
				case 'Import':
					return A2(
						elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (_n8) {
							return _Utils_Tuple2(model, elm$browser$Debugger$Main$upload);
						});
				case 'Export':
					return A2(
						elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (metadata) {
							return _Utils_Tuple2(
								model,
								A2(elm$browser$Debugger$Main$download, metadata, model.history));
						});
				case 'Upload':
					var jsonString = msg.a;
					return A2(
						elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (metadata) {
							var _n9 = A2(elm$browser$Debugger$Overlay$assessImport, metadata, jsonString);
							if (_n9.$ === 'Err') {
								var newOverlay = _n9.a;
								return _Utils_Tuple2(
									_Utils_update(
										model,
										{overlay: newOverlay}),
									elm$core$Platform$Cmd$none);
							} else {
								var rawHistory = _n9.a;
								return A3(elm$browser$Debugger$Main$loadNewHistory, rawHistory, update, model);
							}
						});
				default:
					var overlayMsg = msg.a;
					var _n10 = A2(elm$browser$Debugger$Overlay$close, overlayMsg, model.overlay);
					if (_n10.$ === 'Nothing') {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{overlay: elm$browser$Debugger$Overlay$none}),
							elm$core$Platform$Cmd$none);
					} else {
						var rawHistory = _n10.a;
						return A3(elm$browser$Debugger$Main$loadNewHistory, rawHistory, update, model);
					}
			}
		}
	});
var elm$core$Set$foldr = F3(
	function (func, initialState, _n0) {
		var dict = _n0.a;
		return A3(
			elm$core$Dict$foldr,
			F3(
				function (key, _n1, state) {
					return A2(func, key, state);
				}),
			initialState,
			dict);
	});
var elm$url$Url$Http = {$: 'Http'};
var elm$url$Url$Https = {$: 'Https'};
var elm$core$String$indexes = _String_indexes;
var elm$core$String$toInt = _String_toInt;
var elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if (elm$core$String$isEmpty(str) || A2(elm$core$String$contains, '@', str)) {
			return elm$core$Maybe$Nothing;
		} else {
			var _n0 = A2(elm$core$String$indexes, ':', str);
			if (!_n0.b) {
				return elm$core$Maybe$Just(
					A6(elm$url$Url$Url, protocol, str, elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_n0.b.b) {
					var i = _n0.a;
					var _n1 = elm$core$String$toInt(
						A2(elm$core$String$dropLeft, i + 1, str));
					if (_n1.$ === 'Nothing') {
						return elm$core$Maybe$Nothing;
					} else {
						var port_ = _n1;
						return elm$core$Maybe$Just(
							A6(
								elm$url$Url$Url,
								protocol,
								A2(elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return elm$core$Maybe$Nothing;
				}
			}
		}
	});
var elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if (elm$core$String$isEmpty(str)) {
			return elm$core$Maybe$Nothing;
		} else {
			var _n0 = A2(elm$core$String$indexes, '/', str);
			if (!_n0.b) {
				return A5(elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _n0.a;
				return A5(
					elm$url$Url$chompBeforePath,
					protocol,
					A2(elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2(elm$core$String$left, i, str));
			}
		}
	});
var elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if (elm$core$String$isEmpty(str)) {
			return elm$core$Maybe$Nothing;
		} else {
			var _n0 = A2(elm$core$String$indexes, '?', str);
			if (!_n0.b) {
				return A4(elm$url$Url$chompBeforeQuery, protocol, elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _n0.a;
				return A4(
					elm$url$Url$chompBeforeQuery,
					protocol,
					elm$core$Maybe$Just(
						A2(elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2(elm$core$String$left, i, str));
			}
		}
	});
var elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if (elm$core$String$isEmpty(str)) {
			return elm$core$Maybe$Nothing;
		} else {
			var _n0 = A2(elm$core$String$indexes, '#', str);
			if (!_n0.b) {
				return A3(elm$url$Url$chompBeforeFragment, protocol, elm$core$Maybe$Nothing, str);
			} else {
				var i = _n0.a;
				return A3(
					elm$url$Url$chompBeforeFragment,
					protocol,
					elm$core$Maybe$Just(
						A2(elm$core$String$dropLeft, i + 1, str)),
					A2(elm$core$String$left, i, str));
			}
		}
	});
var elm$url$Url$fromString = function (str) {
	return A2(elm$core$String$startsWith, 'http://', str) ? A2(
		elm$url$Url$chompAfterProtocol,
		elm$url$Url$Http,
		A2(elm$core$String$dropLeft, 7, str)) : (A2(elm$core$String$startsWith, 'https://', str) ? A2(
		elm$url$Url$chompAfterProtocol,
		elm$url$Url$Https,
		A2(elm$core$String$dropLeft, 8, str)) : elm$core$Maybe$Nothing);
};
var elm$browser$Browser$Dom$getViewport = _Browser_withWindow(_Browser_getViewport);
var elm$browser$Browser$Dom$getViewportOf = _Browser_getViewportOf;
var elm$core$Task$onError = _Scheduler_onError;
var elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return elm$core$Task$command(
			elm$core$Task$Perform(
				A2(
					elm$core$Task$onError,
					A2(
						elm$core$Basics$composeL,
						A2(elm$core$Basics$composeL, elm$core$Task$succeed, resultToMessage),
						elm$core$Result$Err),
					A2(
						elm$core$Task$andThen,
						A2(
							elm$core$Basics$composeL,
							A2(elm$core$Basics$composeL, elm$core$Task$succeed, resultToMessage),
							elm$core$Result$Ok),
						task))));
	});
var elm$time$Time$Name = function (a) {
	return {$: 'Name', a: a};
};
var elm$time$Time$Offset = function (a) {
	return {$: 'Offset', a: a};
};
var elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 'Zone', a: a, b: b};
	});
var elm$time$Time$customZone = elm$time$Time$Zone;
var elm$time$Time$here = _Time_here(_Utils_Tuple0);
var elm$time$Time$now = _Time_now(elm$time$Time$millisToPosix);
var elm$time$Time$utc = A2(elm$time$Time$Zone, 0, _List_Nil);
var author$project$PageEditor$PageEditor$reset = F3(
	function (mbDoc, availableThreads, externalMsg) {
		var handlers = {
			cellClick: externalMsg(author$project$PageEditor$PageEditor$EditCell),
			containerClickHandler: A2(elm$core$Basics$composeL, externalMsg, author$project$PageEditor$PageEditor$SelectDoc),
			containerDblClickHandler: function (_n2) {
				return externalMsg(author$project$PageEditor$PageEditor$NoOp);
			},
			neighbourClickHandler: function (_n3) {
				return externalMsg(author$project$PageEditor$PageEditor$Rewind);
			}
		};
		var funnelState = {
			storage: billstclair$elm_localstorage$PortFunnel$LocalStorage$initialState('Editor')
		};
		var doc_ = A2(
			author$project$PageEditor$Internals$DocumentEditorHelpers$fixUids,
			0,
			A2(elm$core$Maybe$withDefault, author$project$PageEditor$Internals$DocumentEditorHelpers$emptyDoc, mbDoc));
		var config = {
			containersBkgColors: false,
			currentTime: elm$time$Time$millisToPosix(0),
			customElems: elm$core$Dict$empty,
			editMode: true,
			fiches: elm$core$Dict$empty,
			galleries: elm$core$Dict$empty,
			height: 1080,
			mainInterfaceHeight: 75,
			news: elm$core$Dict$empty,
			openFicheMsg: elm$core$Basics$always(
				externalMsg(author$project$PageEditor$PageEditor$NoOp)),
			openNewsMsg: elm$core$Basics$always(
				externalMsg(author$project$PageEditor$PageEditor$NoOp)),
			openedFiches: elm$core$Set$empty,
			openedNews: elm$core$Set$empty,
			pageIndex: elm$core$Dict$empty,
			previewMode: author$project$Document$DocumentViews$StyleSheets$PreviewScreen,
			season: author$project$Document$DocumentViews$StyleSheets$Spring,
			width: 1920,
			zipperHandlers: elm$core$Maybe$Just(handlers),
			zone: elm$time$Time$utc
		};
		var _n0 = A3(
			author$project$PageEditor$EditorPlugins$TextBlockPlugin$init,
			_List_Nil,
			elm$core$Maybe$Nothing,
			A2(elm$core$Basics$composeL, externalMsg, author$project$PageEditor$PageEditor$TextBlockPluginMsg));
		var newTextBlockPlugin = _n0.a;
		var textBlockPluginCmds = _n0.b;
		var _n1 = A2(
			author$project$PageEditor$EditorPlugins$ImagePlugin$init,
			elm$core$Maybe$Nothing,
			A2(elm$core$Basics$composeL, externalMsg, author$project$PageEditor$PageEditor$ImagePluginMsg));
		var newImagePlugin = _n1.a;
		var imagePluginCmds = _n1.b;
		return _Utils_Tuple2(
			{
				availableThreads: availableThreads,
				blockLinksPlugin: A2(
					author$project$PageEditor$EditorPlugins$BlockLinksPlugin$init,
					elm$core$Maybe$Nothing,
					A2(elm$core$Basics$composeL, externalMsg, author$project$PageEditor$PageEditor$BlockLinksPluginMsg)),
				clipboard: elm$core$Maybe$Nothing,
				config: config,
				controlDown: false,
				currentPlugin: elm$core$Maybe$Nothing,
				document: author$project$PageEditor$Internals$DocumentZipper$initZip(doc_),
				externalMsg: externalMsg,
				fichesPlugin: A2(
					author$project$PageEditor$EditorPlugins$FichesPlugin$init,
					_List_Nil,
					A2(elm$core$Basics$composeL, externalMsg, author$project$PageEditor$PageEditor$FichesPluginMsg)),
				funnelState: funnelState,
				galleryPlugin: A3(
					author$project$PageEditor$EditorPlugins$GalleryPlugin$init,
					elm$core$Maybe$Nothing,
					availableThreads,
					A2(elm$core$Basics$composeL, externalMsg, author$project$PageEditor$PageEditor$GalleryPluginMsg)),
				imagePlugin: newImagePlugin,
				jsonBuffer: '',
				localStorageKey: '',
				localStorageKeys: _List_Nil,
				localStorageValue: elm$core$Maybe$Nothing,
				menuClicked: false,
				menuFocused: '',
				nextUid: author$project$PageEditor$Internals$DocumentEditorHelpers$maxUid(doc_) + 1,
				pictureLinksPlugin: A2(
					author$project$PageEditor$EditorPlugins$PictureLinksPlugin$init,
					_List_Nil,
					A2(elm$core$Basics$composeL, externalMsg, author$project$PageEditor$PageEditor$PictureLinksPluginMsg)),
				tablePlugin: A2(
					author$project$PageEditor$EditorPlugins$TablePlugin$init,
					elm$core$Maybe$Nothing,
					A2(elm$core$Basics$composeL, externalMsg, author$project$PageEditor$PageEditor$TablePluginMsg)),
				textBlockPlugin: newTextBlockPlugin,
				undoCache: _List_Nil,
				videoPlugin: A2(
					author$project$PageEditor$EditorPlugins$VideoPlugin$init,
					elm$core$Maybe$Nothing,
					A2(elm$core$Basics$composeL, externalMsg, author$project$PageEditor$PageEditor$VideoPluginMsg))
			},
			elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A2(
						elm$core$Platform$Cmd$map,
						externalMsg,
						A2(elm$core$Task$perform, author$project$PageEditor$PageEditor$CurrentViewport, elm$browser$Browser$Dom$getViewport)),
						A2(
						elm$core$Platform$Cmd$map,
						externalMsg,
						A2(
							elm$core$Task$attempt,
							author$project$PageEditor$PageEditor$MainInterfaceViewport,
							elm$browser$Browser$Dom$getViewportOf('mainInterface'))),
						textBlockPluginCmds,
						imagePluginCmds,
						A3(
						billstclair$elm_localstorage$PortFunnel$LocalStorage$send,
						author$project$PageEditor$PageEditor$cmdPort,
						billstclair$elm_localstorage$PortFunnel$LocalStorage$listKeys(''),
						funnelState.storage),
						A2(
						elm$core$Platform$Cmd$map,
						externalMsg,
						A2(
							elm$core$Task$perform,
							author$project$PageEditor$PageEditor$SetSeason,
							A2(
								elm$core$Task$andThen,
								function (t) {
									return A2(
										elm$core$Task$andThen,
										function (h) {
											return elm$core$Task$succeed(
												A2(author$project$Document$DocumentViews$StyleSheets$timeToSeason, h, t));
										},
										elm$time$Time$here);
								},
								elm$time$Time$now)))
					])));
	});
var author$project$PageEditor$PageEditor$init = author$project$PageEditor$PageEditor$reset;
var author$project$PageTreeEditor$PageTreeEditor$init = function (externalMsg) {
	return {contentUpdatedStatus: author$project$Internals$CommonHelpers$Initial, contents: elm$core$Dict$empty, contentsLoaded: author$project$Internals$CommonHelpers$Initial, error: '', externalMsg: externalMsg, fileIoSelected: elm$core$Maybe$Nothing, internalPageSelected: elm$core$Maybe$Nothing, keywords: elm$core$Set$empty, keywordsLoaded: author$project$Internals$CommonHelpers$Initial, keywordsPromptInput: elm$core$Maybe$Nothing, lockedContents: elm$core$Dict$empty, lockedKeywords: elm$core$Set$empty, lockedPages: _List_Nil, newPageBuffer: '', pageTree: elm$core$Maybe$Nothing, pageTreeLoaded: author$project$Internals$CommonHelpers$Initial, pageTreeUpdatedStatus: author$project$Internals$CommonHelpers$Initial, pastePageBuffer: elm$core$Maybe$Nothing, renamePageBuffer: elm$core$Maybe$Nothing, saveAsSelected: elm$core$Maybe$Nothing, seed: elm$core$Maybe$Nothing, selected: elm$core$Maybe$Nothing, selectedKeyword: elm$core$Maybe$Nothing, selectedPageKeyword: elm$core$Maybe$Nothing};
};
var author$project$MurolAdmin$init = function (flags) {
	var newPageTreeEditor = author$project$PageTreeEditor$PageTreeEditor$init(author$project$MurolAdmin$PageTreeEditorMsg);
	var newFileExplorer = A2(author$project$FileExplorer$FileExplorer$init, author$project$FileExplorer$FileExplorer$ImagesRoot, author$project$MurolAdmin$FileExplorerMsg);
	var _n0 = A3(author$project$PageEditor$PageEditor$init, elm$core$Maybe$Nothing, flags.availableThreads, author$project$MurolAdmin$PageEditorMsg);
	var newPageEditor = _n0.a;
	var pageEditorCmds = _n0.b;
	var _n1 = author$project$NewsEditor$NewsEditor$init(author$project$MurolAdmin$NewsEditorMsg);
	var newNewsEditor = _n1.a;
	var newEditorCmds = _n1.b;
	var _n2 = author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$init(author$project$MurolAdmin$GeneralDirectoryMsg);
	var newGeneralDirectory = _n2.a;
	var generalDirectoryCmds = _n2.b;
	return _Utils_Tuple2(
		{
			authTool: author$project$Auth$AuthPlugin$init(author$project$MurolAdmin$AuthMsg),
			currentTool: author$project$MurolAdmin$AuthTool,
			fileExplorer: newFileExplorer,
			generalDirectory: newGeneralDirectory,
			loadingStatus: author$project$MurolAdmin$WaitingForLogin,
			newsEditor: newNewsEditor,
			pageEditor: newPageEditor,
			pageTreeEditor: newPageTreeEditor,
			winHeight: 1080,
			winWidth: 1920,
			zone: elm$time$Time$utc
		},
		elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					pageEditorCmds,
					generalDirectoryCmds,
					A2(elm$core$Task$perform, author$project$MurolAdmin$CurrentViewport, elm$browser$Browser$Dom$getViewport),
					A2(elm$core$Task$perform, author$project$MurolAdmin$SetZone, elm$time$Time$here)
				])));
};
var elm$core$Platform$Sub$batch = _Platform_batch;
var author$project$FileExplorer$FileExplorer$subscriptions = function (model) {
	return A2(
		elm$core$Platform$Sub$map,
		model.externalMsg,
		elm$core$Platform$Sub$batch(_List_Nil));
};
var author$project$MurolAdmin$WinResize = F2(
	function (a, b) {
		return {$: 'WinResize', a: a, b: b};
	});
var author$project$PageEditor$EditorPlugins$GalleryPlugin$ImageProcessed = function (a) {
	return {$: 'ImageProcessed', a: a};
};
var author$project$PageEditor$EditorPlugins$GalleryPlugin$processedImages = _Platform_incomingPort('processedImages', elm$json$Json$Decode$value);
var author$project$PageEditor$EditorPlugins$GalleryPlugin$subscription = function (model) {
	return author$project$PageEditor$EditorPlugins$GalleryPlugin$processedImages(author$project$PageEditor$EditorPlugins$GalleryPlugin$ImageProcessed);
};
var author$project$PageEditor$PageEditor$Process = function (a) {
	return {$: 'Process', a: a};
};
var author$project$PageEditor$PageEditor$WinResize = F2(
	function (a, b) {
		return {$: 'WinResize', a: a, b: b};
	});
var author$project$PageEditor$PageEditor$subPort = _Platform_incomingPort('subPort', elm$json$Json$Decode$value);
var elm$browser$Browser$Events$Window = {$: 'Window'};
var elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 'MySub', a: a, b: b, c: c};
	});
var elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {pids: pids, subs: subs};
	});
var elm$browser$Browser$Events$init = elm$core$Task$succeed(
	A2(elm$browser$Browser$Events$State, _List_Nil, elm$core$Dict$empty));
var elm$browser$Browser$Events$nodeToKey = function (node) {
	if (node.$ === 'Document') {
		return 'd_';
	} else {
		return 'w_';
	}
};
var elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {event: event, key: key};
	});
var elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var elm$browser$Browser$Events$spawn = F3(
	function (router, key, _n0) {
		var node = _n0.a;
		var name = _n0.b;
		var actualNode = function () {
			if (node.$ === 'Document') {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						elm$core$Platform$sendToSelf,
						router,
						A2(elm$browser$Browser$Events$Event, key, event));
				}));
	});
var elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3(elm$core$Dict$foldl, elm$core$Dict$insert, t2, t1);
	});
var elm$core$Process$kill = _Scheduler_kill;
var elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _n6) {
				var deads = _n6.a;
				var lives = _n6.b;
				var news = _n6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						elm$core$List$cons,
						A3(elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_n4, pid, _n5) {
				var deads = _n5.a;
				var lives = _n5.b;
				var news = _n5.c;
				return _Utils_Tuple3(
					A2(elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _n2, _n3) {
				var deads = _n3.a;
				var lives = _n3.b;
				var news = _n3.c;
				return _Utils_Tuple3(
					deads,
					A3(elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2(elm$core$List$map, elm$browser$Browser$Events$addKey, subs);
		var _n0 = A6(
			elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.pids,
			elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, elm$core$Dict$empty, _List_Nil));
		var deadPids = _n0.a;
		var livePids = _n0.b;
		var makeNewPids = _n0.c;
		return A2(
			elm$core$Task$andThen,
			function (pids) {
				return elm$core$Task$succeed(
					A2(
						elm$browser$Browser$Events$State,
						newSubs,
						A2(
							elm$core$Dict$union,
							livePids,
							elm$core$Dict$fromList(pids))));
			},
			A2(
				elm$core$Task$andThen,
				function (_n1) {
					return elm$core$Task$sequence(makeNewPids);
				},
				elm$core$Task$sequence(
					A2(elm$core$List$map, elm$core$Process$kill, deadPids))));
	});
var elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _n0, state) {
		var key = _n0.key;
		var event = _n0.event;
		var toMessage = function (_n2) {
			var subKey = _n2.a;
			var _n3 = _n2.b;
			var node = _n3.a;
			var name = _n3.b;
			var decoder = _n3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : elm$core$Maybe$Nothing;
		};
		var messages = A2(elm$core$List$filterMap, toMessage, state.subs);
		return A2(
			elm$core$Task$andThen,
			function (_n1) {
				return elm$core$Task$succeed(state);
			},
			elm$core$Task$sequence(
				A2(
					elm$core$List$map,
					elm$core$Platform$sendToApp(router),
					messages)));
	});
var elm$browser$Browser$Events$subMap = F2(
	function (func, _n0) {
		var node = _n0.a;
		var name = _n0.b;
		var decoder = _n0.c;
		return A3(
			elm$browser$Browser$Events$MySub,
			node,
			name,
			A2(elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager(elm$browser$Browser$Events$init, elm$browser$Browser$Events$onEffects, elm$browser$Browser$Events$onSelfMsg, 0, elm$browser$Browser$Events$subMap);
var elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return elm$browser$Browser$Events$subscription(
			A3(elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var elm$json$Json$Decode$int = _Json_decodeInt;
var elm$browser$Browser$Events$onResize = function (func) {
	return A3(
		elm$browser$Browser$Events$on,
		elm$browser$Browser$Events$Window,
		'resize',
		A2(
			elm$json$Json$Decode$field,
			'target',
			A3(
				elm$json$Json$Decode$map2,
				func,
				A2(elm$json$Json$Decode$field, 'innerWidth', elm$json$Json$Decode$int),
				A2(elm$json$Json$Decode$field, 'innerHeight', elm$json$Json$Decode$int))));
};
var author$project$PageEditor$PageEditor$subscriptions = function (model) {
	return A2(
		elm$core$Platform$Sub$map,
		model.externalMsg,
		elm$core$Platform$Sub$batch(
			_List_fromArray(
				[
					author$project$PageEditor$PageEditor$subPort(author$project$PageEditor$PageEditor$Process),
					elm$browser$Browser$Events$onResize(author$project$PageEditor$PageEditor$WinResize),
					A2(
					elm$core$Platform$Sub$map,
					author$project$PageEditor$PageEditor$GalleryPluginMsg,
					author$project$PageEditor$EditorPlugins$GalleryPlugin$subscription(model.galleryPlugin))
				])));
};
var author$project$MurolAdmin$subscriptions = function (model) {
	return elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				author$project$FileExplorer$FileExplorer$subscriptions(model.fileExplorer),
				author$project$PageEditor$PageEditor$subscriptions(model.pageEditor),
				elm$browser$Browser$Events$onResize(author$project$MurolAdmin$WinResize)
			]));
};
var author$project$Auth$AuthPlugin$getLogInfo = function (model) {
	return model.logInfo;
};
var author$project$Auth$AuthPlugin$AddLog = function (a) {
	return {$: 'AddLog', a: a};
};
var author$project$Auth$AuthPlugin$LogoutMode = function (a) {
	return {$: 'LogoutMode', a: a};
};
var author$project$Auth$AuthPlugin$SignUpMode = function (a) {
	return {$: 'SignUpMode', a: a};
};
var author$project$Auth$AuthPlugin$ConfirmLogin = function (a) {
	return {$: 'ConfirmLogin', a: a};
};
var author$project$Auth$AuthPlugin$LoggedIn = function (a) {
	return {$: 'LoggedIn', a: a};
};
var author$project$Auth$AuthPlugin$decodeLoginResult = A3(
	elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return author$project$Auth$AuthPlugin$LoggedIn(
				{sessionId: b, username: a});
		}),
	A2(elm$json$Json$Decode$field, 'username', elm$json$Json$Decode$string),
	A2(elm$json$Json$Decode$field, 'sessionId', elm$json$Json$Decode$string));
var elm$core$Result$mapError = F2(
	function (f, result) {
		if (result.$ === 'Ok') {
			var v = result.a;
			return elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return elm$core$Result$Err(
				f(e));
		}
	});
var elm$core$Maybe$isJust = function (maybe) {
	if (maybe.$ === 'Just') {
		return true;
	} else {
		return false;
	}
};
var elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return elm$core$Result$Err(e);
		}
	});
var elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 'BadStatus_', a: a, b: b};
	});
var elm$http$Http$BadUrl_ = function (a) {
	return {$: 'BadUrl_', a: a};
};
var elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 'GoodStatus_', a: a, b: b};
	});
var elm$http$Http$NetworkError_ = {$: 'NetworkError_'};
var elm$http$Http$Receiving = function (a) {
	return {$: 'Receiving', a: a};
};
var elm$http$Http$Sending = function (a) {
	return {$: 'Sending', a: a};
};
var elm$http$Http$Timeout_ = {$: 'Timeout_'};
var elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			elm$core$Basics$identity,
			A2(elm$core$Basics$composeR, toResult, toMsg));
	});
var elm$http$Http$BadBody = function (a) {
	return {$: 'BadBody', a: a};
};
var elm$http$Http$BadStatus = function (a) {
	return {$: 'BadStatus', a: a};
};
var elm$http$Http$BadUrl = function (a) {
	return {$: 'BadUrl', a: a};
};
var elm$http$Http$NetworkError = {$: 'NetworkError'};
var elm$http$Http$Timeout = {$: 'Timeout'};
var elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 'BadUrl_':
				var url = response.a;
				return elm$core$Result$Err(
					elm$http$Http$BadUrl(url));
			case 'Timeout_':
				return elm$core$Result$Err(elm$http$Http$Timeout);
			case 'NetworkError_':
				return elm$core$Result$Err(elm$http$Http$NetworkError);
			case 'BadStatus_':
				var metadata = response.a;
				return elm$core$Result$Err(
					elm$http$Http$BadStatus(metadata.statusCode));
			default:
				var body = response.b;
				return A2(
					elm$core$Result$mapError,
					elm$http$Http$BadBody,
					toResult(body));
		}
	});
var elm$http$Http$expectJson = F2(
	function (toMsg, decoder) {
		return A2(
			elm$http$Http$expectStringResponse,
			toMsg,
			elm$http$Http$resolve(
				function (string) {
					return A2(
						elm$core$Result$mapError,
						elm$json$Json$Decode$errorToString,
						A2(elm$json$Json$Decode$decodeString, decoder, string));
				}));
	});
var elm$http$Http$jsonBody = function (value) {
	return A2(
		_Http_pair,
		'application/json',
		A2(elm$json$Json$Encode$encode, 0, value));
};
var elm$http$Http$Request = function (a) {
	return {$: 'Request', a: a};
};
var elm$http$Http$State = F2(
	function (reqs, subs) {
		return {reqs: reqs, subs: subs};
	});
var elm$http$Http$init = elm$core$Task$succeed(
	A2(elm$http$Http$State, elm$core$Dict$empty, _List_Nil));
var elm$core$Process$spawn = _Scheduler_spawn;
var elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (cmd.$ === 'Cancel') {
					var tracker = cmd.a;
					var _n2 = A2(elm$core$Dict$get, tracker, reqs);
					if (_n2.$ === 'Nothing') {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _n2.a;
						return A2(
							elm$core$Task$andThen,
							function (_n3) {
								return A3(
									elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2(elm$core$Dict$remove, tracker, reqs));
							},
							elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						elm$core$Task$andThen,
						function (pid) {
							var _n4 = req.tracker;
							if (_n4.$ === 'Nothing') {
								return A3(elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _n4.a;
								return A3(
									elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3(elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			elm$core$Task$andThen,
			function (reqs) {
				return elm$core$Task$succeed(
					A2(elm$http$Http$State, reqs, subs));
			},
			A3(elm$http$Http$updateReqs, router, cmds, state.reqs));
	});
var elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _n0) {
		var actualTracker = _n0.a;
		var toMsg = _n0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? elm$core$Maybe$Just(
			A2(
				elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : elm$core$Maybe$Nothing;
	});
var elm$http$Http$onSelfMsg = F3(
	function (router, _n0, state) {
		var tracker = _n0.a;
		var progress = _n0.b;
		return A2(
			elm$core$Task$andThen,
			function (_n1) {
				return elm$core$Task$succeed(state);
			},
			elm$core$Task$sequence(
				A2(
					elm$core$List$filterMap,
					A3(elm$http$Http$maybeSend, router, tracker, progress),
					state.subs)));
	});
var elm$http$Http$Cancel = function (a) {
	return {$: 'Cancel', a: a};
};
var elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (cmd.$ === 'Cancel') {
			var tracker = cmd.a;
			return elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return elm$http$Http$Request(
				{
					allowCookiesFromOtherDomains: r.allowCookiesFromOtherDomains,
					body: r.body,
					expect: A2(_Http_mapExpect, func, r.expect),
					headers: r.headers,
					method: r.method,
					timeout: r.timeout,
					tracker: r.tracker,
					url: r.url
				});
		}
	});
var elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 'MySub', a: a, b: b};
	});
var elm$http$Http$subMap = F2(
	function (func, _n0) {
		var tracker = _n0.a;
		var toMsg = _n0.b;
		return A2(
			elm$http$Http$MySub,
			tracker,
			A2(elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager(elm$http$Http$init, elm$http$Http$onEffects, elm$http$Http$onSelfMsg, elm$http$Http$cmdMap, elm$http$Http$subMap);
var elm$http$Http$command = _Platform_leaf('Http');
var elm$http$Http$subscription = _Platform_leaf('Http');
var elm$http$Http$request = function (r) {
	return elm$http$Http$command(
		elm$http$Http$Request(
			{allowCookiesFromOtherDomains: false, body: r.body, expect: r.expect, headers: r.headers, method: r.method, timeout: r.timeout, tracker: r.tracker, url: r.url}));
};
var elm$http$Http$post = function (r) {
	return elm$http$Http$request(
		{body: r.body, expect: r.expect, headers: _List_Nil, method: 'POST', timeout: elm$core$Maybe$Nothing, tracker: elm$core$Maybe$Nothing, url: r.url});
};
var author$project$Auth$AuthPlugin$login = function (model) {
	var body = elm$http$Http$jsonBody(
		elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'username',
					elm$json$Json$Encode$string(
						function ($) {
							return $.username;
						}(model))),
					_Utils_Tuple2(
					'password',
					elm$json$Json$Encode$string(
						function ($) {
							return $.password;
						}(model)))
				])));
	return elm$http$Http$post(
		{
			body: body,
			expect: A2(elm$http$Http$expectJson, author$project$Auth$AuthPlugin$ConfirmLogin, author$project$Auth$AuthPlugin$decodeLoginResult),
			url: 'login.php'
		});
};
var author$project$Auth$AuthPlugin$ConfirmLogout = function (a) {
	return {$: 'ConfirmLogout', a: a};
};
var elm$json$Json$Decode$bool = _Json_decodeBool;
var author$project$Auth$AuthPlugin$decodeLogoutResult = A2(elm$json$Json$Decode$field, 'notLoggedIn', elm$json$Json$Decode$bool);
var elm$http$Http$emptyBody = _Http_emptyBody;
var elm$http$Http$get = function (r) {
	return elm$http$Http$request(
		{body: elm$http$Http$emptyBody, expect: r.expect, headers: _List_Nil, method: 'GET', timeout: elm$core$Maybe$Nothing, tracker: elm$core$Maybe$Nothing, url: r.url});
};
var author$project$Auth$AuthPlugin$logout = elm$http$Http$get(
	{
		expect: A2(elm$http$Http$expectJson, author$project$Auth$AuthPlugin$ConfirmLogout, author$project$Auth$AuthPlugin$decodeLogoutResult),
		url: 'logout.php'
	});
var author$project$Auth$AuthPlugin$ConfirmSignUp = function (a) {
	return {$: 'ConfirmSignUp', a: a};
};
var author$project$Auth$AuthPlugin$decodeSignupResult = A2(elm$json$Json$Decode$field, 'signUpComplete', elm$json$Json$Decode$bool);
var author$project$Auth$AuthPlugin$signUp = function (model) {
	var body = elm$http$Http$jsonBody(
		elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'username',
					elm$json$Json$Encode$string(
						function ($) {
							return $.username;
						}(model))),
					_Utils_Tuple2(
					'password',
					elm$json$Json$Encode$string(
						function ($) {
							return $.password;
						}(model)))
				])));
	return elm$http$Http$post(
		{
			body: body,
			expect: A2(elm$http$Http$expectJson, author$project$Auth$AuthPlugin$ConfirmSignUp, author$project$Auth$AuthPlugin$decodeSignupResult),
			url: 'signup.php'
		});
};
var author$project$Internals$CommonHelpers$Failure = {$: 'Failure'};
var author$project$Internals$CommonHelpers$Success = {$: 'Success'};
var author$project$Internals$CommonHelpers$Waiting = {$: 'Waiting'};
var author$project$Internals$CommonHelpers$httpErrorToString = function (e) {
	switch (e.$) {
		case 'BadUrl':
			var s = e.a;
			return 'Url invalide: ' + s;
		case 'Timeout':
			return 'Délai d\'attente dépassé';
		case 'NetworkError':
			return 'Erreur de réseau';
		case 'BadStatus':
			var statusCode = e.a;
			return 'Erreur serveur: ' + elm$core$String$fromInt(statusCode);
		default:
			var details = e.a;
			return 'Erreur décodage: ' + details;
	}
};
var author$project$Internals$CommonHelpers$Log = F4(
	function (message, mbDetails, isError, timeStamp) {
		return {isError: isError, mbDetails: mbDetails, message: message, timeStamp: timeStamp};
	});
var author$project$Internals$CommonHelpers$newLog = F4(
	function (addLogMsg, logMsg, details, isError) {
		return A2(
			elm$core$Task$perform,
			addLogMsg,
			A2(
				elm$core$Task$andThen,
				function (t) {
					return elm$core$Task$succeed(
						A4(author$project$Internals$CommonHelpers$Log, logMsg, details, isError, t));
				},
				elm$time$Time$now));
	});
var author$project$Internals$ToolHelpers$ToolQuit = {$: 'ToolQuit'};
var author$project$Auth$AuthPlugin$internalUpdate = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'SetUsername':
				var s = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{username: s}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'SetPassword':
				var s = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{password: s}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'SetConfirmPassword':
				var s = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{confirmPassword: s}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'Login':
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							pluginMode: author$project$Auth$AuthPlugin$LoginMode(author$project$Internals$CommonHelpers$Waiting)
						}),
					author$project$Auth$AuthPlugin$login(model),
					elm$core$Maybe$Nothing);
			case 'ConfirmLogin':
				var res = msg.a;
				if (res.$ === 'Err') {
					var e = res.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								logInfo: author$project$Auth$AuthPlugin$LoggedOut,
								pluginMode: author$project$Auth$AuthPlugin$LoginMode(author$project$Internals$CommonHelpers$Failure)
							}),
						A4(
							author$project$Internals$CommonHelpers$newLog,
							author$project$Auth$AuthPlugin$AddLog,
							'Echec connexion',
							elm$core$Maybe$Just(
								author$project$Internals$CommonHelpers$httpErrorToString(e)),
							true),
						elm$core$Maybe$Nothing);
				} else {
					var logInfo = res.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								logInfo: logInfo,
								pluginMode: author$project$Auth$AuthPlugin$LoginMode(author$project$Internals$CommonHelpers$Success)
							}),
						elm$core$Platform$Cmd$none,
						elm$core$Maybe$Nothing);
				}
			case 'SignUp':
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							pluginMode: author$project$Auth$AuthPlugin$SignUpMode(author$project$Internals$CommonHelpers$Waiting)
						}),
					author$project$Auth$AuthPlugin$signUp(model),
					elm$core$Maybe$Nothing);
			case 'ConfirmSignUp':
				var res = msg.a;
				if (res.$ === 'Err') {
					var e = res.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								pluginMode: author$project$Auth$AuthPlugin$SignUpMode(author$project$Internals$CommonHelpers$Failure)
							}),
						A4(
							author$project$Internals$CommonHelpers$newLog,
							author$project$Auth$AuthPlugin$AddLog,
							'Echec création compte',
							elm$core$Maybe$Just(
								author$project$Internals$CommonHelpers$httpErrorToString(e)),
							true),
						elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								pluginMode: author$project$Auth$AuthPlugin$SignUpMode(author$project$Internals$CommonHelpers$Success)
							}),
						elm$core$Platform$Cmd$none,
						elm$core$Maybe$Nothing);
				}
			case 'Logout':
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							pluginMode: author$project$Auth$AuthPlugin$LogoutMode(author$project$Internals$CommonHelpers$Waiting)
						}),
					author$project$Auth$AuthPlugin$logout,
					elm$core$Maybe$Nothing);
			case 'ConfirmLogout':
				var res = msg.a;
				if (res.$ === 'Err') {
					var e = res.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								pluginMode: author$project$Auth$AuthPlugin$LogoutMode(author$project$Internals$CommonHelpers$Failure)
							}),
						A4(
							author$project$Internals$CommonHelpers$newLog,
							author$project$Auth$AuthPlugin$AddLog,
							'Echec déconnexion',
							elm$core$Maybe$Just(
								author$project$Internals$CommonHelpers$httpErrorToString(e)),
							true),
						elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								logInfo: author$project$Auth$AuthPlugin$LoggedOut,
								pluginMode: author$project$Auth$AuthPlugin$LogoutMode(author$project$Internals$CommonHelpers$Success)
							}),
						elm$core$Platform$Cmd$none,
						elm$core$Maybe$Nothing);
				}
			case 'ChangePluginMode':
				var mode = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{pluginMode: mode}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'AddLog':
				var log = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							logs: A2(elm$core$List$cons, log, model.logs)
						}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'Quit':
				return _Utils_Tuple3(
					model,
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Just(author$project$Internals$ToolHelpers$ToolQuit));
			default:
				return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
		}
	});
var author$project$Auth$AuthPlugin$update = F2(
	function (msg, model) {
		var _n0 = A2(author$project$Auth$AuthPlugin$internalUpdate, msg, model);
		var newModel = _n0.a;
		var cmds = _n0.b;
		var mbToolResult = _n0.c;
		return _Utils_Tuple3(
			newModel,
			A2(elm$core$Platform$Cmd$map, model.externalMsg, cmds),
			mbToolResult);
	});
var author$project$FileExplorer$FileExplorer$DocsRoot = {$: 'DocsRoot'};
var author$project$FileExplorer$FileExplorer$RefreshFilesys = F4(
	function (a, b, c, d) {
		return {$: 'RefreshFilesys', a: a, b: b, c: c, d: d};
	});
var NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom = elm$json$Json$Decode$map2(elm$core$Basics$apR);
var elm$json$Json$Decode$andThen = _Json_andThen;
var elm$json$Json$Decode$fail = _Json_fail;
var elm$json$Json$Decode$null = _Json_decodeNull;
var elm$json$Json$Decode$oneOf = _Json_oneOf;
var NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder = F3(
	function (pathDecoder, valDecoder, fallback) {
		var nullOr = function (decoder) {
			return elm$json$Json$Decode$oneOf(
				_List_fromArray(
					[
						decoder,
						elm$json$Json$Decode$null(fallback)
					]));
		};
		var handleResult = function (input) {
			var _n0 = A2(elm$json$Json$Decode$decodeValue, pathDecoder, input);
			if (_n0.$ === 'Ok') {
				var rawValue = _n0.a;
				var _n1 = A2(
					elm$json$Json$Decode$decodeValue,
					nullOr(valDecoder),
					rawValue);
				if (_n1.$ === 'Ok') {
					var finalResult = _n1.a;
					return elm$json$Json$Decode$succeed(finalResult);
				} else {
					var finalErr = _n1.a;
					return elm$json$Json$Decode$fail(
						elm$json$Json$Decode$errorToString(finalErr));
				}
			} else {
				return elm$json$Json$Decode$succeed(fallback);
			}
		};
		return A2(elm$json$Json$Decode$andThen, handleResult, elm$json$Json$Decode$value);
	});
var NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional = F4(
	function (key, valDecoder, fallback, decoder) {
		return A2(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder,
				A2(elm$json$Json$Decode$field, key, elm$json$Json$Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required = F3(
	function (key, valDecoder, decoder) {
		return A2(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A2(elm$json$Json$Decode$field, key, valDecoder),
			decoder);
	});
var author$project$FileExplorer$FileExplorer$File = function (a) {
	return {$: 'File', a: a};
};
var author$project$FileExplorer$FileExplorer$Folder = F2(
	function (a, b) {
		return {$: 'Folder', a: a, b: b};
	});
var author$project$FileExplorer$FileExplorer$ImageFile = function (a) {
	return {$: 'ImageFile', a: a};
};
var author$project$FileExplorer$FileExplorer$RegFile = {$: 'RegFile'};
var author$project$FileExplorer$FileExplorer$defMeta = {fileSize: elm$core$Maybe$Nothing, fileType: author$project$FileExplorer$FileExplorer$RegFile, name: '', path: _List_Nil};
var elm$json$Json$Decode$nullable = function (decoder) {
	return elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				elm$json$Json$Decode$null(elm$core$Maybe$Nothing),
				A2(elm$json$Json$Decode$map, elm$core$Maybe$Just, decoder)
			]));
};
var elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var elm$regex$Regex$findAtMost = _Regex_findAtMost;
var elm_community$string_extra$String$Extra$firstResultHelp = F2(
	function (_default, list) {
		firstResultHelp:
		while (true) {
			if (!list.b) {
				return _default;
			} else {
				if (list.a.$ === 'Just') {
					var a = list.a.a;
					return a;
				} else {
					var _n1 = list.a;
					var rest = list.b;
					var $temp$default = _default,
						$temp$list = rest;
					_default = $temp$default;
					list = $temp$list;
					continue firstResultHelp;
				}
			}
		}
	});
var elm_community$string_extra$String$Extra$firstResult = function (list) {
	return A2(elm_community$string_extra$String$Extra$firstResultHelp, '', list);
};
var elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var elm$regex$Regex$fromString = function (string) {
	return A2(
		elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var elm$regex$Regex$never = _Regex_never;
var elm_community$string_extra$String$Extra$regexFromString = A2(
	elm$core$Basics$composeR,
	elm$regex$Regex$fromString,
	elm$core$Maybe$withDefault(elm$regex$Regex$never));
var elm_community$string_extra$String$Extra$regexEscape = A2(
	elm$regex$Regex$replace,
	elm_community$string_extra$String$Extra$regexFromString('[-/\\^$*+?.()|[\\]{}]'),
	function (_n0) {
		var match = _n0.match;
		return '\\' + match;
	});
var elm_community$string_extra$String$Extra$leftOf = F2(
	function (pattern, string) {
		return A2(
			elm$core$String$join,
			'',
			A2(
				elm$core$List$map,
				A2(
					elm$core$Basics$composeR,
					function ($) {
						return $.submatches;
					},
					elm_community$string_extra$String$Extra$firstResult),
				A3(
					elm$regex$Regex$findAtMost,
					1,
					elm_community$string_extra$String$Extra$regexFromString(
						'^(.*?)' + elm_community$string_extra$String$Extra$regexEscape(pattern)),
					string)));
	});
var author$project$FileExplorer$FileExplorer$decodeFile = A4(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
	'isFolder',
	elm$json$Json$Decode$bool,
	false,
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'fileSize',
		elm$json$Json$Decode$nullable(elm$json$Json$Decode$int),
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'imgSize',
			elm$json$Json$Decode$nullable(
				A3(
					elm$json$Json$Decode$map2,
					F2(
						function (w, h) {
							return {height: h, width: w};
						}),
					A2(elm$json$Json$Decode$field, 'width', elm$json$Json$Decode$int),
					A2(elm$json$Json$Decode$field, 'height', elm$json$Json$Decode$int))),
			A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'name',
				A2(
					elm$json$Json$Decode$map,
					function (s) {
						return A2(elm$core$String$contains, '?', s) ? A2(elm_community$string_extra$String$Extra$leftOf, '?', s) : s;
					},
					elm$json$Json$Decode$string),
				A3(
					NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'path',
					A2(
						elm$json$Json$Decode$map,
						function (s) {
							return A2(elm$core$String$contains, '?', s) ? A2(elm_community$string_extra$String$Extra$leftOf, '?', s) : s;
						},
						elm$json$Json$Decode$string),
					elm$json$Json$Decode$succeed(
						F5(
							function (p, f, mbImgSize, mbFs, isFolder) {
								return isFolder ? A2(
									author$project$FileExplorer$FileExplorer$Folder,
									_Utils_update(
										author$project$FileExplorer$FileExplorer$defMeta,
										{
											name: f,
											path: A2(elm$core$String$split, '/', p)
										}),
									_List_Nil) : author$project$FileExplorer$FileExplorer$File(
									{
										fileSize: mbFs,
										fileType: function () {
											if (mbImgSize.$ === 'Nothing') {
												return author$project$FileExplorer$FileExplorer$RegFile;
											} else {
												var size = mbImgSize.a;
												return author$project$FileExplorer$FileExplorer$ImageFile(size);
											}
										}(),
										name: f,
										path: A2(elm$core$String$split, '/', p)
									});
							})))))));
var author$project$FileExplorer$FileExplorer$decodeFiles = elm$json$Json$Decode$list(author$project$FileExplorer$FileExplorer$decodeFile);
var author$project$FileExplorer$FileExplorer$encodeRoot = function (root) {
	if (root.$ === 'ImagesRoot') {
		return _Utils_Tuple2(
			'root',
			elm$json$Json$Encode$string('images'));
	} else {
		return _Utils_Tuple2(
			'root',
			elm$json$Json$Encode$string('baseDocumentaire'));
	}
};
var author$project$FileExplorer$FileExplorer$getFileList = F3(
	function (root, toRefresh, sessionId) {
		var body = elm$http$Http$jsonBody(
			elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'toRefresh',
						A2(elm$json$Json$Encode$list, elm$json$Json$Encode$string, toRefresh)),
						author$project$FileExplorer$FileExplorer$encodeRoot(root)
					])));
		return elm$http$Http$post(
			{
				body: body,
				expect: A2(
					elm$http$Http$expectJson,
					A3(author$project$FileExplorer$FileExplorer$RefreshFilesys, elm$core$Maybe$Nothing, 'Téléchargement info fichiers', root),
					author$project$FileExplorer$FileExplorer$decodeFiles),
				url: 'getFiles.php'
			});
	});
var author$project$FileExplorer$FileExplorer$load = F2(
	function (model, logInfo) {
		if (logInfo.$ === 'LoggedIn') {
			var sessionId = logInfo.a.sessionId;
			return A2(
				elm$core$Platform$Cmd$map,
				model.externalMsg,
				elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							A3(author$project$FileExplorer$FileExplorer$getFileList, author$project$FileExplorer$FileExplorer$ImagesRoot, _List_Nil, sessionId),
							A3(author$project$FileExplorer$FileExplorer$getFileList, author$project$FileExplorer$FileExplorer$DocsRoot, _List_Nil, sessionId)
						])));
		} else {
			return elm$core$Platform$Cmd$none;
		}
	});
var author$project$Auth$AuthPlugin$cmdIfLogged = F2(
	function (logInfo, cmd) {
		if (logInfo.$ === 'LoggedIn') {
			var sessionId = logInfo.a.sessionId;
			return cmd(sessionId);
		} else {
			return elm$core$Platform$Cmd$none;
		}
	});
var author$project$FileExplorer$FileExplorer$AddLog = function (a) {
	return {$: 'AddLog', a: a};
};
var author$project$FileExplorer$FileExplorer$Editor = {$: 'Editor'};
var author$project$FileExplorer$FileExplorer$LogsDisplay = {$: 'LogsDisplay'};
var author$project$FileExplorer$FileExplorer$UploadDisplay = {$: 'UploadDisplay'};
var author$project$FileExplorer$FileExplorer$getPath = function (fsItem) {
	if (fsItem.$ === 'Folder') {
		var path = fsItem.a.path;
		return path;
	} else {
		var path = fsItem.a.path;
		return path;
	}
};
var author$project$FileExplorer$FileExplorer$encodeFsItemPath = function (fsItem) {
	return elm$json$Json$Encode$string(
		A2(
			elm$core$String$join,
			'/',
			author$project$FileExplorer$FileExplorer$getPath(fsItem)));
};
var author$project$FileExplorer$FileExplorer$getName = function (fsItem) {
	if (fsItem.$ === 'Folder') {
		var name = fsItem.a.name;
		return name;
	} else {
		var name = fsItem.a.name;
		return name;
	}
};
var author$project$FileExplorer$FileExplorer$deleteFile = F3(
	function (fsItem, root, sessionId) {
		var body = elm$http$Http$jsonBody(
			elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						elm$json$Json$Encode$string(sessionId)),
						author$project$FileExplorer$FileExplorer$encodeRoot(root),
						_Utils_Tuple2(
						'path',
						author$project$FileExplorer$FileExplorer$encodeFsItemPath(fsItem))
					])));
		return elm$http$Http$post(
			{
				body: body,
				expect: A2(
					elm$http$Http$expectJson,
					A3(
						author$project$FileExplorer$FileExplorer$RefreshFilesys,
						elm$core$Maybe$Just(fsItem),
						'Suppression: ' + author$project$FileExplorer$FileExplorer$getName(fsItem),
						root),
					author$project$FileExplorer$FileExplorer$decodeFiles),
				url: 'deleteFile.php'
			});
	});
var author$project$FileExplorer$FileExplorer$extractFsItem = function (_n0) {
	var current = _n0.current;
	var contexts = _n0.contexts;
	return current;
};
var author$project$FileExplorer$FileExplorer$modeRoot = F2(
	function (mode, root) {
		switch (mode.$) {
			case 'ReadOnly':
				var m = mode.a;
				return m;
			case 'ReadWrite':
				var m = mode.a;
				return m;
			default:
				return root;
		}
	});
var author$project$FileExplorer$FileExplorer$getCurrentFilesys = F2(
	function (mode, model) {
		if (mode.$ === 'Full') {
			var _n1 = model.root;
			if (_n1.$ === 'ImagesRoot') {
				return model.mbIFilesys;
			} else {
				return model.mbDFilesys;
			}
		} else {
			var mode_ = mode;
			var _n2 = A2(author$project$FileExplorer$FileExplorer$modeRoot, mode_, model.root);
			if (_n2.$ === 'ImagesRoot') {
				return model.mbIFilesys;
			} else {
				return model.mbDFilesys;
			}
		}
	});
var author$project$FileExplorer$FileExplorer$initFileSys = function (fsItem) {
	return {contexts: _List_Nil, current: fsItem};
};
var author$project$FileExplorer$FileExplorer$break = F2(
	function (p, xs) {
		var helper = F2(
			function (ys, left) {
				helper:
				while (true) {
					if (!ys.b) {
						return _Utils_Tuple2(left, _List_Nil);
					} else {
						var y = ys.a;
						var ys_ = ys.b;
						if (p(y)) {
							return _Utils_Tuple2(
								elm$core$List$reverse(left),
								A2(elm$core$List$cons, y, ys_));
						} else {
							var $temp$ys = ys_,
								$temp$left = A2(elm$core$List$cons, y, left);
							ys = $temp$ys;
							left = $temp$left;
							continue helper;
						}
					}
				}
			});
		return A2(helper, xs, _List_Nil);
	});
var elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return elm$core$Maybe$Just(xs);
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var author$project$FileExplorer$FileExplorer$insert = F3(
	function (f, rootName, mbFsItem_) {
		var helper = F2(
			function (path, mbFsItem) {
				helper:
				while (true) {
					if (mbFsItem.$ === 'Nothing') {
						if (!path.b) {
							var $temp$path = path,
								$temp$mbFsItem = elm$core$Maybe$Just(
								A2(
									author$project$FileExplorer$FileExplorer$Folder,
									_Utils_update(
										author$project$FileExplorer$FileExplorer$defMeta,
										{
											name: rootName,
											path: _List_fromArray(
												[rootName])
										}),
									_List_Nil));
							path = $temp$path;
							mbFsItem = $temp$mbFsItem;
							continue helper;
						} else {
							var root = path.a;
							if (!_Utils_eq(root, rootName)) {
								return elm$core$Maybe$Nothing;
							} else {
								var $temp$path = path,
									$temp$mbFsItem = elm$core$Maybe$Just(
									A2(
										author$project$FileExplorer$FileExplorer$Folder,
										_Utils_update(
											author$project$FileExplorer$FileExplorer$defMeta,
											{
												name: rootName,
												path: _List_fromArray(
													[rootName])
											}),
										_List_Nil));
								path = $temp$path;
								mbFsItem = $temp$mbFsItem;
								continue helper;
							}
						}
					} else {
						if (mbFsItem.a.$ === 'Folder') {
							var _n2 = mbFsItem.a;
							var meta = _n2.a;
							var children = _n2.b;
							if (!path.b) {
								return elm$core$Maybe$Just(
									A2(author$project$FileExplorer$FileExplorer$Folder, meta, children));
							} else {
								if (!path.b.b) {
									var curr = path.a;
									return (!_Utils_eq(curr, meta.name)) ? elm$core$Maybe$Nothing : (A2(
										elm$core$List$any,
										function (c) {
											return _Utils_eq(
												author$project$FileExplorer$FileExplorer$getName(c),
												author$project$FileExplorer$FileExplorer$getName(f));
										},
										children) ? elm$core$Maybe$Just(
										A2(author$project$FileExplorer$FileExplorer$Folder, meta, children)) : elm$core$Maybe$Just(
										A2(
											author$project$FileExplorer$FileExplorer$Folder,
											meta,
											A2(elm$core$List$cons, f, children))));
								} else {
									var curr = path.a;
									var _n4 = path.b;
									var next = _n4.a;
									var rest = _n4.b;
									if (!_Utils_eq(curr, meta.name)) {
										return elm$core$Maybe$Nothing;
									} else {
										var _n5 = A2(
											author$project$FileExplorer$FileExplorer$break,
											function (f_) {
												return _Utils_eq(
													author$project$FileExplorer$FileExplorer$getName(f_),
													next);
											},
											children);
										var l = _n5.a;
										var r = _n5.b;
										if (!r.b) {
											var newFolder = A2(
												author$project$FileExplorer$FileExplorer$Folder,
												_Utils_update(
													author$project$FileExplorer$FileExplorer$defMeta,
													{
														name: next,
														path: _Utils_ap(
															meta.path,
															_List_fromArray(
																[next]))
													}),
												_List_Nil);
											return A2(
												elm$core$Maybe$andThen,
												function (nsbt) {
													return elm$core$Maybe$Just(
														A2(
															author$project$FileExplorer$FileExplorer$Folder,
															meta,
															A2(elm$core$List$cons, nsbt, children)));
												},
												A2(
													helper,
													A2(elm$core$List$cons, next, rest),
													elm$core$Maybe$Just(newFolder)));
										} else {
											var next_ = r.a;
											var rest_ = r.b;
											return A2(
												elm$core$Maybe$andThen,
												function (nsbt) {
													return elm$core$Maybe$Just(
														A2(
															author$project$FileExplorer$FileExplorer$Folder,
															meta,
															_Utils_ap(
																l,
																A2(elm$core$List$cons, nsbt, rest_))));
												},
												A2(
													helper,
													A2(elm$core$List$cons, next, rest),
													elm$core$Maybe$Just(next_)));
										}
									}
								}
							}
						} else {
							return elm$core$Maybe$Nothing;
						}
					}
				}
			});
		return A2(
			elm$core$Maybe$andThen,
			function (p) {
				return A2(helper, p, mbFsItem_);
			},
			A2(
				elm$core$Maybe$map,
				elm$core$List$reverse,
				elm$core$List$tail(
					elm$core$List$reverse(
						author$project$FileExplorer$FileExplorer$getPath(f)))));
	});
var author$project$FileExplorer$FileExplorer$makeNewFolder = F4(
	function (fsItem, folderName, root, sessionId) {
		var body = elm$http$Http$jsonBody(
			elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						elm$json$Json$Encode$string(sessionId)),
						author$project$FileExplorer$FileExplorer$encodeRoot(root),
						_Utils_Tuple2(
						'path',
						author$project$FileExplorer$FileExplorer$encodeFsItemPath(fsItem)),
						_Utils_Tuple2(
						'folderName',
						elm$json$Json$Encode$string(folderName))
					])));
		return elm$http$Http$post(
			{
				body: body,
				expect: A2(
					elm$http$Http$expectJson,
					A3(
						author$project$FileExplorer$FileExplorer$RefreshFilesys,
						elm$core$Maybe$Just(fsItem),
						'Création dossier: ' + folderName,
						root),
					author$project$FileExplorer$FileExplorer$decodeFiles),
				url: 'newFolder.php'
			});
	});
var author$project$FileExplorer$FileExplorer$pasteFile = F4(
	function (src, dest, root, sessionId) {
		var body = elm$http$Http$jsonBody(
			elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						elm$json$Json$Encode$string(sessionId)),
						author$project$FileExplorer$FileExplorer$encodeRoot(root),
						_Utils_Tuple2(
						'srcPath',
						author$project$FileExplorer$FileExplorer$encodeFsItemPath(src)),
						_Utils_Tuple2(
						'destPath',
						author$project$FileExplorer$FileExplorer$encodeFsItemPath(dest))
					])));
		return elm$http$Http$post(
			{
				body: body,
				expect: A2(
					elm$http$Http$expectJson,
					A3(
						author$project$FileExplorer$FileExplorer$RefreshFilesys,
						elm$core$Maybe$Just(src),
						'Collage: ' + author$project$FileExplorer$FileExplorer$getName(src),
						root),
					author$project$FileExplorer$FileExplorer$decodeFiles),
				url: 'pasteFile.php'
			});
	});
var author$project$FileExplorer$FileExplorer$renameFile = F4(
	function (fsItem, newName, root, sessionId) {
		var body = elm$http$Http$jsonBody(
			elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						elm$json$Json$Encode$string(sessionId)),
						author$project$FileExplorer$FileExplorer$encodeRoot(root),
						_Utils_Tuple2(
						'newName',
						elm$json$Json$Encode$string(newName)),
						_Utils_Tuple2(
						'path',
						author$project$FileExplorer$FileExplorer$encodeFsItemPath(fsItem))
					])));
		return elm$http$Http$post(
			{
				body: body,
				expect: A2(
					elm$http$Http$expectJson,
					A3(
						author$project$FileExplorer$FileExplorer$RefreshFilesys,
						elm$core$Maybe$Just(fsItem),
						'Renommage: ' + author$project$FileExplorer$FileExplorer$getName(fsItem),
						root),
					author$project$FileExplorer$FileExplorer$decodeFiles),
				url: 'renameFile.php'
			});
	});
var author$project$FileExplorer$FileExplorer$zipUpFilesys = function (filesys) {
	var _n0 = filesys.contexts;
	if (!_n0.b) {
		return elm$core$Maybe$Nothing;
	} else {
		var parent = _n0.a.parent;
		var left = _n0.a.left;
		var right = _n0.a.right;
		var cs = _n0.b;
		return elm$core$Maybe$Just(
			_Utils_update(
				filesys,
				{
					contexts: cs,
					current: A2(
						author$project$FileExplorer$FileExplorer$Folder,
						parent,
						_Utils_ap(
							left,
							_Utils_ap(
								_List_fromArray(
									[filesys.current]),
								right)))
				}));
	}
};
var author$project$FileExplorer$FileExplorer$rewindFilesys = function (filesys) {
	rewindFilesys:
	while (true) {
		var _n0 = author$project$FileExplorer$FileExplorer$zipUpFilesys(filesys);
		if (_n0.$ === 'Nothing') {
			return filesys;
		} else {
			var filesys_ = _n0.a;
			var $temp$filesys = filesys_;
			filesys = $temp$filesys;
			continue rewindFilesys;
		}
	}
};
var author$project$FileExplorer$FileExplorer$updateFilesys = F3(
	function (mode, model, f) {
		if (mode.$ === 'Full') {
			var _n1 = model.root;
			if (_n1.$ === 'ImagesRoot') {
				return _Utils_update(
					model,
					{
						mbIFilesys: f(model.mbIFilesys)
					});
			} else {
				return _Utils_update(
					model,
					{
						mbDFilesys: f(model.mbDFilesys)
					});
			}
		} else {
			var mode_ = mode;
			var _n2 = A2(author$project$FileExplorer$FileExplorer$modeRoot, mode_, model.root);
			if (_n2.$ === 'ImagesRoot') {
				return _Utils_update(
					model,
					{
						mbIFilesys: f(model.mbIFilesys)
					});
			} else {
				return _Utils_update(
					model,
					{
						mbDFilesys: f(model.mbDFilesys)
					});
			}
		}
	});
var author$project$FileExplorer$FileExplorer$uploadImage = F4(
	function (fsItem, filename, contents, sessionId) {
		var body = elm$http$Http$jsonBody(
			elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'filename',
						elm$json$Json$Encode$string(filename)),
						_Utils_Tuple2(
						'uploadPath',
						elm$json$Json$Encode$string(
							A2(
								elm$core$Maybe$withDefault,
								'',
								A2(
									elm$core$Maybe$map,
									function (p) {
										return p + '/';
									},
									A2(
										elm$core$Maybe$map,
										elm$core$String$join('/'),
										elm$core$List$tail(
											author$project$FileExplorer$FileExplorer$getPath(fsItem))))))),
						_Utils_Tuple2(
						'contents',
						elm$json$Json$Encode$string(contents))
					])));
		return elm$http$Http$post(
			{
				body: body,
				expect: A2(
					elm$http$Http$expectJson,
					A3(
						author$project$FileExplorer$FileExplorer$RefreshFilesys,
						elm$core$Maybe$Just(fsItem),
						'Mise en ligne image base64: ' + filename,
						author$project$FileExplorer$FileExplorer$ImagesRoot),
					author$project$FileExplorer$FileExplorer$decodeFiles),
				url: 'uploadBase64Pic.php'
			});
	});
var author$project$FileExplorer$FileExplorer$zipDownFilesys = F2(
	function (p, filesys) {
		var _n0 = filesys.current;
		if (_n0.$ === 'File') {
			return elm$core$Maybe$Nothing;
		} else {
			if (!_n0.b.b) {
				return elm$core$Maybe$Nothing;
			} else {
				var meta = _n0.a;
				var cs = _n0.b;
				var _n1 = A2(author$project$FileExplorer$FileExplorer$break, p, cs);
				var l = _n1.a;
				var r = _n1.b;
				if (!r.b) {
					return elm$core$Maybe$Nothing;
				} else {
					var f = r.a;
					var fs = r.b;
					return elm$core$Maybe$Just(
						_Utils_update(
							filesys,
							{
								contexts: A2(
									elm$core$List$cons,
									{left: l, parent: meta, right: fs},
									filesys.contexts),
								current: f
							}));
				}
			}
		}
	});
var author$project$FileExplorer$FileExplorer$zipToFsItem = F2(
	function (path, filesys) {
		var helper = F2(
			function (remainingPath, filesys_) {
				if (!remainingPath.b) {
					return elm$core$Maybe$Nothing;
				} else {
					if (!remainingPath.b.b) {
						var curr = remainingPath.a;
						return (!_Utils_eq(
							author$project$FileExplorer$FileExplorer$getName(
								author$project$FileExplorer$FileExplorer$extractFsItem(filesys_)),
							curr)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(filesys_);
					} else {
						var curr = remainingPath.a;
						var _n1 = remainingPath.b;
						var next = _n1.a;
						var rest = _n1.b;
						return (!_Utils_eq(
							author$project$FileExplorer$FileExplorer$getName(
								author$project$FileExplorer$FileExplorer$extractFsItem(filesys_)),
							curr)) ? elm$core$Maybe$Nothing : A2(
							elm$core$Maybe$andThen,
							helper(
								A2(elm$core$List$cons, next, rest)),
							A2(
								author$project$FileExplorer$FileExplorer$zipDownFilesys,
								function (fsItem) {
									return _Utils_eq(
										author$project$FileExplorer$FileExplorer$getName(fsItem),
										next);
								},
								filesys_));
					}
				}
			});
		return A2(helper, path, filesys);
	});
var author$project$Internals$ToolHelpers$ToolLoadingFailure = function (a) {
	return {$: 'ToolLoadingFailure', a: a};
};
var author$project$Internals$ToolHelpers$ToolLoadingSuccess = {$: 'ToolLoadingSuccess'};
var elm$core$Basics$modBy = _Basics_modBy;
var elm$core$Basics$round = _Basics_round;
var elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			elm$core$List$any,
			A2(elm$core$Basics$composeL, elm$core$Basics$not, isOkay),
			list);
	});
var elm_community$list_extra$List$Extra$remove = F2(
	function (x, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var y = xs.a;
			var ys = xs.b;
			return _Utils_eq(x, y) ? ys : A2(
				elm$core$List$cons,
				y,
				A2(elm_community$list_extra$List$Extra$remove, x, ys));
		}
	});
var author$project$FileExplorer$FileExplorer$internalUpdate = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 'GoHome':
				var mode = msg.a;
				var newModel = _Utils_update(
					model,
					{
						lastLocation: A2(
							elm$core$Maybe$map,
							author$project$FileExplorer$FileExplorer$extractFsItem,
							A2(author$project$FileExplorer$FileExplorer$getCurrentFilesys, mode, model)),
						selectedFsItem: elm$core$Maybe$Nothing
					});
				var f = function (mbFs) {
					var _n1 = A2(elm$core$Maybe$map, author$project$FileExplorer$FileExplorer$rewindFilesys, mbFs);
					if (_n1.$ === 'Nothing') {
						return mbFs;
					} else {
						var otherwise = _n1;
						return otherwise;
					}
				};
				return _Utils_Tuple3(
					A3(author$project$FileExplorer$FileExplorer$updateFilesys, mode, newModel, f),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'GoNext':
				var mode = msg.a;
				var _n2 = model.lastLocation;
				if (_n2.$ === 'Nothing') {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				} else {
					var fsItem = _n2.a;
					var newModel = _Utils_update(
						model,
						{lastLocation: elm$core$Maybe$Nothing, selectedFsItem: elm$core$Maybe$Nothing});
					var f = function (mbFs) {
						return A2(
							elm$core$Maybe$withDefault,
							mbFs,
							A2(
								elm$core$Maybe$map,
								author$project$FileExplorer$FileExplorer$zipToFsItem(
									author$project$FileExplorer$FileExplorer$getPath(fsItem)),
								A2(elm$core$Maybe$map, author$project$FileExplorer$FileExplorer$rewindFilesys, mbFs)));
					};
					return _Utils_Tuple3(
						A3(author$project$FileExplorer$FileExplorer$updateFilesys, mode, newModel, f),
						elm$core$Platform$Cmd$none,
						elm$core$Maybe$Nothing);
				}
			case 'GoPrev':
				var mode = msg.a;
				var newModel = _Utils_update(
					model,
					{
						lastLocation: A2(
							elm$core$Maybe$map,
							author$project$FileExplorer$FileExplorer$extractFsItem,
							A2(author$project$FileExplorer$FileExplorer$getCurrentFilesys, mode, model)),
						selectedFsItem: elm$core$Maybe$Nothing
					});
				var f = function (mbFs) {
					var _n3 = A2(elm$core$Maybe$andThen, author$project$FileExplorer$FileExplorer$zipUpFilesys, mbFs);
					if (_n3.$ === 'Nothing') {
						return mbFs;
					} else {
						var otherwise = _n3;
						return otherwise;
					}
				};
				return _Utils_Tuple3(
					A3(author$project$FileExplorer$FileExplorer$updateFilesys, mode, newModel, f),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'GoTo':
				var mode = msg.a;
				var path = msg.b;
				var newModel = _Utils_update(
					model,
					{
						lastLocation: A2(
							elm$core$Maybe$map,
							author$project$FileExplorer$FileExplorer$extractFsItem,
							A2(author$project$FileExplorer$FileExplorer$getCurrentFilesys, mode, model)),
						selectedFsItem: elm$core$Maybe$Nothing
					});
				var f = function (mbFs) {
					return A2(
						elm$core$Maybe$withDefault,
						mbFs,
						A2(
							elm$core$Maybe$map,
							author$project$FileExplorer$FileExplorer$zipToFsItem(path),
							A2(elm$core$Maybe$map, author$project$FileExplorer$FileExplorer$rewindFilesys, mbFs)));
				};
				return _Utils_Tuple3(
					A3(author$project$FileExplorer$FileExplorer$updateFilesys, mode, newModel, f),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'SelectFsItem':
				var mode = msg.a;
				var fsItem = msg.b;
				if (_Utils_eq(
					model.selectedFsItem,
					elm$core$Maybe$Just(fsItem))) {
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{newFolderNameBuffer: '', renameBuffer: '', selectedFsItem: elm$core$Maybe$Nothing}),
						elm$core$Platform$Cmd$none,
						elm$core$Maybe$Nothing);
				} else {
					var _n4 = A2(
						elm$core$Maybe$map,
						author$project$FileExplorer$FileExplorer$extractFsItem,
						A2(author$project$FileExplorer$FileExplorer$getCurrentFilesys, mode, model));
					if ((_n4.$ === 'Just') && (_n4.a.$ === 'Folder')) {
						var _n5 = _n4.a;
						var meta = _n5.a;
						var children = _n5.b;
						return A2(elm$core$List$member, fsItem, children) ? _Utils_Tuple3(
							_Utils_update(
								model,
								{
									newFolderNameBuffer: '',
									renameBuffer: author$project$FileExplorer$FileExplorer$getName(fsItem),
									selectedFsItem: elm$core$Maybe$Just(fsItem)
								}),
							elm$core$Platform$Cmd$none,
							elm$core$Maybe$Nothing) : _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
					} else {
						return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
					}
				}
			case 'NewFolderInput':
				var s = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{newFolderNameBuffer: s}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'NewFolder':
				var mode = msg.a;
				var fsItem = msg.b;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							lockedFsItems: A2(elm$core$List$cons, fsItem, model.lockedFsItems),
							selectedFsItem: elm$core$Maybe$Nothing
						}),
					elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								author$project$Auth$AuthPlugin$cmdIfLogged,
								config.logInfo,
								A3(
									author$project$FileExplorer$FileExplorer$makeNewFolder,
									fsItem,
									model.newFolderNameBuffer,
									A2(author$project$FileExplorer$FileExplorer$modeRoot, mode, model.root))),
								A4(
								author$project$Internals$CommonHelpers$newLog,
								author$project$FileExplorer$FileExplorer$AddLog,
								'Requête: Nouveau dossier ' + (model.newFolderNameBuffer + (' dans ' + author$project$FileExplorer$FileExplorer$getName(fsItem))),
								elm$core$Maybe$Nothing,
								false)
							])),
					elm$core$Maybe$Nothing);
			case 'Delete':
				var mode = msg.a;
				var fsItem = msg.b;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							lockedFsItems: A2(elm$core$List$cons, fsItem, model.lockedFsItems),
							selectedFsItem: elm$core$Maybe$Nothing
						}),
					elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								author$project$Auth$AuthPlugin$cmdIfLogged,
								config.logInfo,
								A2(
									author$project$FileExplorer$FileExplorer$deleteFile,
									fsItem,
									A2(author$project$FileExplorer$FileExplorer$modeRoot, mode, model.root))),
								A4(
								author$project$Internals$CommonHelpers$newLog,
								author$project$FileExplorer$FileExplorer$AddLog,
								'Requête: Suppression ' + author$project$FileExplorer$FileExplorer$getName(fsItem),
								elm$core$Maybe$Nothing,
								false)
							])),
					elm$core$Maybe$Nothing);
			case 'Cut':
				var src = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							cutBuffer: elm$core$Maybe$Just(src),
							lockedFsItems: A2(elm$core$List$cons, src, model.lockedFsItems)
						}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'Paste':
				var mode = msg.a;
				var dest = msg.b;
				var _n6 = model.cutBuffer;
				if (_n6.$ === 'Nothing') {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				} else {
					var src = _n6.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{cutBuffer: elm$core$Maybe$Nothing}),
						elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A2(
									author$project$Auth$AuthPlugin$cmdIfLogged,
									config.logInfo,
									A3(
										author$project$FileExplorer$FileExplorer$pasteFile,
										src,
										dest,
										A2(author$project$FileExplorer$FileExplorer$modeRoot, mode, model.root))),
									A4(
									author$project$Internals$CommonHelpers$newLog,
									author$project$FileExplorer$FileExplorer$AddLog,
									'Requête: Collage de' + (author$project$FileExplorer$FileExplorer$getName(src) + (' dans ' + author$project$FileExplorer$FileExplorer$getName(dest))),
									elm$core$Maybe$Nothing,
									false)
								])),
						elm$core$Maybe$Nothing);
				}
			case 'RenameInput':
				var newName = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{renameBuffer: newName}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'Rename':
				var mode = msg.a;
				var fsItem = msg.b;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							lockedFsItems: A2(elm$core$List$cons, fsItem, model.lockedFsItems),
							selectedFsItem: elm$core$Maybe$Nothing
						}),
					elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								author$project$Auth$AuthPlugin$cmdIfLogged,
								config.logInfo,
								A3(
									author$project$FileExplorer$FileExplorer$renameFile,
									fsItem,
									model.renameBuffer,
									A2(author$project$FileExplorer$FileExplorer$modeRoot, mode, model.root))),
								A4(
								author$project$Internals$CommonHelpers$newLog,
								author$project$FileExplorer$FileExplorer$AddLog,
								'Requête: Renommage ' + author$project$FileExplorer$FileExplorer$getName(fsItem),
								elm$core$Maybe$Nothing,
								false)
							])),
					elm$core$Maybe$Nothing);
			case 'RefreshFilesys':
				var mbToUnlock = msg.a;
				var log = msg.b;
				var root = msg.c;
				var res = msg.d;
				if (res.$ === 'Ok') {
					var fs = res.a;
					var _n8 = function () {
						if (root.$ === 'ImagesRoot') {
							return _Utils_Tuple2(
								model.docFiles,
								elm$core$Maybe$Just(fs));
						} else {
							return _Utils_Tuple2(
								elm$core$Maybe$Just(fs),
								model.imageFiles);
						}
					}();
					var newDocFiles = _n8.a;
					var newImageFiles = _n8.b;
					var _n10 = function () {
						if (root.$ === 'ImagesRoot') {
							return _Utils_Tuple2(
								A2(
									elm$core$Maybe$map,
									author$project$FileExplorer$FileExplorer$initFileSys,
									A3(
										elm$core$List$foldr,
										F2(
											function (f, acc) {
												return A3(author$project$FileExplorer$FileExplorer$insert, f, 'images', acc);
											}),
										elm$core$Maybe$Nothing,
										fs)),
								A2(
									elm$core$Maybe$withDefault,
									_List_fromArray(
										['images']),
									A2(
										elm$core$Maybe$map,
										author$project$FileExplorer$FileExplorer$getPath,
										A2(elm$core$Maybe$map, author$project$FileExplorer$FileExplorer$extractFsItem, model.mbIFilesys))));
						} else {
							return _Utils_Tuple2(
								A2(
									elm$core$Maybe$map,
									author$project$FileExplorer$FileExplorer$initFileSys,
									A3(
										elm$core$List$foldr,
										F2(
											function (f, acc) {
												return A3(author$project$FileExplorer$FileExplorer$insert, f, 'baseDocumentaire', acc);
											}),
										elm$core$Maybe$Nothing,
										fs)),
								A2(
									elm$core$Maybe$withDefault,
									_List_fromArray(
										['baseDocumentaire']),
									A2(
										elm$core$Maybe$map,
										author$project$FileExplorer$FileExplorer$getPath,
										A2(elm$core$Maybe$map, author$project$FileExplorer$FileExplorer$extractFsItem, model.mbDFilesys))));
						}
					}();
					var newFilesys = _n10.a;
					var currentPath = _n10.b;
					var _n12 = function () {
						if (root.$ === 'ImagesRoot') {
							return _Utils_Tuple2(
								function () {
									var _n14 = A2(
										elm$core$Maybe$andThen,
										author$project$FileExplorer$FileExplorer$zipToFsItem(currentPath),
										newFilesys);
									if (_n14.$ === 'Just') {
										var result = _n14.a;
										return elm$core$Maybe$Just(result);
									} else {
										return newFilesys;
									}
								}(),
								model.mbDFilesys);
						} else {
							return _Utils_Tuple2(
								model.mbIFilesys,
								function () {
									var _n15 = A2(
										elm$core$Maybe$andThen,
										author$project$FileExplorer$FileExplorer$zipToFsItem(currentPath),
										newFilesys);
									if (_n15.$ === 'Just') {
										var result = _n15.a;
										return elm$core$Maybe$Just(result);
									} else {
										return newFilesys;
									}
								}());
						}
					}();
					var mbIFilesys = _n12.a;
					var mbDFilesys = _n12.b;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								docFiles: newDocFiles,
								imageFiles: newImageFiles,
								loadingStatus: function () {
									var _n16 = _Utils_Tuple2(newImageFiles, newDocFiles);
									if ((_n16.a.$ === 'Just') && (_n16.b.$ === 'Just')) {
										return author$project$Internals$ToolHelpers$ToolLoadingSuccess;
									} else {
										return model.loadingStatus;
									}
								}(),
								lockedFsItems: A2(
									elm$core$Maybe$withDefault,
									model.lockedFsItems,
									A2(
										elm$core$Maybe$map,
										function (f) {
											return A2(elm_community$list_extra$List$Extra$remove, f, model.lockedFsItems);
										},
										mbToUnlock)),
								mbDFilesys: mbDFilesys,
								mbIFilesys: mbIFilesys,
								root: root
							}),
						A4(author$project$Internals$CommonHelpers$newLog, author$project$FileExplorer$FileExplorer$AddLog, log, elm$core$Maybe$Nothing, false),
						elm$core$Maybe$Nothing);
				} else {
					var e = res.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								loadingStatus: _Utils_eq(model.loadingStatus, author$project$Internals$ToolHelpers$ToolLoadingWaiting) ? author$project$Internals$ToolHelpers$ToolLoadingFailure(
									author$project$Internals$CommonHelpers$httpErrorToString(e)) : model.loadingStatus,
								lockedFsItems: A2(
									elm$core$Maybe$withDefault,
									model.lockedFsItems,
									A2(
										elm$core$Maybe$map,
										function (f) {
											return A2(elm_community$list_extra$List$Extra$remove, f, model.lockedFsItems);
										},
										mbToUnlock))
							}),
						A4(
							author$project$Internals$CommonHelpers$newLog,
							author$project$FileExplorer$FileExplorer$AddLog,
							'Echec requête: ',
							elm$core$Maybe$Just(
								author$project$Internals$CommonHelpers$httpErrorToString(e)),
							true),
						elm$core$Maybe$Nothing);
				}
			case 'FilesToUpload':
				var mode = msg.a;
				var files = msg.b;
				var uploadDone = A2(
					elm$core$List$all,
					elm$core$Basics$identity,
					A2(
						elm$core$List$map,
						function ($) {
							return $.success;
						},
						files));
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							canUpload: true,
							filesToUpload: files,
							needToUpload: uploadDone ? false : model.needToUpload
						}),
					uploadDone ? A2(
						author$project$Auth$AuthPlugin$cmdIfLogged,
						config.logInfo,
						A2(
							author$project$FileExplorer$FileExplorer$getFileList,
							A2(author$project$FileExplorer$FileExplorer$modeRoot, mode, model.root),
							A2(
								elm$core$List$map,
								function ($) {
									return $.filename;
								},
								files))) : elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'UploadFiles':
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{needToUpload: true}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'ToogleUploadView':
				var mainPanelDisplay = function () {
					var _n17 = model.mainPanelDisplay;
					switch (_n17.$) {
						case 'UploadDisplay':
							return author$project$FileExplorer$FileExplorer$FilesysDisplay;
						case 'FilesysDisplay':
							return author$project$FileExplorer$FileExplorer$UploadDisplay;
						default:
							return author$project$FileExplorer$FileExplorer$FilesysDisplay;
					}
				}();
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{canUpload: false, mainPanelDisplay: mainPanelDisplay, needToUpload: false}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'SetImageUploadType':
				var ut = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{imageUploadType: ut}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'UploadImage':
				var fsItem = msg.a;
				var _n18 = model.mbImageFromFile;
				if (_n18.$ === 'Nothing') {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				} else {
					var filename = _n18.a.filename;
					var contents = _n18.a.contents;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{canResize: false, desiredFilename: elm$core$Maybe$Nothing, desiredHeight: elm$core$Maybe$Nothing, desiredRotationAngle: 0, desiredWidth: elm$core$Maybe$Nothing, imageControllerMode: author$project$FileExplorer$FileExplorer$FileReader, mainPanelDisplay: author$project$FileExplorer$FileExplorer$FilesysDisplay, mbImageFromFile: elm$core$Maybe$Nothing, mbOriFileSize: elm$core$Maybe$Nothing, mbOriImageHeight: elm$core$Maybe$Nothing, mbOriImageWidth: elm$core$Maybe$Nothing, needToResize: false, needToRotate: false, sliderValue: 100}),
						A2(
							author$project$Auth$AuthPlugin$cmdIfLogged,
							config.logInfo,
							A3(
								author$project$FileExplorer$FileExplorer$uploadImage,
								fsItem,
								A2(elm$core$Maybe$withDefault, filename, model.desiredFilename),
								contents)),
						elm$core$Maybe$Nothing);
				}
			case 'FileRead':
				var data = msg.a;
				var newImage = {contents: data.contents, filename: data.filename, filesize: data.filesize, height: data.height, width: data.width};
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							imageControllerMode: author$project$FileExplorer$FileExplorer$Editor,
							mbImageFromFile: elm$core$Maybe$Just(newImage),
							mbOriFileSize: elm$core$Maybe$Just(data.filesize),
							mbOriImageHeight: elm$core$Maybe$Just(data.height),
							mbOriImageWidth: elm$core$Maybe$Just(data.width),
							needToResize: false
						}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'ImageRead':
				var data = msg.a;
				var newImage = {contents: data.contents, filename: data.filename, filesize: data.filesize, height: data.height, width: data.width};
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							canResize: false,
							imageControllerMode: author$project$FileExplorer$FileExplorer$Editor,
							mbImageFromFile: elm$core$Maybe$Just(newImage),
							needToResize: false,
							needToRotate: false
						}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'UploadResult':
				if (msg.a.$ === 'Ok') {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				} else {
					var e = msg.a.a;
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				}
			case 'RotateRight':
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							desiredHeight: model.desiredWidth,
							desiredRotationAngle: A2(elm$core$Basics$modBy, 360, 90 + model.desiredRotationAngle),
							desiredWidth: model.desiredHeight,
							mbOriImageHeight: model.mbOriImageWidth,
							mbOriImageWidth: model.mbOriImageHeight,
							needToRotate: true
						}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'RotateLeft':
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							desiredHeight: model.desiredWidth,
							desiredRotationAngle: A2(elm$core$Basics$modBy, 360, model.desiredRotationAngle - 90),
							desiredWidth: model.desiredHeight,
							mbOriImageHeight: model.mbOriImageWidth,
							mbOriImageWidth: model.mbOriImageHeight,
							needToRotate: true
						}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'Resize':
				var n = msg.a;
				var _n19 = _Utils_Tuple2(model.mbOriImageWidth, model.mbOriImageHeight);
				if ((_n19.a.$ === 'Just') && (_n19.b.$ === 'Just')) {
					var oriW = _n19.a.a;
					var oriH = _n19.b.a;
					var ratio = oriW / oriH;
					var desiredWidth = (oriW * n) / 100;
					var desiredHeight = desiredWidth / ratio;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								canResize: true,
								desiredHeight: elm$core$Maybe$Just(
									elm$core$Basics$round(desiredHeight)),
								desiredWidth: elm$core$Maybe$Just(
									elm$core$Basics$round(desiredWidth)),
								sliderValue: n
							}),
						elm$core$Platform$Cmd$none,
						elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				}
			case 'SetResize':
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{needToResize: true}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'SetFilename':
				var filename = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							desiredFilename: elm$core$Maybe$Just(filename)
						}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'ResetImageController':
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{canResize: false, desiredHeight: elm$core$Maybe$Nothing, desiredRotationAngle: 0, desiredWidth: elm$core$Maybe$Nothing, imageControllerMode: author$project$FileExplorer$FileExplorer$FileReader, mbImageFromFile: elm$core$Maybe$Nothing, mbOriFileSize: elm$core$Maybe$Nothing, mbOriImageHeight: elm$core$Maybe$Nothing, mbOriImageWidth: elm$core$Maybe$Nothing, needToResize: false, needToRotate: false, sliderValue: 100}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'AddLog':
				var log = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							logs: A2(elm$core$List$cons, log, model.logs)
						}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'ToogleLogsView':
				var mainPanelDisplay = function () {
					var _n20 = model.mainPanelDisplay;
					switch (_n20.$) {
						case 'UploadDisplay':
							return author$project$FileExplorer$FileExplorer$UploadDisplay;
						case 'FilesysDisplay':
							return author$project$FileExplorer$FileExplorer$LogsDisplay;
						default:
							return author$project$FileExplorer$FileExplorer$FilesysDisplay;
					}
				}();
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{mainPanelDisplay: mainPanelDisplay}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'SetRoot':
				var root = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{root: root}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'Debug':
				var s = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{debug: s}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			default:
				return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
		}
	});
var author$project$FileExplorer$FileExplorer$update = F3(
	function (config, msg, model) {
		var _n0 = A3(author$project$FileExplorer$FileExplorer$internalUpdate, config, msg, model);
		var newModel = _n0.a;
		var cmds = _n0.b;
		var mbPluginAction = _n0.c;
		return _Utils_Tuple3(
			newModel,
			A2(elm$core$Platform$Cmd$map, model.externalMsg, cmds),
			mbPluginAction);
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetInitialSeed = function (a) {
	return {$: 'SetInitialSeed', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$LoadGeneralDirectory = function (a) {
	return {$: 'LoadGeneralDirectory', a: a};
};
var elm$core$String$concat = function (strings) {
	return A2(elm$core$String$join, '', strings);
};
var elm$core$String$cons = _String_cons;
var elm$core$String$fromChar = function (_char) {
	return A2(elm$core$String$cons, _char, '');
};
var elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3(elm$core$String$repeatHelp, n, chunk, '');
	});
var elm$core$String$padLeft = F3(
	function (n, _char, string) {
		return _Utils_ap(
			A2(
				elm$core$String$repeat,
				n - elm$core$String$length(string),
				elm$core$String$fromChar(_char)),
			string);
	});
var elm_community$string_extra$String$Extra$breaker = F3(
	function (width, string, acc) {
		breaker:
		while (true) {
			if (string === '') {
				return elm$core$List$reverse(acc);
			} else {
				var $temp$width = width,
					$temp$string = A2(elm$core$String$dropLeft, width, string),
					$temp$acc = A2(
					elm$core$List$cons,
					A3(elm$core$String$slice, 0, width, string),
					acc);
				width = $temp$width;
				string = $temp$string;
				acc = $temp$acc;
				continue breaker;
			}
		}
	});
var elm_community$string_extra$String$Extra$break = F2(
	function (width, string) {
		return ((!width) || (string === '')) ? _List_fromArray(
			[string]) : A3(elm_community$string_extra$String$Extra$breaker, width, string, _List_Nil);
	});
var elm$core$String$fromList = _String_fromList;
var rtfeldman$elm_hex$Hex$unsafeToDigit = function (num) {
	unsafeToDigit:
	while (true) {
		switch (num) {
			case 0:
				return _Utils_chr('0');
			case 1:
				return _Utils_chr('1');
			case 2:
				return _Utils_chr('2');
			case 3:
				return _Utils_chr('3');
			case 4:
				return _Utils_chr('4');
			case 5:
				return _Utils_chr('5');
			case 6:
				return _Utils_chr('6');
			case 7:
				return _Utils_chr('7');
			case 8:
				return _Utils_chr('8');
			case 9:
				return _Utils_chr('9');
			case 10:
				return _Utils_chr('a');
			case 11:
				return _Utils_chr('b');
			case 12:
				return _Utils_chr('c');
			case 13:
				return _Utils_chr('d');
			case 14:
				return _Utils_chr('e');
			case 15:
				return _Utils_chr('f');
			default:
				var $temp$num = num;
				num = $temp$num;
				continue unsafeToDigit;
		}
	}
};
var rtfeldman$elm_hex$Hex$unsafePositiveToDigits = F2(
	function (digits, num) {
		unsafePositiveToDigits:
		while (true) {
			if (num < 16) {
				return A2(
					elm$core$List$cons,
					rtfeldman$elm_hex$Hex$unsafeToDigit(num),
					digits);
			} else {
				var $temp$digits = A2(
					elm$core$List$cons,
					rtfeldman$elm_hex$Hex$unsafeToDigit(
						A2(elm$core$Basics$modBy, 16, num)),
					digits),
					$temp$num = (num / 16) | 0;
				digits = $temp$digits;
				num = $temp$num;
				continue unsafePositiveToDigits;
			}
		}
	});
var rtfeldman$elm_hex$Hex$toString = function (num) {
	return elm$core$String$fromList(
		(num < 0) ? A2(
			elm$core$List$cons,
			_Utils_chr('-'),
			A2(rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, -num)) : A2(rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, num));
};
var TSFoster$elm_uuid$UUID$canonical = function (_n0) {
	var bytes = _n0.a;
	var strings = A2(
		elm_community$string_extra$String$Extra$break,
		4,
		elm$core$String$concat(
			A2(
				elm$core$List$map,
				A2(
					elm$core$String$padLeft,
					2,
					_Utils_chr('0')),
				A2(elm$core$List$map, rtfeldman$elm_hex$Hex$toString, bytes))));
	if ((((((((strings.b && strings.b.b) && strings.b.b.b) && strings.b.b.b.b) && strings.b.b.b.b.b) && strings.b.b.b.b.b.b) && strings.b.b.b.b.b.b.b) && strings.b.b.b.b.b.b.b.b) && (!strings.b.b.b.b.b.b.b.b.b)) {
		var a = strings.a;
		var _n2 = strings.b;
		var b = _n2.a;
		var _n3 = _n2.b;
		var c = _n3.a;
		var _n4 = _n3.b;
		var d = _n4.a;
		var _n5 = _n4.b;
		var e = _n5.a;
		var _n6 = _n5.b;
		var f = _n6.a;
		var _n7 = _n6.b;
		var g = _n7.a;
		var _n8 = _n7.b;
		var h = _n8.a;
		return a + (b + ('-' + (c + ('-' + (d + ('-' + (e + ('-' + (f + (g + h))))))))));
	} else {
		return 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx';
	}
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$GenDirData = function (fiches) {
	return {fiches: fiches};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Fiche = function (uuid) {
	return function (categories) {
		return function (natureActiv) {
			return function (refOt) {
				return function (label) {
					return function (rank) {
						return function (nomEntite) {
							return function (responsables) {
								return function (adresse) {
									return function (telNumber) {
										return function (fax) {
											return function (email) {
												return function (site) {
													return function (pjaun) {
														return function (visuel) {
															return function (description) {
																return function (linkedDocs) {
																	return function (ouverture) {
																		return function (lastEdit) {
																			return {adresse: adresse, categories: categories, description: description, email: email, fax: fax, label: label, lastEdit: lastEdit, linkedDocs: linkedDocs, natureActiv: natureActiv, nomEntite: nomEntite, ouverture: ouverture, pjaun: pjaun, rank: rank, refOt: refOt, responsables: responsables, site: site, telNumber: telNumber, uuid: uuid, visuel: visuel};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Label = F3(
	function (nom, logo, lien) {
		return {lien: lien, logo: logo, nom: nom};
	});
var author$project$GeneralDirectoryEditor$GeneralDirJson$decodeLogo = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'height',
	elm$json$Json$Decode$int,
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'width',
		elm$json$Json$Decode$int,
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'url',
			elm$json$Json$Decode$string,
			elm$json$Json$Decode$succeed(
				F3(
					function (u, w, h) {
						return {height: h, url: u, width: w};
					})))));
var author$project$GeneralDirectoryEditor$GeneralDirJson$decodeLabel = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'lien',
	elm$json$Json$Decode$string,
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'logo',
		author$project$GeneralDirectoryEditor$GeneralDirJson$decodeLogo,
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'nom',
			elm$json$Json$Decode$string,
			elm$json$Json$Decode$succeed(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Label))));
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$LinkedDoc = F4(
	function (url, label, descr, expiryDate) {
		return {descr: descr, expiryDate: expiryDate, label: label, url: url};
	});
var author$project$GeneralDirectoryEditor$GeneralDirJson$decodeLinkedDoc = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'expiryDate',
	elm$json$Json$Decode$nullable(
		A2(elm$json$Json$Decode$map, elm$time$Time$millisToPosix, elm$json$Json$Decode$int)),
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'descr',
		elm$json$Json$Decode$nullable(elm$json$Json$Decode$string),
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'label',
			elm$json$Json$Decode$string,
			A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'url',
				elm$json$Json$Decode$string,
				elm$json$Json$Decode$succeed(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$LinkedDoc)))));
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Saisonniere = {$: 'Saisonniere'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TteAnnee = {$: 'TteAnnee'};
var author$project$GeneralDirectoryEditor$GeneralDirJson$decodeOuverture = A2(
	elm$json$Json$Decode$andThen,
	function (str) {
		switch (str) {
			case 'Saisonniere':
				return elm$json$Json$Decode$succeed(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Saisonniere);
			case 'TteAnnee':
				return elm$json$Json$Decode$succeed(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TteAnnee);
			default:
				var somethingElse = str;
				return elm$json$Json$Decode$fail('Unknown ouverture: ' + somethingElse);
		}
	},
	elm$json$Json$Decode$string);
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Rank = F2(
	function (stars, epis) {
		return {epis: epis, stars: stars};
	});
var author$project$GeneralDirectoryEditor$GeneralDirJson$decodeRank = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'epis',
	elm$json$Json$Decode$nullable(elm$json$Json$Decode$int),
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'stars',
		elm$json$Json$Decode$nullable(elm$json$Json$Decode$int),
		elm$json$Json$Decode$succeed(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Rank)));
var author$project$GeneralDirectoryEditor$GeneralDirJson$decodeRefOt = elm$json$Json$Decode$nullable(
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'link',
		elm$json$Json$Decode$string,
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'ref',
			elm$json$Json$Decode$int,
			elm$json$Json$Decode$succeed(elm$core$Tuple$pair))));
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Responsable = F3(
	function (poste, nom, tel) {
		return {nom: nom, poste: poste, tel: tel};
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth = function (a) {
	return {$: 'TelBoth', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelFixe = function (a) {
	return {$: 'TelFixe', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelPortable = function (a) {
	return {$: 'TelPortable', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirJson$decodeTel = elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'TelFixe',
			elm$json$Json$Decode$string,
			elm$json$Json$Decode$succeed(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelFixe)),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'TelPortable',
			elm$json$Json$Decode$string,
			elm$json$Json$Decode$succeed(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelPortable)),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'TelBoth',
			A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'TelPortable',
				elm$json$Json$Decode$string,
				A3(
					NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'TelFixe',
					elm$json$Json$Decode$string,
					elm$json$Json$Decode$succeed(elm$core$Tuple$pair))),
			elm$json$Json$Decode$succeed(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth))
		]));
var author$project$GeneralDirectoryEditor$GeneralDirJson$decodeResp = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'tel',
	author$project$GeneralDirectoryEditor$GeneralDirJson$decodeTel,
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'nom',
		elm$json$Json$Decode$string,
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'poste',
			elm$json$Json$Decode$string,
			elm$json$Json$Decode$succeed(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Responsable))));
var author$project$GeneralDirectoryEditor$GeneralDirJson$decodeSite = elm$json$Json$Decode$nullable(
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'url',
		elm$json$Json$Decode$string,
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'label',
			elm$json$Json$Decode$string,
			elm$json$Json$Decode$succeed(elm$core$Tuple$pair))));
var elm$core$Result$toMaybe = function (result) {
	if (result.$ === 'Ok') {
		var v = result.a;
		return elm$core$Maybe$Just(v);
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var elm$core$String$endsWith = _String_endsWith;
var elm$core$String$toLower = _String_toLower;
var elm$core$String$trim = _String_trim;
var elm_community$maybe_extra$Maybe$Extra$foldrValues = F2(
	function (item, list) {
		if (item.$ === 'Nothing') {
			return list;
		} else {
			var v = item.a;
			return A2(elm$core$List$cons, v, list);
		}
	});
var elm_community$maybe_extra$Maybe$Extra$values = A2(elm$core$List$foldr, elm_community$maybe_extra$Maybe$Extra$foldrValues, _List_Nil);
var elm$core$String$foldr = _String_foldr;
var elm$core$String$toList = function (string) {
	return A3(elm$core$String$foldr, elm$core$List$cons, _List_Nil, string);
};
var elm$core$Basics$pow = _Basics_pow;
var rtfeldman$elm_hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		fromStringHelp:
		while (true) {
			if (!chars.b) {
				return elm$core$Result$Ok(accumulated);
			} else {
				var _char = chars.a;
				var rest = chars.b;
				switch (_char.valueOf()) {
					case '0':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated;
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '1':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + A2(elm$core$Basics$pow, 16, position);
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '2':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (2 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '3':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (3 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '4':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (4 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '5':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (5 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '6':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (6 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '7':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (7 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '8':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (8 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '9':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (9 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'a':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (10 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'b':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (11 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'c':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (12 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'd':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (13 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'e':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (14 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'f':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (15 * A2(elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					default:
						var nonHex = _char;
						return elm$core$Result$Err(
							elm$core$String$fromChar(nonHex) + ' is not a valid hexadecimal character.');
				}
			}
		}
	});
var rtfeldman$elm_hex$Hex$fromString = function (str) {
	if (elm$core$String$isEmpty(str)) {
		return elm$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var result = function () {
			if (A2(elm$core$String$startsWith, '-', str)) {
				var list = A2(
					elm$core$Maybe$withDefault,
					_List_Nil,
					elm$core$List$tail(
						elm$core$String$toList(str)));
				return A2(
					elm$core$Result$map,
					elm$core$Basics$negate,
					A3(
						rtfeldman$elm_hex$Hex$fromStringHelp,
						elm$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					rtfeldman$elm_hex$Hex$fromStringHelp,
					elm$core$String$length(str) - 1,
					elm$core$String$toList(str),
					0);
			}
		}();
		var formatError = function (err) {
			return A2(
				elm$core$String$join,
				' ',
				_List_fromArray(
					['\"' + (str + '\"'), 'is not a valid hexadecimal string because', err]));
		};
		return A2(elm$core$Result$mapError, formatError, result);
	}
};
var TSFoster$elm_uuid$UUID$fromString = A2(
	elm$core$Basics$composeR,
	elm$core$String$toLower,
	A2(
		elm$core$Basics$composeR,
		elm$core$String$trim,
		A2(
			elm$core$Basics$composeR,
			A2(elm$core$String$replace, ' ', ''),
			A2(
				elm$core$Basics$composeR,
				A2(elm$core$String$replace, '-', ''),
				A2(
					elm$core$Basics$composeR,
					function (string) {
						return (A2(elm$core$String$startsWith, '{', string) && A2(elm$core$String$endsWith, '}', string)) ? A3(elm$core$String$slice, 1, -1, string) : string;
					},
					A2(
						elm$core$Basics$composeR,
						function (string) {
							return A2(elm$core$String$startsWith, 'urn:uuid:', string) ? A2(elm$core$String$dropLeft, 9, string) : string;
						},
						A2(
							elm$core$Basics$composeR,
							elm_community$string_extra$String$Extra$break(2),
							A2(
								elm$core$Basics$composeR,
								elm$core$List$map(
									A2(elm$core$Basics$composeR, rtfeldman$elm_hex$Hex$fromString, elm$core$Result$toMaybe)),
								function (ints) {
									return A2(
										elm$core$List$any,
										elm$core$Basics$eq(elm$core$Maybe$Nothing),
										ints) ? elm$core$Result$Err('UUID contained non-hexadecimal digits') : ((elm$core$List$length(ints) !== 16) ? elm$core$Result$Err('UUID was not correct length') : elm$core$Result$Ok(
										TSFoster$elm_uuid$UUID$UUID(
											elm_community$maybe_extra$Maybe$Extra$values(ints))));
								}))))))));
var elm_community$json_extra$Json$Decode$Extra$fromResult = function (result) {
	if (result.$ === 'Ok') {
		var successValue = result.a;
		return elm$json$Json$Decode$succeed(successValue);
	} else {
		var errorMessage = result.a;
		return elm$json$Json$Decode$fail(errorMessage);
	}
};
var author$project$GeneralDirectoryEditor$GeneralDirJson$decodeUUID = A2(
	elm$json$Json$Decode$andThen,
	A2(elm$core$Basics$composeL, elm_community$json_extra$Json$Decode$Extra$fromResult, TSFoster$elm_uuid$UUID$fromString),
	elm$json$Json$Decode$string);
var author$project$GeneralDirectoryEditor$GeneralDirJson$decodeFiche = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'lastEdit',
	A2(elm$json$Json$Decode$map, elm$time$Time$millisToPosix, elm$json$Json$Decode$int),
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'ouverture',
		elm$json$Json$Decode$nullable(author$project$GeneralDirectoryEditor$GeneralDirJson$decodeOuverture),
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'linkedDocs',
			elm$json$Json$Decode$list(author$project$GeneralDirectoryEditor$GeneralDirJson$decodeLinkedDoc),
			A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'description',
				elm$json$Json$Decode$list(elm$json$Json$Decode$string),
				A3(
					NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'visuel',
					elm$json$Json$Decode$string,
					A3(
						NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'pjaun',
						elm$json$Json$Decode$nullable(elm$json$Json$Decode$string),
						A3(
							NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'site',
							author$project$GeneralDirectoryEditor$GeneralDirJson$decodeSite,
							A3(
								NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
								'email',
								elm$json$Json$Decode$list(elm$json$Json$Decode$string),
								A3(
									NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
									'fax',
									elm$json$Json$Decode$nullable(elm$json$Json$Decode$string),
									A3(
										NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
										'telNumber',
										elm$json$Json$Decode$nullable(author$project$GeneralDirectoryEditor$GeneralDirJson$decodeTel),
										A3(
											NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
											'adresse',
											elm$json$Json$Decode$string,
											A3(
												NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
												'responsables',
												elm$json$Json$Decode$list(author$project$GeneralDirectoryEditor$GeneralDirJson$decodeResp),
												A3(
													NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
													'nomEntite',
													elm$json$Json$Decode$string,
													A3(
														NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
														'rank',
														author$project$GeneralDirectoryEditor$GeneralDirJson$decodeRank,
														A3(
															NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
															'label',
															elm$json$Json$Decode$list(author$project$GeneralDirectoryEditor$GeneralDirJson$decodeLabel),
															A3(
																NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
																'refOt',
																author$project$GeneralDirectoryEditor$GeneralDirJson$decodeRefOt,
																A3(
																	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
																	'natureActiv',
																	elm$json$Json$Decode$list(elm$json$Json$Decode$string),
																	A3(
																		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
																		'categories',
																		elm$json$Json$Decode$list(elm$json$Json$Decode$string),
																		A3(
																			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
																			'uuid',
																			author$project$GeneralDirectoryEditor$GeneralDirJson$decodeUUID,
																			elm$json$Json$Decode$succeed(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Fiche))))))))))))))))))));
var author$project$GeneralDirectoryEditor$GeneralDirJson$decodeGenDirData = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'fiches',
	A2(
		elm$json$Json$Decode$map,
		elm$core$Dict$fromList,
		A2(
			elm$json$Json$Decode$map,
			elm$core$List$map(
				function (f) {
					return _Utils_Tuple2(
						TSFoster$elm_uuid$UUID$canonical(f.uuid),
						f);
				}),
			elm$json$Json$Decode$list(author$project$GeneralDirectoryEditor$GeneralDirJson$decodeFiche))),
	elm$json$Json$Decode$succeed(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$GenDirData));
var author$project$GeneralDirectoryEditor$GeneralDirJson$getGeneralDirectory = function (sessionId) {
	var body = elm$http$Http$jsonBody(
		elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'sessionId',
					elm$json$Json$Encode$string(sessionId))
				])));
	return elm$http$Http$post(
		{
			body: body,
			expect: A2(elm$http$Http$expectJson, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$LoadGeneralDirectory, author$project$GeneralDirectoryEditor$GeneralDirJson$decodeGenDirData),
			url: 'getGeneralDirectory.php'
		});
};
var author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$load = F2(
	function (model, logInfo) {
		if (logInfo.$ === 'LoggedIn') {
			var sessionId = logInfo.a.sessionId;
			return A2(
				elm$core$Platform$Cmd$map,
				model.externalMsg,
				elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							author$project$GeneralDirectoryEditor$GeneralDirJson$getGeneralDirectory(sessionId),
							A2(elm$core$Task$perform, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetInitialSeed, elm$time$Time$now)
						])));
		} else {
			return elm$core$Platform$Cmd$none;
		}
	});
var AdrianRibao$elm_derberos_date$Derberos$Date$Core$monthToNumber1based = function (month) {
	switch (month.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var AdrianRibao$elm_derberos_date$Derberos$Date$Core$newDateRecord = F8(
	function (year, month, day, hour, minute, second, millis, zone) {
		return {day: day, hour: hour, millis: millis, minute: minute, month: month, second: second, year: year, zone: zone};
	});
var elm$time$Time$toHour = F2(
	function (zone, time) {
		return A2(
			elm$core$Basics$modBy,
			24,
			A2(
				elm$time$Time$flooredDiv,
				A2(elm$time$Time$toAdjustedMinutes, zone, time),
				60));
	});
var elm$time$Time$toMillis = F2(
	function (_n0, time) {
		return A2(
			elm$core$Basics$modBy,
			1000,
			elm$time$Time$posixToMillis(time));
	});
var elm$time$Time$toMinute = F2(
	function (zone, time) {
		return A2(
			elm$core$Basics$modBy,
			60,
			A2(elm$time$Time$toAdjustedMinutes, zone, time));
	});
var elm$time$Time$toSecond = F2(
	function (_n0, time) {
		return A2(
			elm$core$Basics$modBy,
			60,
			A2(
				elm$time$Time$flooredDiv,
				elm$time$Time$posixToMillis(time),
				1000));
	});
var elm$time$Time$toYear = F2(
	function (zone, time) {
		return elm$time$Time$toCivil(
			A2(elm$time$Time$toAdjustedMinutes, zone, time)).year;
	});
var AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilFromPosixWithTimezone = F2(
	function (tz, time) {
		var zeroOffset = A2(elm$time$Time$customZone, 0, _List_Nil);
		var year = A2(elm$time$Time$toYear, tz, time);
		var second = A2(elm$time$Time$toSecond, tz, time);
		var month = AdrianRibao$elm_derberos_date$Derberos$Date$Core$monthToNumber1based(
			A2(elm$time$Time$toMonth, tz, time));
		var minute = A2(elm$time$Time$toMinute, tz, time);
		var millis = A2(elm$time$Time$toMillis, tz, time);
		var hour = A2(elm$time$Time$toHour, tz, time);
		var day = A2(elm$time$Time$toDay, tz, time);
		return A8(AdrianRibao$elm_derberos_date$Derberos$Date$Core$newDateRecord, year, month, day, hour, minute, second, millis, zeroOffset);
	});
var AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilToPosixUnadjusted = function (dateRecord) {
	var y = dateRecord.year - ((dateRecord.month <= 2) ? 1 : 0);
	var time = ((((dateRecord.hour * 3600) * 1000) + ((dateRecord.minute * 60) * 1000)) + (dateRecord.second * 1000)) + dateRecord.millis;
	var mp = A2(elm$core$Basics$modBy, 12, dateRecord.month + 9);
	var era = elm$core$Basics$floor(y / 400);
	var yoe = y - (era * 400);
	var doy = (((((153 * mp) + 2) / 5) | 0) + dateRecord.day) - 1;
	var doe = (((yoe * 365) + ((yoe / 4) | 0)) - ((yoe / 100) | 0)) + doy;
	var days = ((era * 146097) + doe) - 719468;
	var resultInMilliseconds = (((days * 24) * 3600) * 1000) + time;
	return elm$time$Time$millisToPosix(resultInMilliseconds);
};
var AdrianRibao$elm_derberos_date$Derberos$Date$Core$getTzOffset = F2(
	function (zone, time) {
		var utcMillis = elm$time$Time$posixToMillis(time);
		var localMillis = elm$time$Time$posixToMillis(
			AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilToPosixUnadjusted(
				A2(AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilFromPosixWithTimezone, zone, time)));
		return ((localMillis - utcMillis) / 60000) | 0;
	});
var AdrianRibao$elm_derberos_date$Derberos$Date$Core$adjustMilliseconds = F2(
	function (zone, time) {
		var offset = A2(AdrianRibao$elm_derberos_date$Derberos$Date$Core$getTzOffset, zone, time);
		var millis = elm$time$Time$posixToMillis(time);
		return elm$time$Time$millisToPosix(millis - (offset * 60000));
	});
var AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilToPosix = function (dateRecord) {
	return A2(
		AdrianRibao$elm_derberos_date$Derberos$Date$Core$adjustMilliseconds,
		dateRecord.zone,
		AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilToPosixUnadjusted(dateRecord));
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FicheUpdated = F2(
	function (a, b) {
		return {$: 'FicheUpdated', a: a, b: b};
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLabel = A3(
	author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Label,
	'',
	{height: 0, url: '', width: 0},
	'');
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLinkedDoc = {descr: elm$core$Maybe$Nothing, expiryDate: elm$core$Maybe$Nothing, label: '', url: ''};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyTel = author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelFixe('');
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyResp = {nom: '', poste: '', tel: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyTel};
var elm$core$Dict$member = F2(
	function (key, dict) {
		var _n0 = A2(elm$core$Dict$get, key, dict);
		if (_n0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var elm$core$Set$member = F2(
	function (key, _n0) {
		var dict = _n0.a;
		return A2(elm$core$Dict$member, key, dict);
	});
var elm_community$list_extra$List$Extra$uniqueHelp = F4(
	function (f, existing, remaining, accumulator) {
		uniqueHelp:
		while (true) {
			if (!remaining.b) {
				return elm$core$List$reverse(accumulator);
			} else {
				var first = remaining.a;
				var rest = remaining.b;
				var computedFirst = f(first);
				if (A2(elm$core$Set$member, computedFirst, existing)) {
					var $temp$f = f,
						$temp$existing = existing,
						$temp$remaining = rest,
						$temp$accumulator = accumulator;
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				} else {
					var $temp$f = f,
						$temp$existing = A2(elm$core$Set$insert, computedFirst, existing),
						$temp$remaining = rest,
						$temp$accumulator = A2(elm$core$List$cons, first, accumulator);
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				}
			}
		}
	});
var elm_community$list_extra$List$Extra$uniqueBy = F2(
	function (f, list) {
		return A4(elm_community$list_extra$List$Extra$uniqueHelp, f, elm$core$Set$empty, list, _List_Nil);
	});
var author$project$GeneralDirectoryEditor$GeneralDirHelpers$appendLabel = F2(
	function (mbLabel, labelList) {
		return A2(
			elm$core$Maybe$withDefault,
			labelList,
			A2(
				elm$core$Maybe$map,
				function (l) {
					return A2(
						elm_community$list_extra$List$Extra$uniqueBy,
						function (l_) {
							return _Utils_ap(
								function ($) {
									return $.nom;
								}(l_),
								_Utils_ap(
									A2(
										elm$core$Basics$composeL,
										function ($) {
											return $.url;
										},
										function ($) {
											return $.logo;
										})(l_),
									function ($) {
										return $.lien;
									}(l_)));
						},
						A2(
							elm$core$List$append,
							labelList,
							_List_fromArray(
								[l])));
				},
				mbLabel));
	});
var elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3(elm$core$List$foldr, elm$json$Json$Decode$field, decoder, fields);
	});
var author$project$GeneralDirectoryEditor$GeneralDirJson$decodeSuccess = A2(
	elm$json$Json$Decode$at,
	_List_fromArray(
		['message']),
	elm$json$Json$Decode$succeed(true));
var elm$json$Json$Encode$int = _Json_wrap;
var author$project$GeneralDirectoryEditor$GeneralDirJson$encodeLabel = function (_n0) {
	var nom = _n0.nom;
	var logo = _n0.logo;
	var lien = _n0.lien;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'nom',
				elm$json$Json$Encode$string(nom)),
				_Utils_Tuple2(
				'logo',
				elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'url',
							elm$json$Json$Encode$string(logo.url)),
							_Utils_Tuple2(
							'width',
							elm$json$Json$Encode$int(logo.width)),
							_Utils_Tuple2(
							'height',
							elm$json$Json$Encode$int(logo.height))
						]))),
				_Utils_Tuple2(
				'lien',
				elm$json$Json$Encode$string(lien))
			]));
};
var author$project$GeneralDirectoryEditor$GeneralDirJson$encodeTel = function (tel) {
	switch (tel.$) {
		case 'TelFixe':
			var s = tel.a;
			return elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'TelFixe',
						elm$json$Json$Encode$string(s))
					]));
		case 'TelPortable':
			var s = tel.a;
			return elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'TelPortable',
						elm$json$Json$Encode$string(s))
					]));
		default:
			var _n1 = tel.a;
			var s1 = _n1.a;
			var s2 = _n1.b;
			return elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'TelBoth',
						elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'TelFixe',
									elm$json$Json$Encode$string(s1)),
									_Utils_Tuple2(
									'TelPortable',
									elm$json$Json$Encode$string(s2))
								])))
					]));
	}
};
var author$project$GeneralDirectoryEditor$GeneralDirJson$encodeFiche = function (f) {
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'uuid',
				elm$json$Json$Encode$string(
					TSFoster$elm_uuid$UUID$canonical(f.uuid))),
				_Utils_Tuple2(
				'categories',
				A2(elm$json$Json$Encode$list, elm$json$Json$Encode$string, f.categories)),
				_Utils_Tuple2(
				'natureActiv',
				A2(elm$json$Json$Encode$list, elm$json$Json$Encode$string, f.natureActiv)),
				_Utils_Tuple2(
				'refOt',
				A2(
					elm$core$Maybe$withDefault,
					elm$json$Json$Encode$null,
					A2(
						elm$core$Maybe$map,
						function (_n0) {
							var n = _n0.a;
							var s = _n0.b;
							return elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'ref',
										elm$json$Json$Encode$int(n)),
										_Utils_Tuple2(
										'link',
										elm$json$Json$Encode$string(s))
									]));
						},
						f.refOt))),
				_Utils_Tuple2(
				'label',
				A2(elm$json$Json$Encode$list, author$project$GeneralDirectoryEditor$GeneralDirJson$encodeLabel, f.label)),
				_Utils_Tuple2(
				'rank',
				elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'stars',
							A2(
								elm$core$Maybe$withDefault,
								elm$json$Json$Encode$null,
								A2(elm$core$Maybe$map, elm$json$Json$Encode$int, f.rank.stars))),
							_Utils_Tuple2(
							'epis',
							A2(
								elm$core$Maybe$withDefault,
								elm$json$Json$Encode$null,
								A2(elm$core$Maybe$map, elm$json$Json$Encode$int, f.rank.epis)))
						]))),
				_Utils_Tuple2(
				'nomEntite',
				elm$json$Json$Encode$string(f.nomEntite)),
				_Utils_Tuple2(
				'responsables',
				A2(
					elm$json$Json$Encode$list,
					function (r) {
						return elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'poste',
									elm$json$Json$Encode$string(r.poste)),
									_Utils_Tuple2(
									'nom',
									elm$json$Json$Encode$string(r.nom)),
									_Utils_Tuple2(
									'tel',
									author$project$GeneralDirectoryEditor$GeneralDirJson$encodeTel(r.tel))
								]));
					},
					f.responsables)),
				_Utils_Tuple2(
				'adresse',
				elm$json$Json$Encode$string(f.adresse)),
				_Utils_Tuple2(
				'telNumber',
				A2(
					elm$core$Maybe$withDefault,
					elm$json$Json$Encode$null,
					A2(elm$core$Maybe$map, author$project$GeneralDirectoryEditor$GeneralDirJson$encodeTel, f.telNumber))),
				_Utils_Tuple2(
				'fax',
				A2(
					elm$core$Maybe$withDefault,
					elm$json$Json$Encode$null,
					A2(elm$core$Maybe$map, elm$json$Json$Encode$string, f.fax))),
				_Utils_Tuple2(
				'email',
				A2(elm$json$Json$Encode$list, elm$json$Json$Encode$string, f.email)),
				_Utils_Tuple2(
				'site',
				A2(
					elm$core$Maybe$withDefault,
					elm$json$Json$Encode$null,
					A2(
						elm$core$Maybe$map,
						function (_n1) {
							var l = _n1.a;
							var url = _n1.b;
							return elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'label',
										elm$json$Json$Encode$string(l)),
										_Utils_Tuple2(
										'url',
										elm$json$Json$Encode$string(url))
									]));
						},
						f.site))),
				_Utils_Tuple2(
				'pjaun',
				A2(
					elm$core$Maybe$withDefault,
					elm$json$Json$Encode$null,
					A2(elm$core$Maybe$map, elm$json$Json$Encode$string, f.pjaun))),
				_Utils_Tuple2(
				'visuel',
				elm$json$Json$Encode$string(f.visuel)),
				_Utils_Tuple2(
				'description',
				A2(elm$json$Json$Encode$list, elm$json$Json$Encode$string, f.description)),
				_Utils_Tuple2(
				'linkedDocs',
				A2(
					elm$json$Json$Encode$list,
					function (ld) {
						return elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'url',
									elm$json$Json$Encode$string(ld.url)),
									_Utils_Tuple2(
									'label',
									elm$json$Json$Encode$string(ld.label)),
									_Utils_Tuple2(
									'descr',
									A2(
										elm$core$Maybe$withDefault,
										elm$json$Json$Encode$null,
										A2(elm$core$Maybe$map, elm$json$Json$Encode$string, ld.descr))),
									_Utils_Tuple2(
									'expiryDate',
									A2(
										elm$core$Maybe$withDefault,
										elm$json$Json$Encode$null,
										A2(
											elm$core$Maybe$map,
											A2(elm$core$Basics$composeL, elm$json$Json$Encode$int, elm$time$Time$posixToMillis),
											ld.expiryDate)))
								]));
					},
					f.linkedDocs)),
				_Utils_Tuple2(
				'ouverture',
				A2(
					elm$core$Maybe$withDefault,
					elm$json$Json$Encode$null,
					A2(
						elm$core$Maybe$map,
						function (o) {
							if (o.$ === 'TteAnnee') {
								return elm$json$Json$Encode$string('TteAnnee');
							} else {
								return elm$json$Json$Encode$string('Saisonniere');
							}
						},
						f.ouverture))),
				_Utils_Tuple2(
				'lastEdit',
				elm$json$Json$Encode$int(
					elm$time$Time$posixToMillis(f.lastEdit)))
			]));
};
var elm$http$Http$stringResolver = A2(_Http_expect, '', elm$core$Basics$identity);
var author$project$Internals$CommonHelpers$jsonResolver = function (decoder) {
	return elm$http$Http$stringResolver(
		function (response) {
			switch (response.$) {
				case 'BadUrl_':
					var url = response.a;
					return elm$core$Result$Err(
						elm$http$Http$BadUrl(url));
				case 'Timeout_':
					return elm$core$Result$Err(elm$http$Http$Timeout);
				case 'NetworkError_':
					return elm$core$Result$Err(elm$http$Http$NetworkError);
				case 'BadStatus_':
					var metadata = response.a;
					var body = response.b;
					return elm$core$Result$Err(
						elm$http$Http$BadStatus(metadata.statusCode));
				default:
					var metadata = response.a;
					var body = response.b;
					var _n1 = A2(elm$json$Json$Decode$decodeString, decoder, body);
					if (_n1.$ === 'Ok') {
						var value = _n1.a;
						return elm$core$Result$Ok(value);
					} else {
						var err = _n1.a;
						return elm$core$Result$Err(
							elm$http$Http$BadBody(
								elm$json$Json$Decode$errorToString(err)));
					}
			}
		});
};
var elm$core$Task$fail = _Scheduler_fail;
var elm$http$Http$resultToTask = function (result) {
	if (result.$ === 'Ok') {
		var a = result.a;
		return elm$core$Task$succeed(a);
	} else {
		var x = result.a;
		return elm$core$Task$fail(x);
	}
};
var elm$http$Http$task = function (r) {
	return A3(
		_Http_toTask,
		_Utils_Tuple0,
		elm$http$Http$resultToTask,
		{allowCookiesFromOtherDomains: false, body: r.body, expect: r.resolver, headers: r.headers, method: r.method, timeout: r.timeout, tracker: elm$core$Maybe$Nothing, url: r.url});
};
var author$project$GeneralDirectoryEditor$GeneralDirJson$updateFicheTask = F2(
	function (fiche, sessionId) {
		var body = elm$http$Http$jsonBody(
			elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'fiche',
						author$project$GeneralDirectoryEditor$GeneralDirJson$encodeFiche(fiche))
					])));
		return elm$http$Http$task(
			{
				body: body,
				headers: _List_Nil,
				method: 'Post',
				resolver: author$project$Internals$CommonHelpers$jsonResolver(author$project$GeneralDirectoryEditor$GeneralDirJson$decodeSuccess),
				timeout: elm$core$Maybe$Nothing,
				url: 'updateFiche.php'
			});
	});
var author$project$GeneralDirectoryEditor$GeneralDirHelpers$batchFichesUpdate = F2(
	function (logInfo, fichesToUpdate) {
		if (logInfo.$ === 'LoggedIn') {
			var sessionId = logInfo.a.sessionId;
			return elm$core$Platform$Cmd$batch(
				A2(
					elm$core$List$map,
					function (f) {
						return A2(
							elm$core$Task$attempt,
							author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FicheUpdated(f),
							A2(
								elm$core$Task$andThen,
								function (t) {
									var datedFb = _Utils_update(
										f,
										{lastEdit: t});
									return A2(author$project$GeneralDirectoryEditor$GeneralDirJson$updateFicheTask, datedFb, sessionId);
								},
								elm$time$Time$now));
					},
					fichesToUpdate));
		} else {
			return elm$core$Platform$Cmd$none;
		}
	});
var author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeActivs = function (fiches) {
	return A3(
		elm$core$Dict$foldr,
		F3(
			function (_n0, f, acc) {
				return A3(
					elm$core$List$foldr,
					F2(
						function (a, acc_) {
							return A2(elm$core$Set$insert, a, acc_);
						}),
					acc,
					f.natureActiv);
			}),
		elm$core$Set$empty,
		fiches);
};
var author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeCats = function (fiches) {
	return A3(
		elm$core$Dict$foldr,
		F3(
			function (_n0, f, acc) {
				return A3(
					elm$core$List$foldr,
					F2(
						function (c, acc_) {
							return A2(elm$core$Set$insert, c, acc_);
						}),
					acc,
					f.categories);
			}),
		elm$core$Set$empty,
		fiches);
};
var author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeLabels = function (fiches) {
	return A2(
		elm_community$list_extra$List$Extra$uniqueBy,
		function (_n1) {
			var nom = _n1.nom;
			var logo = _n1.logo;
			var lien = _n1.lien;
			return _Utils_ap(
				nom,
				_Utils_ap(logo.url, lien));
		},
		A3(
			elm$core$Dict$foldr,
			F3(
				function (_n0, f, acc) {
					return A3(
						elm$core$List$foldr,
						F2(
							function (l, acc_) {
								return A2(elm$core$List$cons, l, acc_);
							}),
						acc,
						f.label);
				}),
			_List_Nil,
			fiches));
};
var author$project$GeneralDirectoryEditor$GeneralDirHelpers$extractLabel = F2(
	function (model, mbLabelName) {
		return A2(
			elm$core$Maybe$andThen,
			function (l) {
				return A2(
					elm$core$Dict$get,
					l,
					elm$core$Dict$fromList(
						A2(
							elm$core$List$map,
							function (l_) {
								return _Utils_Tuple2(l_.nom, l_);
							},
							model.labels)));
			},
			mbLabelName);
	});
var elm_community$list_extra$List$Extra$updateIf = F3(
	function (predicate, update, list) {
		return A2(
			elm$core$List$map,
			function (item) {
				return predicate(item) ? update(item) : item;
			},
			list);
	});
var elm_community$list_extra$List$Extra$setIf = F3(
	function (predicate, replacement, list) {
		return A3(
			elm_community$list_extra$List$Extra$updateIf,
			predicate,
			elm$core$Basics$always(replacement),
			list);
	});
var author$project$GeneralDirectoryEditor$GeneralDirHelpers$filterAndUpdate = F5(
	function (model, getter, setter, original, _new) {
		return A3(
			elm$core$Dict$foldr,
			F3(
				function (k, f, _n0) {
					var newDict = _n0.a;
					var toUpdate = _n0.b;
					if (A2(
						elm$core$List$member,
						original,
						getter(f))) {
						var newVal = A3(
							elm_community$list_extra$List$Extra$setIf,
							function (l) {
								return _Utils_eq(l, original);
							},
							_new,
							getter(f));
						var newFiche = A2(setter, f, newVal);
						return _Utils_Tuple2(
							A3(elm$core$Dict$insert, k, newFiche, newDict),
							A2(elm$core$List$cons, newFiche, toUpdate));
					} else {
						return _Utils_Tuple2(
							A3(elm$core$Dict$insert, k, f, newDict),
							toUpdate);
					}
				}),
			_Utils_Tuple2(elm$core$Dict$empty, _List_Nil),
			model.fiches);
	});
var author$project$GeneralDirectoryEditor$GeneralDirHelpers$setFicheActiv = F2(
	function (fiche, val) {
		return _Utils_update(
			fiche,
			{natureActiv: val});
	});
var author$project$GeneralDirectoryEditor$GeneralDirHelpers$setFicheCat = F2(
	function (fiche, val) {
		return _Utils_update(
			fiche,
			{categories: val});
	});
var author$project$GeneralDirectoryEditor$GeneralDirHelpers$setFicheLabel = F2(
	function (fiche, val) {
		return _Utils_update(
			fiche,
			{label: val});
	});
var author$project$GeneralDirectoryEditor$GeneralDirHelpers$validLabel = function (_n0) {
	var nom = _n0.nom;
	var logo = _n0.logo;
	var lien = _n0.lien;
	return (nom !== '') && ((logo.url !== '') && (lien !== ''));
};
var author$project$GeneralDirectoryEditor$GeneralDirHelpers$validLinkedDoc = function (_n0) {
	var url = _n0.url;
	var label = _n0.label;
	return (url !== '') && (label !== '');
};
var author$project$GeneralDirectoryEditor$GeneralDirJson$removeFiche = F2(
	function (fiche, sessionId) {
		var body = elm$http$Http$jsonBody(
			elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'uuid',
						elm$json$Json$Encode$string(
							TSFoster$elm_uuid$UUID$canonical(fiche.uuid)))
					])));
		return elm$http$Http$post(
			{
				body: body,
				expect: A2(
					elm$http$Http$expectJson,
					author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FicheUpdated(fiche),
					author$project$GeneralDirectoryEditor$GeneralDirJson$decodeSuccess),
				url: 'removeFiche.php'
			});
	});
var author$project$Internals$CommonHelpers$parseDate = F3(
	function (currentTime, zone, s) {
		var _n0 = A2(
			elm$core$List$filterMap,
			elm$core$String$toInt,
			A2(elm$core$String$split, '/', s));
		if (((_n0.b && _n0.b.b) && _n0.b.b.b) && (!_n0.b.b.b.b)) {
			var day = _n0.a;
			var _n1 = _n0.b;
			var month = _n1.a;
			var _n2 = _n1.b;
			var year = _n2.a;
			var choosenTime = AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilToPosix(
				A8(AdrianRibao$elm_derberos_date$Derberos$Date$Core$newDateRecord, year, month, day, 0, 0, 0, 0, elm$time$Time$utc));
			return (_Utils_cmp(
				elm$time$Time$posixToMillis(currentTime),
				elm$time$Time$posixToMillis(choosenTime)) > 0) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(
				_Utils_Tuple3(day, month, year));
		} else {
			return elm$core$Maybe$Nothing;
		}
	});
var elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2(elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return elm$core$Maybe$Just(x);
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var elm$core$Tuple$mapFirst = F2(
	function (func, _n0) {
		var x = _n0.a;
		var y = _n0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var elm$core$Tuple$mapSecond = F2(
	function (func, _n0) {
		var x = _n0.a;
		var y = _n0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var elm_community$list_extra$List$Extra$findIndexHelp = F3(
	function (index, predicate, list) {
		findIndexHelp:
		while (true) {
			if (!list.b) {
				return elm$core$Maybe$Nothing;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					return elm$core$Maybe$Just(index);
				} else {
					var $temp$index = index + 1,
						$temp$predicate = predicate,
						$temp$list = xs;
					index = $temp$index;
					predicate = $temp$predicate;
					list = $temp$list;
					continue findIndexHelp;
				}
			}
		}
	});
var elm_community$list_extra$List$Extra$findIndex = elm_community$list_extra$List$Extra$findIndexHelp(0);
var elm_community$list_extra$List$Extra$elemIndex = function (x) {
	return elm_community$list_extra$List$Extra$findIndex(
		elm$core$Basics$eq(x));
};
var elm_community$list_extra$List$Extra$splitAt = F2(
	function (n, xs) {
		return _Utils_Tuple2(
			A2(elm$core$List$take, n, xs),
			A2(elm$core$List$drop, n, xs));
	});
var elm_community$list_extra$List$Extra$uncons = function (list) {
	if (!list.b) {
		return elm$core$Maybe$Nothing;
	} else {
		var first = list.a;
		var rest = list.b;
		return elm$core$Maybe$Just(
			_Utils_Tuple2(first, rest));
	}
};
var elm_community$list_extra$List$Extra$swapAt = F3(
	function (index1, index2, l) {
		swapAt:
		while (true) {
			if (_Utils_eq(index1, index2) || (index1 < 0)) {
				return l;
			} else {
				if (_Utils_cmp(index1, index2) > 0) {
					var $temp$index1 = index2,
						$temp$index2 = index1,
						$temp$l = l;
					index1 = $temp$index1;
					index2 = $temp$index2;
					l = $temp$l;
					continue swapAt;
				} else {
					var _n0 = A2(elm_community$list_extra$List$Extra$splitAt, index1, l);
					var part1 = _n0.a;
					var tail1 = _n0.b;
					var _n1 = A2(elm_community$list_extra$List$Extra$splitAt, index2 - index1, tail1);
					var head2 = _n1.a;
					var tail2 = _n1.b;
					var _n2 = _Utils_Tuple2(
						elm_community$list_extra$List$Extra$uncons(head2),
						elm_community$list_extra$List$Extra$uncons(tail2));
					if ((_n2.a.$ === 'Just') && (_n2.b.$ === 'Just')) {
						var _n3 = _n2.a.a;
						var value1 = _n3.a;
						var part2 = _n3.b;
						var _n4 = _n2.b.a;
						var value2 = _n4.a;
						var part3 = _n4.b;
						return elm$core$List$concat(
							_List_fromArray(
								[
									part1,
									A2(elm$core$List$cons, value2, part2),
									A2(elm$core$List$cons, value1, part3)
								]));
					} else {
						return l;
					}
				}
			}
		}
	});
var author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$internalUpdate = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 'FilterByName':
				var nom = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							nameFilter: elm$core$Maybe$Just(nom)
						}),
					elm$core$Platform$Cmd$none);
			case 'FilterByCat':
				var cat = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							catFilter: _Utils_eq(
								model.catFilter,
								elm$core$Maybe$Just(cat)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(cat)
						}),
					elm$core$Platform$Cmd$none);
			case 'FilterByActiv':
				var activ = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							activFilter: _Utils_eq(
								model.activFilter,
								elm$core$Maybe$Just(activ)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(activ)
						}),
					elm$core$Platform$Cmd$none);
			case 'FilterByLabel':
				var label = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							labelFilter: _Utils_eq(
								model.labelFilter,
								elm$core$Maybe$Just(label)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(label)
						}),
					elm$core$Platform$Cmd$none);
			case 'SelectFiche':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							ficheBuffer: _Utils_eq(
								model.selectedFiche,
								elm$core$Maybe$Just(s)) ? author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyFiche : A2(
								elm$core$Maybe$withDefault,
								author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyFiche,
								A2(elm$core$Dict$get, s, model.fiches)),
							selectedFiche: _Utils_eq(
								model.selectedFiche,
								elm$core$Maybe$Just(s)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(s)
						}),
					elm$core$Platform$Cmd$none);
			case 'LoadGeneralDirectory':
				var res = msg.a;
				if (res.$ === 'Ok') {
					var fiches = res.a.fiches;
					var labels = author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeLabels(fiches);
					var categories = author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeCats(fiches);
					var activites = author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeActivs(fiches);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{activites: activites, categories: categories, fiches: fiches, labels: labels, loadingStatus: author$project$Internals$ToolHelpers$ToolLoadingSuccess}),
						elm$core$Platform$Cmd$none);
				} else {
					var e = res.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								debug: _List_Nil,
								loadingStatus: author$project$Internals$ToolHelpers$ToolLoadingFailure('')
							}),
						elm$core$Platform$Cmd$none);
				}
			case 'FicheUpdated':
				var fiche = msg.a;
				var res = msg.b;
				if ((res.$ === 'Ok') && res.a) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								activites: author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeActivs(model.fiches),
								categories: author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeCats(model.fiches),
								labels: author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeLabels(model.fiches),
								lockedFiches: A2(elm_community$list_extra$List$Extra$remove, fiche, model.lockedFiches)
							}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								debug: A2(elm$core$List$cons, fiche.nomEntite, model.debug),
								fiches: A3(
									elm$core$Dict$insert,
									TSFoster$elm_uuid$UUID$canonical(fiche.uuid),
									fiche,
									model.fiches),
								lockedFiches: A2(elm_community$list_extra$List$Extra$remove, fiche, model.lockedFiches)
							}),
						elm$core$Platform$Cmd$none);
				}
			case 'SelectCatInFiche':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							catBuffer: elm$core$Maybe$Nothing,
							selectedAvailableCat: elm$core$Maybe$Nothing,
							selectedCatInFiche: _Utils_eq(
								model.selectedCatInFiche,
								elm$core$Maybe$Just(s)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(s)
						}),
					elm$core$Platform$Cmd$none);
			case 'SelectAvailableCat':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							catBuffer: _Utils_eq(
								model.selectedAvailableCat,
								elm$core$Maybe$Just(s)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(s),
							selectedAvailableCat: _Utils_eq(
								model.selectedAvailableCat,
								elm$core$Maybe$Just(s)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(s),
							selectedCatInFiche: elm$core$Maybe$Nothing
						}),
					elm$core$Platform$Cmd$none);
			case 'SetCategorie':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							catBuffer: elm$core$Maybe$Just(s)
						}),
					elm$core$Platform$Cmd$none);
			case 'ModifyCat':
				var _n3 = _Utils_Tuple2(model.selectedAvailableCat, model.catBuffer);
				if ((_n3.a.$ === 'Just') && (_n3.b.$ === 'Just')) {
					var avCat = _n3.a.a;
					var newCat = _n3.b.a;
					if (_Utils_eq(avCat, newCat)) {
						return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
					} else {
						var fb = model.ficheBuffer;
						var newFb = _Utils_update(
							fb,
							{
								categories: A3(
									elm_community$list_extra$List$Extra$setIf,
									function (c) {
										return _Utils_eq(c, avCat);
									},
									newCat,
									fb.categories)
							});
						var _n4 = A5(
							author$project$GeneralDirectoryEditor$GeneralDirHelpers$filterAndUpdate,
							model,
							function ($) {
								return $.categories;
							},
							author$project$GeneralDirectoryEditor$GeneralDirHelpers$setFicheCat,
							avCat,
							newCat);
						var newFiches = _n4.a;
						var fichesToUpdate = _n4.b;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									catBuffer: elm$core$Maybe$Nothing,
									categories: author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeCats(newFiches),
									ficheBuffer: newFb,
									fiches: newFiches,
									lockedFiches: _Utils_ap(model.lockedFiches, fichesToUpdate),
									selectedAvailableCat: elm$core$Maybe$Nothing,
									selectedCatInFiche: elm$core$Maybe$Nothing
								}),
							A2(author$project$GeneralDirectoryEditor$GeneralDirHelpers$batchFichesUpdate, config.logInfo, fichesToUpdate));
					}
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'AddCatToFiche':
				var _n5 = _Utils_Tuple2(model.selectedAvailableCat, model.catBuffer);
				_n5$2:
				while (true) {
					if (_n5.a.$ === 'Just') {
						if (_n5.b.$ === 'Just') {
							var avCat = _n5.a.a;
							var newCat = _n5.b.a;
							if (_Utils_eq(avCat, newCat)) {
								var newCatsFiche = _Utils_ap(
									model.ficheBuffer.categories,
									_List_fromArray(
										[newCat]));
								var fb = model.ficheBuffer;
								var newFb = _Utils_update(
									fb,
									{categories: newCatsFiche});
								return _Utils_Tuple2(
									_Utils_update(
										model,
										{catBuffer: elm$core$Maybe$Nothing, ficheBuffer: newFb, selectedAvailableCat: elm$core$Maybe$Nothing}),
									elm$core$Platform$Cmd$none);
							} else {
								return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
							}
						} else {
							break _n5$2;
						}
					} else {
						if (_n5.b.$ === 'Just') {
							var _n6 = _n5.a;
							var newCat = _n5.b.a;
							var newCatsFiche = _Utils_ap(
								model.ficheBuffer.categories,
								_List_fromArray(
									[newCat]));
							var newCats = A2(elm$core$Set$insert, newCat, model.categories);
							var fb = model.ficheBuffer;
							var newFb = _Utils_update(
								fb,
								{categories: newCatsFiche});
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{catBuffer: elm$core$Maybe$Nothing, categories: newCats, ficheBuffer: newFb}),
								elm$core$Platform$Cmd$none);
						} else {
							break _n5$2;
						}
					}
				}
				return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
			case 'RemoveCatFromFiche':
				var fb = model.ficheBuffer;
				var newCats = A2(
					elm$core$Maybe$withDefault,
					fb.categories,
					A2(
						elm$core$Maybe$map,
						function (c) {
							return A2(elm_community$list_extra$List$Extra$remove, c, fb.categories);
						},
						model.selectedCatInFiche));
				var newFb = _Utils_update(
					fb,
					{categories: newCats});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{catBuffer: elm$core$Maybe$Nothing, ficheBuffer: newFb, selectedAvailableCat: elm$core$Maybe$Nothing, selectedCatInFiche: elm$core$Maybe$Nothing}),
					elm$core$Platform$Cmd$none);
			case 'SelectActivInFiche':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							activBuffer: elm$core$Maybe$Nothing,
							selectedActivInFiche: _Utils_eq(
								model.selectedActivInFiche,
								elm$core$Maybe$Just(s)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(s),
							selectedAvailableActiv: elm$core$Maybe$Nothing
						}),
					elm$core$Platform$Cmd$none);
			case 'SelectAvailableActiv':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							activBuffer: _Utils_eq(
								model.selectedAvailableActiv,
								elm$core$Maybe$Just(s)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(s),
							selectedActivInFiche: elm$core$Maybe$Nothing,
							selectedAvailableActiv: _Utils_eq(
								model.selectedAvailableActiv,
								elm$core$Maybe$Just(s)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(s)
						}),
					elm$core$Platform$Cmd$none);
			case 'SetActivite':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							activBuffer: elm$core$Maybe$Just(s)
						}),
					elm$core$Platform$Cmd$none);
			case 'ModifyActiv':
				var _n7 = _Utils_Tuple2(model.selectedAvailableActiv, model.activBuffer);
				if ((_n7.a.$ === 'Just') && (_n7.b.$ === 'Just')) {
					var avActiv = _n7.a.a;
					var newActiv = _n7.b.a;
					if (_Utils_eq(avActiv, newActiv)) {
						return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
					} else {
						var fb = model.ficheBuffer;
						var newFb = _Utils_update(
							fb,
							{
								natureActiv: A3(
									elm_community$list_extra$List$Extra$setIf,
									function (c) {
										return _Utils_eq(c, avActiv);
									},
									newActiv,
									fb.natureActiv)
							});
						var _n8 = A5(
							author$project$GeneralDirectoryEditor$GeneralDirHelpers$filterAndUpdate,
							model,
							function ($) {
								return $.natureActiv;
							},
							author$project$GeneralDirectoryEditor$GeneralDirHelpers$setFicheActiv,
							avActiv,
							newActiv);
						var newFiches = _n8.a;
						var fichesToUpdate = _n8.b;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									activBuffer: elm$core$Maybe$Nothing,
									activites: author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeActivs(newFiches),
									ficheBuffer: newFb,
									fiches: newFiches,
									lockedFiches: _Utils_ap(model.lockedFiches, fichesToUpdate),
									selectedActivInFiche: elm$core$Maybe$Nothing,
									selectedAvailableActiv: elm$core$Maybe$Nothing
								}),
							A2(author$project$GeneralDirectoryEditor$GeneralDirHelpers$batchFichesUpdate, config.logInfo, fichesToUpdate));
					}
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'AddActivToFiche':
				var _n9 = _Utils_Tuple2(model.selectedAvailableActiv, model.activBuffer);
				_n9$2:
				while (true) {
					if (_n9.a.$ === 'Just') {
						if (_n9.b.$ === 'Just') {
							var avActiv = _n9.a.a;
							var newActiv = _n9.b.a;
							if (_Utils_eq(avActiv, newActiv)) {
								var newActivFiche = _Utils_ap(
									model.ficheBuffer.natureActiv,
									_List_fromArray(
										[newActiv]));
								var fb = model.ficheBuffer;
								var newFb = _Utils_update(
									fb,
									{natureActiv: newActivFiche});
								return _Utils_Tuple2(
									_Utils_update(
										model,
										{activBuffer: elm$core$Maybe$Nothing, ficheBuffer: newFb, selectedAvailableActiv: elm$core$Maybe$Nothing}),
									elm$core$Platform$Cmd$none);
							} else {
								return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
							}
						} else {
							break _n9$2;
						}
					} else {
						if (_n9.b.$ === 'Just') {
							var _n10 = _n9.a;
							var newActiv = _n9.b.a;
							var newActivs = A2(elm$core$Set$insert, newActiv, model.activites);
							var newActivFiche = _Utils_ap(
								model.ficheBuffer.natureActiv,
								_List_fromArray(
									[newActiv]));
							var fb = model.ficheBuffer;
							var newFb = _Utils_update(
								fb,
								{natureActiv: newActivFiche});
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{activBuffer: elm$core$Maybe$Nothing, activites: newActivs, ficheBuffer: newFb}),
								elm$core$Platform$Cmd$none);
						} else {
							break _n9$2;
						}
					}
				}
				return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
			case 'RemoveActivFromFiche':
				var fb = model.ficheBuffer;
				var newActivs = A2(
					elm$core$Maybe$withDefault,
					fb.categories,
					A2(
						elm$core$Maybe$map,
						function (a) {
							return A2(elm_community$list_extra$List$Extra$remove, a, fb.natureActiv);
						},
						model.selectedActivInFiche));
				var newFb = _Utils_update(
					fb,
					{natureActiv: newActivs});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{activBuffer: elm$core$Maybe$Nothing, ficheBuffer: newFb, selectedActivInFiche: elm$core$Maybe$Nothing, selectedAvailableActiv: elm$core$Maybe$Nothing}),
					elm$core$Platform$Cmd$none);
			case 'SelectLabelInFiche':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							labelBuffer: elm$core$Maybe$Nothing,
							selectedAvailableLabel: elm$core$Maybe$Nothing,
							selectedLabelInFiche: _Utils_eq(
								model.selectedLabelInFiche,
								elm$core$Maybe$Just(s)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(s)
						}),
					elm$core$Platform$Cmd$none);
			case 'SelectAvailableLabel':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							labelBuffer: _Utils_eq(
								model.selectedAvailableLabel,
								elm$core$Maybe$Just(s)) ? elm$core$Maybe$Nothing : elm$core$List$head(
								A2(
									elm$core$List$filter,
									function (l) {
										return _Utils_eq(l.nom, s);
									},
									model.labels)),
							selectedAvailableLabel: _Utils_eq(
								model.selectedAvailableLabel,
								elm$core$Maybe$Just(s)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(s),
							selectedLabelInFiche: elm$core$Maybe$Nothing
						}),
					elm$core$Platform$Cmd$none);
			case 'SetLabelName':
				var s = msg.a;
				var baseLabel = A2(elm$core$Maybe$withDefault, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLabel, model.labelBuffer);
				var newLabel = _Utils_update(
					baseLabel,
					{nom: s});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							labelBuffer: elm$core$Maybe$Just(newLabel)
						}),
					elm$core$Platform$Cmd$none);
			case 'SetLabelLink':
				var s = msg.a;
				var baseLabel = A2(elm$core$Maybe$withDefault, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLabel, model.labelBuffer);
				var newLabel = _Utils_update(
					baseLabel,
					{lien: s});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							labelBuffer: elm$core$Maybe$Just(newLabel)
						}),
					elm$core$Platform$Cmd$none);
			case 'SetLabelVisual':
				var pr = msg.a;
				if (pr.$ === 'PickedImage') {
					var url = pr.a.url;
					var width = pr.a.width;
					var height = pr.a.height;
					var baseLabel = A2(elm$core$Maybe$withDefault, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLabel, model.labelBuffer);
					var newLabel = _Utils_update(
						baseLabel,
						{
							logo: {height: height, url: url, width: width}
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								labelBuffer: elm$core$Maybe$Just(newLabel),
								labelVisualPickerOpen: false
							}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'AddLabelToFiche':
				var _n12 = _Utils_Tuple2(model.selectedAvailableLabel, model.labelBuffer);
				_n12$2:
				while (true) {
					if (_n12.a.$ === 'Just') {
						if (_n12.b.$ === 'Just') {
							var mbNewLabel = A2(author$project$GeneralDirectoryEditor$GeneralDirHelpers$extractLabel, model, model.selectedAvailableLabel);
							var newFicheLabels = A2(author$project$GeneralDirectoryEditor$GeneralDirHelpers$appendLabel, mbNewLabel, model.ficheBuffer.label);
							var newLabels = A2(author$project$GeneralDirectoryEditor$GeneralDirHelpers$appendLabel, mbNewLabel, model.labels);
							var fb = model.ficheBuffer;
							var newFb = _Utils_update(
								fb,
								{label: newFicheLabels});
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{ficheBuffer: newFb, labelBuffer: elm$core$Maybe$Nothing, labels: newLabels}),
								elm$core$Platform$Cmd$none);
						} else {
							break _n12$2;
						}
					} else {
						if (_n12.b.$ === 'Just') {
							var _n13 = _n12.a;
							var _n14 = _Utils_Tuple2(
								model.labelBuffer,
								A2(elm$core$Maybe$map, author$project$GeneralDirectoryEditor$GeneralDirHelpers$validLabel, model.labelBuffer));
							if (((_n14.a.$ === 'Just') && (_n14.b.$ === 'Just')) && _n14.b.a) {
								var newLabel = _n14.a.a;
								var fb = model.ficheBuffer;
								var newFb = _Utils_update(
									fb,
									{
										label: _Utils_ap(
											fb.label,
											_List_fromArray(
												[newLabel]))
									});
								return _Utils_Tuple2(
									_Utils_update(
										model,
										{
											ficheBuffer: newFb,
											labelBuffer: elm$core$Maybe$Nothing,
											labels: _Utils_ap(
												model.labels,
												_List_fromArray(
													[newLabel]))
										}),
									elm$core$Platform$Cmd$none);
							} else {
								return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
							}
						} else {
							break _n12$2;
						}
					}
				}
				return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
			case 'RemoveLabelFromFiche':
				var mbLabel = A2(author$project$GeneralDirectoryEditor$GeneralDirHelpers$extractLabel, model, model.selectedLabelInFiche);
				var fb = model.ficheBuffer;
				var newLabels = A2(
					elm$core$Maybe$withDefault,
					fb.label,
					A2(
						elm$core$Maybe$map,
						function (l) {
							return A2(elm_community$list_extra$List$Extra$remove, l, fb.label);
						},
						mbLabel));
				var newFb = _Utils_update(
					fb,
					{label: newLabels});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ficheBuffer: newFb, labelBuffer: elm$core$Maybe$Nothing, selectedAvailableLabel: elm$core$Maybe$Nothing, selectedLabelInFiche: elm$core$Maybe$Nothing}),
					elm$core$Platform$Cmd$none);
			case 'ModifyLabel':
				var _n15 = _Utils_Tuple2(
					A2(author$project$GeneralDirectoryEditor$GeneralDirHelpers$extractLabel, model, model.selectedAvailableLabel),
					model.labelBuffer);
				if ((_n15.a.$ === 'Just') && (_n15.b.$ === 'Just')) {
					var avLabel = _n15.a.a;
					var newLabel = _n15.b.a;
					if (_Utils_eq(avLabel, newLabel)) {
						return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
					} else {
						var fb = model.ficheBuffer;
						var newFb = _Utils_update(
							fb,
							{
								label: A3(
									elm_community$list_extra$List$Extra$setIf,
									function (l) {
										return _Utils_eq(l, avLabel);
									},
									newLabel,
									fb.label)
							});
						var _n16 = A5(
							author$project$GeneralDirectoryEditor$GeneralDirHelpers$filterAndUpdate,
							model,
							function ($) {
								return $.label;
							},
							author$project$GeneralDirectoryEditor$GeneralDirHelpers$setFicheLabel,
							avLabel,
							newLabel);
						var newFiches = _n16.a;
						var fichesToUpdate = _n16.b;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									ficheBuffer: newFb,
									fiches: newFiches,
									labelBuffer: elm$core$Maybe$Nothing,
									labels: author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeLabels(newFiches),
									lockedFiches: _Utils_ap(model.lockedFiches, fichesToUpdate),
									selectedAvailableLabel: elm$core$Maybe$Nothing,
									selectedLabelInFiche: elm$core$Maybe$Nothing
								}),
							A2(author$project$GeneralDirectoryEditor$GeneralDirHelpers$batchFichesUpdate, config.logInfo, fichesToUpdate));
					}
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'SetRefOtNbr':
				var s = msg.a;
				var fb = model.ficheBuffer;
				var baseRefOt = A2(
					elm$core$Maybe$withDefault,
					_Utils_Tuple2(0, ''),
					fb.refOt);
				var newRefOt = A2(
					elm$core$Maybe$andThen,
					function (n) {
						return elm$core$Maybe$Just(
							A2(
								elm$core$Tuple$mapFirst,
								elm$core$Basics$always(n),
								baseRefOt));
					},
					elm$core$String$toInt(s));
				var newFb = _Utils_update(
					fb,
					{refOt: newRefOt});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ficheBuffer: newFb}),
					elm$core$Platform$Cmd$none);
			case 'SetRefOtLink':
				var s = msg.a;
				var fb = model.ficheBuffer;
				var baseRefOt = A2(
					elm$core$Maybe$withDefault,
					_Utils_Tuple2(0, ''),
					fb.refOt);
				var newRefOt = elm$core$Maybe$Just(
					A2(
						elm$core$Tuple$mapSecond,
						elm$core$Basics$always(s),
						baseRefOt));
				var newFb = _Utils_update(
					fb,
					{refOt: newRefOt});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ficheBuffer: newFb}),
					elm$core$Platform$Cmd$none);
			case 'SetStars':
				var s = msg.a;
				var fb = model.ficheBuffer;
				var rank = fb.rank;
				var newRank = _Utils_update(
					rank,
					{
						stars: elm$core$String$toInt(s)
					});
				var newFb = _Utils_update(
					fb,
					{rank: newRank});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ficheBuffer: newFb}),
					elm$core$Platform$Cmd$none);
			case 'SetEpis':
				var s = msg.a;
				var fb = model.ficheBuffer;
				var rank = fb.rank;
				var newRank = _Utils_update(
					rank,
					{
						epis: elm$core$String$toInt(s)
					});
				var newFb = _Utils_update(
					fb,
					{rank: newRank});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ficheBuffer: newFb}),
					elm$core$Platform$Cmd$none);
			case 'SetNomEntite':
				var s = msg.a;
				var fb = model.ficheBuffer;
				var newFb = _Utils_update(
					fb,
					{nomEntite: s});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ficheBuffer: newFb}),
					elm$core$Platform$Cmd$none);
			case 'SelectRespInFiche':
				var r = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							respBuffer: _Utils_eq(
								model.selectedResp,
								elm$core$Maybe$Just(r)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(r),
							selectedResp: _Utils_eq(
								model.selectedResp,
								elm$core$Maybe$Just(r)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(r)
						}),
					elm$core$Platform$Cmd$none);
			case 'SetRespPoste':
				var s = msg.a;
				var baseResp = A2(elm$core$Maybe$withDefault, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyResp, model.respBuffer);
				var newResp = _Utils_update(
					baseResp,
					{poste: s});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							respBuffer: elm$core$Maybe$Just(newResp)
						}),
					elm$core$Platform$Cmd$none);
			case 'SetRespNom':
				var s = msg.a;
				var baseResp = A2(elm$core$Maybe$withDefault, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyResp, model.respBuffer);
				var newResp = _Utils_update(
					baseResp,
					{nom: s});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							respBuffer: elm$core$Maybe$Just(newResp)
						}),
					elm$core$Platform$Cmd$none);
			case 'SetRespTelFixe':
				var s = msg.a;
				var baseResp = A2(elm$core$Maybe$withDefault, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyResp, model.respBuffer);
				var newTel = function () {
					var _n17 = baseResp.tel;
					switch (_n17.$) {
						case 'TelFixe':
							var n = _n17.a;
							return author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelFixe(s);
						case 'TelPortable':
							var n = _n17.a;
							return author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth(
								_Utils_Tuple2(s, n));
						default:
							var _n18 = _n17.a;
							var n1 = _n18.a;
							var n2 = _n18.b;
							return author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth(
								_Utils_Tuple2(s, n2));
					}
				}();
				var newResp = _Utils_update(
					baseResp,
					{tel: newTel});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							respBuffer: elm$core$Maybe$Just(newResp)
						}),
					elm$core$Platform$Cmd$none);
			case 'SetRespTelPortable':
				var s = msg.a;
				var baseResp = A2(elm$core$Maybe$withDefault, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyResp, model.respBuffer);
				var newTel = function () {
					var _n19 = baseResp.tel;
					switch (_n19.$) {
						case 'TelFixe':
							var n = _n19.a;
							return author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth(
								_Utils_Tuple2(n, s));
						case 'TelPortable':
							var n = _n19.a;
							return author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelPortable(s);
						default:
							var _n20 = _n19.a;
							var n1 = _n20.a;
							var n2 = _n20.b;
							return author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth(
								_Utils_Tuple2(n1, s));
					}
				}();
				var newResp = _Utils_update(
					baseResp,
					{tel: newTel});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							respBuffer: elm$core$Maybe$Just(newResp)
						}),
					elm$core$Platform$Cmd$none);
			case 'ModifyResp':
				var _n21 = _Utils_Tuple2(model.selectedResp, model.respBuffer);
				if ((_n21.a.$ === 'Just') && (_n21.b.$ === 'Just')) {
					var r1 = _n21.a.a;
					var r2 = _n21.b.a;
					var fb = model.ficheBuffer;
					var newFb = _Utils_update(
						fb,
						{
							responsables: A3(
								elm_community$list_extra$List$Extra$setIf,
								function (r) {
									return _Utils_eq(r, r1);
								},
								r2,
								fb.responsables)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{ficheBuffer: newFb}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'AddResp':
				var _n22 = model.respBuffer;
				if (_n22.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var r = _n22.a;
					if (_Utils_eq(r, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyResp)) {
						return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
					} else {
						var fb = model.ficheBuffer;
						var newFb = _Utils_update(
							fb,
							{
								responsables: _Utils_ap(
									fb.responsables,
									_List_fromArray(
										[r]))
							});
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{ficheBuffer: newFb, respBuffer: elm$core$Maybe$Nothing}),
							elm$core$Platform$Cmd$none);
					}
				}
			case 'RemoveResp':
				var _n23 = model.selectedResp;
				if (_n23.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var r = _n23.a;
					var fb = model.ficheBuffer;
					var newFb = _Utils_update(
						fb,
						{
							responsables: A2(elm_community$list_extra$List$Extra$remove, r, fb.responsables)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{ficheBuffer: newFb, selectedResp: elm$core$Maybe$Nothing}),
						elm$core$Platform$Cmd$none);
				}
			case 'SetAddress':
				var s = msg.a;
				var fb = model.ficheBuffer;
				var newFb = _Utils_update(
					fb,
					{adresse: s});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ficheBuffer: newFb}),
					elm$core$Platform$Cmd$none);
			case 'SetTelFixe':
				var s = msg.a;
				var fb = model.ficheBuffer;
				var newTel = function () {
					var _n24 = fb.telNumber;
					if (_n24.$ === 'Just') {
						switch (_n24.a.$) {
							case 'TelFixe':
								var n = _n24.a.a;
								return elm$core$Maybe$Just(
									author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelFixe(s));
							case 'TelPortable':
								var n = _n24.a.a;
								return elm$core$Maybe$Just(
									author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth(
										_Utils_Tuple2(s, n)));
							default:
								var _n25 = _n24.a.a;
								var n1 = _n25.a;
								var n2 = _n25.b;
								return elm$core$Maybe$Just(
									author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth(
										_Utils_Tuple2(s, n2)));
						}
					} else {
						return elm$core$Maybe$Just(
							author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelFixe(s));
					}
				}();
				var newFb = _Utils_update(
					fb,
					{telNumber: newTel});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ficheBuffer: newFb}),
					elm$core$Platform$Cmd$none);
			case 'SetTelPortable':
				var s = msg.a;
				var fb = model.ficheBuffer;
				var newTel = function () {
					var _n26 = fb.telNumber;
					if (_n26.$ === 'Just') {
						switch (_n26.a.$) {
							case 'TelFixe':
								var n = _n26.a.a;
								return elm$core$Maybe$Just(
									author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth(
										_Utils_Tuple2(n, s)));
							case 'TelPortable':
								var n = _n26.a.a;
								return elm$core$Maybe$Just(
									author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelPortable(s));
							default:
								var _n27 = _n26.a.a;
								var n1 = _n27.a;
								var n2 = _n27.b;
								return elm$core$Maybe$Just(
									author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth(
										_Utils_Tuple2(n1, s)));
						}
					} else {
						return elm$core$Maybe$Just(
							author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelPortable(s));
					}
				}();
				var newFb = _Utils_update(
					fb,
					{telNumber: newTel});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ficheBuffer: newFb}),
					elm$core$Platform$Cmd$none);
			case 'SetFax':
				var s = msg.a;
				var fb = model.ficheBuffer;
				var newFb = _Utils_update(
					fb,
					{
						fax: elm$core$Maybe$Just(s)
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ficheBuffer: newFb}),
					elm$core$Platform$Cmd$none);
			case 'SelectEmailInFiche':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							emailBuffer: _Utils_eq(
								model.selectedEmail,
								elm$core$Maybe$Just(s)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(s),
							selectedEmail: _Utils_eq(
								model.selectedEmail,
								elm$core$Maybe$Just(s)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(s)
						}),
					elm$core$Platform$Cmd$none);
			case 'SetEmail':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							emailBuffer: elm$core$Maybe$Just(s)
						}),
					elm$core$Platform$Cmd$none);
			case 'ModifyEmail':
				var _n28 = _Utils_Tuple2(model.selectedEmail, model.emailBuffer);
				if ((_n28.a.$ === 'Just') && (_n28.b.$ === 'Just')) {
					var mail1 = _n28.a.a;
					var mail2 = _n28.b.a;
					var fb = model.ficheBuffer;
					var newFb = _Utils_update(
						fb,
						{
							email: A3(
								elm_community$list_extra$List$Extra$setIf,
								function (m) {
									return _Utils_eq(m, mail1);
								},
								mail2,
								fb.email)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{emailBuffer: elm$core$Maybe$Nothing, ficheBuffer: newFb, selectedEmail: elm$core$Maybe$Nothing}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'AddEmail':
				var _n29 = model.emailBuffer;
				if (_n29.$ === 'Just') {
					var mail = _n29.a;
					if (mail === '') {
						return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
					} else {
						var fb = model.ficheBuffer;
						var newFb = _Utils_update(
							fb,
							{
								email: _Utils_ap(
									fb.email,
									_List_fromArray(
										[mail]))
							});
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{emailBuffer: elm$core$Maybe$Nothing, ficheBuffer: newFb, selectedEmail: elm$core$Maybe$Nothing}),
							elm$core$Platform$Cmd$none);
					}
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'RemoveEmail':
				var _n30 = model.selectedEmail;
				if (_n30.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var mail = _n30.a;
					var fb = model.ficheBuffer;
					var newFb = _Utils_update(
						fb,
						{
							email: A2(elm_community$list_extra$List$Extra$remove, mail, fb.email)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{emailBuffer: elm$core$Maybe$Nothing, ficheBuffer: newFb, selectedEmail: elm$core$Maybe$Nothing}),
						elm$core$Platform$Cmd$none);
				}
			case 'SetPjaun':
				var s = msg.a;
				var fb = model.ficheBuffer;
				var newFb = _Utils_update(
					fb,
					{
						pjaun: elm$core$Maybe$Just(s)
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ficheBuffer: newFb}),
					elm$core$Platform$Cmd$none);
			case 'SetSiteUrl':
				var s = msg.a;
				var fb = model.ficheBuffer;
				var baseSite = A2(
					elm$core$Maybe$withDefault,
					_Utils_Tuple2('', ''),
					fb.site);
				var newFb = _Utils_update(
					fb,
					{
						site: elm$core$Maybe$Just(
							A2(
								elm$core$Tuple$mapSecond,
								elm$core$Basics$always(s),
								baseSite))
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ficheBuffer: newFb}),
					elm$core$Platform$Cmd$none);
			case 'SetSiteLabel':
				var s = msg.a;
				var fb = model.ficheBuffer;
				var baseSite = A2(
					elm$core$Maybe$withDefault,
					_Utils_Tuple2('', ''),
					fb.site);
				var newFb = _Utils_update(
					fb,
					{
						site: elm$core$Maybe$Just(
							A2(
								elm$core$Tuple$mapFirst,
								elm$core$Basics$always(s),
								baseSite))
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ficheBuffer: newFb}),
					elm$core$Platform$Cmd$none);
			case 'OpenVisualPicker':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{visualPickerOpen: true}),
					elm$core$Platform$Cmd$none);
			case 'CloseVisualPicker':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{visualPickerOpen: false}),
					elm$core$Platform$Cmd$none);
			case 'OpenLabelVisualPicker':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{labelVisualPickerOpen: true}),
					elm$core$Platform$Cmd$none);
			case 'CloseLabelVisualPicker':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{labelVisualPickerOpen: false}),
					elm$core$Platform$Cmd$none);
			case 'OpenDocPicker':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{docPickerOpen: true}),
					elm$core$Platform$Cmd$none);
			case 'CloseDocPicker':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{docPickerOpen: false}),
					elm$core$Platform$Cmd$none);
			case 'ConfirmVisual':
				var pr = msg.a;
				if (pr.$ === 'PickedImage') {
					var url = pr.a.url;
					var fb = model.ficheBuffer;
					var newFb = _Utils_update(
						fb,
						{visuel: url});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{ficheBuffer: newFb, visualPickerOpen: false}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'SelectDescrInFiche':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							descrBuffer: _Utils_eq(
								model.selectedDescr,
								elm$core$Maybe$Just(s)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(s),
							selectedDescr: _Utils_eq(
								model.selectedDescr,
								elm$core$Maybe$Just(s)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(s)
						}),
					elm$core$Platform$Cmd$none);
			case 'SetDescription':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							descrBuffer: elm$core$Maybe$Just(s)
						}),
					elm$core$Platform$Cmd$none);
			case 'ModifyDescr':
				var _n32 = _Utils_Tuple2(model.selectedDescr, model.descrBuffer);
				if ((_n32.a.$ === 'Just') && (_n32.b.$ === 'Just')) {
					var d1 = _n32.a.a;
					var d2 = _n32.b.a;
					var fb = model.ficheBuffer;
					var newFb = _Utils_update(
						fb,
						{
							description: A3(
								elm_community$list_extra$List$Extra$setIf,
								function (d) {
									return _Utils_eq(d, d1);
								},
								d2,
								fb.description)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{descrBuffer: elm$core$Maybe$Nothing, ficheBuffer: newFb, selectedDescr: elm$core$Maybe$Nothing}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'AddDescription':
				var _n33 = model.descrBuffer;
				if (_n33.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var d = _n33.a;
					if (d === '') {
						return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
					} else {
						var fb = model.ficheBuffer;
						var newFb = _Utils_update(
							fb,
							{
								description: _Utils_ap(
									fb.description,
									_List_fromArray(
										[d]))
							});
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{descrBuffer: elm$core$Maybe$Nothing, ficheBuffer: newFb}),
							elm$core$Platform$Cmd$none);
					}
				}
			case 'RemoveDescription':
				var _n34 = model.selectedDescr;
				if (_n34.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var d = _n34.a;
					var fb = model.ficheBuffer;
					var newFb = _Utils_update(
						fb,
						{
							description: A2(elm_community$list_extra$List$Extra$remove, d, fb.description)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{descrBuffer: elm$core$Maybe$Nothing, ficheBuffer: newFb, selectedDescr: elm$core$Maybe$Nothing}),
						elm$core$Platform$Cmd$none);
				}
			case 'MoveDescrUp':
				var _n35 = A2(
					elm$core$Maybe$andThen,
					function (d) {
						return A2(elm_community$list_extra$List$Extra$elemIndex, d, model.ficheBuffer.description);
					},
					model.selectedDescr);
				if (_n35.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var n = _n35.a;
					var fb = model.ficheBuffer;
					var newFb = _Utils_update(
						fb,
						{
							description: A3(elm_community$list_extra$List$Extra$swapAt, n - 1, n, fb.description)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{ficheBuffer: newFb}),
						elm$core$Platform$Cmd$none);
				}
			case 'MoveDescrDown':
				var _n36 = A2(
					elm$core$Maybe$andThen,
					function (d) {
						return A2(elm_community$list_extra$List$Extra$elemIndex, d, model.ficheBuffer.description);
					},
					model.selectedDescr);
				if (_n36.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var n = _n36.a;
					var fb = model.ficheBuffer;
					var newFb = _Utils_update(
						fb,
						{
							description: A3(elm_community$list_extra$List$Extra$swapAt, n + 1, n, fb.description)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{ficheBuffer: newFb}),
						elm$core$Platform$Cmd$none);
				}
			case 'SelectLinkedDoc':
				var ld = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							expiryDateBuffer: elm$core$Maybe$Nothing,
							linkedDocBuffer: _Utils_eq(
								model.selectedLinkedDoc,
								elm$core$Maybe$Just(ld)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(ld),
							selectedLinkedDoc: _Utils_eq(
								model.selectedLinkedDoc,
								elm$core$Maybe$Just(ld)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(ld)
						}),
					elm$core$Platform$Cmd$none);
			case 'ModifyLinkedDoc':
				var _n37 = _Utils_Tuple2(model.selectedLinkedDoc, model.linkedDocBuffer);
				if ((_n37.a.$ === 'Just') && (_n37.b.$ === 'Just')) {
					var ld1 = _n37.a.a;
					var ld2 = _n37.b.a;
					var fb = model.ficheBuffer;
					var newFb = _Utils_update(
						fb,
						{
							linkedDocs: A3(
								elm_community$list_extra$List$Extra$setIf,
								function (ld) {
									return _Utils_eq(ld, ld1);
								},
								ld2,
								fb.linkedDocs)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{expiryDateBuffer: elm$core$Maybe$Nothing, ficheBuffer: newFb, linkedDocBuffer: elm$core$Maybe$Nothing, selectedLinkedDoc: elm$core$Maybe$Nothing}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'AddLinkedDoc':
				var _n38 = model.linkedDocBuffer;
				if (_n38.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var ld = _n38.a;
					if (!author$project$GeneralDirectoryEditor$GeneralDirHelpers$validLinkedDoc(ld)) {
						return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
					} else {
						var fb = model.ficheBuffer;
						var newFb = _Utils_update(
							fb,
							{
								linkedDocs: _Utils_ap(
									fb.linkedDocs,
									_List_fromArray(
										[ld]))
							});
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{expiryDateBuffer: elm$core$Maybe$Nothing, ficheBuffer: newFb, linkedDocBuffer: elm$core$Maybe$Nothing}),
							elm$core$Platform$Cmd$none);
					}
				}
			case 'RemoveLinkedDoc':
				var _n39 = model.selectedLinkedDoc;
				if (_n39.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var ld = _n39.a;
					var fb = model.ficheBuffer;
					var newFb = _Utils_update(
						fb,
						{
							linkedDocs: A2(elm_community$list_extra$List$Extra$remove, ld, fb.linkedDocs)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{expiryDateBuffer: elm$core$Maybe$Nothing, ficheBuffer: newFb, linkedDocBuffer: elm$core$Maybe$Nothing, selectedLinkedDoc: elm$core$Maybe$Nothing}),
						elm$core$Platform$Cmd$none);
				}
			case 'SetLinkedDocUrl':
				var pr = msg.a;
				if (pr.$ === 'PickedDoc') {
					var s = pr.a;
					var baseLD = A2(elm$core$Maybe$withDefault, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLinkedDoc, model.linkedDocBuffer);
					var newLd = _Utils_update(
						baseLD,
						{url: s});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								docPickerOpen: false,
								linkedDocBuffer: elm$core$Maybe$Just(newLd)
							}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'SetLinkedDocLabel':
				var s = msg.a;
				var baseLD = A2(elm$core$Maybe$withDefault, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLinkedDoc, model.linkedDocBuffer);
				var newLd = _Utils_update(
					baseLD,
					{label: s});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							linkedDocBuffer: elm$core$Maybe$Just(newLd)
						}),
					elm$core$Platform$Cmd$none);
			case 'SetLinkedDocDescr':
				var s = msg.a;
				var baseLD = A2(elm$core$Maybe$withDefault, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLinkedDoc, model.linkedDocBuffer);
				var newLd = _Utils_update(
					baseLD,
					{
						descr: elm$core$Maybe$Just(s)
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							linkedDocBuffer: elm$core$Maybe$Just(newLd)
						}),
					elm$core$Platform$Cmd$none);
			case 'SetLinkedDocExpiry':
				var s = msg.a;
				var _n41 = A3(author$project$Internals$CommonHelpers$parseDate, model.currentTime, config.zone, s);
				if (_n41.$ === 'Nothing') {
					var baseLD = A2(elm$core$Maybe$withDefault, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLinkedDoc, model.linkedDocBuffer);
					var newLd = _Utils_update(
						baseLD,
						{expiryDate: elm$core$Maybe$Nothing});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								expiryDateBuffer: elm$core$Maybe$Just(s),
								linkedDocBuffer: elm$core$Maybe$Just(newLd)
							}),
						elm$core$Platform$Cmd$none);
				} else {
					var _n42 = _n41.a;
					var day = _n42.a;
					var month = _n42.b;
					var year = _n42.c;
					var newTime = AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilToPosix(
						A8(AdrianRibao$elm_derberos_date$Derberos$Date$Core$newDateRecord, year, month, day, 0, 0, 0, 0, config.zone));
					var baseLD = A2(elm$core$Maybe$withDefault, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLinkedDoc, model.linkedDocBuffer);
					var newLd = _Utils_update(
						baseLD,
						{
							expiryDate: elm$core$Maybe$Just(newTime)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								expiryDateBuffer: elm$core$Maybe$Nothing,
								linkedDocBuffer: elm$core$Maybe$Just(newLd)
							}),
						elm$core$Platform$Cmd$none);
				}
			case 'SetOuverture':
				var o = msg.a;
				var fb = model.ficheBuffer;
				var newFb = _Utils_update(
					fb,
					{
						ouverture: elm$core$Maybe$Just(o)
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ficheBuffer: newFb}),
					elm$core$Platform$Cmd$none);
			case 'SaveFiche':
				var _n43 = model.seed;
				if (_n43.$ === 'Just') {
					var seed = _n43.a;
					var fb = model.ficheBuffer;
					var _n44 = _Utils_eq(fb.uuid, TSFoster$elm_uuid$UUID$nil) ? A2(elm$random$Random$step, TSFoster$elm_uuid$UUID$generator, seed) : _Utils_Tuple2(fb.uuid, seed);
					var uuid = _n44.a;
					var newSeed = _n44.b;
					var newFb = _Utils_update(
						fb,
						{uuid: uuid});
					var newFiches = A3(
						elm$core$Dict$insert,
						TSFoster$elm_uuid$UUID$canonical(uuid),
						newFb,
						model.fiches);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								ficheBuffer: newFb,
								fiches: newFiches,
								lockedFiches: A2(elm$core$List$cons, newFb, model.lockedFiches),
								rightPanelDisplay: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$PreviewFiche,
								seed: elm$core$Maybe$Just(newSeed),
								selectedFiche: elm$core$Maybe$Just(
									TSFoster$elm_uuid$UUID$canonical(newFb.uuid))
							}),
						function () {
							var _n45 = config.logInfo;
							if (_n45.$ === 'LoggedIn') {
								var sessionId = _n45.a.sessionId;
								return A2(
									elm$core$Task$attempt,
									author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FicheUpdated(newFb),
									A2(
										elm$core$Task$andThen,
										function (t) {
											var datedFb = _Utils_update(
												newFb,
												{lastEdit: t});
											return A2(author$project$GeneralDirectoryEditor$GeneralDirJson$updateFicheTask, datedFb, sessionId);
										},
										elm$time$Time$now));
							} else {
								return elm$core$Platform$Cmd$none;
							}
						}());
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'RemoveFiche':
				if (_Utils_eq(model.ficheBuffer, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyFiche)) {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var f = model.ficheBuffer;
					var newFiches = A2(
						elm$core$Dict$remove,
						TSFoster$elm_uuid$UUID$canonical(f.uuid),
						model.fiches);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{fiches: newFiches}),
						A2(
							author$project$Auth$AuthPlugin$cmdIfLogged,
							config.logInfo,
							author$project$GeneralDirectoryEditor$GeneralDirJson$removeFiche(f)));
				}
			case 'SetRightPanelDisplay':
				var d = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							activBuffer: elm$core$Maybe$Nothing,
							catBuffer: elm$core$Maybe$Nothing,
							descrBuffer: elm$core$Maybe$Nothing,
							docPickerOpen: false,
							emailBuffer: elm$core$Maybe$Nothing,
							expiryDateBuffer: elm$core$Maybe$Nothing,
							ficheBuffer: _Utils_eq(d, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$PreviewFiche) ? author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyFiche : model.ficheBuffer,
							labelBuffer: elm$core$Maybe$Nothing,
							labelPickerOpen: false,
							labelVisualPickerOpen: false,
							linkedDocBuffer: elm$core$Maybe$Nothing,
							respBuffer: elm$core$Maybe$Nothing,
							rightPanelDisplay: d,
							selectedActivInFiche: elm$core$Maybe$Nothing,
							selectedAvailableActiv: elm$core$Maybe$Nothing,
							selectedAvailableCat: elm$core$Maybe$Nothing,
							selectedAvailableLabel: elm$core$Maybe$Nothing,
							selectedCatInFiche: elm$core$Maybe$Nothing,
							selectedDescr: elm$core$Maybe$Nothing,
							selectedEmail: elm$core$Maybe$Nothing,
							selectedFiche: _Utils_eq(d, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$PreviewFiche) ? elm$core$Maybe$Nothing : model.selectedFiche,
							selectedLabelInFiche: elm$core$Maybe$Nothing,
							selectedLinkedDoc: elm$core$Maybe$Nothing,
							selectedResp: elm$core$Maybe$Nothing,
							visualPickerOpen: false
						}),
					elm$core$Platform$Cmd$none);
			case 'SetInitialSeed':
				var t = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							currentTime: t,
							seed: elm$core$Maybe$Just(
								elm$random$Random$initialSeed(
									elm$time$Time$posixToMillis(t)))
						}),
					elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
		}
	});
var author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$update = F3(
	function (config, msg, model) {
		var _n0 = A3(author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$internalUpdate, config, msg, model);
		var newModel = _n0.a;
		var cmds = _n0.b;
		return _Utils_Tuple2(
			newModel,
			A2(elm$core$Platform$Cmd$map, model.externalMsg, cmds));
	});
var author$project$MurolAdmin$Loading = {$: 'Loading'};
var author$project$MurolAdmin$PageEditorTool = {$: 'PageEditorTool'};
var author$project$MurolAdmin$Ready = {$: 'Ready'};
var author$project$NewsEditor$NewsEditor$SetTimeAndInitSeed = function (a) {
	return {$: 'SetTimeAndInitSeed', a: a};
};
var author$project$NewsEditor$NewsEditor$LoadNews = function (a) {
	return {$: 'LoadNews', a: a};
};
var author$project$Document$Document$News = F6(
	function (title, date, content, pic, uuid, expiry) {
		return {content: content, date: date, expiry: expiry, pic: pic, title: title, uuid: uuid};
	});
var author$project$Document$Document$Pic = F3(
	function (url, width, height) {
		return {height: height, url: url, width: width};
	});
var author$project$Document$Document$NewsContent = F2(
	function (tbElems, attrs) {
		return {attrs: attrs, tbElems: tbElems};
	});
var NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt = F3(
	function (path, valDecoder, decoder) {
		return A2(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A2(elm$json$Json$Decode$at, path, valDecoder),
			decoder);
	});
var author$project$Document$Document$AlignLeft = {$: 'AlignLeft'};
var author$project$Document$Document$AlignRight = {$: 'AlignRight'};
var author$project$Document$Document$BackgroundColor = function (a) {
	return {$: 'BackgroundColor', a: a};
};
var author$project$Document$Document$Bold = {$: 'Bold'};
var author$project$Document$Document$Border = {$: 'Border'};
var author$project$Document$Document$Center = {$: 'Center'};
var author$project$Document$Document$FillPortion = function (a) {
	return {$: 'FillPortion', a: a};
};
var author$project$Document$Document$Font = function (a) {
	return {$: 'Font', a: a};
};
var author$project$Document$Document$FontAlignLeft = {$: 'FontAlignLeft'};
var author$project$Document$Document$FontAlignRight = {$: 'FontAlignRight'};
var author$project$Document$Document$FontColor = function (a) {
	return {$: 'FontColor', a: a};
};
var author$project$Document$Document$FontSize = function (a) {
	return {$: 'FontSize', a: a};
};
var author$project$Document$Document$Height = function (a) {
	return {$: 'Height', a: a};
};
var author$project$Document$Document$Italic = {$: 'Italic'};
var author$project$Document$Document$Justify = {$: 'Justify'};
var author$project$Document$Document$PaddingEach = function (a) {
	return {$: 'PaddingEach', a: a};
};
var author$project$Document$Document$Pointer = {$: 'Pointer'};
var author$project$Document$Document$SpacingXY = F2(
	function (a, b) {
		return {$: 'SpacingXY', a: a, b: b};
	});
var author$project$Document$Document$Width = function (a) {
	return {$: 'Width', a: a};
};
var author$project$Document$Document$WidthFill = {$: 'WidthFill'};
var author$project$Document$Document$WidthShrink = {$: 'WidthShrink'};
var author$project$Document$Document$DocColor = F3(
	function (a, b, c) {
		return {$: 'DocColor', a: a, b: b, c: c};
	});
var elm$json$Json$Decode$float = _Json_decodeFloat;
var author$project$Document$Json$DocumentDecoder$decodeDocColor = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
	_List_fromArray(
		['DocColor', 'blue']),
	elm$json$Json$Decode$float,
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
		_List_fromArray(
			['DocColor', 'green']),
		elm$json$Json$Decode$float,
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['DocColor', 'red']),
			elm$json$Json$Decode$float,
			elm$json$Json$Decode$succeed(author$project$Document$Document$DocColor))));
var author$project$Document$Json$DocumentDecoder$decodeDocAttribute = elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['PaddingEach', 'top']),
			elm$json$Json$Decode$int,
			A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
				_List_fromArray(
					['PaddingEach', 'right']),
				elm$json$Json$Decode$int,
				A3(
					NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
					_List_fromArray(
						['PaddingEach', 'left']),
					elm$json$Json$Decode$int,
					A3(
						NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
						_List_fromArray(
							['PaddingEach', 'bottom']),
						elm$json$Json$Decode$int,
						elm$json$Json$Decode$succeed(
							F4(
								function (b, l, r, t) {
									return author$project$Document$Document$PaddingEach(
										{bottom: b, left: l, right: r, top: t});
								})))))),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['SpacingXY', 'Y']),
			elm$json$Json$Decode$int,
			A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
				_List_fromArray(
					['SpacingXY', 'X']),
				elm$json$Json$Decode$int,
				elm$json$Json$Decode$succeed(author$project$Document$Document$SpacingXY))),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'BackgroundColor',
			author$project$Document$Json$DocumentDecoder$decodeDocColor,
			elm$json$Json$Decode$succeed(author$project$Document$Document$BackgroundColor)),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Width',
			elm$json$Json$Decode$int,
			elm$json$Json$Decode$succeed(author$project$Document$Document$Width)),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Height',
			elm$json$Json$Decode$int,
			elm$json$Json$Decode$succeed(author$project$Document$Document$Height)),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'FillPortion',
			elm$json$Json$Decode$int,
			elm$json$Json$Decode$succeed(author$project$Document$Document$FillPortion)),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Font',
			elm$json$Json$Decode$string,
			elm$json$Json$Decode$succeed(author$project$Document$Document$Font)),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'FontColor',
			author$project$Document$Json$DocumentDecoder$decodeDocColor,
			elm$json$Json$Decode$succeed(author$project$Document$Document$FontColor)),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'FontSize',
			elm$json$Json$Decode$int,
			elm$json$Json$Decode$succeed(author$project$Document$Document$FontSize)),
			A2(
			elm$json$Json$Decode$andThen,
			function (str) {
				switch (str) {
					case 'WidthShrink':
						return elm$json$Json$Decode$succeed(author$project$Document$Document$WidthShrink);
					case 'WidthFill':
						return elm$json$Json$Decode$succeed(author$project$Document$Document$WidthFill);
					case 'AlignRight':
						return elm$json$Json$Decode$succeed(author$project$Document$Document$AlignRight);
					case 'AlignLeft':
						return elm$json$Json$Decode$succeed(author$project$Document$Document$AlignLeft);
					case 'Pointer':
						return elm$json$Json$Decode$succeed(author$project$Document$Document$Pointer);
					case 'Border':
						return elm$json$Json$Decode$succeed(author$project$Document$Document$Border);
					case 'FontAlignLeft':
						return elm$json$Json$Decode$succeed(author$project$Document$Document$FontAlignLeft);
					case 'FontAlignRight':
						return elm$json$Json$Decode$succeed(author$project$Document$Document$FontAlignRight);
					case 'Center':
						return elm$json$Json$Decode$succeed(author$project$Document$Document$Center);
					case 'Justify':
						return elm$json$Json$Decode$succeed(author$project$Document$Document$Justify);
					case 'Bold':
						return elm$json$Json$Decode$succeed(author$project$Document$Document$Bold);
					case 'Italic':
						return elm$json$Json$Decode$succeed(author$project$Document$Document$Italic);
					default:
						var somethingElse = str;
						return elm$json$Json$Decode$fail('Unknown DocAttribute: ' + somethingElse);
				}
			},
			elm$json$Json$Decode$string)
		]));
var author$project$Document$Json$DocumentDecoder$decodeDocAttributes = elm$json$Json$Decode$list(author$project$Document$Json$DocumentDecoder$decodeDocAttribute);
var author$project$Document$Document$LinkMeta = F3(
	function (targetBlank, url, label) {
		return {label: label, targetBlank: targetBlank, url: url};
	});
var author$project$Document$Json$DocumentDecoder$decodeLinkMeta = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'label',
	elm$json$Json$Decode$string,
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'url',
		elm$json$Json$Decode$string,
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'targetBlank',
			elm$json$Json$Decode$bool,
			elm$json$Json$Decode$succeed(author$project$Document$Document$LinkMeta))));
var author$project$Document$Json$DocumentDecoder$decodeTextBlockPrimitive = elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['Text', 'value']),
			elm$json$Json$Decode$string,
			A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
				_List_fromArray(
					['Text', 'attrs']),
				author$project$Document$Json$DocumentDecoder$decodeDocAttributes,
				elm$json$Json$Decode$succeed(author$project$Document$Document$Text))),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['Link', 'linkMeta']),
			author$project$Document$Json$DocumentDecoder$decodeLinkMeta,
			A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
				_List_fromArray(
					['Link', 'attrs']),
				author$project$Document$Json$DocumentDecoder$decodeDocAttributes,
				elm$json$Json$Decode$succeed(author$project$Document$Document$Link)))
		]));
var author$project$Document$Json$DocumentDecoder$decodeTextBlockElement = elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['Paragraph', 'prims']),
			elm$json$Json$Decode$list(author$project$Document$Json$DocumentDecoder$decodeTextBlockPrimitive),
			A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
				_List_fromArray(
					['Paragraph', 'attrs']),
				author$project$Document$Json$DocumentDecoder$decodeDocAttributes,
				elm$json$Json$Decode$succeed(author$project$Document$Document$Paragraph))),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['UList', 'liList']),
			elm$json$Json$Decode$list(
				A2(
					elm$json$Json$Decode$field,
					'li',
					elm$json$Json$Decode$list(author$project$Document$Json$DocumentDecoder$decodeTextBlockPrimitive))),
			A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
				_List_fromArray(
					['UList', 'attrs']),
				author$project$Document$Json$DocumentDecoder$decodeDocAttributes,
				elm$json$Json$Decode$succeed(author$project$Document$Document$UList))),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Heading',
			A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'value',
				elm$json$Json$Decode$string,
				A3(
					NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'level',
					elm$json$Json$Decode$int,
					A3(
						NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'attrs',
						author$project$Document$Json$DocumentDecoder$decodeDocAttributes,
						elm$json$Json$Decode$succeed(
							F3(
								function (a, l, v) {
									return {attrs: a, level: l, value: v};
								}))))),
			elm$json$Json$Decode$succeed(
				function (res) {
					return A2(
						author$project$Document$Document$Heading,
						res.attrs,
						_Utils_Tuple2(res.level, res.value));
				})),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'TBPrimitive',
			author$project$Document$Json$DocumentDecoder$decodeTextBlockPrimitive,
			elm$json$Json$Decode$succeed(author$project$Document$Document$TBPrimitive))
		]));
var author$project$Document$Json$DocumentDecoder$decodeNewsContent = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'attrs',
	author$project$Document$Json$DocumentDecoder$decodeDocAttributes,
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'tbElems',
		elm$json$Json$Decode$list(author$project$Document$Json$DocumentDecoder$decodeTextBlockElement),
		elm$json$Json$Decode$succeed(author$project$Document$Document$NewsContent)));
var author$project$Document$Json$DocumentDecoder$decodeUUID = A2(
	elm$json$Json$Decode$andThen,
	A2(elm$core$Basics$composeL, elm_community$json_extra$Json$Decode$Extra$fromResult, TSFoster$elm_uuid$UUID$fromString),
	elm$json$Json$Decode$string);
var author$project$Document$Json$DocumentDecoder$decodeNews = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'expiry',
	A2(elm$json$Json$Decode$map, elm$time$Time$millisToPosix, elm$json$Json$Decode$int),
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'uuid',
		author$project$Document$Json$DocumentDecoder$decodeUUID,
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'pic',
			elm$json$Json$Decode$nullable(
				A3(
					NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'height',
					elm$json$Json$Decode$int,
					A3(
						NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'width',
						elm$json$Json$Decode$int,
						A3(
							NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'url',
							elm$json$Json$Decode$string,
							elm$json$Json$Decode$succeed(author$project$Document$Document$Pic))))),
			A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'content',
				elm$json$Json$Decode$nullable(author$project$Document$Json$DocumentDecoder$decodeNewsContent),
				A3(
					NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'date',
					A2(elm$json$Json$Decode$map, elm$time$Time$millisToPosix, elm$json$Json$Decode$int),
					A3(
						NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'title',
						elm$json$Json$Decode$string,
						elm$json$Json$Decode$succeed(author$project$Document$Document$News)))))));
var author$project$NewsEditor$NewsEditor$decodeNewsDict = A2(
	elm$json$Json$Decode$map,
	elm$core$Dict$fromList,
	A2(
		elm$json$Json$Decode$map,
		function (newsList) {
			return A2(
				elm$core$List$map,
				function (news) {
					return _Utils_Tuple2(
						TSFoster$elm_uuid$UUID$canonical(news.uuid),
						news);
				},
				newsList);
		},
		elm$json$Json$Decode$list(author$project$Document$Json$DocumentDecoder$decodeNews)));
var author$project$NewsEditor$NewsEditor$getAllTheNews = function (sessionId) {
	var body = elm$http$Http$jsonBody(
		elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'sessionId',
					elm$json$Json$Encode$string(sessionId))
				])));
	return elm$http$Http$post(
		{
			body: body,
			expect: A2(elm$http$Http$expectJson, author$project$NewsEditor$NewsEditor$LoadNews, author$project$NewsEditor$NewsEditor$decodeNewsDict),
			url: 'getAllTheNews.php'
		});
};
var author$project$NewsEditor$NewsEditor$load = F2(
	function (model, logInfo) {
		if (logInfo.$ === 'LoggedIn') {
			var sessionId = logInfo.a.sessionId;
			return A2(
				elm$core$Platform$Cmd$map,
				model.externalMsg,
				elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							A2(elm$core$Task$perform, author$project$NewsEditor$NewsEditor$SetTimeAndInitSeed, elm$time$Time$now),
							author$project$NewsEditor$NewsEditor$getAllTheNews(sessionId)
						])));
		} else {
			return elm$core$Platform$Cmd$none;
		}
	});
var author$project$Document$Document$emptyNews = {
	content: elm$core$Maybe$Nothing,
	date: elm$time$Time$millisToPosix(0),
	expiry: elm$time$Time$millisToPosix(0),
	pic: elm$core$Maybe$Nothing,
	title: '',
	uuid: TSFoster$elm_uuid$UUID$nil
};
var author$project$NewsEditor$NewsEditor$NewsEditor = {$: 'NewsEditor'};
var author$project$NewsEditor$NewsEditor$NewsSaved = function (a) {
	return {$: 'NewsSaved', a: a};
};
var author$project$NewsEditor$NewsEditor$NewsRemoved = F2(
	function (a, b) {
		return {$: 'NewsRemoved', a: a, b: b};
	});
var author$project$NewsEditor$NewsEditor$decodeSuccess = A2(
	elm$json$Json$Decode$at,
	_List_fromArray(
		['message']),
	elm$json$Json$Decode$succeed(true));
var author$project$NewsEditor$NewsEditor$removeNews = F2(
	function (idsToRemove, sessionId) {
		var body = elm$http$Http$jsonBody(
			elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'idsToRemove',
						A2(elm$json$Json$Encode$list, elm$json$Json$Encode$string, idsToRemove)),
						_Utils_Tuple2(
						'sessionId',
						elm$json$Json$Encode$string(sessionId))
					])));
		return elm$http$Http$post(
			{
				body: body,
				expect: A2(
					elm$http$Http$expectJson,
					author$project$NewsEditor$NewsEditor$NewsRemoved(idsToRemove),
					author$project$NewsEditor$NewsEditor$decodeSuccess),
				url: 'removeNews.php'
			});
	});
var elm$json$Json$Encode$float = _Json_wrap;
var author$project$Document$Json$DocumentSerializer$encodeDocColor = function (_n0) {
	var r = _n0.a;
	var g = _n0.b;
	var b = _n0.c;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'DocColor',
				elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'red',
							elm$json$Json$Encode$float(r)),
							_Utils_Tuple2(
							'green',
							elm$json$Json$Encode$float(g)),
							_Utils_Tuple2(
							'blue',
							elm$json$Json$Encode$float(b))
						])))
			]));
};
var author$project$Document$Json$DocumentSerializer$encodeDocAttribute = function (docAttr) {
	switch (docAttr.$) {
		case 'PaddingEach':
			var bottom = docAttr.a.bottom;
			var left = docAttr.a.left;
			var right = docAttr.a.right;
			var top = docAttr.a.top;
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'PaddingEach',
							elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'bottom',
										elm$json$Json$Encode$int(bottom)),
										_Utils_Tuple2(
										'left',
										elm$json$Json$Encode$int(left)),
										_Utils_Tuple2(
										'right',
										elm$json$Json$Encode$int(right)),
										_Utils_Tuple2(
										'top',
										elm$json$Json$Encode$int(top))
									])))
						])));
		case 'SpacingXY':
			var x = docAttr.a;
			var y = docAttr.b;
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'SpacingXY',
							elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'X',
										elm$json$Json$Encode$int(x)),
										_Utils_Tuple2(
										'Y',
										elm$json$Json$Encode$int(y))
									])))
						])));
		case 'AlignRight':
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$string('AlignRight'));
		case 'AlignLeft':
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$string('AlignLeft'));
		case 'Pointer':
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$string('Pointer'));
		case 'BackgroundColor':
			var color = docAttr.a;
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'BackgroundColor',
							author$project$Document$Json$DocumentSerializer$encodeDocColor(color))
						])));
		case 'Width':
			var w = docAttr.a;
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Width',
							elm$json$Json$Encode$int(w))
						])));
		case 'Height':
			var h = docAttr.a;
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Height',
							elm$json$Json$Encode$int(h))
						])));
		case 'WidthShrink':
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$string('WidthShrink'));
		case 'WidthFill':
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$string('WidthFill'));
		case 'FillPortion':
			var n = docAttr.a;
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'FillPortion',
							elm$json$Json$Encode$int(n))
						])));
		case 'Border':
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$string('Border'));
		case 'Font':
			var s = docAttr.a;
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Font',
							elm$json$Json$Encode$string(s))
						])));
		case 'FontColor':
			var color = docAttr.a;
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'FontColor',
							author$project$Document$Json$DocumentSerializer$encodeDocColor(color))
						])));
		case 'FontSize':
			var s = docAttr.a;
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'FontSize',
							elm$json$Json$Encode$int(s))
						])));
		case 'FontAlignLeft':
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$string('FontAlignLeft'));
		case 'FontAlignRight':
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$string('FontAlignRight'));
		case 'Center':
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$string('Center'));
		case 'Justify':
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$string('Justify'));
		case 'Bold':
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$string('Bold'));
		case 'Italic':
			return elm$core$Maybe$Just(
				elm$json$Json$Encode$string('Italic'));
		default:
			return elm$core$Maybe$Nothing;
	}
};
var author$project$Document$Json$DocumentSerializer$encodeDocAttributes = function (attrs) {
	return A2(
		elm$json$Json$Encode$list,
		elm$core$Basics$identity,
		A2(elm$core$List$filterMap, author$project$Document$Json$DocumentSerializer$encodeDocAttribute, attrs));
};
var elm$json$Json$Encode$bool = _Json_wrap;
var author$project$Document$Json$DocumentSerializer$encodeLinkMeta = function (_n0) {
	var targetBlank = _n0.targetBlank;
	var url = _n0.url;
	var label = _n0.label;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'targetBlank',
				elm$json$Json$Encode$bool(targetBlank)),
				_Utils_Tuple2(
				'url',
				elm$json$Json$Encode$string(url)),
				_Utils_Tuple2(
				'label',
				elm$json$Json$Encode$string(label))
			]));
};
var author$project$Document$Json$DocumentSerializer$encodeTextBlockPrimitive = function (tbPrim) {
	if (tbPrim.$ === 'Text') {
		var attrs = tbPrim.a;
		var s = tbPrim.b;
		return elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Text',
					elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'attrs',
								author$project$Document$Json$DocumentSerializer$encodeDocAttributes(attrs)),
								_Utils_Tuple2(
								'value',
								elm$json$Json$Encode$string(s))
							])))
				]));
	} else {
		var attrs = tbPrim.a;
		var lm = tbPrim.b;
		return elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Link',
					elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'attrs',
								author$project$Document$Json$DocumentSerializer$encodeDocAttributes(attrs)),
								_Utils_Tuple2(
								'linkMeta',
								author$project$Document$Json$DocumentSerializer$encodeLinkMeta(lm))
							])))
				]));
	}
};
var author$project$Document$Json$DocumentSerializer$encodeTextBlockElement = function (tbElem) {
	switch (tbElem.$) {
		case 'Paragraph':
			var attrs = tbElem.a;
			var prims = tbElem.b;
			return elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Paragraph',
						elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'attrs',
									author$project$Document$Json$DocumentSerializer$encodeDocAttributes(attrs)),
									_Utils_Tuple2(
									'prims',
									A2(elm$json$Json$Encode$list, author$project$Document$Json$DocumentSerializer$encodeTextBlockPrimitive, prims))
								])))
					]));
		case 'UList':
			var attrs = tbElem.a;
			var liList = tbElem.b;
			return elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'UList',
						elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'attrs',
									author$project$Document$Json$DocumentSerializer$encodeDocAttributes(attrs)),
									_Utils_Tuple2(
									'liList',
									A2(
										elm$json$Json$Encode$list,
										function (li) {
											return elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2('li', li)
													]));
										},
										A2(
											elm$core$List$map,
											elm$json$Json$Encode$list(author$project$Document$Json$DocumentSerializer$encodeTextBlockPrimitive),
											liList)))
								])))
					]));
		case 'Heading':
			var attrs = tbElem.a;
			var _n1 = tbElem.b;
			var level = _n1.a;
			var s = _n1.b;
			return elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Heading',
						elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'attrs',
									author$project$Document$Json$DocumentSerializer$encodeDocAttributes(attrs)),
									_Utils_Tuple2(
									'level',
									elm$json$Json$Encode$int(level)),
									_Utils_Tuple2(
									'value',
									elm$json$Json$Encode$string(s))
								])))
					]));
		default:
			var prim = tbElem.a;
			return elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'TBPrimitive',
						author$project$Document$Json$DocumentSerializer$encodeTextBlockPrimitive(prim))
					]));
	}
};
var author$project$Document$Json$DocumentSerializer$encodeNewsContent = function (_n0) {
	var tbElems = _n0.tbElems;
	var attrs = _n0.attrs;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'tbElems',
				A2(elm$json$Json$Encode$list, author$project$Document$Json$DocumentSerializer$encodeTextBlockElement, tbElems)),
				_Utils_Tuple2(
				'attrs',
				author$project$Document$Json$DocumentSerializer$encodeDocAttributes(attrs))
			]));
};
var author$project$Document$Json$DocumentSerializer$encodeNews = function (_n0) {
	var title = _n0.title;
	var date = _n0.date;
	var content = _n0.content;
	var pic = _n0.pic;
	var uuid = _n0.uuid;
	var expiry = _n0.expiry;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'title',
				elm$json$Json$Encode$string(title)),
				_Utils_Tuple2(
				'date',
				elm$json$Json$Encode$int(
					elm$time$Time$posixToMillis(date))),
				_Utils_Tuple2(
				'content',
				A2(
					elm$core$Maybe$withDefault,
					elm$json$Json$Encode$null,
					A2(elm$core$Maybe$map, author$project$Document$Json$DocumentSerializer$encodeNewsContent, content))),
				_Utils_Tuple2(
				'pic',
				A2(
					elm$core$Maybe$withDefault,
					elm$json$Json$Encode$null,
					A2(
						elm$core$Maybe$map,
						function (_n1) {
							var url = _n1.url;
							var width = _n1.width;
							var height = _n1.height;
							return elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'url',
										elm$json$Json$Encode$string(url)),
										_Utils_Tuple2(
										'width',
										elm$json$Json$Encode$int(width)),
										_Utils_Tuple2(
										'height',
										elm$json$Json$Encode$int(height))
									]));
						},
						pic))),
				_Utils_Tuple2(
				'uuid',
				elm$json$Json$Encode$string(
					TSFoster$elm_uuid$UUID$canonical(uuid))),
				_Utils_Tuple2(
				'expiry',
				elm$json$Json$Encode$int(
					elm$time$Time$posixToMillis(expiry)))
			]));
};
var author$project$NewsEditor$NewsEditor$setNews = F3(
	function (currentTime, news, sessionId) {
		var datedNews = _Utils_update(
			news,
			{date: currentTime});
		var body = elm$http$Http$jsonBody(
			elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'news',
						author$project$Document$Json$DocumentSerializer$encodeNews(datedNews)),
						_Utils_Tuple2(
						'sessionId',
						elm$json$Json$Encode$string(sessionId))
					])));
		return elm$http$Http$task(
			{
				body: body,
				headers: _List_Nil,
				method: 'Post',
				resolver: author$project$Internals$CommonHelpers$jsonResolver(author$project$NewsEditor$NewsEditor$decodeSuccess),
				timeout: elm$core$Maybe$Nothing,
				url: 'setNews.php'
			});
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$parserOutput = function (model) {
	return {attrs: model.wholeTextBlocAttr, tbElems: model.output};
};
var andrewMacmurray$elm_delay$Delay$Millisecond = {$: 'Millisecond'};
var andrewMacmurray$elm_delay$Delay$Duration = F2(
	function (a, b) {
		return {$: 'Duration', a: a, b: b};
	});
var elm$core$Process$sleep = _Process_sleep;
var andrewMacmurray$elm_delay$Delay$after_ = F2(
	function (time, msg) {
		return A2(
			elm$core$Task$perform,
			elm$core$Basics$always(msg),
			elm$core$Process$sleep(time));
	});
var andrewMacmurray$elm_delay$Delay$Minute = {$: 'Minute'};
var andrewMacmurray$elm_delay$Delay$Second = {$: 'Second'};
var andrewMacmurray$elm_delay$Delay$toMillis = function (_n0) {
	var t = _n0.a;
	var u = _n0.b;
	switch (u.$) {
		case 'Millisecond':
			return t;
		case 'Second':
			return 1000 * t;
		case 'Minute':
			return andrewMacmurray$elm_delay$Delay$toMillis(
				A2(andrewMacmurray$elm_delay$Delay$Duration, 60 * t, andrewMacmurray$elm_delay$Delay$Second));
		default:
			return andrewMacmurray$elm_delay$Delay$toMillis(
				A2(andrewMacmurray$elm_delay$Delay$Duration, 60 * t, andrewMacmurray$elm_delay$Delay$Minute));
	}
};
var andrewMacmurray$elm_delay$Delay$after = F3(
	function (time, unit, msg) {
		return A2(
			andrewMacmurray$elm_delay$Delay$after_,
			andrewMacmurray$elm_delay$Delay$toMillis(
				A2(andrewMacmurray$elm_delay$Delay$Duration, time, unit)),
			msg);
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetSelection = {$: 'SetSelection'};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$encodeSelection = F2(
	function (start, stop) {
		return elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'start',
					elm$json$Json$Encode$int(start)),
					_Utils_Tuple2(
					'stop',
					elm$json$Json$Encode$int(stop))
				]));
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$findNextAvailableUid = function (trackedData) {
	return function (n) {
		return n + 1;
	}(
		A3(
			elm$core$List$foldr,
			elm$core$Basics$max,
			0,
			elm$core$Dict$keys(trackedData)));
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$getSelectedTrackedData = F2(
	function (mbCursorPos, trackedDataDict) {
		if (mbCursorPos.$ === 'Nothing') {
			return elm$core$Maybe$Nothing;
		} else {
			var cursorPos = mbCursorPos.a;
			var isCursorInTrackedData = function (td) {
				return (_Utils_cmp(cursorPos, td.meta.start) > -1) && (_Utils_cmp(cursorPos, td.meta.stop) < 0);
			};
			return elm$core$List$head(
				A2(
					elm$core$List$filter,
					isCursorInTrackedData,
					A2(
						elm$core$List$map,
						elm$core$Tuple$second,
						elm$core$Dict$toList(trackedDataDict))));
		}
	});
var elm$core$Result$withDefault = F2(
	function (def, result) {
		if (result.$ === 'Ok') {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$hexColorToDocColor = function (hexColor) {
	var hexColor_ = elm$core$String$toLower(hexColor);
	var red = A2(
		elm$core$Result$withDefault,
		0,
		rtfeldman$elm_hex$Hex$fromString(
			A2(elm$core$String$left, 2, hexColor_)));
	var green = A2(
		elm$core$Result$withDefault,
		0,
		rtfeldman$elm_hex$Hex$fromString(
			A2(
				elm$core$String$left,
				2,
				A2(elm$core$String$dropLeft, 2, hexColor_))));
	var blue = A2(
		elm$core$Result$withDefault,
		0,
		rtfeldman$elm_hex$Hex$fromString(
			A2(
				elm$core$String$left,
				2,
				A2(elm$core$String$dropLeft, 4, hexColor_))));
	return A3(author$project$Document$Document$DocColor, red / 255, green / 255, blue / 255);
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$insertTagHelper = F4(
	function (rawInput, selection, nextUid, tagname) {
		if (selection.$ === 'Nothing') {
			return elm$core$Maybe$Nothing;
		} else {
			var start = selection.a.start;
			var finish = selection.a.finish;
			var sel = selection.a.sel;
			var secondHalf = A2(elm$core$String$dropLeft, finish, rawInput);
			var needSpace = function (s) {
				return !(A2(elm$core$String$startsWith, '.', s) || A2(elm$core$String$startsWith, ',', s));
			}(
				elm$core$String$trim(secondHalf));
			var newLink = ' <' + (tagname + (' ' + (elm$core$String$fromInt(nextUid) + ('> ' + (sel + (needSpace ? ' </> ' : '</>'))))));
			var firstHalf = A2(elm$core$String$left, start, rawInput);
			return elm$core$Maybe$Just(
				_Utils_ap(
					firstHalf,
					_Utils_ap(newLink, secondHalf)));
		}
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$insertTrackingTag = F4(
	function (rawInput, selection, nextUid, tdKind) {
		switch (tdKind.$) {
			case 'InternalLink':
				return A4(author$project$PageEditor$EditorPlugins$TextBlockPlugin$insertTagHelper, rawInput, selection, nextUid, 'lien-interne');
			case 'ExternalLink':
				return A4(author$project$PageEditor$EditorPlugins$TextBlockPlugin$insertTagHelper, rawInput, selection, nextUid, 'lien-externe');
			case 'Heading':
				return A4(author$project$PageEditor$EditorPlugins$TextBlockPlugin$insertTagHelper, rawInput, selection, nextUid, 'titre');
			default:
				return A4(author$project$PageEditor$EditorPlugins$TextBlockPlugin$insertTagHelper, rawInput, selection, nextUid, 'style');
		}
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$isBackgroundColorAttr = function (a) {
	if (a.$ === 'BackgroundColor') {
		return true;
	} else {
		return false;
	}
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$isFontAttr = function (a) {
	if (a.$ === 'Font') {
		return true;
	} else {
		return false;
	}
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$isFontColorAttr = function (a) {
	if (a.$ === 'FontColor') {
		return true;
	} else {
		return false;
	}
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$isFontSizeAttr = function (a) {
	if (a.$ === 'FontSize') {
		return true;
	} else {
		return false;
	}
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$updateAttrs = F4(
	function (p, attrWrapper, val, attrs) {
		var helper = F2(
			function (acc, xs) {
				helper:
				while (true) {
					if (!xs.b) {
						return elm$core$List$reverse(
							A2(
								elm$core$List$cons,
								attrWrapper(val),
								acc));
					} else {
						var x = xs.a;
						var xs_ = xs.b;
						if (_Utils_eq(
							attrWrapper(val),
							x)) {
							return _Utils_ap(
								elm$core$List$reverse(acc),
								xs_);
						} else {
							if (p(x)) {
								return _Utils_ap(
									elm$core$List$reverse(
										A2(
											elm$core$List$cons,
											attrWrapper(val),
											acc)),
									xs_);
							} else {
								var $temp$acc = A2(elm$core$List$cons, x, acc),
									$temp$xs = xs_;
								acc = $temp$acc;
								xs = $temp$xs;
								continue helper;
							}
						}
					}
				}
			});
		return A2(helper, _List_Nil, attrs);
	});
var author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData = function (a) {
	return {$: 'EditorPluginData', a: a};
};
var author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginQuit = {$: 'EditorPluginQuit'};
var author$project$PageTreeEditor$PageTreeEditor$SetInternalPage = function (a) {
	return {$: 'SetInternalPage', a: a};
};
var author$project$PageTreeEditor$PageTreeEditor$setInternalPageSelection = F2(
	function (model, path) {
		return A2(
			elm$core$Platform$Cmd$map,
			model.externalMsg,
			A2(
				elm$core$Task$perform,
				author$project$PageTreeEditor$PageTreeEditor$SetInternalPage,
				elm$core$Task$succeed(
					A2(elm$core$String$split, '/', path))));
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$update = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 'TextInput':
				var s = msg.a;
				var _n1 = A2(elm$parser$Parser$run, author$project$PageEditor$EditorPlugins$TextBlockPlugin$textBlock, s);
				if (_n1.$ === 'Ok') {
					var res = _n1.a;
					var newTrackedData = A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$updateTrackedData, model.trackedData, res);
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								currentTrackedData: A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$getSelectedTrackedData, model.cursorPos, newTrackedData),
								nextUid: author$project$PageEditor$EditorPlugins$TextBlockPlugin$findNextAvailableUid(newTrackedData),
								output: A2(
									elm$core$List$filterMap,
									author$project$PageEditor$EditorPlugins$TextBlockPlugin$toTextBlocElement(newTrackedData),
									res),
								parsedInput: elm$core$Result$Ok(res),
								rawInput: s,
								trackedData: newTrackedData
							}),
						elm$core$Platform$Cmd$batch(_List_Nil),
						elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				}
			case 'InsertTrackingTag':
				var tdKind = msg.a;
				var _n2 = A4(author$project$PageEditor$EditorPlugins$TextBlockPlugin$insertTrackingTag, model.rawInput, model.selected, model.nextUid, tdKind);
				if (_n2.$ === 'Nothing') {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				} else {
					var newRawInput = _n2.a;
					var newParsedInput = A2(elm$parser$Parser$run, author$project$PageEditor$EditorPlugins$TextBlockPlugin$textBlock, newRawInput);
					var newTrackedData = A2(
						elm$core$Result$withDefault,
						model.trackedData,
						A2(
							elm$core$Result$map,
							author$project$PageEditor$EditorPlugins$TextBlockPlugin$updateTrackedData(model.trackedData),
							newParsedInput));
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								currentTrackedData: A2(
									author$project$PageEditor$EditorPlugins$TextBlockPlugin$getSelectedTrackedData,
									A2(
										elm$core$Maybe$map,
										function (s) {
											return s.start + 1;
										},
										model.selected),
									newTrackedData),
								nextUid: author$project$PageEditor$EditorPlugins$TextBlockPlugin$findNextAvailableUid(newTrackedData),
								output: A2(
									elm$core$Result$withDefault,
									model.output,
									A2(
										elm$core$Result$map,
										elm$core$List$filterMap(
											author$project$PageEditor$EditorPlugins$TextBlockPlugin$toTextBlocElement(newTrackedData)),
										newParsedInput)),
								parsedInput: newParsedInput,
								rawInput: newRawInput,
								trackedData: newTrackedData
							}),
						A2(
							elm$core$Platform$Cmd$map,
							model.externalMsg,
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A3(andrewMacmurray$elm_delay$Delay$after, 5, andrewMacmurray$elm_delay$Delay$Millisecond, author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetSelection)
									]))),
						elm$core$Maybe$Nothing);
				}
			case 'NewSelection':
				var s = msg.a;
				var currentTrackedData = _Utils_eq(s.start, s.finish) ? A2(
					author$project$PageEditor$EditorPlugins$TextBlockPlugin$getSelectedTrackedData,
					elm$core$Maybe$Just(s.start),
					model.trackedData) : elm$core$Maybe$Nothing;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							currentTrackedData: currentTrackedData,
							cursorPos: _Utils_eq(s.start, s.finish) ? elm$core$Maybe$Just(s.start) : elm$core$Maybe$Nothing,
							selected: _Utils_eq(s.start, s.finish) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(s),
							setSelection: _Utils_eq(s.start, s.finish) ? A2(
								elm$core$Maybe$map,
								function (td) {
									return A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$encodeSelection, td.meta.start, td.meta.stop);
								},
								A2(
									author$project$PageEditor$EditorPlugins$TextBlockPlugin$getSelectedTrackedData,
									elm$core$Maybe$Just(s.start),
									model.trackedData)) : elm$core$Maybe$Nothing
						}),
					elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								function () {
								var _n3 = A2(
									elm$core$Maybe$map,
									function ($) {
										return $.dataKind;
									},
									currentTrackedData);
								if (((_n3.$ === 'Just') && (_n3.a.$ === 'InternalLink')) && (!_n3.a.a)) {
									var _n4 = _n3.a;
									var path = _n4.b;
									return A2(author$project$PageTreeEditor$PageTreeEditor$setInternalPageSelection, config.pageTreeEditor, path);
								} else {
									return elm$core$Platform$Cmd$none;
								}
							}()
							])),
					elm$core$Maybe$Nothing);
			case 'SetSelection':
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							setSelection: A2(
								elm$core$Maybe$map,
								function (td) {
									return A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$encodeSelection, td.meta.start, td.meta.stop);
								},
								model.currentTrackedData)
						}),
					elm$core$Platform$Cmd$batch(_List_Nil),
					elm$core$Maybe$Nothing);
			case 'SetTextBlocFont':
				var font = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							wholeTextBlocAttr: A4(author$project$PageEditor$EditorPlugins$TextBlockPlugin$updateAttrs, author$project$PageEditor$EditorPlugins$TextBlockPlugin$isFontAttr, author$project$Document$Document$Font, font, model.wholeTextBlocAttr)
						}),
					elm$core$Platform$Cmd$batch(_List_Nil),
					elm$core$Maybe$Nothing);
			case 'SetTextBlocFontSize':
				var fontSize = msg.a;
				var _n5 = elm$core$String$toInt(fontSize);
				if (_n5.$ === 'Nothing') {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				} else {
					var fSize = _n5.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								wholeTextBlocAttr: A4(author$project$PageEditor$EditorPlugins$TextBlockPlugin$updateAttrs, author$project$PageEditor$EditorPlugins$TextBlockPlugin$isFontSizeAttr, author$project$Document$Document$FontSize, fSize, model.wholeTextBlocAttr)
							}),
						elm$core$Platform$Cmd$batch(_List_Nil),
						elm$core$Maybe$Nothing);
				}
			case 'SetTextBlocAlignment':
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							wholeTextBlocAttr: A4(
								author$project$PageEditor$EditorPlugins$TextBlockPlugin$updateAttrs,
								function (a) {
									return _Utils_eq(a, author$project$Document$Document$Justify);
								},
								function (_n6) {
									return author$project$Document$Document$Justify;
								},
								_Utils_Tuple0,
								model.wholeTextBlocAttr)
						}),
					elm$core$Platform$Cmd$batch(_List_Nil),
					elm$core$Maybe$Nothing);
			case 'SetTextBlocBold':
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							wholeTextBlocAttr: A4(
								author$project$PageEditor$EditorPlugins$TextBlockPlugin$updateAttrs,
								function (a) {
									return _Utils_eq(a, author$project$Document$Document$Bold);
								},
								function (_n7) {
									return author$project$Document$Document$Bold;
								},
								_Utils_Tuple0,
								model.wholeTextBlocAttr)
						}),
					elm$core$Platform$Cmd$batch(_List_Nil),
					elm$core$Maybe$Nothing);
			case 'SetTextBlocItalic':
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							wholeTextBlocAttr: A4(
								author$project$PageEditor$EditorPlugins$TextBlockPlugin$updateAttrs,
								function (a) {
									return _Utils_eq(a, author$project$Document$Document$Italic);
								},
								function (_n8) {
									return author$project$Document$Document$Italic;
								},
								_Utils_Tuple0,
								model.wholeTextBlocAttr)
						}),
					elm$core$Platform$Cmd$batch(_List_Nil),
					elm$core$Maybe$Nothing);
			case 'SelectHeadingLevel':
				var strLevel = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							headingLevel: elm$core$String$toInt(strLevel)
						}),
					elm$core$Platform$Cmd$batch(_List_Nil),
					elm$core$Maybe$Nothing);
			case 'ConfirmHeadingLevel':
				var uid = msg.a;
				var _n9 = model.headingLevel;
				if (_n9.$ === 'Nothing') {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				} else {
					var level = _n9.a;
					var _n10 = A2(elm$core$Dict$get, uid, model.trackedData);
					if (_n10.$ === 'Nothing') {
						return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
					} else {
						var td = _n10.a;
						var attrs = td.attrs;
						var meta = td.meta;
						var dataKind = td.dataKind;
						var newTrackedData = _Utils_update(
							td,
							{
								dataKind: author$project$PageEditor$EditorPlugins$TextBlockPlugin$Heading(level)
							});
						var newTrackedDataDict = A3(elm$core$Dict$insert, uid, newTrackedData, model.trackedData);
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{
									currentTrackedData: elm$core$Maybe$Just(newTrackedData),
									headingLevel: elm$core$Maybe$Nothing,
									output: A2(
										elm$core$Result$withDefault,
										model.output,
										A2(
											elm$core$Result$map,
											elm$core$List$filterMap(
												author$project$PageEditor$EditorPlugins$TextBlockPlugin$toTextBlocElement(newTrackedDataDict)),
											model.parsedInput)),
									trackedData: newTrackedDataDict
								}),
							elm$core$Platform$Cmd$none,
							elm$core$Maybe$Nothing);
					}
				}
			case 'SetUrl':
				var uid = msg.a;
				var url = msg.b;
				var _n11 = A2(elm$core$Dict$get, uid, model.trackedData);
				if (_n11.$ === 'Nothing') {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				} else {
					var td = _n11.a;
					var attrs = td.attrs;
					var meta = td.meta;
					var dataKind = td.dataKind;
					var newTrackedData = _Utils_update(
						td,
						{
							dataKind: author$project$PageEditor$EditorPlugins$TextBlockPlugin$ExternalLink(url)
						});
					var newTrackedDataDict = A3(elm$core$Dict$insert, uid, newTrackedData, model.trackedData);
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								currentTrackedData: elm$core$Maybe$Just(newTrackedData),
								output: A2(
									elm$core$Result$withDefault,
									model.output,
									A2(
										elm$core$Result$map,
										elm$core$List$filterMap(
											author$project$PageEditor$EditorPlugins$TextBlockPlugin$toTextBlocElement(newTrackedDataDict)),
										model.parsedInput)),
								trackedData: newTrackedDataDict
							}),
						elm$core$Platform$Cmd$batch(_List_Nil),
						elm$core$Maybe$Nothing);
				}
			case 'SetInternalLinkKind':
				var uid = msg.a;
				var isDoc = msg.b;
				var _n12 = A2(elm$core$Dict$get, uid, model.trackedData);
				if (_n12.$ === 'Nothing') {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				} else {
					var td = _n12.a;
					var attrs = td.attrs;
					var meta = td.meta;
					var dataKind = td.dataKind;
					if (dataKind.$ === 'InternalLink') {
						var url = dataKind.b;
						var newTrackedData = _Utils_update(
							td,
							{
								dataKind: A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$InternalLink, isDoc, url)
							});
						var newTrackedDataDict = A3(elm$core$Dict$insert, uid, newTrackedData, model.trackedData);
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{
									currentTrackedData: elm$core$Maybe$Just(newTrackedData),
									trackedData: newTrackedDataDict
								}),
							elm$core$Platform$Cmd$none,
							elm$core$Maybe$Nothing);
					} else {
						return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
					}
				}
			case 'InternalUrlSelectorClick':
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{internalUrlSelectorOpen: !model.internalUrlSelectorOpen}),
					elm$core$Platform$Cmd$batch(_List_Nil),
					elm$core$Maybe$Nothing);
			case 'InternalUrlSelectorClickOff':
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{internalUrlSelectorOpen: false}),
					elm$core$Platform$Cmd$batch(_List_Nil),
					elm$core$Maybe$Nothing);
			case 'ConfirmInternalPageUrl':
				var uid = msg.a;
				var url = msg.b;
				var _n14 = A2(elm$core$Dict$get, uid, model.trackedData);
				if (_n14.$ === 'Nothing') {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				} else {
					var td = _n14.a;
					var attrs = td.attrs;
					var meta = td.meta;
					var dataKind = td.dataKind;
					var newTrackedData = _Utils_update(
						td,
						{
							dataKind: A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$InternalLink, false, url)
						});
					var newTrackedDataDict = A3(elm$core$Dict$insert, uid, newTrackedData, model.trackedData);
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								currentTrackedData: elm$core$Maybe$Just(newTrackedData),
								internalUrlSelectorOpen: false,
								output: A2(
									elm$core$Result$withDefault,
									model.output,
									A2(
										elm$core$Result$map,
										elm$core$List$filterMap(
											author$project$PageEditor$EditorPlugins$TextBlockPlugin$toTextBlocElement(newTrackedDataDict)),
										model.parsedInput)),
								trackedData: newTrackedDataDict
							}),
						elm$core$Platform$Cmd$none,
						elm$core$Maybe$Nothing);
				}
			case 'ConfirmFileUrl':
				var uid = msg.a;
				var url = msg.b;
				var _n15 = A2(elm$core$Dict$get, uid, model.trackedData);
				if (_n15.$ === 'Nothing') {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				} else {
					var td = _n15.a;
					var attrs = td.attrs;
					var meta = td.meta;
					var dataKind = td.dataKind;
					var newTrackedData = _Utils_update(
						td,
						{
							dataKind: A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$InternalLink, true, url)
						});
					var newTrackedDataDict = A3(elm$core$Dict$insert, uid, newTrackedData, model.trackedData);
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								currentTrackedData: elm$core$Maybe$Just(newTrackedData),
								internalUrlSelectorOpen: false,
								output: A2(
									elm$core$Result$withDefault,
									model.output,
									A2(
										elm$core$Result$map,
										elm$core$List$filterMap(
											author$project$PageEditor$EditorPlugins$TextBlockPlugin$toTextBlocElement(newTrackedDataDict)),
										model.parsedInput)),
								trackedData: newTrackedDataDict
							}),
						elm$core$Platform$Cmd$none,
						elm$core$Maybe$Nothing);
				}
			case 'SetTextColor':
				var uid = msg.a;
				var color = msg.b;
				var _n16 = A2(elm$core$Dict$get, uid, model.trackedData);
				if (_n16.$ === 'Nothing') {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				} else {
					var td = _n16.a;
					var attrs = td.attrs;
					var meta = td.meta;
					var dataKind = td.dataKind;
					var newAttrs = A4(
						author$project$PageEditor$EditorPlugins$TextBlockPlugin$updateAttrs,
						author$project$PageEditor$EditorPlugins$TextBlockPlugin$isFontColorAttr,
						author$project$Document$Document$FontColor,
						author$project$PageEditor$EditorPlugins$TextBlockPlugin$hexColorToDocColor(color),
						attrs);
					var newTrackedData = _Utils_update(
						td,
						{attrs: newAttrs});
					var newTrackedDataDict = A3(elm$core$Dict$insert, uid, newTrackedData, model.trackedData);
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								colorPickerOpen: elm$core$Maybe$Nothing,
								currentTrackedData: elm$core$Maybe$Just(newTrackedData),
								output: A2(
									elm$core$Result$withDefault,
									model.output,
									A2(
										elm$core$Result$map,
										elm$core$List$filterMap(
											author$project$PageEditor$EditorPlugins$TextBlockPlugin$toTextBlocElement(newTrackedDataDict)),
										model.parsedInput)),
								trackedData: newTrackedDataDict
							}),
						elm$core$Platform$Cmd$batch(_List_Nil),
						elm$core$Maybe$Nothing);
				}
			case 'SetBackgroundColor':
				var uid = msg.a;
				var color = msg.b;
				var _n17 = A2(elm$core$Dict$get, uid, model.trackedData);
				if (_n17.$ === 'Nothing') {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				} else {
					var td = _n17.a;
					var attrs = td.attrs;
					var meta = td.meta;
					var dataKind = td.dataKind;
					var newAttrs = A4(
						author$project$PageEditor$EditorPlugins$TextBlockPlugin$updateAttrs,
						author$project$PageEditor$EditorPlugins$TextBlockPlugin$isBackgroundColorAttr,
						author$project$Document$Document$BackgroundColor,
						author$project$PageEditor$EditorPlugins$TextBlockPlugin$hexColorToDocColor(color),
						attrs);
					var newTrackedData = _Utils_update(
						td,
						{attrs: newAttrs});
					var newTrackedDataDict = A3(elm$core$Dict$insert, uid, newTrackedData, model.trackedData);
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								colorPickerOpen: elm$core$Maybe$Nothing,
								currentTrackedData: elm$core$Maybe$Just(newTrackedData),
								output: A2(
									elm$core$Result$withDefault,
									model.output,
									A2(
										elm$core$Result$map,
										elm$core$List$filterMap(
											author$project$PageEditor$EditorPlugins$TextBlockPlugin$toTextBlocElement(newTrackedDataDict)),
										model.parsedInput)),
								trackedData: newTrackedDataDict
							}),
						elm$core$Platform$Cmd$batch(_List_Nil),
						elm$core$Maybe$Nothing);
				}
			case 'SetInlineFont':
				var uid = msg.a;
				var font = msg.b;
				var _n18 = A2(elm$core$Dict$get, uid, model.trackedData);
				if (_n18.$ === 'Nothing') {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				} else {
					var td = _n18.a;
					var attrs = td.attrs;
					var meta = td.meta;
					var dataKind = td.dataKind;
					var newAttrs = A4(author$project$PageEditor$EditorPlugins$TextBlockPlugin$updateAttrs, author$project$PageEditor$EditorPlugins$TextBlockPlugin$isFontAttr, author$project$Document$Document$Font, font, attrs);
					var newTrackedData = _Utils_update(
						td,
						{attrs: newAttrs});
					var newTrackedDataDict = A3(elm$core$Dict$insert, uid, newTrackedData, model.trackedData);
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								currentTrackedData: elm$core$Maybe$Just(newTrackedData),
								output: A2(
									elm$core$Result$withDefault,
									model.output,
									A2(
										elm$core$Result$map,
										elm$core$List$filterMap(
											author$project$PageEditor$EditorPlugins$TextBlockPlugin$toTextBlocElement(newTrackedDataDict)),
										model.parsedInput)),
								trackedData: newTrackedDataDict
							}),
						elm$core$Platform$Cmd$batch(_List_Nil),
						elm$core$Maybe$Nothing);
				}
			case 'SetInlineFontSize':
				var uid = msg.a;
				var fontSize = msg.b;
				var _n19 = elm$core$String$toInt(fontSize);
				if (_n19.$ === 'Nothing') {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				} else {
					var fSize = _n19.a;
					var _n20 = A2(elm$core$Dict$get, uid, model.trackedData);
					if (_n20.$ === 'Nothing') {
						return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
					} else {
						var td = _n20.a;
						var attrs = td.attrs;
						var meta = td.meta;
						var dataKind = td.dataKind;
						var newAttrs = A4(author$project$PageEditor$EditorPlugins$TextBlockPlugin$updateAttrs, author$project$PageEditor$EditorPlugins$TextBlockPlugin$isFontSizeAttr, author$project$Document$Document$FontSize, fSize, attrs);
						var newTrackedData = _Utils_update(
							td,
							{attrs: newAttrs});
						var newTrackedDataDict = A3(elm$core$Dict$insert, uid, newTrackedData, model.trackedData);
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{
									currentTrackedData: elm$core$Maybe$Just(newTrackedData),
									output: A2(
										elm$core$Result$withDefault,
										model.output,
										A2(
											elm$core$Result$map,
											elm$core$List$filterMap(
												author$project$PageEditor$EditorPlugins$TextBlockPlugin$toTextBlocElement(newTrackedDataDict)),
											model.parsedInput)),
									trackedData: newTrackedDataDict
								}),
							elm$core$Platform$Cmd$none,
							elm$core$Maybe$Nothing);
					}
				}
			case 'SetInlineBold':
				var uid = msg.a;
				var _n21 = A2(elm$core$Dict$get, uid, model.trackedData);
				if (_n21.$ === 'Nothing') {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				} else {
					var td = _n21.a;
					var attrs = td.attrs;
					var meta = td.meta;
					var dataKind = td.dataKind;
					var newAttrs = A4(
						author$project$PageEditor$EditorPlugins$TextBlockPlugin$updateAttrs,
						function (a) {
							return _Utils_eq(a, author$project$Document$Document$Bold);
						},
						function (_n22) {
							return author$project$Document$Document$Bold;
						},
						_Utils_Tuple0,
						attrs);
					var newTrackedData = _Utils_update(
						td,
						{attrs: newAttrs});
					var newTrackedDataDict = A3(elm$core$Dict$insert, uid, newTrackedData, model.trackedData);
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								currentTrackedData: elm$core$Maybe$Just(newTrackedData),
								output: A2(
									elm$core$Result$withDefault,
									model.output,
									A2(
										elm$core$Result$map,
										elm$core$List$filterMap(
											author$project$PageEditor$EditorPlugins$TextBlockPlugin$toTextBlocElement(newTrackedDataDict)),
										model.parsedInput)),
								trackedData: newTrackedDataDict
							}),
						elm$core$Platform$Cmd$batch(_List_Nil),
						elm$core$Maybe$Nothing);
				}
			case 'SetInlineItalic':
				var uid = msg.a;
				var _n23 = A2(elm$core$Dict$get, uid, model.trackedData);
				if (_n23.$ === 'Nothing') {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				} else {
					var td = _n23.a;
					var attrs = td.attrs;
					var meta = td.meta;
					var dataKind = td.dataKind;
					var newAttrs = A4(
						author$project$PageEditor$EditorPlugins$TextBlockPlugin$updateAttrs,
						function (a) {
							return _Utils_eq(a, author$project$Document$Document$Italic);
						},
						function (_n24) {
							return author$project$Document$Document$Italic;
						},
						_Utils_Tuple0,
						attrs);
					var newTrackedData = _Utils_update(
						td,
						{attrs: newAttrs});
					var newTrackedDataDict = A3(elm$core$Dict$insert, uid, newTrackedData, model.trackedData);
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								currentTrackedData: elm$core$Maybe$Just(newTrackedData),
								output: A2(
									elm$core$Result$withDefault,
									model.output,
									A2(
										elm$core$Result$map,
										elm$core$List$filterMap(
											author$project$PageEditor$EditorPlugins$TextBlockPlugin$toTextBlocElement(newTrackedDataDict)),
										model.parsedInput)),
								trackedData: newTrackedDataDict
							}),
						elm$core$Platform$Cmd$batch(_List_Nil),
						elm$core$Maybe$Nothing);
				}
			case 'ColorPickerClick':
				var name = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							colorPickerOpen: function () {
								var _n25 = model.colorPickerOpen;
								if (_n25.$ === 'Just') {
									return elm$core$Maybe$Nothing;
								} else {
									return elm$core$Maybe$Just(name);
								}
							}()
						}),
					elm$core$Platform$Cmd$batch(_List_Nil),
					elm$core$Maybe$Nothing);
			case 'ColorPickerClickOff':
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{colorPickerOpen: elm$core$Maybe$Nothing}),
					elm$core$Platform$Cmd$batch(_List_Nil),
					elm$core$Maybe$Nothing);
			case 'SaveAndQuit':
				return _Utils_Tuple3(
					model,
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Just(
						author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData(
							_Utils_Tuple2(model.output, model.wholeTextBlocAttr))));
			case 'Quit':
				return _Utils_Tuple3(
					model,
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginQuit));
			default:
				return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
		}
	});
var elm$core$Set$remove = F2(
	function (key, _n0) {
		var dict = _n0.a;
		return elm$core$Set$Set_elm_builtin(
			A2(elm$core$Dict$remove, key, dict));
	});
var author$project$NewsEditor$NewsEditor$internalUpdate = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 'LoadNews':
				var res = msg.a;
				if (res.$ === 'Ok') {
					var newsDict = res.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{loadingStatus: author$project$Internals$ToolHelpers$ToolLoadingSuccess, news: newsDict}),
						elm$core$Platform$Cmd$none);
				} else {
					var e = res.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								loadingStatus: author$project$Internals$ToolHelpers$ToolLoadingFailure('')
							}),
						elm$core$Platform$Cmd$none);
				}
			case 'ToogleNews':
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							buffer: A2(elm$core$Set$member, id, model.checkedNews) ? elm$core$Maybe$Nothing : A2(elm$core$Dict$get, id, model.news),
							checkedNews: A2(elm$core$Set$member, id, model.checkedNews) ? A2(elm$core$Set$remove, id, model.checkedNews) : A2(elm$core$Set$insert, id, model.checkedNews)
						}),
					elm$core$Platform$Cmd$none);
			case 'SetTitle':
				var title = msg.a;
				var baseNews = A2(elm$core$Maybe$withDefault, author$project$Document$Document$emptyNews, model.buffer);
				var newBuffer = _Utils_update(
					baseNews,
					{title: title});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							buffer: elm$core$Maybe$Just(newBuffer)
						}),
					elm$core$Platform$Cmd$none);
			case 'SetExpiry':
				var s = msg.a;
				var _n2 = A3(author$project$Internals$CommonHelpers$parseDate, model.currentTime, config.zone, s);
				if (_n2.$ === 'Nothing') {
					var baseNews = A2(elm$core$Maybe$withDefault, author$project$Document$Document$emptyNews, model.buffer);
					var newBuffer = _Utils_update(
						baseNews,
						{
							expiry: elm$time$Time$millisToPosix(0)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								buffer: elm$core$Maybe$Just(newBuffer),
								expiryBuffer: s
							}),
						elm$core$Platform$Cmd$none);
				} else {
					var _n3 = _n2.a;
					var day = _n3.a;
					var month = _n3.b;
					var year = _n3.c;
					var newTime = AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilToPosix(
						A8(AdrianRibao$elm_derberos_date$Derberos$Date$Core$newDateRecord, year, month, day, 0, 0, 0, 0, config.zone));
					var baseNews = A2(elm$core$Maybe$withDefault, author$project$Document$Document$emptyNews, model.buffer);
					var newBuffer = _Utils_update(
						baseNews,
						{expiry: newTime});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								buffer: elm$core$Maybe$Just(newBuffer),
								expiryBuffer: s
							}),
						elm$core$Platform$Cmd$none);
				}
			case 'EditContent':
				var baseContent = A2(
					elm$core$Maybe$withDefault,
					{attrs: _List_Nil, tbElems: _List_Nil},
					A2(
						elm$core$Maybe$andThen,
						function ($) {
							return $.content;
						},
						model.buffer));
				var _n4 = A3(
					author$project$PageEditor$EditorPlugins$TextBlockPlugin$init,
					baseContent.attrs,
					elm$core$Maybe$Just(baseContent.tbElems),
					A2(elm$core$Basics$composeL, model.externalMsg, author$project$NewsEditor$NewsEditor$TextBlockPluginMsg));
				var newTextBlockPlugin = _n4.a;
				var textBlockPluginCmds = _n4.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{newsEditorMode: author$project$NewsEditor$NewsEditor$NewsEditor, textBlockPlugin: newTextBlockPlugin}),
					textBlockPluginCmds);
			case 'ToNewsSelector':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{buffer: elm$core$Maybe$Nothing, checkedNews: elm$core$Set$empty, contentPreview: false, expiryBuffer: '', newsEditorMode: author$project$NewsEditor$NewsEditor$NewsSelector, picPickerOpen: false}),
					elm$core$Platform$Cmd$none);
			case 'ToogleContentPreview':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{contentPreview: !model.contentPreview}),
					elm$core$Platform$Cmd$none);
			case 'RemoveNews':
				return _Utils_Tuple2(
					model,
					A2(
						elm$core$Platform$Cmd$map,
						model.externalMsg,
						A2(
							author$project$Auth$AuthPlugin$cmdIfLogged,
							config.logInfo,
							author$project$NewsEditor$NewsEditor$removeNews(
								elm$core$Set$toList(model.checkedNews)))));
			case 'NewsRemoved':
				var ids = msg.a;
				var res = msg.b;
				if ((res.$ === 'Ok') && res.a) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								buffer: elm$core$Maybe$Nothing,
								checkedNews: elm$core$Set$empty,
								contentPreview: false,
								expiryBuffer: '',
								news: A3(
									elm$core$List$foldr,
									F2(
										function (id, acc) {
											return A2(elm$core$Dict$remove, id, acc);
										}),
									model.news,
									ids),
								newsEditorMode: author$project$NewsEditor$NewsEditor$NewsSelector,
								picPickerOpen: false
							}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'OpenPicPicker':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{picPickerOpen: true}),
					elm$core$Platform$Cmd$none);
			case 'ClosePicPicker':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{picPickerOpen: false}),
					elm$core$Platform$Cmd$none);
			case 'ConfirmPic':
				var pr = msg.a;
				if (pr.$ === 'PickedImage') {
					var url = pr.a.url;
					var width = pr.a.width;
					var height = pr.a.height;
					var newPic = A3(author$project$Document$Document$Pic, url, width, height);
					var baseNews = A2(elm$core$Maybe$withDefault, author$project$Document$Document$emptyNews, model.buffer);
					var newBuffer = _Utils_update(
						baseNews,
						{
							pic: elm$core$Maybe$Just(newPic)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								buffer: elm$core$Maybe$Just(newBuffer),
								picPickerOpen: false
							}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'SaveNews':
				var _n7 = _Utils_Tuple3(model.buffer, config.logInfo, model.seed);
				if (((_n7.a.$ === 'Just') && (_n7.b.$ === 'LoggedIn')) && (_n7.c.$ === 'Just')) {
					var news = _n7.a.a;
					var sessionId = _n7.b.a.sessionId;
					var seed = _n7.c.a;
					var _n8 = _Utils_eq(news.uuid, TSFoster$elm_uuid$UUID$nil) ? A2(elm$random$Random$step, TSFoster$elm_uuid$UUID$generator, seed) : _Utils_Tuple2(news.uuid, seed);
					var uuid = _n8.a;
					var newSeed = _n8.b;
					var newBuffer = _Utils_update(
						news,
						{uuid: uuid});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								buffer: elm$core$Maybe$Just(newBuffer),
								newsEditorMode: author$project$NewsEditor$NewsEditor$NewsSelector,
								seed: elm$core$Maybe$Just(newSeed)
							}),
						A2(
							elm$core$Platform$Cmd$map,
							model.externalMsg,
							A2(
								elm$core$Task$attempt,
								author$project$NewsEditor$NewsEditor$NewsSaved,
								A2(
									elm$core$Task$andThen,
									function (t) {
										return A3(author$project$NewsEditor$NewsEditor$setNews, t, newBuffer, sessionId);
									},
									elm$time$Time$now))));
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'NewsSaved':
				var res = msg.a;
				var _n9 = _Utils_Tuple2(res, model.buffer);
				if (((_n9.a.$ === 'Ok') && _n9.a.a) && (_n9.b.$ === 'Just')) {
					var n = _n9.b.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								buffer: elm$core$Maybe$Nothing,
								checkedNews: elm$core$Set$empty,
								contentPreview: false,
								expiryBuffer: '',
								news: A3(
									elm$core$Dict$insert,
									TSFoster$elm_uuid$UUID$canonical(n.uuid),
									_Utils_update(
										n,
										{date: model.currentTime}),
									model.news),
								picPickerOpen: false
							}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'DeleteNews':
				return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
			case 'TextBlockPluginMsg':
				var textBlockMsg = msg.a;
				var baseNews = A2(elm$core$Maybe$withDefault, author$project$Document$Document$emptyNews, model.buffer);
				var _n10 = A3(
					author$project$PageEditor$EditorPlugins$TextBlockPlugin$update,
					{pageTreeEditor: config.pageTreeEditor},
					textBlockMsg,
					model.textBlockPlugin);
				var newTextBlockPlugin = _n10.a;
				var textBlockPluginCmds = _n10.b;
				var mbEditorPluginResult = _n10.c;
				var newBuffer = _Utils_update(
					baseNews,
					{
						content: elm$core$Maybe$Just(
							author$project$PageEditor$EditorPlugins$TextBlockPlugin$parserOutput(newTextBlockPlugin))
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							buffer: elm$core$Maybe$Just(newBuffer),
							textBlockPlugin: newTextBlockPlugin
						}),
					elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[textBlockPluginCmds])));
			case 'SetTimeAndInitSeed':
				var t = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							currentTime: t,
							seed: elm$core$Maybe$Just(
								elm$random$Random$initialSeed(
									elm$time$Time$posixToMillis(t)))
						}),
					elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
		}
	});
var author$project$NewsEditor$NewsEditor$update = F3(
	function (config, msg, model) {
		var _n0 = A3(author$project$NewsEditor$NewsEditor$internalUpdate, config, msg, model);
		var newModel = _n0.a;
		var cmds = _n0.b;
		return _Utils_Tuple2(newModel, cmds);
	});
var author$project$PageEditor$Internals$DocumentZipper$extractDoc = function (_n0) {
	var current = _n0.current;
	var contexts = _n0.contexts;
	return current;
};
var author$project$PageEditor$Internals$DocumentZipper$zipUp = function (_n0) {
	var current = _n0.current;
	var contexts = _n0.contexts;
	if (!contexts.b) {
		return elm$core$Maybe$Nothing;
	} else {
		var parent = contexts.a.parent;
		var left = contexts.a.left;
		var right = contexts.a.right;
		var cs = contexts.b;
		return elm$core$Maybe$Just(
			{
				contexts: cs,
				current: A2(
					author$project$Document$Document$Container,
					parent,
					_Utils_ap(
						left,
						_Utils_ap(
							_List_fromArray(
								[current]),
							right)))
			});
	}
};
var author$project$PageEditor$Internals$DocumentZipper$rewind = function (docZipper) {
	rewind:
	while (true) {
		var _n0 = author$project$PageEditor$Internals$DocumentZipper$zipUp(docZipper);
		if (_n0.$ === 'Nothing') {
			return docZipper;
		} else {
			var docZipper_ = _n0.a;
			var $temp$docZipper = docZipper_;
			docZipper = $temp$docZipper;
			continue rewind;
		}
	}
};
var author$project$PageEditor$PageEditor$currentDocument = function (model) {
	return author$project$PageEditor$Internals$DocumentZipper$extractDoc(
		author$project$PageEditor$Internals$DocumentZipper$rewind(model.document));
};
var author$project$Document$Document$Fiches = function (a) {
	return {$: 'Fiches', a: a};
};
var author$project$Document$Document$Gallery = function (a) {
	return {$: 'Gallery', a: a};
};
var author$project$Document$Document$Image = function (a) {
	return {$: 'Image', a: a};
};
var author$project$Document$Document$PictureLinks = function (a) {
	return {$: 'PictureLinks', a: a};
};
var author$project$Document$Document$Table = function (a) {
	return {$: 'Table', a: a};
};
var author$project$Document$Document$TextBlock = function (a) {
	return {$: 'TextBlock', a: a};
};
var author$project$Document$Document$Video = function (a) {
	return {$: 'Video', a: a};
};
var author$project$Document$Document$getAttrs = function (doc) {
	if (doc.$ === 'Cell') {
		var cellContent = doc.a.cellContent;
		var id = doc.a.id;
		var attrs = doc.a.attrs;
		return attrs;
	} else {
		var containerLabel = doc.a.containerLabel;
		var id = doc.a.id;
		var attrs = doc.a.attrs;
		return attrs;
	}
};
var author$project$Document$Document$getHtmlId = function (doc) {
	if (doc.$ === 'Cell') {
		var cv = doc.a;
		return cv.id.htmlId;
	} else {
		var cv = doc.a;
		return cv.id.htmlId;
	}
};
var author$project$Document$Document$getId = function (doc) {
	if (doc.$ === 'Cell') {
		var cellContent = doc.a.cellContent;
		var id = doc.a.id;
		var attrs = doc.a.attrs;
		return id;
	} else {
		var containerLabel = doc.a.containerLabel;
		var id = doc.a.id;
		var attrs = doc.a.attrs;
		return id;
	}
};
var author$project$Document$Document$hasUid = F2(
	function (id, document) {
		if (document.$ === 'Container') {
			var nv = document.a;
			return _Utils_eq(id, nv.id.uid);
		} else {
			var lv = document.a;
			return _Utils_eq(id, lv.id.uid);
		}
	});
var author$project$Document$DocumentViews$StyleSheets$PreviewTablet = {$: 'PreviewTablet'};
var author$project$Document$Document$CellValue = F3(
	function (cellContent, id, attrs) {
		return {attrs: attrs, cellContent: cellContent, id: id};
	});
var author$project$Document$Document$BlockLinks = function (a) {
	return {$: 'BlockLinks', a: a};
};
var author$project$Document$Document$Calendar = {$: 'Calendar'};
var author$project$Document$Document$CalendarWidget = {$: 'CalendarWidget'};
var author$project$Document$Document$CustomElement = function (a) {
	return {$: 'CustomElement', a: a};
};
var author$project$Document$Document$DronePanorama = {$: 'DronePanorama'};
var author$project$Document$Document$NewsBlock = {$: 'NewsBlock'};
var author$project$Document$Document$PictureLink = F2(
	function (url, img) {
		return {img: img, url: url};
	});
var author$project$Document$Document$WeatherWidget = {$: 'WeatherWidget'};
var author$project$Document$Document$BlockLinkMeta = F4(
	function (image, label, targetBlank, url) {
		return {image: image, label: label, targetBlank: targetBlank, url: url};
	});
var author$project$Document$Json$DocumentDecoder$decodeBlockLink = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'url',
	elm$json$Json$Decode$string,
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'targetBlank',
		elm$json$Json$Decode$bool,
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'label',
			elm$json$Json$Decode$string,
			A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'image',
				elm$json$Json$Decode$string,
				elm$json$Json$Decode$succeed(author$project$Document$Document$BlockLinkMeta)))));
var author$project$Document$Document$GalleryMeta = F3(
	function (uuid, title, images) {
		return {images: images, title: title, uuid: uuid};
	});
var author$project$Document$Document$ImageMeta = F3(
	function (src, caption, size) {
		return {caption: caption, size: size, src: src};
	});
var author$project$Document$Document$ImgSize = F2(
	function (imgWidth, imgHeight) {
		return {imgHeight: imgHeight, imgWidth: imgWidth};
	});
var author$project$Document$Json$DocumentDecoder$decodeImageSize = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'imgHeight',
	elm$json$Json$Decode$int,
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'imgWidth',
		elm$json$Json$Decode$int,
		elm$json$Json$Decode$succeed(author$project$Document$Document$ImgSize)));
var author$project$Document$Document$Inline = F2(
	function (a, b) {
		return {$: 'Inline', a: a, b: b};
	});
var author$project$Document$Document$UrlSrc = function (a) {
	return {$: 'UrlSrc', a: a};
};
var author$project$Document$Json$DocumentDecoder$decodeImgSource = elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'UrlSrc',
			elm$json$Json$Decode$string,
			elm$json$Json$Decode$succeed(author$project$Document$Document$UrlSrc)),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['Inline', 'contents']),
			elm$json$Json$Decode$string,
			A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
				_List_fromArray(
					['Inline', 'filename']),
				elm$json$Json$Decode$string,
				elm$json$Json$Decode$succeed(author$project$Document$Document$Inline)))
		]));
var author$project$Document$Json$DocumentDecoder$decodeImageMeta = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'size',
	author$project$Document$Json$DocumentDecoder$decodeImageSize,
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'caption',
		elm$json$Json$Decode$nullable(elm$json$Json$Decode$string),
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'src',
			author$project$Document$Json$DocumentDecoder$decodeImgSource,
			elm$json$Json$Decode$succeed(author$project$Document$Document$ImageMeta))));
var author$project$Document$Json$DocumentDecoder$decodeGalleryMeta = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'images',
	elm$json$Json$Decode$list(author$project$Document$Json$DocumentDecoder$decodeImageMeta),
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'title',
		elm$json$Json$Decode$string,
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'uuid',
			author$project$Document$Json$DocumentDecoder$decodeUUID,
			elm$json$Json$Decode$succeed(author$project$Document$Document$GalleryMeta))));
var author$project$Document$Document$TableMeta = F4(
	function (style, nbrRows, nbrCols, data) {
		return {data: data, nbrCols: nbrCols, nbrRows: nbrRows, style: style};
	});
var author$project$Document$Json$DocumentDecoder$decodeTableMeta = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'data',
	elm$json$Json$Decode$list(
		A2(
			elm$json$Json$Decode$map,
			elm$core$Array$fromList,
			elm$json$Json$Decode$list(elm$json$Json$Decode$string))),
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'nbrCols',
		elm$json$Json$Decode$int,
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'nbrRows',
			elm$json$Json$Decode$int,
			A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'style',
				elm$json$Json$Decode$string,
				elm$json$Json$Decode$succeed(author$project$Document$Document$TableMeta)))));
var author$project$Document$Document$VideoMeta = F9(
	function (src, size, frameBorder, suggestions, controls, privacy, title, startAt, hosting) {
		return {controls: controls, frameBorder: frameBorder, hosting: hosting, privacy: privacy, size: size, src: src, startAt: startAt, suggestions: suggestions, title: title};
	});
var author$project$Document$Document$Youtube = {$: 'Youtube'};
var author$project$Document$Json$DocumentDecoder$decodeVideoHost = A2(
	elm$json$Json$Decode$andThen,
	function (str) {
		if (str === 'Youtube') {
			return elm$json$Json$Decode$succeed(author$project$Document$Document$Youtube);
		} else {
			var somethingElse = str;
			return elm$json$Json$Decode$fail('Unknown VideoHost: ' + somethingElse);
		}
	},
	elm$json$Json$Decode$string);
var author$project$Document$Json$DocumentDecoder$decodeVideoSize = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'videoHeight',
	elm$json$Json$Decode$int,
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'videoWidth',
		elm$json$Json$Decode$int,
		elm$json$Json$Decode$succeed(author$project$Document$Document$VideoSize)));
var author$project$Document$Json$DocumentDecoder$decodeVideoMeta = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'hosting',
	author$project$Document$Json$DocumentDecoder$decodeVideoHost,
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'startAt',
		elm$json$Json$Decode$nullable(elm$json$Json$Decode$int),
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'title',
			elm$json$Json$Decode$bool,
			A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'privacy',
				elm$json$Json$Decode$bool,
				A3(
					NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'controls',
					elm$json$Json$Decode$bool,
					A3(
						NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'suggestions',
						elm$json$Json$Decode$bool,
						A3(
							NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'frameBorder',
							elm$json$Json$Decode$bool,
							A3(
								NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
								'size',
								author$project$Document$Json$DocumentDecoder$decodeVideoSize,
								A3(
									NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
									'src',
									elm$json$Json$Decode$string,
									elm$json$Json$Decode$succeed(author$project$Document$Document$VideoMeta))))))))));
var author$project$Document$Json$DocumentDecoder$decodeCellContent = elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Image',
			author$project$Document$Json$DocumentDecoder$decodeImageMeta,
			elm$json$Json$Decode$succeed(author$project$Document$Document$Image)),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Video',
			author$project$Document$Json$DocumentDecoder$decodeVideoMeta,
			elm$json$Json$Decode$succeed(author$project$Document$Document$Video)),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Table',
			author$project$Document$Json$DocumentDecoder$decodeTableMeta,
			elm$json$Json$Decode$succeed(author$project$Document$Document$Table)),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'CustomElement',
			elm$json$Json$Decode$string,
			elm$json$Json$Decode$succeed(author$project$Document$Document$CustomElement)),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'BlockLinks',
			elm$json$Json$Decode$list(author$project$Document$Json$DocumentDecoder$decodeBlockLink),
			elm$json$Json$Decode$succeed(author$project$Document$Document$BlockLinks)),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Fiches',
			elm$json$Json$Decode$list(elm$json$Json$Decode$string),
			elm$json$Json$Decode$succeed(author$project$Document$Document$Fiches)),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'TextBlock',
			elm$json$Json$Decode$list(author$project$Document$Json$DocumentDecoder$decodeTextBlockElement),
			elm$json$Json$Decode$succeed(author$project$Document$Document$TextBlock)),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'PictureLinks',
			elm$json$Json$Decode$list(
				A3(
					NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'img',
					author$project$Document$Json$DocumentDecoder$decodeImageMeta,
					A3(
						NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'url',
						elm$json$Json$Decode$string,
						elm$json$Json$Decode$succeed(author$project$Document$Document$PictureLink)))),
			elm$json$Json$Decode$succeed(author$project$Document$Document$PictureLinks)),
			A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Gallery',
			author$project$Document$Json$DocumentDecoder$decodeGalleryMeta,
			elm$json$Json$Decode$succeed(author$project$Document$Document$Gallery)),
			A2(
			elm$json$Json$Decode$andThen,
			function (str) {
				switch (str) {
					case 'EmptyCell':
						return elm$json$Json$Decode$succeed(author$project$Document$Document$EmptyCell);
					case 'NewsBlock':
						return elm$json$Json$Decode$succeed(author$project$Document$Document$NewsBlock);
					case 'Calendar':
						return elm$json$Json$Decode$succeed(author$project$Document$Document$Calendar);
					case 'CalendarWidget':
						return elm$json$Json$Decode$succeed(author$project$Document$Document$CalendarWidget);
					case 'DronePanorama':
						return elm$json$Json$Decode$succeed(author$project$Document$Document$DronePanorama);
					case 'WeatherWidget':
						return elm$json$Json$Decode$succeed(author$project$Document$Document$WeatherWidget);
					default:
						var somethingElse = str;
						return elm$json$Json$Decode$fail('Unknown CellContent: ' + somethingElse);
				}
			},
			elm$json$Json$Decode$string)
		]));
var author$project$Document$Document$Id = F4(
	function (uid, docStyleId, htmlId, classes) {
		return {classes: classes, docStyleId: docStyleId, htmlId: htmlId, uid: uid};
	});
var author$project$Document$Json$DocumentDecoder$decodeId = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'classes',
	A2(
		elm$json$Json$Decode$map,
		elm$core$Set$fromList,
		elm$json$Json$Decode$list(elm$json$Json$Decode$string)),
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'htmlId',
		elm$json$Json$Decode$nullable(elm$json$Json$Decode$string),
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'docStyleId',
			elm$json$Json$Decode$nullable(elm$json$Json$Decode$string),
			A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'uid',
				elm$json$Json$Decode$int,
				elm$json$Json$Decode$succeed(author$project$Document$Document$Id)))));
var author$project$Document$Json$DocumentDecoder$decodeCellValue = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'attrs',
	author$project$Document$Json$DocumentDecoder$decodeDocAttributes,
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'id',
		author$project$Document$Json$DocumentDecoder$decodeId,
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'cellContent',
			author$project$Document$Json$DocumentDecoder$decodeCellContent,
			elm$json$Json$Decode$succeed(author$project$Document$Document$CellValue))));
var author$project$Document$Document$ContainerValue = F3(
	function (containerLabel, id, attrs) {
		return {attrs: attrs, containerLabel: containerLabel, id: id};
	});
var author$project$Document$Document$DocRow = {$: 'DocRow'};
var author$project$Document$Document$ResponsiveBloc = {$: 'ResponsiveBloc'};
var author$project$Document$Document$TextColumn = {$: 'TextColumn'};
var author$project$Document$Json$DocumentDecoder$decodeContainerLabel = A2(
	elm$json$Json$Decode$andThen,
	function (str) {
		switch (str) {
			case 'DocColumn':
				return elm$json$Json$Decode$succeed(author$project$Document$Document$DocColumn);
			case 'DocRow':
				return elm$json$Json$Decode$succeed(author$project$Document$Document$DocRow);
			case 'TextColumn':
				return elm$json$Json$Decode$succeed(author$project$Document$Document$TextColumn);
			case 'ResponsiveBloc':
				return elm$json$Json$Decode$succeed(author$project$Document$Document$ResponsiveBloc);
			default:
				var somethingElse = str;
				return elm$json$Json$Decode$fail('Unknown ContainerLabel: ' + somethingElse);
		}
	},
	elm$json$Json$Decode$string);
var author$project$Document$Json$DocumentDecoder$decodeContainerValue = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'attrs',
	author$project$Document$Json$DocumentDecoder$decodeDocAttributes,
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'id',
		author$project$Document$Json$DocumentDecoder$decodeId,
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'containerLabel',
			author$project$Document$Json$DocumentDecoder$decodeContainerLabel,
			elm$json$Json$Decode$succeed(author$project$Document$Document$ContainerValue))));
var elm$json$Json$Decode$lazy = function (thunk) {
	return A2(
		elm$json$Json$Decode$andThen,
		thunk,
		elm$json$Json$Decode$succeed(_Utils_Tuple0));
};
function author$project$Document$Json$DocumentDecoder$cyclic$decodeDocument() {
	return elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
				_List_fromArray(
					['Container', 'children']),
				elm$json$Json$Decode$list(
					elm$json$Json$Decode$lazy(
						function (_n0) {
							return author$project$Document$Json$DocumentDecoder$cyclic$decodeDocument();
						})),
				A3(
					NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
					_List_fromArray(
						['Container', 'ContainerValue']),
					author$project$Document$Json$DocumentDecoder$decodeContainerValue,
					elm$json$Json$Decode$succeed(author$project$Document$Document$Container))),
				A3(
				NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'Cell',
				author$project$Document$Json$DocumentDecoder$decodeCellValue,
				elm$json$Json$Decode$succeed(author$project$Document$Document$Cell))
			]));
}
try {
	var author$project$Document$Json$DocumentDecoder$decodeDocument = author$project$Document$Json$DocumentDecoder$cyclic$decodeDocument();
	author$project$Document$Json$DocumentDecoder$cyclic$decodeDocument = function () {
		return author$project$Document$Json$DocumentDecoder$decodeDocument;
	};
} catch ($) {
throw 'Some top-level definitions from `Document.Json.DocumentDecoder` are causing infinite recursion:\n\n  ┌─────┐\n  │    decodeDocument\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.0/halting-problem to learn how to fix it!';}
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Left = {$: 'Left'};
var elm$core$List$unzip = function (pairs) {
	var step = F2(
		function (_n0, _n1) {
			var x = _n0.a;
			var y = _n0.b;
			var xs = _n1.a;
			var ys = _n1.b;
			return _Utils_Tuple2(
				A2(elm$core$List$cons, x, xs),
				A2(elm$core$List$cons, y, ys));
		});
	return A3(
		elm$core$List$foldr,
		step,
		_Utils_Tuple2(_List_Nil, _List_Nil),
		pairs);
};
var elm_community$list_extra$List$Extra$zip = elm$core$List$map2(elm$core$Tuple$pair);
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'SetSelector':
				var sel = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{selector: sel}),
					elm$core$Maybe$Nothing);
			case 'ConfirmDocUrl':
				var url = msg.a;
				var _n1 = model.selectedBlock;
				if (_n1.$ === 'Just') {
					var id = _n1.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								blocks: A3(
									elm$core$Dict$update,
									id,
									function (mbVal) {
										if (mbVal.$ === 'Just') {
											var val = mbVal.a;
											return elm$core$Maybe$Just(
												_Utils_update(
													val,
													{targetBlank: true, url: url}));
										} else {
											return elm$core$Maybe$Nothing;
										}
									},
									model.blocks),
								selector: author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Closed
							}),
						elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
				}
			case 'ConfirmInternalPageUrl':
				var url = msg.a;
				var _n3 = model.selectedBlock;
				if (_n3.$ === 'Just') {
					var id = _n3.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								blocks: A3(
									elm$core$Dict$update,
									id,
									function (mbVal) {
										if (mbVal.$ === 'Just') {
											var val = mbVal.a;
											return elm$core$Maybe$Just(
												_Utils_update(
													val,
													{targetBlank: false, url: url}));
										} else {
											return elm$core$Maybe$Nothing;
										}
									},
									model.blocks),
								selector: author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Closed
							}),
						elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
				}
			case 'ExternalLinkPromptInput':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							externalLinkInput: elm$core$Maybe$Just(s)
						}),
					elm$core$Maybe$Nothing);
			case 'ConfirmExternalLink':
				var _n5 = _Utils_Tuple2(model.selectedBlock, model.externalLinkInput);
				if ((_n5.a.$ === 'Just') && (_n5.b.$ === 'Just')) {
					var id = _n5.a.a;
					var url = _n5.b.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								blocks: A3(
									elm$core$Dict$update,
									id,
									function (mbVal) {
										if (mbVal.$ === 'Just') {
											var val = mbVal.a;
											return elm$core$Maybe$Just(
												_Utils_update(
													val,
													{targetBlank: true, url: url}));
										} else {
											return elm$core$Maybe$Nothing;
										}
									},
									model.blocks),
								selector: author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Closed
							}),
						elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
				}
			case 'SelectImage':
				var url = msg.a;
				var _n7 = model.selectedBlock;
				if (_n7.$ === 'Just') {
					var id = _n7.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								blocks: A3(
									elm$core$Dict$update,
									id,
									function (mbVal) {
										if (mbVal.$ === 'Just') {
											var val = mbVal.a;
											return elm$core$Maybe$Just(
												_Utils_update(
													val,
													{image: url}));
										} else {
											return elm$core$Maybe$Nothing;
										}
									},
									model.blocks),
								externalLinkInput: elm$core$Maybe$Nothing,
								labelPromptInput: elm$core$Maybe$Nothing,
								selector: author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Closed
							}),
						elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
				}
			case 'LabelPromptInput':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							labelPromptInput: elm$core$Maybe$Just(s)
						}),
					elm$core$Maybe$Nothing);
			case 'UpdateLabel':
				var _n9 = _Utils_Tuple2(model.selectedBlock, model.labelPromptInput);
				if ((_n9.a.$ === 'Just') && (_n9.b.$ === 'Just')) {
					var id = _n9.a.a;
					var newLabel = _n9.b.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								blocks: A3(
									elm$core$Dict$update,
									id,
									function (mbVal) {
										if (mbVal.$ === 'Just') {
											var val = mbVal.a;
											return elm$core$Maybe$Just(
												_Utils_update(
													val,
													{label: newLabel}));
										} else {
											return elm$core$Maybe$Nothing;
										}
									},
									model.blocks)
							}),
						elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
				}
			case 'SetLinkType':
				var lt = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{linkType: lt}),
					elm$core$Maybe$Nothing);
			case 'SelectBlock':
				var n = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							selectedBlock: elm$core$Maybe$Just(n)
						}),
					elm$core$Maybe$Nothing);
			case 'AddBlock':
				var nextId = 1 + A3(
					elm$core$List$foldr,
					F2(
						function (k, acc) {
							return A2(elm$core$Basics$max, k, acc);
						}),
					0,
					elm$core$Dict$keys(model.blocks));
				var newBlock = {image: '', label: '', targetBlank: false, url: ''};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							blocks: A3(elm$core$Dict$insert, nextId, newBlock, model.blocks)
						}),
					elm$core$Maybe$Nothing);
			case 'RemoveBlock':
				var _n11 = model.selectedBlock;
				if (_n11.$ === 'Just') {
					var id = _n11.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								blocks: A2(elm$core$Dict$remove, id, model.blocks)
							}),
						elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
				}
			case 'SaveAndQuit':
				return _Utils_Tuple2(
					model,
					elm$core$Maybe$Just(
						author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData(
							author$project$Document$Document$BlockLinks(
								elm$core$Dict$values(model.blocks)))));
			case 'Move':
				var dir = msg.a;
				var _n12 = model.selectedBlock;
				if (_n12.$ === 'Just') {
					var n = _n12.a;
					var xs = elm$core$Dict$toList(model.blocks);
					var mbInd = A2(
						elm_community$list_extra$List$Extra$findIndex,
						function (_n14) {
							var j = _n14.a;
							return _Utils_eq(j, n);
						},
						xs);
					var l = elm$core$List$length(xs);
					var _n13 = elm$core$List$unzip(xs);
					var indexes = _n13.a;
					var values = _n13.b;
					var newIndexes = A2(
						elm$core$Maybe$withDefault,
						indexes,
						A2(
							elm$core$Maybe$map,
							function (i) {
								return _Utils_eq(dir, author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Left) ? A3(elm_community$list_extra$List$Extra$swapAt, i, i - 1, indexes) : A3(elm_community$list_extra$List$Extra$swapAt, i, i + 1, indexes);
							},
							mbInd));
					var newBlocks = elm$core$Dict$fromList(
						A2(elm_community$list_extra$List$Extra$zip, newIndexes, values));
					var selection = _Utils_eq(model.blocks, newBlocks) ? elm$core$Maybe$Just(n) : (_Utils_eq(dir, author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Left) ? elm$core$Maybe$Just(n - 1) : elm$core$Maybe$Just(n + 1));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{blocks: newBlocks, selectedBlock: selection}),
						elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
				}
			case 'Quit':
				return _Utils_Tuple2(
					model,
					elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginQuit));
			default:
				return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
		}
	});
var author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$fichesData = function (model) {
	return model.fiches;
};
var elm$core$List$sortBy = _List_sortBy;
var author$project$PageEditor$EditorPlugins$FichesPlugin$filteredFiches = F2(
	function (_n0, model) {
		var genDirEditor = _n0.genDirEditor;
		var nameFilterFun = function () {
			var _n8 = model.nameFilter;
			if (_n8.$ === 'Just') {
				if (_n8.a === '') {
					return elm$core$Basics$always(true);
				} else {
					var name = _n8.a;
					return function (_n9) {
						var k = _n9.a;
						var f = _n9.b;
						return A2(
							elm$core$String$contains,
							elm$core$String$toLower(name),
							elm$core$String$toLower(f.nomEntite));
					};
				}
			} else {
				return elm$core$Basics$always(true);
			}
		}();
		var labelFilterFun = function () {
			var _n6 = model.labelFilter;
			if (_n6.$ === 'Just') {
				var label = _n6.a;
				return function (_n7) {
					var k = _n7.a;
					var f = _n7.b;
					return A2(
						elm$core$List$any,
						function (l) {
							return _Utils_eq(l.nom, label);
						},
						f.label);
				};
			} else {
				return elm$core$Basics$always(true);
			}
		}();
		var catFilterFun = function () {
			var _n4 = model.catFilter;
			if (_n4.$ === 'Just') {
				var cat = _n4.a;
				return function (_n5) {
					var k = _n5.a;
					var f = _n5.b;
					return A2(elm$core$List$member, cat, f.categories);
				};
			} else {
				return elm$core$Basics$always(true);
			}
		}();
		var activFilterFun = function () {
			var _n2 = model.activFilter;
			if (_n2.$ === 'Just') {
				var activ = _n2.a;
				return function (_n3) {
					var k = _n3.a;
					var f = _n3.b;
					return A2(elm$core$List$member, activ, f.natureActiv);
				};
			} else {
				return elm$core$Basics$always(true);
			}
		}();
		return A2(
			elm$core$List$sortBy,
			function (_n1) {
				var k = _n1.a;
				var f = _n1.b;
				return elm$core$String$toLower(f.nomEntite);
			},
			A2(
				elm$core$List$filter,
				labelFilterFun,
				A2(
					elm$core$List$filter,
					activFilterFun,
					A2(
						elm$core$List$filter,
						catFilterFun,
						A2(
							elm$core$List$filter,
							nameFilterFun,
							elm$core$Dict$toList(
								author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$fichesData(genDirEditor)))))));
	});
var elm$core$Set$union = F2(
	function (_n0, _n1) {
		var dict1 = _n0.a;
		var dict2 = _n1.a;
		return elm$core$Set$Set_elm_builtin(
			A2(elm$core$Dict$union, dict1, dict2));
	});
var author$project$PageEditor$EditorPlugins$FichesPlugin$update = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 'FilterByName':
				var nom = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							groupSel: elm$core$Maybe$Nothing,
							nameFilter: elm$core$Maybe$Just(nom)
						}),
					elm$core$Maybe$Nothing);
			case 'FilterByCat':
				var cat = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							catFilter: _Utils_eq(
								model.catFilter,
								elm$core$Maybe$Just(cat)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(cat),
							groupSel: elm$core$Maybe$Nothing
						}),
					elm$core$Maybe$Nothing);
			case 'FilterByActiv':
				var activ = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							activFilter: _Utils_eq(
								model.activFilter,
								elm$core$Maybe$Just(activ)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(activ),
							groupSel: elm$core$Maybe$Nothing
						}),
					elm$core$Maybe$Nothing);
			case 'FilterByLabel':
				var label = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							groupSel: elm$core$Maybe$Nothing,
							labelFilter: _Utils_eq(
								model.labelFilter,
								elm$core$Maybe$Just(label)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(label)
						}),
					elm$core$Maybe$Nothing);
			case 'GroupSel':
				var sel = msg.a;
				if (sel.$ === 'All') {
					var fichesToAdd = elm$core$Set$fromList(
						A2(
							elm$core$List$map,
							elm$core$Tuple$first,
							A2(author$project$PageEditor$EditorPlugins$FichesPlugin$filteredFiches, config, model)));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								groupSel: elm$core$Maybe$Just(sel),
								selectedFiches: A2(elm$core$Set$union, model.selectedFiches, fichesToAdd)
							}),
						elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								groupSel: elm$core$Maybe$Just(sel),
								selectedFiches: elm$core$Set$empty
							}),
						elm$core$Maybe$Nothing);
				}
			case 'ToogleFiche':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							groupSel: elm$core$Maybe$Nothing,
							selectedFiches: A2(elm$core$Set$member, s, model.selectedFiches) ? A2(elm$core$Set$remove, s, model.selectedFiches) : A2(elm$core$Set$insert, s, model.selectedFiches)
						}),
					elm$core$Maybe$Nothing);
			case 'Quit':
				return _Utils_Tuple2(
					model,
					elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginQuit));
			case 'SaveAndQuit':
				return _Utils_eq(model.selectedFiches, elm$core$Set$empty) ? _Utils_Tuple2(model, elm$core$Maybe$Nothing) : _Utils_Tuple2(
					model,
					elm$core$Maybe$Just(
						author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData(
							elm$core$Set$toList(model.selectedFiches))));
			default:
				return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
		}
	});
var author$project$PageEditor$EditorPlugins$GalleryPlugin$Base64Img = F2(
	function (a, b) {
		return {$: 'Base64Img', a: a, b: b};
	});
var author$project$PageEditor$EditorPlugins$GalleryPlugin$decodeProcessedData = A4(
	elm$json$Json$Decode$map3,
	F3(
		function (wId, fn, im) {
			return {filename: fn, imageData: im, workerId: wId};
		}),
	A2(elm$json$Json$Decode$field, 'workerId', elm$json$Json$Decode$int),
	A2(elm$json$Json$Decode$field, 'filename', elm$json$Json$Decode$string),
	A2(elm$json$Json$Decode$field, 'imageData', elm$json$Json$Decode$string));
var author$project$PageEditor$EditorPlugins$GalleryPlugin$ImagesSelected = F2(
	function (a, b) {
		return {$: 'ImagesSelected', a: a, b: b};
	});
var elm$file$File$Select$files = F2(
	function (mimes, toMsg) {
		return A2(
			elm$core$Task$perform,
			function (_n0) {
				var f = _n0.a;
				var fs = _n0.b;
				return A2(toMsg, f, fs);
			},
			_File_uploadOneOrMore(mimes));
	});
var author$project$PageEditor$EditorPlugins$GalleryPlugin$selectImages = A2(
	elm$file$File$Select$files,
	_List_fromArray(
		['image/png', 'image/jpg']),
	author$project$PageEditor$EditorPlugins$GalleryPlugin$ImagesSelected);
var author$project$PageEditor$EditorPlugins$GalleryPlugin$toImageProcessor = _Platform_outgoingPort('toImageProcessor', elm$core$Basics$identity);
var elm$file$File$name = _File_name;
var elm$file$File$toUrl = _File_toUrl;
var author$project$PageEditor$EditorPlugins$GalleryPlugin$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'ImagesRequested':
				return _Utils_Tuple3(
					model,
					A2(elm$core$Platform$Cmd$map, model.externalMsg, author$project$PageEditor$EditorPlugins$GalleryPlugin$selectImages),
					elm$core$Maybe$Nothing);
			case 'ImagesSelected':
				var first = msg.a;
				var remainings = msg.b;
				var files = A2(elm$core$List$cons, first, remainings);
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{files: files}),
					A2(
						elm$core$Platform$Cmd$map,
						model.externalMsg,
						elm$core$Platform$Cmd$batch(
							A2(
								elm$core$List$map,
								function (_n1) {
									var fn = _n1.a;
									var t = _n1.b;
									return A2(
										elm$core$Task$perform,
										author$project$PageEditor$EditorPlugins$GalleryPlugin$Base64Img(fn),
										t);
								},
								A2(
									elm$core$List$map,
									function (f) {
										return _Utils_Tuple2(
											elm$file$File$name(f),
											elm$file$File$toUrl(f));
									},
									files)))),
					elm$core$Maybe$Nothing);
			case 'Base64Img':
				var filename = msg.a;
				var data = msg.b;
				var _n2 = model.idleWorkers;
				if (!_n2.b) {
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								processingQueue: A2(
									elm$core$List$cons,
									_Utils_Tuple2(filename, data),
									model.processingQueue)
							}),
						elm$core$Platform$Cmd$none,
						elm$core$Maybe$Nothing);
				} else {
					var nextWorker = _n2.a;
					var rest = _n2.b;
					var packedData = elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'nextWorker',
								elm$json$Json$Encode$int(nextWorker)),
								_Utils_Tuple2(
								'imageData',
								elm$json$Json$Encode$string(data)),
								_Utils_Tuple2(
								'filename',
								elm$json$Json$Encode$string(filename))
							]));
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								base64Pics: A3(elm$core$Dict$insert, filename, data, model.base64Pics),
								busyWorkers: A2(elm$core$List$cons, nextWorker, model.busyWorkers),
								idleWorkers: rest
							}),
						A2(
							elm$core$Platform$Cmd$map,
							model.externalMsg,
							author$project$PageEditor$EditorPlugins$GalleryPlugin$toImageProcessor(packedData)),
						elm$core$Maybe$Nothing);
				}
			case 'ImageProcessed':
				var json = msg.a;
				var _n3 = A2(elm$json$Json$Decode$decodeValue, author$project$PageEditor$EditorPlugins$GalleryPlugin$decodeProcessedData, json);
				if (_n3.$ === 'Ok') {
					var workerId = _n3.a.workerId;
					var imageData = _n3.a.imageData;
					var filename = _n3.a.filename;
					var workers = _Utils_eq(model.processingQueue, _List_Nil) ? A2(elm$core$List$cons, workerId, model.idleWorkers) : model.idleWorkers;
					var _n4 = function () {
						var _n5 = model.processingQueue;
						if (!_n5.b) {
							return _Utils_Tuple2(elm$core$Platform$Cmd$none, _List_Nil);
						} else {
							var data = _n5.a;
							var rest = _n5.b;
							return _Utils_Tuple2(
								A2(
									elm$core$Platform$Cmd$map,
									model.externalMsg,
									author$project$PageEditor$EditorPlugins$GalleryPlugin$toImageProcessor(
										elm$json$Json$Encode$object(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'nextWorker',
													elm$json$Json$Encode$int(workerId)),
													_Utils_Tuple2(
													'imageData',
													elm$json$Json$Encode$string(imageData)),
													_Utils_Tuple2(
													'filename',
													elm$json$Json$Encode$string(filename))
												])))),
								rest);
						}
					}();
					var cmd = _n4.a;
					var processingQueue = _n4.b;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								busyWorkers: A2(elm_community$list_extra$List$Extra$remove, workerId, model.busyWorkers),
								idleWorkers: workers,
								processingQueue: processingQueue
							}),
						cmd,
						elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				}
			default:
				return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
		}
	});
var author$project$PageEditor$Internals$DocumentEditorHelpers$setAligment = F2(
	function (a, attrs) {
		var removeOldAlignment = F2(
			function (acc, xs) {
				removeOldAlignment:
				while (true) {
					if (!xs.b) {
						return elm$core$List$reverse(acc);
					} else {
						switch (xs.a.$) {
							case 'AlignRight':
								var _n1 = xs.a;
								var xs_ = xs.b;
								var $temp$acc = acc,
									$temp$xs = xs_;
								acc = $temp$acc;
								xs = $temp$xs;
								continue removeOldAlignment;
							case 'AlignLeft':
								var _n2 = xs.a;
								var xs_ = xs.b;
								var $temp$acc = acc,
									$temp$xs = xs_;
								acc = $temp$acc;
								xs = $temp$xs;
								continue removeOldAlignment;
							default:
								var y = xs.a;
								var ys = xs.b;
								var $temp$acc = A2(elm$core$List$cons, y, acc),
									$temp$xs = ys;
								acc = $temp$acc;
								xs = $temp$xs;
								continue removeOldAlignment;
						}
					}
				}
			});
		var newAlignment = function () {
			switch (a.$) {
				case 'ACenter':
					return _List_Nil;
				case 'ARight':
					return _List_fromArray(
						[author$project$Document$Document$AlignRight]);
				default:
					return _List_fromArray(
						[author$project$Document$Document$AlignLeft]);
			}
		}();
		return _Utils_ap(
			newAlignment,
			A2(removeOldAlignment, _List_Nil, attrs));
	});
var author$project$PageEditor$EditorPlugins$ImagePlugin$update = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 'SetAlignment':
				var alignment = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{alignment: alignment}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'SetCaption':
				var caption = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							mbCaption: elm$core$Maybe$Just(caption)
						}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'SelectImage':
				var src = msg.a.src;
				var width = msg.a.width;
				var height = msg.a.height;
				var newImageMeta = {
					caption: model.mbCaption,
					size: {imgHeight: height, imgWidth: width},
					src: author$project$Document$Document$UrlSrc(src)
				};
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							mbImageMeta: elm$core$Maybe$Just(newImageMeta),
							mode: author$project$PageEditor$EditorPlugins$ImagePlugin$ImageAttributeEditor
						}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'ChangeMode':
				var mode = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{mode: mode}),
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Nothing);
			case 'SaveAndQuit':
				var _n1 = model.mbImageMeta;
				if (_n1.$ === 'Nothing') {
					return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
				} else {
					var imageMeta = _n1.a;
					return _Utils_Tuple3(
						model,
						elm$core$Platform$Cmd$none,
						elm$core$Maybe$Just(
							author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData(
								_Utils_Tuple2(
									imageMeta,
									A2(author$project$PageEditor$Internals$DocumentEditorHelpers$setAligment, model.alignment, model.imageAttrs)))));
				}
			case 'Quit':
				return _Utils_Tuple3(
					model,
					elm$core$Platform$Cmd$none,
					elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginQuit));
			default:
				return _Utils_Tuple3(model, elm$core$Platform$Cmd$none, elm$core$Maybe$Nothing);
		}
	});
var author$project$PageEditor$EditorPlugins$NewDocPlugin$cellContStrToCellContent = function (s) {
	switch (s) {
		case 'NewsBlock':
			return elm$core$Maybe$Just(author$project$Document$Document$NewsBlock);
		case 'CalendarWidget':
			return elm$core$Maybe$Just(author$project$Document$Document$CalendarWidget);
		case 'Calendar':
			return elm$core$Maybe$Just(author$project$Document$Document$Calendar);
		case 'WeatherWidget':
			return elm$core$Maybe$Just(author$project$Document$Document$WeatherWidget);
		case 'DronePanorama':
			return elm$core$Maybe$Just(author$project$Document$Document$DronePanorama);
		default:
			return elm$core$Maybe$Nothing;
	}
};
var author$project$PageEditor$EditorPlugins$PictureLinksPlugin$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'OpenPicker':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{imagePickerOpen: true}),
					elm$core$Maybe$Nothing);
			case 'ClosePicker':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{imagePickerOpen: false}),
					elm$core$Maybe$Nothing);
			case 'NewPicLink':
				var src = msg.a.src;
				var width = msg.a.width;
				var height = msg.a.height;
				var _n1 = A2(elm$random$Random$step, TSFoster$elm_uuid$UUID$generator, model.seed);
				var uuid = _n1.a;
				var newSeed = _n1.b;
				var newPicLink = {
					picLink: {
						img: {
							caption: elm$core$Maybe$Nothing,
							size: {imgHeight: height, imgWidth: width},
							src: author$project$Document$Document$UrlSrc(src)
						},
						url: ''
					},
					uuid: uuid
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							buffer: _Utils_ap(
								model.buffer,
								_List_fromArray(
									[newPicLink])),
							imagePickerOpen: false,
							seed: newSeed
						}),
					elm$core$Maybe$Nothing);
			case 'UrlInput':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							urlBuffer: elm$core$Maybe$Just(s)
						}),
					elm$core$Maybe$Nothing);
			case 'SetUrl':
				var _n2 = _Utils_Tuple2(model.selectedPic, model.urlBuffer);
				if ((_n2.a.$ === 'Just') && (_n2.b.$ === 'Just')) {
					var uuid = _n2.a.a;
					var url = _n2.b.a;
					var newBuffer = A2(
						elm$core$List$map,
						function (pl) {
							if (_Utils_eq(
								TSFoster$elm_uuid$UUID$canonical(pl.uuid),
								uuid)) {
								var picLink = pl.picLink;
								return _Utils_update(
									pl,
									{
										picLink: _Utils_update(
											picLink,
											{url: url})
									});
							} else {
								return pl;
							}
						},
						model.buffer);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{buffer: newBuffer, urlBuffer: elm$core$Maybe$Nothing}),
						elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
				}
			case 'MovePicUp':
				var _n3 = A2(
					elm$core$Maybe$andThen,
					function (s) {
						return A2(
							elm_community$list_extra$List$Extra$findIndex,
							function (p) {
								return _Utils_eq(
									TSFoster$elm_uuid$UUID$canonical(p.uuid),
									s);
							},
							model.buffer);
					},
					model.selectedPic);
				if (_n3.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
				} else {
					var n = _n3.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								buffer: A3(elm_community$list_extra$List$Extra$swapAt, n - 1, n, model.buffer)
							}),
						elm$core$Maybe$Nothing);
				}
			case 'MovePicDown':
				var _n4 = A2(
					elm$core$Maybe$andThen,
					function (s) {
						return A2(
							elm_community$list_extra$List$Extra$findIndex,
							function (p) {
								return _Utils_eq(
									TSFoster$elm_uuid$UUID$canonical(p.uuid),
									s);
							},
							model.buffer);
					},
					model.selectedPic);
				if (_n4.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
				} else {
					var n = _n4.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								buffer: A3(elm_community$list_extra$List$Extra$swapAt, n + 1, n, model.buffer)
							}),
						elm$core$Maybe$Nothing);
				}
			case 'RemovePic':
				var _n5 = model.selectedPic;
				if (_n5.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
				} else {
					var s = _n5.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								buffer: A2(
									elm$core$List$filter,
									function (p) {
										return !_Utils_eq(
											TSFoster$elm_uuid$UUID$canonical(p.uuid),
											s);
									},
									model.buffer)
							}),
						elm$core$Maybe$Nothing);
				}
			case 'SelectPic':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							selectedPic: _Utils_eq(
								model.selectedPic,
								elm$core$Maybe$Just(s)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(s),
							urlBuffer: _Utils_eq(
								model.selectedPic,
								elm$core$Maybe$Just(s)) ? elm$core$Maybe$Nothing : A2(
								elm$core$Maybe$map,
								A2(
									elm$core$Basics$composeL,
									function ($) {
										return $.url;
									},
									function ($) {
										return $.picLink;
									}),
								elm$core$List$head(
									A2(
										elm$core$List$filter,
										function (p) {
											return _Utils_eq(
												TSFoster$elm_uuid$UUID$canonical(p.uuid),
												s);
										},
										model.buffer)))
						}),
					elm$core$Maybe$Nothing);
			case 'SaveAndQuit':
				return _Utils_Tuple2(
					model,
					elm$core$Maybe$Just(
						author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData(
							A2(
								elm$core$List$map,
								function ($) {
									return $.picLink;
								},
								model.buffer))));
			case 'Quit':
				return _Utils_Tuple2(
					model,
					elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginQuit));
			default:
				return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
		}
	});
var mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 'Fill', a: a};
};
var mdgriffith$elm_ui$Element$fill = mdgriffith$elm_ui$Internal$Model$Fill(1);
var mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 'Flag', a: a};
};
var mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 'Second', a: a};
};
var mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var mdgriffith$elm_ui$Internal$Flag$padding = mdgriffith$elm_ui$Internal$Flag$flag(2);
var mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 'PaddingStyle', a: a, b: b, c: c, d: d, e: e};
	});
var mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 'StyleClass', a: a, b: b};
	});
var mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		return _Utils_eq(x, y) ? A2(
			mdgriffith$elm_ui$Internal$Model$StyleClass,
			mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + elm$core$String$fromInt(x),
				x,
				x,
				x,
				x)) : A2(
			mdgriffith$elm_ui$Internal$Model$StyleClass,
			mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + (elm$core$String$fromInt(x) + ('-' + elm$core$String$fromInt(y))),
				y,
				x,
				y,
				x));
	});
var mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 'Rgba', a: a, b: b, c: c, d: d};
	});
var mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4(mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var mdgriffith$elm_ui$Element$rgba = mdgriffith$elm_ui$Internal$Model$Rgba;
var mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 'Width', a: a};
};
var mdgriffith$elm_ui$Element$width = mdgriffith$elm_ui$Internal$Model$Width;
var mdgriffith$elm_ui$Internal$Flag$bgColor = mdgriffith$elm_ui$Internal$Flag$flag(8);
var mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 'Colored', a: a, b: b, c: c};
	});
var mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return elm$core$String$fromInt(
		elm$core$Basics$round(x * 255));
};
var mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_n0) {
	var red = _n0.a;
	var green = _n0.b;
	var blue = _n0.c;
	var alpha = _n0.d;
	return mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + (mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + (mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		mdgriffith$elm_ui$Internal$Model$StyleClass,
		mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var mdgriffith$elm_ui$Internal$Flag$borderColor = mdgriffith$elm_ui$Internal$Flag$flag(28);
var mdgriffith$elm_ui$Element$Border$color = function (clr) {
	return A2(
		mdgriffith$elm_ui$Internal$Model$StyleClass,
		mdgriffith$elm_ui$Internal$Flag$borderColor,
		A3(
			mdgriffith$elm_ui$Internal$Model$Colored,
			'bc-' + mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'border-color',
			clr));
};
var mdgriffith$elm_ui$Internal$Flag$borderWidth = mdgriffith$elm_ui$Internal$Flag$flag(27);
var mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(
	function (a, b, c, d, e) {
		return {$: 'BorderWidth', a: a, b: b, c: c, d: d, e: e};
	});
var mdgriffith$elm_ui$Element$Border$width = function (v) {
	return A2(
		mdgriffith$elm_ui$Internal$Model$StyleClass,
		mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + elm$core$String$fromInt(v),
			v,
			v,
			v,
			v));
};
var mdgriffith$elm_ui$Element$Border$widthXY = F2(
	function (x, y) {
		return A2(
			mdgriffith$elm_ui$Internal$Model$StyleClass,
			mdgriffith$elm_ui$Internal$Flag$borderWidth,
			A5(
				mdgriffith$elm_ui$Internal$Model$BorderWidth,
				'b-' + (elm$core$String$fromInt(x) + ('-' + elm$core$String$fromInt(y))),
				y,
				x,
				y,
				x));
	});
var mdgriffith$elm_ui$Element$Border$widthEach = function (_n0) {
	var bottom = _n0.bottom;
	var top = _n0.top;
	var left = _n0.left;
	var right = _n0.right;
	return (_Utils_eq(top, bottom) && _Utils_eq(left, right)) ? (_Utils_eq(top, right) ? mdgriffith$elm_ui$Element$Border$width(top) : A2(mdgriffith$elm_ui$Element$Border$widthXY, left, top)) : A2(
		mdgriffith$elm_ui$Internal$Model$StyleClass,
		mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + (elm$core$String$fromInt(top) + ('-' + (elm$core$String$fromInt(right) + ('-' + (elm$core$String$fromInt(bottom) + ('-' + elm$core$String$fromInt(left))))))),
			top,
			right,
			bottom,
			left));
};
var author$project$Document$DocumentViews$StyleSheets$tableStyles = elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'default',
			{
				cellStyle: function (ri) {
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Border$widthEach(
							{bottom: 1, left: 0, right: 1, top: 0}),
							mdgriffith$elm_ui$Element$Background$color(
							(!A2(elm$core$Basics$modBy, 2, ri)) ? A3(mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8) : A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
						]);
				},
				containerStyle: _List_Nil,
				tableStyle: _List_fromArray(
					[
						mdgriffith$elm_ui$Element$Border$widthEach(
						{bottom: 0, left: 1, right: 0, top: 1})
					])
			}),
			_Utils_Tuple2(
			'souligné',
			{
				cellStyle: function (ri) {
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Border$widthEach(
							{bottom: 1, left: 0, right: 0, top: 0}),
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
						]);
				},
				containerStyle: _List_fromArray(
					[
						A2(mdgriffith$elm_ui$Element$paddingXY, 1, 0)
					]),
				tableStyle: _List_Nil
			}),
			_Utils_Tuple2(
			'gris-vert',
			{
				cellStyle: function (ri) {
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Border$widthEach(
							{bottom: 1, left: 0, right: 0, top: 0}),
							mdgriffith$elm_ui$Element$Border$color(
							A4(mdgriffith$elm_ui$Element$rgba, 0.5, 0.5, 0.5, 1)),
							mdgriffith$elm_ui$Element$Background$color(
							(!A2(elm$core$Basics$modBy, 2, ri)) ? A3(mdgriffith$elm_ui$Element$rgb, 0.83, 0.83, 0.83) : A3(mdgriffith$elm_ui$Element$rgb, 0.58, 0.93, 0.58)),
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
						]);
				},
				containerStyle: _List_fromArray(
					[
						A2(mdgriffith$elm_ui$Element$paddingXY, 1, 1)
					]),
				tableStyle: _List_Nil
			}),
			_Utils_Tuple2(
			'bleu-blanc',
			{
				cellStyle: function (ri) {
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Border$widthEach(
							{bottom: 1, left: 0, right: 0, top: 0}),
							mdgriffith$elm_ui$Element$Border$color(
							A3(mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5)),
							mdgriffith$elm_ui$Element$Background$color(
							(!A2(elm$core$Basics$modBy, 2, ri)) ? A3(mdgriffith$elm_ui$Element$rgb, 0.53, 0.81, 0.92) : A3(mdgriffith$elm_ui$Element$rgb, 0.92, 0.92, 0.84)),
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
						]);
				},
				containerStyle: _List_fromArray(
					[
						A2(mdgriffith$elm_ui$Element$paddingXY, 1, 1)
					]),
				tableStyle: _List_fromArray(
					[
						mdgriffith$elm_ui$Element$Border$width(1)
					])
			})
		]));
var author$project$PageEditor$EditorPlugins$TablePlugin$DisplayOnly = {$: 'DisplayOnly'};
var author$project$PageEditor$EditorPlugins$TablePlugin$makeDataGrid = F2(
	function (i, j) {
		return A2(
			elm$core$Array$initialize,
			i,
			elm$core$Basics$always(
				A2(
					elm$core$Array$initialize,
					j,
					elm$core$Basics$always(''))));
	});
var author$project$PageEditor$EditorPlugins$TablePlugin$maxCols = 30;
var author$project$PageEditor$EditorPlugins$TablePlugin$maxRows = 100;
var author$project$PageEditor$EditorPlugins$TablePlugin$toTableMeta = function (docTable) {
	return {
		data: elm$core$Array$toList(docTable.data),
		nbrCols: docTable.nbrCols,
		nbrRows: docTable.nbrRows,
		style: docTable.currentStyle
	};
};
var elm$core$Elm$JsArray$appendN = _JsArray_appendN;
var elm$core$Elm$JsArray$slice = _JsArray_slice;
var elm$core$Array$appendHelpBuilder = F2(
	function (tail, builder) {
		var tailLen = elm$core$Elm$JsArray$length(tail);
		var notAppended = (elm$core$Array$branchFactor - elm$core$Elm$JsArray$length(builder.tail)) - tailLen;
		var appended = A3(elm$core$Elm$JsArray$appendN, elm$core$Array$branchFactor, builder.tail, tail);
		return (notAppended < 0) ? {
			nodeList: A2(
				elm$core$List$cons,
				elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: A3(elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)
		} : ((!notAppended) ? {
			nodeList: A2(
				elm$core$List$cons,
				elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: elm$core$Elm$JsArray$empty
		} : {nodeList: builder.nodeList, nodeListSize: builder.nodeListSize, tail: appended});
	});
var elm$core$Array$appendHelpTree = F2(
	function (toAppend, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		var itemsToAppend = elm$core$Elm$JsArray$length(toAppend);
		var notAppended = (elm$core$Array$branchFactor - elm$core$Elm$JsArray$length(tail)) - itemsToAppend;
		var appended = A3(elm$core$Elm$JsArray$appendN, elm$core$Array$branchFactor, tail, toAppend);
		var newArray = A2(elm$core$Array$unsafeReplaceTail, appended, array);
		if (notAppended < 0) {
			var nextTail = A3(elm$core$Elm$JsArray$slice, notAppended, itemsToAppend, toAppend);
			return A2(elm$core$Array$unsafeReplaceTail, nextTail, newArray);
		} else {
			return newArray;
		}
	});
var elm$core$Array$builderFromArray = function (_n0) {
	var len = _n0.a;
	var tree = _n0.c;
	var tail = _n0.d;
	var helper = F2(
		function (node, acc) {
			if (node.$ === 'SubTree') {
				var subTree = node.a;
				return A3(elm$core$Elm$JsArray$foldl, helper, acc, subTree);
			} else {
				return A2(elm$core$List$cons, node, acc);
			}
		});
	return {
		nodeList: A3(elm$core$Elm$JsArray$foldl, helper, _List_Nil, tree),
		nodeListSize: (len / elm$core$Array$branchFactor) | 0,
		tail: tail
	};
};
var elm$core$Array$append = F2(
	function (a, _n0) {
		var aTail = a.d;
		var bLen = _n0.a;
		var bTree = _n0.c;
		var bTail = _n0.d;
		if (_Utils_cmp(bLen, elm$core$Array$branchFactor * 4) < 1) {
			var foldHelper = F2(
				function (node, array) {
					if (node.$ === 'SubTree') {
						var tree = node.a;
						return A3(elm$core$Elm$JsArray$foldl, foldHelper, array, tree);
					} else {
						var leaf = node.a;
						return A2(elm$core$Array$appendHelpTree, leaf, array);
					}
				});
			return A2(
				elm$core$Array$appendHelpTree,
				bTail,
				A3(elm$core$Elm$JsArray$foldl, foldHelper, a, bTree));
		} else {
			var foldHelper = F2(
				function (node, builder) {
					if (node.$ === 'SubTree') {
						var tree = node.a;
						return A3(elm$core$Elm$JsArray$foldl, foldHelper, builder, tree);
					} else {
						var leaf = node.a;
						return A2(elm$core$Array$appendHelpBuilder, leaf, builder);
					}
				});
			return A2(
				elm$core$Array$builderToArray,
				true,
				A2(
					elm$core$Array$appendHelpBuilder,
					bTail,
					A3(
						elm$core$Elm$JsArray$foldl,
						foldHelper,
						elm$core$Array$builderFromArray(a),
						bTree)));
		}
	});
var elm$core$Elm$JsArray$map = _JsArray_map;
var elm$core$Array$map = F2(
	function (func, _n0) {
		var len = _n0.a;
		var startShift = _n0.b;
		var tree = _n0.c;
		var tail = _n0.d;
		var helper = function (node) {
			if (node.$ === 'SubTree') {
				var subTree = node.a;
				return elm$core$Array$SubTree(
					A2(elm$core$Elm$JsArray$map, helper, subTree));
			} else {
				var values = node.a;
				return elm$core$Array$Leaf(
					A2(elm$core$Elm$JsArray$map, func, values));
			}
		};
		return A4(
			elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A2(elm$core$Elm$JsArray$map, helper, tree),
			A2(elm$core$Elm$JsArray$map, func, tail));
	});
var elm$core$Array$setHelp = F4(
	function (shift, index, value, tree) {
		var pos = elm$core$Array$bitMask & (index >>> shift);
		var _n0 = A2(elm$core$Elm$JsArray$unsafeGet, pos, tree);
		if (_n0.$ === 'SubTree') {
			var subTree = _n0.a;
			var newSub = A4(elm$core$Array$setHelp, shift - elm$core$Array$shiftStep, index, value, subTree);
			return A3(
				elm$core$Elm$JsArray$unsafeSet,
				pos,
				elm$core$Array$SubTree(newSub),
				tree);
		} else {
			var values = _n0.a;
			var newLeaf = A3(elm$core$Elm$JsArray$unsafeSet, elm$core$Array$bitMask & index, value, values);
			return A3(
				elm$core$Elm$JsArray$unsafeSet,
				pos,
				elm$core$Array$Leaf(newLeaf),
				tree);
		}
	});
var elm$core$Array$set = F3(
	function (index, value, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? array : ((_Utils_cmp(
			index,
			elm$core$Array$tailIndex(len)) > -1) ? A4(
			elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			tree,
			A3(elm$core$Elm$JsArray$unsafeSet, elm$core$Array$bitMask & index, value, tail)) : A4(
			elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A4(elm$core$Array$setHelp, startShift, index, value, tree),
			tail));
	});
var elm$core$Array$sliceLeft = F2(
	function (from, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		if (!from) {
			return array;
		} else {
			if (_Utils_cmp(
				from,
				elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					elm$core$Array$Array_elm_builtin,
					len - from,
					elm$core$Array$shiftStep,
					elm$core$Elm$JsArray$empty,
					A3(
						elm$core$Elm$JsArray$slice,
						from - elm$core$Array$tailIndex(len),
						elm$core$Elm$JsArray$length(tail),
						tail));
			} else {
				var skipNodes = (from / elm$core$Array$branchFactor) | 0;
				var helper = F2(
					function (node, acc) {
						if (node.$ === 'SubTree') {
							var subTree = node.a;
							return A3(elm$core$Elm$JsArray$foldr, helper, acc, subTree);
						} else {
							var leaf = node.a;
							return A2(elm$core$List$cons, leaf, acc);
						}
					});
				var leafNodes = A3(
					elm$core$Elm$JsArray$foldr,
					helper,
					_List_fromArray(
						[tail]),
					tree);
				var nodesToInsert = A2(elm$core$List$drop, skipNodes, leafNodes);
				if (!nodesToInsert.b) {
					return elm$core$Array$empty;
				} else {
					var head = nodesToInsert.a;
					var rest = nodesToInsert.b;
					var firstSlice = from - (skipNodes * elm$core$Array$branchFactor);
					var initialBuilder = {
						nodeList: _List_Nil,
						nodeListSize: 0,
						tail: A3(
							elm$core$Elm$JsArray$slice,
							firstSlice,
							elm$core$Elm$JsArray$length(head),
							head)
					};
					return A2(
						elm$core$Array$builderToArray,
						true,
						A3(elm$core$List$foldl, elm$core$Array$appendHelpBuilder, initialBuilder, rest));
				}
			}
		}
	});
var elm$core$Array$fetchNewTail = F4(
	function (shift, end, treeEnd, tree) {
		fetchNewTail:
		while (true) {
			var pos = elm$core$Array$bitMask & (treeEnd >>> shift);
			var _n0 = A2(elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_n0.$ === 'SubTree') {
				var sub = _n0.a;
				var $temp$shift = shift - elm$core$Array$shiftStep,
					$temp$end = end,
					$temp$treeEnd = treeEnd,
					$temp$tree = sub;
				shift = $temp$shift;
				end = $temp$end;
				treeEnd = $temp$treeEnd;
				tree = $temp$tree;
				continue fetchNewTail;
			} else {
				var values = _n0.a;
				return A3(elm$core$Elm$JsArray$slice, 0, elm$core$Array$bitMask & end, values);
			}
		}
	});
var elm$core$Array$hoistTree = F3(
	function (oldShift, newShift, tree) {
		hoistTree:
		while (true) {
			if ((_Utils_cmp(oldShift, newShift) < 1) || (!elm$core$Elm$JsArray$length(tree))) {
				return tree;
			} else {
				var _n0 = A2(elm$core$Elm$JsArray$unsafeGet, 0, tree);
				if (_n0.$ === 'SubTree') {
					var sub = _n0.a;
					var $temp$oldShift = oldShift - elm$core$Array$shiftStep,
						$temp$newShift = newShift,
						$temp$tree = sub;
					oldShift = $temp$oldShift;
					newShift = $temp$newShift;
					tree = $temp$tree;
					continue hoistTree;
				} else {
					return tree;
				}
			}
		}
	});
var elm$core$Array$sliceTree = F3(
	function (shift, endIdx, tree) {
		var lastPos = elm$core$Array$bitMask & (endIdx >>> shift);
		var _n0 = A2(elm$core$Elm$JsArray$unsafeGet, lastPos, tree);
		if (_n0.$ === 'SubTree') {
			var sub = _n0.a;
			var newSub = A3(elm$core$Array$sliceTree, shift - elm$core$Array$shiftStep, endIdx, sub);
			return (!elm$core$Elm$JsArray$length(newSub)) ? A3(elm$core$Elm$JsArray$slice, 0, lastPos, tree) : A3(
				elm$core$Elm$JsArray$unsafeSet,
				lastPos,
				elm$core$Array$SubTree(newSub),
				A3(elm$core$Elm$JsArray$slice, 0, lastPos + 1, tree));
		} else {
			return A3(elm$core$Elm$JsArray$slice, 0, lastPos, tree);
		}
	});
var elm$core$Array$sliceRight = F2(
	function (end, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		if (_Utils_eq(end, len)) {
			return array;
		} else {
			if (_Utils_cmp(
				end,
				elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					elm$core$Array$Array_elm_builtin,
					end,
					startShift,
					tree,
					A3(elm$core$Elm$JsArray$slice, 0, elm$core$Array$bitMask & end, tail));
			} else {
				var endIdx = elm$core$Array$tailIndex(end);
				var depth = elm$core$Basics$floor(
					A2(
						elm$core$Basics$logBase,
						elm$core$Array$branchFactor,
						A2(elm$core$Basics$max, 1, endIdx - 1)));
				var newShift = A2(elm$core$Basics$max, 5, depth * elm$core$Array$shiftStep);
				return A4(
					elm$core$Array$Array_elm_builtin,
					end,
					newShift,
					A3(
						elm$core$Array$hoistTree,
						startShift,
						newShift,
						A3(elm$core$Array$sliceTree, startShift, endIdx, tree)),
					A4(elm$core$Array$fetchNewTail, startShift, end, endIdx, tree));
			}
		}
	});
var elm$core$Array$translateIndex = F2(
	function (index, _n0) {
		var len = _n0.a;
		var posIndex = (index < 0) ? (len + index) : index;
		return (posIndex < 0) ? 0 : ((_Utils_cmp(posIndex, len) > 0) ? len : posIndex);
	});
var elm$core$Array$slice = F3(
	function (from, to, array) {
		var correctTo = A2(elm$core$Array$translateIndex, to, array);
		var correctFrom = A2(elm$core$Array$translateIndex, from, array);
		return (_Utils_cmp(correctFrom, correctTo) > 0) ? elm$core$Array$empty : A2(
			elm$core$Array$sliceLeft,
			correctFrom,
			A2(elm$core$Array$sliceRight, correctTo, array));
	});
var elm$core$Array$toIndexedList = function (array) {
	var len = array.a;
	var helper = F2(
		function (entry, _n0) {
			var index = _n0.a;
			var list = _n0.b;
			return _Utils_Tuple2(
				index - 1,
				A2(
					elm$core$List$cons,
					_Utils_Tuple2(index, entry),
					list));
		});
	return A3(
		elm$core$Array$foldr,
		helper,
		_Utils_Tuple2(len - 1, _List_Nil),
		array).b;
};
var author$project$PageEditor$EditorPlugins$TablePlugin$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'SetNbrRows':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{nbrRowsInput: s}),
					elm$core$Maybe$Nothing);
			case 'SetNbrCols':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{nbrColsInput: s}),
					elm$core$Maybe$Nothing);
			case 'SetStyle':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							currentStyle: function () {
								var _n1 = A2(elm$core$Dict$get, s, author$project$Document$DocumentViews$StyleSheets$tableStyles);
								if (_n1.$ === 'Nothing') {
									return model.currentStyle;
								} else {
									return s;
								}
							}(),
							styleSelectorInput: s
						}),
					elm$core$Maybe$Nothing);
			case 'StyleSelectorClick':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{currentFocusedCell: elm$core$Maybe$Nothing, styleSelectorFocused: !model.styleSelectorFocused}),
					elm$core$Maybe$Nothing);
			case 'StyleSelectorClickOff':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{styleSelectorFocused: false}),
					elm$core$Maybe$Nothing);
			case 'InitializeTable':
				var nbrRows = function (n) {
					return (_Utils_cmp(n, author$project$PageEditor$EditorPlugins$TablePlugin$maxRows) < 1) ? n : model.nbrRows;
				}(
					A2(
						elm$core$Maybe$withDefault,
						0,
						elm$core$String$toInt(model.nbrRowsInput)));
				var nbrCols = function (n) {
					return (_Utils_cmp(n, author$project$PageEditor$EditorPlugins$TablePlugin$maxCols) < 1) ? n : model.nbrCols;
				}(
					A2(
						elm$core$Maybe$withDefault,
						0,
						elm$core$String$toInt(model.nbrColsInput)));
				var data = A2(author$project$PageEditor$EditorPlugins$TablePlugin$makeDataGrid, nbrRows, nbrCols);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{data: data, nbrCols: nbrCols, nbrColsInput: '', nbrRows: nbrRows, nbrRowsInput: '', setupDone: true}),
					elm$core$Maybe$Nothing);
			case 'DataInput':
				var _n2 = msg.a;
				var i = _n2.a;
				var j = _n2.b;
				var s = msg.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							data: function () {
								var _n3 = A2(elm$core$Array$get, i, model.data);
								if (_n3.$ === 'Nothing') {
									return model.data;
								} else {
									var a = _n3.a;
									return A3(
										elm$core$Array$set,
										i,
										A3(elm$core$Array$set, j, s, a),
										model.data);
								}
							}()
						}),
					elm$core$Maybe$Nothing);
			case 'CellFocused':
				var mbFocus = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{currentFocusedCell: mbFocus}),
					elm$core$Maybe$Nothing);
			case 'RemoveSelectedRow':
				var _n4 = model.currentFocusedCell;
				if (_n4.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
				} else {
					var _n5 = _n4.a;
					var ri = _n5.a;
					var ci = _n5.b;
					var newData = elm$core$Array$fromList(
						A2(
							elm$core$List$map,
							elm$core$Tuple$second,
							A2(
								elm$core$List$filter,
								function (_n6) {
									var i = _n6.a;
									return !_Utils_eq(i, ri);
								},
								elm$core$Array$toIndexedList(model.data))));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{currentFocusedCell: elm$core$Maybe$Nothing, data: newData, nbrRows: model.nbrRows + 1}),
						elm$core$Maybe$Nothing);
				}
			case 'RemoveSelectedCol':
				var _n7 = model.currentFocusedCell;
				if (_n7.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
				} else {
					var _n8 = _n7.a;
					var ri = _n8.a;
					var ci = _n8.b;
					var newData = A2(
						elm$core$Array$map,
						function (row) {
							return elm$core$Array$fromList(
								A2(
									elm$core$List$map,
									elm$core$Tuple$second,
									A2(
										elm$core$List$filter,
										function (_n9) {
											var j = _n9.a;
											return !_Utils_eq(j, ci);
										},
										elm$core$Array$toIndexedList(row))));
						},
						model.data);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{currentFocusedCell: elm$core$Maybe$Nothing, data: newData, nbrCols: model.nbrCols - 1}),
						elm$core$Maybe$Nothing);
				}
			case 'AddNew':
				var direction = msg.a;
				var _n10 = _Utils_Tuple2(direction, model.currentFocusedCell);
				if (_n10.b.$ === 'Nothing') {
					switch (_n10.a.$) {
						case 'Up':
							var _n11 = _n10.a;
							var _n12 = _n10.b;
							var newRow = elm$core$Array$fromList(
								_List_fromArray(
									[
										A2(
										elm$core$Array$initialize,
										model.nbrCols,
										elm$core$Basics$always(''))
									]));
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										data: A2(elm$core$Array$append, newRow, model.data),
										nbrRows: model.nbrRows + 1
									}),
								elm$core$Maybe$Nothing);
						case 'Down':
							var _n13 = _n10.a;
							var _n14 = _n10.b;
							var newRow = A2(
								elm$core$Array$initialize,
								model.nbrCols,
								elm$core$Basics$always(''));
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										data: A2(elm$core$Array$push, newRow, model.data),
										nbrRows: model.nbrRows + 1
									}),
								elm$core$Maybe$Nothing);
						case 'Left':
							var _n15 = _n10.a;
							var _n16 = _n10.b;
							var newData = A2(
								elm$core$Array$map,
								function (row) {
									return A2(
										elm$core$Array$append,
										elm$core$Array$fromList(
											_List_fromArray(
												[''])),
										row);
								},
								model.data);
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{data: newData, nbrCols: model.nbrCols + 1}),
								elm$core$Maybe$Nothing);
						default:
							var _n17 = _n10.a;
							var _n18 = _n10.b;
							var newData = A2(
								elm$core$Array$map,
								function (row) {
									return A2(elm$core$Array$push, '', row);
								},
								model.data);
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{data: newData, nbrCols: model.nbrCols + 1}),
								elm$core$Maybe$Nothing);
					}
				} else {
					switch (_n10.a.$) {
						case 'Up':
							var _n19 = _n10.a;
							var _n20 = _n10.b.a;
							var i = _n20.a;
							var j = _n20.b;
							var topHalf = A3(elm$core$Array$slice, 0, i, model.data);
							var newRow = elm$core$Array$fromList(
								_List_fromArray(
									[
										A2(
										elm$core$Array$initialize,
										model.nbrCols,
										elm$core$Basics$always(''))
									]));
							var bottomHalf = A3(elm$core$Array$slice, i, model.nbrRows, model.data);
							var newData = A2(
								elm$core$Array$append,
								topHalf,
								A2(elm$core$Array$append, newRow, bottomHalf));
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{currentFocusedCell: elm$core$Maybe$Nothing, data: newData, nbrRows: model.nbrRows + 1}),
								elm$core$Maybe$Nothing);
						case 'Down':
							var _n21 = _n10.a;
							var _n22 = _n10.b.a;
							var i = _n22.a;
							var j = _n22.b;
							var topHalf = A3(elm$core$Array$slice, 0, i + 1, model.data);
							var newRow = elm$core$Array$fromList(
								_List_fromArray(
									[
										A2(
										elm$core$Array$initialize,
										model.nbrCols,
										elm$core$Basics$always(''))
									]));
							var bottomHalf = A3(elm$core$Array$slice, i + 1, model.nbrRows, model.data);
							var newData = A2(
								elm$core$Array$append,
								topHalf,
								A2(elm$core$Array$append, newRow, bottomHalf));
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{currentFocusedCell: elm$core$Maybe$Nothing, data: newData, nbrRows: model.nbrRows + 1}),
								elm$core$Maybe$Nothing);
						case 'Left':
							var _n23 = _n10.a;
							var _n24 = _n10.b.a;
							var i = _n24.a;
							var j = _n24.b;
							var addNewCell = function (row) {
								var rightHalf = A3(elm$core$Array$slice, j, model.nbrCols, row);
								var leftHalf = A3(elm$core$Array$slice, 0, j, row);
								return A2(
									elm$core$Array$append,
									A2(elm$core$Array$push, '', leftHalf),
									rightHalf);
							};
							var newData = A2(elm$core$Array$map, addNewCell, model.data);
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{currentFocusedCell: elm$core$Maybe$Nothing, data: newData, nbrCols: model.nbrCols + 1}),
								elm$core$Maybe$Nothing);
						default:
							var _n25 = _n10.a;
							var _n26 = _n10.b.a;
							var i = _n26.a;
							var j = _n26.b;
							var addNewCell = function (row) {
								var rightHalf = A3(elm$core$Array$slice, j + 1, model.nbrCols, row);
								var leftHalf = A3(elm$core$Array$slice, 0, j + 1, row);
								return A2(
									elm$core$Array$append,
									A2(elm$core$Array$push, '', leftHalf),
									rightHalf);
							};
							var newData = A2(elm$core$Array$map, addNewCell, model.data);
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{currentFocusedCell: elm$core$Maybe$Nothing, data: newData, nbrCols: model.nbrCols + 1}),
								elm$core$Maybe$Nothing);
					}
				}
			case 'SwapDisplayMode':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							currentFocusedCell: elm$core$Maybe$Nothing,
							mode: _Utils_eq(model.mode, author$project$PageEditor$EditorPlugins$TablePlugin$DisplayOnly) ? author$project$PageEditor$EditorPlugins$TablePlugin$Edit : author$project$PageEditor$EditorPlugins$TablePlugin$DisplayOnly
						}),
					elm$core$Maybe$Nothing);
			case 'SaveAndQuit':
				return _Utils_Tuple2(
					model,
					elm$core$Maybe$Just(
						author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData(
							author$project$PageEditor$EditorPlugins$TablePlugin$toTableMeta(model))));
			default:
				return _Utils_Tuple2(
					model,
					elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginQuit));
		}
	});
var elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3(elm$core$String$slice, 0, -n, string);
	});
var elm$core$String$words = _String_words;
var author$project$PageEditor$EditorPlugins$VideoPlugin$parseHtml = function (str) {
	var propDict = elm$core$Dict$fromList(
		A2(
			elm$core$List$filterMap,
			function (mbPair) {
				_n1$2:
				while (true) {
					if (mbPair.b) {
						if (!mbPair.b.b) {
							var property = mbPair.a;
							return elm$core$Maybe$Just(
								_Utils_Tuple2(property, 'True'));
						} else {
							if (!mbPair.b.b.b) {
								var property = mbPair.a;
								var _n2 = mbPair.b;
								var value = _n2.a;
								return elm$core$Maybe$Just(
									_Utils_Tuple2(
										property,
										A3(elm$core$String$replace, '\"', '', value)));
							} else {
								break _n1$2;
							}
						}
					} else {
						break _n1$2;
					}
				}
				return elm$core$Maybe$Nothing;
			},
			A2(
				elm$core$List$map,
				elm$core$String$split('='),
				A2(
					elm$core$List$concatMap,
					elm$core$String$split('?'),
					elm$core$String$words(
						A2(
							elm$core$String$dropRight,
							10,
							A3(
								elm$core$String$replace,
								'></iframe>',
								'',
								A3(elm$core$String$replace, '<iframe ', '', str))))))));
	var mbNewSrc = A2(
		elm$core$Maybe$map,
		elm$core$List$head,
		A2(
			elm$core$Maybe$map,
			elm$core$List$reverse,
			A2(
				elm$core$Maybe$map,
				elm$core$String$split('/'),
				A2(elm$core$Dict$get, 'src', propDict))));
	if (mbNewSrc.$ === 'Just') {
		var newSrc = mbNewSrc.a;
		return elm$core$Maybe$Just(
			{
				controls: A2(
					elm$core$Maybe$withDefault,
					true,
					A2(
						elm$core$Maybe$map,
						function (v) {
							return !(v === '0');
						},
						A2(elm$core$Dict$get, 'controls', propDict))),
				frameBorder: A2(
					elm$core$Maybe$withDefault,
					false,
					A2(
						elm$core$Maybe$map,
						function (v) {
							return v === '1';
						},
						A2(elm$core$Dict$get, 'frameborder', propDict))),
				height: A2(
					elm$core$Maybe$withDefault,
					315,
					A2(
						elm$core$Maybe$andThen,
						elm$core$String$toInt,
						A2(elm$core$Dict$get, 'height', propDict))),
				newSrc: newSrc,
				privacy: A2(
					elm$core$Maybe$withDefault,
					false,
					A2(
						elm$core$Maybe$map,
						elm$core$String$contains('nocookie'),
						A2(elm$core$Dict$get, 'src', propDict))),
				startAt: A2(
					elm$core$Maybe$andThen,
					elm$core$String$toInt,
					A2(elm$core$Dict$get, 'start', propDict)),
				suggestions: A2(
					elm$core$Maybe$withDefault,
					false,
					A2(
						elm$core$Maybe$map,
						function (v) {
							return v === '1';
						},
						A2(elm$core$Dict$get, 'rel', propDict))),
				title: A2(
					elm$core$Maybe$withDefault,
					true,
					A2(
						elm$core$Maybe$map,
						function (v) {
							return !(v === '0');
						},
						A2(elm$core$Dict$get, 'showinfo', propDict))),
				width: A2(
					elm$core$Maybe$withDefault,
					560,
					A2(
						elm$core$Maybe$andThen,
						elm$core$String$toInt,
						A2(elm$core$Dict$get, 'width', propDict)))
			});
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var author$project$PageEditor$EditorPlugins$VideoPlugin$parseTime = function (str) {
	var _n0 = A2(elm$core$String$split, ':', str);
	if (!_n0.b) {
		return elm$core$Maybe$Nothing;
	} else {
		if (!_n0.b.b) {
			var ss = _n0.a;
			return elm$core$String$toInt(ss);
		} else {
			if (!_n0.b.b.b) {
				var mm = _n0.a;
				var _n1 = _n0.b;
				var ss = _n1.a;
				var _n2 = _Utils_Tuple2(
					elm$core$String$toInt(mm),
					elm$core$String$toInt(ss));
				if ((_n2.a.$ === 'Just') && (_n2.b.$ === 'Just')) {
					var mm_ = _n2.a.a;
					var ss_ = _n2.b.a;
					return elm$core$Maybe$Just((mm_ * 60) + ss_);
				} else {
					return elm$core$Maybe$Nothing;
				}
			} else {
				if (!_n0.b.b.b.b) {
					var hh = _n0.a;
					var _n3 = _n0.b;
					var mm = _n3.a;
					var _n4 = _n3.b;
					var ss = _n4.a;
					var _n5 = _Utils_Tuple3(
						elm$core$String$toInt(hh),
						elm$core$String$toInt(mm),
						elm$core$String$toInt(ss));
					if (((_n5.a.$ === 'Just') && (_n5.b.$ === 'Just')) && (_n5.c.$ === 'Just')) {
						var hh_ = _n5.a.a;
						var mm_ = _n5.b.a;
						var ss_ = _n5.c.a;
						return elm$core$Maybe$Just(((hh_ * 3600) + (mm_ * 60)) + ss_);
					} else {
						return elm$core$Maybe$Nothing;
					}
				} else {
					return elm$core$Maybe$Nothing;
				}
			}
		}
	}
};
var author$project$PageEditor$EditorPlugins$VideoPlugin$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'SetEmbedString':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							pastedHtml: elm$core$Maybe$Just(s)
						}),
					elm$core$Maybe$Nothing);
			case 'ParseHtml':
				var _n1 = A2(elm$core$Maybe$andThen, author$project$PageEditor$EditorPlugins$VideoPlugin$parseHtml, model.pastedHtml);
				if (_n1.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
				} else {
					var res = _n1.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								controls: res.controls,
								frameBorder: res.frameBorder,
								newSrc: res.newSrc,
								privacy: res.privacy,
								size: A2(author$project$Document$Document$VideoSize, res.width, res.height),
								sizeRatio: res.width / res.height,
								startAt: res.startAt,
								suggestions: res.suggestions,
								title: res.title
							}),
						elm$core$Maybe$Nothing);
				}
			case 'SetAlignment':
				var alignment = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{alignment: alignment}),
					elm$core$Maybe$Nothing);
			case 'CheckFrameBorder':
				var bool = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{frameBorder: bool}),
					elm$core$Maybe$Nothing);
			case 'CheckControls':
				var bool = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{controls: bool}),
					elm$core$Maybe$Nothing);
			case 'CheckPrivacy':
				var bool = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{privacy: bool}),
					elm$core$Maybe$Nothing);
			case 'CheckTitle':
				var bool = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{title: bool}),
					elm$core$Maybe$Nothing);
			case 'CheckSuggestions':
				var bool = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{suggestions: bool}),
					elm$core$Maybe$Nothing);
			case 'SetStartAt':
				var s = msg.a;
				var _n2 = author$project$PageEditor$EditorPlugins$VideoPlugin$parseTime(s);
				if (_n2.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
				} else {
					var t = _n2.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								startAt: elm$core$Maybe$Just(t)
							}),
						elm$core$Maybe$Nothing);
				}
			case 'SetWidth':
				var s = msg.a;
				var _n3 = elm$core$String$toInt(s);
				if (_n3.$ === 'Just') {
					var w = _n3.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								size: A2(
									author$project$Document$Document$VideoSize,
									w,
									elm$core$Basics$round(w / model.sizeRatio))
							}),
						elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
				}
			case 'SetHeight':
				var s = msg.a;
				var _n4 = elm$core$String$toInt(s);
				if (_n4.$ === 'Just') {
					var h = _n4.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								size: A2(
									author$project$Document$Document$VideoSize,
									elm$core$Basics$round(h * model.sizeRatio),
									h)
							}),
						elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
				}
			case 'SaveAndQuit':
				var _n5 = model.newSrc;
				if (_n5.$ === 'Nothing') {
					var _n6 = model.mbVideoMeta;
					if (_n6.$ === 'Nothing') {
						return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
					} else {
						var vm = _n6.a;
						var newVideoMeta = {controls: model.controls, frameBorder: model.frameBorder, hosting: author$project$Document$Document$Youtube, privacy: model.privacy, size: model.size, src: vm.src, startAt: model.startAt, suggestions: model.suggestions, title: model.title};
						return _Utils_Tuple2(
							model,
							elm$core$Maybe$Just(
								author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData(
									_Utils_Tuple2(
										newVideoMeta,
										A2(author$project$PageEditor$Internals$DocumentEditorHelpers$setAligment, model.alignment, model.videoAttrs)))));
					}
				} else {
					var url = _n5.a;
					var newVideoMeta = {controls: model.controls, frameBorder: model.frameBorder, hosting: author$project$Document$Document$Youtube, privacy: model.privacy, size: model.size, src: url, startAt: model.startAt, suggestions: model.suggestions, title: model.title};
					return _Utils_Tuple2(
						model,
						elm$core$Maybe$Just(
							author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData(
								_Utils_Tuple2(
									newVideoMeta,
									A2(author$project$PageEditor$Internals$DocumentEditorHelpers$setAligment, model.alignment, model.videoAttrs)))));
				}
			case 'Quit':
				return _Utils_Tuple2(
					model,
					elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginQuit));
			default:
				return _Utils_Tuple2(model, elm$core$Maybe$Nothing);
		}
	});
var author$project$PageEditor$Internals$DocumentEditorHelpers$ContainerEditPlugin = {$: 'ContainerEditPlugin'};
var author$project$PageEditor$Internals$DocumentEditorHelpers$PersistencePlugin = {$: 'PersistencePlugin'};
var author$project$PageEditor$Internals$DocumentEditorHelpers$newCell = F2(
	function (nextUid, cellContent) {
		return author$project$Document$Document$Cell(
			{
				attrs: _List_Nil,
				cellContent: cellContent,
				id: {
					classes: elm$core$Set$empty,
					docStyleId: elm$core$Maybe$Nothing,
					htmlId: elm$core$Maybe$Just(
						'defaultHtmlId' + elm$core$String$fromInt(nextUid)),
					uid: nextUid
				}
			});
	});
var author$project$PageEditor$Internals$DocumentEditorHelpers$emptyCell = function (nextUid) {
	return A2(author$project$PageEditor$Internals$DocumentEditorHelpers$newCell, nextUid, author$project$Document$Document$EmptyCell);
};
var author$project$PageEditor$Internals$DocumentEditorHelpers$newContainer = F2(
	function (nextUid, containerLabel) {
		return A2(
			author$project$Document$Document$Container,
			{
				attrs: _List_Nil,
				containerLabel: containerLabel,
				id: {
					classes: elm$core$Set$empty,
					docStyleId: elm$core$Maybe$Nothing,
					htmlId: elm$core$Maybe$Just(
						'defaultHtmlId' + elm$core$String$fromInt(nextUid)),
					uid: nextUid
				}
			},
			_List_fromArray(
				[
					author$project$PageEditor$Internals$DocumentEditorHelpers$emptyCell(nextUid + 1)
				]));
	});
var author$project$PageEditor$Internals$DocumentZipper$addNewInside = F2(
	function (nextUid, _n0) {
		var current = _n0.current;
		var contexts = _n0.contexts;
		if (current.$ === 'Container') {
			var cv = current.a;
			var xs = current.b;
			return elm$core$Maybe$Just(
				{
					contexts: contexts,
					current: A2(
						author$project$Document$Document$Container,
						cv,
						_Utils_ap(
							xs,
							_List_fromArray(
								[
									author$project$PageEditor$Internals$DocumentEditorHelpers$emptyCell(nextUid)
								])))
				});
		} else {
			return elm$core$Maybe$Nothing;
		}
	});
var author$project$PageEditor$Internals$DocumentZipper$zipLeft = function (_n0) {
	var current = _n0.current;
	var contexts = _n0.contexts;
	if (!contexts.b) {
		return elm$core$Maybe$Nothing;
	} else {
		var parent = contexts.a.parent;
		var left = contexts.a.left;
		var right = contexts.a.right;
		var cs = contexts.b;
		var _n2 = elm$core$List$reverse(left);
		if (!_n2.b) {
			return elm$core$Maybe$Nothing;
		} else {
			var d = _n2.a;
			var ds = _n2.b;
			return elm$core$Maybe$Just(
				{
					contexts: A2(
						elm$core$List$cons,
						{
							left: elm$core$List$reverse(ds),
							parent: parent,
							right: A2(elm$core$List$cons, current, right)
						},
						cs),
					current: d
				});
		}
	}
};
var author$project$PageEditor$Internals$DocumentZipper$addNewLeft = F2(
	function (nextUid, _n0) {
		var current = _n0.current;
		var contexts = _n0.contexts;
		if (!contexts.b) {
			return elm$core$Maybe$Nothing;
		} else {
			var parent = contexts.a.parent;
			var left = contexts.a.left;
			var right = contexts.a.right;
			var cs = contexts.b;
			return author$project$PageEditor$Internals$DocumentZipper$zipLeft(
				{
					contexts: A2(
						elm$core$List$cons,
						{
							left: _Utils_ap(
								left,
								_List_fromArray(
									[
										author$project$PageEditor$Internals$DocumentEditorHelpers$emptyCell(nextUid)
									])),
							parent: parent,
							right: right
						},
						cs),
					current: current
				});
		}
	});
var author$project$PageEditor$Internals$DocumentZipper$zipRight = function (_n0) {
	var current = _n0.current;
	var contexts = _n0.contexts;
	if (!contexts.b) {
		return elm$core$Maybe$Nothing;
	} else {
		var parent = contexts.a.parent;
		var left = contexts.a.left;
		var right = contexts.a.right;
		var cs = contexts.b;
		if (!right.b) {
			return elm$core$Maybe$Nothing;
		} else {
			var d = right.a;
			var ds = right.b;
			return elm$core$Maybe$Just(
				{
					contexts: A2(
						elm$core$List$cons,
						{
							left: _Utils_ap(
								left,
								_List_fromArray(
									[current])),
							parent: parent,
							right: ds
						},
						cs),
					current: d
				});
		}
	}
};
var author$project$PageEditor$Internals$DocumentZipper$addNewRight = F2(
	function (nextUid, _n0) {
		var current = _n0.current;
		var contexts = _n0.contexts;
		if (!contexts.b) {
			return elm$core$Maybe$Nothing;
		} else {
			var parent = contexts.a.parent;
			var left = contexts.a.left;
			var right = contexts.a.right;
			var cs = contexts.b;
			return author$project$PageEditor$Internals$DocumentZipper$zipRight(
				{
					contexts: A2(
						elm$core$List$cons,
						{
							left: left,
							parent: parent,
							right: A2(
								elm$core$List$cons,
								author$project$PageEditor$Internals$DocumentEditorHelpers$emptyCell(nextUid),
								right)
						},
						cs),
					current: current
				});
		}
	});
var author$project$PageEditor$Internals$DocumentZipper$safeDeleteCurrent = F2(
	function (nextUid, _n0) {
		var current = _n0.current;
		var contexts = _n0.contexts;
		if (!contexts.b) {
			return elm$core$Maybe$Nothing;
		} else {
			var parent = contexts.a.parent;
			var left = contexts.a.left;
			var right = contexts.a.right;
			var cs = contexts.b;
			return (_Utils_eq(left, _List_Nil) && _Utils_eq(right, _List_Nil)) ? elm$core$Maybe$Just(
				{
					contexts: cs,
					current: A2(
						author$project$Document$Document$Container,
						parent,
						_List_fromArray(
							[
								author$project$PageEditor$Internals$DocumentEditorHelpers$emptyCell(nextUid)
							]))
				}) : elm$core$Maybe$Just(
				{
					contexts: cs,
					current: A2(
						author$project$Document$Document$Container,
						parent,
						_Utils_ap(left, right))
				});
		}
	});
var author$project$PageEditor$Internals$DocumentZipper$swapLeft = function (_n0) {
	var current = _n0.current;
	var contexts = _n0.contexts;
	if (!contexts.b) {
		return elm$core$Maybe$Nothing;
	} else {
		var parent = contexts.a.parent;
		var left = contexts.a.left;
		var right = contexts.a.right;
		var cs = contexts.b;
		var _n2 = elm$core$List$reverse(left);
		if (!_n2.b) {
			return elm$core$Maybe$Nothing;
		} else {
			var d = _n2.a;
			var ds = _n2.b;
			return elm$core$Maybe$Just(
				{
					contexts: A2(
						elm$core$List$cons,
						{
							left: elm$core$List$reverse(ds),
							parent: parent,
							right: A2(elm$core$List$cons, d, right)
						},
						cs),
					current: current
				});
		}
	}
};
var author$project$PageEditor$Internals$DocumentZipper$swapRight = function (_n0) {
	var current = _n0.current;
	var contexts = _n0.contexts;
	if (!contexts.b) {
		return elm$core$Maybe$Nothing;
	} else {
		var parent = contexts.a.parent;
		var left = contexts.a.left;
		var right = contexts.a.right;
		var cs = contexts.b;
		if (!right.b) {
			return elm$core$Maybe$Nothing;
		} else {
			var d = right.a;
			var ds = right.b;
			return elm$core$Maybe$Just(
				{
					contexts: A2(
						elm$core$List$cons,
						{
							left: _Utils_ap(
								left,
								_List_fromArray(
									[d])),
							parent: parent,
							right: ds
						},
						cs),
					current: current
				});
		}
	}
};
var author$project$PageEditor$Internals$DocumentZipper$updateCurrent = F2(
	function (_new, _n0) {
		var current = _n0.current;
		var contexts = _n0.contexts;
		return {contexts: contexts, current: _new};
	});
var author$project$PageEditor$Internals$DocumentZipper$break = F2(
	function (p, xs) {
		var helper = F2(
			function (ys, left) {
				helper:
				while (true) {
					if (!ys.b) {
						return _Utils_Tuple2(left, _List_Nil);
					} else {
						var y = ys.a;
						var ys_ = ys.b;
						if (p(y)) {
							return _Utils_Tuple2(
								elm$core$List$reverse(left),
								A2(elm$core$List$cons, y, ys_));
						} else {
							var $temp$ys = ys_,
								$temp$left = A2(elm$core$List$cons, y, left);
							ys = $temp$ys;
							left = $temp$left;
							continue helper;
						}
					}
				}
			});
		return A2(helper, xs, _List_Nil);
	});
var author$project$PageEditor$Internals$DocumentZipper$zipDown = F2(
	function (p, _n0) {
		var current = _n0.current;
		var contexts = _n0.contexts;
		if (current.$ === 'Cell') {
			return elm$core$Maybe$Nothing;
		} else {
			if (!current.b.b) {
				return elm$core$Maybe$Nothing;
			} else {
				var nv = current.a;
				var ds = current.b;
				var _n2 = A2(author$project$PageEditor$Internals$DocumentZipper$break, p, ds);
				var l = _n2.a;
				var r = _n2.b;
				if (!r.b) {
					return elm$core$Maybe$Nothing;
				} else {
					var d = r.a;
					var ds_ = r.b;
					return elm$core$Maybe$Just(
						{
							contexts: A2(
								elm$core$List$cons,
								{left: l, parent: nv, right: ds_},
								contexts),
							current: d
						});
				}
			}
		}
	});
var author$project$Document$Document$getUid = function (doc) {
	if (doc.$ === 'Cell') {
		var cellContent = doc.a.cellContent;
		var id = doc.a.id;
		var attrs = doc.a.attrs;
		return id.uid;
	} else {
		var containerLabel = doc.a.containerLabel;
		var id = doc.a.id;
		var attrs = doc.a.attrs;
		return id.uid;
	}
};
var author$project$PageEditor$Internals$DocumentZipper$zipToUid = F2(
	function (uid, docZipper) {
		var helper = function (zipper) {
			var current = zipper.current;
			var contexts = zipper.contexts;
			if (_Utils_eq(
				author$project$Document$Document$getUid(current),
				uid)) {
				return elm$core$Maybe$Just(zipper);
			} else {
				if (current.$ === 'Cell') {
					return elm$core$Maybe$Nothing;
				} else {
					var children = current.b;
					var nextStep = function (child) {
						return A2(
							elm$core$Maybe$andThen,
							helper,
							A2(
								author$project$PageEditor$Internals$DocumentZipper$zipDown,
								function (d) {
									return _Utils_eq(
										author$project$Document$Document$getUid(d),
										author$project$Document$Document$getUid(child));
								},
								zipper));
					};
					return elm$core$List$head(
						A2(elm$core$List$filterMap, nextStep, children));
				}
			}
		};
		return helper(
			author$project$PageEditor$Internals$DocumentZipper$rewind(docZipper));
	});
var author$project$PageEditor$PageEditor$ListKeys = {$: 'ListKeys'};
var author$project$PageEditor$PageEditor$StorageFunnel = function (a) {
	return {$: 'StorageFunnel', a: a};
};
var billstclair$elm_port_funnel$PortFunnel$StateAccessors = F2(
	function (get, set) {
		return {get: get, set: set};
	});
var author$project$PageEditor$PageEditor$storageAccessors = A2(
	billstclair$elm_port_funnel$PortFunnel$StateAccessors,
	function ($) {
		return $.storage;
	},
	F2(
		function (substate, state) {
			return _Utils_update(
				state,
				{storage: substate});
		}));
var author$project$PageEditor$PageEditor$storageHandler = F3(
	function (response, state, mdl) {
		var model = _Utils_update(
			mdl,
			{funnelState: state});
		switch (response.$) {
			case 'GetResponse':
				var key = response.a.key;
				var value = response.a.value;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localStorageKey: key, localStorageValue: value}),
					elm$core$Platform$Cmd$none);
			case 'ListKeysResponse':
				var keys = response.a.keys;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localStorageKeys: keys}),
					elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
		}
	});
var billstclair$elm_localstorage$PortFunnel$LocalStorage$commander = F2(
	function (_n0, _n1) {
		return elm$core$Platform$Cmd$none;
	});
var billstclair$elm_port_funnel$PortFunnel$FunnelSpec = F4(
	function (accessors, moduleDesc, commander, handler) {
		return {accessors: accessors, commander: commander, handler: handler, moduleDesc: moduleDesc};
	});
var author$project$PageEditor$PageEditor$funnels = elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
			author$project$PageEditor$PageEditor$StorageFunnel(
				A4(billstclair$elm_port_funnel$PortFunnel$FunnelSpec, author$project$PageEditor$PageEditor$storageAccessors, billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleDesc, billstclair$elm_localstorage$PortFunnel$LocalStorage$commander, author$project$PageEditor$PageEditor$storageHandler)))
		]));
var author$project$PageEditor$EditorPlugins$ImagePlugin$open = F3(
	function (config, mbInput, externalMsg) {
		return _Utils_Tuple2(
			{
				alignment: A2(
					elm$core$Maybe$withDefault,
					author$project$PageEditor$Internals$DocumentEditorHelpers$ACenter,
					A2(
						elm$core$Maybe$map,
						A2(elm$core$Basics$composeL, author$project$PageEditor$Internals$DocumentEditorHelpers$findAlignment, elm$core$Tuple$second),
						mbInput)),
				externalMsg: externalMsg,
				imageAttrs: A2(
					elm$core$Maybe$withDefault,
					_List_Nil,
					A2(elm$core$Maybe$map, elm$core$Tuple$second, mbInput)),
				mbCaption: A2(
					elm$core$Maybe$andThen,
					A2(
						elm$core$Basics$composeL,
						function ($) {
							return $.caption;
						},
						elm$core$Tuple$first),
					mbInput),
				mbImageMeta: A2(elm$core$Maybe$map, elm$core$Tuple$first, mbInput),
				mode: author$project$PageEditor$EditorPlugins$ImagePlugin$ImageAttributeEditor
			},
			elm$core$Platform$Cmd$none);
	});
var author$project$PageEditor$PageEditor$openNewPlugin = F2(
	function (config, model) {
		var _n0 = model.currentPlugin;
		_n0$8:
		while (true) {
			if (_n0.$ === 'Just') {
				switch (_n0.a.$) {
					case 'TablePlugin':
						var _n1 = _n0.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									tablePlugin: A2(
										author$project$PageEditor$EditorPlugins$TablePlugin$init,
										elm$core$Maybe$Nothing,
										A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$TablePluginMsg))
								}),
							elm$core$Platform$Cmd$none);
					case 'TextBlockPlugin':
						var _n2 = _n0.a;
						var _n3 = A3(
							author$project$PageEditor$EditorPlugins$TextBlockPlugin$init,
							_List_Nil,
							elm$core$Maybe$Nothing,
							A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$TextBlockPluginMsg));
						var newTextBlockPlugin = _n3.a;
						var textBlockPluginCmds = _n3.b;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{textBlockPlugin: newTextBlockPlugin}),
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[textBlockPluginCmds])));
					case 'ImagePlugin':
						var _n4 = _n0.a;
						var _n5 = A3(
							author$project$PageEditor$EditorPlugins$ImagePlugin$open,
							config,
							elm$core$Maybe$Nothing,
							A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$ImagePluginMsg));
						var newImagePlugin = _n5.a;
						var imagePluginCmds = _n5.b;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{imagePlugin: newImagePlugin}),
							imagePluginCmds);
					case 'VideoPlugin':
						var _n6 = _n0.a;
						var newVideoPlugin = A2(
							author$project$PageEditor$EditorPlugins$VideoPlugin$init,
							elm$core$Maybe$Nothing,
							A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$VideoPluginMsg));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{videoPlugin: newVideoPlugin}),
							elm$core$Platform$Cmd$none);
					case 'BlockLinksPlugin':
						var _n7 = _n0.a;
						var newBlockLinksPlugin = A2(
							author$project$PageEditor$EditorPlugins$BlockLinksPlugin$init,
							elm$core$Maybe$Nothing,
							A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$BlockLinksPluginMsg));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{blockLinksPlugin: newBlockLinksPlugin}),
							elm$core$Platform$Cmd$none);
					case 'FichesPlugin':
						var _n8 = _n0.a;
						var newFichesPlugin = A2(
							author$project$PageEditor$EditorPlugins$FichesPlugin$init,
							_List_Nil,
							A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$FichesPluginMsg));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{fichesPlugin: newFichesPlugin}),
							elm$core$Platform$Cmd$none);
					case 'PictureLinksPlugin':
						var _n9 = _n0.a;
						var pictureLinksPlugin = A2(
							author$project$PageEditor$EditorPlugins$PictureLinksPlugin$init,
							_List_Nil,
							A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$PictureLinksPluginMsg));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{pictureLinksPlugin: pictureLinksPlugin}),
							elm$core$Platform$Cmd$none);
					case 'GalleryPlugin':
						var _n10 = _n0.a;
						var galleryPlugin = A3(
							author$project$PageEditor$EditorPlugins$GalleryPlugin$init,
							elm$core$Maybe$Nothing,
							model.availableThreads,
							A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$GalleryPluginMsg));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{galleryPlugin: galleryPlugin}),
							elm$core$Platform$Cmd$none);
					default:
						break _n0$8;
				}
			} else {
				break _n0$8;
			}
		}
		return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
	});
var author$project$PageEditor$Internals$DocumentEditorHelpers$BlockLinksPlugin = {$: 'BlockLinksPlugin'};
var author$project$PageEditor$Internals$DocumentEditorHelpers$FichesPlugin = {$: 'FichesPlugin'};
var author$project$PageEditor$Internals$DocumentEditorHelpers$GalleryPlugin = {$: 'GalleryPlugin'};
var author$project$PageEditor$Internals$DocumentEditorHelpers$ImagePlugin = {$: 'ImagePlugin'};
var author$project$PageEditor$Internals$DocumentEditorHelpers$NewDocPlugin = {$: 'NewDocPlugin'};
var author$project$PageEditor$Internals$DocumentEditorHelpers$PictureLinksPlugin = {$: 'PictureLinksPlugin'};
var author$project$PageEditor$Internals$DocumentEditorHelpers$TablePlugin = {$: 'TablePlugin'};
var author$project$PageEditor$Internals$DocumentEditorHelpers$TextBlockPlugin = {$: 'TextBlockPlugin'};
var author$project$PageEditor$Internals$DocumentEditorHelpers$VideoPlugin = {$: 'VideoPlugin'};
var author$project$PageEditor$PageEditor$openPlugin = F2(
	function (config, model) {
		var _n0 = author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document);
		if (_n0.$ === 'Cell') {
			var cellContent = _n0.a.cellContent;
			var id = _n0.a.id;
			var attrs = _n0.a.attrs;
			switch (cellContent.$) {
				case 'Table':
					var tm = cellContent.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								currentPlugin: elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$TablePlugin),
								tablePlugin: A2(
									author$project$PageEditor$EditorPlugins$TablePlugin$init,
									elm$core$Maybe$Just(tm),
									A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$TablePluginMsg))
							}),
						elm$core$Platform$Cmd$none);
				case 'TextBlock':
					var tbElems = cellContent.a;
					var _n2 = A3(
						author$project$PageEditor$EditorPlugins$TextBlockPlugin$init,
						attrs,
						elm$core$Maybe$Just(tbElems),
						A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$TextBlockPluginMsg));
					var newTextBlockPlugin = _n2.a;
					var textBlockPluginCmds = _n2.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								currentPlugin: elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$TextBlockPlugin),
								textBlockPlugin: newTextBlockPlugin
							}),
						elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[textBlockPluginCmds])));
				case 'EmptyCell':
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								currentPlugin: elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$NewDocPlugin)
							}),
						elm$core$Platform$Cmd$none);
				case 'Image':
					var imgMeta = cellContent.a;
					var _n3 = A3(
						author$project$PageEditor$EditorPlugins$ImagePlugin$open,
						config,
						elm$core$Maybe$Just(
							_Utils_Tuple2(imgMeta, attrs)),
						A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$ImagePluginMsg));
					var newImagePlugin = _n3.a;
					var imagePluginCmds = _n3.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								currentPlugin: elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$ImagePlugin),
								imagePlugin: newImagePlugin
							}),
						imagePluginCmds);
				case 'Video':
					var videoMeta = cellContent.a;
					var newVideoPlugin = A2(
						author$project$PageEditor$EditorPlugins$VideoPlugin$init,
						elm$core$Maybe$Just(
							_Utils_Tuple2(videoMeta, attrs)),
						A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$VideoPluginMsg));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								currentPlugin: elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$VideoPlugin),
								videoPlugin: newVideoPlugin
							}),
						elm$core$Platform$Cmd$none);
				case 'BlockLinks':
					var blocks = cellContent.a;
					var newBlockLinksPlugin = A2(
						author$project$PageEditor$EditorPlugins$BlockLinksPlugin$init,
						elm$core$Maybe$Just(blocks),
						A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$BlockLinksPluginMsg));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								blockLinksPlugin: newBlockLinksPlugin,
								currentPlugin: elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$BlockLinksPlugin)
							}),
						elm$core$Platform$Cmd$none);
				case 'Fiches':
					var fichesId = cellContent.a;
					var newFichesPlugin = A2(
						author$project$PageEditor$EditorPlugins$FichesPlugin$init,
						fichesId,
						A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$FichesPluginMsg));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								currentPlugin: elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$FichesPlugin),
								fichesPlugin: newFichesPlugin
							}),
						elm$core$Platform$Cmd$none);
				case 'PictureLinks':
					var picLinks = cellContent.a;
					var newPicLinks = A2(
						author$project$PageEditor$EditorPlugins$PictureLinksPlugin$init,
						picLinks,
						A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$PictureLinksPluginMsg));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								currentPlugin: elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$PictureLinksPlugin),
								pictureLinksPlugin: newPicLinks
							}),
						elm$core$Platform$Cmd$none);
				case 'Gallery':
					var galleryMeta = cellContent.a;
					var newGallery = A3(
						author$project$PageEditor$EditorPlugins$GalleryPlugin$init,
						elm$core$Maybe$Just(galleryMeta),
						model.availableThreads,
						A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$GalleryPluginMsg));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								currentPlugin: elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$GalleryPlugin),
								galleryPlugin: newGallery
							}),
						elm$core$Platform$Cmd$none);
				default:
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
			}
		} else {
			return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
		}
	});
var elm$browser$Browser$Dom$getElement = _Browser_getElement;
var elm$browser$Browser$Dom$setViewportOf = _Browser_setViewportOf;
var author$project$PageEditor$PageEditor$scrollTo = function (mbId) {
	if (mbId.$ === 'Nothing') {
		return elm$core$Platform$Cmd$none;
	} else {
		var destId = mbId.a;
		return A2(
			elm$core$Task$attempt,
			function (_n1) {
				return author$project$PageEditor$PageEditor$NoOp;
			},
			A2(
				elm$core$Task$andThen,
				function (mainContInfo) {
					return A2(
						elm$core$Task$andThen,
						function (el) {
							return A3(elm$browser$Browser$Dom$setViewportOf, 'documentContainer', 0, (el.element.y - mainContInfo.element.y) - 50);
						},
						elm$browser$Browser$Dom$getElement(destId));
				},
				elm$browser$Browser$Dom$getElement('defaultHtmlId0')));
	}
};
var author$project$PageEditor$PageEditor$undoCacheDepth = 4;
var author$project$PageTreeEditor$PageTreeEditor$getMbContentId = function (_n0) {
	var mbContentId = _n0.a.mbContentId;
	return mbContentId;
};
var author$project$PageTreeEditor$PageTreeEditor$loadedContent = function (model) {
	return A2(
		elm$core$Maybe$andThen,
		function (k) {
			return A2(
				elm$core$Dict$get,
				TSFoster$elm_uuid$UUID$canonical(k),
				model.contents);
		},
		A2(elm$core$Maybe$andThen, author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.fileIoSelected));
};
var billstclair$elm_localstorage$PortFunnel$LocalStorage$clear = billstclair$elm_localstorage$PortFunnel$InternalTypes$Clear;
var billstclair$elm_localstorage$PortFunnel$LocalStorage$get = billstclair$elm_localstorage$PortFunnel$InternalTypes$Get;
var billstclair$elm_localstorage$PortFunnel$LocalStorage$put = billstclair$elm_localstorage$PortFunnel$InternalTypes$Put;
var Janiczek$cmd_extra$Cmd$Extra$withCmds = F2(
	function (cmds, model) {
		return _Utils_Tuple2(
			model,
			elm$core$Platform$Cmd$batch(cmds));
	});
var billstclair$elm_port_funnel$PortFunnel$genericMessageToCmdPort = F2(
	function (cmdPort, genericMessage) {
		return cmdPort(
			billstclair$elm_port_funnel$PortFunnel$encodeGenericMessage(genericMessage));
	});
var billstclair$elm_port_funnel$PortFunnel$process = F4(
	function (accessors, _n0, genericMessage, state) {
		var moduleDesc = _n0.a;
		var _n1 = moduleDesc.decoder(genericMessage);
		if (_n1.$ === 'Err') {
			var err = _n1.a;
			return elm$core$Result$Err(err);
		} else {
			var message = _n1.a;
			var substate = accessors.get(state);
			var _n2 = A2(moduleDesc.process, message, substate);
			var substate2 = _n2.a;
			var response = _n2.b;
			return elm$core$Result$Ok(
				_Utils_Tuple2(
					A2(accessors.set, substate2, state),
					response));
		}
	});
var billstclair$elm_port_funnel$PortFunnel$appProcess = F5(
	function (cmdPort, genericMessage, funnel, state, model) {
		var _n0 = A4(billstclair$elm_port_funnel$PortFunnel$process, funnel.accessors, funnel.moduleDesc, genericMessage, state);
		if (_n0.$ === 'Err') {
			var error = _n0.a;
			return elm$core$Result$Err(error);
		} else {
			var _n1 = _n0.a;
			var state2 = _n1.a;
			var response = _n1.b;
			var cmd = A2(
				funnel.commander,
				billstclair$elm_port_funnel$PortFunnel$genericMessageToCmdPort(cmdPort),
				response);
			var _n2 = A3(funnel.handler, response, state2, model);
			var model2 = _n2.a;
			var cmd2 = _n2.b;
			return elm$core$Result$Ok(
				A2(
					Janiczek$cmd_extra$Cmd$Extra$withCmds,
					_List_fromArray(
						[cmd, cmd2]),
					model2));
		}
	});
var billstclair$elm_port_funnel$PortFunnel$decodeValue = F2(
	function (decoder, value) {
		var _n0 = A2(elm$json$Json$Decode$decodeValue, decoder, value);
		if (_n0.$ === 'Ok') {
			var res = _n0.a;
			return elm$core$Result$Ok(res);
		} else {
			var err = _n0.a;
			return elm$core$Result$Err(
				elm$json$Json$Decode$errorToString(err));
		}
	});
var billstclair$elm_port_funnel$PortFunnel$genericMessageDecoder = A4(
	elm$json$Json$Decode$map3,
	billstclair$elm_port_funnel$PortFunnel$GenericMessage,
	A2(elm$json$Json$Decode$field, 'module', elm$json$Json$Decode$string),
	A2(elm$json$Json$Decode$field, 'tag', elm$json$Json$Decode$string),
	A2(elm$json$Json$Decode$field, 'args', elm$json$Json$Decode$value));
var billstclair$elm_port_funnel$PortFunnel$decodeGenericMessage = function (value) {
	return A2(billstclair$elm_port_funnel$PortFunnel$decodeValue, billstclair$elm_port_funnel$PortFunnel$genericMessageDecoder, value);
};
var emilianobovetti$elm_yajson$Yajson$Array = function (a) {
	return {$: 'Array', a: a};
};
var emilianobovetti$elm_yajson$Yajson$Bool = function (a) {
	return {$: 'Bool', a: a};
};
var emilianobovetti$elm_yajson$Yajson$Null = {$: 'Null'};
var emilianobovetti$elm_yajson$Yajson$Number = function (a) {
	return {$: 'Number', a: a};
};
var emilianobovetti$elm_yajson$Yajson$Object = function (a) {
	return {$: 'Object', a: a};
};
var emilianobovetti$elm_yajson$Yajson$String = function (a) {
	return {$: 'String', a: a};
};
function emilianobovetti$elm_yajson$Yajson$cyclic$decoder() {
	var objectDecoder = A2(
		elm$json$Json$Decode$map,
		elm$core$List$reverse,
		elm$json$Json$Decode$keyValuePairs(
			elm$json$Json$Decode$lazy(
				function (_n1) {
					return emilianobovetti$elm_yajson$Yajson$cyclic$decoder();
				})));
	var arrayDecoder = elm$json$Json$Decode$list(
		elm$json$Json$Decode$lazy(
			function (_n0) {
				return emilianobovetti$elm_yajson$Yajson$cyclic$decoder();
			}));
	return elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2(elm$json$Json$Decode$map, emilianobovetti$elm_yajson$Yajson$Object, objectDecoder),
				A2(elm$json$Json$Decode$map, emilianobovetti$elm_yajson$Yajson$Array, arrayDecoder),
				A2(elm$json$Json$Decode$map, emilianobovetti$elm_yajson$Yajson$String, elm$json$Json$Decode$string),
				A2(elm$json$Json$Decode$map, emilianobovetti$elm_yajson$Yajson$Number, elm$json$Json$Decode$float),
				A2(elm$json$Json$Decode$map, emilianobovetti$elm_yajson$Yajson$Bool, elm$json$Json$Decode$bool),
				elm$json$Json$Decode$null(emilianobovetti$elm_yajson$Yajson$Null)
			]));
}
try {
	var emilianobovetti$elm_yajson$Yajson$decoder = emilianobovetti$elm_yajson$Yajson$cyclic$decoder();
	emilianobovetti$elm_yajson$Yajson$cyclic$decoder = function () {
		return emilianobovetti$elm_yajson$Yajson$decoder;
	};
} catch ($) {
throw 'Some top-level definitions from `Yajson` are causing infinite recursion:\n\n  ┌─────┐\n  │    decoder\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.0/halting-problem to learn how to fix it!';}
var emilianobovetti$elm_yajson$Yajson$fromValue = function (val) {
	return A2(elm$json$Json$Decode$decodeValue, emilianobovetti$elm_yajson$Yajson$decoder, val);
};
var emilianobovetti$elm_yajson$Yajson$Stringify$Level = function (a) {
	return {$: 'Level', a: a};
};
var elm$core$String$fromFloat = _String_fromNumber;
var emilianobovetti$elm_yajson$Yajson$Stringify$None = {$: 'None'};
var emilianobovetti$elm_yajson$Yajson$Stringify$append = F2(
	function (suffix, str) {
		return _Utils_ap(str, suffix);
	});
var emilianobovetti$elm_yajson$Yajson$Stringify$beginArray = function (ind) {
	if (ind.$ === 'None') {
		return '[';
	} else {
		return '[ ';
	}
};
var emilianobovetti$elm_yajson$Yajson$Stringify$beginObject = function (ind) {
	if (ind.$ === 'None') {
		return '{';
	} else {
		return '{ ';
	}
};
var emilianobovetti$elm_yajson$Yajson$Stringify$indent = F2(
	function (ind, str) {
		if (ind.$ === 'None') {
			return str;
		} else {
			if (!ind.a) {
				return '\n' + str;
			} else {
				var lvl = ind.a;
				return '\n' + (A2(elm$core$String$repeat, lvl, '    ') + str);
			}
		}
	});
var emilianobovetti$elm_yajson$Yajson$Stringify$nameSeparator = function (ind) {
	if (ind.$ === 'None') {
		return ':';
	} else {
		return ': ';
	}
};
var emilianobovetti$elm_yajson$Yajson$Stringify$unescape = F2(
	function (chr, acc) {
		switch (chr.valueOf()) {
			case '\"':
				return '\\\"' + acc;
			case '\\':
				return '\\\\' + acc;
			case '\n':
				return '\\n' + acc;
			case '\t':
				return '\\t' + acc;
			case '\u0008':
				return '\\b' + acc;
			case '\u000c':
				return '\\f' + acc;
			case '\u000d':
				return '\\r' + acc;
			default:
				return _Utils_ap(
					elm$core$String$fromChar(chr),
					acc);
		}
	});
var emilianobovetti$elm_yajson$Yajson$Stringify$stringToSource = function (str) {
	return '\"' + (A3(elm$core$String$foldr, emilianobovetti$elm_yajson$Yajson$Stringify$unescape, '', str) + '\"');
};
var emilianobovetti$elm_yajson$Yajson$Stringify$valueSeparator = function (ind) {
	if (ind.$ === 'None') {
		return ',';
	} else {
		return A2(emilianobovetti$elm_yajson$Yajson$Stringify$indent, ind, ', ');
	}
};
var emilianobovetti$elm_yajson$Yajson$Stringify$foldArray = F3(
	function (ind, val, acc) {
		if (acc === '') {
			return A2(
				emilianobovetti$elm_yajson$Yajson$Stringify$append,
				A2(emilianobovetti$elm_yajson$Yajson$Stringify$nextLevel, ind, val),
				emilianobovetti$elm_yajson$Yajson$Stringify$beginArray(ind));
		} else {
			return A2(
				emilianobovetti$elm_yajson$Yajson$Stringify$append,
				A2(emilianobovetti$elm_yajson$Yajson$Stringify$nextLevel, ind, val),
				A2(
					emilianobovetti$elm_yajson$Yajson$Stringify$append,
					emilianobovetti$elm_yajson$Yajson$Stringify$valueSeparator(ind),
					acc));
		}
	});
var emilianobovetti$elm_yajson$Yajson$Stringify$foldObject = F3(
	function (ind, _n2, acc) {
		var name = _n2.a;
		var val = _n2.b;
		if (acc === '') {
			return A2(
				emilianobovetti$elm_yajson$Yajson$Stringify$append,
				A2(emilianobovetti$elm_yajson$Yajson$Stringify$nextLevel, ind, val),
				A2(
					emilianobovetti$elm_yajson$Yajson$Stringify$append,
					emilianobovetti$elm_yajson$Yajson$Stringify$nameSeparator(ind),
					A2(
						emilianobovetti$elm_yajson$Yajson$Stringify$append,
						emilianobovetti$elm_yajson$Yajson$Stringify$stringToSource(name),
						emilianobovetti$elm_yajson$Yajson$Stringify$beginObject(ind))));
		} else {
			return A2(
				emilianobovetti$elm_yajson$Yajson$Stringify$append,
				A2(emilianobovetti$elm_yajson$Yajson$Stringify$nextLevel, ind, val),
				A2(
					emilianobovetti$elm_yajson$Yajson$Stringify$append,
					emilianobovetti$elm_yajson$Yajson$Stringify$nameSeparator(ind),
					A2(
						emilianobovetti$elm_yajson$Yajson$Stringify$append,
						emilianobovetti$elm_yajson$Yajson$Stringify$stringToSource(name),
						A2(
							emilianobovetti$elm_yajson$Yajson$Stringify$append,
							emilianobovetti$elm_yajson$Yajson$Stringify$valueSeparator(ind),
							acc))));
		}
	});
var emilianobovetti$elm_yajson$Yajson$Stringify$nextLevel = F2(
	function (ind, json) {
		if (ind.$ === 'Level') {
			var lvl = ind.a;
			return A2(
				emilianobovetti$elm_yajson$Yajson$Stringify$toString,
				emilianobovetti$elm_yajson$Yajson$Stringify$Level(lvl + 1),
				json);
		} else {
			return A2(emilianobovetti$elm_yajson$Yajson$Stringify$toString, emilianobovetti$elm_yajson$Yajson$Stringify$None, json);
		}
	});
var emilianobovetti$elm_yajson$Yajson$Stringify$toString = F2(
	function (ind, json) {
		switch (json.$) {
			case 'Object':
				if (!json.a.b) {
					return A2(emilianobovetti$elm_yajson$Yajson$Stringify$indent, ind, '{}');
				} else {
					var assoc = json.a;
					return A2(
						emilianobovetti$elm_yajson$Yajson$Stringify$indent,
						ind,
						A2(
							emilianobovetti$elm_yajson$Yajson$Stringify$append,
							A2(emilianobovetti$elm_yajson$Yajson$Stringify$indent, ind, '}'),
							A3(
								elm$core$List$foldl,
								emilianobovetti$elm_yajson$Yajson$Stringify$foldObject(ind),
								'',
								assoc)));
				}
			case 'Array':
				if (!json.a.b) {
					return A2(emilianobovetti$elm_yajson$Yajson$Stringify$indent, ind, '[]');
				} else {
					var list = json.a;
					return A2(
						emilianobovetti$elm_yajson$Yajson$Stringify$indent,
						ind,
						A2(
							emilianobovetti$elm_yajson$Yajson$Stringify$append,
							A2(emilianobovetti$elm_yajson$Yajson$Stringify$indent, ind, ']'),
							A3(
								elm$core$List$foldl,
								emilianobovetti$elm_yajson$Yajson$Stringify$foldArray(ind),
								'',
								list)));
				}
			case 'String':
				var str = json.a;
				return emilianobovetti$elm_yajson$Yajson$Stringify$stringToSource(str);
			case 'Number':
				var num = json.a;
				return elm$core$String$fromFloat(num);
			case 'Bool':
				if (!json.a) {
					return 'false';
				} else {
					return 'true';
				}
			default:
				return 'null';
		}
	});
var emilianobovetti$elm_yajson$Yajson$Stringify$pretty = A2(
	elm$core$Basics$composeR,
	emilianobovetti$elm_yajson$Yajson$Stringify$toString(
		emilianobovetti$elm_yajson$Yajson$Stringify$Level(0)),
	elm$core$String$trim);
var author$project$PageEditor$PageEditor$internalUpdate = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 'CurrentViewport':
				var vp = msg.a;
				var ws = model.config;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							config: _Utils_update(
								ws,
								{
									height: elm$core$Basics$round(vp.viewport.height),
									previewMode: (vp.viewport.width < 1300) ? author$project$Document$DocumentViews$StyleSheets$PreviewTablet : author$project$Document$DocumentViews$StyleSheets$PreviewScreen,
									width: elm$core$Basics$round(vp.viewport.width)
								})
						}),
					elm$core$Platform$Cmd$none);
			case 'MainInterfaceViewport':
				var res = msg.a;
				if (res.$ === 'Ok') {
					var viewport = res.a.viewport;
					var currentConfig = model.config;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								config: _Utils_update(
									currentConfig,
									{
										mainInterfaceHeight: elm$core$Basics$round(viewport.height)
									})
							}),
						elm$core$Platform$Cmd$none);
				} else {
					var s = res.a.a;
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'WinResize':
				var width = msg.a;
				var height = msg.b;
				var cfg = model.config;
				var newConfig = _Utils_update(
					cfg,
					{height: height, width: width});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{config: newConfig}),
					elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								elm$core$Task$attempt,
								A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$MainInterfaceViewport),
								elm$browser$Browser$Dom$getViewportOf('mainInterface'))
							])));
			case 'JumpTo':
				var id = msg.a;
				return _Utils_Tuple2(
					model,
					A2(
						elm$core$Platform$Cmd$map,
						model.externalMsg,
						author$project$PageEditor$PageEditor$scrollTo(id)));
			case 'KeyDown':
				var s = msg.a;
				return (s === 'Control') ? _Utils_Tuple2(
					_Utils_update(
						model,
						{controlDown: true}),
					elm$core$Platform$Cmd$none) : _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
			case 'KeyUp':
				var s = msg.a;
				return (s === 'Control') ? _Utils_Tuple2(
					_Utils_update(
						model,
						{controlDown: false}),
					elm$core$Platform$Cmd$none) : _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
			case 'SelectDoc':
				var uid = msg.a;
				var _n2 = A2(
					author$project$PageEditor$Internals$DocumentZipper$zipDown,
					author$project$Document$Document$hasUid(uid),
					model.document);
				if (_n2.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var newDocument = _n2.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{document: newDocument}),
						elm$core$Platform$Cmd$none);
				}
			case 'ZipToUid':
				var uid = msg.a;
				var _n3 = A2(author$project$PageEditor$Internals$DocumentZipper$zipToUid, uid, model.document);
				if (_n3.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var newDocument = _n3.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{document: newDocument}),
						A2(
							elm$core$Platform$Cmd$map,
							model.externalMsg,
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										author$project$PageEditor$PageEditor$scrollTo(
										author$project$Document$Document$getHtmlId(
											author$project$PageEditor$Internals$DocumentZipper$extractDoc(newDocument)))
									]))));
				}
			case 'Rewind':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							document: author$project$PageEditor$Internals$DocumentZipper$rewind(model.document)
						}),
					elm$core$Platform$Cmd$none);
			case 'SwapLeft':
				var _n4 = author$project$PageEditor$Internals$DocumentZipper$swapLeft(model.document);
				if (_n4.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var newDoc = _n4.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{document: newDoc}),
						A2(
							elm$core$Platform$Cmd$map,
							model.externalMsg,
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										author$project$PageEditor$PageEditor$scrollTo(
										author$project$Document$Document$getHtmlId(
											author$project$PageEditor$Internals$DocumentZipper$extractDoc(newDoc)))
									]))));
				}
			case 'SwapRight':
				var _n5 = author$project$PageEditor$Internals$DocumentZipper$swapRight(model.document);
				if (_n5.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var newDoc = _n5.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{document: newDoc}),
						A2(
							elm$core$Platform$Cmd$map,
							model.externalMsg,
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										author$project$PageEditor$PageEditor$scrollTo(
										author$project$Document$Document$getHtmlId(
											author$project$PageEditor$Internals$DocumentZipper$extractDoc(newDoc)))
									]))));
				}
			case 'EditCell':
				return A2(author$project$PageEditor$PageEditor$openPlugin, config, model);
			case 'EditContainer':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							currentPlugin: elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$ContainerEditPlugin)
						}),
					elm$core$Platform$Cmd$none);
			case 'SwapContainerType':
				var containerLabel = msg.a;
				var _n6 = author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document);
				if (_n6.$ === 'Container') {
					var cv = _n6.a;
					var children = _n6.b;
					var newDoc = A2(
						author$project$Document$Document$Container,
						_Utils_update(
							cv,
							{containerLabel: containerLabel}),
						children);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								currentPlugin: elm$core$Maybe$Nothing,
								document: A2(author$project$PageEditor$Internals$DocumentZipper$updateCurrent, newDoc, model.document)
							}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'UpdateContainerAttr':
				var _n7 = msg.a;
				var mbToRemove = _n7.a;
				var mbToAdd = _n7.b;
				var _n8 = author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document);
				if (_n8.$ === 'Container') {
					var cv = _n8.a;
					var children = _n8.b;
					var removeFun = A2(
						elm$core$Maybe$withDefault,
						elm$core$Basics$identity,
						A2(elm$core$Maybe$map, elm_community$list_extra$List$Extra$remove, mbToRemove));
					var addFun = A2(
						elm$core$Maybe$withDefault,
						elm$core$Basics$identity,
						A2(
							elm$core$Maybe$map,
							F2(
								function (toAdd, attrs) {
									return A2(elm$core$List$member, toAdd, attrs) ? attrs : _Utils_ap(
										attrs,
										_List_fromArray(
											[toAdd]));
								}),
							mbToAdd));
					var newAttrs = addFun(
						removeFun(cv.attrs));
					var newDoc = A2(
						author$project$Document$Document$Container,
						_Utils_update(
							cv,
							{attrs: newAttrs}),
						children);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								currentPlugin: elm$core$Maybe$Nothing,
								document: A2(author$project$PageEditor$Internals$DocumentZipper$updateCurrent, newDoc, model.document)
							}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'AddNewInside':
				var _n9 = A2(author$project$PageEditor$Internals$DocumentZipper$addNewInside, model.nextUid, model.document);
				if (_n9.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var newDoc = _n9.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{document: newDoc, nextUid: model.nextUid + 1}),
						elm$core$Platform$Cmd$none);
				}
			case 'AddNewLeft':
				var _n10 = A2(author$project$PageEditor$Internals$DocumentZipper$addNewLeft, model.nextUid, model.document);
				if (_n10.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var newDoc = _n10.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{document: newDoc, nextUid: model.nextUid + 1}),
						A2(
							elm$core$Platform$Cmd$map,
							model.externalMsg,
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										author$project$PageEditor$PageEditor$scrollTo(
										author$project$Document$Document$getHtmlId(
											author$project$PageEditor$Internals$DocumentZipper$extractDoc(newDoc)))
									]))));
				}
			case 'AddNewRight':
				var _n11 = A2(author$project$PageEditor$Internals$DocumentZipper$addNewRight, model.nextUid, model.document);
				if (_n11.$ === 'Nothing') {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var newDoc = _n11.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{document: newDoc, nextUid: model.nextUid + 1}),
						A2(
							elm$core$Platform$Cmd$map,
							model.externalMsg,
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										author$project$PageEditor$PageEditor$scrollTo(
										author$project$Document$Document$getHtmlId(
											author$project$PageEditor$Internals$DocumentZipper$extractDoc(newDoc)))
									]))));
				}
			case 'CreateNewContainer':
				var containerLabel = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							currentPlugin: elm$core$Maybe$Nothing,
							document: A2(
								author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
								A2(author$project$PageEditor$Internals$DocumentEditorHelpers$newContainer, model.nextUid, containerLabel),
								model.document),
							nextUid: model.nextUid + 2
						}),
					elm$core$Platform$Cmd$batch(_List_Nil));
			case 'CreateNewCell':
				var plugin = msg.a;
				var _n12 = A2(
					author$project$PageEditor$PageEditor$openNewPlugin,
					config,
					_Utils_update(
						model,
						{
							currentPlugin: elm$core$Maybe$Just(plugin)
						}));
				var newModel = _n12.a;
				var cmd = _n12.b;
				return _Utils_Tuple2(
					_Utils_update(
						newModel,
						{nextUid: model.nextUid + 1}),
					elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[cmd])));
			case 'InsertNewCell':
				var cellContent = msg.a;
				var _n13 = author$project$PageEditor$EditorPlugins$NewDocPlugin$cellContStrToCellContent(cellContent);
				if (_n13.$ === 'Just') {
					var cellContent_ = _n13.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								currentPlugin: elm$core$Maybe$Nothing,
								document: A2(
									author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
									A2(author$project$PageEditor$Internals$DocumentEditorHelpers$newCell, model.nextUid, cellContent_),
									model.document),
								nextUid: model.nextUid + 1
							}),
						elm$core$Platform$Cmd$batch(_List_Nil));
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'DeleteSelected':
				var newDoc = A2(author$project$PageEditor$Internals$DocumentZipper$safeDeleteCurrent, model.nextUid, model.document);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							document: A2(elm$core$Maybe$withDefault, model.document, newDoc),
							undoCache: A2(
								elm$core$List$take,
								author$project$PageEditor$PageEditor$undoCacheDepth,
								A2(elm$core$List$cons, model.document, model.undoCache))
						}),
					elm$core$Platform$Cmd$none);
			case 'Copy':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							clipboard: elm$core$Maybe$Just(
								author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document))
						}),
					elm$core$Platform$Cmd$none);
			case 'Cut':
				var newDoc = A2(author$project$PageEditor$Internals$DocumentZipper$safeDeleteCurrent, model.nextUid, model.document);
				var currentDoc = author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							clipboard: elm$core$Maybe$Just(currentDoc),
							document: A2(elm$core$Maybe$withDefault, model.document, newDoc),
							nextUid: model.nextUid + 1,
							undoCache: A2(
								elm$core$List$take,
								author$project$PageEditor$PageEditor$undoCacheDepth,
								A2(elm$core$List$cons, model.document, model.undoCache))
						}),
					elm$core$Platform$Cmd$none);
			case 'Paste':
				var _n14 = _Utils_Tuple2(
					author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document),
					model.clipboard);
				if ((_n14.a.$ === 'Container') && (_n14.b.$ === 'Just')) {
					var _n15 = _n14.a;
					var cv = _n15.a;
					var xs = _n15.b;
					var doc = _n14.b.a;
					var newDoc = A2(
						author$project$Document$Document$Container,
						cv,
						_Utils_ap(
							xs,
							_List_fromArray(
								[doc])));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								clipboard: elm$core$Maybe$Nothing,
								document: A2(author$project$PageEditor$Internals$DocumentZipper$updateCurrent, newDoc, model.document)
							}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'Undo':
				var _n16 = model.undoCache;
				if (!_n16.b) {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var zipper = _n16.a;
					var xs = _n16.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{document: zipper, undoCache: xs}),
						elm$core$Platform$Cmd$none);
				}
			case 'MenuClick':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{menuClicked: !model.menuClicked}),
					elm$core$Platform$Cmd$none);
			case 'MenuClickOff':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{menuClicked: false}),
					elm$core$Platform$Cmd$none);
			case 'TopEntryFocused':
				var label = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{menuFocused: label}),
					elm$core$Platform$Cmd$none);
			case 'SetPreviewMode':
				var pm = msg.a;
				var config_ = model.config;
				var newConfig = _Utils_update(
					config_,
					{previewMode: pm});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{config: newConfig}),
					elm$core$Platform$Cmd$none);
			case 'SetSeason':
				var season = msg.a;
				var config_ = model.config;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							config: _Utils_update(
								config_,
								{season: season})
						}),
					elm$core$Platform$Cmd$none);
			case 'ToogleCountainersColors':
				var config_ = model.config;
				var newConfig = _Utils_update(
					config_,
					{containersBkgColors: !config_.containersBkgColors});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{config: newConfig}),
					elm$core$Platform$Cmd$none);
			case 'SetEditorPlugin':
				var mbPlugin = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{currentPlugin: mbPlugin}),
					elm$core$Platform$Cmd$none);
			case 'TablePluginMsg':
				var tableMsg = msg.a;
				var _n17 = A2(author$project$PageEditor$EditorPlugins$TablePlugin$update, tableMsg, model.tablePlugin);
				var newTablePlugin = _n17.a;
				var mbEditorPluginResult = _n17.b;
				if (mbEditorPluginResult.$ === 'Nothing') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{tablePlugin: newTablePlugin}),
						elm$core$Platform$Cmd$none);
				} else {
					if (mbEditorPluginResult.a.$ === 'EditorPluginQuit') {
						var _n19 = mbEditorPluginResult.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{currentPlugin: elm$core$Maybe$Nothing, tablePlugin: newTablePlugin}),
							A2(
								elm$core$Platform$Cmd$map,
								model.externalMsg,
								elm$core$Platform$Cmd$batch(
									_List_fromArray(
										[
											author$project$PageEditor$PageEditor$scrollTo(
											author$project$Document$Document$getHtmlId(
												author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document)))
										]))));
					} else {
						var tm = mbEditorPluginResult.a.a;
						var newDoc = A2(
							author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
							author$project$Document$Document$Cell(
								{
									attrs: author$project$Document$Document$getAttrs(
										author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document)),
									cellContent: author$project$Document$Document$Table(tm),
									id: author$project$Document$Document$getId(
										author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document))
								}),
							model.document);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{currentPlugin: elm$core$Maybe$Nothing, document: newDoc}),
							A2(
								elm$core$Platform$Cmd$map,
								model.externalMsg,
								elm$core$Platform$Cmd$batch(
									_List_fromArray(
										[
											author$project$PageEditor$PageEditor$scrollTo(
											author$project$Document$Document$getHtmlId(
												author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document)))
										]))));
					}
				}
			case 'TextBlockPluginMsg':
				var textBlockMsg = msg.a;
				var _n20 = A3(
					author$project$PageEditor$EditorPlugins$TextBlockPlugin$update,
					{pageTreeEditor: config.pageTreeEditor},
					textBlockMsg,
					model.textBlockPlugin);
				var newTextBlockPlugin = _n20.a;
				var textBlockPluginCmds = _n20.b;
				var mbEditorPluginResult = _n20.c;
				if (mbEditorPluginResult.$ === 'Nothing') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{textBlockPlugin: newTextBlockPlugin}),
						elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[textBlockPluginCmds])));
				} else {
					if (mbEditorPluginResult.a.$ === 'EditorPluginQuit') {
						var _n22 = mbEditorPluginResult.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{currentPlugin: elm$core$Maybe$Nothing, textBlockPlugin: newTextBlockPlugin}),
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										elm$core$Platform$Cmd$map,
										model.externalMsg,
										author$project$PageEditor$PageEditor$scrollTo(
											author$project$Document$Document$getHtmlId(
												author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document)))),
										textBlockPluginCmds
									])));
					} else {
						var _n23 = mbEditorPluginResult.a.a;
						var tbElems = _n23.a;
						var attrs = _n23.b;
						var newDoc = A2(
							author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
							author$project$Document$Document$Cell(
								{
									attrs: attrs,
									cellContent: author$project$Document$Document$TextBlock(tbElems),
									id: author$project$Document$Document$getId(
										author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document))
								}),
							model.document);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{currentPlugin: elm$core$Maybe$Nothing, document: newDoc}),
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										elm$core$Platform$Cmd$map,
										model.externalMsg,
										author$project$PageEditor$PageEditor$scrollTo(
											author$project$Document$Document$getHtmlId(
												author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document)))),
										textBlockPluginCmds
									])));
					}
				}
			case 'ImagePluginMsg':
				var imgPlugMsg = msg.a;
				var _n24 = A3(author$project$PageEditor$EditorPlugins$ImagePlugin$update, config, imgPlugMsg, model.imagePlugin);
				var newImagePlugin = _n24.a;
				var imagePluginCmds = _n24.b;
				var mbEditorPluginResult = _n24.c;
				if (mbEditorPluginResult.$ === 'Nothing') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{imagePlugin: newImagePlugin}),
						imagePluginCmds);
				} else {
					if (mbEditorPluginResult.a.$ === 'EditorPluginQuit') {
						var _n26 = mbEditorPluginResult.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{currentPlugin: elm$core$Maybe$Nothing, imagePlugin: newImagePlugin}),
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										elm$core$Platform$Cmd$map,
										model.externalMsg,
										author$project$PageEditor$PageEditor$scrollTo(
											author$project$Document$Document$getHtmlId(
												author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document)))),
										imagePluginCmds
									])));
					} else {
						var _n27 = mbEditorPluginResult.a.a;
						var imgMeta = _n27.a;
						var attrs = _n27.b;
						var newDoc = A2(
							author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
							author$project$Document$Document$Cell(
								{
									attrs: attrs,
									cellContent: author$project$Document$Document$Image(imgMeta),
									id: author$project$Document$Document$getId(
										author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document))
								}),
							model.document);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{currentPlugin: elm$core$Maybe$Nothing, document: newDoc}),
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										elm$core$Platform$Cmd$map,
										model.externalMsg,
										author$project$PageEditor$PageEditor$scrollTo(
											author$project$Document$Document$getHtmlId(
												author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document)))),
										imagePluginCmds
									])));
					}
				}
			case 'VideoPluginMsg':
				var vidPlugMsg = msg.a;
				var _n28 = A2(author$project$PageEditor$EditorPlugins$VideoPlugin$update, vidPlugMsg, model.videoPlugin);
				var newVideoPlugin = _n28.a;
				var mbEditorPluginResult = _n28.b;
				if (mbEditorPluginResult.$ === 'Nothing') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{videoPlugin: newVideoPlugin}),
						elm$core$Platform$Cmd$none);
				} else {
					if (mbEditorPluginResult.a.$ === 'EditorPluginQuit') {
						var _n30 = mbEditorPluginResult.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{currentPlugin: elm$core$Maybe$Nothing, videoPlugin: newVideoPlugin}),
							A2(
								elm$core$Platform$Cmd$map,
								model.externalMsg,
								author$project$PageEditor$PageEditor$scrollTo(
									author$project$Document$Document$getHtmlId(
										author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document)))));
					} else {
						var _n31 = mbEditorPluginResult.a.a;
						var videoMeta = _n31.a;
						var attrs = _n31.b;
						var newDoc = A2(
							author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
							author$project$Document$Document$Cell(
								{
									attrs: attrs,
									cellContent: author$project$Document$Document$Video(videoMeta),
									id: author$project$Document$Document$getId(
										author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document))
								}),
							model.document);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{currentPlugin: elm$core$Maybe$Nothing, document: newDoc}),
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										elm$core$Platform$Cmd$map,
										model.externalMsg,
										author$project$PageEditor$PageEditor$scrollTo(
											author$project$Document$Document$getHtmlId(
												author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document))))
									])));
					}
				}
			case 'BlockLinksPluginMsg':
				var blockLinksPluginMsg = msg.a;
				var _n32 = A2(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$update, blockLinksPluginMsg, model.blockLinksPlugin);
				var newBlockLinksPlugin = _n32.a;
				var mbEditorPluginResult = _n32.b;
				if (mbEditorPluginResult.$ === 'Nothing') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{blockLinksPlugin: newBlockLinksPlugin}),
						elm$core$Platform$Cmd$none);
				} else {
					if (mbEditorPluginResult.a.$ === 'EditorPluginQuit') {
						var _n34 = mbEditorPluginResult.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{blockLinksPlugin: newBlockLinksPlugin, currentPlugin: elm$core$Maybe$Nothing}),
							A2(
								elm$core$Platform$Cmd$map,
								model.externalMsg,
								author$project$PageEditor$PageEditor$scrollTo(
									author$project$Document$Document$getHtmlId(
										author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document)))));
					} else {
						var newBlockLinks = mbEditorPluginResult.a.a;
						var newDoc = A2(
							author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
							author$project$Document$Document$Cell(
								{
									attrs: _List_Nil,
									cellContent: newBlockLinks,
									id: author$project$Document$Document$getId(
										author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document))
								}),
							model.document);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{currentPlugin: elm$core$Maybe$Nothing, document: newDoc}),
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										elm$core$Platform$Cmd$map,
										model.externalMsg,
										author$project$PageEditor$PageEditor$scrollTo(
											author$project$Document$Document$getHtmlId(
												author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document))))
									])));
					}
				}
			case 'FichesPluginMsg':
				var fichesPluginMsg = msg.a;
				var _n35 = A3(author$project$PageEditor$EditorPlugins$FichesPlugin$update, config, fichesPluginMsg, model.fichesPlugin);
				var newFichesPlugin = _n35.a;
				var mbEditorPluginResult = _n35.b;
				if (mbEditorPluginResult.$ === 'Nothing') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{fichesPlugin: newFichesPlugin}),
						elm$core$Platform$Cmd$none);
				} else {
					if (mbEditorPluginResult.a.$ === 'EditorPluginQuit') {
						var _n37 = mbEditorPluginResult.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{currentPlugin: elm$core$Maybe$Nothing, fichesPlugin: newFichesPlugin}),
							A2(
								elm$core$Platform$Cmd$map,
								model.externalMsg,
								author$project$PageEditor$PageEditor$scrollTo(
									author$project$Document$Document$getHtmlId(
										author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document)))));
					} else {
						var newFichesIds = mbEditorPluginResult.a.a;
						var newDoc = A2(
							author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
							author$project$Document$Document$Cell(
								{
									attrs: _List_Nil,
									cellContent: author$project$Document$Document$Fiches(newFichesIds),
									id: author$project$Document$Document$getId(
										author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document))
								}),
							model.document);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{currentPlugin: elm$core$Maybe$Nothing, document: newDoc}),
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										elm$core$Platform$Cmd$map,
										model.externalMsg,
										author$project$PageEditor$PageEditor$scrollTo(
											author$project$Document$Document$getHtmlId(
												author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document))))
									])));
					}
				}
			case 'PictureLinksPluginMsg':
				var pictureLinksPluginMsg = msg.a;
				var _n38 = A2(author$project$PageEditor$EditorPlugins$PictureLinksPlugin$update, pictureLinksPluginMsg, model.pictureLinksPlugin);
				var newPictureLinksPlugin = _n38.a;
				var mbEditorPluginResult = _n38.b;
				if (mbEditorPluginResult.$ === 'Nothing') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{pictureLinksPlugin: newPictureLinksPlugin}),
						elm$core$Platform$Cmd$none);
				} else {
					if (mbEditorPluginResult.a.$ === 'EditorPluginQuit') {
						var _n40 = mbEditorPluginResult.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{currentPlugin: elm$core$Maybe$Nothing, pictureLinksPlugin: newPictureLinksPlugin}),
							A2(
								elm$core$Platform$Cmd$map,
								model.externalMsg,
								author$project$PageEditor$PageEditor$scrollTo(
									author$project$Document$Document$getHtmlId(
										author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document)))));
					} else {
						var newPictureLinks = mbEditorPluginResult.a.a;
						var newDoc = A2(
							author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
							author$project$Document$Document$Cell(
								{
									attrs: _List_Nil,
									cellContent: author$project$Document$Document$PictureLinks(newPictureLinks),
									id: author$project$Document$Document$getId(
										author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document))
								}),
							model.document);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{currentPlugin: elm$core$Maybe$Nothing, document: newDoc}),
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										elm$core$Platform$Cmd$map,
										model.externalMsg,
										author$project$PageEditor$PageEditor$scrollTo(
											author$project$Document$Document$getHtmlId(
												author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document))))
									])));
					}
				}
			case 'GalleryPluginMsg':
				var galleryPluginMsg = msg.a;
				var _n41 = A2(author$project$PageEditor$EditorPlugins$GalleryPlugin$update, galleryPluginMsg, model.galleryPlugin);
				var newGalleryPlugin = _n41.a;
				var galleryCmd = _n41.b;
				var mbGalleryPluginResult = _n41.c;
				if (mbGalleryPluginResult.$ === 'Nothing') {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{galleryPlugin: newGalleryPlugin}),
						galleryCmd);
				} else {
					if (mbGalleryPluginResult.a.$ === 'EditorPluginQuit') {
						var _n43 = mbGalleryPluginResult.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{currentPlugin: elm$core$Maybe$Nothing, galleryPlugin: newGalleryPlugin}),
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										elm$core$Platform$Cmd$map,
										model.externalMsg,
										author$project$PageEditor$PageEditor$scrollTo(
											author$project$Document$Document$getHtmlId(
												author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document)))),
										galleryCmd
									])));
					} else {
						var newGalleryMeta = mbGalleryPluginResult.a.a;
						var newDoc = A2(
							author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
							author$project$Document$Document$Cell(
								{
									attrs: _List_Nil,
									cellContent: author$project$Document$Document$Gallery(newGalleryMeta),
									id: author$project$Document$Document$getId(
										author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document))
								}),
							model.document);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{currentPlugin: elm$core$Maybe$Nothing, document: newDoc}),
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										elm$core$Platform$Cmd$map,
										model.externalMsg,
										author$project$PageEditor$PageEditor$scrollTo(
											author$project$Document$Document$getHtmlId(
												author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document)))),
										galleryCmd
									])));
					}
				}
			case 'LoadLocalStorageDocument':
				var _n44 = A2(
					elm$core$Maybe$map,
					elm$json$Json$Decode$decodeValue(author$project$Document$Json$DocumentDecoder$decodeDocument),
					model.localStorageValue);
				if ((_n44.$ === 'Just') && (_n44.a.$ === 'Ok')) {
					var newDoc = _n44.a.a;
					var _n45 = A3(
						author$project$PageEditor$PageEditor$reset,
						elm$core$Maybe$Just(newDoc),
						model.availableThreads,
						model.externalMsg);
					var newModel = _n45.a;
					var cmd = _n45.b;
					return _Utils_Tuple2(
						_Utils_update(
							newModel,
							{
								currentPlugin: elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$PersistencePlugin)
							}),
						cmd);
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'SetLocalStorageKey':
				var key = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{localStorageKey: key}),
					elm$core$Platform$Cmd$none);
			case 'SetLocalStorageValue':
				var val = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							jsonBuffer: function (res) {
								if (res.$ === 'Ok') {
									var json = res.a;
									return emilianobovetti$elm_yajson$Yajson$Stringify$pretty(json);
								} else {
									var error = res.a;
									return 'error';
								}
							}(
								emilianobovetti$elm_yajson$Yajson$fromValue(val)),
							localStorageValue: elm$core$Maybe$Just(val)
						}),
					elm$core$Platform$Cmd$none);
			case 'SetJsonBuffer':
				var s = msg.a;
				var newLocalStorageValue = function () {
					var _n48 = A2(elm$json$Json$Decode$decodeString, elm$json$Json$Decode$value, s);
					if (_n48.$ === 'Ok') {
						var value = _n48.a;
						return elm$core$Maybe$Just(value);
					} else {
						return elm$core$Maybe$Nothing;
					}
				}();
				var newBuffer = function (res) {
					if (res.$ === 'Ok') {
						var json = res.a;
						return emilianobovetti$elm_yajson$Yajson$Stringify$pretty(json);
					} else {
						var error = res.a;
						return 'error';
					}
				}(
					emilianobovetti$elm_yajson$Yajson$fromValue(
						A2(elm$core$Maybe$withDefault, elm$json$Json$Encode$null, newLocalStorageValue)));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{jsonBuffer: newBuffer, localStorageValue: newLocalStorageValue}),
					elm$core$Platform$Cmd$none);
			case 'GetFromLocalStorage':
				return _Utils_Tuple2(
					model,
					A2(
						elm$core$Platform$Cmd$map,
						model.externalMsg,
						A3(
							billstclair$elm_localstorage$PortFunnel$LocalStorage$send,
							author$project$PageEditor$PageEditor$cmdPort,
							billstclair$elm_localstorage$PortFunnel$LocalStorage$get(model.localStorageKey),
							model.funnelState.storage)));
			case 'PutInLocalStorage':
				return _Utils_Tuple2(
					model,
					A2(
						elm$core$Platform$Cmd$map,
						model.externalMsg,
						elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A3(
									billstclair$elm_localstorage$PortFunnel$LocalStorage$send,
									author$project$PageEditor$PageEditor$cmdPort,
									A2(billstclair$elm_localstorage$PortFunnel$LocalStorage$put, model.localStorageKey, model.localStorageValue),
									model.funnelState.storage),
									A3(andrewMacmurray$elm_delay$Delay$after, 500, andrewMacmurray$elm_delay$Delay$Millisecond, author$project$PageEditor$PageEditor$ListKeys)
								]))));
			case 'RemoveFromLocalStorage':
				return _Utils_Tuple2(
					model,
					A2(
						elm$core$Platform$Cmd$map,
						model.externalMsg,
						elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A3(
									billstclair$elm_localstorage$PortFunnel$LocalStorage$send,
									author$project$PageEditor$PageEditor$cmdPort,
									A2(billstclair$elm_localstorage$PortFunnel$LocalStorage$put, model.localStorageKey, elm$core$Maybe$Nothing),
									model.funnelState.storage),
									A3(andrewMacmurray$elm_delay$Delay$after, 500, andrewMacmurray$elm_delay$Delay$Millisecond, author$project$PageEditor$PageEditor$ListKeys)
								]))));
			case 'ClearLocalStorage':
				return _Utils_Tuple2(
					model,
					A2(
						elm$core$Platform$Cmd$map,
						model.externalMsg,
						elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A3(
									billstclair$elm_localstorage$PortFunnel$LocalStorage$send,
									author$project$PageEditor$PageEditor$cmdPort,
									billstclair$elm_localstorage$PortFunnel$LocalStorage$clear(''),
									model.funnelState.storage),
									A3(andrewMacmurray$elm_delay$Delay$after, 500, andrewMacmurray$elm_delay$Delay$Millisecond, author$project$PageEditor$PageEditor$ListKeys)
								]))));
			case 'ListKeys':
				return _Utils_Tuple2(
					model,
					A2(
						elm$core$Platform$Cmd$map,
						model.externalMsg,
						A3(
							billstclair$elm_localstorage$PortFunnel$LocalStorage$send,
							author$project$PageEditor$PageEditor$cmdPort,
							billstclair$elm_localstorage$PortFunnel$LocalStorage$listKeys(''),
							model.funnelState.storage)));
			case 'Process':
				var val = msg.a;
				var _n49 = billstclair$elm_port_funnel$PortFunnel$decodeGenericMessage(val);
				if (_n49.$ === 'Err') {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var genericMessage = _n49.a;
					var moduleName = genericMessage.moduleName;
					var _n50 = A2(elm$core$Dict$get, moduleName, author$project$PageEditor$PageEditor$funnels);
					if (_n50.$ === 'Just') {
						var funnel = _n50.a;
						var storFunnel = funnel.a;
						var _n52 = A5(billstclair$elm_port_funnel$PortFunnel$appProcess, author$project$PageEditor$PageEditor$cmdPort, genericMessage, storFunnel, model.funnelState, model);
						if (_n52.$ === 'Err') {
							return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
						} else {
							var _n53 = _n52.a;
							var mdl = _n53.a;
							var cmd = _n53.b;
							var newBuffer = function (res) {
								if (res.$ === 'Ok') {
									var json = res.a;
									return emilianobovetti$elm_yajson$Yajson$Stringify$pretty(json);
								} else {
									var error = res.a;
									return 'error';
								}
							}(
								emilianobovetti$elm_yajson$Yajson$fromValue(
									A2(elm$core$Maybe$withDefault, elm$json$Json$Encode$null, mdl.localStorageValue)));
							return _Utils_Tuple2(
								_Utils_update(
									mdl,
									{jsonBuffer: newBuffer}),
								elm$core$Platform$Cmd$batch(
									_List_fromArray(
										[cmd])));
						}
					} else {
						return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
					}
				}
			case 'LoadDocument':
				var _n55 = author$project$PageTreeEditor$PageTreeEditor$loadedContent(config.pageTreeEditor);
				if (_n55.$ === 'Just') {
					var docContent = _n55.a.docContent;
					var _n56 = A3(
						author$project$PageEditor$PageEditor$reset,
						elm$core$Maybe$Just(docContent),
						model.availableThreads,
						model.externalMsg);
					var newModel = _n56.a;
					var cmd = _n56.b;
					return _Utils_Tuple2(
						_Utils_update(
							newModel,
							{currentPlugin: elm$core$Maybe$Nothing}),
						cmd);
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			default:
				return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
		}
	});
var author$project$PageEditor$PageEditor$update = F3(
	function (config, msg, model) {
		var _n0 = A3(author$project$PageEditor$PageEditor$internalUpdate, config, msg, model);
		var newModel = _n0.a;
		var cmds = _n0.b;
		return _Utils_Tuple3(newModel, cmds, elm$core$Maybe$Nothing);
	});
var author$project$PageTreeEditor$PageTreeEditor$SetInitialSeed = function (a) {
	return {$: 'SetInitialSeed', a: a};
};
var author$project$PageTreeEditor$PageTreeEditor$LoadContents = function (a) {
	return {$: 'LoadContents', a: a};
};
var author$project$PageTreeEditor$PageTreeEditor$getContents = function (sessionId) {
	var body = elm$http$Http$jsonBody(
		elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'sessionId',
					elm$json$Json$Encode$string(sessionId))
				])));
	return elm$http$Http$post(
		{
			body: body,
			expect: A2(elm$http$Http$expectJson, author$project$PageTreeEditor$PageTreeEditor$LoadContents, elm$json$Json$Decode$value),
			url: 'getContents.php'
		});
};
var author$project$PageTreeEditor$PageTreeEditor$LoadKeywords = function (a) {
	return {$: 'LoadKeywords', a: a};
};
var author$project$PageTreeEditor$PageTreeEditor$decodeKeyword = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'contentId',
	elm$json$Json$Decode$string,
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'keyword',
		elm$json$Json$Decode$string,
		elm$json$Json$Decode$succeed(
			F2(
				function (k, cid) {
					return _Utils_Tuple2(k, cid);
				}))));
var author$project$PageTreeEditor$PageTreeEditor$decodeKeywords = A2(
	elm$json$Json$Decode$map,
	elm$core$Set$fromList,
	elm$json$Json$Decode$list(author$project$PageTreeEditor$PageTreeEditor$decodeKeyword));
var author$project$PageTreeEditor$PageTreeEditor$getKeywords = function () {
	var body = elm$http$Http$jsonBody(
		elm$json$Json$Encode$object(_List_Nil));
	return elm$http$Http$post(
		{
			body: body,
			expect: A2(elm$http$Http$expectJson, author$project$PageTreeEditor$PageTreeEditor$LoadKeywords, author$project$PageTreeEditor$PageTreeEditor$decodeKeywords),
			url: 'getKeywords.php'
		});
}();
var author$project$PageTreeEditor$PageTreeEditor$LoadPageTree = function (a) {
	return {$: 'LoadPageTree', a: a};
};
var author$project$PageTreeEditor$PageTreeEditor$Page = F2(
	function (a, b) {
		return {$: 'Page', a: a, b: b};
	});
var author$project$PageTreeEditor$PageTreeEditor$PageInfo = F3(
	function (name, path, mbContentId) {
		return {mbContentId: mbContentId, name: name, path: path};
	});
var author$project$PageTreeEditor$PageTreeEditor$decodeUUID = A2(
	elm$json$Json$Decode$andThen,
	A2(elm$core$Basics$composeL, elm_community$json_extra$Json$Decode$Extra$fromResult, TSFoster$elm_uuid$UUID$fromString),
	elm$json$Json$Decode$string);
var author$project$PageTreeEditor$PageTreeEditor$decodePageInfo = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'mbContentId',
	elm$json$Json$Decode$nullable(author$project$PageTreeEditor$PageTreeEditor$decodeUUID),
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'path',
		A2(
			elm$json$Json$Decode$map,
			elm$core$String$split('/'),
			elm$json$Json$Decode$string),
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'name',
			elm$json$Json$Decode$string,
			elm$json$Json$Decode$succeed(author$project$PageTreeEditor$PageTreeEditor$PageInfo))));
function author$project$PageTreeEditor$PageTreeEditor$cyclic$decodePage() {
	return A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
		_List_fromArray(
			['Page', 'children']),
		elm$json$Json$Decode$list(
			elm$json$Json$Decode$lazy(
				function (_n0) {
					return author$project$PageTreeEditor$PageTreeEditor$cyclic$decodePage();
				})),
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['Page', 'pageInfo']),
			author$project$PageTreeEditor$PageTreeEditor$decodePageInfo,
			elm$json$Json$Decode$succeed(author$project$PageTreeEditor$PageTreeEditor$Page)));
}
try {
	var author$project$PageTreeEditor$PageTreeEditor$decodePage = author$project$PageTreeEditor$PageTreeEditor$cyclic$decodePage();
	author$project$PageTreeEditor$PageTreeEditor$cyclic$decodePage = function () {
		return author$project$PageTreeEditor$PageTreeEditor$decodePage;
	};
} catch ($) {
throw 'Some top-level definitions from `PageTreeEditor.PageTreeEditor` are causing infinite recursion:\n\n  ┌─────┐\n  │    decodePage\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.0/halting-problem to learn how to fix it!';}
var author$project$PageTreeEditor$PageTreeEditor$initPageTree = function (page) {
	return {contexts: _List_Nil, current: page};
};
var author$project$PageTreeEditor$PageTreeEditor$decodePageTree = A2(elm$json$Json$Decode$map, author$project$PageTreeEditor$PageTreeEditor$initPageTree, author$project$PageTreeEditor$PageTreeEditor$decodePage);
var author$project$PageTreeEditor$PageTreeEditor$getPageTree = function () {
	var body = elm$http$Http$jsonBody(
		elm$json$Json$Encode$object(_List_Nil));
	return elm$http$Http$post(
		{
			body: body,
			expect: A2(elm$http$Http$expectJson, author$project$PageTreeEditor$PageTreeEditor$LoadPageTree, author$project$PageTreeEditor$PageTreeEditor$decodePageTree),
			url: 'getPageTree.php'
		});
}();
var author$project$PageTreeEditor$PageTreeEditor$load = F2(
	function (model, logInfo) {
		if (logInfo.$ === 'LoggedIn') {
			var sessionId = logInfo.a.sessionId;
			return A2(
				elm$core$Platform$Cmd$map,
				model.externalMsg,
				elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							author$project$PageTreeEditor$PageTreeEditor$getPageTree,
							author$project$PageTreeEditor$PageTreeEditor$getContents(sessionId),
							author$project$PageTreeEditor$PageTreeEditor$getKeywords,
							A2(elm$core$Task$perform, author$project$PageTreeEditor$PageTreeEditor$SetInitialSeed, elm$time$Time$now)
						])));
		} else {
			return elm$core$Platform$Cmd$none;
		}
	});
var author$project$Document$Json$DocumentSerializer$encodeBlockLink = function (_n0) {
	var image = _n0.image;
	var label = _n0.label;
	var targetBlank = _n0.targetBlank;
	var url = _n0.url;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'image',
				elm$json$Json$Encode$string(image)),
				_Utils_Tuple2(
				'label',
				elm$json$Json$Encode$string(label)),
				_Utils_Tuple2(
				'targetBlank',
				elm$json$Json$Encode$bool(targetBlank)),
				_Utils_Tuple2(
				'url',
				elm$json$Json$Encode$string(url))
			]));
};
var author$project$Document$Json$DocumentSerializer$encodeImageSize = function (_n0) {
	var imgWidth = _n0.imgWidth;
	var imgHeight = _n0.imgHeight;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'imgWidth',
				elm$json$Json$Encode$int(imgWidth)),
				_Utils_Tuple2(
				'imgHeight',
				elm$json$Json$Encode$int(imgHeight))
			]));
};
var author$project$Document$Json$DocumentSerializer$encodeImgSource = function (imgSrc) {
	if (imgSrc.$ === 'UrlSrc') {
		var s = imgSrc.a;
		return elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'UrlSrc',
					elm$json$Json$Encode$string(s))
				]));
	} else {
		var filename = imgSrc.a;
		var contents = imgSrc.b;
		return elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Inline',
					elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'filename',
								elm$json$Json$Encode$string(filename)),
								_Utils_Tuple2(
								'contents',
								elm$json$Json$Encode$string(contents))
							])))
				]));
	}
};
var author$project$Document$Json$DocumentSerializer$encodeImageMeta = function (_n0) {
	var src = _n0.src;
	var caption = _n0.caption;
	var size = _n0.size;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'src',
				author$project$Document$Json$DocumentSerializer$encodeImgSource(src)),
				_Utils_Tuple2(
				'caption',
				A2(
					elm$core$Maybe$withDefault,
					elm$json$Json$Encode$null,
					A2(elm$core$Maybe$map, elm$json$Json$Encode$string, caption))),
				_Utils_Tuple2(
				'size',
				author$project$Document$Json$DocumentSerializer$encodeImageSize(size))
			]));
};
var author$project$Document$Json$DocumentSerializer$encodePictureLink = function (_n0) {
	var url = _n0.url;
	var img = _n0.img;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'url',
				elm$json$Json$Encode$string(url)),
				_Utils_Tuple2(
				'img',
				author$project$Document$Json$DocumentSerializer$encodeImageMeta(img))
			]));
};
var author$project$Document$Json$DocumentSerializer$encodeTableMeta = function (_n0) {
	var style = _n0.style;
	var nbrRows = _n0.nbrRows;
	var nbrCols = _n0.nbrCols;
	var data = _n0.data;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'style',
				elm$json$Json$Encode$string(style)),
				_Utils_Tuple2(
				'nbrRows',
				elm$json$Json$Encode$int(nbrRows)),
				_Utils_Tuple2(
				'nbrCols',
				elm$json$Json$Encode$int(nbrCols)),
				_Utils_Tuple2(
				'data',
				A2(
					elm$json$Json$Encode$list,
					elm$core$Basics$identity,
					A2(
						elm$core$List$map,
						elm$json$Json$Encode$list(elm$json$Json$Encode$string),
						A2(elm$core$List$map, elm$core$Array$toList, data))))
			]));
};
var author$project$Document$Json$DocumentSerializer$encodeVideoHost = function (host) {
	return elm$json$Json$Encode$string('Youtube');
};
var author$project$Document$Json$DocumentSerializer$encodeVideoSize = function (_n0) {
	var videoWidth = _n0.videoWidth;
	var videoHeight = _n0.videoHeight;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'videoWidth',
				elm$json$Json$Encode$int(videoWidth)),
				_Utils_Tuple2(
				'videoHeight',
				elm$json$Json$Encode$int(videoHeight))
			]));
};
var author$project$Document$Json$DocumentSerializer$encodeVideoMeta = function (_n0) {
	var src = _n0.src;
	var size = _n0.size;
	var frameBorder = _n0.frameBorder;
	var suggestions = _n0.suggestions;
	var controls = _n0.controls;
	var privacy = _n0.privacy;
	var title = _n0.title;
	var startAt = _n0.startAt;
	var hosting = _n0.hosting;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'src',
				elm$json$Json$Encode$string(src)),
				_Utils_Tuple2(
				'size',
				author$project$Document$Json$DocumentSerializer$encodeVideoSize(size)),
				_Utils_Tuple2(
				'frameBorder',
				elm$json$Json$Encode$bool(frameBorder)),
				_Utils_Tuple2(
				'suggestions',
				elm$json$Json$Encode$bool(suggestions)),
				_Utils_Tuple2(
				'controls',
				elm$json$Json$Encode$bool(controls)),
				_Utils_Tuple2(
				'privacy',
				elm$json$Json$Encode$bool(privacy)),
				_Utils_Tuple2(
				'title',
				elm$json$Json$Encode$bool(title)),
				_Utils_Tuple2(
				'startAt',
				A2(
					elm$core$Maybe$withDefault,
					elm$json$Json$Encode$null,
					A2(elm$core$Maybe$map, elm$json$Json$Encode$int, startAt))),
				_Utils_Tuple2(
				'hosting',
				author$project$Document$Json$DocumentSerializer$encodeVideoHost(hosting))
			]));
};
var author$project$Document$Json$DocumentSerializer$encodeCellContent = function (cellContent) {
	switch (cellContent.$) {
		case 'Image':
			var im = cellContent.a;
			return elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Image',
						author$project$Document$Json$DocumentSerializer$encodeImageMeta(im))
					]));
		case 'Video':
			var vm = cellContent.a;
			return elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Video',
						author$project$Document$Json$DocumentSerializer$encodeVideoMeta(vm))
					]));
		case 'Table':
			var tm = cellContent.a;
			return elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Table',
						author$project$Document$Json$DocumentSerializer$encodeTableMeta(tm))
					]));
		case 'CustomElement':
			var s = cellContent.a;
			return elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'CustomElement',
						elm$json$Json$Encode$string(s))
					]));
		case 'BlockLinks':
			var blLinks = cellContent.a;
			return elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'BlockLinks',
						A2(elm$json$Json$Encode$list, author$project$Document$Json$DocumentSerializer$encodeBlockLink, blLinks))
					]));
		case 'Fiches':
			var fiches = cellContent.a;
			return elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Fiches',
						A2(elm$json$Json$Encode$list, elm$json$Json$Encode$string, fiches))
					]));
		case 'TextBlock':
			var tbElems = cellContent.a;
			return elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'TextBlock',
						A2(elm$json$Json$Encode$list, author$project$Document$Json$DocumentSerializer$encodeTextBlockElement, tbElems))
					]));
		case 'PictureLinks':
			var picLinks = cellContent.a;
			return elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'PictureLinks',
						A2(elm$json$Json$Encode$list, author$project$Document$Json$DocumentSerializer$encodePictureLink, picLinks))
					]));
		case 'Gallery':
			var gallery = cellContent.a;
			return elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Gallery',
						elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'uuid',
									elm$json$Json$Encode$string(
										TSFoster$elm_uuid$UUID$canonical(gallery.uuid))),
									_Utils_Tuple2(
									'title',
									elm$json$Json$Encode$string(gallery.title)),
									_Utils_Tuple2(
									'images',
									A2(elm$json$Json$Encode$list, author$project$Document$Json$DocumentSerializer$encodeImageMeta, gallery.images))
								])))
					]));
		case 'NewsBlock':
			return elm$json$Json$Encode$string('NewsBlock');
		case 'CalendarWidget':
			return elm$json$Json$Encode$string('CalendarWidget');
		case 'Calendar':
			return elm$json$Json$Encode$string('Calendar');
		case 'WeatherWidget':
			return elm$json$Json$Encode$string('WeatherWidget');
		case 'DronePanorama':
			return elm$json$Json$Encode$string('DronePanorama');
		default:
			return elm$json$Json$Encode$string('EmptyCell');
	}
};
var elm$core$Set$foldl = F3(
	function (func, initialState, _n0) {
		var dict = _n0.a;
		return A3(
			elm$core$Dict$foldl,
			F3(
				function (key, _n1, state) {
					return A2(func, key, state);
				}),
			initialState,
			dict);
	});
var elm$json$Json$Encode$set = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				elm$core$Set$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var author$project$Document$Json$DocumentSerializer$encodeId = function (_n0) {
	var uid = _n0.uid;
	var docStyleId = _n0.docStyleId;
	var htmlId = _n0.htmlId;
	var classes = _n0.classes;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'uid',
				elm$json$Json$Encode$int(uid)),
				_Utils_Tuple2(
				'docStyleId',
				A2(
					elm$core$Maybe$withDefault,
					elm$json$Json$Encode$null,
					A2(elm$core$Maybe$map, elm$json$Json$Encode$string, docStyleId))),
				_Utils_Tuple2(
				'htmlId',
				A2(
					elm$core$Maybe$withDefault,
					elm$json$Json$Encode$null,
					A2(elm$core$Maybe$map, elm$json$Json$Encode$string, htmlId))),
				_Utils_Tuple2(
				'classes',
				A2(elm$json$Json$Encode$set, elm$json$Json$Encode$string, classes))
			]));
};
var author$project$Document$Json$DocumentSerializer$encodeCellValue = function (_n0) {
	var cellContent = _n0.cellContent;
	var id = _n0.id;
	var attrs = _n0.attrs;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'cellContent',
				author$project$Document$Json$DocumentSerializer$encodeCellContent(cellContent)),
				_Utils_Tuple2(
				'id',
				author$project$Document$Json$DocumentSerializer$encodeId(id)),
				_Utils_Tuple2(
				'attrs',
				author$project$Document$Json$DocumentSerializer$encodeDocAttributes(attrs))
			]));
};
var author$project$Document$Json$DocumentSerializer$encodeContainerLabel = function (cLabel) {
	switch (cLabel.$) {
		case 'DocColumn':
			return elm$json$Json$Encode$string('DocColumn');
		case 'DocRow':
			return elm$json$Json$Encode$string('DocRow');
		case 'TextColumn':
			return elm$json$Json$Encode$string('TextColumn');
		default:
			return elm$json$Json$Encode$string('ResponsiveBloc');
	}
};
var author$project$Document$Json$DocumentSerializer$encodeContainerValue = function (_n0) {
	var containerLabel = _n0.containerLabel;
	var id = _n0.id;
	var attrs = _n0.attrs;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'containerLabel',
				author$project$Document$Json$DocumentSerializer$encodeContainerLabel(containerLabel)),
				_Utils_Tuple2(
				'id',
				author$project$Document$Json$DocumentSerializer$encodeId(id)),
				_Utils_Tuple2(
				'attrs',
				author$project$Document$Json$DocumentSerializer$encodeDocAttributes(attrs))
			]));
};
var author$project$Document$Json$DocumentSerializer$encodeDocument = function (doc) {
	if (doc.$ === 'Container') {
		var cv = doc.a;
		var docs = doc.b;
		return elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Container',
					elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'ContainerValue',
								author$project$Document$Json$DocumentSerializer$encodeContainerValue(cv)),
								_Utils_Tuple2(
								'children',
								A2(elm$json$Json$Encode$list, author$project$Document$Json$DocumentSerializer$encodeDocument, docs))
							])))
				]));
	} else {
		var cv = doc.a;
		return elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Cell',
					author$project$Document$Json$DocumentSerializer$encodeCellValue(cv))
				]));
	}
};
var author$project$PageTreeEditor$PageTreeEditor$Content = F3(
	function (contentId, jsonContent, docContent) {
		return {contentId: contentId, docContent: docContent, jsonContent: jsonContent};
	});
var author$project$PageTreeEditor$PageTreeEditor$decodeContent = A3(
	NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'jsonContent',
	author$project$Document$Json$DocumentDecoder$decodeDocument,
	A3(
		NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'jsonContent',
		elm$json$Json$Decode$value,
		A3(
			NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'contentId',
			author$project$PageTreeEditor$PageTreeEditor$decodeUUID,
			elm$json$Json$Decode$succeed(author$project$PageTreeEditor$PageTreeEditor$Content))));
var author$project$PageTreeEditor$PageTreeEditor$decodeContents = A2(
	elm$json$Json$Decode$map,
	elm$core$Dict$fromList,
	A2(
		elm$json$Json$Decode$map,
		elm$core$List$map(
			function (c) {
				return _Utils_Tuple2(
					TSFoster$elm_uuid$UUID$canonical(c.contentId),
					c);
			}),
		elm$json$Json$Decode$list(author$project$PageTreeEditor$PageTreeEditor$decodeContent)));
var author$project$PageTreeEditor$PageTreeEditor$delete = function (_n0) {
	var current = _n0.current;
	var contexts = _n0.contexts;
	if (!contexts.b) {
		return elm$core$Maybe$Nothing;
	} else {
		var parent = contexts.a.parent;
		var left = contexts.a.left;
		var right = contexts.a.right;
		var cs = contexts.b;
		return elm$core$Maybe$Just(
			{
				contexts: cs,
				current: A2(
					author$project$PageTreeEditor$PageTreeEditor$Page,
					parent,
					_Utils_ap(left, right))
			});
	}
};
var author$project$PageTreeEditor$PageTreeEditor$ContentUpdated = F2(
	function (a, b) {
		return {$: 'ContentUpdated', a: a, b: b};
	});
var author$project$PageTreeEditor$PageTreeEditor$decodeSuccess = A2(
	elm$json$Json$Decode$at,
	_List_fromArray(
		['message']),
	elm$json$Json$Decode$succeed(true));
var author$project$PageTreeEditor$PageTreeEditor$deleteContent = F2(
	function (contentId, sessionId) {
		var body = elm$http$Http$jsonBody(
			elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'contentId',
						elm$json$Json$Encode$string(
							TSFoster$elm_uuid$UUID$canonical(contentId)))
					])));
		return elm$http$Http$post(
			{
				body: body,
				expect: A2(
					elm$http$Http$expectJson,
					author$project$PageTreeEditor$PageTreeEditor$ContentUpdated(contentId),
					author$project$PageTreeEditor$PageTreeEditor$decodeSuccess),
				url: 'deleteContent.php'
			});
	});
var author$project$PageTreeEditor$PageTreeEditor$extractPage = function (_n0) {
	var current = _n0.current;
	var contexts = _n0.contexts;
	return current;
};
var author$project$PageTreeEditor$PageTreeEditor$getPath = function (_n0) {
	var path = _n0.a.path;
	return path;
};
var author$project$PageTreeEditor$PageTreeEditor$fixPaths = function (homePage) {
	var helper = F2(
		function (currPath, _n0) {
			var pageInfo = _n0.a;
			var ps = _n0.b;
			return A2(
				author$project$PageTreeEditor$PageTreeEditor$Page,
				_Utils_update(
					pageInfo,
					{
						path: _Utils_ap(
							currPath,
							_List_fromArray(
								[pageInfo.name]))
					}),
				A2(
					elm$core$List$map,
					helper(
						_Utils_ap(
							currPath,
							_List_fromArray(
								[pageInfo.name]))),
					ps));
		});
	return A2(
		helper,
		A2(
			elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				elm$core$Maybe$map,
				elm$core$List$reverse,
				elm$core$List$tail(
					elm$core$List$reverse(
						author$project$PageTreeEditor$PageTreeEditor$getPath(homePage))))),
		homePage);
};
var author$project$PageTreeEditor$PageTreeEditor$zipUp = function (pageTree) {
	var _n0 = pageTree.contexts;
	if (!_n0.b) {
		return elm$core$Maybe$Nothing;
	} else {
		var parent = _n0.a.parent;
		var left = _n0.a.left;
		var right = _n0.a.right;
		var cs = _n0.b;
		return elm$core$Maybe$Just(
			_Utils_update(
				pageTree,
				{
					contexts: cs,
					current: A2(
						author$project$PageTreeEditor$PageTreeEditor$Page,
						parent,
						_Utils_ap(
							left,
							_Utils_ap(
								_List_fromArray(
									[pageTree.current]),
								right)))
				}));
	}
};
var author$project$PageTreeEditor$PageTreeEditor$rewind = function (pageTree) {
	rewind:
	while (true) {
		var _n0 = author$project$PageTreeEditor$PageTreeEditor$zipUp(pageTree);
		if (_n0.$ === 'Nothing') {
			return pageTree;
		} else {
			var pageTree_ = _n0.a;
			var $temp$pageTree = pageTree_;
			pageTree = $temp$pageTree;
			continue rewind;
		}
	}
};
var author$project$PageTreeEditor$PageTreeEditor$saveContent = F3(
	function (contentId, doc, sessionId) {
		var body = elm$http$Http$jsonBody(
			elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'contentId',
						elm$json$Json$Encode$string(
							TSFoster$elm_uuid$UUID$canonical(contentId))),
						_Utils_Tuple2(
						'content',
						author$project$Document$Json$DocumentSerializer$encodeDocument(doc))
					])));
		return elm$http$Http$post(
			{
				body: body,
				expect: A2(
					elm$http$Http$expectJson,
					author$project$PageTreeEditor$PageTreeEditor$ContentUpdated(contentId),
					author$project$PageTreeEditor$PageTreeEditor$decodeSuccess),
				url: 'saveContent.php'
			});
	});
var author$project$PageTreeEditor$PageTreeEditor$PageTreeUpdated = F3(
	function (a, b, c) {
		return {$: 'PageTreeUpdated', a: a, b: b, c: c};
	});
var author$project$PageTreeEditor$PageTreeEditor$encodePageInfo = function (_n0) {
	var name = _n0.name;
	var path = _n0.path;
	var mbContentId = _n0.mbContentId;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'name',
				elm$json$Json$Encode$string(name)),
				_Utils_Tuple2(
				'path',
				elm$json$Json$Encode$string(
					A2(elm$core$String$join, '/', path))),
				_Utils_Tuple2(
				'mbContentId',
				A2(
					elm$core$Maybe$withDefault,
					elm$json$Json$Encode$null,
					A2(
						elm$core$Maybe$map,
						elm$json$Json$Encode$string,
						A2(elm$core$Maybe$map, TSFoster$elm_uuid$UUID$canonical, mbContentId))))
			]));
};
var author$project$PageTreeEditor$PageTreeEditor$encodePage = function (_n0) {
	var pageInfo = _n0.a;
	var children = _n0.b;
	return elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'Page',
				elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'pageInfo',
							author$project$PageTreeEditor$PageTreeEditor$encodePageInfo(pageInfo)),
							_Utils_Tuple2(
							'children',
							A2(elm$json$Json$Encode$list, author$project$PageTreeEditor$PageTreeEditor$encodePage, children))
						])))
			]));
};
var author$project$PageTreeEditor$PageTreeEditor$savePageTree = F4(
	function (mbPage, page, pageTree, sessionId) {
		var body = elm$http$Http$jsonBody(
			elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'pageTree',
						author$project$PageTreeEditor$PageTreeEditor$encodePage(pageTree))
					])));
		return elm$http$Http$post(
			{
				body: body,
				expect: A2(
					elm$http$Http$expectJson,
					A2(author$project$PageTreeEditor$PageTreeEditor$PageTreeUpdated, mbPage, page),
					author$project$PageTreeEditor$PageTreeEditor$decodeSuccess),
				url: 'savePageTree.php'
			});
	});
var author$project$PageTreeEditor$PageTreeEditor$KeywordUpdated = F3(
	function (a, b, c) {
		return {$: 'KeywordUpdated', a: a, b: b, c: c};
	});
var author$project$PageTreeEditor$PageTreeEditor$setKeyword = F2(
	function (_n0, sessionId) {
		var keyword = _n0.a;
		var contentId = _n0.b;
		var body = elm$http$Http$jsonBody(
			elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'contentId',
						elm$json$Json$Encode$string(contentId)),
						_Utils_Tuple2(
						'keyword',
						elm$json$Json$Encode$string(keyword))
					])));
		return elm$http$Http$post(
			{
				body: body,
				expect: A2(
					elm$http$Http$expectJson,
					A2(
						author$project$PageTreeEditor$PageTreeEditor$KeywordUpdated,
						false,
						_Utils_Tuple2(keyword, contentId)),
					author$project$PageTreeEditor$PageTreeEditor$decodeSuccess),
				url: 'setKeyword.php'
			});
	});
var author$project$PageTreeEditor$PageTreeEditor$swapLeft = function (_n0) {
	var current = _n0.current;
	var contexts = _n0.contexts;
	if (!contexts.b) {
		return elm$core$Maybe$Nothing;
	} else {
		var parent = contexts.a.parent;
		var left = contexts.a.left;
		var right = contexts.a.right;
		var cs = contexts.b;
		var _n2 = elm$core$List$reverse(left);
		if (!_n2.b) {
			return elm$core$Maybe$Nothing;
		} else {
			var d = _n2.a;
			var ds = _n2.b;
			return elm$core$Maybe$Just(
				{
					contexts: A2(
						elm$core$List$cons,
						{
							left: elm$core$List$reverse(ds),
							parent: parent,
							right: A2(elm$core$List$cons, d, right)
						},
						cs),
					current: current
				});
		}
	}
};
var author$project$PageTreeEditor$PageTreeEditor$swapRight = function (_n0) {
	var current = _n0.current;
	var contexts = _n0.contexts;
	if (!contexts.b) {
		return elm$core$Maybe$Nothing;
	} else {
		var parent = contexts.a.parent;
		var left = contexts.a.left;
		var right = contexts.a.right;
		var cs = contexts.b;
		if (!right.b) {
			return elm$core$Maybe$Nothing;
		} else {
			var d = right.a;
			var ds = right.b;
			return elm$core$Maybe$Just(
				{
					contexts: A2(
						elm$core$List$cons,
						{
							left: _Utils_ap(
								left,
								_List_fromArray(
									[d])),
							parent: parent,
							right: ds
						},
						cs),
					current: current
				});
		}
	}
};
var author$project$PageTreeEditor$PageTreeEditor$unsetKeyword = F2(
	function (_n0, sessionId) {
		var keyword = _n0.a;
		var contentId = _n0.b;
		var body = elm$http$Http$jsonBody(
			elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'contentId',
						elm$json$Json$Encode$string(contentId)),
						_Utils_Tuple2(
						'keyword',
						elm$json$Json$Encode$string(keyword))
					])));
		return elm$http$Http$post(
			{
				body: body,
				expect: A2(
					elm$http$Http$expectJson,
					A2(
						author$project$PageTreeEditor$PageTreeEditor$KeywordUpdated,
						true,
						_Utils_Tuple2(keyword, contentId)),
					author$project$PageTreeEditor$PageTreeEditor$decodeSuccess),
				url: 'unsetKeyword.php'
			});
	});
var author$project$PageTreeEditor$PageTreeEditor$updateCurrPageTree = F2(
	function (_new, pageTree) {
		return _Utils_update(
			pageTree,
			{current: _new});
	});
var author$project$PageTreeEditor$PageTreeEditor$validMbStr = function (mbStr) {
	return (!_Utils_eq(mbStr, elm$core$Maybe$Nothing)) && (!_Utils_eq(
		mbStr,
		elm$core$Maybe$Just('')));
};
var author$project$PageTreeEditor$PageTreeEditor$getName = function (_n0) {
	var name = _n0.a.name;
	return name;
};
var author$project$PageTreeEditor$PageTreeEditor$break = F2(
	function (p, xs) {
		var helper = F2(
			function (ys, left) {
				helper:
				while (true) {
					if (!ys.b) {
						return _Utils_Tuple2(left, _List_Nil);
					} else {
						var y = ys.a;
						var ys_ = ys.b;
						if (p(y)) {
							return _Utils_Tuple2(
								elm$core$List$reverse(left),
								A2(elm$core$List$cons, y, ys_));
						} else {
							var $temp$ys = ys_,
								$temp$left = A2(elm$core$List$cons, y, left);
							ys = $temp$ys;
							left = $temp$left;
							continue helper;
						}
					}
				}
			});
		return A2(helper, xs, _List_Nil);
	});
var author$project$PageTreeEditor$PageTreeEditor$zipDown = F2(
	function (pred, pageTree) {
		var _n0 = pageTree.current;
		if (!_n0.b.b) {
			return elm$core$Maybe$Nothing;
		} else {
			var pageInfo = _n0.a;
			var xs = _n0.b;
			var _n1 = A2(author$project$PageTreeEditor$PageTreeEditor$break, pred, xs);
			var l = _n1.a;
			var r = _n1.b;
			if (!r.b) {
				return elm$core$Maybe$Nothing;
			} else {
				var p = r.a;
				var ps = r.b;
				return elm$core$Maybe$Just(
					_Utils_update(
						pageTree,
						{
							contexts: A2(
								elm$core$List$cons,
								{left: l, parent: pageInfo, right: ps},
								pageTree.contexts),
							current: p
						}));
			}
		}
	});
var author$project$PageTreeEditor$PageTreeEditor$zipTo = F2(
	function (path, pageTree) {
		var helper = F2(
			function (remainingPath, pageTree_) {
				if (!remainingPath.b) {
					return elm$core$Maybe$Nothing;
				} else {
					if (!remainingPath.b.b) {
						var curr = remainingPath.a;
						return (!_Utils_eq(
							author$project$PageTreeEditor$PageTreeEditor$getName(
								author$project$PageTreeEditor$PageTreeEditor$extractPage(pageTree_)),
							curr)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(pageTree_);
					} else {
						var curr = remainingPath.a;
						var _n1 = remainingPath.b;
						var next = _n1.a;
						var rest = _n1.b;
						return (!_Utils_eq(
							author$project$PageTreeEditor$PageTreeEditor$getName(
								author$project$PageTreeEditor$PageTreeEditor$extractPage(pageTree_)),
							curr)) ? elm$core$Maybe$Nothing : A2(
							elm$core$Maybe$andThen,
							helper(
								A2(elm$core$List$cons, next, rest)),
							A2(
								author$project$PageTreeEditor$PageTreeEditor$zipDown,
								function (page) {
									return _Utils_eq(
										author$project$PageTreeEditor$PageTreeEditor$getName(page),
										next);
								},
								pageTree_));
					}
				}
			});
		return A2(helper, path, pageTree);
	});
var elm$core$Set$filter = F2(
	function (isGood, _n0) {
		var dict = _n0.a;
		return elm$core$Set$Set_elm_builtin(
			A2(
				elm$core$Dict$filter,
				F2(
					function (key, _n1) {
						return isGood(key);
					}),
				dict));
	});
var author$project$PageTreeEditor$PageTreeEditor$internalUpdate = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 'SelectPage':
				var page = msg.a;
				var pageInfo = page.a;
				var xs = page.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							renamePageBuffer: elm$core$Maybe$Nothing,
							selected: elm$core$Maybe$Just(page)
						}),
					elm$core$Platform$Cmd$none);
			case 'FileIOSelectPage':
				var page = msg.a;
				var pageInfo = page.a;
				var xs = page.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							fileIoSelected: elm$core$Maybe$Just(page)
						}),
					elm$core$Platform$Cmd$none);
			case 'SelectInternalPage':
				var page = msg.a;
				var pageInfo = page.a;
				var xs = page.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							internalPageSelected: elm$core$Maybe$Just(page)
						}),
					elm$core$Platform$Cmd$none);
			case 'SaveAsSelectPage':
				var page = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							saveAsSelected: elm$core$Maybe$Just(page)
						}),
					elm$core$Platform$Cmd$none);
			case 'SetInternalPage':
				var path = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							internalPageSelected: A2(
								elm$core$Maybe$map,
								author$project$PageTreeEditor$PageTreeEditor$extractPage,
								A2(
									elm$core$Maybe$andThen,
									author$project$PageTreeEditor$PageTreeEditor$zipTo(path),
									model.pageTree))
						}),
					elm$core$Platform$Cmd$none);
			case 'LoadContents':
				var res = msg.a;
				if (res.$ === 'Ok') {
					var jsonVal = res.a;
					var _n2 = A2(elm$json$Json$Decode$decodeValue, author$project$PageTreeEditor$PageTreeEditor$decodeContents, jsonVal);
					if (_n2.$ === 'Ok') {
						var contents = _n2.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{contents: contents, contentsLoaded: author$project$Internals$CommonHelpers$Success}),
							elm$core$Platform$Cmd$none);
					} else {
						var e = _n2.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{contentsLoaded: author$project$Internals$CommonHelpers$Failure}),
							elm$core$Platform$Cmd$none);
					}
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{contentsLoaded: author$project$Internals$CommonHelpers$Failure}),
						elm$core$Platform$Cmd$none);
				}
			case 'LoadPageTree':
				var res = msg.a;
				if (res.$ === 'Ok') {
					var pageTree = res.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								pageTree: elm$core$Maybe$Just(pageTree),
								pageTreeLoaded: author$project$Internals$CommonHelpers$Success
							}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{pageTreeLoaded: author$project$Internals$CommonHelpers$Failure}),
						elm$core$Platform$Cmd$none);
				}
			case 'LoadKeywords':
				var res = msg.a;
				if (res.$ === 'Ok') {
					var keywords = res.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{keywords: keywords, keywordsLoaded: author$project$Internals$CommonHelpers$Success}),
						elm$core$Platform$Cmd$none);
				} else {
					var e = res.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{error: '', keywordsLoaded: author$project$Internals$CommonHelpers$Failure}),
						elm$core$Platform$Cmd$none);
				}
			case 'PageTreeUpdated':
				var mbBackup = msg.a;
				var page = msg.b;
				var res = msg.c;
				if ((res.$ === 'Ok') && res.a) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								lockedPages: A2(elm_community$list_extra$List$Extra$remove, page, model.lockedPages),
								pageTreeUpdatedStatus: author$project$Internals$CommonHelpers$Success,
								selected: elm$core$Maybe$Nothing
							}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								lockedPages: A2(elm_community$list_extra$List$Extra$remove, page, model.lockedPages),
								pageTree: function () {
									if (mbBackup.$ === 'Just') {
										var backup = mbBackup.a;
										return A2(
											elm$core$Maybe$map,
											author$project$PageTreeEditor$PageTreeEditor$rewind,
											A2(
												elm$core$Maybe$map,
												author$project$PageTreeEditor$PageTreeEditor$updateCurrPageTree(backup),
												A2(
													elm$core$Maybe$andThen,
													author$project$PageTreeEditor$PageTreeEditor$zipTo(
														author$project$PageTreeEditor$PageTreeEditor$getPath(page)),
													model.pageTree)));
									} else {
										return A2(
											elm$core$Maybe$map,
											author$project$PageTreeEditor$PageTreeEditor$rewind,
											A2(
												elm$core$Maybe$andThen,
												author$project$PageTreeEditor$PageTreeEditor$delete,
												A2(
													elm$core$Maybe$andThen,
													author$project$PageTreeEditor$PageTreeEditor$zipTo(
														author$project$PageTreeEditor$PageTreeEditor$getPath(page)),
													model.pageTree)));
									}
								}(),
								pageTreeUpdatedStatus: author$project$Internals$CommonHelpers$Failure
							}),
						elm$core$Platform$Cmd$none);
				}
			case 'SaveContent':
				var page = msg.a;
				var pageInfo = page.a;
				var xs = page.b;
				var _n7 = model.seed;
				if (_n7.$ === 'Just') {
					var seed = _n7.a;
					var mbBackup = A2(
						elm$core$Maybe$map,
						author$project$PageTreeEditor$PageTreeEditor$extractPage,
						A2(
							elm$core$Maybe$andThen,
							author$project$PageTreeEditor$PageTreeEditor$zipTo(pageInfo.path),
							model.pageTree));
					var _n8 = A2(elm$random$Random$step, TSFoster$elm_uuid$UUID$generator, seed);
					var uuid = _n8.a;
					var newSeed = _n8.b;
					var contentId = A2(elm$core$Maybe$withDefault, uuid, pageInfo.mbContentId);
					var mbBackupContent = A2(
						elm$core$Dict$get,
						TSFoster$elm_uuid$UUID$canonical(contentId),
						model.contents);
					var newContent = {
						contentId: contentId,
						docContent: config.currentDocument,
						jsonContent: author$project$Document$Json$DocumentSerializer$encodeDocument(config.currentDocument)
					};
					var newContents = A3(
						elm$core$Dict$insert,
						TSFoster$elm_uuid$UUID$canonical(contentId),
						newContent,
						model.contents);
					var newPage = A2(
						author$project$PageTreeEditor$PageTreeEditor$Page,
						_Utils_update(
							pageInfo,
							{
								mbContentId: elm$core$Maybe$Just(contentId)
							}),
						xs);
					var newPageTree = A2(
						elm$core$Maybe$map,
						author$project$PageTreeEditor$PageTreeEditor$rewind,
						A2(
							elm$core$Maybe$map,
							author$project$PageTreeEditor$PageTreeEditor$updateCurrPageTree(newPage),
							A2(
								elm$core$Maybe$andThen,
								author$project$PageTreeEditor$PageTreeEditor$zipTo(pageInfo.path),
								model.pageTree)));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								contentUpdatedStatus: author$project$Internals$CommonHelpers$Initial,
								contents: newContents,
								fileIoSelected: elm$core$Maybe$Just(
									A2(
										author$project$PageTreeEditor$PageTreeEditor$Page,
										_Utils_update(
											pageInfo,
											{
												mbContentId: elm$core$Maybe$Just(contentId)
											}),
										xs)),
								lockedContents: A3(
									elm$core$Dict$insert,
									TSFoster$elm_uuid$UUID$canonical(contentId),
									mbBackupContent,
									model.lockedContents),
								lockedPages: A2(elm$core$List$cons, newPage, model.lockedPages),
								pageTree: newPageTree,
								pageTreeUpdatedStatus: author$project$Internals$CommonHelpers$Initial,
								seed: elm$core$Maybe$Just(newSeed)
							}),
						elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A2(
									author$project$Auth$AuthPlugin$cmdIfLogged,
									config.logInfo,
									A2(author$project$PageTreeEditor$PageTreeEditor$saveContent, contentId, config.currentDocument)),
									A2(
									elm$core$Maybe$withDefault,
									elm$core$Platform$Cmd$none,
									A2(
										elm$core$Maybe$map,
										function (pt) {
											return A2(
												author$project$Auth$AuthPlugin$cmdIfLogged,
												config.logInfo,
												A3(author$project$PageTreeEditor$PageTreeEditor$savePageTree, mbBackup, newPage, pt));
										},
										A2(elm$core$Maybe$map, author$project$PageTreeEditor$PageTreeEditor$extractPage, newPageTree)))
								])));
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'ContentUpdated':
				var uuid = msg.a;
				var res = msg.b;
				if ((res.$ === 'Ok') && res.a) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								keywords: A2(
									elm$core$Set$filter,
									function (_n10) {
										var k = _n10.a;
										var cId = _n10.b;
										return A2(elm$core$Dict$member, cId, model.contents);
									},
									model.keywords),
								lockedContents: A2(
									elm$core$Dict$remove,
									TSFoster$elm_uuid$UUID$canonical(uuid),
									model.lockedContents),
								pageTreeUpdatedStatus: author$project$Internals$CommonHelpers$Success
							}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								contents: function () {
									var _n11 = A2(
										elm$core$Dict$get,
										TSFoster$elm_uuid$UUID$canonical(uuid),
										model.lockedContents);
									if ((_n11.$ === 'Just') && (_n11.a.$ === 'Just')) {
										var backup = _n11.a.a;
										return A3(
											elm$core$Dict$insert,
											TSFoster$elm_uuid$UUID$canonical(uuid),
											backup,
											model.contents);
									} else {
										return A2(
											elm$core$Dict$remove,
											TSFoster$elm_uuid$UUID$canonical(uuid),
											model.contents);
									}
								}(),
								lockedContents: A2(
									elm$core$Dict$remove,
									TSFoster$elm_uuid$UUID$canonical(uuid),
									model.lockedContents),
								pageTreeUpdatedStatus: author$project$Internals$CommonHelpers$Failure
							}),
						elm$core$Platform$Cmd$none);
				}
			case 'RenamePageInput':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							renamePageBuffer: elm$core$Maybe$Just(s)
						}),
					elm$core$Platform$Cmd$none);
			case 'RenamePage':
				var _n12 = model.selected;
				if (_n12.$ === 'Just') {
					var _n13 = _n12.a;
					var pageInfo = _n13.a;
					var xs = _n13.b;
					if (author$project$PageTreeEditor$PageTreeEditor$validMbStr(model.renamePageBuffer)) {
						var newPage = author$project$PageTreeEditor$PageTreeEditor$fixPaths(
							A2(
								author$project$PageTreeEditor$PageTreeEditor$Page,
								_Utils_update(
									pageInfo,
									{
										name: A2(elm$core$Maybe$withDefault, '', model.renamePageBuffer)
									}),
								xs));
						var newPageTree = A2(
							elm$core$Maybe$map,
							author$project$PageTreeEditor$PageTreeEditor$rewind,
							A2(
								elm$core$Maybe$map,
								author$project$PageTreeEditor$PageTreeEditor$updateCurrPageTree(newPage),
								A2(
									elm$core$Maybe$andThen,
									author$project$PageTreeEditor$PageTreeEditor$zipTo(pageInfo.path),
									model.pageTree)));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									lockedPages: A2(elm$core$List$cons, newPage, model.lockedPages),
									pageTree: newPageTree,
									renamePageBuffer: elm$core$Maybe$Nothing,
									selected: elm$core$Maybe$Nothing
								}),
							A2(
								elm$core$Maybe$withDefault,
								elm$core$Platform$Cmd$none,
								A2(
									elm$core$Maybe$map,
									function (pt) {
										return A2(
											author$project$Auth$AuthPlugin$cmdIfLogged,
											config.logInfo,
											A3(
												author$project$PageTreeEditor$PageTreeEditor$savePageTree,
												elm$core$Maybe$Just(
													A2(author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, xs)),
												newPage,
												pt));
									},
									A2(elm$core$Maybe$map, author$project$PageTreeEditor$PageTreeEditor$extractPage, newPageTree))));
					} else {
						return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
					}
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'NewPageInput':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{newPageBuffer: s}),
					elm$core$Platform$Cmd$none);
			case 'NewPage':
				if (model.newPageBuffer === '') {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				} else {
					var _n14 = _Utils_Tuple2(model.saveAsSelected, model.seed);
					if ((_n14.a.$ === 'Just') && (_n14.b.$ === 'Just')) {
						var page = _n14.a.a;
						var pageInfo = page.a;
						var xs = page.b;
						var seed = _n14.b.a;
						var newPage = A2(
							author$project$PageTreeEditor$PageTreeEditor$Page,
							{
								mbContentId: elm$core$Maybe$Nothing,
								name: model.newPageBuffer,
								path: _Utils_ap(
									pageInfo.path,
									_List_fromArray(
										[model.newPageBuffer]))
							},
							_List_Nil);
						var newPageTree = A2(
							elm$core$Maybe$map,
							author$project$PageTreeEditor$PageTreeEditor$rewind,
							A2(
								elm$core$Maybe$map,
								author$project$PageTreeEditor$PageTreeEditor$updateCurrPageTree(
									A2(
										author$project$PageTreeEditor$PageTreeEditor$Page,
										pageInfo,
										_Utils_ap(
											xs,
											_List_fromArray(
												[newPage])))),
								A2(
									elm$core$Maybe$andThen,
									author$project$PageTreeEditor$PageTreeEditor$zipTo(pageInfo.path),
									model.pageTree)));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									lockedPages: A2(elm$core$List$cons, newPage, model.lockedPages),
									newPageBuffer: '',
									pageTree: newPageTree,
									pageTreeUpdatedStatus: author$project$Internals$CommonHelpers$Initial
								}),
							A2(
								elm$core$Maybe$withDefault,
								elm$core$Platform$Cmd$none,
								A2(
									elm$core$Maybe$map,
									function (pt) {
										return A2(
											author$project$Auth$AuthPlugin$cmdIfLogged,
											config.logInfo,
											A3(author$project$PageTreeEditor$PageTreeEditor$savePageTree, elm$core$Maybe$Nothing, newPage, pt));
									},
									A2(elm$core$Maybe$map, author$project$PageTreeEditor$PageTreeEditor$extractPage, newPageTree))));
					} else {
						return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
					}
				}
			case 'DeletePage':
				var _n15 = model.selected;
				if (_n15.$ === 'Just') {
					var _n16 = _n15.a;
					var pageInfo = _n16.a;
					var xs = _n16.b;
					var newPageTree = A2(
						elm$core$Maybe$map,
						author$project$PageTreeEditor$PageTreeEditor$rewind,
						A2(
							elm$core$Maybe$andThen,
							author$project$PageTreeEditor$PageTreeEditor$delete,
							A2(
								elm$core$Maybe$andThen,
								author$project$PageTreeEditor$PageTreeEditor$zipTo(pageInfo.path),
								model.pageTree)));
					var mbBackup = A2(
						elm$core$Maybe$andThen,
						author$project$PageTreeEditor$PageTreeEditor$zipUp,
						A2(
							elm$core$Maybe$andThen,
							author$project$PageTreeEditor$PageTreeEditor$zipTo(pageInfo.path),
							model.pageTree));
					var _n17 = A2(elm$core$Maybe$map, author$project$PageTreeEditor$PageTreeEditor$extractPage, mbBackup);
					if (_n17.$ === 'Just') {
						var backup = _n17.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									lockedContents: A2(
										elm$core$Maybe$withDefault,
										model.lockedContents,
										A2(
											elm$core$Maybe$map,
											function (cId) {
												return A3(
													elm$core$Dict$insert,
													TSFoster$elm_uuid$UUID$canonical(cId),
													elm$core$Maybe$Nothing,
													model.lockedContents);
											},
											author$project$PageTreeEditor$PageTreeEditor$getMbContentId(
												A2(author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, xs)))),
									lockedPages: A2(elm$core$List$cons, backup, model.lockedPages),
									pageTree: newPageTree,
									selected: elm$core$Maybe$Nothing
								}),
							elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										elm$core$Maybe$withDefault,
										elm$core$Platform$Cmd$none,
										A2(
											elm$core$Maybe$map,
											function (pt) {
												return A2(
													author$project$Auth$AuthPlugin$cmdIfLogged,
													config.logInfo,
													A3(
														author$project$PageTreeEditor$PageTreeEditor$savePageTree,
														elm$core$Maybe$Just(backup),
														backup,
														pt));
											},
											A2(elm$core$Maybe$map, author$project$PageTreeEditor$PageTreeEditor$extractPage, newPageTree))),
										A2(
										elm$core$Maybe$withDefault,
										elm$core$Platform$Cmd$none,
										A2(
											elm$core$Maybe$map,
											function (contentId) {
												return A2(
													author$project$Auth$AuthPlugin$cmdIfLogged,
													config.logInfo,
													author$project$PageTreeEditor$PageTreeEditor$deleteContent(contentId));
											},
											author$project$PageTreeEditor$PageTreeEditor$getMbContentId(
												A2(author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, xs))))
									])));
					} else {
						return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
					}
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'CutPage':
				var _n18 = _Utils_Tuple2(model.selected, model.pastePageBuffer);
				if ((_n18.a.$ === 'Just') && (_n18.b.$ === 'Nothing')) {
					var page = _n18.a.a;
					var _n19 = _n18.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								lockedPages: A2(elm$core$List$cons, page, model.lockedPages),
								pastePageBuffer: elm$core$Maybe$Just(page),
								selected: elm$core$Maybe$Nothing
							}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'PastePage':
				var _n20 = _Utils_Tuple2(model.selected, model.pastePageBuffer);
				if ((_n20.a.$ === 'Just') && (_n20.b.$ === 'Just')) {
					var _n21 = _n20.a.a;
					var pageInfo = _n21.a;
					var xs = _n21.b;
					var page = _n20.b.a;
					var newPageTree = A2(
						elm$core$Maybe$map,
						author$project$PageTreeEditor$PageTreeEditor$initPageTree,
						A2(
							elm$core$Maybe$map,
							author$project$PageTreeEditor$PageTreeEditor$fixPaths,
							A2(
								elm$core$Maybe$map,
								author$project$PageTreeEditor$PageTreeEditor$extractPage,
								A2(
									elm$core$Maybe$map,
									author$project$PageTreeEditor$PageTreeEditor$rewind,
									A2(
										elm$core$Maybe$andThen,
										author$project$PageTreeEditor$PageTreeEditor$delete,
										A2(
											elm$core$Maybe$andThen,
											author$project$PageTreeEditor$PageTreeEditor$zipTo(
												author$project$PageTreeEditor$PageTreeEditor$getPath(page)),
											A2(
												elm$core$Maybe$map,
												author$project$PageTreeEditor$PageTreeEditor$rewind,
												A2(
													elm$core$Maybe$map,
													author$project$PageTreeEditor$PageTreeEditor$updateCurrPageTree(
														A2(
															author$project$PageTreeEditor$PageTreeEditor$Page,
															pageInfo,
															_Utils_ap(
																xs,
																_List_fromArray(
																	[page])))),
													A2(
														elm$core$Maybe$andThen,
														author$project$PageTreeEditor$PageTreeEditor$zipTo(pageInfo.path),
														model.pageTree)))))))));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{pageTree: newPageTree, pastePageBuffer: elm$core$Maybe$Nothing, selected: elm$core$Maybe$Nothing}),
						A2(
							elm$core$Maybe$withDefault,
							elm$core$Platform$Cmd$none,
							A2(
								elm$core$Maybe$map,
								function (pt) {
									return A2(
										author$project$Auth$AuthPlugin$cmdIfLogged,
										config.logInfo,
										A3(
											author$project$PageTreeEditor$PageTreeEditor$savePageTree,
											elm$core$Maybe$Just(page),
											page,
											pt));
								},
								A2(elm$core$Maybe$map, author$project$PageTreeEditor$PageTreeEditor$extractPage, newPageTree))));
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'Swap':
				var up = msg.a;
				var _n22 = model.selected;
				if (_n22.$ === 'Just') {
					var _n23 = _n22.a;
					var pageInfo = _n23.a;
					var xs = _n23.b;
					var _n24 = A2(
						elm$core$Maybe$andThen,
						author$project$PageTreeEditor$PageTreeEditor$zipUp,
						A2(
							elm$core$Maybe$andThen,
							up ? author$project$PageTreeEditor$PageTreeEditor$swapLeft : author$project$PageTreeEditor$PageTreeEditor$swapRight,
							A2(
								elm$core$Maybe$andThen,
								author$project$PageTreeEditor$PageTreeEditor$zipTo(pageInfo.path),
								model.pageTree)));
					if (_n24.$ === 'Just') {
						var newPageTree = _n24.a;
						var newPage = author$project$PageTreeEditor$PageTreeEditor$extractPage(newPageTree);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									lockedPages: A2(elm$core$List$cons, newPage, model.lockedPages),
									pageTree: elm$core$Maybe$Just(
										author$project$PageTreeEditor$PageTreeEditor$rewind(newPageTree)),
									selected: elm$core$Maybe$Nothing
								}),
							function (pt) {
								return A2(
									author$project$Auth$AuthPlugin$cmdIfLogged,
									config.logInfo,
									A3(
										author$project$PageTreeEditor$PageTreeEditor$savePageTree,
										A2(
											elm$core$Maybe$map,
											author$project$PageTreeEditor$PageTreeEditor$extractPage,
											A2(
												elm$core$Maybe$andThen,
												author$project$PageTreeEditor$PageTreeEditor$zipUp,
												A2(
													elm$core$Maybe$andThen,
													author$project$PageTreeEditor$PageTreeEditor$zipTo(pageInfo.path),
													model.pageTree))),
										newPage,
										pt));
							}(
								author$project$PageTreeEditor$PageTreeEditor$extractPage(
									author$project$PageTreeEditor$PageTreeEditor$rewind(newPageTree))));
					} else {
						return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
					}
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'SelectKeyword':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							selectedKeyword: elm$core$Maybe$Just(s)
						}),
					elm$core$Platform$Cmd$none);
			case 'SelectPageKeyword':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							selectedPageKeyword: elm$core$Maybe$Just(s)
						}),
					elm$core$Platform$Cmd$none);
			case 'KeywordInput':
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							keywordsPromptInput: elm$core$Maybe$Just(s),
							selectedKeyword: elm$core$Maybe$Nothing
						}),
					elm$core$Platform$Cmd$none);
			case 'NewKeyword':
				var _n25 = A2(elm$core$Maybe$andThen, author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.selected);
				if (_n25.$ === 'Just') {
					var contentId = _n25.a;
					if (author$project$PageTreeEditor$PageTreeEditor$validMbStr(model.keywordsPromptInput)) {
						var newEntry = _Utils_Tuple2(
							A2(elm$core$Maybe$withDefault, '', model.keywordsPromptInput),
							TSFoster$elm_uuid$UUID$canonical(contentId));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									keywords: A2(elm$core$Set$insert, newEntry, model.keywords),
									keywordsPromptInput: elm$core$Maybe$Nothing,
									lockedKeywords: A2(elm$core$Set$insert, newEntry, model.lockedKeywords),
									selectedKeyword: elm$core$Maybe$Nothing
								}),
							A2(
								author$project$Auth$AuthPlugin$cmdIfLogged,
								config.logInfo,
								author$project$PageTreeEditor$PageTreeEditor$setKeyword(newEntry)));
					} else {
						return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
					}
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'SetKeyword':
				var _n26 = _Utils_Tuple2(
					model.selectedKeyword,
					A2(elm$core$Maybe$andThen, author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.selected));
				if ((_n26.a.$ === 'Just') && (_n26.b.$ === 'Just')) {
					var keyword = _n26.a.a;
					var contentId = _n26.b.a;
					var newEntry = _Utils_Tuple2(
						keyword,
						TSFoster$elm_uuid$UUID$canonical(contentId));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								keywords: A2(elm$core$Set$insert, newEntry, model.keywords),
								keywordsPromptInput: elm$core$Maybe$Nothing,
								lockedKeywords: A2(elm$core$Set$insert, newEntry, model.lockedKeywords),
								selectedKeyword: elm$core$Maybe$Nothing
							}),
						A2(
							author$project$Auth$AuthPlugin$cmdIfLogged,
							config.logInfo,
							author$project$PageTreeEditor$PageTreeEditor$setKeyword(newEntry)));
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'UnsetKeyword':
				var _n27 = _Utils_Tuple2(
					model.selectedPageKeyword,
					A2(elm$core$Maybe$andThen, author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.selected));
				if ((_n27.a.$ === 'Just') && (_n27.b.$ === 'Just')) {
					var keyword = _n27.a.a;
					var contentId = _n27.b.a;
					var newEntry = _Utils_Tuple2(
						keyword,
						TSFoster$elm_uuid$UUID$canonical(contentId));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								keywords: A2(elm$core$Set$remove, newEntry, model.keywords),
								lockedKeywords: A2(elm$core$Set$insert, newEntry, model.lockedKeywords),
								selectedPageKeyword: elm$core$Maybe$Nothing
							}),
						A2(
							author$project$Auth$AuthPlugin$cmdIfLogged,
							config.logInfo,
							author$project$PageTreeEditor$PageTreeEditor$unsetKeyword(newEntry)));
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'KeywordUpdated':
				var unset = msg.a;
				var _n28 = msg.b;
				var k = _n28.a;
				var cId = _n28.b;
				var res = msg.c;
				if ((res.$ === 'Ok') && res.a) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								lockedKeywords: A2(
									elm$core$Set$remove,
									_Utils_Tuple2(k, cId),
									model.lockedKeywords)
							}),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								keywords: unset ? A2(
									elm$core$Set$insert,
									_Utils_Tuple2(k, cId),
									model.keywords) : A2(
									elm$core$Set$remove,
									_Utils_Tuple2(k, cId),
									model.keywords),
								lockedKeywords: A2(
									elm$core$Set$remove,
									_Utils_Tuple2(k, cId),
									model.lockedKeywords)
							}),
						elm$core$Platform$Cmd$none);
				}
			case 'SetInitialSeed':
				var t = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							seed: elm$core$Maybe$Just(
								elm$random$Random$initialSeed(
									elm$time$Time$posixToMillis(t)))
						}),
					elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
		}
	});
var author$project$PageTreeEditor$PageTreeEditor$update = F3(
	function (config, msg, model) {
		var _n0 = A3(author$project$PageTreeEditor$PageTreeEditor$internalUpdate, config, msg, model);
		var newModel = _n0.a;
		var cmds = _n0.b;
		return _Utils_Tuple2(
			newModel,
			A2(elm$core$Platform$Cmd$map, model.externalMsg, cmds));
	});
var author$project$MurolAdmin$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'Launch':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{currentTool: author$project$MurolAdmin$PageEditorTool, loadingStatus: author$project$MurolAdmin$Ready}),
					elm$core$Platform$Cmd$none);
			case 'FileExplorerMsg':
				var fileExplorerMsg = msg.a;
				var _n1 = A3(
					author$project$FileExplorer$FileExplorer$update,
					{
						logInfo: author$project$Auth$AuthPlugin$getLogInfo(model.authTool)
					},
					fileExplorerMsg,
					model.fileExplorer);
				var newFileExplorer = _n1.a;
				var fileExplorerCmds = _n1.b;
				var mbEditorPluginResult = _n1.c;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{fileExplorer: newFileExplorer}),
					elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[fileExplorerCmds])));
			case 'AuthMsg':
				var authToolMsg = msg.a;
				var _n2 = A2(author$project$Auth$AuthPlugin$update, authToolMsg, model.authTool);
				var newAuthTool = _n2.a;
				var authToolCmds = _n2.b;
				var mbToolResult = _n2.c;
				var logInfo = author$project$Auth$AuthPlugin$getLogInfo(newAuthTool);
				var _n3 = (_Utils_eq(model.loadingStatus, author$project$MurolAdmin$WaitingForLogin) && (!_Utils_eq(logInfo, author$project$Auth$AuthPlugin$LoggedOut))) ? _Utils_Tuple2(
					author$project$MurolAdmin$Loading,
					_List_fromArray(
						[
							A2(author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$load, model.generalDirectory, logInfo),
							A2(author$project$PageTreeEditor$PageTreeEditor$load, model.pageTreeEditor, logInfo),
							A2(author$project$FileExplorer$FileExplorer$load, model.fileExplorer, logInfo),
							A2(author$project$NewsEditor$NewsEditor$load, model.newsEditor, logInfo)
						])) : _Utils_Tuple2(model.loadingStatus, _List_Nil);
				var newLoadingStatus = _n3.a;
				var loadingCmds = _n3.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							authTool: newAuthTool,
							currentTool: _Utils_eq(
								mbToolResult,
								elm$core$Maybe$Just(author$project$Internals$ToolHelpers$ToolQuit)) ? author$project$MurolAdmin$PageEditorTool : model.currentTool,
							loadingStatus: newLoadingStatus
						}),
					elm$core$Platform$Cmd$batch(
						_Utils_ap(
							_List_fromArray(
								[authToolCmds]),
							loadingCmds)));
			case 'PageEditorMsg':
				var pageEditorMsg = msg.a;
				var _n4 = A3(
					author$project$PageEditor$PageEditor$update,
					{
						fileExplorer: model.fileExplorer,
						genDirEditor: model.generalDirectory,
						loadedContent: author$project$PageTreeEditor$PageTreeEditor$loadedContent(model.pageTreeEditor),
						pageTreeEditor: model.pageTreeEditor
					},
					pageEditorMsg,
					model.pageEditor);
				var newPageEditor = _n4.a;
				var pageEditorCmds = _n4.b;
				var mbToolResult = _n4.c;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{pageEditor: newPageEditor}),
					pageEditorCmds);
			case 'PageTreeEditorMsg':
				var pageTreeEditorMsg = msg.a;
				var _n5 = A3(
					author$project$PageTreeEditor$PageTreeEditor$update,
					{
						currentDocument: author$project$PageEditor$PageEditor$currentDocument(model.pageEditor),
						logInfo: author$project$Auth$AuthPlugin$getLogInfo(model.authTool)
					},
					pageTreeEditorMsg,
					model.pageTreeEditor);
				var newPageTreeEditor = _n5.a;
				var pageTreeEditorCmds = _n5.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{pageTreeEditor: newPageTreeEditor}),
					pageTreeEditorCmds);
			case 'GeneralDirectoryMsg':
				var generalDirectoryMsg = msg.a;
				var _n6 = A3(
					author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$update,
					{
						logInfo: author$project$Auth$AuthPlugin$getLogInfo(model.authTool),
						zone: model.zone
					},
					generalDirectoryMsg,
					model.generalDirectory);
				var newGeneralDirectory = _n6.a;
				var generalDirectoryCmds = _n6.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{generalDirectory: newGeneralDirectory}),
					generalDirectoryCmds);
			case 'NewsEditorMsg':
				var newsEditorMsg = msg.a;
				var _n7 = A3(
					author$project$NewsEditor$NewsEditor$update,
					{
						logInfo: author$project$Auth$AuthPlugin$getLogInfo(model.authTool),
						pageTreeEditor: model.pageTreeEditor,
						zone: model.zone
					},
					newsEditorMsg,
					model.newsEditor);
				var newNewsEditor = _n7.a;
				var newsEditorCmds = _n7.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{newsEditor: newNewsEditor}),
					newsEditorCmds);
			case 'SetCurrentTool':
				var t = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{currentTool: t}),
					elm$core$Platform$Cmd$none);
			case 'CurrentViewport':
				var vp = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							winHeight: elm$core$Basics$round(vp.viewport.height),
							winWidth: elm$core$Basics$round(vp.viewport.width)
						}),
					elm$core$Platform$Cmd$none);
			case 'WinResize':
				var width = msg.a;
				var height = msg.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{winHeight: height, winWidth: width}),
					elm$core$Platform$Cmd$none);
			case 'SetZone':
				var zone = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{zone: zone}),
					elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
		}
	});
var author$project$Auth$AuthPlugin$ChangePluginMode = function (a) {
	return {$: 'ChangePluginMode', a: a};
};
var author$project$Auth$AuthPlugin$Login = {$: 'Login'};
var author$project$Auth$AuthPlugin$Quit = {$: 'Quit'};
var author$project$Auth$AuthPlugin$SetPassword = function (a) {
	return {$: 'SetPassword', a: a};
};
var author$project$Auth$AuthPlugin$SetUsername = function (a) {
	return {$: 'SetUsername', a: a};
};
var mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 'Attr', a: a};
};
var mdgriffith$elm_ui$Element$htmlAttribute = mdgriffith$elm_ui$Internal$Model$Attr;
var author$project$Internals$CommonStyleHelpers$noAttr = mdgriffith$elm_ui$Element$htmlAttribute(
	elm$html$Html$Attributes$class(''));
var mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 'Height', a: a};
};
var mdgriffith$elm_ui$Element$height = mdgriffith$elm_ui$Internal$Model$Height;
var mdgriffith$elm_ui$Internal$Model$Content = {$: 'Content'};
var mdgriffith$elm_ui$Element$shrink = mdgriffith$elm_ui$Internal$Model$Content;
var mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 'Unkeyed', a: a};
};
var mdgriffith$elm_ui$Internal$Model$AsColumn = {$: 'AsColumn'};
var mdgriffith$elm_ui$Internal$Model$asColumn = mdgriffith$elm_ui$Internal$Model$AsColumn;
var mdgriffith$elm_ui$Internal$Model$Generic = {$: 'Generic'};
var mdgriffith$elm_ui$Internal$Model$div = mdgriffith$elm_ui$Internal$Model$Generic;
var mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var mdgriffith$elm_ui$Internal$Flag$none = A2(mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 'NoNearbyChildren'};
var mdgriffith$elm_ui$Internal$Style$classes = {above: 'a', active: 'atv', alignBottom: 'ab', alignCenterX: 'cx', alignCenterY: 'cy', alignContainerBottom: 'acb', alignContainerCenterX: 'accx', alignContainerCenterY: 'accy', alignContainerRight: 'acr', alignLeft: 'al', alignRight: 'ar', alignTop: 'at', alignedHorizontally: 'ah', alignedVertically: 'av', any: 's', behind: 'bh', below: 'b', bold: 'w7', borderDashed: 'bd', borderDotted: 'bdt', borderNone: 'bn', borderSolid: 'bs', capturePointerEvents: 'cpe', clip: 'cp', clipX: 'cpx', clipY: 'cpy', column: 'c', container: 'ctr', contentBottom: 'cb', contentCenterX: 'ccx', contentCenterY: 'ccy', contentLeft: 'cl', contentRight: 'cr', contentTop: 'ct', cursorPointer: 'cptr', cursorText: 'ctxt', focus: 'fcs', fullSize: 'fs', grid: 'g', hasBehind: 'hbh', heightContent: 'hc', heightFill: 'hf', heightFillPortion: 'hfp', hover: 'hv', imageContainer: 'ic', inFront: 'fr', inputMultiline: 'iml', inputText: 'it', italic: 'i', nearby: 'nb', noTextSelection: 'notxt', onLeft: 'ol', onRight: 'or', opaque: 'oq', overflowHidden: 'oh', page: 'pg', paragraph: 'p', passPointerEvents: 'ppe', root: 'ui', row: 'r', scrollbars: 'sb', scrollbarsX: 'sbx', scrollbarsY: 'sby', seButton: 'sbt', single: 'e', sizeByCapital: 'cap', spaceEvenly: 'sev', strike: 'sk', text: 't', textCenter: 'tc', textExtraBold: 'w8', textExtraLight: 'w2', textHeavy: 'w9', textJustify: 'tj', textJustifyAll: 'tja', textLeft: 'tl', textLight: 'w3', textMedium: 'w5', textNormalWeight: 'w4', textRight: 'tr', textSemiBold: 'w6', textThin: 'w1', textUnitalicized: 'tun', transition: 'ts', transparent: 'clr', underline: 'u', widthContent: 'wc', widthExact: 'we', widthFill: 'wf', widthFillPortion: 'wfp', wrapped: 'wrp'};
var mdgriffith$elm_ui$Internal$Model$columnClass = mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + mdgriffith$elm_ui$Internal$Style$classes.column);
var mdgriffith$elm_ui$Internal$Model$gridClass = mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + mdgriffith$elm_ui$Internal$Style$classes.grid);
var mdgriffith$elm_ui$Internal$Model$pageClass = mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + mdgriffith$elm_ui$Internal$Style$classes.page);
var mdgriffith$elm_ui$Internal$Model$paragraphClass = mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + mdgriffith$elm_ui$Internal$Style$classes.paragraph);
var mdgriffith$elm_ui$Internal$Model$rowClass = mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + mdgriffith$elm_ui$Internal$Style$classes.row);
var mdgriffith$elm_ui$Internal$Model$singleClass = mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + mdgriffith$elm_ui$Internal$Style$classes.single);
var mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context.$) {
		case 'AsRow':
			return mdgriffith$elm_ui$Internal$Model$rowClass;
		case 'AsColumn':
			return mdgriffith$elm_ui$Internal$Model$columnClass;
		case 'AsEl':
			return mdgriffith$elm_ui$Internal$Model$singleClass;
		case 'AsGrid':
			return mdgriffith$elm_ui$Internal$Model$gridClass;
		case 'AsParagraph':
			return mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 'Keyed', a: a};
};
var mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 'NoStyleSheet'};
var mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 'Styled', a: a};
};
var mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 'Unstyled', a: a};
};
var mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var mdgriffith$elm_ui$Internal$Model$AsEl = {$: 'AsEl'};
var mdgriffith$elm_ui$Internal$Model$asEl = mdgriffith$elm_ui$Internal$Model$AsEl;
var mdgriffith$elm_ui$Internal$Model$AsParagraph = {$: 'AsParagraph'};
var mdgriffith$elm_ui$Internal$Model$asParagraph = mdgriffith$elm_ui$Internal$Model$AsParagraph;
var elm$html$Html$s = _VirtualDom_node('s');
var elm$html$Html$u = _VirtualDom_node('u');
var elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var mdgriffith$elm_ui$Internal$Flag$alignBottom = mdgriffith$elm_ui$Internal$Flag$flag(41);
var mdgriffith$elm_ui$Internal$Flag$alignRight = mdgriffith$elm_ui$Internal$Flag$flag(40);
var mdgriffith$elm_ui$Internal$Flag$centerX = mdgriffith$elm_ui$Internal$Flag$flag(42);
var mdgriffith$elm_ui$Internal$Flag$centerY = mdgriffith$elm_ui$Internal$Flag$flag(43);
var mdgriffith$elm_ui$Internal$Flag$heightBetween = mdgriffith$elm_ui$Internal$Flag$flag(45);
var mdgriffith$elm_ui$Internal$Flag$heightFill = mdgriffith$elm_ui$Internal$Flag$flag(37);
var mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _n0) {
		var fieldOne = _n0.a;
		var fieldTwo = _n0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var mdgriffith$elm_ui$Internal$Flag$widthBetween = mdgriffith$elm_ui$Internal$Flag$flag(44);
var mdgriffith$elm_ui$Internal$Flag$widthFill = mdgriffith$elm_ui$Internal$Flag$flag(39);
var mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 'Px':
			var px = x.a;
			return elm$core$String$fromInt(px) + 'px';
		case 'Content':
			return 'auto';
		case 'Fill':
			var i = x.a;
			return elm$core$String$fromInt(i) + 'fr';
		case 'Min':
			var min = x.a;
			var len = x.b;
			return 'min' + (elm$core$String$fromInt(min) + mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + (elm$core$String$fromInt(max) + mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return elm$core$Maybe$Nothing;
		case 'Moved':
			var _n1 = transform.a;
			var x = _n1.a;
			var y = _n1.b;
			var z = _n1.c;
			return elm$core$Maybe$Just(
				'mv-' + (mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + (mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _n2 = transform.a;
			var tx = _n2.a;
			var ty = _n2.b;
			var tz = _n2.c;
			var _n3 = transform.b;
			var sx = _n3.a;
			var sy = _n3.b;
			var sz = _n3.c;
			var _n4 = transform.c;
			var ox = _n4.a;
			var oy = _n4.b;
			var oz = _n4.c;
			var angle = transform.d;
			return elm$core$Maybe$Just(
				'tfrm-' + (mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + (mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + (mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + (mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + (mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + (mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + (mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + (mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + (mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 'Shadows':
			var name = style.a;
			return name;
		case 'Transparency':
			var name = style.a;
			var o = style.b;
			return name;
		case 'Style':
			var _class = style.a;
			return _class;
		case 'FontFamily':
			var name = style.a;
			return name;
		case 'FontSize':
			var i = style.a;
			return 'font-size-' + elm$core$String$fromInt(i);
		case 'Single':
			var _class = style.a;
			return _class;
		case 'Colored':
			var _class = style.a;
			return _class;
		case 'SpacingStyle':
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 'PaddingStyle':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'BorderWidth':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'GridTemplateStyle':
			var template = style.a;
			return 'grid-rows-' + (A2(
				elm$core$String$join,
				'-',
				A2(elm$core$List$map, mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
				elm$core$String$join,
				'-',
				A2(elm$core$List$map, mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + (mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
		case 'GridPosition':
			var pos = style.a;
			return 'gp grid-pos-' + (elm$core$String$fromInt(pos.row) + ('-' + (elm$core$String$fromInt(pos.col) + ('-' + (elm$core$String$fromInt(pos.width) + ('-' + elm$core$String$fromInt(pos.height)))))));
		case 'PseudoSelector':
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector.$) {
					case 'Focus':
						return 'fs';
					case 'Hover':
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				elm$core$String$join,
				' ',
				A2(
					elm$core$List$map,
					function (sty) {
						var _n1 = mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_n1 === '') {
							return '';
						} else {
							var styleName = _n1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				elm$core$Maybe$withDefault,
				'',
				mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2(elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2(elm$core$Set$insert, styleName, cache),
			A2(elm$core$List$cons, style, existing));
	});
var mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 'Property', a: a, b: b};
	});
var mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 'Style', a: a, b: b};
	});
var mdgriffith$elm_ui$Internal$Model$formatColor = function (_n0) {
	var red = _n0.a;
	var green = _n0.b;
	var blue = _n0.c;
	var alpha = _n0.d;
	return 'rgba(' + (elm$core$String$fromInt(
		elm$core$Basics$round(red * 255)) + ((',' + elm$core$String$fromInt(
		elm$core$Basics$round(green * 255))) + ((',' + elm$core$String$fromInt(
		elm$core$Basics$round(blue * 255))) + (',' + (elm$core$String$fromFloat(alpha) + ')')))));
};
var mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		elm$core$String$join,
		' ',
		A2(
			elm$core$List$filterMap,
			elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.inset ? elm$core$Maybe$Just('inset') : elm$core$Maybe$Nothing,
					elm$core$Maybe$Just(
					elm$core$String$fromFloat(shadow.offset.a) + 'px'),
					elm$core$Maybe$Just(
					elm$core$String$fromFloat(shadow.offset.b) + 'px'),
					elm$core$Maybe$Just(
					elm$core$String$fromFloat(shadow.blur) + 'px'),
					elm$core$Maybe$Just(
					elm$core$String$fromFloat(shadow.size) + 'px'),
					elm$core$Maybe$Just(
					mdgriffith$elm_ui$Internal$Model$formatColor(shadow.color))
				])));
};
var mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return A2(
		mdgriffith$elm_ui$Internal$Model$Style,
		mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.any) + (':focus .focusable, ' + (mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.any) + '.focusable:focus')),
		A2(
			elm$core$List$filterMap,
			elm$core$Basics$identity,
			_List_fromArray(
				[
					A2(
					elm$core$Maybe$map,
					function (color) {
						return A2(
							mdgriffith$elm_ui$Internal$Model$Property,
							'border-color',
							mdgriffith$elm_ui$Internal$Model$formatColor(color));
					},
					focus.borderColor),
					A2(
					elm$core$Maybe$map,
					function (color) {
						return A2(
							mdgriffith$elm_ui$Internal$Model$Property,
							'background-color',
							mdgriffith$elm_ui$Internal$Model$formatColor(color));
					},
					focus.backgroundColor),
					A2(
					elm$core$Maybe$map,
					function (shadow) {
						return A2(
							mdgriffith$elm_ui$Internal$Model$Property,
							'box-shadow',
							mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
								{
									blur: shadow.blur,
									color: shadow.color,
									inset: false,
									offset: A2(
										elm$core$Tuple$mapSecond,
										elm$core$Basics$toFloat,
										A2(elm$core$Tuple$mapFirst, elm$core$Basics$toFloat, shadow.offset)),
									size: shadow.size
								}));
					},
					focus.shadow),
					elm$core$Maybe$Just(
					A2(mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
				])));
};
var mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 'Batch', a: a};
};
var mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 'Child', a: a, b: b};
	});
var mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 'Descriptor', a: a, b: b};
	});
var mdgriffith$elm_ui$Internal$Style$Left = {$: 'Left'};
var mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 'Prop', a: a, b: b};
	});
var mdgriffith$elm_ui$Internal$Style$Right = {$: 'Right'};
var mdgriffith$elm_ui$Internal$Style$Self = function (a) {
	return {$: 'Self', a: a};
};
var mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 'Supports', a: a, b: b};
	});
var mdgriffith$elm_ui$Internal$Style$Content = function (a) {
	return {$: 'Content', a: a};
};
var mdgriffith$elm_ui$Internal$Style$Bottom = {$: 'Bottom'};
var mdgriffith$elm_ui$Internal$Style$CenterX = {$: 'CenterX'};
var mdgriffith$elm_ui$Internal$Style$CenterY = {$: 'CenterY'};
var mdgriffith$elm_ui$Internal$Style$Top = {$: 'Top'};
var mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[mdgriffith$elm_ui$Internal$Style$Top, mdgriffith$elm_ui$Internal$Style$Bottom, mdgriffith$elm_ui$Internal$Style$Right, mdgriffith$elm_ui$Internal$Style$Left, mdgriffith$elm_ui$Internal$Style$CenterX, mdgriffith$elm_ui$Internal$Style$CenterY]);
var mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _n1 = desc.a;
			return mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.contentTop);
		case 'Bottom':
			var _n2 = desc.a;
			return mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.contentBottom);
		case 'Right':
			var _n3 = desc.a;
			return mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.contentRight);
		case 'Left':
			var _n4 = desc.a;
			return mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.contentLeft);
		case 'CenterX':
			var _n5 = desc.a;
			return mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.contentCenterX);
		default:
			var _n6 = desc.a;
			return mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.contentCenterY);
	}
};
var mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _n1 = desc.a;
			return mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			var _n2 = desc.a;
			return mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		case 'Right':
			var _n3 = desc.a;
			return mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		case 'Left':
			var _n4 = desc.a;
			return mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'CenterX':
			var _n5 = desc.a;
			return mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
		default:
			var _n6 = desc.a;
			return mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _n0 = values(alignment);
		var content = _n0.a;
		var indiv = _n0.b;
		return _List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$contentName(
					mdgriffith$elm_ui$Internal$Style$Content(alignment)),
				content),
				A2(
				mdgriffith$elm_ui$Internal$Style$Child,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Internal$Style$Descriptor,
						mdgriffith$elm_ui$Internal$Style$selfName(
							mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						indiv)
					]))
			]);
	};
	return mdgriffith$elm_ui$Internal$Style$Batch(
		A2(elm$core$List$concatMap, createDescription, mdgriffith$elm_ui$Internal$Style$alignments));
};
var mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2(mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		mdgriffith$elm_ui$Internal$Style$Descriptor,
		mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
		_List_fromArray(
			[
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				mdgriffith$elm_ui$Internal$Style$Child,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.behind),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		mdgriffith$elm_ui$Internal$Style$Descriptor,
		mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.seButton),
		_List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Internal$Style$Child,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Internal$Style$Descriptor,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Descriptor,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		mdgriffith$elm_ui$Internal$Style$Child,
		mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.heightContent),
		_List_fromArray(
			[
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		mdgriffith$elm_ui$Internal$Style$Child,
		mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.heightFill),
		_List_fromArray(
			[
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		mdgriffith$elm_ui$Internal$Style$Child,
		mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.widthFill),
		_List_fromArray(
			[
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		mdgriffith$elm_ui$Internal$Style$Child,
		mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.widthContent),
		_List_fromArray(
			[
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment.$) {
				case 'Top':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 'Bottom':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 'Right':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 'Left':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 'CenterX':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Internal$Style$Child,
								mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Internal$Style$Child,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Internal$Style$Descriptor,
						mdgriffith$elm_ui$Internal$Style$selfName(
							mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						values(alignment))
					]))
			]);
	};
	return mdgriffith$elm_ui$Internal$Style$Batch(
		A2(elm$core$List$concatMap, createDescription, mdgriffith$elm_ui$Internal$Style$alignments));
};
var mdgriffith$elm_ui$Internal$Style$Above = {$: 'Above'};
var mdgriffith$elm_ui$Internal$Style$Behind = {$: 'Behind'};
var mdgriffith$elm_ui$Internal$Style$Below = {$: 'Below'};
var mdgriffith$elm_ui$Internal$Style$OnLeft = {$: 'OnLeft'};
var mdgriffith$elm_ui$Internal$Style$OnRight = {$: 'OnRight'};
var mdgriffith$elm_ui$Internal$Style$Within = {$: 'Within'};
var mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = mdgriffith$elm_ui$Internal$Style$Above;
	var _n0 = function () {
		switch (loc.$) {
			case 'Above':
				return _Utils_Tuple0;
			case 'Below':
				return _Utils_Tuple0;
			case 'OnRight':
				return _Utils_Tuple0;
			case 'OnLeft':
				return _Utils_Tuple0;
			case 'Within':
				return _Utils_Tuple0;
			default:
				return _Utils_Tuple0;
		}
	}();
	return _List_fromArray(
		[mdgriffith$elm_ui$Internal$Style$Above, mdgriffith$elm_ui$Internal$Style$Below, mdgriffith$elm_ui$Internal$Style$OnRight, mdgriffith$elm_ui$Internal$Style$OnLeft, mdgriffith$elm_ui$Internal$Style$Within, mdgriffith$elm_ui$Internal$Style$Behind]);
}();
var mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.any),
			_Utils_ap(
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.single),
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.imageContainer))),
		_List_fromArray(
			[
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block')
			])),
		A2(
		mdgriffith$elm_ui$Internal$Style$Class,
		mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus',
		_List_fromArray(
			[
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		mdgriffith$elm_ui$Internal$Style$Class,
		mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.root),
		_List_fromArray(
			[
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.any),
					mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.heightFill)),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Child,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.inFront),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Internal$Style$Descriptor,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.nearby),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed')
							]))
					]))
			])),
		A2(
		mdgriffith$elm_ui$Internal$Style$Class,
		mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.nearby),
		_List_fromArray(
			[
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.single),
				mdgriffith$elm_ui$Internal$Style$elDescription),
				mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2(elm$core$List$map, fn, mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc.$) {
							case 'Above':
								return A2(
									mdgriffith$elm_ui$Internal$Style$Descriptor,
									mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.above),
									_List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											mdgriffith$elm_ui$Internal$Style$Child,
											mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2(mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											mdgriffith$elm_ui$Internal$Style$Child,
											mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											_List_fromArray(
												[
													A2(mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2(mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Below':
								return A2(
									mdgriffith$elm_ui$Internal$Style$Descriptor,
									mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.below),
									_List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2(mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											mdgriffith$elm_ui$Internal$Style$Child,
											mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2(mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 'OnRight':
								return A2(
									mdgriffith$elm_ui$Internal$Style$Descriptor,
									mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.onRight),
									_List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2(mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'OnLeft':
								return A2(
									mdgriffith$elm_ui$Internal$Style$Descriptor,
									mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.onLeft),
									_List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2(mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Within':
								return A2(
									mdgriffith$elm_ui$Internal$Style$Descriptor,
									mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.inFront),
									_List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2(mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									mdgriffith$elm_ui$Internal$Style$Descriptor,
									mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.behind),
									_List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2(mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		mdgriffith$elm_ui$Internal$Style$Class,
		mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.any),
		_List_fromArray(
			[
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.wrapped),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.noTextSelection),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2(mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2(mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.cursorPointer),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.capturePointerEvents),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.transparent),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.opaque),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap(mdgriffith$elm_ui$Internal$Style$classes.hover, mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':hover',
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap(mdgriffith$elm_ui$Internal$Style$classes.hover, mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':hover',
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap(mdgriffith$elm_ui$Internal$Style$classes.focus, mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':focus',
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap(mdgriffith$elm_ui$Internal$Style$classes.focus, mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':focus',
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap(mdgriffith$elm_ui$Internal$Style$classes.active, mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':active',
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap(mdgriffith$elm_ui$Internal$Style$classes.active, mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':active',
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.transition),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							elm$core$String$join,
							', ',
							A2(
								elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.scrollbars),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						mdgriffith$elm_ui$Internal$Style$Descriptor,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						mdgriffith$elm_ui$Internal$Style$Descriptor,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Descriptor,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.clip),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.clipX),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.clipY),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.widthContent),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.borderNone),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.borderDashed),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.borderDotted),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.borderSolid),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.inputText),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.single),
				mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.row),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								mdgriffith$elm_ui$Internal$Style$Descriptor,
								mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight,
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								mdgriffith$elm_ui$Internal$Style$Child,
								mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								mdgriffith$elm_ui$Internal$Style$Child,
								mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								mdgriffith$elm_ui$Internal$Style$Child,
								mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + (mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX + ' ~ u'),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + (mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight + (' ~ s.' + mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX)),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						mdgriffith$elm_ui$Internal$Style$Descriptor,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.column),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.widthContent),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom,
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								mdgriffith$elm_ui$Internal$Style$Child,
								mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								mdgriffith$elm_ui$Internal$Style$Child,
								mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								mdgriffith$elm_ui$Internal$Style$Child,
								mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + (mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY + ' ~ u'),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + (mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom + (' ~ s.' + mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY)),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Descriptor,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.grid),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Internal$Style$Child,
								mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 'Bottom':
									return _List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 'Right':
									return _List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 'Left':
									return _List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 'CenterX':
									return _List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.page),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.any + ':first-child'),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(
							mdgriffith$elm_ui$Internal$Style$classes.any + (mdgriffith$elm_ui$Internal$Style$selfName(
								mdgriffith$elm_ui$Internal$Style$Self(mdgriffith$elm_ui$Internal$Style$Left)) + (':first-child + .' + mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(
							mdgriffith$elm_ui$Internal$Style$classes.any + (mdgriffith$elm_ui$Internal$Style$selfName(
								mdgriffith$elm_ui$Internal$Style$Self(mdgriffith$elm_ui$Internal$Style$Right)) + (':first-child + .' + mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2(mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2(mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2(mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2(mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.paragraph),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2(
						mdgriffith$elm_ui$Internal$Style$Descriptor,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								mdgriffith$elm_ui$Internal$Style$Child,
								mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.text),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								mdgriffith$elm_ui$Internal$Style$Descriptor,
								mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.inFront),
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								mdgriffith$elm_ui$Internal$Style$Descriptor,
								mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								mdgriffith$elm_ui$Internal$Style$Descriptor,
								mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.above),
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								mdgriffith$elm_ui$Internal$Style$Descriptor,
								mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.below),
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								mdgriffith$elm_ui$Internal$Style$Descriptor,
								mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.onRight),
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								mdgriffith$elm_ui$Internal$Style$Descriptor,
								mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.onLeft),
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								mdgriffith$elm_ui$Internal$Style$Child,
								mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.text),
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2(mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									]))
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						mdgriffith$elm_ui$Internal$Style$Child,
						mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.grid),
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.textThin),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.textExtraLight),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.textLight),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.textNormalWeight),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.textMedium),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.textSemiBold),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.bold),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.textExtraBold),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.textHeavy),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.italic),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.strike),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.underline),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.underline),
					mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.strike)),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.textUnitalicized),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.textJustify),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.textJustifyAll),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.textCenter),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.textRight),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.textLeft),
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var mdgriffith$elm_ui$Internal$Style$commonValues = elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			elm$core$List$map,
			function (x) {
				return A2(
					mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2(elm$core$List$range, 0, 6)),
			A2(
			elm$core$List$map,
			function (i) {
				return A2(
					mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2(elm$core$List$range, 8, 32)),
			A2(
			elm$core$List$map,
			function (i) {
				return A2(
					mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2(elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2(mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + (mdgriffith$elm_ui$Internal$Style$classes.any + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + (mdgriffith$elm_ui$Internal$Style$classes.any + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var mdgriffith$elm_ui$Internal$Style$sliderOverrides = '\n\n/* General Input Reset */\ninput[type=range] {\n  -webkit-appearance: none; /* Hides the slider so that custom slider can be made */\n  /* width: 100%;  Specific width is required for Firefox. */\n  background: transparent; /* Otherwise white in Chrome */\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n\n/* Hide all syling for track */\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n\n/* Thumbs */\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + (mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.any) + (mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + (mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.any) + (' { flex-basis: auto !important; } ' + (mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.any) + (mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + (mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.any) + (mdgriffith$elm_ui$Internal$Style$dot(mdgriffith$elm_ui$Internal$Style$classes.container) + (' { flex-basis: auto !important; }}' + (mdgriffith$elm_ui$Internal$Style$sliderOverrides + mdgriffith$elm_ui$Internal$Style$explainer))))))))))));
var mdgriffith$elm_ui$Internal$Style$Intermediate = function (a) {
	return {$: 'Intermediate', a: a};
};
var mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return mdgriffith$elm_ui$Internal$Style$Intermediate(
			{closing: closing, others: _List_Nil, props: _List_Nil, selector: selector});
	});
var mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_n0, rulesToRender) {
		var parent = _n0.a;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 'Prop':
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								props: A2(
									elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.props)
							});
					case 'Supports':
						var _n2 = rule.a;
						var prop = _n2.a;
						var value = _n2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									elm$core$List$cons,
									mdgriffith$elm_ui$Internal$Style$Intermediate(
										{closing: '\n}', others: _List_Nil, props: props, selector: '@supports (' + (prop + (':' + (value + (') {' + parent.selector))))}),
									rendered.others)
							});
					case 'Adjacent':
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									elm$core$List$cons,
									A2(
										mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' + ' + selector), ''),
										adjRules),
									rendered.others)
							});
					case 'Child':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									elm$core$List$cons,
									A2(
										mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' > ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'Descriptor':
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									elm$core$List$cons,
									A2(
										mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.selector, descriptor),
											''),
										descriptorRules),
									rendered.others)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								others: A2(
									elm$core$List$cons,
									A2(
										mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector, ''),
										batched),
									rendered.others)
							});
				}
			});
		return mdgriffith$elm_ui$Internal$Style$Intermediate(
			A3(elm$core$List$foldr, generateIntermediates, parent, rulesToRender));
	});
var mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return elm$core$String$concat(
			A2(
				elm$core$List$map,
				function (_n3) {
					var x = _n3.a;
					var y = _n3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _n2 = rule.props;
		if (!_n2.b) {
			return '';
		} else {
			return rule.selector + ('{' + (renderValues(rule.props) + (rule.closing + '}')));
		}
	};
	var renderIntermediate = function (_n0) {
		var rule = _n0.a;
		return _Utils_ap(
			renderClass(rule),
			elm$core$String$concat(
				A2(elm$core$List$map, renderIntermediate, rule.others)));
	};
	return elm$core$String$concat(
		A2(
			elm$core$List$map,
			renderIntermediate,
			A3(
				elm$core$List$foldr,
				F2(
					function (_n1, existing) {
						var name = _n1.a;
						var styleRules = _n1.b;
						return A2(
							elm$core$List$cons,
							A2(
								mdgriffith$elm_ui$Internal$Style$renderRules,
								A2(mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	mdgriffith$elm_ui$Internal$Style$overrides,
	mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap(mdgriffith$elm_ui$Internal$Style$baseSheet, mdgriffith$elm_ui$Internal$Style$commonValues)));
var mdgriffith$elm_ui$Internal$Model$staticRoot = A3(
	elm$virtual_dom$VirtualDom$node,
	'style',
	_List_Nil,
	_List_fromArray(
		[
			elm$virtual_dom$VirtualDom$text(mdgriffith$elm_ui$Internal$Style$rules)
		]));
var elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 'Serif':
			return 'serif';
		case 'SansSerif':
			return 'sans-serif';
		case 'Monospace':
			return 'monospace';
		case 'Typeface':
			var name = font.a;
			return '\"' + (name + '\"');
		case 'ImportFont':
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.name;
			return '\"' + (name + '\"');
	}
};
var mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return name === 'smcp';
		case 'VariantOff':
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return A2(elm$core$List$any, mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.variants);
	} else {
		return false;
	}
};
var mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _n0, existing) {
		var key = _n0.a;
		var val = _n0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_n0) {
			var name = _n0.a;
			var val = _n0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			elm$core$String$join,
			'',
			A2(elm$core$List$map, renderPair, rules)) + '}'));
	});
var mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _n0) {
		var parentAdj = _n0.a;
		var textAdjustment = _n0.b;
		return _List_fromArray(
			[
				A2(mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2(mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + (mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + (modifier + (' > .' + mdgriffith$elm_ui$Internal$Style$classes.text)))))))))), textAdjustment)
			]);
	});
var mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _n0, otherFontName) {
		var full = _n0.a;
		var capital = _n0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			elm$core$String$join,
			' ',
			_Utils_ap(
				A3(mdgriffith$elm_ui$Internal$Model$fontRule, name, mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital, capital),
				A3(mdgriffith$elm_ui$Internal$Model$fontRule, name, mdgriffith$elm_ui$Internal$Style$classes.fullSize, full)));
	});
var mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + (mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (', ' + ('.' + (name + (' .' + mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + (mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + ('> .' + (mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + (mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (' > .' + mdgriffith$elm_ui$Internal$Style$classes.text)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return elm$core$Maybe$Just(
			A3(elm$core$List$foldl, elm$core$Basics$max, x, xs));
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return elm$core$Maybe$Just(
			A3(elm$core$List$foldl, elm$core$Basics$min, x, xs));
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {height: height / size, size: size, vertical: vertical};
	});
var mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.capital, adjustment.baseline, adjustment.descender, adjustment.lowercase]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		elm$core$Maybe$withDefault,
		adjustment.descender,
		elm$core$List$minimum(lines));
	var newBaseline = A2(
		elm$core$Maybe$withDefault,
		adjustment.baseline,
		elm$core$List$minimum(
			A2(
				elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		elm$core$Maybe$withDefault,
		adjustment.capital,
		elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		capital: A3(mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		full: A3(mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				elm$core$String$fromFloat(converted.height)),
				_Utils_Tuple2(
				'vertical-align',
				elm$core$String$fromFloat(converted.vertical) + 'em'),
				_Utils_Tuple2(
				'font-size',
				elm$core$String$fromFloat(converted.size) + 'em')
			]));
};
var mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 'Nothing') {
					if (face.$ === 'FontWith') {
						var _with = face.a;
						var _n2 = _with.adjustment;
						if (_n2.$ === 'Nothing') {
							return found;
						} else {
							var adjustment = _n2.a;
							return elm$core$Maybe$Just(
								_Utils_Tuple2(
									mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.full;
										}(
											mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.capital;
										}(
											mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		elm$core$Maybe$Nothing,
		typefaces);
};
var mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 'ImportFont') {
			var url = font.b;
			return elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_n2) {
		var name = _n2.a;
		var typefaces = _n2.b;
		var imports = A2(
			elm$core$String$join,
			'\n',
			A2(elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2(elm$core$List$map, elm$core$Tuple$first, rules);
	var fontAdjustments = function (_n1) {
		var name = _n1.a;
		var typefaces = _n1.b;
		var _n0 = mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_n0.$ === 'Nothing') {
			return A2(
				elm$core$String$join,
				'',
				A2(
					elm$core$List$map,
					mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _n0.a;
			return A2(
				elm$core$String$join,
				'',
				A2(
					elm$core$List$map,
					A2(mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			elm$core$String$join,
			'\n',
			A2(elm$core$List$map, fontImports, rules)),
		A2(
			elm$core$String$join,
			'\n',
			A2(elm$core$List$map, fontAdjustments, rules)));
};
var mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return '\"' + (name + '\"');
		case 'VariantOff':
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + elm$core$String$fromInt(index)));
	}
};
var mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return elm$core$Maybe$Just(
			A2(
				elm$core$String$join,
				', ',
				A2(elm$core$List$map, mdgriffith$elm_ui$Internal$Model$renderVariant, font.variants)));
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 'FontFamily') {
		var name = rule.a;
		var typefaces = rule.b;
		return elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return elm$core$Maybe$Nothing;
		case 'Moved':
			var _n1 = transform.a;
			var x = _n1.a;
			var y = _n1.b;
			var z = _n1.c;
			return elm$core$Maybe$Just(
				'translate3d(' + (elm$core$String$fromFloat(x) + ('px, ' + (elm$core$String$fromFloat(y) + ('px, ' + (elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _n2 = transform.a;
			var tx = _n2.a;
			var ty = _n2.b;
			var tz = _n2.c;
			var _n3 = transform.b;
			var sx = _n3.a;
			var sy = _n3.b;
			var sz = _n3.c;
			var _n4 = transform.c;
			var ox = _n4.a;
			var oy = _n4.b;
			var oz = _n4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + (elm$core$String$fromFloat(tx) + ('px, ' + (elm$core$String$fromFloat(ty) + ('px, ' + (elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + (elm$core$String$fromFloat(sx) + (', ' + (elm$core$String$fromFloat(sy) + (', ' + (elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + (elm$core$String$fromFloat(ox) + (', ' + (elm$core$String$fromFloat(oy) + (', ' + (elm$core$String$fromFloat(oz) + (', ' + (elm$core$String$fromFloat(angle) + 'rad)')))))));
			return elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var renderStyle = F3(
			function (maybePseudo, selector, props) {
				if (maybePseudo.$ === 'Nothing') {
					return selector + ('{' + (A3(
						elm$core$List$foldl,
						mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props) + '\n}'));
				} else {
					var pseudo = maybePseudo.a;
					switch (pseudo.$) {
						case 'Hover':
							var _n17 = options.hover;
							switch (_n17.$) {
								case 'NoHover':
									return '';
								case 'ForceHover':
									return selector + ('-hv {' + (A3(
										elm$core$List$foldl,
										mdgriffith$elm_ui$Internal$Model$renderProps(true),
										'',
										props) + '\n}'));
								default:
									return selector + ('-hv:hover {' + (A3(
										elm$core$List$foldl,
										mdgriffith$elm_ui$Internal$Model$renderProps(false),
										'',
										props) + '\n}'));
							}
						case 'Focus':
							var renderedProps = A3(
								elm$core$List$foldl,
								mdgriffith$elm_ui$Internal$Model$renderProps(false),
								'',
								props);
							return A2(
								elm$core$String$join,
								'\n',
								_List_fromArray(
									[selector + ('-fs:focus {' + (renderedProps + '\n}')), '.' + (mdgriffith$elm_ui$Internal$Style$classes.any + (':focus ~ ' + (selector + ('-fs:not(.focus)  {' + (renderedProps + '\n}'))))), '.' + (mdgriffith$elm_ui$Internal$Style$classes.any + (':focus ' + (selector + ('-fs  {' + (renderedProps + '\n}'))))), '.focusable-parent:focus ~ ' + ('.' + (mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + (selector + ('-fs {' + (renderedProps + '\n}'))))))]));
						default:
							return selector + ('-act:active {' + (A3(
								elm$core$List$foldl,
								mdgriffith$elm_ui$Internal$Model$renderProps(false),
								'',
								props) + '\n}'));
					}
				}
			});
		var renderStyleRule = F2(
			function (rule, maybePseudo) {
				switch (rule.$) {
					case 'Style':
						var selector = rule.a;
						var props = rule.b;
						return A3(renderStyle, maybePseudo, selector, props);
					case 'Shadows':
						var name = rule.a;
						var prop = rule.b;
						return A3(
							renderStyle,
							maybePseudo,
							'.' + name,
							_List_fromArray(
								[
									A2(mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
								]));
					case 'Transparency':
						var name = rule.a;
						var transparency = rule.b;
						var opacity = A2(
							elm$core$Basics$max,
							0,
							A2(elm$core$Basics$min, 1, 1 - transparency));
						return A3(
							renderStyle,
							maybePseudo,
							'.' + name,
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Internal$Model$Property,
									'opacity',
									elm$core$String$fromFloat(opacity))
								]));
					case 'FontSize':
						var i = rule.a;
						return A3(
							renderStyle,
							maybePseudo,
							'.font-size-' + elm$core$String$fromInt(i),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Internal$Model$Property,
									'font-size',
									elm$core$String$fromInt(i) + 'px')
								]));
					case 'FontFamily':
						var name = rule.a;
						var typefaces = rule.b;
						var features = A2(
							elm$core$String$join,
							', ',
							A2(elm$core$List$filterMap, mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
						var families = _List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Internal$Model$Property,
								'font-family',
								A2(
									elm$core$String$join,
									', ',
									A2(elm$core$List$map, mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
								A2(mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
								A2(
								mdgriffith$elm_ui$Internal$Model$Property,
								'font-variant',
								A2(elm$core$List$any, mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
							]);
						return A2(
							elm$core$String$join,
							' ',
							_List_fromArray(
								[
									A3(renderStyle, maybePseudo, '.' + name, families)
								]));
					case 'Single':
						var _class = rule.a;
						var prop = rule.b;
						var val = rule.c;
						return A3(
							renderStyle,
							maybePseudo,
							'.' + _class,
							_List_fromArray(
								[
									A2(mdgriffith$elm_ui$Internal$Model$Property, prop, val)
								]));
					case 'Colored':
						var _class = rule.a;
						var prop = rule.b;
						var color = rule.c;
						return A3(
							renderStyle,
							maybePseudo,
							'.' + _class,
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Internal$Model$Property,
									prop,
									mdgriffith$elm_ui$Internal$Model$formatColor(color))
								]));
					case 'SpacingStyle':
						var cls = rule.a;
						var x = rule.b;
						var y = rule.c;
						var yPx = elm$core$String$fromInt(y) + 'px';
						var xPx = elm$core$String$fromInt(x) + 'px';
						var single = '.' + mdgriffith$elm_ui$Internal$Style$classes.single;
						var row = '.' + mdgriffith$elm_ui$Internal$Style$classes.row;
						var wrappedRow = '.' + (mdgriffith$elm_ui$Internal$Style$classes.wrapped + row);
						var right = '.' + mdgriffith$elm_ui$Internal$Style$classes.alignRight;
						var paragraph = '.' + mdgriffith$elm_ui$Internal$Style$classes.paragraph;
						var page = '.' + mdgriffith$elm_ui$Internal$Style$classes.page;
						var left = '.' + mdgriffith$elm_ui$Internal$Style$classes.alignLeft;
						var halfY = elm$core$String$fromFloat(y / 2) + 'px';
						var halfX = elm$core$String$fromFloat(x / 2) + 'px';
						var column = '.' + mdgriffith$elm_ui$Internal$Style$classes.column;
						var _class = '.' + cls;
						var any = '.' + mdgriffith$elm_ui$Internal$Style$classes.any;
						return elm$core$String$concat(
							_List_fromArray(
								[
									A3(
									renderStyle,
									maybePseudo,
									_class + (row + (' > ' + (any + (' + ' + any)))),
									_List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
										])),
									A3(
									renderStyle,
									maybePseudo,
									_class + (wrappedRow + (' > ' + any)),
									_List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
										])),
									A3(
									renderStyle,
									maybePseudo,
									_class + (column + (' > ' + (any + (' + ' + any)))),
									_List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
										])),
									A3(
									renderStyle,
									maybePseudo,
									_class + (page + (' > ' + (any + (' + ' + any)))),
									_List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
										])),
									A3(
									renderStyle,
									maybePseudo,
									_class + (page + (' > ' + left)),
									_List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
										])),
									A3(
									renderStyle,
									maybePseudo,
									_class + (page + (' > ' + right)),
									_List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
										])),
									A3(
									renderStyle,
									maybePseudo,
									_Utils_ap(_class, paragraph),
									_List_fromArray(
										[
											A2(
											mdgriffith$elm_ui$Internal$Model$Property,
											'line-height',
											'calc(1em + ' + (elm$core$String$fromInt(y) + 'px)'))
										])),
									A3(
									renderStyle,
									maybePseudo,
									'textarea' + _class,
									_List_fromArray(
										[
											A2(
											mdgriffith$elm_ui$Internal$Model$Property,
											'line-height',
											'calc(1em + ' + (elm$core$String$fromInt(y) + 'px)'))
										])),
									A3(
									renderStyle,
									maybePseudo,
									_class + (paragraph + (' > ' + left)),
									_List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
										])),
									A3(
									renderStyle,
									maybePseudo,
									_class + (paragraph + (' > ' + right)),
									_List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
										])),
									A3(
									renderStyle,
									maybePseudo,
									_class + (paragraph + '::after'),
									_List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
											A2(mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
											A2(mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
											A2(mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
											A2(
											mdgriffith$elm_ui$Internal$Model$Property,
											'margin-top',
											elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
										])),
									A3(
									renderStyle,
									maybePseudo,
									_class + (paragraph + '::before'),
									_List_fromArray(
										[
											A2(mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
											A2(mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
											A2(mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
											A2(mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
											A2(
											mdgriffith$elm_ui$Internal$Model$Property,
											'margin-bottom',
											elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
										]))
								]));
					case 'PaddingStyle':
						var cls = rule.a;
						var top = rule.b;
						var right = rule.c;
						var bottom = rule.d;
						var left = rule.e;
						var _class = '.' + cls;
						return A3(
							renderStyle,
							maybePseudo,
							_class,
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Internal$Model$Property,
									'padding',
									elm$core$String$fromInt(top) + ('px ' + (elm$core$String$fromInt(right) + ('px ' + (elm$core$String$fromInt(bottom) + ('px ' + (elm$core$String$fromInt(left) + 'px')))))))
								]));
					case 'BorderWidth':
						var cls = rule.a;
						var top = rule.b;
						var right = rule.c;
						var bottom = rule.d;
						var left = rule.e;
						var _class = '.' + cls;
						return A3(
							renderStyle,
							maybePseudo,
							_class,
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Internal$Model$Property,
									'border-width',
									elm$core$String$fromInt(top) + ('px ' + (elm$core$String$fromInt(right) + ('px ' + (elm$core$String$fromInt(bottom) + ('px ' + (elm$core$String$fromInt(left) + 'px')))))))
								]));
					case 'GridTemplateStyle':
						var template = rule.a;
						var toGridLengthHelper = F3(
							function (minimum, maximum, x) {
								toGridLengthHelper:
								while (true) {
									switch (x.$) {
										case 'Px':
											var px = x.a;
											return elm$core$String$fromInt(px) + 'px';
										case 'Content':
											var _n2 = _Utils_Tuple2(minimum, maximum);
											if (_n2.a.$ === 'Nothing') {
												if (_n2.b.$ === 'Nothing') {
													var _n3 = _n2.a;
													var _n4 = _n2.b;
													return 'max-content';
												} else {
													var _n6 = _n2.a;
													var maxSize = _n2.b.a;
													return 'minmax(max-content, ' + (elm$core$String$fromInt(maxSize) + 'px)');
												}
											} else {
												if (_n2.b.$ === 'Nothing') {
													var minSize = _n2.a.a;
													var _n5 = _n2.b;
													return 'minmax(' + (elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
												} else {
													var minSize = _n2.a.a;
													var maxSize = _n2.b.a;
													return 'minmax(' + (elm$core$String$fromInt(minSize) + ('px, ' + (elm$core$String$fromInt(maxSize) + 'px)')));
												}
											}
										case 'Fill':
											var i = x.a;
											var _n7 = _Utils_Tuple2(minimum, maximum);
											if (_n7.a.$ === 'Nothing') {
												if (_n7.b.$ === 'Nothing') {
													var _n8 = _n7.a;
													var _n9 = _n7.b;
													return elm$core$String$fromInt(i) + 'fr';
												} else {
													var _n11 = _n7.a;
													var maxSize = _n7.b.a;
													return 'minmax(max-content, ' + (elm$core$String$fromInt(maxSize) + 'px)');
												}
											} else {
												if (_n7.b.$ === 'Nothing') {
													var minSize = _n7.a.a;
													var _n10 = _n7.b;
													return 'minmax(' + (elm$core$String$fromInt(minSize) + ('px, ' + (elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
												} else {
													var minSize = _n7.a.a;
													var maxSize = _n7.b.a;
													return 'minmax(' + (elm$core$String$fromInt(minSize) + ('px, ' + (elm$core$String$fromInt(maxSize) + 'px)')));
												}
											}
										case 'Min':
											var m = x.a;
											var len = x.b;
											var $temp$minimum = elm$core$Maybe$Just(m),
												$temp$maximum = maximum,
												$temp$x = len;
											minimum = $temp$minimum;
											maximum = $temp$maximum;
											x = $temp$x;
											continue toGridLengthHelper;
										default:
											var m = x.a;
											var len = x.b;
											var $temp$minimum = minimum,
												$temp$maximum = elm$core$Maybe$Just(m),
												$temp$x = len;
											minimum = $temp$minimum;
											maximum = $temp$maximum;
											x = $temp$x;
											continue toGridLengthHelper;
									}
								}
							});
						var toGridLength = function (x) {
							return A3(toGridLengthHelper, elm$core$Maybe$Nothing, elm$core$Maybe$Nothing, x);
						};
						var xSpacing = toGridLength(template.spacing.a);
						var ySpacing = toGridLength(template.spacing.b);
						var rows = function (x) {
							return 'grid-template-rows: ' + (x + ';');
						}(
							A2(
								elm$core$String$join,
								' ',
								A2(elm$core$List$map, toGridLength, template.rows)));
						var msRows = function (x) {
							return '-ms-grid-rows: ' + (x + ';');
						}(
							A2(
								elm$core$String$join,
								ySpacing,
								A2(elm$core$List$map, toGridLength, template.columns)));
						var msColumns = function (x) {
							return '-ms-grid-columns: ' + (x + ';');
						}(
							A2(
								elm$core$String$join,
								ySpacing,
								A2(elm$core$List$map, toGridLength, template.columns)));
						var gapY = 'grid-row-gap:' + (toGridLength(template.spacing.b) + ';');
						var gapX = 'grid-column-gap:' + (toGridLength(template.spacing.a) + ';');
						var columns = function (x) {
							return 'grid-template-columns: ' + (x + ';');
						}(
							A2(
								elm$core$String$join,
								' ',
								A2(elm$core$List$map, toGridLength, template.columns)));
						var _class = '.grid-rows-' + (A2(
							elm$core$String$join,
							'-',
							A2(elm$core$List$map, mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
							elm$core$String$join,
							'-',
							A2(elm$core$List$map, mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + (mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
						var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
						var supports = '@supports (display:grid) {' + (modernGrid + '}');
						var base = _class + ('{' + (msColumns + (msRows + '}')));
						return _Utils_ap(base, supports);
					case 'GridPosition':
						var position = rule.a;
						var msPosition = A2(
							elm$core$String$join,
							' ',
							_List_fromArray(
								[
									'-ms-grid-row: ' + (elm$core$String$fromInt(position.row) + ';'),
									'-ms-grid-row-span: ' + (elm$core$String$fromInt(position.height) + ';'),
									'-ms-grid-column: ' + (elm$core$String$fromInt(position.col) + ';'),
									'-ms-grid-column-span: ' + (elm$core$String$fromInt(position.width) + ';')
								]));
						var modernPosition = A2(
							elm$core$String$join,
							' ',
							_List_fromArray(
								[
									'grid-row: ' + (elm$core$String$fromInt(position.row) + (' / ' + (elm$core$String$fromInt(position.row + position.height) + ';'))),
									'grid-column: ' + (elm$core$String$fromInt(position.col) + (' / ' + (elm$core$String$fromInt(position.col + position.width) + ';')))
								]));
						var _class = '.grid-pos-' + (elm$core$String$fromInt(position.row) + ('-' + (elm$core$String$fromInt(position.col) + ('-' + (elm$core$String$fromInt(position.width) + ('-' + elm$core$String$fromInt(position.height)))))));
						var modernGrid = _class + ('{' + (modernPosition + '}'));
						var supports = '@supports (display:grid) {' + (modernGrid + '}');
						var base = _class + ('{' + (msPosition + '}'));
						return _Utils_ap(base, supports);
					case 'PseudoSelector':
						var _class = rule.a;
						var styles = rule.b;
						var renderPseudoRule = function (style) {
							return A2(
								renderStyleRule,
								style,
								elm$core$Maybe$Just(_class));
						};
						return A2(
							elm$core$String$join,
							' ',
							A2(elm$core$List$map, renderPseudoRule, styles));
					default:
						var transform = rule.a;
						var val = mdgriffith$elm_ui$Internal$Model$transformValue(transform);
						var _class = mdgriffith$elm_ui$Internal$Model$transformClass(transform);
						var _n12 = _Utils_Tuple2(_class, val);
						if ((_n12.a.$ === 'Just') && (_n12.b.$ === 'Just')) {
							var cls = _n12.a.a;
							var v = _n12.b.a;
							return A3(
								renderStyle,
								maybePseudo,
								'.' + cls,
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
									]));
						} else {
							return '';
						}
				}
			});
		var combine = F2(
			function (style, rendered) {
				return {
					rules: _Utils_ap(
						rendered.rules,
						A2(renderStyleRule, style, elm$core$Maybe$Nothing)),
					topLevel: function () {
						var _n14 = mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_n14.$ === 'Nothing') {
							return rendered.topLevel;
						} else {
							var topLevel = _n14.a;
							return A2(elm$core$List$cons, topLevel, rendered.topLevel);
						}
					}()
				};
			});
		var _n13 = A3(
			elm$core$List$foldl,
			combine,
			{rules: '', topLevel: _List_Nil},
			stylesheet);
		var topLevel = _n13.topLevel;
		var rules = _n13.rules;
		return _Utils_ap(
			mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			rules);
	});
var mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		return A3(
			elm$virtual_dom$VirtualDom$node,
			'style',
			_List_Nil,
			_List_fromArray(
				[
					elm$virtual_dom$VirtualDom$text(
					A2(mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
				]));
	});
var mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		return _static ? A2(
			elm$core$List$cons,
			_Utils_Tuple2('static-stylesheet', mdgriffith$elm_ui$Internal$Model$staticRoot),
			A2(
				elm$core$List$cons,
				_Utils_Tuple2(
					'dynamic-stylesheet',
					A2(
						mdgriffith$elm_ui$Internal$Model$toStyleSheet,
						opts,
						A3(
							elm$core$List$foldl,
							mdgriffith$elm_ui$Internal$Model$reduceStyles,
							_Utils_Tuple2(
								elm$core$Set$empty,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)
									])),
							styles).b)),
				children)) : A2(
			elm$core$List$cons,
			_Utils_Tuple2(
				'dynamic-stylesheet',
				A2(
					mdgriffith$elm_ui$Internal$Model$toStyleSheet,
					opts,
					A3(
						elm$core$List$foldl,
						mdgriffith$elm_ui$Internal$Model$reduceStyles,
						_Utils_Tuple2(
							elm$core$Set$empty,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)
								])),
						styles).b)),
			children);
	});
var mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		return _static ? A2(
			elm$core$List$cons,
			mdgriffith$elm_ui$Internal$Model$staticRoot,
			A2(
				elm$core$List$cons,
				A2(
					mdgriffith$elm_ui$Internal$Model$toStyleSheet,
					opts,
					A3(
						elm$core$List$foldl,
						mdgriffith$elm_ui$Internal$Model$reduceStyles,
						_Utils_Tuple2(
							elm$core$Set$empty,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)
								])),
						styles).b),
				children)) : A2(
			elm$core$List$cons,
			A2(
				mdgriffith$elm_ui$Internal$Model$toStyleSheet,
				opts,
				A3(
					elm$core$List$foldl,
					mdgriffith$elm_ui$Internal$Model$reduceStyles,
					_Utils_Tuple2(
						elm$core$Set$empty,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)
							])),
					styles).b),
			children);
	});
var mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 'Keyed') {
					var keyed = children.a;
					return A3(
						elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return keyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4(mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4(mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return elm$html$Html$div;
								case 'p':
									return elm$html$Html$p;
								default:
									return elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return unkeyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4(mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4(mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 'Generic':
					return A2(createNode, 'div', attributes);
				case 'NodeName':
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										elm$html$Html$Attributes$class(mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + mdgriffith$elm_ui$Internal$Style$classes.single))
									]))
							]));
			}
		}();
		switch (parentContext.$) {
			case 'AsRow':
				return (A2(mdgriffith$elm_ui$Internal$Flag$present, mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2(mdgriffith$elm_ui$Internal$Flag$present, mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2(mdgriffith$elm_ui$Internal$Flag$present, mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					elm$html$Html$u,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class(
							A2(
								elm$core$String$join,
								' ',
								_List_fromArray(
									[mdgriffith$elm_ui$Internal$Style$classes.any, mdgriffith$elm_ui$Internal$Style$classes.single, mdgriffith$elm_ui$Internal$Style$classes.container, mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight])))
						]),
					_List_fromArray(
						[html])) : (A2(mdgriffith$elm_ui$Internal$Flag$present, mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					elm$html$Html$s,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class(
							A2(
								elm$core$String$join,
								' ',
								_List_fromArray(
									[mdgriffith$elm_ui$Internal$Style$classes.any, mdgriffith$elm_ui$Internal$Style$classes.single, mdgriffith$elm_ui$Internal$Style$classes.container, mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX])))
						]),
					_List_fromArray(
						[html])) : html));
			case 'AsColumn':
				return (A2(mdgriffith$elm_ui$Internal$Flag$present, mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2(mdgriffith$elm_ui$Internal$Flag$present, mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2(mdgriffith$elm_ui$Internal$Flag$present, mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					elm$html$Html$s,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class(
							A2(
								elm$core$String$join,
								' ',
								_List_fromArray(
									[mdgriffith$elm_ui$Internal$Style$classes.any, mdgriffith$elm_ui$Internal$Style$classes.single, mdgriffith$elm_ui$Internal$Style$classes.container, mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY])))
						]),
					_List_fromArray(
						[html])) : (A2(mdgriffith$elm_ui$Internal$Flag$present, mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					elm$html$Html$u,
					_List_fromArray(
						[
							elm$html$Html$Attributes$class(
							A2(
								elm$core$String$join,
								' ',
								_List_fromArray(
									[mdgriffith$elm_ui$Internal$Style$classes.any, mdgriffith$elm_ui$Internal$Style$classes.single, mdgriffith$elm_ui$Internal$Style$classes.container, mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		elm$html$Html$div,
		_List_fromArray(
			[
				elm$html$Html$Attributes$class(
				A2(
					elm$core$String$join,
					' ',
					_List_fromArray(
						[mdgriffith$elm_ui$Internal$Style$classes.any, mdgriffith$elm_ui$Internal$Style$classes.text, mdgriffith$elm_ui$Internal$Style$classes.widthContent, mdgriffith$elm_ui$Internal$Style$classes.heightContent])))
			]),
		_List_fromArray(
			[
				elm$html$Html$text(str)
			]));
};
var mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A3(
		elm$virtual_dom$VirtualDom$node,
		'div',
		_List_fromArray(
			[
				elm$html$Html$Attributes$class(
				A2(
					elm$core$String$join,
					' ',
					_List_fromArray(
						[mdgriffith$elm_ui$Internal$Style$classes.any, mdgriffith$elm_ui$Internal$Style$classes.text, mdgriffith$elm_ui$Internal$Style$classes.widthFill, mdgriffith$elm_ui$Internal$Style$classes.heightFill])))
			]),
		_List_fromArray(
			[
				elm$virtual_dom$VirtualDom$text(str)
			]));
};
var mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_n8, _n9) {
				var key = _n8.a;
				var child = _n8.b;
				var htmls = _n9.a;
				var existingStyles = _n9.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, mdgriffith$elm_ui$Internal$Model$asEl) ? mdgriffith$elm_ui$Internal$Model$textElementFill(str) : mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _n6) {
				var htmls = _n6.a;
				var existingStyles = _n6.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								elm$core$List$cons,
								A2(styled.html, mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								elm$core$List$cons,
								A2(styled.html, mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								elm$core$List$cons,
								_Utils_eq(context, mdgriffith$elm_ui$Internal$Model$asEl) ? mdgriffith$elm_ui$Internal$Model$textElementFill(str) : mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 'Keyed') {
			var keyedChildren = children.a;
			var _n1 = A3(
				elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _n1.a;
			var styles = _n1.b;
			var newStyles = elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						mdgriffith$elm_ui$Internal$Model$Keyed(
							A3(mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children)),
						mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							mdgriffith$elm_ui$Internal$Model$Keyed(
								A3(mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children))),
						styles: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _n3 = A3(
				elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _n3.a;
			var styles = _n3.b;
			var newStyles = elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2(mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children)),
						mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2(mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children))),
						styles: allStyles
					});
			}
		}
	});
var elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _n0) {
		var one = _n0.a;
		var two = _n0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return A2(mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2(mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var mdgriffith$elm_ui$Internal$Flag$height = mdgriffith$elm_ui$Internal$Flag$flag(7);
var mdgriffith$elm_ui$Internal$Flag$heightContent = mdgriffith$elm_ui$Internal$Flag$flag(36);
var mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_n0, _n1) {
		var one = _n0.a;
		var two = _n0.b;
		var three = _n1.a;
		var four = _n1.b;
		return A2(mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var mdgriffith$elm_ui$Internal$Flag$width = mdgriffith$elm_ui$Internal$Flag$flag(6);
var mdgriffith$elm_ui$Internal$Flag$widthContent = mdgriffith$elm_ui$Internal$Flag$flag(38);
var mdgriffith$elm_ui$Internal$Flag$xAlign = mdgriffith$elm_ui$Internal$Flag$flag(30);
var mdgriffith$elm_ui$Internal$Flag$yAlign = mdgriffith$elm_ui$Internal$Flag$flag(29);
var mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 'Embedded', a: a, b: b};
	});
var mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 'NodeName', a: a};
};
var mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 'Single', a: a, b: b, c: c};
	});
var mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 'Transform', a: a};
};
var mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 'ChildrenBehind', a: a};
};
var mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 'ChildrenBehindAndInFront', a: a, b: b};
	});
var mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 'ChildrenInFront', a: a};
};
var mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			elm$html$Html$div,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class(
					function () {
						switch (location.$) {
							case 'Above':
								return A2(
									elm$core$String$join,
									' ',
									_List_fromArray(
										[mdgriffith$elm_ui$Internal$Style$classes.nearby, mdgriffith$elm_ui$Internal$Style$classes.single, mdgriffith$elm_ui$Internal$Style$classes.above]));
							case 'Below':
								return A2(
									elm$core$String$join,
									' ',
									_List_fromArray(
										[mdgriffith$elm_ui$Internal$Style$classes.nearby, mdgriffith$elm_ui$Internal$Style$classes.single, mdgriffith$elm_ui$Internal$Style$classes.below]));
							case 'OnRight':
								return A2(
									elm$core$String$join,
									' ',
									_List_fromArray(
										[mdgriffith$elm_ui$Internal$Style$classes.nearby, mdgriffith$elm_ui$Internal$Style$classes.single, mdgriffith$elm_ui$Internal$Style$classes.onRight]));
							case 'OnLeft':
								return A2(
									elm$core$String$join,
									' ',
									_List_fromArray(
										[mdgriffith$elm_ui$Internal$Style$classes.nearby, mdgriffith$elm_ui$Internal$Style$classes.single, mdgriffith$elm_ui$Internal$Style$classes.onLeft]));
							case 'InFront':
								return A2(
									elm$core$String$join,
									' ',
									_List_fromArray(
										[mdgriffith$elm_ui$Internal$Style$classes.nearby, mdgriffith$elm_ui$Internal$Style$classes.single, mdgriffith$elm_ui$Internal$Style$classes.inFront]));
							default:
								return A2(
									elm$core$String$join,
									' ',
									_List_fromArray(
										[mdgriffith$elm_ui$Internal$Style$classes.nearby, mdgriffith$elm_ui$Internal$Style$classes.single, mdgriffith$elm_ui$Internal$Style$classes.behind]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 'Empty':
							return elm$virtual_dom$VirtualDom$text('');
						case 'Text':
							var str = elem.a;
							return mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 'Unstyled':
							var html = elem.a;
							return html(mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.html, mdgriffith$elm_ui$Internal$Model$NoStyleSheet, mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2(mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 'NoNearbyChildren':
				if (location.$ === 'Behind') {
					return mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenBehind':
				var existingBehind = existing.a;
				if (location.$ === 'Behind') {
					return mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2(elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenInFront':
				var existingInFront = existing.a;
				if (location.$ === 'Behind') {
					return A2(
						mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2(elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location.$ === 'Behind') {
					return A2(
						mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2(elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2(elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 'Generic':
				return mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 'NodeName':
				var name = old.a;
				return A2(mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2(mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align.$) {
		case 'Left':
			return mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'Right':
			return mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		default:
			return mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
	}
};
var mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align.$) {
		case 'Top':
			return mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			return mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		default:
			return mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 'FullTransform', a: a, b: b, c: c, d: d};
	});
var mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 'Moved', a: a};
};
var mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 'Untransformed':
				switch (component.$) {
					case 'MoveX':
						var x = component.a;
						return mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 'MoveY':
						var y = component.a;
						return mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 'MoveZ':
						var z = component.a;
						return mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 'MoveXYZ':
						var xyz = component.a;
						return mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 'Moved':
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 'MoveY':
						var newY = component.a;
						return mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 'MoveZ':
						var newZ = component.a;
						return mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 'MoveXYZ':
						var xyz = component.a;
						return mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return A4(
							mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 'MoveY':
						var newY = component.a;
						return A4(
							mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 'MoveZ':
						var newZ = component.a;
						return A4(
							mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 'MoveXYZ':
						var newMove = component.a;
						return A4(mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 'Rotate':
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4(mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4(mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 'Px':
			var px = h.a;
			var val = elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				mdgriffith$elm_ui$Internal$Flag$none,
				name,
				_List_fromArray(
					[
						A3(mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$heightContent, mdgriffith$elm_ui$Internal$Flag$none),
				mdgriffith$elm_ui$Internal$Style$classes.heightContent,
				_List_Nil);
		case 'Fill':
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$heightFill, mdgriffith$elm_ui$Internal$Flag$none),
				mdgriffith$elm_ui$Internal$Style$classes.heightFill,
				_List_Nil) : _Utils_Tuple3(
				A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$heightFill, mdgriffith$elm_ui$Internal$Flag$none),
				mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						mdgriffith$elm_ui$Internal$Model$Single,
						mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + (mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + elm$core$String$fromInt(portion))))),
						'flex-grow',
						elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + elm$core$String$fromInt(minSize);
			var style = A3(
				mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				elm$core$String$fromInt(minSize) + 'px');
			var _n1 = mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _n1.a;
			var newAttrs = _n1.b;
			var newStyle = _n1.c;
			return _Utils_Tuple3(
				A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2(elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + elm$core$String$fromInt(maxSize);
			var style = A3(
				mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				elm$core$String$fromInt(maxSize) + 'px');
			var _n2 = mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _n2.a;
			var newAttrs = _n2.b;
			var newStyle = _n2.c;
			return _Utils_Tuple3(
				A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2(elm$core$List$cons, style, newStyle));
	}
};
var mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 'Px':
			var px = w.a;
			return _Utils_Tuple3(
				mdgriffith$elm_ui$Internal$Flag$none,
				mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + elm$core$String$fromInt(px),
						'width',
						elm$core$String$fromInt(px) + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$widthContent, mdgriffith$elm_ui$Internal$Flag$none),
				mdgriffith$elm_ui$Internal$Style$classes.widthContent,
				_List_Nil);
		case 'Fill':
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$widthFill, mdgriffith$elm_ui$Internal$Flag$none),
				mdgriffith$elm_ui$Internal$Style$classes.widthFill,
				_List_Nil) : _Utils_Tuple3(
				A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$widthFill, mdgriffith$elm_ui$Internal$Flag$none),
				mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						mdgriffith$elm_ui$Internal$Model$Single,
						mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + (mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + elm$core$String$fromInt(portion))))),
						'flex-grow',
						elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + elm$core$String$fromInt(minSize);
			var style = A3(
				mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				elm$core$String$fromInt(minSize) + 'px');
			var _n1 = mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _n1.a;
			var newAttrs = _n1.b;
			var newStyle = _n1.c;
			return _Utils_Tuple3(
				A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2(elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + elm$core$String$fromInt(maxSize);
			var style = A3(
				mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				elm$core$String$fromInt(maxSize) + 'px');
			var _n2 = mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _n2.a;
			var newAttrs = _n2.b;
			var newStyle = _n2.c;
			return _Utils_Tuple3(
				A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2(elm$core$List$cons, style, newStyle));
	}
};
var mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 'Single') {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 'FontSize':
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 'PaddingStyle':
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _n1 = mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_n1.$ === 'Nothing') {
					return {
						attributes: A2(
							elm$core$List$cons,
							elm$html$Html$Attributes$class(classes),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: styles
					};
				} else {
					var _class = _n1.a;
					return {
						attributes: A2(
							elm$core$List$cons,
							elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: A2(
							elm$core$List$cons,
							mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 'NoAttribute':
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Class':
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2(mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2(mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 'Attr':
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2(elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'StyleClass':
						var flag = attribute.a;
						var style = attribute.b;
						if (A2(mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2(mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2(mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2(mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2(elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 'TransformComponent':
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2(mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2(mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Width':
						var width = attribute.a;
						if (A2(mdgriffith$elm_ui$Internal$Flag$present, mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 'Px':
									var px = width.a;
									var $temp$classes = (mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										elm$core$List$cons,
										A3(
											mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + elm$core$String$fromInt(px),
											'width',
											elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = classes + (' ' + mdgriffith$elm_ui$Internal$Style$classes.widthContent),
										$temp$node = node,
										$temp$has = A2(
										mdgriffith$elm_ui$Internal$Flag$add,
										mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											$temp$node = node,
											$temp$has = A2(
											mdgriffith$elm_ui$Internal$Flag$add,
											mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + (mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											mdgriffith$elm_ui$Internal$Flag$add,
											mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											elm$core$List$cons,
											A3(
												mdgriffith$elm_ui$Internal$Model$Single,
												mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + (mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + elm$core$String$fromInt(portion))))),
												'flex-grow',
												elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _n4 = mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _n4.a;
									var newClass = _n4.b;
									var newStyles = _n4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(mdgriffith$elm_ui$Internal$Flag$merge, addToFlags, has),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Height':
						var height = attribute.a;
						if (A2(mdgriffith$elm_ui$Internal$Flag$present, mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 'Px':
									var px = height.a;
									var val = elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = name + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										elm$core$List$cons,
										A3(mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = mdgriffith$elm_ui$Internal$Style$classes.heightContent + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										mdgriffith$elm_ui$Internal$Flag$add,
										mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = mdgriffith$elm_ui$Internal$Style$classes.heightFill + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											mdgriffith$elm_ui$Internal$Flag$add,
											mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + (mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											mdgriffith$elm_ui$Internal$Flag$add,
											mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											elm$core$List$cons,
											A3(
												mdgriffith$elm_ui$Internal$Model$Single,
												mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + (mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + elm$core$String$fromInt(portion))))),
												'flex-grow',
												elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _n6 = mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _n6.a;
									var newClass = _n6.b;
									var newStyles = _n6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(mdgriffith$elm_ui$Internal$Flag$merge, addToFlags, has),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Describe':
						var description = attribute.a;
						switch (description.$) {
							case 'Main':
								var $temp$classes = classes,
									$temp$node = A2(mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Navigation':
								var $temp$classes = classes,
									$temp$node = A2(mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'ContentInfo':
								var $temp$classes = classes,
									$temp$node = A2(mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Complementary':
								var $temp$classes = classes,
									$temp$node = A2(mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Heading':
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2(mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2(mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 'Paragraph':
								var newNode = function () {
									switch (node.$) {
										case 'Generic':
											return mdgriffith$elm_ui$Internal$Model$NodeName('p');
										case 'NodeName':
											var name = node.a;
											return mdgriffith$elm_ui$Internal$Model$NodeName(name);
										default:
											var x = node.a;
											var y = node.b;
											return A2(mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
									}
								}();
								var $temp$classes = classes,
									$temp$node = newNode,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Button':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									elm$core$List$cons,
									A2(elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Label':
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									elm$core$List$cons,
									A2(elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'LivePolite':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									elm$core$List$cons,
									A2(elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									elm$core$List$cons,
									A2(elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 'Nearby':
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 'Empty':
									return styles;
								case 'Text':
									var str = elem.a;
									return styles;
								case 'Unstyled':
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.styles);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3(mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'AlignX':
						var x = attribute.a;
						if (A2(mdgriffith$elm_ui$Internal$Flag$present, mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x.$) {
									case 'CenterX':
										return A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 'Right':
										return A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2(mdgriffith$elm_ui$Internal$Flag$present, mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y.$) {
									case 'CenterY':
										return A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 'Bottom':
										return A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2(mdgriffith$elm_ui$Internal$Flag$add, mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 'Untransformed'};
var mdgriffith$elm_ui$Internal$Model$untransformed = mdgriffith$elm_ui$Internal$Model$Untransformed;
var mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				mdgriffith$elm_ui$Internal$Flag$none,
				mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				elm$core$List$reverse(attributes)));
	});
var mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return mdgriffith$elm_ui$Internal$Model$Attr(
		elm$html$Html$Attributes$class(cls));
};
var mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			mdgriffith$elm_ui$Internal$Model$element,
			mdgriffith$elm_ui$Internal$Model$asColumn,
			mdgriffith$elm_ui$Internal$Model$div,
			A2(
				elm$core$List$cons,
				mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.contentTop + (' ' + mdgriffith$elm_ui$Internal$Style$classes.contentLeft)),
				A2(
					elm$core$List$cons,
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$shrink),
					A2(
						elm$core$List$cons,
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$shrink),
						attrs))),
			mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			mdgriffith$elm_ui$Internal$Model$element,
			mdgriffith$elm_ui$Internal$Model$asEl,
			mdgriffith$elm_ui$Internal$Model$div,
			A2(
				elm$core$List$cons,
				mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$shrink),
				A2(
					elm$core$List$cons,
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$shrink),
					attrs)),
			mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var mdgriffith$elm_ui$Internal$Model$Max = F2(
	function (a, b) {
		return {$: 'Max', a: a, b: b};
	});
var mdgriffith$elm_ui$Element$maximum = F2(
	function (i, l) {
		return A2(mdgriffith$elm_ui$Internal$Model$Max, i, l);
	});
var mdgriffith$elm_ui$Internal$Model$Empty = {$: 'Empty'};
var mdgriffith$elm_ui$Element$none = mdgriffith$elm_ui$Internal$Model$Empty;
var mdgriffith$elm_ui$Internal$Model$paddingName = F4(
	function (top, right, bottom, left) {
		return 'pad-' + (elm$core$String$fromInt(top) + ('-' + (elm$core$String$fromInt(right) + ('-' + (elm$core$String$fromInt(bottom) + ('-' + elm$core$String$fromInt(left)))))));
	});
var mdgriffith$elm_ui$Element$paddingEach = function (_n0) {
	var top = _n0.top;
	var right = _n0.right;
	var bottom = _n0.bottom;
	var left = _n0.left;
	return (_Utils_eq(top, right) && (_Utils_eq(top, bottom) && _Utils_eq(top, left))) ? A2(
		mdgriffith$elm_ui$Internal$Model$StyleClass,
		mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + elm$core$String$fromInt(top),
			top,
			top,
			top,
			top)) : A2(
		mdgriffith$elm_ui$Internal$Model$StyleClass,
		mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			A4(mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left),
			top,
			right,
			bottom,
			left));
};
var mdgriffith$elm_ui$Internal$Flag$spacing = mdgriffith$elm_ui$Internal$Flag$flag(3);
var mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 'SpacingStyle', a: a, b: b, c: c};
	});
var mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + (elm$core$String$fromInt(x) + ('-' + elm$core$String$fromInt(y)));
	});
var mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		mdgriffith$elm_ui$Internal$Model$StyleClass,
		mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2(mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 'Describe', a: a};
};
var mdgriffith$elm_ui$Internal$Model$Paragraph = {$: 'Paragraph'};
var mdgriffith$elm_ui$Element$paragraph = F2(
	function (attrs, children) {
		return A4(
			mdgriffith$elm_ui$Internal$Model$element,
			mdgriffith$elm_ui$Internal$Model$asParagraph,
			mdgriffith$elm_ui$Internal$Model$div,
			A2(
				elm$core$List$cons,
				mdgriffith$elm_ui$Internal$Model$Describe(mdgriffith$elm_ui$Internal$Model$Paragraph),
				A2(
					elm$core$List$cons,
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					A2(
						elm$core$List$cons,
						mdgriffith$elm_ui$Element$spacing(5),
						attrs))),
			mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var mdgriffith$elm_ui$Internal$Model$AsRow = {$: 'AsRow'};
var mdgriffith$elm_ui$Internal$Model$asRow = mdgriffith$elm_ui$Internal$Model$AsRow;
var mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			mdgriffith$elm_ui$Internal$Model$element,
			mdgriffith$elm_ui$Internal$Model$asRow,
			mdgriffith$elm_ui$Internal$Model$div,
			A2(
				elm$core$List$cons,
				mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + mdgriffith$elm_ui$Internal$Style$classes.contentCenterY)),
				A2(
					elm$core$List$cons,
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$shrink),
					A2(
						elm$core$List$cons,
						mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$shrink),
						attrs))),
			mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 'Text', a: a};
};
var mdgriffith$elm_ui$Element$text = function (content) {
	return mdgriffith$elm_ui$Internal$Model$Text(content);
};
var mdgriffith$elm_ui$Internal$Flag$fontColor = mdgriffith$elm_ui$Internal$Flag$flag(14);
var mdgriffith$elm_ui$Element$Font$color = function (fontColor) {
	return A2(
		mdgriffith$elm_ui$Internal$Model$StyleClass,
		mdgriffith$elm_ui$Internal$Flag$fontColor,
		A3(
			mdgriffith$elm_ui$Internal$Model$Colored,
			'fc-' + mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor),
			'color',
			fontColor));
};
var mdgriffith$elm_ui$Internal$Flag$fontSize = mdgriffith$elm_ui$Internal$Flag$flag(4);
var mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 'FontSize', a: a};
};
var mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		mdgriffith$elm_ui$Internal$Model$StyleClass,
		mdgriffith$elm_ui$Internal$Flag$fontSize,
		mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var author$project$Internals$CommonHelpers$logsView = F2(
	function (logs, zone) {
		var formatTime = A2(
			elm$core$Basics$composeR,
			elm$core$String$fromInt,
			A2(
				elm$core$String$padLeft,
				2,
				_Utils_chr('0')));
		var logView = function (_n1) {
			var message = _n1.message;
			var mbDetails = _n1.mbDetails;
			var isError = _n1.isError;
			var timeStamp = _n1.timeStamp;
			return A2(
				mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(5),
						mdgriffith$elm_ui$Element$width(
						A2(mdgriffith$elm_ui$Element$maximum, 500, mdgriffith$elm_ui$Element$fill))
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$color(
										A3(mdgriffith$elm_ui$Element$rgb, 0.7, 0.7, 0.7))
									]),
								mdgriffith$elm_ui$Element$text(
									formatTime(
										A2(elm$time$Time$toHour, zone, timeStamp)) + (':' + formatTime(
										A2(elm$time$Time$toMinute, zone, timeStamp))))),
								A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										isError ? mdgriffith$elm_ui$Element$Font$color(
										A3(mdgriffith$elm_ui$Element$rgb, 1, 0, 0)) : author$project$Internals$CommonStyleHelpers$noAttr
									]),
								mdgriffith$elm_ui$Element$text(message))
							])),
						function () {
						if (mbDetails.$ === 'Nothing') {
							return mdgriffith$elm_ui$Element$none;
						} else {
							var details = mbDetails.a;
							return A2(
								mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$paddingEach(
										{bottom: 0, left: 20, right: 0, top: 0}),
										mdgriffith$elm_ui$Element$Font$size(12)
									]),
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$text(details)
									]));
						}
					}()
					]));
		};
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			A2(elm$core$List$map, logView, logs));
	});
var mdgriffith$elm_ui$Internal$Model$AlignY = function (a) {
	return {$: 'AlignY', a: a};
};
var mdgriffith$elm_ui$Internal$Model$CenterY = {$: 'CenterY'};
var mdgriffith$elm_ui$Element$centerY = mdgriffith$elm_ui$Internal$Model$AlignY(mdgriffith$elm_ui$Internal$Model$CenterY);
var mdgriffith$elm_ui$Internal$Flag$focus = mdgriffith$elm_ui$Internal$Flag$flag(31);
var mdgriffith$elm_ui$Internal$Model$Focus = {$: 'Focus'};
var mdgriffith$elm_ui$Internal$Model$PseudoSelector = F2(
	function (a, b) {
		return {$: 'PseudoSelector', a: a, b: b};
	});
var elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 'AlignX', a: a};
};
var mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 'Nearby', a: a, b: b};
	});
var mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 'NoAttribute'};
var mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 'TransformComponent', a: a, b: b};
	});
var mdgriffith$elm_ui$Internal$Model$map = F2(
	function (fn, el) {
		switch (el.$) {
			case 'Styled':
				var styled = el.a;
				return mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: F2(
							function (add, context) {
								return A2(
									elm$virtual_dom$VirtualDom$map,
									fn,
									A2(styled.html, add, context));
							}),
						styles: styled.styles
					});
			case 'Unstyled':
				var html = el.a;
				return mdgriffith$elm_ui$Internal$Model$Unstyled(
					A2(
						elm$core$Basics$composeL,
						elm$virtual_dom$VirtualDom$map(fn),
						html));
			case 'Text':
				var str = el.a;
				return mdgriffith$elm_ui$Internal$Model$Text(str);
			default:
				return mdgriffith$elm_ui$Internal$Model$Empty;
		}
	});
var mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 'NoAttribute':
				return mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 'Describe':
				var description = attr.a;
				return mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 'AlignX':
				var x = attr.a;
				return mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 'AlignY':
				var y = attr.a;
				return mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 'Width':
				var x = attr.a;
				return mdgriffith$elm_ui$Internal$Model$Width(x);
			case 'Height':
				var x = attr.a;
				return mdgriffith$elm_ui$Internal$Model$Height(x);
			case 'Class':
				var x = attr.a;
				var y = attr.b;
				return A2(mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 'StyleClass':
				var flag = attr.a;
				var style = attr.b;
				return A2(mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 'Nearby':
				var location = attr.a;
				var elem = attr.b;
				return A2(
					mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2(mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 'Attr':
				var htmlAttr = attr.a;
				return mdgriffith$elm_ui$Internal$Model$Attr(
					A2(elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2(mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var mdgriffith$elm_ui$Internal$Model$removeNever = function (style) {
	return A2(mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle, elm$core$Basics$never, style);
};
var mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper = F2(
	function (attr, _n0) {
		var styles = _n0.a;
		var trans = _n0.b;
		var _n1 = mdgriffith$elm_ui$Internal$Model$removeNever(attr);
		switch (_n1.$) {
			case 'StyleClass':
				var style = _n1.b;
				return _Utils_Tuple2(
					A2(elm$core$List$cons, style, styles),
					trans);
			case 'TransformComponent':
				var flag = _n1.a;
				var component = _n1.b;
				return _Utils_Tuple2(
					styles,
					A2(mdgriffith$elm_ui$Internal$Model$composeTransformation, trans, component));
			default:
				return _Utils_Tuple2(styles, trans);
		}
	});
var mdgriffith$elm_ui$Internal$Model$unwrapDecorations = function (attrs) {
	var _n0 = A3(
		elm$core$List$foldl,
		mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper,
		_Utils_Tuple2(_List_Nil, mdgriffith$elm_ui$Internal$Model$Untransformed),
		attrs);
	var styles = _n0.a;
	var transform = _n0.b;
	return A2(
		elm$core$List$cons,
		mdgriffith$elm_ui$Internal$Model$Transform(transform),
		styles);
};
var mdgriffith$elm_ui$Element$focused = function (decs) {
	return A2(
		mdgriffith$elm_ui$Internal$Model$StyleClass,
		mdgriffith$elm_ui$Internal$Flag$focus,
		A2(
			mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			mdgriffith$elm_ui$Internal$Model$Focus,
			mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var mdgriffith$elm_ui$Internal$Flag$hover = mdgriffith$elm_ui$Internal$Flag$flag(33);
var mdgriffith$elm_ui$Internal$Model$Hover = {$: 'Hover'};
var mdgriffith$elm_ui$Element$mouseOver = function (decs) {
	return A2(
		mdgriffith$elm_ui$Internal$Model$StyleClass,
		mdgriffith$elm_ui$Internal$Flag$hover,
		A2(
			mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			mdgriffith$elm_ui$Internal$Model$Hover,
			mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var mdgriffith$elm_ui$Element$padding = function (x) {
	return A2(
		mdgriffith$elm_ui$Internal$Model$StyleClass,
		mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + elm$core$String$fromInt(x),
			x,
			x,
			x,
			x));
};
var mdgriffith$elm_ui$Internal$Flag$shadows = mdgriffith$elm_ui$Internal$Flag$flag(19);
var mdgriffith$elm_ui$Internal$Model$boxShadowName = function (shadow) {
	return elm$core$String$concat(
		_List_fromArray(
			[
				shadow.inset ? 'box-inset' : 'box-',
				elm$core$String$fromFloat(shadow.offset.a) + 'px',
				elm$core$String$fromFloat(shadow.offset.b) + 'px',
				elm$core$String$fromFloat(shadow.blur) + 'px',
				elm$core$String$fromFloat(shadow.size) + 'px',
				mdgriffith$elm_ui$Internal$Model$formatColorClass(shadow.color)
			]));
};
var mdgriffith$elm_ui$Element$Border$shadow = function (almostShade) {
	var shade = {blur: almostShade.blur, color: almostShade.color, inset: false, offset: almostShade.offset, size: almostShade.size};
	return A2(
		mdgriffith$elm_ui$Internal$Model$StyleClass,
		mdgriffith$elm_ui$Internal$Flag$shadows,
		A3(
			mdgriffith$elm_ui$Internal$Model$Single,
			mdgriffith$elm_ui$Internal$Model$boxShadowName(shade),
			'box-shadow',
			mdgriffith$elm_ui$Internal$Model$formatBoxShadow(shade)));
};
var mdgriffith$elm_ui$Element$Border$glow = F2(
	function (clr, size) {
		return mdgriffith$elm_ui$Element$Border$shadow(
			{
				blur: size * 2,
				color: clr,
				offset: _Utils_Tuple2(0, 0),
				size: size
			});
	});
var mdgriffith$elm_ui$Internal$Flag$borderRound = mdgriffith$elm_ui$Internal$Flag$flag(17);
var mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		mdgriffith$elm_ui$Internal$Model$StyleClass,
		mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + elm$core$String$fromInt(radius),
			'border-radius',
			elm$core$String$fromInt(radius) + 'px'));
};
var mdgriffith$elm_ui$Internal$Flag$fontAlignment = mdgriffith$elm_ui$Internal$Flag$flag(12);
var mdgriffith$elm_ui$Element$Font$center = A2(mdgriffith$elm_ui$Internal$Model$Class, mdgriffith$elm_ui$Internal$Flag$fontAlignment, mdgriffith$elm_ui$Internal$Style$classes.textCenter);
var author$project$Internals$CommonStyleHelpers$buttonStyle = function (isActive) {
	return _Utils_ap(
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$Border$rounded(5),
				mdgriffith$elm_ui$Element$Font$center,
				mdgriffith$elm_ui$Element$centerY,
				mdgriffith$elm_ui$Element$padding(5),
				mdgriffith$elm_ui$Element$focused(
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$Border$glow,
						A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
						0)
					]))
			]),
		isActive ? _List_fromArray(
			[
				mdgriffith$elm_ui$Element$Background$color(
				A3(mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9)),
				mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$Font$color(
						A3(mdgriffith$elm_ui$Element$rgb, 255, 255, 255))
					])),
				mdgriffith$elm_ui$Element$Border$width(1),
				mdgriffith$elm_ui$Element$Border$color(
				A3(mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
			]) : _List_fromArray(
			[
				mdgriffith$elm_ui$Element$Background$color(
				A3(mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95)),
				mdgriffith$elm_ui$Element$Font$color(
				A3(mdgriffith$elm_ui$Element$rgb, 0.7, 0.7, 0.7)),
				mdgriffith$elm_ui$Element$htmlAttribute(
				A2(elm$html$Html$Attributes$style, 'cursor', 'default')),
				mdgriffith$elm_ui$Element$Border$width(1),
				mdgriffith$elm_ui$Element$Border$color(
				A3(mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95))
			]));
};
var mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 'Px', a: a};
};
var mdgriffith$elm_ui$Element$px = mdgriffith$elm_ui$Internal$Model$Px;
var author$project$Internals$CommonStyleHelpers$textInputStyle = _List_fromArray(
	[
		mdgriffith$elm_ui$Element$width(
		mdgriffith$elm_ui$Element$px(250)),
		A2(mdgriffith$elm_ui$Element$paddingXY, 5, 5),
		mdgriffith$elm_ui$Element$spacing(15),
		mdgriffith$elm_ui$Element$focused(
		_List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$Border$glow,
				A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
				0)
			]))
	]);
var mdgriffith$elm_ui$Internal$Model$Top = {$: 'Top'};
var mdgriffith$elm_ui$Element$alignTop = mdgriffith$elm_ui$Internal$Model$AlignY(mdgriffith$elm_ui$Internal$Model$Top);
var elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			elm$json$Json$Encode$bool(bool));
	});
var elm$html$Html$Attributes$disabled = elm$html$Html$Attributes$boolProperty('disabled');
var elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		elm$core$String$fromInt(n));
};
var mdgriffith$elm_ui$Internal$Flag$cursor = mdgriffith$elm_ui$Internal$Flag$flag(21);
var mdgriffith$elm_ui$Element$pointer = A2(mdgriffith$elm_ui$Internal$Model$Class, mdgriffith$elm_ui$Internal$Flag$cursor, mdgriffith$elm_ui$Internal$Style$classes.cursorPointer);
var mdgriffith$elm_ui$Element$Events$onClick = A2(elm$core$Basics$composeL, mdgriffith$elm_ui$Internal$Model$Attr, elm$html$Html$Events$onClick);
var mdgriffith$elm_ui$Element$Input$hasFocusStyle = function (attr) {
	if (((attr.$ === 'StyleClass') && (attr.b.$ === 'PseudoSelector')) && (attr.b.a.$ === 'Focus')) {
		var _n1 = attr.b;
		var _n2 = _n1.a;
		return true;
	} else {
		return false;
	}
};
var mdgriffith$elm_ui$Element$Input$focusDefault = function (attrs) {
	return A2(elm$core$List$any, mdgriffith$elm_ui$Element$Input$hasFocusStyle, attrs) ? mdgriffith$elm_ui$Internal$Model$NoAttribute : mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
};
var mdgriffith$elm_ui$Element$Input$enter = 'Enter';
var elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 'MayPreventDefault', a: a};
};
var elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			elm$virtual_dom$VirtualDom$on,
			event,
			elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var mdgriffith$elm_ui$Element$Input$onKey = F2(
	function (desiredCode, msg) {
		var decode = function (code) {
			return _Utils_eq(code, desiredCode) ? elm$json$Json$Decode$succeed(msg) : elm$json$Json$Decode$fail('Not the enter key');
		};
		var isKey = A2(
			elm$json$Json$Decode$andThen,
			decode,
			A2(elm$json$Json$Decode$field, 'key', elm$json$Json$Decode$string));
		return mdgriffith$elm_ui$Internal$Model$Attr(
			A2(
				elm$html$Html$Events$preventDefaultOn,
				'keyup',
				A2(
					elm$json$Json$Decode$map,
					function (fired) {
						return _Utils_Tuple2(fired, true);
					},
					isKey)));
	});
var mdgriffith$elm_ui$Element$Input$onEnter = function (msg) {
	return A2(mdgriffith$elm_ui$Element$Input$onKey, mdgriffith$elm_ui$Element$Input$enter, msg);
};
var mdgriffith$elm_ui$Internal$Model$Button = {$: 'Button'};
var mdgriffith$elm_ui$Element$Input$button = F2(
	function (attrs, _n0) {
		var onPress = _n0.onPress;
		var label = _n0.label;
		return A4(
			mdgriffith$elm_ui$Internal$Model$element,
			mdgriffith$elm_ui$Internal$Model$asEl,
			mdgriffith$elm_ui$Internal$Model$div,
			A2(
				elm$core$List$cons,
				mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$shrink),
				A2(
					elm$core$List$cons,
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$shrink),
					A2(
						elm$core$List$cons,
						mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + (mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + (mdgriffith$elm_ui$Internal$Style$classes.seButton + (' ' + mdgriffith$elm_ui$Internal$Style$classes.noTextSelection)))))),
						A2(
							elm$core$List$cons,
							mdgriffith$elm_ui$Element$pointer,
							A2(
								elm$core$List$cons,
								mdgriffith$elm_ui$Element$Input$focusDefault(attrs),
								A2(
									elm$core$List$cons,
									mdgriffith$elm_ui$Internal$Model$Describe(mdgriffith$elm_ui$Internal$Model$Button),
									A2(
										elm$core$List$cons,
										mdgriffith$elm_ui$Internal$Model$Attr(
											elm$html$Html$Attributes$tabindex(0)),
										function () {
											if (onPress.$ === 'Nothing') {
												return A2(
													elm$core$List$cons,
													mdgriffith$elm_ui$Internal$Model$Attr(
														elm$html$Html$Attributes$disabled(true)),
													attrs);
											} else {
												var msg = onPress.a;
												return A2(
													elm$core$List$cons,
													mdgriffith$elm_ui$Element$Events$onClick(msg),
													A2(
														elm$core$List$cons,
														mdgriffith$elm_ui$Element$Input$onEnter(msg),
														attrs));
											}
										}()))))))),
			mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var mdgriffith$elm_ui$Element$Input$TextInputNode = function (a) {
	return {$: 'TextInputNode', a: a};
};
var elm$html$Html$Attributes$type_ = elm$html$Html$Attributes$stringProperty('type');
var elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			elm$virtual_dom$VirtualDom$on,
			event,
			elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var elm$html$Html$Events$targetValue = A2(
	elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	elm$json$Json$Decode$string);
var elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			elm$json$Json$Decode$map,
			elm$html$Html$Events$alwaysStop,
			A2(elm$json$Json$Decode$map, tagger, elm$html$Html$Events$targetValue)));
};
var mdgriffith$elm_ui$Internal$Flag$transparency = mdgriffith$elm_ui$Internal$Flag$flag(0);
var mdgriffith$elm_ui$Internal$Model$Transparency = F2(
	function (a, b) {
		return {$: 'Transparency', a: a, b: b};
	});
var mdgriffith$elm_ui$Element$alpha = function (o) {
	var transparency = function (x) {
		return 1 - x;
	}(
		A2(
			elm$core$Basics$min,
			1.0,
			A2(elm$core$Basics$max, 0.0, o)));
	return A2(
		mdgriffith$elm_ui$Internal$Model$StyleClass,
		mdgriffith$elm_ui$Internal$Flag$transparency,
		A2(
			mdgriffith$elm_ui$Internal$Model$Transparency,
			'transparency-' + mdgriffith$elm_ui$Internal$Model$floatClass(transparency),
			transparency));
};
var mdgriffith$elm_ui$Internal$Model$InFront = {$: 'InFront'};
var mdgriffith$elm_ui$Element$inFront = function (element) {
	return A2(mdgriffith$elm_ui$Internal$Model$Nearby, mdgriffith$elm_ui$Internal$Model$InFront, element);
};
var mdgriffith$elm_ui$Element$Input$Padding = F4(
	function (a, b, c, d) {
		return {$: 'Padding', a: a, b: b, c: c, d: d};
	});
var mdgriffith$elm_ui$Element$Input$applyLabel = F3(
	function (attrs, label, input) {
		if (label.$ === 'HiddenLabel') {
			var labelText = label.a;
			return A4(
				mdgriffith$elm_ui$Internal$Model$element,
				mdgriffith$elm_ui$Internal$Model$asColumn,
				mdgriffith$elm_ui$Internal$Model$NodeName('label'),
				attrs,
				mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[input])));
		} else {
			var position = label.a;
			var labelAttrs = label.b;
			var labelChild = label.c;
			var labelElement = A4(
				mdgriffith$elm_ui$Internal$Model$element,
				mdgriffith$elm_ui$Internal$Model$asEl,
				mdgriffith$elm_ui$Internal$Model$div,
				labelAttrs,
				mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[labelChild])));
			switch (position.$) {
				case 'Above':
					return A4(
						mdgriffith$elm_ui$Internal$Model$element,
						mdgriffith$elm_ui$Internal$Model$asColumn,
						mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						attrs,
						mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
				case 'Below':
					return A4(
						mdgriffith$elm_ui$Internal$Model$element,
						mdgriffith$elm_ui$Internal$Model$asColumn,
						mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						attrs,
						mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				case 'OnRight':
					return A4(
						mdgriffith$elm_ui$Internal$Model$element,
						mdgriffith$elm_ui$Internal$Model$asRow,
						mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						attrs,
						mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				default:
					return A4(
						mdgriffith$elm_ui$Internal$Model$element,
						mdgriffith$elm_ui$Internal$Model$asRow,
						mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						attrs,
						mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
			}
		}
	});
var elm$html$Html$Attributes$attribute = elm$virtual_dom$VirtualDom$attribute;
var mdgriffith$elm_ui$Element$Input$autofill = A2(
	elm$core$Basics$composeL,
	mdgriffith$elm_ui$Internal$Model$Attr,
	elm$html$Html$Attributes$attribute('autocomplete'));
var mdgriffith$elm_ui$Element$Input$charcoal = A3(mdgriffith$elm_ui$Element$rgb, 136 / 255, 138 / 255, 133 / 255);
var mdgriffith$elm_ui$Element$Input$darkGrey = A3(mdgriffith$elm_ui$Element$rgb, 186 / 255, 189 / 255, 182 / 255);
var mdgriffith$elm_ui$Element$Input$defaultTextPadding = A2(mdgriffith$elm_ui$Element$paddingXY, 12, 12);
var mdgriffith$elm_ui$Element$Input$white = A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle = _List_fromArray(
	[
		mdgriffith$elm_ui$Element$Input$defaultTextPadding,
		mdgriffith$elm_ui$Element$Border$rounded(3),
		mdgriffith$elm_ui$Element$Border$color(mdgriffith$elm_ui$Element$Input$darkGrey),
		mdgriffith$elm_ui$Element$Background$color(mdgriffith$elm_ui$Element$Input$white),
		mdgriffith$elm_ui$Element$Border$width(1),
		mdgriffith$elm_ui$Element$spacing(3),
		mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
	]);
var mdgriffith$elm_ui$Internal$Model$Label = function (a) {
	return {$: 'Label', a: a};
};
var mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute = function (label) {
	if (label.$ === 'HiddenLabel') {
		var textLabel = label.a;
		return mdgriffith$elm_ui$Internal$Model$Describe(
			mdgriffith$elm_ui$Internal$Model$Label(textLabel));
	} else {
		return mdgriffith$elm_ui$Internal$Model$NoAttribute;
	}
};
var mdgriffith$elm_ui$Element$Input$inheritablePlaceholderAttributes = function (attr) {
	_n0$3:
	while (true) {
		if (attr.$ === 'StyleClass') {
			switch (attr.b.$) {
				case 'PaddingStyle':
					var _n1 = attr.b;
					return true;
				case 'BorderWidth':
					var _n2 = attr.b;
					return true;
				case 'Transform':
					return true;
				default:
					break _n0$3;
			}
		} else {
			break _n0$3;
		}
	}
	return false;
};
var mdgriffith$elm_ui$Element$Input$isHiddenLabel = function (label) {
	if (label.$ === 'HiddenLabel') {
		return true;
	} else {
		return false;
	}
};
var elm$html$Html$Attributes$spellcheck = elm$html$Html$Attributes$boolProperty('spellcheck');
var mdgriffith$elm_ui$Element$Input$spellcheck = A2(elm$core$Basics$composeL, mdgriffith$elm_ui$Internal$Model$Attr, elm$html$Html$Attributes$spellcheck);
var elm$core$String$lines = _String_lines;
var mdgriffith$elm_ui$Internal$Flag$heightTextAreaContent = mdgriffith$elm_ui$Internal$Flag$flag(47);
var mdgriffith$elm_ui$Element$Input$textHeightContent = F4(
	function (textValue, spacing, maybePadding, maybeBorder) {
		var topBottom = function (_n0) {
			var t = _n0.a;
			var b = _n0.c;
			return t + b;
		};
		var newlineCount = function (x) {
			return (x < 1) ? 1 : x;
		}(
			elm$core$List$length(
				elm$core$String$lines(textValue)));
		var additionalSpacing = (((newlineCount - 1) * spacing) + A2(
			elm$core$Maybe$withDefault,
			0,
			A2(elm$core$Maybe$map, topBottom, maybePadding))) + A2(
			elm$core$Maybe$withDefault,
			0,
			A2(elm$core$Maybe$map, topBottom, maybeBorder));
		var heightValue = function (count) {
			return 'calc(' + (elm$core$String$fromInt(count) + ('em + ' + (elm$core$String$fromInt(additionalSpacing) + 'px) !important')));
		};
		return A2(
			mdgriffith$elm_ui$Internal$Model$StyleClass,
			mdgriffith$elm_ui$Internal$Flag$heightTextAreaContent,
			A3(
				mdgriffith$elm_ui$Internal$Model$Single,
				'textarea-height-' + elm$core$String$fromInt(newlineCount),
				'height',
				heightValue(newlineCount)));
	});
var elm$html$Html$Attributes$value = elm$html$Html$Attributes$stringProperty('value');
var mdgriffith$elm_ui$Element$Input$value = A2(elm$core$Basics$composeL, mdgriffith$elm_ui$Internal$Model$Attr, elm$html$Html$Attributes$value);
var mdgriffith$elm_ui$Internal$Model$LivePolite = {$: 'LivePolite'};
var mdgriffith$elm_ui$Element$Region$announce = mdgriffith$elm_ui$Internal$Model$Describe(mdgriffith$elm_ui$Internal$Model$LivePolite);
var mdgriffith$elm_ui$Internal$Model$filter = function (attrs) {
	return A3(
		elm$core$List$foldr,
		F2(
			function (x, _n0) {
				var found = _n0.a;
				var has = _n0.b;
				switch (x.$) {
					case 'NoAttribute':
						return _Utils_Tuple2(found, has);
					case 'Class':
						var key = x.a;
						return _Utils_Tuple2(
							A2(elm$core$List$cons, x, found),
							has);
					case 'Attr':
						var attr = x.a;
						return _Utils_Tuple2(
							A2(elm$core$List$cons, x, found),
							has);
					case 'StyleClass':
						var style = x.b;
						return _Utils_Tuple2(
							A2(elm$core$List$cons, x, found),
							has);
					case 'Width':
						var width = x.a;
						return A2(elm$core$Set$member, 'width', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2(elm$core$List$cons, x, found),
							A2(elm$core$Set$insert, 'width', has));
					case 'Height':
						var height = x.a;
						return A2(elm$core$Set$member, 'height', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2(elm$core$List$cons, x, found),
							A2(elm$core$Set$insert, 'height', has));
					case 'Describe':
						var description = x.a;
						return A2(elm$core$Set$member, 'described', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2(elm$core$List$cons, x, found),
							A2(elm$core$Set$insert, 'described', has));
					case 'Nearby':
						var location = x.a;
						var elem = x.b;
						return _Utils_Tuple2(
							A2(elm$core$List$cons, x, found),
							has);
					case 'AlignX':
						return A2(elm$core$Set$member, 'align-x', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2(elm$core$List$cons, x, found),
							A2(elm$core$Set$insert, 'align-x', has));
					case 'AlignY':
						return A2(elm$core$Set$member, 'align-y', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2(elm$core$List$cons, x, found),
							A2(elm$core$Set$insert, 'align-y', has));
					default:
						return A2(elm$core$Set$member, 'transform', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2(elm$core$List$cons, x, found),
							A2(elm$core$Set$insert, 'transform', has));
				}
			}),
		_Utils_Tuple2(_List_Nil, elm$core$Set$empty),
		attrs).a;
};
var mdgriffith$elm_ui$Internal$Model$get = F2(
	function (attrs, isAttr) {
		return A3(
			elm$core$List$foldr,
			F2(
				function (x, found) {
					return isAttr(x) ? A2(elm$core$List$cons, x, found) : found;
				}),
			_List_Nil,
			mdgriffith$elm_ui$Internal$Model$filter(attrs));
	});
var mdgriffith$elm_ui$Internal$Model$isContent = function (len) {
	isContent:
	while (true) {
		switch (len.$) {
			case 'Content':
				return true;
			case 'Max':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isContent;
			case 'Min':
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isContent;
			default:
				return false;
		}
	}
};
var mdgriffith$elm_ui$Internal$Model$unstyled = A2(elm$core$Basics$composeL, mdgriffith$elm_ui$Internal$Model$Unstyled, elm$core$Basics$always);
var mdgriffith$elm_ui$Element$Input$textHelper = F3(
	function (textInput, attrs, textOptions) {
		var forNearby = function (attr) {
			if (attr.$ === 'Nearby') {
				return true;
			} else {
				return false;
			}
		};
		var behavior = _List_fromArray(
			[
				mdgriffith$elm_ui$Internal$Model$Attr(
				elm$html$Html$Events$onInput(textOptions.onChange))
			]);
		var attributes = _Utils_ap(mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle, attrs);
		var attributesFromChild = A2(
			mdgriffith$elm_ui$Internal$Model$get,
			attributes,
			function (attr) {
				_n21$7:
				while (true) {
					switch (attr.$) {
						case 'Width':
							if (attr.a.$ === 'Fill') {
								return true;
							} else {
								break _n21$7;
							}
						case 'Height':
							if (attr.a.$ === 'Fill') {
								return true;
							} else {
								break _n21$7;
							}
						case 'AlignX':
							return true;
						case 'AlignY':
							return true;
						case 'StyleClass':
							switch (attr.b.$) {
								case 'SpacingStyle':
									var _n22 = attr.b;
									return true;
								case 'FontSize':
									return true;
								case 'FontFamily':
									var _n23 = attr.b;
									return true;
								default:
									break _n21$7;
							}
						default:
							break _n21$7;
					}
				}
				return false;
			});
		var forPlaceholder = A2(elm$core$List$filter, mdgriffith$elm_ui$Element$Input$inheritablePlaceholderAttributes, attributes);
		var heightFillFromChild = A2(
			mdgriffith$elm_ui$Internal$Model$get,
			attributes,
			function (attr) {
				if ((attr.$ === 'Height') && (attr.a.$ === 'Fill')) {
					return true;
				} else {
					return false;
				}
			});
		var inputPadding = A2(
			mdgriffith$elm_ui$Internal$Model$get,
			attributes,
			function (attr) {
				if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
					var _n19 = attr.b;
					return true;
				} else {
					return false;
				}
			});
		var nearbys = A2(
			mdgriffith$elm_ui$Internal$Model$get,
			attributes,
			function (attr) {
				if (attr.$ === 'Nearby') {
					return true;
				} else {
					return false;
				}
			});
		var noNearbys = A2(
			elm$core$List$filter,
			A2(elm$core$Basics$composeL, elm$core$Basics$not, forNearby),
			attributes);
		var _n0 = function () {
			var _n1 = textInput.type_;
			if (_n1.$ === 'TextInputNode') {
				var inputType = _n1.a;
				return _Utils_Tuple3(
					'input',
					_Utils_ap(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Input$value(textOptions.text),
								mdgriffith$elm_ui$Internal$Model$Attr(
								elm$html$Html$Attributes$type_(inputType)),
								mdgriffith$elm_ui$Element$Input$spellcheck(textInput.spellchecked),
								mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.inputText),
								function () {
								var _n2 = textInput.autofill;
								if (_n2.$ === 'Nothing') {
									return mdgriffith$elm_ui$Internal$Model$NoAttribute;
								} else {
									var fill = _n2.a;
									return mdgriffith$elm_ui$Element$Input$autofill(fill);
								}
							}()
							]),
						noNearbys),
					_List_Nil);
			} else {
				var _n3 = A3(
					elm$core$List$foldr,
					F2(
						function (attr, found) {
							_n4$5:
							while (true) {
								switch (attr.$) {
									case 'Describe':
										return found;
									case 'Height':
										var len = attr.a;
										var _n5 = found.heightContent;
										if (_n5.$ === 'Nothing') {
											return _Utils_update(
												found,
												{
													adjustedAttributes: A2(elm$core$List$cons, attr, found.adjustedAttributes),
													heightContent: elm$core$Maybe$Just(
														mdgriffith$elm_ui$Internal$Model$isContent(len))
												});
										} else {
											return found;
										}
									case 'StyleClass':
										switch (attr.b.$) {
											case 'BorderWidth':
												var _n6 = attr.b;
												var t = _n6.b;
												var r = _n6.c;
												var b = _n6.d;
												var l = _n6.e;
												var _n7 = found.maybeBorder;
												if (_n7.$ === 'Nothing') {
													return _Utils_update(
														found,
														{
															adjustedAttributes: A2(elm$core$List$cons, attr, found.adjustedAttributes),
															maybeBorder: elm$core$Maybe$Just(
																A4(mdgriffith$elm_ui$Element$Input$Padding, t, r, b, l))
														});
												} else {
													return found;
												}
											case 'PaddingStyle':
												var _n8 = attr.b;
												var t = _n8.b;
												var r = _n8.c;
												var b = _n8.d;
												var l = _n8.e;
												var _n9 = found.maybePadding;
												if (_n9.$ === 'Nothing') {
													return _Utils_update(
														found,
														{
															adjustedAttributes: found.adjustedAttributes,
															maybePadding: elm$core$Maybe$Just(
																A4(mdgriffith$elm_ui$Element$Input$Padding, t, r, b, l))
														});
												} else {
													return found;
												}
											case 'SpacingStyle':
												var _n10 = attr.b;
												var x = _n10.b;
												var y = _n10.c;
												var _n11 = found.maybeSpacing;
												if (_n11.$ === 'Nothing') {
													return _Utils_update(
														found,
														{
															adjustedAttributes: A2(elm$core$List$cons, attr, found.adjustedAttributes),
															maybeSpacing: elm$core$Maybe$Just(y)
														});
												} else {
													return found;
												}
											default:
												break _n4$5;
										}
									default:
										break _n4$5;
								}
							}
							return _Utils_update(
								found,
								{
									adjustedAttributes: A2(elm$core$List$cons, attr, found.adjustedAttributes)
								});
						}),
					{adjustedAttributes: _List_Nil, heightContent: elm$core$Maybe$Nothing, maybeBorder: elm$core$Maybe$Nothing, maybePadding: elm$core$Maybe$Nothing, maybeSpacing: elm$core$Maybe$Nothing},
					attributes);
				var maybePadding = _n3.maybePadding;
				var heightContent = _n3.heightContent;
				var maybeSpacing = _n3.maybeSpacing;
				var adjustedAttributes = _n3.adjustedAttributes;
				var maybeBorder = _n3.maybeBorder;
				var spacing = A2(elm$core$Maybe$withDefault, 5, maybeSpacing);
				return _Utils_Tuple3(
					'textarea',
					_Utils_ap(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Input$spellcheck(textInput.spellchecked),
								mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
								A2(
								elm$core$Maybe$withDefault,
								mdgriffith$elm_ui$Internal$Model$NoAttribute,
								A2(elm$core$Maybe$map, mdgriffith$elm_ui$Element$Input$autofill, textInput.autofill)),
								function () {
								if (maybePadding.$ === 'Nothing') {
									return mdgriffith$elm_ui$Internal$Model$NoAttribute;
								} else {
									var _n13 = maybePadding.a;
									var t = _n13.a;
									var r = _n13.b;
									var b = _n13.c;
									var l = _n13.d;
									return mdgriffith$elm_ui$Element$paddingEach(
										{
											bottom: A2(elm$core$Basics$max, 0, b - ((spacing / 2) | 0)),
											left: l,
											right: r,
											top: A2(elm$core$Basics$max, 0, t - ((spacing / 2) | 0))
										});
								}
							}(),
								function () {
								if (heightContent.$ === 'Nothing') {
									return mdgriffith$elm_ui$Internal$Model$NoAttribute;
								} else {
									if (heightContent.a) {
										return A4(mdgriffith$elm_ui$Element$Input$textHeightContent, textOptions.text, spacing, maybePadding, maybeBorder);
									} else {
										return mdgriffith$elm_ui$Internal$Model$NoAttribute;
									}
								}
							}()
							]),
						adjustedAttributes),
					_List_fromArray(
						[
							mdgriffith$elm_ui$Internal$Model$unstyled(
							elm$html$Html$text(textOptions.text))
						]));
			}
		}();
		var inputNode = _n0.a;
		var inputAttrs = _n0.b;
		var inputChildren = _n0.c;
		var inputElement = A4(
			mdgriffith$elm_ui$Internal$Model$element,
			mdgriffith$elm_ui$Internal$Model$asEl,
			mdgriffith$elm_ui$Internal$Model$div,
			A2(
				elm$core$List$cons,
				mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
				elm$core$List$concat(
					_List_fromArray(
						[
							nearbys,
							heightFillFromChild,
							function () {
							var _n15 = textOptions.placeholder;
							if (_n15.$ === 'Nothing') {
								return _List_Nil;
							} else {
								var _n16 = _n15.a;
								var placeholderAttrs = _n16.a;
								var placeholderEl = _n16.b;
								return _List_fromArray(
									[
										mdgriffith$elm_ui$Element$inFront(
										A2(
											mdgriffith$elm_ui$Element$el,
											A2(
												elm$core$List$cons,
												mdgriffith$elm_ui$Element$Input$defaultTextPadding,
												_Utils_ap(
													forPlaceholder,
													_Utils_ap(
														_List_fromArray(
															[
																mdgriffith$elm_ui$Element$Font$color(mdgriffith$elm_ui$Element$Input$charcoal),
																mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.noTextSelection + (' ' + mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents)),
																mdgriffith$elm_ui$Element$Border$color(
																A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
																mdgriffith$elm_ui$Element$Background$color(
																A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
																mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
																mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
																mdgriffith$elm_ui$Element$alpha(
																(textOptions.text === '') ? 1 : 0)
															]),
														placeholderAttrs))),
											placeholderEl))
									]);
							}
						}()
						]))),
			mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[
						A4(
						mdgriffith$elm_ui$Internal$Model$element,
						mdgriffith$elm_ui$Internal$Model$asEl,
						mdgriffith$elm_ui$Internal$Model$NodeName(inputNode),
						elm$core$List$concat(
							_List_fromArray(
								[
									_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Input$focusDefault(attrs),
										mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(textOptions.label)
									]),
									inputAttrs,
									behavior
								])),
						mdgriffith$elm_ui$Internal$Model$Unkeyed(inputChildren))
					])));
		return A3(
			mdgriffith$elm_ui$Element$Input$applyLabel,
			A2(
				elm$core$List$cons,
				A2(mdgriffith$elm_ui$Internal$Model$Class, mdgriffith$elm_ui$Internal$Flag$cursor, mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				A2(
					elm$core$List$cons,
					mdgriffith$elm_ui$Element$Input$isHiddenLabel(textOptions.label) ? mdgriffith$elm_ui$Internal$Model$NoAttribute : mdgriffith$elm_ui$Element$spacing(5),
					A2(elm$core$List$cons, mdgriffith$elm_ui$Element$Region$announce, attributesFromChild))),
			textOptions.label,
			inputElement);
	});
var mdgriffith$elm_ui$Element$Input$currentPassword = F2(
	function (attrs, pass) {
		return A3(
			mdgriffith$elm_ui$Element$Input$textHelper,
			{
				autofill: elm$core$Maybe$Just('current-password'),
				spellchecked: false,
				type_: mdgriffith$elm_ui$Element$Input$TextInputNode(
					pass.show ? 'text' : 'password')
			},
			attrs,
			{label: pass.label, onChange: pass.onChange, placeholder: pass.placeholder, text: pass.text});
	});
var mdgriffith$elm_ui$Element$Input$Label = F3(
	function (a, b, c) {
		return {$: 'Label', a: a, b: b, c: c};
	});
var mdgriffith$elm_ui$Element$Input$OnLeft = {$: 'OnLeft'};
var mdgriffith$elm_ui$Element$Input$labelLeft = mdgriffith$elm_ui$Element$Input$Label(mdgriffith$elm_ui$Element$Input$OnLeft);
var mdgriffith$elm_ui$Element$Input$text = mdgriffith$elm_ui$Element$Input$textHelper(
	{
		autofill: elm$core$Maybe$Nothing,
		spellchecked: false,
		type_: mdgriffith$elm_ui$Element$Input$TextInputNode('text')
	});
var author$project$Auth$AuthPlugin$loginView = F3(
	function (config, status, model) {
		var waitingView = A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$text('Traitement en cours, veuillez patienter')
				]));
		var successView = A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$text('Connexion réussie!'),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Deconnexion'),
								onPress: elm$core$Maybe$Just(
									author$project$Auth$AuthPlugin$ChangePluginMode(
										author$project$Auth$AuthPlugin$LogoutMode(author$project$Internals$CommonHelpers$Initial)))
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Retour'),
								onPress: elm$core$Maybe$Just(author$project$Auth$AuthPlugin$Quit)
							})
						]))
				]));
		var initialView = A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$Input$text,
					author$project$Internals$CommonStyleHelpers$textInputStyle,
					{
						label: A2(
							mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$centerY]),
							A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(110))
									]),
								mdgriffith$elm_ui$Element$text('Nom utilisateur: '))),
						onChange: author$project$Auth$AuthPlugin$SetUsername,
						placeholder: elm$core$Maybe$Nothing,
						text: model.username
					}),
					A2(
					mdgriffith$elm_ui$Element$Input$currentPassword,
					author$project$Internals$CommonStyleHelpers$textInputStyle,
					{
						label: A2(
							mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$centerY]),
							A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(110))
									]),
								mdgriffith$elm_ui$Element$text('Mot de passe: '))),
						onChange: author$project$Auth$AuthPlugin$SetPassword,
						placeholder: elm$core$Maybe$Nothing,
						show: false,
						text: model.password
					}),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Connexion'),
								onPress: elm$core$Maybe$Just(author$project$Auth$AuthPlugin$Login)
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Nouvel utilisateur'),
								onPress: elm$core$Maybe$Just(
									author$project$Auth$AuthPlugin$ChangePluginMode(
										author$project$Auth$AuthPlugin$SignUpMode(author$project$Internals$CommonHelpers$Initial)))
							})
						]))
				]));
		var failureView = A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$text('Echec Connexion!'),
					A2(author$project$Internals$CommonHelpers$logsView, model.logs, config.zone),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Réessayer'),
								onPress: elm$core$Maybe$Just(
									author$project$Auth$AuthPlugin$ChangePluginMode(
										author$project$Auth$AuthPlugin$LoginMode(author$project$Internals$CommonHelpers$Initial)))
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Retour'),
								onPress: elm$core$Maybe$Just(author$project$Auth$AuthPlugin$Quit)
							})
						]))
				]));
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$padding(15),
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$Font$size(16),
					mdgriffith$elm_ui$Element$alignTop
				]),
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$text('Connexion: '),
					function () {
					switch (status.$) {
						case 'Initial':
							return initialView;
						case 'Waiting':
							return waitingView;
						case 'Success':
							return successView;
						default:
							return failureView;
					}
				}()
				]));
	});
var author$project$Auth$AuthPlugin$Logout = {$: 'Logout'};
var author$project$Auth$AuthPlugin$logoutView = F3(
	function (config, status, model) {
		var waitingView = A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$text('Traitement en cours, veuillez patienter')
				]));
		var successView = A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$text('Déconnexion réussie!'),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Connexion'),
								onPress: elm$core$Maybe$Just(
									author$project$Auth$AuthPlugin$ChangePluginMode(
										author$project$Auth$AuthPlugin$LoginMode(author$project$Internals$CommonHelpers$Initial)))
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Retour'),
								onPress: elm$core$Maybe$Just(author$project$Auth$AuthPlugin$Quit)
							})
						]))
				]));
		var initialView = A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$Input$button,
					author$project$Internals$CommonStyleHelpers$buttonStyle(true),
					{
						label: mdgriffith$elm_ui$Element$text('Se déconnecter'),
						onPress: elm$core$Maybe$Just(author$project$Auth$AuthPlugin$Logout)
					})
				]));
		var failureView = A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$text('Echec déconnexion!'),
					A2(author$project$Internals$CommonHelpers$logsView, model.logs, config.zone),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Réessayer'),
								onPress: elm$core$Maybe$Just(
									author$project$Auth$AuthPlugin$ChangePluginMode(
										author$project$Auth$AuthPlugin$LogoutMode(author$project$Internals$CommonHelpers$Initial)))
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Retour'),
								onPress: elm$core$Maybe$Just(author$project$Auth$AuthPlugin$Quit)
							})
						]))
				]));
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$padding(15),
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$Font$size(16),
					mdgriffith$elm_ui$Element$alignTop
				]),
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$text('Déconnexion: '),
					function () {
					switch (status.$) {
						case 'Initial':
							return initialView;
						case 'Waiting':
							return waitingView;
						case 'Success':
							return successView;
						default:
							return failureView;
					}
				}()
				]));
	});
var author$project$Auth$AuthPlugin$SetConfirmPassword = function (a) {
	return {$: 'SetConfirmPassword', a: a};
};
var author$project$Auth$AuthPlugin$SignUp = {$: 'SignUp'};
var mdgriffith$elm_ui$Element$Input$newPassword = F2(
	function (attrs, pass) {
		return A3(
			mdgriffith$elm_ui$Element$Input$textHelper,
			{
				autofill: elm$core$Maybe$Just('new-password'),
				spellchecked: false,
				type_: mdgriffith$elm_ui$Element$Input$TextInputNode(
					pass.show ? 'text' : 'password')
			},
			attrs,
			{label: pass.label, onChange: pass.onChange, placeholder: pass.placeholder, text: pass.text});
	});
var author$project$Auth$AuthPlugin$signUpView = F3(
	function (config, status, model) {
		var waitingView = A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$text('Traitement en cours, veuillez patienter')
				]));
		var successView = A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$text('Inscription réussie!'),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Connexion'),
								onPress: elm$core$Maybe$Just(
									author$project$Auth$AuthPlugin$ChangePluginMode(
										author$project$Auth$AuthPlugin$LoginMode(author$project$Internals$CommonHelpers$Initial)))
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Retour'),
								onPress: elm$core$Maybe$Just(author$project$Auth$AuthPlugin$Quit)
							})
						]))
				]));
		var initialView = A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$Input$text,
					author$project$Internals$CommonStyleHelpers$textInputStyle,
					{
						label: A2(
							mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$centerY]),
							A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(110))
									]),
								mdgriffith$elm_ui$Element$text('Nom utilisateur: '))),
						onChange: author$project$Auth$AuthPlugin$SetUsername,
						placeholder: elm$core$Maybe$Nothing,
						text: model.username
					}),
					A2(
					mdgriffith$elm_ui$Element$Input$newPassword,
					author$project$Internals$CommonStyleHelpers$textInputStyle,
					{
						label: A2(
							mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$centerY]),
							A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(110))
									]),
								mdgriffith$elm_ui$Element$text('Mot de passe: '))),
						onChange: author$project$Auth$AuthPlugin$SetPassword,
						placeholder: elm$core$Maybe$Nothing,
						show: false,
						text: model.password
					}),
					A2(
					mdgriffith$elm_ui$Element$Input$newPassword,
					author$project$Internals$CommonStyleHelpers$textInputStyle,
					{
						label: A2(
							mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$centerY]),
							A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(110))
									]),
								mdgriffith$elm_ui$Element$text('Confirmation: '))),
						onChange: author$project$Auth$AuthPlugin$SetConfirmPassword,
						placeholder: elm$core$Maybe$Nothing,
						show: false,
						text: model.confirmPassword
					}),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Envoyer'),
								onPress: elm$core$Maybe$Just(author$project$Auth$AuthPlugin$SignUp)
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Retour'),
								onPress: elm$core$Maybe$Just(author$project$Auth$AuthPlugin$Quit)
							})
						]))
				]));
		var failureView = A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$text('Echec inscription!'),
					A2(author$project$Internals$CommonHelpers$logsView, model.logs, config.zone),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Réessayer'),
								onPress: elm$core$Maybe$Just(
									author$project$Auth$AuthPlugin$ChangePluginMode(
										author$project$Auth$AuthPlugin$SignUpMode(author$project$Internals$CommonHelpers$Initial)))
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Connexion'),
								onPress: elm$core$Maybe$Just(
									author$project$Auth$AuthPlugin$ChangePluginMode(
										author$project$Auth$AuthPlugin$LoginMode(author$project$Internals$CommonHelpers$Initial)))
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Retour'),
								onPress: elm$core$Maybe$Just(author$project$Auth$AuthPlugin$Quit)
							})
						]))
				]));
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$padding(15),
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$Font$size(16),
					mdgriffith$elm_ui$Element$alignTop
				]),
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$text('Nouvel utilisateur: '),
					function () {
					switch (status.$) {
						case 'Initial':
							return initialView;
						case 'Waiting':
							return waitingView;
						case 'Success':
							return successView;
						default:
							return failureView;
					}
				}()
				]));
	});
var mdgriffith$elm_ui$Element$map = mdgriffith$elm_ui$Internal$Model$map;
var author$project$Auth$AuthPlugin$view = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$map,
			model.externalMsg,
			function () {
				var _n0 = model.pluginMode;
				switch (_n0.$) {
					case 'SignUpMode':
						var status = _n0.a;
						return A3(author$project$Auth$AuthPlugin$signUpView, config, status, model);
					case 'LoginMode':
						var status = _n0.a;
						return A3(author$project$Auth$AuthPlugin$loginView, config, status, model);
					default:
						var status = _n0.a;
						return A3(author$project$Auth$AuthPlugin$logoutView, config, status, model);
				}
			}());
	});
var author$project$FileExplorer$FileExplorer$Full = {$: 'Full'};
var author$project$FileExplorer$FileExplorer$loadingStatus = function (model) {
	return model.loadingStatus;
};
var author$project$Internals$ToolHelpers$toolLoadingView = F2(
	function (s, model) {
		return A2(
			mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$text(s),
					function () {
					var _n0 = model.loadingStatus;
					switch (_n0.$) {
						case 'ToolLoadingWaiting':
							return A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$color(
										A3(mdgriffith$elm_ui$Element$rgb, 1, 195 / 255, 0))
									]),
								mdgriffith$elm_ui$Element$text('En cours...'));
						case 'ToolLoadingSuccess':
							return A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$color(
										A3(mdgriffith$elm_ui$Element$rgb, 60 / 255, 179 / 255, 113 / 255))
									]),
								mdgriffith$elm_ui$Element$text('Terminé!'));
						default:
							return A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$color(
										A3(mdgriffith$elm_ui$Element$rgb, 1, 0, 0))
									]),
								mdgriffith$elm_ui$Element$text('Echec'));
					}
				}()
				]));
	});
var author$project$FileExplorer$FileExplorer$loadingView = function (model) {
	return A2(author$project$Internals$ToolHelpers$toolLoadingView, 'Chargement Explorateur de fichiers: ', model);
};
var author$project$FileExplorer$FileExplorer$GoTo = F2(
	function (a, b) {
		return {$: 'GoTo', a: a, b: b};
	});
var author$project$FileExplorer$FileExplorer$NoOp = {$: 'NoOp'};
var author$project$FileExplorer$FileExplorer$SelectFsItem = F2(
	function (a, b) {
		return {$: 'SelectFsItem', a: a, b: b};
	});
var author$project$FileExplorer$FileExplorer$onDoubleClick = function (msg) {
	var preventIfDoubleClick = function (n) {
		return (n > 1) ? _Utils_Tuple2(msg, true) : _Utils_Tuple2(author$project$FileExplorer$FileExplorer$NoOp, false);
	};
	var decodeNbrClicks = A2(
		elm$json$Json$Decode$at,
		_List_fromArray(
			['detail']),
		elm$json$Json$Decode$int);
	return mdgriffith$elm_ui$Element$htmlAttribute(
		A2(
			elm$html$Html$Events$preventDefaultOn,
			'mousedown',
			A2(elm$json$Json$Decode$map, preventIfDoubleClick, decodeNbrClicks)));
};
var author$project$FileExplorer$FileExplorer$customJoin = F4(
	function (acc, n, s, xs) {
		customJoin:
		while (true) {
			if (!xs.b) {
				return A2(
					elm$core$String$join,
					s,
					elm$core$List$reverse(acc));
			} else {
				if (xs.b.b) {
					var xs1 = xs.a;
					var _n1 = xs.b;
					var xs2 = _n1.a;
					var rest = _n1.b;
					if ((_Utils_cmp(
						elm$core$String$length(xs1) + elm$core$String$length(xs2),
						n) < 1) && (A2(elm$core$String$contains, '.', xs1) || A2(elm$core$String$contains, '.', xs2))) {
						var $temp$acc = A2(
							elm$core$List$cons,
							_Utils_ap(xs1, xs2),
							acc),
							$temp$n = n,
							$temp$s = s,
							$temp$xs = rest;
						acc = $temp$acc;
						n = $temp$n;
						s = $temp$s;
						xs = $temp$xs;
						continue customJoin;
					} else {
						var $temp$acc = A2(elm$core$List$cons, xs1, acc),
							$temp$n = n,
							$temp$s = s,
							$temp$xs = A2(elm$core$List$cons, xs2, rest);
						acc = $temp$acc;
						n = $temp$n;
						s = $temp$s;
						xs = $temp$xs;
						continue customJoin;
					}
				} else {
					var xs1 = xs.a;
					var rest = xs.b;
					var $temp$acc = A2(elm$core$List$cons, xs1, acc),
						$temp$n = n,
						$temp$s = s,
						$temp$xs = rest;
					acc = $temp$acc;
					n = $temp$n;
					s = $temp$s;
					xs = $temp$xs;
					continue customJoin;
				}
			}
		}
	});
var author$project$FileExplorer$FileExplorer$prettyName = F2(
	function (name, n) {
		return A4(
			author$project$FileExplorer$FileExplorer$customJoin,
			_List_Nil,
			n,
			' ',
			function (xs) {
				return (elm$core$List$length(xs) > 3) ? A2(
					elm$core$List$take,
					3,
					A2(
						elm$core$List$indexedMap,
						F2(
							function (i, s) {
								return (i === 2) ? ((elm$core$String$length(s) >= 7) ? (A2(elm$core$String$left, 7, s) + '...') : (s + '...')) : s;
							}),
						xs)) : xs;
			}(
				A2(
					elm$core$List$concatMap,
					elm_community$string_extra$String$Extra$break(n),
					A2(
						elm$core$List$concatMap,
						function (s) {
							var l = elm$core$String$length(s);
							return (_Utils_cmp(l, n) > -1) ? elm$core$String$words(
								A2(
									elm$core$String$join,
									' .',
									A2(elm$core$String$split, '.', s))) : _List_fromArray(
								[s]);
						},
						elm$core$String$words(name)))));
	});
var elm$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _n0) {
				var trues = _n0.a;
				var falses = _n0.b;
				return pred(x) ? _Utils_Tuple2(
					A2(elm$core$List$cons, x, trues),
					falses) : _Utils_Tuple2(
					trues,
					A2(elm$core$List$cons, x, falses));
			});
		return A3(
			elm$core$List$foldr,
			step,
			_Utils_Tuple2(_List_Nil, _List_Nil),
			list);
	});
var mdgriffith$elm_ui$Internal$Model$CenterX = {$: 'CenterX'};
var mdgriffith$elm_ui$Element$centerX = mdgriffith$elm_ui$Internal$Model$AlignX(mdgriffith$elm_ui$Internal$Model$CenterX);
var mdgriffith$elm_ui$Internal$Flag$overflow = mdgriffith$elm_ui$Internal$Flag$flag(20);
var mdgriffith$elm_ui$Element$clip = A2(mdgriffith$elm_ui$Internal$Model$Class, mdgriffith$elm_ui$Internal$Flag$overflow, mdgriffith$elm_ui$Internal$Style$classes.clip);
var mdgriffith$elm_ui$Element$scrollbarY = A2(mdgriffith$elm_ui$Internal$Model$Class, mdgriffith$elm_ui$Internal$Flag$overflow, mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY);
var mdgriffith$elm_ui$Element$Background$uncropped = function (src) {
	return mdgriffith$elm_ui$Internal$Model$Attr(
		A2(elm$virtual_dom$VirtualDom$style, 'background', 'url(\"' + (src + '\") center / contain no-repeat')));
};
var author$project$FileExplorer$FileExplorer$filesysView = F2(
	function (config, model) {
		var folderView = F2(
			function (folder, _n11) {
				var name = _n11.name;
				var path = _n11.path;
				return A2(
					mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$padding(7),
								mdgriffith$elm_ui$Element$Border$rounded(5),
								mdgriffith$elm_ui$Element$mouseOver(
								function () {
									var _n9 = A2(
										elm$core$Maybe$map,
										function (fsItem) {
											return _Utils_eq(
												author$project$FileExplorer$FileExplorer$getPath(fsItem),
												path);
										},
										model.selectedFsItem);
									if ((_n9.$ === 'Just') && _n9.a) {
										return _List_Nil;
									} else {
										return _List_fromArray(
											[
												mdgriffith$elm_ui$Element$Background$color(
												A4(mdgriffith$elm_ui$Element$rgba, 0.3, 0.4, 0.6, 0.3))
											]);
									}
								}()),
								mdgriffith$elm_ui$Element$htmlAttribute(
								A2(elm$html$Html$Attributes$style, 'transition', '0.1s')),
								mdgriffith$elm_ui$Element$alignTop,
								function () {
								var _n10 = A2(
									elm$core$Maybe$map,
									function (fsItem) {
										return _Utils_eq(
											author$project$FileExplorer$FileExplorer$getPath(fsItem),
											path);
									},
									model.selectedFsItem);
								if ((_n10.$ === 'Just') && _n10.a) {
									return mdgriffith$elm_ui$Element$Background$color(
										A4(mdgriffith$elm_ui$Element$rgba, 0.3, 0.4, 0.6, 0.5));
								} else {
									return author$project$Internals$CommonStyleHelpers$noAttr;
								}
							}()
							]),
						A2(elm$core$List$member, folder, model.lockedFsItems) ? _List_fromArray(
							[
								mdgriffith$elm_ui$Element$alpha(0.5),
								author$project$FileExplorer$FileExplorer$onDoubleClick(author$project$FileExplorer$FileExplorer$NoOp)
							]) : _List_fromArray(
							[
								mdgriffith$elm_ui$Element$pointer,
								mdgriffith$elm_ui$Element$Events$onClick(
								A2(author$project$FileExplorer$FileExplorer$SelectFsItem, config.mode, folder)),
								author$project$FileExplorer$FileExplorer$onDoubleClick(
								A2(author$project$FileExplorer$FileExplorer$GoTo, config.mode, path))
							])),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$width(
									mdgriffith$elm_ui$Element$px(80)),
									mdgriffith$elm_ui$Element$height(
									mdgriffith$elm_ui$Element$px(80)),
									mdgriffith$elm_ui$Element$Background$color(
									A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
									mdgriffith$elm_ui$Element$Background$uncropped('assets/images/folder.svg')
								]),
							mdgriffith$elm_ui$Element$none),
							A2(
							mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$width(
									mdgriffith$elm_ui$Element$px(80)),
									mdgriffith$elm_ui$Element$clip,
									mdgriffith$elm_ui$Element$Font$size(12),
									mdgriffith$elm_ui$Element$Font$center,
									A2(mdgriffith$elm_ui$Element$paddingXY, 0, 5)
								]),
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$text(
									A2(author$project$FileExplorer$FileExplorer$prettyName, name, 10))
								]))
						]));
			});
		var fileView = F2(
			function (file, _n8) {
				var name = _n8.name;
				var path = _n8.path;
				var fileType = _n8.fileType;
				return A2(
					mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$padding(7),
								mdgriffith$elm_ui$Element$mouseOver(
								function () {
									var _n5 = A2(
										elm$core$Maybe$map,
										function (fsItem) {
											return _Utils_eq(
												author$project$FileExplorer$FileExplorer$getPath(fsItem),
												path);
										},
										model.selectedFsItem);
									if ((_n5.$ === 'Just') && _n5.a) {
										return _List_Nil;
									} else {
										return _List_fromArray(
											[
												mdgriffith$elm_ui$Element$Background$color(
												A4(mdgriffith$elm_ui$Element$rgba, 0.3, 0.4, 0.6, 0.3))
											]);
									}
								}()),
								mdgriffith$elm_ui$Element$Border$rounded(5),
								function () {
								var _n6 = A2(
									elm$core$Maybe$map,
									function (fsItem) {
										return _Utils_eq(
											author$project$FileExplorer$FileExplorer$getPath(fsItem),
											path);
									},
									model.selectedFsItem);
								if ((_n6.$ === 'Just') && _n6.a) {
									return mdgriffith$elm_ui$Element$Background$color(
										A4(mdgriffith$elm_ui$Element$rgba, 0.3, 0.4, 0.6, 0.5));
								} else {
									return author$project$Internals$CommonStyleHelpers$noAttr;
								}
							}(),
								author$project$FileExplorer$FileExplorer$onDoubleClick(author$project$FileExplorer$FileExplorer$NoOp),
								mdgriffith$elm_ui$Element$alignTop
							]),
						A2(elm$core$List$member, file, model.lockedFsItems) ? _List_fromArray(
							[
								mdgriffith$elm_ui$Element$alpha(0.5)
							]) : _List_fromArray(
							[
								mdgriffith$elm_ui$Element$pointer,
								mdgriffith$elm_ui$Element$Events$onClick(
								A2(author$project$FileExplorer$FileExplorer$SelectFsItem, config.mode, file))
							])),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$width(
									mdgriffith$elm_ui$Element$px(80)),
									mdgriffith$elm_ui$Element$height(
									mdgriffith$elm_ui$Element$px(80)),
									mdgriffith$elm_ui$Element$Background$color(
									A3(mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95)),
									mdgriffith$elm_ui$Element$Border$rounded(5),
									mdgriffith$elm_ui$Element$padding(0),
									mdgriffith$elm_ui$Element$spacing(0),
									mdgriffith$elm_ui$Element$htmlAttribute(
									A2(elm$html$Html$Attributes$style, 'transition', '0.1s'))
								]),
							A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(67)),
										mdgriffith$elm_ui$Element$height(
										mdgriffith$elm_ui$Element$px(67)),
										function () {
										if (fileType.$ === 'ImageFile') {
											return mdgriffith$elm_ui$Element$Background$uncropped(
												A2(elm$core$String$join, '/', path));
										} else {
											return A2(elm$core$String$contains, '.pdf', name) ? mdgriffith$elm_ui$Element$Background$uncropped('/assets/images/pdf.svg') : (A2(elm$core$String$contains, '.ppt', name) ? mdgriffith$elm_ui$Element$Background$uncropped('/assets/images/ppt.svg') : (A2(elm$core$String$contains, '.doc', name) ? mdgriffith$elm_ui$Element$Background$uncropped('/assets/images/doc.svg') : mdgriffith$elm_ui$Element$Background$uncropped('/assets/images/file.svg')));
										}
									}(),
										mdgriffith$elm_ui$Element$Background$color(
										A4(mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 1)),
										mdgriffith$elm_ui$Element$centerX,
										mdgriffith$elm_ui$Element$centerY
									]),
								mdgriffith$elm_ui$Element$none)),
							A2(
							mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$width(
									mdgriffith$elm_ui$Element$px(80)),
									mdgriffith$elm_ui$Element$clip,
									mdgriffith$elm_ui$Element$Font$size(12),
									A2(mdgriffith$elm_ui$Element$paddingXY, 0, 5),
									mdgriffith$elm_ui$Element$Font$center
								]),
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$text(
									A2(author$project$FileExplorer$FileExplorer$prettyName, name, 10))
								]))
						]));
			});
		var contentView = function (fsItem) {
			if (fsItem.$ === 'File') {
				var meta = fsItem.a;
				return A2(fileView, fsItem, meta);
			} else {
				var meta = fsItem.a;
				return A2(folderView, fsItem, meta);
			}
		};
		var _n0 = A2(author$project$FileExplorer$FileExplorer$getCurrentFilesys, config.mode, model);
		if (_n0.$ === 'Nothing') {
			return A2(
				mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[mdgriffith$elm_ui$Element$alignTop]),
				mdgriffith$elm_ui$Element$text('Erreur système de fichier'));
		} else {
			var filesys = _n0.a;
			var _n1 = author$project$FileExplorer$FileExplorer$extractFsItem(filesys);
			if (_n1.$ === 'File') {
				var meta = _n1.a;
				return A2(
					fileView,
					author$project$FileExplorer$FileExplorer$File(meta),
					meta);
			} else {
				var meta = _n1.a;
				var contents = _n1.b;
				return A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$scrollbarY,
							mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
							mdgriffith$elm_ui$Element$alignTop,
							mdgriffith$elm_ui$Element$padding(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(5)
								]),
							A2(
								elm$core$List$map,
								contentView,
								function (_n3) {
									var files = _n3.a;
									var folders = _n3.b;
									return _Utils_ap(
										A2(elm$core$List$sortBy, author$project$FileExplorer$FileExplorer$getName, folders),
										A2(elm$core$List$sortBy, author$project$FileExplorer$FileExplorer$getName, files));
								}(
									A2(
										elm$core$List$partition,
										function (f) {
											if (f.$ === 'File') {
												return true;
											} else {
												return false;
											}
										},
										contents))))
						]));
			}
		}
	});
var author$project$FileExplorer$FileExplorer$logsView = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$scrollbarY,
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$alignTop,
					mdgriffith$elm_ui$Element$padding(15)
				]),
			_List_fromArray(
				[
					A2(author$project$Internals$CommonHelpers$logsView, model.logs, config.zone)
				]));
	});
var author$project$FileExplorer$FileExplorer$GoHome = function (a) {
	return {$: 'GoHome', a: a};
};
var author$project$FileExplorer$FileExplorer$GoNext = function (a) {
	return {$: 'GoNext', a: a};
};
var author$project$FileExplorer$FileExplorer$GoPrev = function (a) {
	return {$: 'GoPrev', a: a};
};
var author$project$FileExplorer$FileExplorer$SetRoot = function (a) {
	return {$: 'SetRoot', a: a};
};
var author$project$FileExplorer$FileExplorer$ToogleLogsView = {$: 'ToogleLogsView'};
var mdgriffith$elm_ui$Internal$Model$Padding = F5(
	function (a, b, c, d, e) {
		return {$: 'Padding', a: a, b: b, c: c, d: d, e: e};
	});
var mdgriffith$elm_ui$Internal$Model$Spaced = F3(
	function (a, b, c) {
		return {$: 'Spaced', a: a, b: b, c: c};
	});
var mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding = function (attrs) {
	return A3(
		elm$core$List$foldr,
		F2(
			function (attr, _n0) {
				var pad = _n0.a;
				var spacing = _n0.b;
				return _Utils_Tuple2(
					function () {
						if (pad.$ === 'Just') {
							var x = pad.a;
							return pad;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'PaddingStyle')) {
								var _n3 = attr.b;
								var name = _n3.a;
								var t = _n3.b;
								var r = _n3.c;
								var b = _n3.d;
								var l = _n3.e;
								return elm$core$Maybe$Just(
									A5(mdgriffith$elm_ui$Internal$Model$Padding, name, t, r, b, l));
							} else {
								return elm$core$Maybe$Nothing;
							}
						}
					}(),
					function () {
						if (spacing.$ === 'Just') {
							var x = spacing.a;
							return spacing;
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
								var _n6 = attr.b;
								var name = _n6.a;
								var x = _n6.b;
								var y = _n6.c;
								return elm$core$Maybe$Just(
									A3(mdgriffith$elm_ui$Internal$Model$Spaced, name, x, y));
							} else {
								return elm$core$Maybe$Nothing;
							}
						}
					}());
			}),
		_Utils_Tuple2(elm$core$Maybe$Nothing, elm$core$Maybe$Nothing),
		attrs);
};
var mdgriffith$elm_ui$Element$wrappedRow = F2(
	function (attrs, children) {
		var _n0 = mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding(attrs);
		var padded = _n0.a;
		var spaced = _n0.b;
		if (spaced.$ === 'Nothing') {
			return A4(
				mdgriffith$elm_ui$Internal$Model$element,
				mdgriffith$elm_ui$Internal$Model$asRow,
				mdgriffith$elm_ui$Internal$Model$div,
				A2(
					elm$core$List$cons,
					mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + (mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
					A2(
						elm$core$List$cons,
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$shrink),
						A2(
							elm$core$List$cons,
							mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$shrink),
							attrs))),
				mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
		} else {
			var _n2 = spaced.a;
			var spaceName = _n2.a;
			var x = _n2.b;
			var y = _n2.c;
			var newPadding = function () {
				if (padded.$ === 'Just') {
					var _n5 = padded.a;
					var name = _n5.a;
					var t = _n5.b;
					var r = _n5.c;
					var b = _n5.d;
					var l = _n5.e;
					return ((_Utils_cmp(r, (x / 2) | 0) > -1) && (_Utils_cmp(b, (y / 2) | 0) > -1)) ? elm$core$Maybe$Just(
						mdgriffith$elm_ui$Element$paddingEach(
							{bottom: b - ((y / 2) | 0), left: l - ((x / 2) | 0), right: r - ((x / 2) | 0), top: t - ((y / 2) | 0)})) : elm$core$Maybe$Nothing;
				} else {
					return elm$core$Maybe$Nothing;
				}
			}();
			if (newPadding.$ === 'Just') {
				var pad = newPadding.a;
				return A4(
					mdgriffith$elm_ui$Internal$Model$element,
					mdgriffith$elm_ui$Internal$Model$asRow,
					mdgriffith$elm_ui$Internal$Model$div,
					A2(
						elm$core$List$cons,
						mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + (mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
						A2(
							elm$core$List$cons,
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$shrink),
							A2(
								elm$core$List$cons,
								mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$shrink),
								_Utils_ap(
									attrs,
									_List_fromArray(
										[pad]))))),
					mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
			} else {
				var halfY = -(y / 2);
				var halfX = -(x / 2);
				return A4(
					mdgriffith$elm_ui$Internal$Model$element,
					mdgriffith$elm_ui$Internal$Model$asEl,
					mdgriffith$elm_ui$Internal$Model$div,
					attrs,
					mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								mdgriffith$elm_ui$Internal$Model$element,
								mdgriffith$elm_ui$Internal$Model$asRow,
								mdgriffith$elm_ui$Internal$Model$div,
								A2(
									elm$core$List$cons,
									mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + (mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + mdgriffith$elm_ui$Internal$Style$classes.wrapped)))),
									A2(
										elm$core$List$cons,
										mdgriffith$elm_ui$Internal$Model$Attr(
											A2(
												elm$html$Html$Attributes$style,
												'margin',
												elm$core$String$fromFloat(halfY) + ('px' + (' ' + (elm$core$String$fromFloat(halfX) + 'px'))))),
										A2(
											elm$core$List$cons,
											mdgriffith$elm_ui$Internal$Model$Attr(
												A2(
													elm$html$Html$Attributes$style,
													'width',
													'calc(100% + ' + (elm$core$String$fromInt(x) + 'px)'))),
											A2(
												elm$core$List$cons,
												mdgriffith$elm_ui$Internal$Model$Attr(
													A2(
														elm$html$Html$Attributes$style,
														'height',
														'calc(100% + ' + (elm$core$String$fromInt(y) + 'px)'))),
												A2(
													elm$core$List$cons,
													A2(
														mdgriffith$elm_ui$Internal$Model$StyleClass,
														mdgriffith$elm_ui$Internal$Flag$spacing,
														A3(mdgriffith$elm_ui$Internal$Model$SpacingStyle, spaceName, x, y)),
													_List_Nil))))),
								mdgriffith$elm_ui$Internal$Model$Unkeyed(children))
							])));
			}
		}
	});
var author$project$FileExplorer$FileExplorer$clickablePath = F2(
	function (config, model) {
		var getEveryPaths = F2(
			function (acc, path) {
				getEveryPaths:
				while (true) {
					if (!path.b) {
						return acc;
					} else {
						var current = path.a;
						var rest = path.b;
						var $temp$acc = A2(
							elm$core$List$cons,
							_Utils_Tuple2(
								current,
								elm$core$List$reverse(path)),
							acc),
							$temp$path = rest;
						acc = $temp$acc;
						path = $temp$path;
						continue getEveryPaths;
					}
				}
			});
		var fsItemView = function (_n1) {
			var f = _n1.a;
			var p = _n1.b;
			return A2(
				mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$Events$onClick(
						A2(author$project$FileExplorer$FileExplorer$GoTo, config.mode, p)),
						A2(mdgriffith$elm_ui$Element$paddingXY, 2, 4),
						mdgriffith$elm_ui$Element$pointer,
						mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Font$color(
								A4(mdgriffith$elm_ui$Element$rgba, 0.3, 0.4, 0.6, 0.5))
							]))
					]),
				mdgriffith$elm_ui$Element$text(f));
		};
		return A2(
			mdgriffith$elm_ui$Element$wrappedRow,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$Background$color(
					A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
					mdgriffith$elm_ui$Element$padding(4),
					mdgriffith$elm_ui$Element$Border$rounded(5)
				]),
			function (res) {
				return A2(
					elm$core$List$cons,
					mdgriffith$elm_ui$Element$text('/'),
					res);
			}(
				A2(
					elm$core$List$intersperse,
					mdgriffith$elm_ui$Element$text('/'),
					A2(
						elm$core$List$map,
						fsItemView,
						A2(
							getEveryPaths,
							_List_Nil,
							elm$core$List$reverse(
								A2(
									elm$core$Maybe$withDefault,
									_List_Nil,
									A2(
										elm$core$Maybe$map,
										author$project$FileExplorer$FileExplorer$getPath,
										A2(
											elm$core$Maybe$map,
											author$project$FileExplorer$FileExplorer$extractFsItem,
											A2(author$project$FileExplorer$FileExplorer$getCurrentFilesys, config.mode, model))))))))));
	});
var author$project$Internals$CommonStyleHelpers$toogleButtonStyle = F2(
	function (isPressed, isActive) {
		return _Utils_ap(
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$Border$rounded(5),
					mdgriffith$elm_ui$Element$Font$center,
					mdgriffith$elm_ui$Element$centerY,
					mdgriffith$elm_ui$Element$padding(5),
					mdgriffith$elm_ui$Element$focused(
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Border$glow,
							A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
							0)
						]))
				]),
			isActive ? _Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$Background$color(
						A3(mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9)),
						mdgriffith$elm_ui$Element$Border$width(1),
						mdgriffith$elm_ui$Element$Border$color(
						A3(mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9)),
						mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Font$color(
								A3(mdgriffith$elm_ui$Element$rgb, 0.3, 0.3, 0.3))
							]))
					]),
				isPressed ? _List_Nil : _List_fromArray(
					[
						mdgriffith$elm_ui$Element$Background$color(
						A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
						mdgriffith$elm_ui$Element$Border$width(1),
						mdgriffith$elm_ui$Element$Border$color(
						A3(mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
					])) : _List_fromArray(
				[
					mdgriffith$elm_ui$Element$Background$color(
					A3(mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95)),
					mdgriffith$elm_ui$Element$Font$color(
					A3(mdgriffith$elm_ui$Element$rgb, 0.7, 0.7, 0.7)),
					mdgriffith$elm_ui$Element$htmlAttribute(
					A2(elm$html$Html$Attributes$style, 'cursor', 'default')),
					mdgriffith$elm_ui$Element$Border$width(1),
					mdgriffith$elm_ui$Element$Border$color(
					A3(mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95))
				]));
	});
var elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var elm$svg$Svg$svg = elm$svg$Svg$trustedNode('svg');
var elm$svg$Svg$Attributes$class = _VirtualDom_attribute('class');
var elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');
var elm$svg$Svg$Attributes$strokeLinecap = _VirtualDom_attribute('stroke-linecap');
var elm$svg$Svg$Attributes$strokeLinejoin = _VirtualDom_attribute('stroke-linejoin');
var elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');
var elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var author$project$Internals$Icons$customSvgFeatherIcon = F2(
	function (size, className) {
		return elm$svg$Svg$svg(
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$class('feather feather-' + className),
					elm$svg$Svg$Attributes$fill('none'),
					elm$svg$Svg$Attributes$height(
					elm$core$String$fromInt(size)),
					elm$svg$Svg$Attributes$stroke('currentColor'),
					elm$svg$Svg$Attributes$strokeLinecap('round'),
					elm$svg$Svg$Attributes$strokeLinejoin('round'),
					elm$svg$Svg$Attributes$strokeWidth('2'),
					elm$svg$Svg$Attributes$viewBox('0 0 24 24'),
					elm$svg$Svg$Attributes$width(
					elm$core$String$fromInt(size))
				]));
	});
var elm$svg$Svg$polyline = elm$svg$Svg$trustedNode('polyline');
var elm$svg$Svg$Attributes$points = _VirtualDom_attribute('points');
var author$project$Internals$Icons$chevronLeft = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'chevron-left',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$polyline,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$points('15 18 9 12 15 6')
					]),
				_List_Nil)
			]));
};
var author$project$Internals$Icons$chevronRight = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'chevron-right',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$polyline,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$points('9 18 15 12 9 6')
					]),
				_List_Nil)
			]));
};
var elm$svg$Svg$line = elm$svg$Svg$trustedNode('line');
var elm$svg$Svg$path = elm$svg$Svg$trustedNode('path');
var elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var elm$svg$Svg$Attributes$x1 = _VirtualDom_attribute('x1');
var elm$svg$Svg$Attributes$x2 = _VirtualDom_attribute('x2');
var elm$svg$Svg$Attributes$y1 = _VirtualDom_attribute('y1');
var elm$svg$Svg$Attributes$y2 = _VirtualDom_attribute('y2');
var author$project$Internals$Icons$fileText = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'file-text',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$path,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$d('M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$polyline,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$points('14 2 14 8 20 8')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('16'),
						elm$svg$Svg$Attributes$y1('13'),
						elm$svg$Svg$Attributes$x2('8'),
						elm$svg$Svg$Attributes$y2('13')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('16'),
						elm$svg$Svg$Attributes$y1('17'),
						elm$svg$Svg$Attributes$x2('8'),
						elm$svg$Svg$Attributes$y2('17')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$polyline,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$points('10 9 9 9 8 9')
					]),
				_List_Nil)
			]));
};
var author$project$Internals$Icons$home = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'home',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$path,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$d('M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$polyline,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$points('9 22 9 12 15 12 15 22')
					]),
				_List_Nil)
			]));
};
var elm$svg$Svg$circle = elm$svg$Svg$trustedNode('circle');
var elm$svg$Svg$rect = elm$svg$Svg$trustedNode('rect');
var elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');
var elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');
var elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');
var elm$svg$Svg$Attributes$rx = _VirtualDom_attribute('rx');
var elm$svg$Svg$Attributes$ry = _VirtualDom_attribute('ry');
var elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var author$project$Internals$Icons$imageIcon = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'image',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$rect,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x('3'),
						elm$svg$Svg$Attributes$y('3'),
						elm$svg$Svg$Attributes$width('18'),
						elm$svg$Svg$Attributes$height('18'),
						elm$svg$Svg$Attributes$rx('2'),
						elm$svg$Svg$Attributes$ry('2')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$circle,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$cx('8.5'),
						elm$svg$Svg$Attributes$cy('8.5'),
						elm$svg$Svg$Attributes$r('1.5')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$polyline,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$points('21 15 16 10 5 21')
					]),
				_List_Nil)
			]));
};
var author$project$Internals$Icons$list = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'list',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('8'),
						elm$svg$Svg$Attributes$y1('6'),
						elm$svg$Svg$Attributes$x2('21'),
						elm$svg$Svg$Attributes$y2('6')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('8'),
						elm$svg$Svg$Attributes$y1('12'),
						elm$svg$Svg$Attributes$x2('21'),
						elm$svg$Svg$Attributes$y2('12')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('8'),
						elm$svg$Svg$Attributes$y1('18'),
						elm$svg$Svg$Attributes$x2('21'),
						elm$svg$Svg$Attributes$y2('18')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('3'),
						elm$svg$Svg$Attributes$y1('6'),
						elm$svg$Svg$Attributes$x2('3'),
						elm$svg$Svg$Attributes$y2('6')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('3'),
						elm$svg$Svg$Attributes$y1('12'),
						elm$svg$Svg$Attributes$x2('3'),
						elm$svg$Svg$Attributes$y2('12')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('3'),
						elm$svg$Svg$Attributes$y1('18'),
						elm$svg$Svg$Attributes$x2('3'),
						elm$svg$Svg$Attributes$y2('18')
					]),
				_List_Nil)
			]));
};
var mdgriffith$elm_ui$Element$html = mdgriffith$elm_ui$Internal$Model$unstyled;
var author$project$FileExplorer$FileExplorer$mainInterface = F2(
	function (config, model) {
		var iconSize = 22;
		return A2(
			mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$Background$color(
					A3(mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95)),
					A2(mdgriffith$elm_ui$Element$paddingXY, 15, 10)
				]),
			_List_fromArray(
				[
					_Utils_eq(config.mode, author$project$FileExplorer$FileExplorer$Full) ? A2(
					mdgriffith$elm_ui$Element$Input$button,
					A2(
						author$project$Internals$CommonStyleHelpers$toogleButtonStyle,
						_Utils_eq(model.root, author$project$FileExplorer$FileExplorer$DocsRoot),
						true),
					{
						label: A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$html(
									author$project$Internals$Icons$fileText(iconSize))
								])),
						onPress: elm$core$Maybe$Just(
							author$project$FileExplorer$FileExplorer$SetRoot(author$project$FileExplorer$FileExplorer$DocsRoot))
					}) : mdgriffith$elm_ui$Element$none,
					_Utils_eq(config.mode, author$project$FileExplorer$FileExplorer$Full) ? A2(
					mdgriffith$elm_ui$Element$Input$button,
					A2(
						author$project$Internals$CommonStyleHelpers$toogleButtonStyle,
						_Utils_eq(model.root, author$project$FileExplorer$FileExplorer$ImagesRoot),
						true),
					{
						label: A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$html(
									author$project$Internals$Icons$imageIcon(iconSize))
								])),
						onPress: elm$core$Maybe$Just(
							author$project$FileExplorer$FileExplorer$SetRoot(author$project$FileExplorer$FileExplorer$ImagesRoot))
					}) : mdgriffith$elm_ui$Element$none,
					A2(
					mdgriffith$elm_ui$Element$Input$button,
					author$project$Internals$CommonStyleHelpers$buttonStyle(true),
					{
						label: A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$html(
									author$project$Internals$Icons$chevronLeft(iconSize))
								])),
						onPress: elm$core$Maybe$Just(
							author$project$FileExplorer$FileExplorer$GoPrev(config.mode))
					}),
					A2(
					mdgriffith$elm_ui$Element$Input$button,
					author$project$Internals$CommonStyleHelpers$buttonStyle(
						!_Utils_eq(model.lastLocation, elm$core$Maybe$Nothing)),
					{
						label: A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$html(
									author$project$Internals$Icons$chevronRight(iconSize))
								])),
						onPress: (!_Utils_eq(model.lastLocation, elm$core$Maybe$Nothing)) ? elm$core$Maybe$Just(
							author$project$FileExplorer$FileExplorer$GoNext(config.mode)) : elm$core$Maybe$Nothing
					}),
					A2(
					mdgriffith$elm_ui$Element$Input$button,
					author$project$Internals$CommonStyleHelpers$buttonStyle(true),
					{
						label: A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$html(
									author$project$Internals$Icons$home(iconSize))
								])),
						onPress: elm$core$Maybe$Just(
							author$project$FileExplorer$FileExplorer$GoHome(config.mode))
					}),
					A2(author$project$FileExplorer$FileExplorer$clickablePath, config, model),
					function () {
					var _n0 = config.mode;
					if (_n0.$ === 'ReadOnly') {
						return mdgriffith$elm_ui$Element$none;
					} else {
						return A2(
							mdgriffith$elm_ui$Element$Input$button,
							A2(
								author$project$Internals$CommonStyleHelpers$toogleButtonStyle,
								_Utils_eq(model.mainPanelDisplay, author$project$FileExplorer$FileExplorer$LogsDisplay),
								!_Utils_eq(model.mainPanelDisplay, author$project$FileExplorer$FileExplorer$UploadDisplay)),
							{
								label: A2(
									mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$html(
											author$project$Internals$Icons$list(iconSize))
										])),
								onPress: elm$core$Maybe$Just(author$project$FileExplorer$FileExplorer$ToogleLogsView)
							});
					}
				}()
				]));
	});
var author$project$FileExplorer$FileExplorer$Cut = function (a) {
	return {$: 'Cut', a: a};
};
var author$project$FileExplorer$FileExplorer$Delete = F2(
	function (a, b) {
		return {$: 'Delete', a: a, b: b};
	});
var author$project$FileExplorer$FileExplorer$NewFolder = F2(
	function (a, b) {
		return {$: 'NewFolder', a: a, b: b};
	});
var author$project$FileExplorer$FileExplorer$NewFolderInput = function (a) {
	return {$: 'NewFolderInput', a: a};
};
var author$project$FileExplorer$FileExplorer$Paste = F2(
	function (a, b) {
		return {$: 'Paste', a: a, b: b};
	});
var author$project$FileExplorer$FileExplorer$ReadOnly = function (a) {
	return {$: 'ReadOnly', a: a};
};
var author$project$FileExplorer$FileExplorer$Rename = F2(
	function (a, b) {
		return {$: 'Rename', a: a, b: b};
	});
var author$project$FileExplorer$FileExplorer$RenameInput = function (a) {
	return {$: 'RenameInput', a: a};
};
var author$project$FileExplorer$FileExplorer$ToogleUploadView = {$: 'ToogleUploadView'};
var author$project$FileExplorer$FileExplorer$compileFolderInfo = function (fsItem) {
	var helper = F2(
		function (fsItem_, acc) {
			var nbrFiles = acc.nbrFiles;
			var size = acc.size;
			var nbrFolders = acc.nbrFolders;
			if (fsItem_.$ === 'File') {
				var fileSize = fsItem_.a.fileSize;
				return _Utils_update(
					acc,
					{
						nbrFiles: nbrFiles + 1,
						size: A2(elm$core$Maybe$withDefault, 0, fileSize) + size
					});
			} else {
				var children = fsItem_.b;
				return A3(
					elm$core$List$foldr,
					F2(
						function (f, acc_) {
							return A2(helper, f, acc_);
						}),
					_Utils_update(
						acc,
						{nbrFolders: acc.nbrFolders + 1}),
					children);
			}
		});
	return A2(
		helper,
		fsItem,
		{nbrFiles: 0, nbrFolders: -1, size: 0});
};
var author$project$Internals$Icons$folderPlus = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'folder-plus',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$path,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$d('M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('12'),
						elm$svg$Svg$Attributes$y1('11'),
						elm$svg$Svg$Attributes$x2('12'),
						elm$svg$Svg$Attributes$y2('17')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('9'),
						elm$svg$Svg$Attributes$y1('14'),
						elm$svg$Svg$Attributes$x2('15'),
						elm$svg$Svg$Attributes$y2('14')
					]),
				_List_Nil)
			]));
};
var author$project$Internals$Icons$scissors = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'scissors',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$circle,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$cx('6'),
						elm$svg$Svg$Attributes$cy('6'),
						elm$svg$Svg$Attributes$r('3')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$circle,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$cx('6'),
						elm$svg$Svg$Attributes$cy('18'),
						elm$svg$Svg$Attributes$r('3')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('20'),
						elm$svg$Svg$Attributes$y1('4'),
						elm$svg$Svg$Attributes$x2('8.12'),
						elm$svg$Svg$Attributes$y2('15.88')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('14.47'),
						elm$svg$Svg$Attributes$y1('14.48'),
						elm$svg$Svg$Attributes$x2('20'),
						elm$svg$Svg$Attributes$y2('20')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('8.12'),
						elm$svg$Svg$Attributes$y1('8.12'),
						elm$svg$Svg$Attributes$x2('12'),
						elm$svg$Svg$Attributes$y2('12')
					]),
				_List_Nil)
			]));
};
var author$project$Internals$Icons$upload = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'upload',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$path,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$d('M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$polyline,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$points('17 8 12 3 7 8')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('12'),
						elm$svg$Svg$Attributes$y1('3'),
						elm$svg$Svg$Attributes$x2('12'),
						elm$svg$Svg$Attributes$y2('15')
					]),
				_List_Nil)
			]));
};
var author$project$Internals$Icons$xSquare = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'x-square',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$rect,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x('3'),
						elm$svg$Svg$Attributes$y('3'),
						elm$svg$Svg$Attributes$width('18'),
						elm$svg$Svg$Attributes$height('18'),
						elm$svg$Svg$Attributes$rx('2'),
						elm$svg$Svg$Attributes$ry('2')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('9'),
						elm$svg$Svg$Attributes$y1('9'),
						elm$svg$Svg$Attributes$x2('15'),
						elm$svg$Svg$Attributes$y2('15')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('15'),
						elm$svg$Svg$Attributes$y1('9'),
						elm$svg$Svg$Attributes$x2('9'),
						elm$svg$Svg$Attributes$y2('15')
					]),
				_List_Nil)
			]));
};
var basti1302$elm_human_readable_filesize$Filesize$Base10 = {$: 'Base10'};
var basti1302$elm_human_readable_filesize$Filesize$defaultSettings = {decimalPlaces: 2, decimalSeparator: '.', units: basti1302$elm_human_readable_filesize$Filesize$Base10};
var basti1302$elm_human_readable_filesize$Filesize$base10UnitList = _List_fromArray(
	[
		{abbreviation: 'B', minimumSize: 1},
		{abbreviation: 'kB', minimumSize: 1000},
		{abbreviation: 'MB', minimumSize: 1000000},
		{abbreviation: 'GB', minimumSize: 1000000000},
		{abbreviation: 'TB', minimumSize: 1000000000000},
		{abbreviation: 'PB', minimumSize: 1000000000000000},
		{abbreviation: 'EB', minimumSize: 1000000000000000000}
	]);
var basti1302$elm_human_readable_filesize$Filesize$base2UnitList = _List_fromArray(
	[
		{abbreviation: 'B', minimumSize: 1},
		{abbreviation: 'KiB', minimumSize: 1024},
		{abbreviation: 'MiB', minimumSize: 1048576},
		{abbreviation: 'GiB', minimumSize: 1073741824},
		{abbreviation: 'TiB', minimumSize: 1099511627776},
		{abbreviation: 'PiB', minimumSize: 1125899906842624}
	]);
var basti1302$elm_human_readable_filesize$Filesize$getUnitDefinitionList = function (units) {
	if (units.$ === 'Base10') {
		return basti1302$elm_human_readable_filesize$Filesize$base10UnitList;
	} else {
		return basti1302$elm_human_readable_filesize$Filesize$base2UnitList;
	}
};
var basti1302$elm_human_readable_filesize$Filesize$decimalSeparatorRegex = A2(
	elm$core$Maybe$withDefault,
	elm$regex$Regex$never,
	elm$regex$Regex$fromString('\\.'));
var basti1302$elm_human_readable_filesize$Filesize$removeTrailingZeroesRegex = A2(
	elm$core$Maybe$withDefault,
	elm$regex$Regex$never,
	elm$regex$Regex$fromString('^(\\d+\\.[^0]*)(0+)$'));
var elm$regex$Regex$replaceAtMost = _Regex_replaceAtMost;
var elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var elm$core$Basics$isInfinite = _Basics_isInfinite;
var elm$core$Basics$isNaN = _Basics_isNaN;
var elm$core$String$padRight = F3(
	function (n, _char, string) {
		return _Utils_ap(
			string,
			A2(
				elm$core$String$repeat,
				n - elm$core$String$length(string),
				elm$core$String$fromChar(_char)));
	});
var elm$core$String$reverse = _String_reverse;
var myrho$elm_round$Round$addSign = F2(
	function (signed, str) {
		var isNotZero = A2(
			elm$core$List$any,
			function (c) {
				return (!_Utils_eq(
					c,
					_Utils_chr('0'))) && (!_Utils_eq(
					c,
					_Utils_chr('.')));
			},
			elm$core$String$toList(str));
		return _Utils_ap(
			(signed && isNotZero) ? '-' : '',
			str);
	});
var elm$core$Char$fromCode = _Char_fromCode;
var myrho$elm_round$Round$increaseNum = function (_n0) {
	var head = _n0.a;
	var tail = _n0.b;
	if (_Utils_eq(
		head,
		_Utils_chr('9'))) {
		var _n1 = elm$core$String$uncons(tail);
		if (_n1.$ === 'Nothing') {
			return '01';
		} else {
			var headtail = _n1.a;
			return A2(
				elm$core$String$cons,
				_Utils_chr('0'),
				myrho$elm_round$Round$increaseNum(headtail));
		}
	} else {
		var c = elm$core$Char$toCode(head);
		return ((c >= 48) && (c < 57)) ? A2(
			elm$core$String$cons,
			elm$core$Char$fromCode(c + 1),
			tail) : '0';
	}
};
var myrho$elm_round$Round$splitComma = function (str) {
	var _n0 = A2(elm$core$String$split, '.', str);
	if (_n0.b) {
		if (_n0.b.b) {
			var before = _n0.a;
			var _n1 = _n0.b;
			var after = _n1.a;
			return _Utils_Tuple2(before, after);
		} else {
			var before = _n0.a;
			return _Utils_Tuple2(before, '0');
		}
	} else {
		return _Utils_Tuple2('0', '0');
	}
};
var myrho$elm_round$Round$toDecimal = function (fl) {
	var _n0 = A2(
		elm$core$String$split,
		'e',
		elm$core$String$fromFloat(
			elm$core$Basics$abs(fl)));
	if (_n0.b) {
		if (_n0.b.b) {
			var num = _n0.a;
			var _n1 = _n0.b;
			var exp = _n1.a;
			var e = A2(
				elm$core$Maybe$withDefault,
				0,
				elm$core$String$toInt(
					A2(elm$core$String$startsWith, '+', exp) ? A2(elm$core$String$dropLeft, 1, exp) : exp));
			var _n2 = myrho$elm_round$Round$splitComma(num);
			var before = _n2.a;
			var after = _n2.b;
			var total = _Utils_ap(before, after);
			var zeroed = (e < 0) ? A2(
				elm$core$Maybe$withDefault,
				'0',
				A2(
					elm$core$Maybe$map,
					function (_n3) {
						var a = _n3.a;
						var b = _n3.b;
						return a + ('.' + b);
					},
					A2(
						elm$core$Maybe$map,
						elm$core$Tuple$mapFirst(elm$core$String$fromChar),
						elm$core$String$uncons(
							_Utils_ap(
								A2(
									elm$core$String$repeat,
									elm$core$Basics$abs(e),
									'0'),
								total))))) : A3(
				elm$core$String$padRight,
				e + 1,
				_Utils_chr('0'),
				total);
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				zeroed);
		} else {
			var num = _n0.a;
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				num);
		}
	} else {
		return '';
	}
};
var myrho$elm_round$Round$roundFun = F3(
	function (functor, s, fl) {
		if (elm$core$Basics$isInfinite(fl) || elm$core$Basics$isNaN(fl)) {
			return elm$core$String$fromFloat(fl);
		} else {
			var signed = fl < 0;
			var _n0 = myrho$elm_round$Round$splitComma(
				myrho$elm_round$Round$toDecimal(
					elm$core$Basics$abs(fl)));
			var before = _n0.a;
			var after = _n0.b;
			var r = elm$core$String$length(before) + s;
			var normalized = _Utils_ap(
				A2(elm$core$String$repeat, (-r) + 1, '0'),
				A3(
					elm$core$String$padRight,
					r,
					_Utils_chr('0'),
					_Utils_ap(before, after)));
			var totalLen = elm$core$String$length(normalized);
			var roundDigitIndex = A2(elm$core$Basics$max, 1, r);
			var increase = A2(
				functor,
				signed,
				A3(elm$core$String$slice, roundDigitIndex, totalLen, normalized));
			var remains = A3(elm$core$String$slice, 0, roundDigitIndex, normalized);
			var num = increase ? elm$core$String$reverse(
				A2(
					elm$core$Maybe$withDefault,
					'1',
					A2(
						elm$core$Maybe$map,
						myrho$elm_round$Round$increaseNum,
						elm$core$String$uncons(
							elm$core$String$reverse(remains))))) : remains;
			var numLen = elm$core$String$length(num);
			var numZeroed = (num === '0') ? num : ((s <= 0) ? _Utils_ap(
				num,
				A2(
					elm$core$String$repeat,
					elm$core$Basics$abs(s),
					'0')) : ((_Utils_cmp(
				s,
				elm$core$String$length(after)) < 0) ? (A3(elm$core$String$slice, 0, numLen - s, num) + ('.' + A3(elm$core$String$slice, numLen - s, numLen, num))) : _Utils_ap(
				before + '.',
				A3(
					elm$core$String$padRight,
					s,
					_Utils_chr('0'),
					after))));
			return A2(myrho$elm_round$Round$addSign, signed, numZeroed);
		}
	});
var myrho$elm_round$Round$floor = myrho$elm_round$Round$roundFun(
	F2(
		function (signed, str) {
			var _n0 = elm$core$String$uncons(str);
			if (_n0.$ === 'Nothing') {
				return false;
			} else {
				if ('0' === _n0.a.a.valueOf()) {
					var _n1 = _n0.a;
					var rest = _n1.b;
					return signed && A2(
						elm$core$List$any,
						elm$core$Basics$neq(
							_Utils_chr('0')),
						elm$core$String$toList(rest));
				} else {
					return signed;
				}
			}
		}));
var basti1302$elm_human_readable_filesize$Filesize$roundToDecimalPlaces = F2(
	function (settings, num) {
		var rounded = A2(myrho$elm_round$Round$floor, settings.decimalPlaces, num);
		var withoutTrailingZeroes = A4(
			elm$regex$Regex$replaceAtMost,
			1,
			basti1302$elm_human_readable_filesize$Filesize$removeTrailingZeroesRegex,
			function (_n1) {
				var submatches = _n1.submatches;
				return A2(
					elm$core$String$join,
					'',
					A2(
						elm$core$List$map,
						elm$core$Maybe$withDefault(''),
						A2(elm$core$List$take, 1, submatches)));
			},
			rounded);
		var withoutTrailingDot = A2(elm$core$String$endsWith, '.', withoutTrailingZeroes) ? A2(elm$core$String$dropRight, 1, withoutTrailingZeroes) : withoutTrailingZeroes;
		return (settings.decimalSeparator === '.') ? withoutTrailingDot : A4(
			elm$regex$Regex$replaceAtMost,
			1,
			basti1302$elm_human_readable_filesize$Filesize$decimalSeparatorRegex,
			function (_n0) {
				return settings.decimalSeparator;
			},
			withoutTrailingDot);
	});
var basti1302$elm_human_readable_filesize$Filesize$unknownUnit = {abbreviation: '?', minimumSize: 1};
var basti1302$elm_human_readable_filesize$Filesize$formatWith = F2(
	function (settings, num) {
		if (!num) {
			return '0 B';
		} else {
			var unitDefinitionList = basti1302$elm_human_readable_filesize$Filesize$getUnitDefinitionList(settings.units);
			var _n0 = (num < 0) ? _Utils_Tuple2(-num, '-') : _Utils_Tuple2(num, '');
			var num2 = _n0.a;
			var negativePrefix = _n0.b;
			var unitDefinition = A2(
				elm$core$Maybe$withDefault,
				basti1302$elm_human_readable_filesize$Filesize$unknownUnit,
				elm$core$List$head(
					elm$core$List$reverse(
						A2(
							elm$core$List$filter,
							function (unitDef) {
								return _Utils_cmp(num2, unitDef.minimumSize) > -1;
							},
							unitDefinitionList))));
			var formattedNumber = A2(basti1302$elm_human_readable_filesize$Filesize$roundToDecimalPlaces, settings, num2 / unitDefinition.minimumSize);
			return negativePrefix + (formattedNumber + (' ' + unitDefinition.abbreviation));
		}
	});
var basti1302$elm_human_readable_filesize$Filesize$format = basti1302$elm_human_readable_filesize$Filesize$formatWith(basti1302$elm_human_readable_filesize$Filesize$defaultSettings);
var mdgriffith$elm_ui$Internal$Model$Left = {$: 'Left'};
var mdgriffith$elm_ui$Element$alignLeft = mdgriffith$elm_ui$Internal$Model$AlignX(mdgriffith$elm_ui$Internal$Model$Left);
var mdgriffith$elm_ui$Internal$Model$Right = {$: 'Right'};
var mdgriffith$elm_ui$Element$alignRight = mdgriffith$elm_ui$Internal$Model$AlignX(mdgriffith$elm_ui$Internal$Model$Right);
var elm$html$Html$Attributes$download = function (fileName) {
	return A2(elm$html$Html$Attributes$stringProperty, 'download', fileName);
};
var mdgriffith$elm_ui$Element$download = F2(
	function (attrs, _n0) {
		var url = _n0.url;
		var label = _n0.label;
		return A4(
			mdgriffith$elm_ui$Internal$Model$element,
			mdgriffith$elm_ui$Internal$Model$asEl,
			mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				elm$core$List$cons,
				mdgriffith$elm_ui$Internal$Model$Attr(
					elm$html$Html$Attributes$href(url)),
				A2(
					elm$core$List$cons,
					mdgriffith$elm_ui$Internal$Model$Attr(
						elm$html$Html$Attributes$download('')),
					A2(
						elm$core$List$cons,
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$shrink),
						A2(
							elm$core$List$cons,
							mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$shrink),
							A2(
								elm$core$List$cons,
								mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.contentCenterX),
								A2(
									elm$core$List$cons,
									mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.contentCenterY),
									attrs)))))),
			mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var mdgriffith$elm_ui$Internal$Flag$fontFamily = mdgriffith$elm_ui$Internal$Flag$flag(5);
var mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 'FontFamily', a: a, b: b};
	});
var mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 'Serif':
						return 'serif';
					case 'SansSerif':
						return 'sans-serif';
					case 'Monospace':
						return 'monospace';
					case 'Typeface':
						var name = font.a;
						return A2(
							elm$core$String$join,
							'-',
							elm$core$String$words(
								elm$core$String$toLower(name)));
					case 'ImportFont':
						var name = font.a;
						var url = font.b;
						return A2(
							elm$core$String$join,
							'-',
							elm$core$String$words(
								elm$core$String$toLower(name)));
					default:
						var name = font.a.name;
						return A2(
							elm$core$String$join,
							'-',
							elm$core$String$words(
								elm$core$String$toLower(name)));
				}
			}());
	});
var mdgriffith$elm_ui$Element$Font$family = function (families) {
	return A2(
		mdgriffith$elm_ui$Internal$Model$StyleClass,
		mdgriffith$elm_ui$Internal$Flag$fontFamily,
		A2(
			mdgriffith$elm_ui$Internal$Model$FontFamily,
			A3(elm$core$List$foldl, mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'ff-', families),
			families));
};
var mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 'Typeface', a: a};
};
var mdgriffith$elm_ui$Element$Font$typeface = mdgriffith$elm_ui$Internal$Model$Typeface;
var mdgriffith$elm_ui$Element$Font$underline = mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.underline);
var mdgriffith$elm_ui$Element$Input$Placeholder = F2(
	function (a, b) {
		return {$: 'Placeholder', a: a, b: b};
	});
var mdgriffith$elm_ui$Element$Input$placeholder = mdgriffith$elm_ui$Element$Input$Placeholder;
var mdgriffith$elm_ui$Element$Keyed$el = F2(
	function (attrs, child) {
		return A4(
			mdgriffith$elm_ui$Internal$Model$element,
			mdgriffith$elm_ui$Internal$Model$asEl,
			mdgriffith$elm_ui$Internal$Model$div,
			A2(
				elm$core$List$cons,
				mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$shrink),
				A2(
					elm$core$List$cons,
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$shrink),
					attrs)),
			mdgriffith$elm_ui$Internal$Model$Keyed(
				_List_fromArray(
					[child])));
	});
var author$project$FileExplorer$FileExplorer$sidePanelView = F2(
	function (config, model) {
		var regFilePreviewPanel = function (meta) {
			return mdgriffith$elm_ui$Element$none;
		};
		var imagePreviewPanel = F2(
			function (meta, imgSize) {
				return A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(
							mdgriffith$elm_ui$Element$px(300)),
							mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
							mdgriffith$elm_ui$Element$spacing(15),
							mdgriffith$elm_ui$Element$centerX,
							mdgriffith$elm_ui$Element$Font$family(
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Font$typeface('Arial')
								]))
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$width(
									mdgriffith$elm_ui$Element$px(250)),
									mdgriffith$elm_ui$Element$height(
									mdgriffith$elm_ui$Element$px(250)),
									mdgriffith$elm_ui$Element$Background$color(
									A3(mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9)),
									mdgriffith$elm_ui$Element$Border$rounded(5),
									mdgriffith$elm_ui$Element$padding(0),
									mdgriffith$elm_ui$Element$spacing(0)
								]),
							A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(237)),
										mdgriffith$elm_ui$Element$height(
										mdgriffith$elm_ui$Element$px(237)),
										mdgriffith$elm_ui$Element$Background$uncropped(
										A2(elm$core$String$join, '/', meta.path)),
										mdgriffith$elm_ui$Element$Background$color(
										A4(mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 1)),
										mdgriffith$elm_ui$Element$centerX,
										mdgriffith$elm_ui$Element$centerY
									]),
								mdgriffith$elm_ui$Element$none)),
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$Font$center]),
							mdgriffith$elm_ui$Element$text(
								elm$core$String$fromInt(imgSize.width) + ('x' + (elm$core$String$fromInt(imgSize.height) + 'px')))),
							A2(
							elm$core$Maybe$withDefault,
							mdgriffith$elm_ui$Element$none,
							A2(
								elm$core$Maybe$map,
								function (fs) {
									return A2(
										mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[mdgriffith$elm_ui$Element$Font$center]),
										mdgriffith$elm_ui$Element$text(
											basti1302$elm_human_readable_filesize$Filesize$format(fs)));
								},
								meta.fileSize)),
							A2(
							mdgriffith$elm_ui$Element$download,
							_List_Nil,
							{
								label: A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$Font$color(
											A3(mdgriffith$elm_ui$Element$rgb, 0, 0, 1)),
											mdgriffith$elm_ui$Element$Font$underline
										]),
									mdgriffith$elm_ui$Element$text('Télécharger')),
								url: A2(elm$core$String$join, '/', meta.path)
							})
						]));
			});
		var iconSize = 22;
		var noSelectionControlsPanel = A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					_Utils_eq(config.mode, author$project$FileExplorer$FileExplorer$Full) ? A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15),
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Keyed$el,
							_List_Nil,
							_Utils_Tuple2(
								'newFolder',
								A2(
									mdgriffith$elm_ui$Element$Input$text,
									_Utils_ap(
										author$project$Internals$CommonStyleHelpers$textInputStyle,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$width(
												mdgriffith$elm_ui$Element$px(195)),
												mdgriffith$elm_ui$Element$spacing(0)
											])),
									{
										label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
										onChange: author$project$FileExplorer$FileExplorer$NewFolderInput,
										placeholder: elm$core$Maybe$Just(
											A2(
												mdgriffith$elm_ui$Element$Input$placeholder,
												_List_Nil,
												mdgriffith$elm_ui$Element$text('Nouveau dossier'))),
										text: model.newFolderNameBuffer
									}))),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							_Utils_ap(
								author$project$Internals$CommonStyleHelpers$buttonStyle(model.newFolderNameBuffer !== ''),
								_List_fromArray(
									[mdgriffith$elm_ui$Element$alignRight])),
							{
								label: A2(
									mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$html(
											author$project$Internals$Icons$folderPlus(iconSize))
										])),
								onPress: (model.newFolderNameBuffer !== '') ? A2(
									elm$core$Maybe$map,
									author$project$FileExplorer$FileExplorer$NewFolder(config.mode),
									A2(
										elm$core$Maybe$map,
										author$project$FileExplorer$FileExplorer$extractFsItem,
										A2(author$project$FileExplorer$FileExplorer$getCurrentFilesys, config.mode, model))) : elm$core$Maybe$Nothing
							})
						])) : mdgriffith$elm_ui$Element$none,
					function () {
					var _n6 = config.mode;
					if (_n6.$ === 'ReadOnly') {
						return mdgriffith$elm_ui$Element$none;
					} else {
						return A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									_Utils_ap(
										author$project$Internals$CommonStyleHelpers$buttonStyle(true),
										_List_fromArray(
											[mdgriffith$elm_ui$Element$alignLeft])),
									{
										label: A2(
											mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													A2(
													mdgriffith$elm_ui$Element$el,
													_List_Nil,
													mdgriffith$elm_ui$Element$html(
														author$project$Internals$Icons$upload(iconSize))),
													mdgriffith$elm_ui$Element$text('Mettre en ligne')
												])),
										onPress: elm$core$Maybe$Just(author$project$FileExplorer$FileExplorer$ToogleUploadView)
									}),
									_Utils_eq(config.mode, author$project$FileExplorer$FileExplorer$Full) ? A2(
									mdgriffith$elm_ui$Element$Input$button,
									_Utils_ap(
										author$project$Internals$CommonStyleHelpers$buttonStyle(
											!_Utils_eq(model.cutBuffer, elm$core$Maybe$Nothing)),
										_List_fromArray(
											[mdgriffith$elm_ui$Element$alignRight])),
									{
										label: A2(
											mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$text('Coller')
												])),
										onPress: (!_Utils_eq(model.cutBuffer, elm$core$Maybe$Nothing)) ? A2(
											elm$core$Maybe$map,
											A2(
												elm$core$Basics$composeL,
												author$project$FileExplorer$FileExplorer$Paste(config.mode),
												author$project$FileExplorer$FileExplorer$extractFsItem),
											A2(author$project$FileExplorer$FileExplorer$getCurrentFilesys, config.mode, model)) : elm$core$Maybe$Nothing
									}) : mdgriffith$elm_ui$Element$none
								]));
					}
				}()
				]));
		var selectionControlsPanel = A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					function () {
					var _n4 = config.mode;
					if (_n4.$ === 'ReadOnly') {
						return A2(
							elm$core$Maybe$withDefault,
							mdgriffith$elm_ui$Element$none,
							A2(
								elm$core$Maybe$map,
								function (s) {
									return A2(
										mdgriffith$elm_ui$Element$paragraph,
										_List_Nil,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text(s)
											]));
								},
								A2(elm$core$Maybe$map, author$project$FileExplorer$FileExplorer$getName, model.selectedFsItem)));
					} else {
						return A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15),
									mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$Keyed$el,
									_List_Nil,
									_Utils_Tuple2(
										'rename',
										A2(
											mdgriffith$elm_ui$Element$Input$text,
											_Utils_ap(
												author$project$Internals$CommonStyleHelpers$textInputStyle,
												_List_fromArray(
													[
														mdgriffith$elm_ui$Element$width(
														mdgriffith$elm_ui$Element$px(195)),
														mdgriffith$elm_ui$Element$spacing(0)
													])),
											{
												label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
												onChange: author$project$FileExplorer$FileExplorer$RenameInput,
												placeholder: A2(
													elm$core$Maybe$map,
													mdgriffith$elm_ui$Element$Input$placeholder(
														_List_fromArray(
															[mdgriffith$elm_ui$Element$clip])),
													A2(
														elm$core$Maybe$map,
														mdgriffith$elm_ui$Element$text,
														A2(elm$core$Maybe$map, author$project$FileExplorer$FileExplorer$getName, model.selectedFsItem))),
												text: model.renameBuffer
											}))),
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(
										A2(
											elm$core$Maybe$withDefault,
											false,
											A2(
												elm$core$Maybe$map,
												function (n) {
													return !_Utils_eq(n, model.renameBuffer);
												},
												A2(elm$core$Maybe$map, author$project$FileExplorer$FileExplorer$getName, model.selectedFsItem)))),
									{
										label: A2(
											mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$text('Renommer')
												])),
										onPress: (model.renameBuffer !== '') ? A2(
											elm$core$Maybe$map,
											author$project$FileExplorer$FileExplorer$Rename(config.mode),
											model.selectedFsItem) : elm$core$Maybe$Nothing
									})
								]));
					}
				}(),
					_Utils_eq(config.mode, author$project$FileExplorer$FileExplorer$Full) ? A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							_Utils_ap(
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								_List_fromArray(
									[mdgriffith$elm_ui$Element$alignLeft])),
							{
								label: A2(
									mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											A2(
											mdgriffith$elm_ui$Element$el,
											_List_Nil,
											mdgriffith$elm_ui$Element$html(
												author$project$Internals$Icons$xSquare(iconSize))),
											mdgriffith$elm_ui$Element$text('Supprimer')
										])),
								onPress: A2(
									elm$core$Maybe$map,
									author$project$FileExplorer$FileExplorer$Delete(config.mode),
									model.selectedFsItem)
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							_Utils_ap(
								author$project$Internals$CommonStyleHelpers$buttonStyle(
									_Utils_eq(model.cutBuffer, elm$core$Maybe$Nothing)),
								_List_fromArray(
									[mdgriffith$elm_ui$Element$alignRight])),
							{
								label: A2(
									mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											A2(
											mdgriffith$elm_ui$Element$el,
											_List_Nil,
											mdgriffith$elm_ui$Element$html(
												author$project$Internals$Icons$scissors(iconSize))),
											mdgriffith$elm_ui$Element$text('Couper')
										])),
								onPress: function () {
									var _n5 = model.cutBuffer;
									if (_n5.$ === 'Nothing') {
										return A2(elm$core$Maybe$map, author$project$FileExplorer$FileExplorer$Cut, model.selectedFsItem);
									} else {
										return elm$core$Maybe$Nothing;
									}
								}()
							})
						])) : mdgriffith$elm_ui$Element$none
				]));
		var folderInfoPanel = function (fsItem) {
			var folderInfo = author$project$FileExplorer$FileExplorer$compileFolderInfo(fsItem);
			return A2(
				mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[mdgriffith$elm_ui$Element$Font$center]),
						mdgriffith$elm_ui$Element$text(
							basti1302$elm_human_readable_filesize$Filesize$format(folderInfo.size))),
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[mdgriffith$elm_ui$Element$Font$center]),
						mdgriffith$elm_ui$Element$text(
							'Nbr fichiers: ' + elm$core$String$fromInt(folderInfo.nbrFiles))),
						mdgriffith$elm_ui$Element$text(
						'Nbr dossiers: ' + elm$core$String$fromInt(folderInfo.nbrFolders))
					]));
		};
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					(_Utils_eq(
					config.mode,
					author$project$FileExplorer$FileExplorer$ReadOnly(author$project$FileExplorer$FileExplorer$DocsRoot)) || (_Utils_eq(model.mainPanelDisplay, author$project$FileExplorer$FileExplorer$UploadDisplay) && (!_Utils_eq(config.mode, author$project$FileExplorer$FileExplorer$Full)))) ? mdgriffith$elm_ui$Element$width(
					mdgriffith$elm_ui$Element$px(180)) : mdgriffith$elm_ui$Element$width(
					mdgriffith$elm_ui$Element$px(330)),
					mdgriffith$elm_ui$Element$padding(15),
					mdgriffith$elm_ui$Element$alignTop,
					mdgriffith$elm_ui$Element$Background$color(
					A3(mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95)),
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$clip
				]),
			function () {
				var _n0 = model.mainPanelDisplay;
				if (_n0.$ === 'UploadDisplay') {
					return _List_Nil;
				} else {
					var _n1 = model.selectedFsItem;
					if (_n1.$ === 'Nothing') {
						return _List_fromArray(
							[noSelectionControlsPanel]);
					} else {
						var fsItem = _n1.a;
						if (fsItem.$ === 'Folder') {
							var meta = fsItem.a;
							return _List_fromArray(
								[
									selectionControlsPanel,
									folderInfoPanel(fsItem)
								]);
						} else {
							var meta = fsItem.a;
							var _n3 = meta.fileType;
							if (_n3.$ === 'ImageFile') {
								var imgSize = _n3.a;
								return _List_fromArray(
									[
										selectionControlsPanel,
										A2(imagePreviewPanel, meta, imgSize)
									]);
							} else {
								return _List_fromArray(
									[
										selectionControlsPanel,
										regFilePreviewPanel(meta)
									]);
							}
						}
					}
				}
			}());
	});
var author$project$FileExplorer$FileExplorer$BulkUpload = {$: 'BulkUpload'};
var author$project$FileExplorer$FileExplorer$FilesToUpload = F2(
	function (a, b) {
		return {$: 'FilesToUpload', a: a, b: b};
	});
var author$project$FileExplorer$FileExplorer$SetImageUploadType = function (a) {
	return {$: 'SetImageUploadType', a: a};
};
var author$project$FileExplorer$FileExplorer$UploadFiles = {$: 'UploadFiles'};
var author$project$FileExplorer$FileExplorer$FileToUpload = F4(
	function (filename, loaded, total, success) {
		return {filename: filename, loaded: loaded, success: success, total: total};
	});
var author$project$FileExplorer$FileExplorer$decodeFilesToUpload = function (msg) {
	return A2(
		elm$json$Json$Decode$at,
		_List_fromArray(
			['target', 'fileDict']),
		A2(
			elm$json$Json$Decode$map,
			msg,
			A2(
				elm$json$Json$Decode$map,
				elm$core$Dict$values,
				elm$json$Json$Decode$dict(
					A4(
						NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
						'success',
						elm$json$Json$Decode$oneOf(
							_List_fromArray(
								[
									A2(
									elm$json$Json$Decode$map,
									function (_n0) {
										return true;
									},
									A2(elm$json$Json$Decode$field, 'message', elm$json$Json$Decode$string)),
									A2(
									elm$json$Json$Decode$map,
									function (_n1) {
										return false;
									},
									A2(elm$json$Json$Decode$field, 'serverError', elm$json$Json$Decode$string))
								])),
						false,
						A4(
							NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
							'total',
							elm$json$Json$Decode$float,
							0,
							A4(
								NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
								'loaded',
								elm$json$Json$Decode$float,
								0,
								A3(
									NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
									'filename',
									elm$json$Json$Decode$string,
									elm$json$Json$Decode$succeed(author$project$FileExplorer$FileExplorer$FileToUpload)))))))));
};
var author$project$FileExplorer$FileExplorer$FileRead = function (a) {
	return {$: 'FileRead', a: a};
};
var author$project$FileExplorer$FileExplorer$ImageRead = function (a) {
	return {$: 'ImageRead', a: a};
};
var author$project$FileExplorer$FileExplorer$ImageFromFile = F5(
	function (contents, filename, width, height, filesize) {
		return {contents: contents, filename: filename, filesize: filesize, height: height, width: width};
	});
var elm$json$Json$Decode$map5 = _Json_map5;
var author$project$FileExplorer$FileExplorer$decodeImageData = function (msg) {
	return A2(
		elm$json$Json$Decode$at,
		_List_fromArray(
			['target', 'fileData']),
		A2(
			elm$json$Json$Decode$map,
			msg,
			A6(
				elm$json$Json$Decode$map5,
				author$project$FileExplorer$FileExplorer$ImageFromFile,
				A2(elm$json$Json$Decode$field, 'contents', elm$json$Json$Decode$string),
				A2(elm$json$Json$Decode$field, 'filename', elm$json$Json$Decode$string),
				A2(elm$json$Json$Decode$field, 'width', elm$json$Json$Decode$int),
				A2(elm$json$Json$Decode$field, 'height', elm$json$Json$Decode$int),
				A2(elm$json$Json$Decode$field, 'filesize', elm$json$Json$Decode$int))));
};
var author$project$FileExplorer$FileExplorer$ResetImageController = {$: 'ResetImageController'};
var author$project$FileExplorer$FileExplorer$Resize = function (a) {
	return {$: 'Resize', a: a};
};
var author$project$FileExplorer$FileExplorer$RotateLeft = {$: 'RotateLeft'};
var author$project$FileExplorer$FileExplorer$RotateRight = {$: 'RotateRight'};
var author$project$FileExplorer$FileExplorer$SetFilename = function (a) {
	return {$: 'SetFilename', a: a};
};
var author$project$FileExplorer$FileExplorer$SetResize = {$: 'SetResize'};
var author$project$FileExplorer$FileExplorer$UploadImage = function (a) {
	return {$: 'UploadImage', a: a};
};
var author$project$Internals$Icons$rotateCcw = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'rotate-ccw',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$polyline,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$points('1 4 1 10 7 10')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$path,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$d('M3.51 15a9 9 0 1 0 2.13-9.36L1 10')
					]),
				_List_Nil)
			]));
};
var author$project$Internals$Icons$rotateCw = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'rotate-cw',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$polyline,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$points('23 4 23 10 17 10')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$path,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$d('M20.49 15a9 9 0 1 1-2.12-9.36L23 10')
					]),
				_List_Nil)
			]));
};
var mdgriffith$elm_ui$Internal$Model$Behind = {$: 'Behind'};
var mdgriffith$elm_ui$Element$behindContent = function (element) {
	return A2(mdgriffith$elm_ui$Internal$Model$Nearby, mdgriffith$elm_ui$Internal$Model$Behind, element);
};
var elm$html$Html$Attributes$alt = elm$html$Html$Attributes$stringProperty('alt');
var elm$html$Html$Attributes$src = function (url) {
	return A2(
		elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var mdgriffith$elm_ui$Element$image = F2(
	function (attrs, _n0) {
		var src = _n0.src;
		var description = _n0.description;
		var imageAttributes = A2(
			elm$core$List$filter,
			function (a) {
				switch (a.$) {
					case 'Width':
						return true;
					case 'Height':
						return true;
					default:
						return false;
				}
			},
			attrs);
		return A4(
			mdgriffith$elm_ui$Internal$Model$element,
			mdgriffith$elm_ui$Internal$Model$asEl,
			mdgriffith$elm_ui$Internal$Model$div,
			A2(
				elm$core$List$cons,
				mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.imageContainer),
				attrs),
			mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[
						A4(
						mdgriffith$elm_ui$Internal$Model$element,
						mdgriffith$elm_ui$Internal$Model$asEl,
						mdgriffith$elm_ui$Internal$Model$NodeName('img'),
						_Utils_ap(
							_List_fromArray(
								[
									mdgriffith$elm_ui$Internal$Model$Attr(
									elm$html$Html$Attributes$src(src)),
									mdgriffith$elm_ui$Internal$Model$Attr(
									elm$html$Html$Attributes$alt(description))
								]),
							imageAttributes),
						mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil))
					])));
	});
var mdgriffith$elm_ui$Element$scrollbars = A2(mdgriffith$elm_ui$Internal$Model$Class, mdgriffith$elm_ui$Internal$Flag$overflow, mdgriffith$elm_ui$Internal$Style$classes.scrollbars);
var mdgriffith$elm_ui$Element$Input$Thumb = function (a) {
	return {$: 'Thumb', a: a};
};
var mdgriffith$elm_ui$Element$Input$defaultThumb = mdgriffith$elm_ui$Element$Input$Thumb(
	_List_fromArray(
		[
			mdgriffith$elm_ui$Element$width(
			mdgriffith$elm_ui$Element$px(16)),
			mdgriffith$elm_ui$Element$height(
			mdgriffith$elm_ui$Element$px(16)),
			mdgriffith$elm_ui$Element$Border$rounded(8),
			mdgriffith$elm_ui$Element$Border$width(1),
			mdgriffith$elm_ui$Element$Border$color(
			A3(mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5)),
			mdgriffith$elm_ui$Element$Background$color(
			A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
		]));
var elm$html$Html$Attributes$max = elm$html$Html$Attributes$stringProperty('max');
var elm$html$Html$Attributes$min = elm$html$Html$Attributes$stringProperty('min');
var elm$html$Html$Attributes$step = function (n) {
	return A2(elm$html$Html$Attributes$stringProperty, 'step', n);
};
var mdgriffith$elm_ui$Element$spacingXY = F2(
	function (x, y) {
		return A2(
			mdgriffith$elm_ui$Internal$Model$StyleClass,
			mdgriffith$elm_ui$Internal$Flag$spacing,
			A3(
				mdgriffith$elm_ui$Internal$Model$SpacingStyle,
				A2(mdgriffith$elm_ui$Internal$Model$spacingName, x, y),
				x,
				y));
	});
var mdgriffith$elm_ui$Element$fillPortion = mdgriffith$elm_ui$Internal$Model$Fill;
var mdgriffith$elm_ui$Internal$Model$mapAttr = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 'NoAttribute':
				return mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 'Describe':
				var description = attr.a;
				return mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 'AlignX':
				var x = attr.a;
				return mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 'AlignY':
				var y = attr.a;
				return mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 'Width':
				var x = attr.a;
				return mdgriffith$elm_ui$Internal$Model$Width(x);
			case 'Height':
				var x = attr.a;
				return mdgriffith$elm_ui$Internal$Model$Height(x);
			case 'Class':
				var x = attr.a;
				var y = attr.b;
				return A2(mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 'StyleClass':
				var flag = attr.a;
				var style = attr.b;
				return A2(mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 'Nearby':
				var location = attr.a;
				var elem = attr.b;
				return A2(
					mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2(mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 'Attr':
				var htmlAttr = attr.a;
				return mdgriffith$elm_ui$Internal$Model$Attr(
					A2(elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2(mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var mdgriffith$elm_ui$Element$Input$viewHorizontalThumb = F3(
	function (factor, thumbAttributes, trackHeight) {
		return A2(
			mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$height(
					A2(elm$core$Maybe$withDefault, mdgriffith$elm_ui$Element$fill, trackHeight)),
					mdgriffith$elm_ui$Element$centerY
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(
							mdgriffith$elm_ui$Element$fillPortion(
								elm$core$Basics$round(factor * 10000)))
						]),
					mdgriffith$elm_ui$Element$none),
					A2(
					mdgriffith$elm_ui$Element$el,
					A2(
						elm$core$List$cons,
						mdgriffith$elm_ui$Element$centerY,
						A2(
							elm$core$List$map,
							mdgriffith$elm_ui$Internal$Model$mapAttr(elm$core$Basics$never),
							thumbAttributes)),
					mdgriffith$elm_ui$Element$none),
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(
							mdgriffith$elm_ui$Element$fillPortion(
								elm$core$Basics$round(
									elm$core$Basics$abs(1 - factor) * 10000)))
						]),
					mdgriffith$elm_ui$Element$none)
				]));
	});
var mdgriffith$elm_ui$Element$Input$viewVerticalThumb = F3(
	function (factor, thumbAttributes, trackWidth) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$width(
					A2(elm$core$Maybe$withDefault, mdgriffith$elm_ui$Element$fill, trackWidth)),
					mdgriffith$elm_ui$Element$centerX
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$height(
							mdgriffith$elm_ui$Element$fillPortion(
								elm$core$Basics$round(
									elm$core$Basics$abs(1 - factor) * 10000)))
						]),
					mdgriffith$elm_ui$Element$none),
					A2(
					mdgriffith$elm_ui$Element$el,
					A2(
						elm$core$List$cons,
						mdgriffith$elm_ui$Element$centerX,
						A2(
							elm$core$List$map,
							mdgriffith$elm_ui$Internal$Model$mapAttr(elm$core$Basics$never),
							thumbAttributes)),
					mdgriffith$elm_ui$Element$none),
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$height(
							mdgriffith$elm_ui$Element$fillPortion(
								elm$core$Basics$round(factor * 10000)))
						]),
					mdgriffith$elm_ui$Element$none)
				]));
	});
var mdgriffith$elm_ui$Internal$Flag$active = mdgriffith$elm_ui$Internal$Flag$flag(32);
var mdgriffith$elm_ui$Internal$Model$getHeight = function (attrs) {
	return A3(
		elm$core$List$foldr,
		F2(
			function (attr, acc) {
				if (acc.$ === 'Just') {
					var x = acc.a;
					return elm$core$Maybe$Just(x);
				} else {
					if (attr.$ === 'Height') {
						var len = attr.a;
						return elm$core$Maybe$Just(len);
					} else {
						return elm$core$Maybe$Nothing;
					}
				}
			}),
		elm$core$Maybe$Nothing,
		attrs);
};
var mdgriffith$elm_ui$Internal$Model$getSpacing = F2(
	function (attrs, _default) {
		return A2(
			elm$core$Maybe$withDefault,
			_default,
			A3(
				elm$core$List$foldr,
				F2(
					function (attr, acc) {
						if (acc.$ === 'Just') {
							var x = acc.a;
							return elm$core$Maybe$Just(x);
						} else {
							if ((attr.$ === 'StyleClass') && (attr.b.$ === 'SpacingStyle')) {
								var _n2 = attr.b;
								var x = _n2.b;
								var y = _n2.c;
								return elm$core$Maybe$Just(
									_Utils_Tuple2(x, y));
							} else {
								return elm$core$Maybe$Nothing;
							}
						}
					}),
				elm$core$Maybe$Nothing,
				attrs));
	});
var mdgriffith$elm_ui$Internal$Model$getWidth = function (attrs) {
	return A3(
		elm$core$List$foldr,
		F2(
			function (attr, acc) {
				if (acc.$ === 'Just') {
					var x = acc.a;
					return elm$core$Maybe$Just(x);
				} else {
					if (attr.$ === 'Width') {
						var len = attr.a;
						return elm$core$Maybe$Just(len);
					} else {
						return elm$core$Maybe$Nothing;
					}
				}
			}),
		elm$core$Maybe$Nothing,
		attrs);
};
var mdgriffith$elm_ui$Element$Input$slider = F2(
	function (attributes, input) {
		var trackWidth = mdgriffith$elm_ui$Internal$Model$getWidth(attributes);
		var trackHeight = mdgriffith$elm_ui$Internal$Model$getHeight(attributes);
		var vertical = function () {
			var _n8 = _Utils_Tuple2(trackWidth, trackHeight);
			_n8$3:
			while (true) {
				if (_n8.a.$ === 'Nothing') {
					if (_n8.b.$ === 'Nothing') {
						var _n9 = _n8.a;
						var _n10 = _n8.b;
						return false;
					} else {
						break _n8$3;
					}
				} else {
					if ((_n8.a.a.$ === 'Px') && (_n8.b.$ === 'Just')) {
						switch (_n8.b.a.$) {
							case 'Px':
								var w = _n8.a.a.a;
								var h = _n8.b.a.a;
								return _Utils_cmp(h, w) > 0;
							case 'Fill':
								return true;
							default:
								break _n8$3;
						}
					} else {
						break _n8$3;
					}
				}
			}
			return false;
		}();
		var factor = (input.value - input.min) / (input.max - input.min);
		var _n0 = input.thumb;
		var thumbAttributes = _n0.a;
		var height = mdgriffith$elm_ui$Internal$Model$getHeight(thumbAttributes);
		var thumbHeightString = function () {
			if (height.$ === 'Nothing') {
				return '20px';
			} else {
				if (height.a.$ === 'Px') {
					var px = height.a.a;
					return elm$core$String$fromInt(px) + 'px';
				} else {
					return '100%';
				}
			}
		}();
		var width = mdgriffith$elm_ui$Internal$Model$getWidth(thumbAttributes);
		var thumbWidthString = function () {
			if (width.$ === 'Nothing') {
				return '20px';
			} else {
				if (width.a.$ === 'Px') {
					var px = width.a.a;
					return elm$core$String$fromInt(px) + 'px';
				} else {
					return '100%';
				}
			}
		}();
		var className = 'thmb-' + (thumbWidthString + ('-' + thumbHeightString));
		var thumbShadowStyle = _List_fromArray(
			[
				A2(mdgriffith$elm_ui$Internal$Model$Property, 'width', thumbWidthString),
				A2(mdgriffith$elm_ui$Internal$Model$Property, 'height', thumbHeightString)
			]);
		var _n1 = A2(
			mdgriffith$elm_ui$Internal$Model$getSpacing,
			attributes,
			_Utils_Tuple2(5, 5));
		var spacingX = _n1.a;
		var spacingY = _n1.b;
		return A3(
			mdgriffith$elm_ui$Element$Input$applyLabel,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$Input$isHiddenLabel(input.label) ? mdgriffith$elm_ui$Internal$Model$NoAttribute : A2(mdgriffith$elm_ui$Element$spacingXY, spacingX, spacingY),
					mdgriffith$elm_ui$Element$Region$announce,
					mdgriffith$elm_ui$Element$width(
					function () {
						if (trackWidth.$ === 'Nothing') {
							return mdgriffith$elm_ui$Element$fill;
						} else {
							if (trackWidth.a.$ === 'Px') {
								return mdgriffith$elm_ui$Element$shrink;
							} else {
								var x = trackWidth.a;
								return x;
							}
						}
					}()),
					mdgriffith$elm_ui$Element$height(
					function () {
						if (trackHeight.$ === 'Nothing') {
							return mdgriffith$elm_ui$Element$shrink;
						} else {
							if (trackHeight.a.$ === 'Px') {
								return mdgriffith$elm_ui$Element$shrink;
							} else {
								var x = trackHeight.a;
								return x;
							}
						}
					}())
				]),
			input.label,
			A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(
						A2(elm$core$Maybe$withDefault, mdgriffith$elm_ui$Element$fill, trackWidth)),
						mdgriffith$elm_ui$Element$height(
						A2(
							elm$core$Maybe$withDefault,
							mdgriffith$elm_ui$Element$px(20),
							trackHeight))
					]),
				_List_fromArray(
					[
						A4(
						mdgriffith$elm_ui$Internal$Model$element,
						mdgriffith$elm_ui$Internal$Model$asEl,
						mdgriffith$elm_ui$Internal$Model$NodeName('input'),
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.label),
								A2(
								mdgriffith$elm_ui$Internal$Model$StyleClass,
								mdgriffith$elm_ui$Internal$Flag$active,
								A2(mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-moz-range-thumb'), thumbShadowStyle)),
								A2(
								mdgriffith$elm_ui$Internal$Model$StyleClass,
								mdgriffith$elm_ui$Internal$Flag$hover,
								A2(mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-webkit-slider-thumb'), thumbShadowStyle)),
								A2(
								mdgriffith$elm_ui$Internal$Model$StyleClass,
								mdgriffith$elm_ui$Internal$Flag$focus,
								A2(mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-ms-thumb'), thumbShadowStyle)),
								mdgriffith$elm_ui$Internal$Model$Attr(
								elm$html$Html$Attributes$class(className + ' focusable-parent')),
								mdgriffith$elm_ui$Internal$Model$Attr(
								elm$html$Html$Events$onInput(
									function (str) {
										var _n4 = elm$core$String$toFloat(str);
										if (_n4.$ === 'Nothing') {
											return input.onChange(0);
										} else {
											var val = _n4.a;
											return input.onChange(val);
										}
									})),
								mdgriffith$elm_ui$Internal$Model$Attr(
								elm$html$Html$Attributes$type_('range')),
								mdgriffith$elm_ui$Internal$Model$Attr(
								elm$html$Html$Attributes$step(
									function () {
										var _n5 = input.step;
										if (_n5.$ === 'Nothing') {
											return 'any';
										} else {
											var step = _n5.a;
											return elm$core$String$fromFloat(step);
										}
									}())),
								mdgriffith$elm_ui$Internal$Model$Attr(
								elm$html$Html$Attributes$min(
									elm$core$String$fromFloat(input.min))),
								mdgriffith$elm_ui$Internal$Model$Attr(
								elm$html$Html$Attributes$max(
									elm$core$String$fromFloat(input.max))),
								mdgriffith$elm_ui$Internal$Model$Attr(
								elm$html$Html$Attributes$value(
									elm$core$String$fromFloat(input.value))),
								vertical ? mdgriffith$elm_ui$Internal$Model$Attr(
								A2(elm$html$Html$Attributes$attribute, 'orient', 'vertical')) : mdgriffith$elm_ui$Internal$Model$NoAttribute,
								mdgriffith$elm_ui$Element$width(
								vertical ? A2(
									elm$core$Maybe$withDefault,
									mdgriffith$elm_ui$Element$px(20),
									trackHeight) : A2(elm$core$Maybe$withDefault, mdgriffith$elm_ui$Element$fill, trackWidth)),
								mdgriffith$elm_ui$Element$height(
								vertical ? A2(elm$core$Maybe$withDefault, mdgriffith$elm_ui$Element$fill, trackWidth) : A2(
									elm$core$Maybe$withDefault,
									mdgriffith$elm_ui$Element$px(20),
									trackHeight))
							]),
						mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil)),
						A2(
						mdgriffith$elm_ui$Element$el,
						A2(
							elm$core$List$cons,
							mdgriffith$elm_ui$Element$width(
								A2(elm$core$Maybe$withDefault, mdgriffith$elm_ui$Element$fill, trackWidth)),
							A2(
								elm$core$List$cons,
								mdgriffith$elm_ui$Element$height(
									A2(
										elm$core$Maybe$withDefault,
										mdgriffith$elm_ui$Element$px(20),
										trackHeight)),
								_Utils_ap(
									attributes,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$behindContent(
											vertical ? A3(mdgriffith$elm_ui$Element$Input$viewVerticalThumb, factor, thumbAttributes, trackWidth) : A3(mdgriffith$elm_ui$Element$Input$viewHorizontalThumb, factor, thumbAttributes, trackHeight))
										])))),
						mdgriffith$elm_ui$Element$none)
					])));
	});
var author$project$FileExplorer$FileExplorer$editView = F2(
	function (config, model) {
		var iconSize = 18;
		var _n0 = _Utils_Tuple3(model.mbImageFromFile, model.mbOriImageWidth, model.mbOriImageHeight);
		if (((_n0.a.$ === 'Just') && (_n0.b.$ === 'Just')) && (_n0.c.$ === 'Just')) {
			var f = _n0.a.a;
			var oriW = _n0.b.a;
			var oriH = _n0.c.a;
			return A2(
				mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(10),
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(500))
									]),
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$Input$text,
										author$project$Internals$CommonStyleHelpers$textInputStyle,
										{
											label: A2(
												mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_fromArray(
													[mdgriffith$elm_ui$Element$centerY]),
												A2(
													mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															mdgriffith$elm_ui$Element$width(
															mdgriffith$elm_ui$Element$px(110))
														]),
													mdgriffith$elm_ui$Element$text('Nom de fichier: '))),
											onChange: author$project$FileExplorer$FileExplorer$SetFilename,
											placeholder: elm$core$Maybe$Nothing,
											text: A2(elm$core$Maybe$withDefault, f.filename, model.desiredFilename)
										})
									])),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$html(
											author$project$Internals$Icons$rotateCcw(iconSize))),
									onPress: elm$core$Maybe$Just(author$project$FileExplorer$FileExplorer$RotateLeft)
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$html(
											author$project$Internals$Icons$rotateCw(iconSize))),
									onPress: elm$core$Maybe$Just(author$project$FileExplorer$FileExplorer$RotateRight)
								})
							])),
						A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(10),
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(500))
									]),
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$width(
												mdgriffith$elm_ui$Element$px(110))
											]),
										mdgriffith$elm_ui$Element$text('Dimensions: ')),
										A2(
										mdgriffith$elm_ui$Element$Input$slider,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$height(
												mdgriffith$elm_ui$Element$px(30)),
												mdgriffith$elm_ui$Element$width(
												mdgriffith$elm_ui$Element$px(250)),
												mdgriffith$elm_ui$Element$behindContent(
												A2(
													mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
															mdgriffith$elm_ui$Element$height(
															mdgriffith$elm_ui$Element$px(2)),
															mdgriffith$elm_ui$Element$centerY,
															mdgriffith$elm_ui$Element$Background$color(
															A3(mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9)),
															mdgriffith$elm_ui$Element$Border$rounded(2)
														]),
													mdgriffith$elm_ui$Element$none))
											]),
										{
											label: A2(
												mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_fromArray(
													[mdgriffith$elm_ui$Element$centerY]),
												mdgriffith$elm_ui$Element$none),
											max: 100,
											min: 0,
											onChange: author$project$FileExplorer$FileExplorer$Resize,
											step: elm$core$Maybe$Just(1),
											thumb: mdgriffith$elm_ui$Element$Input$defaultThumb,
											value: model.sliderValue
										}),
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$width(
												mdgriffith$elm_ui$Element$px(100))
											]),
										mdgriffith$elm_ui$Element$text(
											A2(
												elm$core$Maybe$withDefault,
												elm$core$String$fromInt(oriW),
												A2(elm$core$Maybe$map, elm$core$String$fromInt, model.desiredWidth)) + ('x' + A2(
												elm$core$Maybe$withDefault,
												elm$core$String$fromInt(oriH),
												A2(elm$core$Maybe$map, elm$core$String$fromInt, model.desiredHeight)))))
									])),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(model.canResize),
								{
									label: mdgriffith$elm_ui$Element$text('Redimensionner'),
									onPress: model.canResize ? elm$core$Maybe$Just(author$project$FileExplorer$FileExplorer$SetResize) : elm$core$Maybe$Nothing
								})
							])),
						A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Taille originale: ')),
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text(
											A2(
												elm$core$Maybe$withDefault,
												'0 kb',
												A2(
													elm$core$Maybe$map,
													function (s) {
														return s + ' kb';
													},
													A2(elm$core$Maybe$map, elm$core$String$fromInt, model.mbOriFileSize)))))
									])),
								A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Taille actuelle: ')),
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text(
											A2(
												elm$core$Maybe$withDefault,
												'0 kb',
												A2(
													elm$core$Maybe$map,
													function (s) {
														return s + ' kb';
													},
													A2(
														elm$core$Maybe$map,
														elm$core$String$fromInt,
														A2(
															elm$core$Maybe$map,
															function ($) {
																return $.filesize;
															},
															model.mbImageFromFile))))))
									]))
							])),
						A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: mdgriffith$elm_ui$Element$text('Nouveau fichier'),
									onPress: elm$core$Maybe$Just(author$project$FileExplorer$FileExplorer$ResetImageController)
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: mdgriffith$elm_ui$Element$text('Retour'),
									onPress: elm$core$Maybe$Just(author$project$FileExplorer$FileExplorer$ToogleUploadView)
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: mdgriffith$elm_ui$Element$text('Valider et envoyer'),
									onPress: A2(
										elm$core$Maybe$map,
										author$project$FileExplorer$FileExplorer$UploadImage,
										A2(
											elm$core$Maybe$map,
											author$project$FileExplorer$FileExplorer$extractFsItem,
											A2(author$project$FileExplorer$FileExplorer$getCurrentFilesys, config.mode, model)))
								})
							])),
						mdgriffith$elm_ui$Element$text('Aperçu: '),
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								A2(mdgriffith$elm_ui$Element$maximum, 650, mdgriffith$elm_ui$Element$fill)),
								mdgriffith$elm_ui$Element$height(
								A2(mdgriffith$elm_ui$Element$maximum, 550, mdgriffith$elm_ui$Element$fill)),
								mdgriffith$elm_ui$Element$scrollbars
							]),
						A2(
							mdgriffith$elm_ui$Element$image,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$centerY, mdgriffith$elm_ui$Element$centerX]),
							{description: f.filename, src: f.contents}))
					]));
		} else {
			return mdgriffith$elm_ui$Element$text('no file data');
		}
	});
var author$project$FileExplorer$FileExplorer$fileReaderView = function (model) {
	return A2(
		mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$spacing(15)
			]),
		_List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_Nil,
						mdgriffith$elm_ui$Element$text('Charger une image depuis votre PC: '))
					]))
			]));
};
var elm$html$Html$input = _VirtualDom_node('input');
var author$project$FileExplorer$FileExplorer$imageController = function (attributes) {
	return A2(
		mdgriffith$elm_ui$Element$el,
		_List_Nil,
		mdgriffith$elm_ui$Element$html(
			A3(
				elm$html$Html$node,
				'image-controller',
				attributes,
				_List_fromArray(
					[
						A2(
						elm$html$Html$input,
						_List_fromArray(
							[
								elm$html$Html$Attributes$type_('file')
							]),
						_List_Nil)
					]))));
};
var author$project$Internals$CommonStyleHelpers$noHtmlAttr = elm$html$Html$Attributes$class('');
var elm$html$Html$Attributes$hidden = elm$html$Html$Attributes$boolProperty('hidden');
var elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var elm$html$Html$Attributes$property = elm$virtual_dom$VirtualDom$property;
var author$project$FileExplorer$FileExplorer$imageControllerView = F3(
	function (config, model, imgContMode) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$Font$size(16),
					mdgriffith$elm_ui$Element$padding(15),
					mdgriffith$elm_ui$Element$alignTop
				]),
			_List_fromArray(
				[
					function () {
					if (imgContMode.$ === 'FileReader') {
						return author$project$FileExplorer$FileExplorer$fileReaderView(model);
					} else {
						return A2(author$project$FileExplorer$FileExplorer$editView, config, model);
					}
				}(),
					author$project$FileExplorer$FileExplorer$imageController(
					_Utils_ap(
						_List_fromArray(
							[
								A2(
								elm$html$Html$Events$on,
								'fileRead',
								author$project$FileExplorer$FileExplorer$decodeImageData(author$project$FileExplorer$FileExplorer$FileRead)),
								A2(
								elm$html$Html$Events$on,
								'imageRead',
								author$project$FileExplorer$FileExplorer$decodeImageData(author$project$FileExplorer$FileExplorer$ImageRead)),
								(!_Utils_eq(imgContMode, author$project$FileExplorer$FileExplorer$FileReader)) ? elm$html$Html$Attributes$hidden(true) : author$project$Internals$CommonStyleHelpers$noHtmlAttr,
								model.needToRotate ? A2(
								elm$html$Html$Attributes$property,
								'rotationAngle',
								elm$json$Json$Encode$int(model.desiredRotationAngle)) : author$project$Internals$CommonStyleHelpers$noHtmlAttr
							]),
						model.needToResize ? _List_fromArray(
							[
								A2(
								elm$core$Maybe$withDefault,
								author$project$Internals$CommonStyleHelpers$noHtmlAttr,
								A2(
									elm$core$Maybe$map,
									function (val) {
										return A2(elm$html$Html$Attributes$property, 'desiredSize', val);
									},
									A2(
										elm$core$Maybe$map,
										function (h) {
											return elm$json$Json$Encode$int(h);
										},
										((model.desiredRotationAngle === 90) || (model.desiredRotationAngle === 270)) ? model.desiredWidth : model.desiredHeight)))
							]) : _List_Nil)),
					function () {
					if (imgContMode.$ === 'FileReader') {
						return A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Retour'),
								onPress: elm$core$Maybe$Just(author$project$FileExplorer$FileExplorer$ToogleUploadView)
							});
					} else {
						return mdgriffith$elm_ui$Element$none;
					}
				}()
				]));
	});
var author$project$FileExplorer$FileExplorer$uploadController = function (attributes) {
	return A2(
		mdgriffith$elm_ui$Element$el,
		_List_Nil,
		mdgriffith$elm_ui$Element$html(
			A3(
				elm$html$Html$node,
				'uploads-controller',
				attributes,
				_List_fromArray(
					[
						A2(
						elm$html$Html$input,
						_List_fromArray(
							[
								elm$html$Html$Attributes$type_('file'),
								A2(elm$html$Html$Attributes$attribute, 'multiple', 'multiple')
							]),
						_List_Nil)
					]))));
};
var mdgriffith$elm_ui$Element$Input$Option = F2(
	function (a, b) {
		return {$: 'Option', a: a, b: b};
	});
var mdgriffith$elm_ui$Element$Input$defaultRadioOption = F2(
	function (optionLabel, status) {
		return A2(
			mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(10),
					mdgriffith$elm_ui$Element$alignLeft,
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$shrink)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(
							mdgriffith$elm_ui$Element$px(14)),
							mdgriffith$elm_ui$Element$height(
							mdgriffith$elm_ui$Element$px(14)),
							mdgriffith$elm_ui$Element$Background$color(mdgriffith$elm_ui$Element$Input$white),
							mdgriffith$elm_ui$Element$Border$rounded(7),
							function () {
							if (status.$ === 'Selected') {
								return mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
							} else {
								return mdgriffith$elm_ui$Internal$Model$NoAttribute;
							}
						}(),
							mdgriffith$elm_ui$Element$Border$width(
							function () {
								switch (status.$) {
									case 'Idle':
										return 1;
									case 'Focused':
										return 1;
									default:
										return 5;
								}
							}()),
							mdgriffith$elm_ui$Element$Border$color(
							function () {
								switch (status.$) {
									case 'Idle':
										return A3(mdgriffith$elm_ui$Element$rgb, 208 / 255, 208 / 255, 208 / 255);
									case 'Focused':
										return A3(mdgriffith$elm_ui$Element$rgb, 208 / 255, 208 / 255, 208 / 255);
									default:
										return A3(mdgriffith$elm_ui$Element$rgb, 59 / 255, 153 / 255, 252 / 255);
								}
							}())
						]),
					mdgriffith$elm_ui$Element$none),
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
							mdgriffith$elm_ui$Internal$Model$htmlClass('unfocusable')
						]),
					optionLabel)
				]));
	});
var mdgriffith$elm_ui$Element$Input$option = F2(
	function (val, txt) {
		return A2(
			mdgriffith$elm_ui$Element$Input$Option,
			val,
			mdgriffith$elm_ui$Element$Input$defaultRadioOption(txt));
	});
var mdgriffith$elm_ui$Element$Input$Row = {$: 'Row'};
var mdgriffith$elm_ui$Element$Input$AfterFound = {$: 'AfterFound'};
var mdgriffith$elm_ui$Element$Input$BeforeFound = {$: 'BeforeFound'};
var mdgriffith$elm_ui$Element$Input$Idle = {$: 'Idle'};
var mdgriffith$elm_ui$Element$Input$NotFound = {$: 'NotFound'};
var mdgriffith$elm_ui$Element$Input$Selected = {$: 'Selected'};
var mdgriffith$elm_ui$Element$Input$column = F2(
	function (attributes, children) {
		return A4(
			mdgriffith$elm_ui$Internal$Model$element,
			mdgriffith$elm_ui$Internal$Model$asColumn,
			mdgriffith$elm_ui$Internal$Model$div,
			A2(
				elm$core$List$cons,
				mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$shrink),
				A2(
					elm$core$List$cons,
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					attributes)),
			mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var mdgriffith$elm_ui$Element$Input$downArrow = 'ArrowDown';
var mdgriffith$elm_ui$Element$Input$leftArrow = 'ArrowLeft';
var mdgriffith$elm_ui$Element$Input$onKeyLookup = function (lookup) {
	var decode = function (code) {
		var _n0 = lookup(code);
		if (_n0.$ === 'Nothing') {
			return elm$json$Json$Decode$fail('No key matched');
		} else {
			var msg = _n0.a;
			return elm$json$Json$Decode$succeed(msg);
		}
	};
	var isKey = A2(
		elm$json$Json$Decode$andThen,
		decode,
		A2(elm$json$Json$Decode$field, 'key', elm$json$Json$Decode$string));
	return mdgriffith$elm_ui$Internal$Model$Attr(
		A2(elm$html$Html$Events$on, 'keyup', isKey));
};
var mdgriffith$elm_ui$Element$Input$rightArrow = 'ArrowRight';
var mdgriffith$elm_ui$Element$Input$row = F2(
	function (attributes, children) {
		return A4(
			mdgriffith$elm_ui$Internal$Model$element,
			mdgriffith$elm_ui$Internal$Model$asRow,
			mdgriffith$elm_ui$Internal$Model$div,
			A2(
				elm$core$List$cons,
				mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
				attributes),
			mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var mdgriffith$elm_ui$Element$Input$space = ' ';
var mdgriffith$elm_ui$Element$Input$tabindex = A2(elm$core$Basics$composeL, mdgriffith$elm_ui$Internal$Model$Attr, elm$html$Html$Attributes$tabindex);
var mdgriffith$elm_ui$Element$Input$upArrow = 'ArrowUp';
var mdgriffith$elm_ui$Element$Input$radioHelper = F3(
	function (orientation, attrs, input) {
		var track = F2(
			function (opt, _n14) {
				var found = _n14.a;
				var prev = _n14.b;
				var nxt = _n14.c;
				var val = opt.a;
				switch (found.$) {
					case 'NotFound':
						return _Utils_eq(
							elm$core$Maybe$Just(val),
							input.selected) ? _Utils_Tuple3(mdgriffith$elm_ui$Element$Input$BeforeFound, prev, nxt) : _Utils_Tuple3(found, val, nxt);
					case 'BeforeFound':
						return _Utils_Tuple3(mdgriffith$elm_ui$Element$Input$AfterFound, prev, val);
					default:
						return _Utils_Tuple3(found, prev, nxt);
				}
			});
		var renderOption = function (_n11) {
			var val = _n11.a;
			var view = _n11.b;
			var status = _Utils_eq(
				elm$core$Maybe$Just(val),
				input.selected) ? mdgriffith$elm_ui$Element$Input$Selected : mdgriffith$elm_ui$Element$Input$Idle;
			return A2(
				mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$pointer,
						function () {
						if (orientation.$ === 'Row') {
							return mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$shrink);
						} else {
							return mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill);
						}
					}(),
						mdgriffith$elm_ui$Element$Events$onClick(
						input.onChange(val)),
						function () {
						if (status.$ === 'Selected') {
							return mdgriffith$elm_ui$Internal$Model$Attr(
								A2(elm$html$Html$Attributes$attribute, 'aria-checked', 'true'));
						} else {
							return mdgriffith$elm_ui$Internal$Model$Attr(
								A2(elm$html$Html$Attributes$attribute, 'aria-checked', 'false'));
						}
					}(),
						mdgriffith$elm_ui$Internal$Model$Attr(
						A2(elm$html$Html$Attributes$attribute, 'role', 'radio'))
					]),
				view(status));
		};
		var prevNext = function () {
			var _n5 = input.options;
			if (!_n5.b) {
				return elm$core$Maybe$Nothing;
			} else {
				var _n6 = _n5.a;
				var val = _n6.a;
				return function (_n7) {
					var found = _n7.a;
					var b = _n7.b;
					var a = _n7.c;
					switch (found.$) {
						case 'NotFound':
							return elm$core$Maybe$Just(
								_Utils_Tuple2(b, val));
						case 'BeforeFound':
							return elm$core$Maybe$Just(
								_Utils_Tuple2(b, val));
						default:
							return elm$core$Maybe$Just(
								_Utils_Tuple2(b, a));
					}
				}(
					A3(
						elm$core$List$foldl,
						track,
						_Utils_Tuple3(mdgriffith$elm_ui$Element$Input$NotFound, val, val),
						input.options));
			}
		}();
		var optionArea = function () {
			if (orientation.$ === 'Row') {
				return A2(
					mdgriffith$elm_ui$Element$Input$row,
					A2(
						elm$core$List$cons,
						mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.label),
						attrs),
					A2(elm$core$List$map, renderOption, input.options));
			} else {
				return A2(
					mdgriffith$elm_ui$Element$Input$column,
					A2(
						elm$core$List$cons,
						mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.label),
						attrs),
					A2(elm$core$List$map, renderOption, input.options));
			}
		}();
		var events = A2(
			mdgriffith$elm_ui$Internal$Model$get,
			attrs,
			function (attr) {
				_n3$3:
				while (true) {
					switch (attr.$) {
						case 'Width':
							if (attr.a.$ === 'Fill') {
								return true;
							} else {
								break _n3$3;
							}
						case 'Height':
							if (attr.a.$ === 'Fill') {
								return true;
							} else {
								break _n3$3;
							}
						case 'Attr':
							return true;
						default:
							break _n3$3;
					}
				}
				return false;
			});
		return A3(
			mdgriffith$elm_ui$Element$Input$applyLabel,
			_Utils_ap(
				A2(
					elm$core$List$filterMap,
					elm$core$Basics$identity,
					_List_fromArray(
						[
							elm$core$Maybe$Just(mdgriffith$elm_ui$Element$alignLeft),
							elm$core$Maybe$Just(
							mdgriffith$elm_ui$Element$Input$tabindex(0)),
							elm$core$Maybe$Just(
							mdgriffith$elm_ui$Internal$Model$htmlClass('focus')),
							elm$core$Maybe$Just(mdgriffith$elm_ui$Element$Region$announce),
							elm$core$Maybe$Just(
							mdgriffith$elm_ui$Internal$Model$Attr(
								A2(elm$html$Html$Attributes$attribute, 'role', 'radiogroup'))),
							function () {
							if (prevNext.$ === 'Nothing') {
								return elm$core$Maybe$Nothing;
							} else {
								var _n1 = prevNext.a;
								var prev = _n1.a;
								var next = _n1.b;
								return elm$core$Maybe$Just(
									mdgriffith$elm_ui$Element$Input$onKeyLookup(
										function (code) {
											if (_Utils_eq(code, mdgriffith$elm_ui$Element$Input$leftArrow)) {
												return elm$core$Maybe$Just(
													input.onChange(prev));
											} else {
												if (_Utils_eq(code, mdgriffith$elm_ui$Element$Input$upArrow)) {
													return elm$core$Maybe$Just(
														input.onChange(prev));
												} else {
													if (_Utils_eq(code, mdgriffith$elm_ui$Element$Input$rightArrow)) {
														return elm$core$Maybe$Just(
															input.onChange(next));
													} else {
														if (_Utils_eq(code, mdgriffith$elm_ui$Element$Input$downArrow)) {
															return elm$core$Maybe$Just(
																input.onChange(next));
														} else {
															if (_Utils_eq(code, mdgriffith$elm_ui$Element$Input$space)) {
																var _n2 = input.selected;
																if (_n2.$ === 'Nothing') {
																	return elm$core$Maybe$Just(
																		input.onChange(prev));
																} else {
																	return elm$core$Maybe$Nothing;
																}
															} else {
																return elm$core$Maybe$Nothing;
															}
														}
													}
												}
											}
										}));
							}
						}()
						])),
				events),
			input.label,
			optionArea);
	});
var mdgriffith$elm_ui$Element$Input$radioRow = mdgriffith$elm_ui$Element$Input$radioHelper(mdgriffith$elm_ui$Element$Input$Row);
var author$project$FileExplorer$FileExplorer$uploadView = F2(
	function (config, model) {
		var uploadControllerView = author$project$FileExplorer$FileExplorer$uploadController(
			_Utils_ap(
				_List_fromArray(
					[
						A2(
						elm$html$Html$Events$on,
						'filesInput',
						author$project$FileExplorer$FileExplorer$decodeFilesToUpload(
							author$project$FileExplorer$FileExplorer$FilesToUpload(config.mode))),
						A2(
						elm$html$Html$Events$on,
						'uploadProgress',
						author$project$FileExplorer$FileExplorer$decodeFilesToUpload(
							author$project$FileExplorer$FileExplorer$FilesToUpload(config.mode))),
						model.canUpload ? elm$html$Html$Attributes$hidden(true) : author$project$Internals$CommonStyleHelpers$noHtmlAttr,
						function (p) {
						return A2(
							elm$html$Html$Attributes$property,
							'uploadPath',
							elm$json$Json$Encode$string(p + '/'));
					}(
						A2(
							elm$core$Maybe$withDefault,
							'',
							A2(
								elm$core$Maybe$map,
								elm$core$String$join('/'),
								A2(
									elm$core$Maybe$andThen,
									A2(elm$core$Basics$composeL, elm$core$List$tail, author$project$FileExplorer$FileExplorer$getPath),
									A2(
										elm$core$Maybe$map,
										author$project$FileExplorer$FileExplorer$extractFsItem,
										A2(author$project$FileExplorer$FileExplorer$getCurrentFilesys, config.mode, model)))))),
						function () {
						var _n3 = A2(author$project$FileExplorer$FileExplorer$modeRoot, config.mode, model.root);
						if (_n3.$ === 'ImagesRoot') {
							return A2(
								elm$html$Html$Attributes$property,
								'uploadScript',
								elm$json$Json$Encode$string('uploadPic.php'));
						} else {
							return A2(
								elm$html$Html$Attributes$property,
								'uploadScript',
								elm$json$Json$Encode$string('uploadDoc.php'));
						}
					}()
					]),
				_List_fromArray(
					[
						function () {
						if (model.needToUpload) {
							var _n4 = config.logInfo;
							if (_n4.$ === 'LoggedOut') {
								return author$project$Internals$CommonStyleHelpers$noHtmlAttr;
							} else {
								var sessionId = _n4.a.sessionId;
								return A2(
									elm$html$Html$Attributes$property,
									'sendFiles',
									elm$json$Json$Encode$string(sessionId));
							}
						} else {
							return author$project$Internals$CommonStyleHelpers$noHtmlAttr;
						}
					}()
					])));
		var fileUploadStatusView = function (_n2) {
			var filename = _n2.filename;
			var loaded = _n2.loaded;
			var total = _n2.total;
			var success = _n2.success;
			return A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_Nil,
						mdgriffith$elm_ui$Element$text(filename)),
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_Nil,
						total ? mdgriffith$elm_ui$Element$text(
							elm$core$String$fromInt(
								elm$core$Basics$round((100 * loaded) / total)) + ('%' + (' ' + (success ? 'ok' : 'erreur')))) : mdgriffith$elm_ui$Element$text('pret'))
					]));
		};
		var bulkUploadView = A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					uploadControllerView,
					model.canUpload ? A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(10)
						]),
					_Utils_ap(
						A2(elm$core$List$map, fileUploadStatusView, model.filesToUpload),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(10)
									]),
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$Input$button,
										author$project$Internals$CommonStyleHelpers$buttonStyle(true),
										{
											label: A2(
												mdgriffith$elm_ui$Element$row,
												_List_fromArray(
													[
														mdgriffith$elm_ui$Element$spacing(10)
													]),
												_List_fromArray(
													[
														mdgriffith$elm_ui$Element$text('Retour')
													])),
											onPress: elm$core$Maybe$Just(author$project$FileExplorer$FileExplorer$ToogleUploadView)
										}),
										A2(
										mdgriffith$elm_ui$Element$Input$button,
										author$project$Internals$CommonStyleHelpers$buttonStyle(true),
										{
											label: A2(
												mdgriffith$elm_ui$Element$row,
												_List_fromArray(
													[
														mdgriffith$elm_ui$Element$spacing(10)
													]),
												_List_fromArray(
													[
														mdgriffith$elm_ui$Element$text('Envoyer')
													])),
											onPress: elm$core$Maybe$Just(author$project$FileExplorer$FileExplorer$UploadFiles)
										})
									]))
							]))) : A2(
					mdgriffith$elm_ui$Element$Input$button,
					author$project$Internals$CommonStyleHelpers$buttonStyle(true),
					{
						label: A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$text('Retour')
								])),
						onPress: elm$core$Maybe$Just(author$project$FileExplorer$FileExplorer$ToogleUploadView)
					})
				]));
		var imagesUploadView = A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$Input$radioRow,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					{
						label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
						onChange: author$project$FileExplorer$FileExplorer$SetImageUploadType,
						options: _List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$Input$option,
								author$project$FileExplorer$FileExplorer$BulkUpload,
								mdgriffith$elm_ui$Element$text('Chargement simple')),
								A2(
								mdgriffith$elm_ui$Element$Input$option,
								author$project$FileExplorer$FileExplorer$RegUpload,
								mdgriffith$elm_ui$Element$text('Modifier et charger'))
							]),
						selected: elm$core$Maybe$Just(model.imageUploadType)
					}),
					function () {
					var _n1 = model.imageUploadType;
					if (_n1.$ === 'BulkUpload') {
						return A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$text('Mettre des images en ligne'),
									bulkUploadView
								]));
					} else {
						return A3(author$project$FileExplorer$FileExplorer$imageControllerView, config, model, model.imageControllerMode);
					}
				}()
				]));
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$scrollbarY,
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$alignTop,
					mdgriffith$elm_ui$Element$padding(15),
					mdgriffith$elm_ui$Element$Font$family(
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Font$typeface('Arial')
						]))
				]),
			_List_fromArray(
				[
					function () {
					var _n0 = model.root;
					if (_n0.$ === 'ImagesRoot') {
						return imagesUploadView;
					} else {
						return A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$text('Mettre des documents en ligne: '),
									bulkUploadView
								]));
					}
				}()
				]));
	});
var author$project$FileExplorer$FileExplorer$view = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$map,
			model.externalMsg,
			A2(
				mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$Font$size(16),
						mdgriffith$elm_ui$Element$Font$family(_List_Nil),
						mdgriffith$elm_ui$Element$alignTop,
						mdgriffith$elm_ui$Element$padding(15),
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$height(
						A2(mdgriffith$elm_ui$Element$maximum, config.maxHeight, mdgriffith$elm_ui$Element$fill))
					]),
				_List_fromArray(
					[
						A2(author$project$FileExplorer$FileExplorer$mainInterface, config, model),
						A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
								mdgriffith$elm_ui$Element$clip,
								mdgriffith$elm_ui$Element$htmlAttribute(
								A2(elm$html$Html$Attributes$style, 'flex-shrink', '1')),
								mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								A2(author$project$FileExplorer$FileExplorer$sidePanelView, config, model),
								function () {
								var _n0 = model.mainPanelDisplay;
								switch (_n0.$) {
									case 'FilesysDisplay':
										return A2(author$project$FileExplorer$FileExplorer$filesysView, config, model);
									case 'LogsDisplay':
										return A2(author$project$FileExplorer$FileExplorer$logsView, config, model);
									default:
										return A2(author$project$FileExplorer$FileExplorer$uploadView, config, model);
								}
							}()
							]))
					])));
	});
var author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$loadingStatus = function (model) {
	return model.loadingStatus;
};
var author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$loadingView = function (model) {
	return A2(
		author$project$Internals$ToolHelpers$toolLoadingView,
		'Chargement du répertoire général: ',
		{
			loadingStatus: author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$loadingStatus(model)
		});
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$EditFiche = {$: 'EditFiche'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FilterByActiv = function (a) {
	return {$: 'FilterByActiv', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FilterByCat = function (a) {
	return {$: 'FilterByCat', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FilterByLabel = function (a) {
	return {$: 'FilterByLabel', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FilterByName = function (a) {
	return {$: 'FilterByName', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectFiche = function (a) {
	return {$: 'SelectFiche', a: a};
};
var mdgriffith$elm_ui$Element$rgb255 = F3(
	function (red, green, blue) {
		return A4(mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, 1);
	});
var author$project$Internals$CommonStyleHelpers$grey6 = A3(mdgriffith$elm_ui$Element$rgb255, 225, 231, 236);
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle = _List_fromArray(
	[
		mdgriffith$elm_ui$Element$padding(15),
		mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey6),
		mdgriffith$elm_ui$Element$Border$rounded(5),
		mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
	]);
var author$project$Internals$CommonStyleHelpers$grey7 = A3(mdgriffith$elm_ui$Element$rgb255, 248, 249, 250);
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle = _List_fromArray(
	[
		mdgriffith$elm_ui$Element$padding(15),
		mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey7),
		mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var author$project$Internals$CommonStyleHelpers$grey2 = A3(mdgriffith$elm_ui$Element$rgb255, 95, 107, 122);
var author$project$Internals$CommonStyleHelpers$grey4 = A3(mdgriffith$elm_ui$Element$rgb255, 184, 196, 206);
var author$project$Internals$CommonStyleHelpers$teal3 = A3(mdgriffith$elm_ui$Element$rgb255, 42, 145, 135);
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView = F4(
	function (isFicheData, selected, handler, entry) {
		return A2(
			mdgriffith$elm_ui$Element$Keyed$el,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					A2(mdgriffith$elm_ui$Element$paddingXY, 5, 5),
					mdgriffith$elm_ui$Element$Events$onClick(handler),
					mdgriffith$elm_ui$Element$pointer,
					_Utils_eq(
					elm$core$Maybe$Just(entry),
					selected) ? mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey4) : author$project$Internals$CommonStyleHelpers$noAttr,
					isFicheData ? mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3) : mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey2)
				]),
			_Utils_Tuple2(
				entry,
				mdgriffith$elm_ui$Element$text(entry)));
	});
var author$project$Internals$CommonStyleHelpers$grey1 = A3(mdgriffith$elm_ui$Element$rgb255, 33, 41, 52);
var author$project$Internals$CommonStyleHelpers$grey3 = A3(mdgriffith$elm_ui$Element$rgb255, 136, 149, 167);
var mdgriffith$elm_ui$Internal$Flag$fontWeight = mdgriffith$elm_ui$Internal$Flag$flag(13);
var mdgriffith$elm_ui$Element$Font$bold = A2(mdgriffith$elm_ui$Internal$Model$Class, mdgriffith$elm_ui$Internal$Flag$fontWeight, mdgriffith$elm_ui$Internal$Style$classes.bold);
var author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$ficheSelectorView = function (model) {
	var nameFilterFun = function () {
		var _n10 = model.nameFilter;
		if (_n10.$ === 'Just') {
			if (_n10.a === '') {
				return elm$core$Basics$always(true);
			} else {
				var name = _n10.a;
				return function (_n11) {
					var k = _n11.a;
					var f = _n11.b;
					return A2(
						elm$core$String$contains,
						elm$core$String$toLower(name),
						elm$core$String$toLower(f.nomEntite));
				};
			}
		} else {
			return elm$core$Basics$always(true);
		}
	}();
	var labelFilterFun = function () {
		var _n8 = model.labelFilter;
		if (_n8.$ === 'Just') {
			var label = _n8.a;
			return function (_n9) {
				var k = _n9.a;
				var f = _n9.b;
				return A2(
					elm$core$List$any,
					function (l) {
						return _Utils_eq(l.nom, label);
					},
					f.label);
			};
		} else {
			return elm$core$Basics$always(true);
		}
	}();
	var isSelected = function (name) {
		var _n7 = model.selectedFiche;
		if (_n7.$ === 'Nothing') {
			return false;
		} else {
			var id = _n7.a;
			return A2(
				elm$core$Maybe$withDefault,
				false,
				A2(
					elm$core$Maybe$map,
					function (f) {
						return _Utils_eq(f.nomEntite, name);
					},
					A2(elm$core$Dict$get, id, model.fiches)));
		}
	};
	var filterView = F3(
		function (selected, handler, entry) {
			return A2(
				mdgriffith$elm_ui$Element$Keyed$el,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						A2(mdgriffith$elm_ui$Element$paddingXY, 5, 5),
						mdgriffith$elm_ui$Element$Events$onClick(handler),
						mdgriffith$elm_ui$Element$pointer,
						(_Utils_eq(
						elm$core$Maybe$Just(entry),
						selected) || isSelected(entry)) ? mdgriffith$elm_ui$Element$Background$color(
						A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 0.3)) : author$project$Internals$CommonStyleHelpers$noAttr
					]),
				_Utils_Tuple2(
					entry,
					mdgriffith$elm_ui$Element$text(entry)));
		});
	var catFilterFun = function () {
		var _n5 = model.catFilter;
		if (_n5.$ === 'Just') {
			var cat = _n5.a;
			return function (_n6) {
				var k = _n6.a;
				var f = _n6.b;
				return A2(elm$core$List$member, cat, f.categories);
			};
		} else {
			return elm$core$Basics$always(true);
		}
	}();
	var activFilterFun = function () {
		var _n3 = model.activFilter;
		if (_n3.$ === 'Just') {
			var activ = _n3.a;
			return function (_n4) {
				var k = _n4.a;
				var f = _n4.b;
				return A2(elm$core$List$member, activ, f.natureActiv);
			};
		} else {
			return elm$core$Basics$always(true);
		}
	}();
	var filteredFiches = A2(
		elm$core$List$sortBy,
		function (_n2) {
			var k = _n2.a;
			var f = _n2.b;
			return elm$core$String$toLower(f.nomEntite);
		},
		A2(
			elm$core$List$filter,
			labelFilterFun,
			A2(
				elm$core$List$filter,
				activFilterFun,
				A2(
					elm$core$List$filter,
					catFilterFun,
					A2(
						elm$core$List$filter,
						nameFilterFun,
						elm$core$Dict$toList(model.fiches))))));
	return A2(
		mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$spacing(15),
				mdgriffith$elm_ui$Element$alignTop,
				mdgriffith$elm_ui$Element$Border$widthEach(
				{bottom: 0, left: 0, right: 2, top: 0}),
				mdgriffith$elm_ui$Element$Border$color(
				A3(mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8)),
				mdgriffith$elm_ui$Element$paddingEach(
				{bottom: 0, left: 0, right: 15, top: 0}),
				mdgriffith$elm_ui$Element$width(
				mdgriffith$elm_ui$Element$px(780)),
				mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
				mdgriffith$elm_ui$Element$scrollbarY
			]),
		_List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$Font$bold,
						mdgriffith$elm_ui$Element$Font$size(18)
					]),
				mdgriffith$elm_ui$Element$text('Selection fiche')),
				A2(
				mdgriffith$elm_ui$Element$el,
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle,
				A2(
					mdgriffith$elm_ui$Element$row,
					author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle,
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$text,
							_Utils_ap(
								author$project$Internals$CommonStyleHelpers$textInputStyle,
								_List_fromArray(
									[
										A2(mdgriffith$elm_ui$Element$spacingXY, 0, 15),
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(400))
									])),
							{
								label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
								onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FilterByName,
								placeholder: elm$core$Maybe$Just(
									A2(
										mdgriffith$elm_ui$Element$Input$placeholder,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Filtrer par nom entité'))),
								text: A2(elm$core$Maybe$withDefault, '', model.nameFilter)
							})
						]))),
				A2(
				mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$column,
						_Utils_ap(
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15),
									mdgriffith$elm_ui$Element$alignTop
								]),
							author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$bold,
										mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
									]),
								mdgriffith$elm_ui$Element$text('Catégories ')),
								A2(
								mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Border$width(2),
										mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(150)),
										mdgriffith$elm_ui$Element$height(
										mdgriffith$elm_ui$Element$px(200)),
										mdgriffith$elm_ui$Element$scrollbars
									]),
								A2(
									elm$core$List$map,
									function (e) {
										return A4(
											author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
											false,
											model.catFilter,
											author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FilterByCat(e),
											e);
									},
									elm$core$Set$toList(model.categories)))
							])),
						A2(
						mdgriffith$elm_ui$Element$column,
						_Utils_ap(
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15),
									mdgriffith$elm_ui$Element$alignTop
								]),
							author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$bold,
										mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
									]),
								mdgriffith$elm_ui$Element$text('Nature activité')),
								A2(
								mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Border$width(2),
										mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(300)),
										mdgriffith$elm_ui$Element$height(
										mdgriffith$elm_ui$Element$px(200)),
										mdgriffith$elm_ui$Element$scrollbars
									]),
								A2(
									elm$core$List$map,
									function (e) {
										return A4(
											author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
											false,
											model.activFilter,
											author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FilterByActiv(e),
											e);
									},
									elm$core$Set$toList(model.activites)))
							])),
						A2(
						mdgriffith$elm_ui$Element$column,
						_Utils_ap(
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15),
									mdgriffith$elm_ui$Element$alignTop
								]),
							author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$bold,
										mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
									]),
								mdgriffith$elm_ui$Element$text('Labels')),
								A2(
								mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Border$width(2),
										mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(150)),
										mdgriffith$elm_ui$Element$height(
										mdgriffith$elm_ui$Element$px(200)),
										mdgriffith$elm_ui$Element$scrollbars
									]),
								A2(
									elm$core$List$map,
									function (e) {
										return A4(
											author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
											false,
											model.labelFilter,
											author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FilterByLabel(e),
											e);
									},
									A2(
										elm$core$List$map,
										function ($) {
											return $.nom;
										},
										model.labels)))
							]))
					])),
				A2(
				mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[mdgriffith$elm_ui$Element$Font$bold]),
				mdgriffith$elm_ui$Element$text('Nom fiche entité')),
				A2(
				mdgriffith$elm_ui$Element$column,
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle,
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$column,
						_Utils_ap(
							author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15),
									mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
								])),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[mdgriffith$elm_ui$Element$Font$bold]),
								mdgriffith$elm_ui$Element$text('Nom fiche entité')),
								A2(
								mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Border$width(2),
										mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
										mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
										mdgriffith$elm_ui$Element$height(
										mdgriffith$elm_ui$Element$px(480)),
										mdgriffith$elm_ui$Element$scrollbars
									]),
								A2(
									elm$core$List$map,
									function (_n1) {
										var k = _n1.a;
										var n = _n1.b;
										return A3(
											filterView,
											model.selectedFiche,
											author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectFiche(k),
											n);
									},
									A2(
										elm$core$List$map,
										function (_n0) {
											var k = _n0.a;
											var v = _n0.b;
											return _Utils_Tuple2(k, v.nomEntite);
										},
										filteredFiches)))
							]))
					]))
			]));
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SaveFiche = {$: 'SaveFiche'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRightPanelDisplay = function (a) {
	return {$: 'SetRightPanelDisplay', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirHelpers$isValidFiche = function (f) {
	return (elm$core$List$length(f.categories) >= 1) && ((elm$core$List$length(f.natureActiv) >= 1) && ((f.nomEntite !== '') && ((f.adresse !== '') && (((!_Utils_eq(f.telNumber, elm$core$Maybe$Nothing)) || (elm$core$List$length(f.responsables) >= 1)) && (f.visuel !== '')))));
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddActivToFiche = {$: 'AddActivToFiche'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyActiv = {$: 'ModifyActiv'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveActivFromFiche = {$: 'RemoveActivFromFiche'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectActivInFiche = function (a) {
	return {$: 'SelectActivInFiche', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectAvailableActiv = function (a) {
	return {$: 'SelectAvailableActiv', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetActivite = function (a) {
	return {$: 'SetActivite', a: a};
};
var author$project$Internals$CommonStyleHelpers$red4 = A3(mdgriffith$elm_ui$Element$rgb255, 220, 48, 48);
var author$project$Internals$CommonStyleHelpers$redStar = A2(
	mdgriffith$elm_ui$Element$el,
	_List_fromArray(
		[
			mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$red4),
			mdgriffith$elm_ui$Element$Font$size(18)
		]),
	mdgriffith$elm_ui$Element$text('*'));
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setActivs = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15),
									mdgriffith$elm_ui$Element$alignTop
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$Font$bold,
											mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
										]),
									mdgriffith$elm_ui$Element$text('Activités disponibles')),
									A2(
									mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$Border$width(2),
											mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
											mdgriffith$elm_ui$Element$width(
											mdgriffith$elm_ui$Element$px(350)),
											mdgriffith$elm_ui$Element$height(
											mdgriffith$elm_ui$Element$px(200)),
											mdgriffith$elm_ui$Element$scrollbars
										]),
									A2(
										elm$core$List$map,
										function (e) {
											return A4(
												author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
												false,
												model.selectedAvailableActiv,
												author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectAvailableActiv(e),
												e);
										},
										elm$core$Set$toList(model.activites)))
								])),
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15),
									mdgriffith$elm_ui$Element$alignTop
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$row,
									_List_Nil,
									_List_fromArray(
										[
											A2(
											mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$Font$bold,
													mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
												]),
											mdgriffith$elm_ui$Element$text('Activités fiche')),
											author$project$Internals$CommonStyleHelpers$redStar
										])),
									A2(
									mdgriffith$elm_ui$Element$Input$text,
									_Utils_ap(
										author$project$Internals$CommonStyleHelpers$textInputStyle,
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Element$spacingXY, 0, 15),
												mdgriffith$elm_ui$Element$width(
												mdgriffith$elm_ui$Element$px(180)),
												mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
											])),
									{
										label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
										onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetActivite,
										placeholder: elm$core$Maybe$Just(
											A2(
												mdgriffith$elm_ui$Element$Input$placeholder,
												_List_Nil,
												mdgriffith$elm_ui$Element$text('Nouvelle activité'))),
										text: A2(elm$core$Maybe$withDefault, '', model.activBuffer)
									}),
									A2(
									mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$Border$width(2),
											mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
											mdgriffith$elm_ui$Element$width(
											mdgriffith$elm_ui$Element$px(180)),
											mdgriffith$elm_ui$Element$height(
											mdgriffith$elm_ui$Element$px(155)),
											mdgriffith$elm_ui$Element$scrollbars
										]),
									A2(
										elm$core$List$map,
										function (e) {
											return A4(
												author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
												true,
												model.selectedActivInFiche,
												author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectActivInFiche(e),
												e);
										},
										model.ficheBuffer.natureActiv))
								]))
						])),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					function () {
						var canRemove = (!_Utils_eq(model.selectedActivInFiche, elm$core$Maybe$Nothing)) && _Utils_eq(model.selectedAvailableActiv, elm$core$Maybe$Nothing);
						var canModify = function () {
							var _n2 = _Utils_Tuple2(model.selectedAvailableActiv, model.activBuffer);
							if ((_n2.a.$ === 'Just') && (_n2.b.$ === 'Just')) {
								var avActiv = _n2.a.a;
								var newActiv = _n2.b.a;
								return !_Utils_eq(avActiv, newActiv);
							} else {
								return false;
							}
						}();
						var canAdd = function () {
							var _n0 = _Utils_Tuple2(model.selectedAvailableActiv, model.activBuffer);
							_n0$2:
							while (true) {
								if (_n0.a.$ === 'Just') {
									if (_n0.b.$ === 'Just') {
										var avActiv = _n0.a.a;
										var newActiv = _n0.b.a;
										return _Utils_eq(avActiv, newActiv);
									} else {
										break _n0$2;
									}
								} else {
									if (_n0.b.$ === 'Just') {
										var _n1 = _n0.a;
										var newActiv = _n0.b.a;
										return true;
									} else {
										break _n0$2;
									}
								}
							}
							return false;
						}();
						return _List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(canAdd),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Ajouter activité')),
									onPress: canAdd ? elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddActivToFiche) : elm$core$Maybe$Nothing
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(canRemove),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Supprimer activité')),
									onPress: canRemove ? elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveActivFromFiche) : elm$core$Maybe$Nothing
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(canModify),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Modifier activité')),
									onPress: canModify ? elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyActiv) : elm$core$Maybe$Nothing
								})
							]);
					}())
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddCatToFiche = {$: 'AddCatToFiche'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyCat = {$: 'ModifyCat'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveCatFromFiche = {$: 'RemoveCatFromFiche'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectAvailableCat = function (a) {
	return {$: 'SelectAvailableCat', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectCatInFiche = function (a) {
	return {$: 'SelectCatInFiche', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetCategorie = function (a) {
	return {$: 'SetCategorie', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setCats = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15),
									mdgriffith$elm_ui$Element$alignTop
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$Font$bold,
											mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
										]),
									mdgriffith$elm_ui$Element$text('Catégories disponibles')),
									A2(
									mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$Border$width(2),
											mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
											mdgriffith$elm_ui$Element$width(
											mdgriffith$elm_ui$Element$px(150)),
											mdgriffith$elm_ui$Element$height(
											mdgriffith$elm_ui$Element$px(200)),
											mdgriffith$elm_ui$Element$scrollbars
										]),
									A2(
										elm$core$List$map,
										function (e) {
											return A4(
												author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
												false,
												model.selectedAvailableCat,
												author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectAvailableCat(e),
												e);
										},
										elm$core$Set$toList(model.categories)))
								])),
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15),
									mdgriffith$elm_ui$Element$alignTop
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$row,
									_List_Nil,
									_List_fromArray(
										[
											A2(
											mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$Font$bold,
													mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
												]),
											mdgriffith$elm_ui$Element$text('Catégories fiche')),
											author$project$Internals$CommonStyleHelpers$redStar
										])),
									A2(
									mdgriffith$elm_ui$Element$Input$text,
									_Utils_ap(
										author$project$Internals$CommonStyleHelpers$textInputStyle,
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Element$spacingXY, 0, 15),
												mdgriffith$elm_ui$Element$width(
												mdgriffith$elm_ui$Element$px(180)),
												mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
											])),
									{
										label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
										onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetCategorie,
										placeholder: elm$core$Maybe$Just(
											A2(
												mdgriffith$elm_ui$Element$Input$placeholder,
												_List_Nil,
												mdgriffith$elm_ui$Element$text('Nouvelle catégorie'))),
										text: A2(elm$core$Maybe$withDefault, '', model.catBuffer)
									}),
									A2(
									mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$Border$width(2),
											mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
											mdgriffith$elm_ui$Element$width(
											mdgriffith$elm_ui$Element$px(180)),
											mdgriffith$elm_ui$Element$height(
											mdgriffith$elm_ui$Element$px(155)),
											mdgriffith$elm_ui$Element$scrollbars
										]),
									A2(
										elm$core$List$map,
										function (e) {
											return A4(
												author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
												true,
												model.selectedCatInFiche,
												author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectCatInFiche(e),
												e);
										},
										model.ficheBuffer.categories))
								]))
						])),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					function () {
						var canRemove = (!_Utils_eq(model.selectedCatInFiche, elm$core$Maybe$Nothing)) && _Utils_eq(model.selectedAvailableCat, elm$core$Maybe$Nothing);
						var canModify = function () {
							var _n2 = _Utils_Tuple2(model.selectedAvailableCat, model.catBuffer);
							if ((_n2.a.$ === 'Just') && (_n2.b.$ === 'Just')) {
								var avCat = _n2.a.a;
								var newCat = _n2.b.a;
								return !_Utils_eq(avCat, newCat);
							} else {
								return false;
							}
						}();
						var canAdd = function () {
							var _n0 = _Utils_Tuple2(model.selectedAvailableCat, model.catBuffer);
							_n0$2:
							while (true) {
								if (_n0.a.$ === 'Just') {
									if (_n0.b.$ === 'Just') {
										var avCat = _n0.a.a;
										var newCat = _n0.b.a;
										return _Utils_eq(avCat, newCat);
									} else {
										break _n0$2;
									}
								} else {
									if (_n0.b.$ === 'Just') {
										var _n1 = _n0.a;
										var newCat = _n0.b.a;
										return true;
									} else {
										break _n0$2;
									}
								}
							}
							return false;
						}();
						return _List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(canAdd),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Ajouter catégorie')),
									onPress: canAdd ? elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddCatToFiche) : elm$core$Maybe$Nothing
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(canRemove),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Supprimer catégorie')),
									onPress: canRemove ? elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveCatFromFiche) : elm$core$Maybe$Nothing
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(canModify),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Modifier catégorie')),
									onPress: canModify ? elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyCat) : elm$core$Maybe$Nothing
								})
							]);
					}())
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$catsActivsCont = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$map,
			model.externalMsg,
			A2(
				mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(20)
						]),
					author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle),
				_List_fromArray(
					[
						A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setCats, config, model),
						A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setActivs, config, model)
					])));
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetAddress = function (a) {
	return {$: 'SetAddress', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setAdresse = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
					]),
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(400)),
								mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						label: A2(
							mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$centerY]),
							A2(
								mdgriffith$elm_ui$Element$row,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$Font$bold,
												mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
											]),
										mdgriffith$elm_ui$Element$text('Adresse / Siège social')),
										author$project$Internals$CommonStyleHelpers$redStar
									]))),
						onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetAddress,
						placeholder: elm$core$Maybe$Nothing,
						text: model.ficheBuffer.adresse
					})
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddEmail = {$: 'AddEmail'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyEmail = {$: 'ModifyEmail'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveEmail = {$: 'RemoveEmail'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectEmailInFiche = function (a) {
	return {$: 'SelectEmailInFiche', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetEmail = function (a) {
	return {$: 'SetEmail', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setEmails = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
					]),
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Font$bold,
									mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
								]),
							mdgriffith$elm_ui$Element$text('Emails')),
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Border$width(2),
									mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
									mdgriffith$elm_ui$Element$width(
									mdgriffith$elm_ui$Element$px(400)),
									mdgriffith$elm_ui$Element$height(
									mdgriffith$elm_ui$Element$px(200)),
									mdgriffith$elm_ui$Element$scrollbars
								]),
							A2(
								elm$core$List$map,
								function (s) {
									return A4(
										author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
										true,
										model.selectedEmail,
										author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectEmailInFiche(s),
										s);
								},
								model.ficheBuffer.email))
						])),
					A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					function () {
						var isExistingEmail = _Utils_eq(
							A2(
								elm$core$Maybe$map,
								function (e) {
									return A2(elm$core$List$member, e, model.ficheBuffer.email);
								},
								model.emailBuffer),
							elm$core$Maybe$Just(true));
						var canModify = (!_Utils_eq(model.selectedEmail, elm$core$Maybe$Nothing)) && ((!_Utils_eq(
							model.emailBuffer,
							elm$core$Maybe$Just(''))) && (!isExistingEmail));
						var canDeleteEmail = (!_Utils_eq(model.selectedEmail, elm$core$Maybe$Nothing)) && isExistingEmail;
						var canAddEmail = (!_Utils_eq(model.emailBuffer, elm$core$Maybe$Nothing)) && (_Utils_eq(model.selectedEmail, elm$core$Maybe$Nothing) && (!isExistingEmail));
						return _List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$Input$text,
								_Utils_ap(
									author$project$Internals$CommonStyleHelpers$textInputStyle,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$width(
											mdgriffith$elm_ui$Element$px(180)),
											A2(mdgriffith$elm_ui$Element$spacingXY, 0, 15),
											mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
										])),
								{
									label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
									onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetEmail,
									placeholder: elm$core$Maybe$Just(
										A2(
											mdgriffith$elm_ui$Element$Input$placeholder,
											_List_Nil,
											mdgriffith$elm_ui$Element$text('Nouvel Email'))),
									text: A2(elm$core$Maybe$withDefault, '', model.emailBuffer)
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(canModify),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Modifier email')),
									onPress: canModify ? elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyEmail) : elm$core$Maybe$Nothing
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(canAddEmail),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Ajouter email')),
									onPress: canAddEmail ? elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddEmail) : elm$core$Maybe$Nothing
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(canDeleteEmail),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Supprimer email')),
									onPress: canDeleteEmail ? elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveEmail) : elm$core$Maybe$Nothing
								})
							]);
					}())
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetFax = function (a) {
	return {$: 'SetFax', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setFax = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$Input$text,
			_Utils_ap(
				author$project$Internals$CommonStyleHelpers$textInputStyle,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(
						mdgriffith$elm_ui$Element$px(120)),
						mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
					])),
			{
				label: A2(
					mdgriffith$elm_ui$Element$Input$labelLeft,
					_List_fromArray(
						[mdgriffith$elm_ui$Element$centerY]),
					A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Font$bold,
								mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
							]),
						mdgriffith$elm_ui$Element$text('Fax'))),
				onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetFax,
				placeholder: elm$core$Maybe$Nothing,
				text: A2(elm$core$Maybe$withDefault, '', model.ficheBuffer.fax)
			});
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddResp = {$: 'AddResp'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyResp = {$: 'ModifyResp'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveResp = {$: 'RemoveResp'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectRespInFiche = function (a) {
	return {$: 'SelectRespInFiche', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRespNom = function (a) {
	return {$: 'SetRespNom', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRespPoste = function (a) {
	return {$: 'SetRespPoste', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRespTelFixe = function (a) {
	return {$: 'SetRespTelFixe', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRespTelPortable = function (a) {
	return {$: 'SetRespTelPortable', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirHelpers$getTFixe = function (tel) {
	switch (tel.$) {
		case 'TelFixe':
			var n = tel.a;
			return elm$core$Maybe$Just(n);
		case 'TelPortable':
			var n = tel.a;
			return elm$core$Maybe$Nothing;
		default:
			var _n1 = tel.a;
			var n1 = _n1.a;
			var n2 = _n1.b;
			return elm$core$Maybe$Just(n1);
	}
};
var author$project$GeneralDirectoryEditor$GeneralDirHelpers$getTPortable = function (tel) {
	switch (tel.$) {
		case 'TelFixe':
			var n = tel.a;
			return elm$core$Maybe$Nothing;
		case 'TelPortable':
			var n = tel.a;
			return elm$core$Maybe$Just(n);
		default:
			var _n1 = tel.a;
			var n1 = _n1.a;
			var n2 = _n1.b;
			return elm$core$Maybe$Just(n2);
	}
};
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setResponsables = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
					]),
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Font$bold,
									mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
								]),
							mdgriffith$elm_ui$Element$text('Responsables')),
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Border$width(2),
									mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
									mdgriffith$elm_ui$Element$width(
									mdgriffith$elm_ui$Element$px(400)),
									mdgriffith$elm_ui$Element$height(
									mdgriffith$elm_ui$Element$px(200)),
									mdgriffith$elm_ui$Element$scrollbars
								]),
							A2(
								elm$core$List$map,
								function (_n0) {
									var r = _n0.a;
									var e = _n0.b;
									return A4(
										author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
										true,
										A2(
											elm$core$Maybe$map,
											function ($) {
												return $.nom;
											},
											model.selectedResp),
										author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectRespInFiche(r),
										e);
								},
								A2(
									elm$core$List$map,
									function (r) {
										return _Utils_Tuple2(
											r,
											function ($) {
												return $.nom;
											}(r));
									},
									model.ficheBuffer.responsables)))
						])),
					A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$text,
							_Utils_ap(
								author$project$Internals$CommonStyleHelpers$textInputStyle,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(180)),
										mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
									])),
							{
								label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
								onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRespNom,
								placeholder: elm$core$Maybe$Just(
									A2(
										mdgriffith$elm_ui$Element$Input$placeholder,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Nom'))),
								text: A2(
									elm$core$Maybe$withDefault,
									'',
									A2(
										elm$core$Maybe$map,
										function ($) {
											return $.nom;
										},
										model.respBuffer))
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$text,
							_Utils_ap(
								author$project$Internals$CommonStyleHelpers$textInputStyle,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(180)),
										mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
									])),
							{
								label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
								onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRespPoste,
								placeholder: elm$core$Maybe$Just(
									A2(
										mdgriffith$elm_ui$Element$Input$placeholder,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Poste'))),
								text: A2(
									elm$core$Maybe$withDefault,
									'',
									A2(
										elm$core$Maybe$map,
										function ($) {
											return $.poste;
										},
										model.respBuffer))
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$text,
							_Utils_ap(
								author$project$Internals$CommonStyleHelpers$textInputStyle,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(180)),
										mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
									])),
							{
								label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
								onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRespTelFixe,
								placeholder: elm$core$Maybe$Just(
									A2(
										mdgriffith$elm_ui$Element$Input$placeholder,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Tel. fixe'))),
								text: A2(
									elm$core$Maybe$withDefault,
									'',
									A2(
										elm$core$Maybe$andThen,
										author$project$GeneralDirectoryEditor$GeneralDirHelpers$getTFixe,
										A2(
											elm$core$Maybe$map,
											function ($) {
												return $.tel;
											},
											model.respBuffer)))
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$text,
							_Utils_ap(
								author$project$Internals$CommonStyleHelpers$textInputStyle,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(180)),
										mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
									])),
							{
								label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
								onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRespTelPortable,
								placeholder: elm$core$Maybe$Just(
									A2(
										mdgriffith$elm_ui$Element$Input$placeholder,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Tel. portable'))),
								text: A2(
									elm$core$Maybe$withDefault,
									'',
									A2(
										elm$core$Maybe$andThen,
										author$project$GeneralDirectoryEditor$GeneralDirHelpers$getTPortable,
										A2(
											elm$core$Maybe$map,
											function ($) {
												return $.tel;
											},
											model.respBuffer)))
							})
						])),
					A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					function () {
						var isExistingResp = _Utils_eq(
							A2(
								elm$core$Maybe$map,
								function (r) {
									return A2(elm$core$List$member, r, model.ficheBuffer.responsables);
								},
								model.respBuffer),
							elm$core$Maybe$Just(true));
						var canModify = (!_Utils_eq(model.selectedResp, elm$core$Maybe$Nothing)) && ((!_Utils_eq(
							model.respBuffer,
							elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyResp))) && (!isExistingResp));
						var canDeleteResp = (!_Utils_eq(model.selectedResp, elm$core$Maybe$Nothing)) && isExistingResp;
						var canAddResp = (!_Utils_eq(model.respBuffer, elm$core$Maybe$Nothing)) && (_Utils_eq(model.selectedResp, elm$core$Maybe$Nothing) && (!isExistingResp));
						return _List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(canModify),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Modifier responsable')),
									onPress: canModify ? elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyResp) : elm$core$Maybe$Nothing
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(canAddResp),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Ajouter responsable')),
									onPress: canAddResp ? elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddResp) : elm$core$Maybe$Nothing
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(canDeleteResp),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Supprimer responsable')),
									onPress: canDeleteResp ? elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveResp) : elm$core$Maybe$Nothing
								})
							]);
					}())
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetSiteLabel = function (a) {
	return {$: 'SetSiteLabel', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetSiteUrl = function (a) {
	return {$: 'SetSiteUrl', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setSite = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
					]),
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(180)),
								mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						label: A2(
							mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$centerY]),
							A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$bold,
										mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
									]),
								mdgriffith$elm_ui$Element$text('Nom site'))),
						onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetSiteLabel,
						placeholder: elm$core$Maybe$Nothing,
						text: A2(
							elm$core$Maybe$withDefault,
							'',
							A2(elm$core$Maybe$map, elm$core$Tuple$first, model.ficheBuffer.site))
					}),
					A2(
					mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(180)),
								mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						label: A2(
							mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$centerY]),
							A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$bold,
										mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
									]),
								mdgriffith$elm_ui$Element$text('Url site'))),
						onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetSiteUrl,
						placeholder: elm$core$Maybe$Nothing,
						text: A2(
							elm$core$Maybe$withDefault,
							'',
							A2(elm$core$Maybe$map, elm$core$Tuple$second, model.ficheBuffer.site))
					})
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetTelFixe = function (a) {
	return {$: 'SetTelFixe', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetTelPortable = function (a) {
	return {$: 'SetTelPortable', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setTel = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(120)),
								mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						label: A2(
							mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$centerY]),
							A2(
								mdgriffith$elm_ui$Element$row,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$Font$bold,
												mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
											]),
										mdgriffith$elm_ui$Element$text('Tel. fixe')),
										author$project$Internals$CommonStyleHelpers$redStar
									]))),
						onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetTelFixe,
						placeholder: elm$core$Maybe$Nothing,
						text: A2(
							elm$core$Maybe$withDefault,
							'',
							A2(elm$core$Maybe$andThen, author$project$GeneralDirectoryEditor$GeneralDirHelpers$getTFixe, model.ficheBuffer.telNumber))
					}),
					mdgriffith$elm_ui$Element$text('et / ou'),
					A2(
					mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(120)),
								mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						label: A2(
							mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$centerY]),
							A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$bold,
										mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
									]),
								mdgriffith$elm_ui$Element$text('Tel. portable'))),
						onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetTelPortable,
						placeholder: elm$core$Maybe$Nothing,
						text: A2(
							elm$core$Maybe$withDefault,
							'',
							A2(elm$core$Maybe$andThen, author$project$GeneralDirectoryEditor$GeneralDirHelpers$getTPortable, model.ficheBuffer.telNumber))
					})
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$contactsCont = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$map,
			model.externalMsg,
			A2(
				mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(20)
						]),
					author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle),
				_List_fromArray(
					[
						A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setAdresse, config, model),
						A2(
						mdgriffith$elm_ui$Element$row,
						_Utils_ap(
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15),
									mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
								]),
							author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
						_List_fromArray(
							[
								A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setTel, config, model),
								A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setFax, config, model)
							])),
						A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setEmails, config, model),
						A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setSite, config, model),
						A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setResponsables, config, model)
					])));
	});
var Skinney$murmur3$Murmur3$HashData = F4(
	function (shift, seed, hash, charsProcessed) {
		return {charsProcessed: charsProcessed, hash: hash, seed: seed, shift: shift};
	});
var Skinney$murmur3$Murmur3$c1 = 3432918353;
var Skinney$murmur3$Murmur3$c2 = 461845907;
var Skinney$murmur3$Murmur3$multiplyBy = F2(
	function (b, a) {
		return ((a & 65535) * b) + ((((a >>> 16) * b) & 65535) << 16);
	});
var Skinney$murmur3$Murmur3$rotlBy = F2(
	function (b, a) {
		return (a << b) | (a >>> (32 - b));
	});
var Skinney$murmur3$Murmur3$finalize = function (data) {
	var acc = data.hash ? (data.seed ^ A2(
		Skinney$murmur3$Murmur3$multiplyBy,
		Skinney$murmur3$Murmur3$c2,
		A2(
			Skinney$murmur3$Murmur3$rotlBy,
			15,
			A2(Skinney$murmur3$Murmur3$multiplyBy, Skinney$murmur3$Murmur3$c1, data.hash)))) : data.seed;
	var h0 = acc ^ data.charsProcessed;
	var h1 = A2(Skinney$murmur3$Murmur3$multiplyBy, 2246822507, h0 ^ (h0 >>> 16));
	var h2 = A2(Skinney$murmur3$Murmur3$multiplyBy, 3266489909, h1 ^ (h1 >>> 13));
	return (h2 ^ (h2 >>> 16)) >>> 0;
};
var Skinney$murmur3$Murmur3$mix = F2(
	function (h1, k1) {
		return A2(
			Skinney$murmur3$Murmur3$multiplyBy,
			5,
			A2(
				Skinney$murmur3$Murmur3$rotlBy,
				13,
				h1 ^ A2(
					Skinney$murmur3$Murmur3$multiplyBy,
					Skinney$murmur3$Murmur3$c2,
					A2(
						Skinney$murmur3$Murmur3$rotlBy,
						15,
						A2(Skinney$murmur3$Murmur3$multiplyBy, Skinney$murmur3$Murmur3$c1, k1))))) + 3864292196;
	});
var Skinney$murmur3$Murmur3$hashFold = F2(
	function (c, data) {
		var res = data.hash | ((255 & elm$core$Char$toCode(c)) << data.shift);
		var _n0 = data.shift;
		if (_n0 === 24) {
			return {
				charsProcessed: data.charsProcessed + 1,
				hash: 0,
				seed: A2(Skinney$murmur3$Murmur3$mix, data.seed, res),
				shift: 0
			};
		} else {
			return {charsProcessed: data.charsProcessed + 1, hash: res, seed: data.seed, shift: data.shift + 8};
		}
	});
var elm$core$String$foldl = _String_foldl;
var Skinney$murmur3$Murmur3$hashString = F2(
	function (seed, str) {
		return Skinney$murmur3$Murmur3$finalize(
			A3(
				elm$core$String$foldl,
				Skinney$murmur3$Murmur3$hashFold,
				A4(Skinney$murmur3$Murmur3$HashData, 0, seed, 0, 0),
				str));
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddDescription = {$: 'AddDescription'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyDescr = {$: 'ModifyDescr'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$MoveDescrDown = {$: 'MoveDescrDown'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$MoveDescrUp = {$: 'MoveDescrUp'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveDescription = {$: 'RemoveDescription'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectDescrInFiche = function (a) {
	return {$: 'SelectDescrInFiche', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetDescription = function (a) {
	return {$: 'SetDescription', a: a};
};
var author$project$Internals$Icons$chevronsDown = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'chevrons-down',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$polyline,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$points('7 13 12 18 17 13')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$polyline,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$points('7 6 12 11 17 6')
					]),
				_List_Nil)
			]));
};
var author$project$Internals$Icons$chevronsUp = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'chevrons-up',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$polyline,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$points('17 11 12 6 7 11')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$polyline,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$points('17 18 12 13 7 18')
					]),
				_List_Nil)
			]));
};
var mdgriffith$elm_ui$Element$Input$HiddenLabel = function (a) {
	return {$: 'HiddenLabel', a: a};
};
var mdgriffith$elm_ui$Element$Input$labelHidden = mdgriffith$elm_ui$Element$Input$HiddenLabel;
var mdgriffith$elm_ui$Element$Input$TextArea = {$: 'TextArea'};
var mdgriffith$elm_ui$Element$Input$multiline = F2(
	function (attrs, multi) {
		return A3(
			mdgriffith$elm_ui$Element$Input$textHelper,
			{autofill: elm$core$Maybe$Nothing, spellchecked: multi.spellcheck, type_: mdgriffith$elm_ui$Element$Input$TextArea},
			attrs,
			{label: multi.label, onChange: multi.onChange, placeholder: multi.placeholder, text: multi.text});
	});
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setDescriptions = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
					]),
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Font$bold,
									mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
								]),
							mdgriffith$elm_ui$Element$text('Descriptions')),
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Border$width(2),
									mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
									mdgriffith$elm_ui$Element$width(
									mdgriffith$elm_ui$Element$px(400)),
									mdgriffith$elm_ui$Element$height(
									mdgriffith$elm_ui$Element$px(200)),
									mdgriffith$elm_ui$Element$scrollbars
								]),
							A2(
								elm$core$List$map,
								function (d) {
									return A4(
										author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
										true,
										model.selectedDescr,
										author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectDescrInFiche(d),
										d);
								},
								model.ficheBuffer.description))
						])),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Keyed$el,
							_List_Nil,
							_Utils_Tuple2(
								'descrMultilineKey' + elm$core$String$fromInt(
									A2(
										Skinney$murmur3$Murmur3$hashString,
										0,
										function (s) {
											return _Utils_ap(
												s,
												A2(elm$core$Maybe$withDefault, '', model.selectedDescr));
										}(
											A2(elm$core$String$join, '', model.ficheBuffer.description)))),
								A2(
									mdgriffith$elm_ui$Element$Input$multiline,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$width(
											mdgriffith$elm_ui$Element$px(400)),
											mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
										]),
									{
										label: mdgriffith$elm_ui$Element$Input$labelHidden(''),
										onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetDescription,
										placeholder: elm$core$Maybe$Just(
											A2(
												mdgriffith$elm_ui$Element$Input$placeholder,
												_List_Nil,
												mdgriffith$elm_ui$Element$text('Ajouter un paragraphe'))),
										spellcheck: false,
										text: A2(elm$core$Maybe$withDefault, '', model.descrBuffer)
									}))),
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(model.selectedDescr, elm$core$Maybe$Nothing)),
									{
										label: A2(
											mdgriffith$elm_ui$Element$el,
											_List_Nil,
											mdgriffith$elm_ui$Element$html(
												author$project$Internals$Icons$chevronsUp(18))),
										onPress: A2(
											elm$core$Maybe$map,
											function (_n0) {
												return author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$MoveDescrUp;
											},
											model.selectedDescr)
									}),
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(model.selectedDescr, elm$core$Maybe$Nothing)),
									{
										label: A2(
											mdgriffith$elm_ui$Element$el,
											_List_Nil,
											mdgriffith$elm_ui$Element$html(
												author$project$Internals$Icons$chevronsDown(18))),
										onPress: A2(
											elm$core$Maybe$map,
											function (_n1) {
												return author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$MoveDescrDown;
											},
											model.selectedDescr)
									})
								]))
						])),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					function () {
						var isExisting = _Utils_eq(
							A2(
								elm$core$Maybe$map,
								function (r) {
									return A2(elm$core$List$member, r, model.ficheBuffer.description);
								},
								model.descrBuffer),
							elm$core$Maybe$Just(true));
						var canModify = (!_Utils_eq(model.selectedDescr, elm$core$Maybe$Nothing)) && ((!_Utils_eq(
							model.descrBuffer,
							elm$core$Maybe$Just(''))) && (!isExisting));
						var canDelete = (!_Utils_eq(model.selectedDescr, elm$core$Maybe$Nothing)) && isExisting;
						var canAdd = (!_Utils_eq(model.descrBuffer, elm$core$Maybe$Nothing)) && (_Utils_eq(model.selectedDescr, elm$core$Maybe$Nothing) && (!isExisting));
						return _List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(canModify),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Modifier description')),
									onPress: canModify ? elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyDescr) : elm$core$Maybe$Nothing
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(canAdd),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Ajouter description')),
									onPress: canAdd ? elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddDescription) : elm$core$Maybe$Nothing
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(canDelete),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Supprimer description')),
									onPress: canDelete ? elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveDescription) : elm$core$Maybe$Nothing
								})
							]);
					}())
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$descrCont = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$map,
			model.externalMsg,
			A2(
				mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(20)
						]),
					author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle),
				_List_fromArray(
					[
						A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setDescriptions, config, model)
					])));
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddLabelToFiche = {$: 'AddLabelToFiche'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyLabel = {$: 'ModifyLabel'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveLabelFromFiche = {$: 'RemoveLabelFromFiche'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectAvailableLabel = function (a) {
	return {$: 'SelectAvailableLabel', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectLabelInFiche = function (a) {
	return {$: 'SelectLabelInFiche', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLabelLink = function (a) {
	return {$: 'SetLabelLink', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLabelName = function (a) {
	return {$: 'SetLabelName', a: a};
};
var author$project$FileExplorer$FileExplorer$ReadWrite = function (a) {
	return {$: 'ReadWrite', a: a};
};
var author$project$FileExplorer$FileExplorer$getSelectedDoc = function (model) {
	var _n0 = model.selectedFsItem;
	if ((_n0.$ === 'Just') && (_n0.a.$ === 'File')) {
		var path = _n0.a.a.path;
		var name = _n0.a.a.name;
		var fileType = _n0.a.a.fileType;
		var fileSize = _n0.a.a.fileSize;
		if (fileType.$ === 'RegFile') {
			return elm$core$Maybe$Just(
				'/' + A2(elm$core$String$join, '/', path));
		} else {
			return elm$core$Maybe$Nothing;
		}
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var author$project$FileExplorer$FileExplorer$getSelectedImage = function (model) {
	var _n0 = model.selectedFsItem;
	if ((_n0.$ === 'Just') && (_n0.a.$ === 'File')) {
		var path = _n0.a.a.path;
		var name = _n0.a.a.name;
		var fileType = _n0.a.a.fileType;
		var fileSize = _n0.a.a.fileSize;
		if (fileType.$ === 'ImageFile') {
			var width = fileType.a.width;
			var height = fileType.a.height;
			return elm$core$Maybe$Just(
				{
					height: height,
					src: '/' + A2(elm$core$String$join, '/', path),
					width: width
				});
		} else {
			return elm$core$Maybe$Nothing;
		}
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var author$project$Internals$CommonHelpers$PickedDoc = function (a) {
	return {$: 'PickedDoc', a: a};
};
var author$project$Internals$CommonHelpers$PickedImage = function (a) {
	return {$: 'PickedImage', a: a};
};
var author$project$FileExplorer$FileExplorer$pickerView = F5(
	function (backMsg, confirmMsg, root, config, externalMsg) {
		var selector = function (m) {
			if (root.$ === 'ImagesRoot') {
				return A2(
					elm$core$Maybe$map,
					function (_n1) {
						var src = _n1.src;
						var width = _n1.width;
						var height = _n1.height;
						return author$project$Internals$CommonHelpers$PickedImage(
							{height: height, url: src, width: width});
					},
					author$project$FileExplorer$FileExplorer$getSelectedImage(m));
			} else {
				return A2(
					elm$core$Maybe$map,
					author$project$Internals$CommonHelpers$PickedDoc,
					author$project$FileExplorer$FileExplorer$getSelectedDoc(m));
			}
		};
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 15, left: 0, right: 0, top: 0})
				]),
			_List_fromArray(
				[
					A2(
					author$project$FileExplorer$FileExplorer$view,
					{
						logInfo: config.logInfo,
						maxHeight: (config.maxHeight < 800) ? 400 : 500,
						mode: author$project$FileExplorer$FileExplorer$ReadWrite(root),
						zone: config.zone
					},
					config.fileExplorer),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15),
							A2(mdgriffith$elm_ui$Element$paddingXY, 15, 0)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Retour'),
								onPress: elm$core$Maybe$Just(
									externalMsg(backMsg))
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(
									selector(config.fileExplorer),
									elm$core$Maybe$Nothing)),
							{
								label: mdgriffith$elm_ui$Element$text('Valider'),
								onPress: A2(
									elm$core$Maybe$map,
									A2(elm$core$Basics$composeL, externalMsg, confirmMsg),
									selector(config.fileExplorer))
							})
						]))
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$CloseLabelVisualPicker = {$: 'CloseLabelVisualPicker'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLabelVisual = function (a) {
	return {$: 'SetLabelVisual', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$labelVisualPickerView = F2(
	function (config, model) {
		return A5(author$project$FileExplorer$FileExplorer$pickerView, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$CloseLabelVisualPicker, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLabelVisual, author$project$FileExplorer$FileExplorer$ImagesRoot, config, model.externalMsg);
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$OpenLabelVisualPicker = {$: 'OpenLabelVisualPicker'};
var author$project$Internals$CommonStyleHelpers$grey5 = A3(mdgriffith$elm_ui$Element$rgb255, 207, 214, 222);
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setLabelVisual = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(
							mdgriffith$elm_ui$Element$px(150)),
							mdgriffith$elm_ui$Element$height(
							mdgriffith$elm_ui$Element$px(113)),
							mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey5)
						]),
					A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(138)),
								mdgriffith$elm_ui$Element$height(
								mdgriffith$elm_ui$Element$px(104)),
								mdgriffith$elm_ui$Element$Background$uncropped(
								A2(
									elm$core$Maybe$withDefault,
									'',
									A2(
										elm$core$Maybe$map,
										A2(
											elm$core$Basics$composeL,
											function ($) {
												return $.url;
											},
											function ($) {
												return $.logo;
											}),
										model.labelBuffer))),
								mdgriffith$elm_ui$Element$centerX,
								mdgriffith$elm_ui$Element$centerY
							]),
						mdgriffith$elm_ui$Element$none)),
					A2(
					mdgriffith$elm_ui$Element$Input$button,
					author$project$Internals$CommonStyleHelpers$buttonStyle(true),
					{
						label: A2(
							mdgriffith$elm_ui$Element$el,
							_List_Nil,
							mdgriffith$elm_ui$Element$text('Choisir visuel')),
						onPress: elm$core$Maybe$Just(
							model.externalMsg(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$OpenLabelVisualPicker))
					})
				]));
	});
var mdgriffith$elm_ui$Internal$Model$Below = {$: 'Below'};
var mdgriffith$elm_ui$Element$below = function (element) {
	return A2(mdgriffith$elm_ui$Internal$Model$Nearby, mdgriffith$elm_ui$Internal$Model$Below, element);
};
var mdgriffith$elm_ui$Internal$Model$Min = F2(
	function (a, b) {
		return {$: 'Min', a: a, b: b};
	});
var mdgriffith$elm_ui$Element$minimum = F2(
	function (i, l) {
		return A2(mdgriffith$elm_ui$Internal$Model$Min, i, l);
	});
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setLabels = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$below(
							(!model.labelVisualPickerOpen) ? mdgriffith$elm_ui$Element$none : A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Background$color(
										A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
										mdgriffith$elm_ui$Element$width(
										A2(
											mdgriffith$elm_ui$Element$minimum,
											850,
											A2(mdgriffith$elm_ui$Element$maximum, 920, mdgriffith$elm_ui$Element$shrink))),
										mdgriffith$elm_ui$Element$Border$shadow(
										{
											blur: 10,
											color: A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
											offset: _Utils_Tuple2(4, 4),
											size: 5
										})
									]),
								A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$labelVisualPickerView, config, model)))
						]),
					mdgriffith$elm_ui$Element$none),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$map,
							model.externalMsg,
							A2(
								mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(15),
										mdgriffith$elm_ui$Element$alignTop
									]),
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$Font$bold,
												mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
											]),
										mdgriffith$elm_ui$Element$text('Labels disponibles')),
										A2(
										mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$Border$width(2),
												mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
												mdgriffith$elm_ui$Element$width(
												mdgriffith$elm_ui$Element$px(150)),
												mdgriffith$elm_ui$Element$height(
												mdgriffith$elm_ui$Element$px(242)),
												mdgriffith$elm_ui$Element$scrollbars
											]),
										A2(
											elm$core$List$map,
											function (e) {
												return A4(
													author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
													false,
													model.selectedAvailableLabel,
													author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectAvailableLabel(e),
													e);
											},
											A2(
												elm$core$List$map,
												function ($) {
													return $.nom;
												},
												model.labels)))
									]))),
							A2(
							mdgriffith$elm_ui$Element$map,
							model.externalMsg,
							A2(
								mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(15),
										mdgriffith$elm_ui$Element$alignTop
									]),
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$Font$bold,
												mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
											]),
										mdgriffith$elm_ui$Element$text('Labels fiche')),
										A2(
										mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$Border$width(2),
												mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
												mdgriffith$elm_ui$Element$width(
												mdgriffith$elm_ui$Element$px(180)),
												mdgriffith$elm_ui$Element$height(
												mdgriffith$elm_ui$Element$px(242)),
												mdgriffith$elm_ui$Element$scrollbars
											]),
										A2(
											elm$core$List$map,
											function (e) {
												return A4(
													author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
													true,
													model.selectedLabelInFiche,
													author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectLabelInFiche(e),
													e);
											},
											A2(
												elm$core$List$map,
												function ($) {
													return $.nom;
												},
												model.ficheBuffer.label)))
									]))),
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15),
									mdgriffith$elm_ui$Element$alignTop
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$Font$bold,
											mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
										]),
									mdgriffith$elm_ui$Element$text('Créer / Modifier label')),
									A2(
									mdgriffith$elm_ui$Element$map,
									model.externalMsg,
									A2(
										mdgriffith$elm_ui$Element$Input$text,
										_Utils_ap(
											author$project$Internals$CommonStyleHelpers$textInputStyle,
											_List_fromArray(
												[
													A2(mdgriffith$elm_ui$Element$spacingXY, 0, 15),
													mdgriffith$elm_ui$Element$width(
													mdgriffith$elm_ui$Element$px(180)),
													mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
												])),
										{
											label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
											onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLabelName,
											placeholder: elm$core$Maybe$Just(
												A2(
													mdgriffith$elm_ui$Element$Input$placeholder,
													_List_Nil,
													mdgriffith$elm_ui$Element$text('Nom label'))),
											text: A2(
												elm$core$Maybe$withDefault,
												'',
												A2(
													elm$core$Maybe$map,
													function ($) {
														return $.nom;
													},
													model.labelBuffer))
										})),
									A2(
									mdgriffith$elm_ui$Element$map,
									model.externalMsg,
									A2(
										mdgriffith$elm_ui$Element$Input$text,
										_Utils_ap(
											author$project$Internals$CommonStyleHelpers$textInputStyle,
											_List_fromArray(
												[
													A2(mdgriffith$elm_ui$Element$spacingXY, 0, 15),
													mdgriffith$elm_ui$Element$width(
													mdgriffith$elm_ui$Element$px(180)),
													mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
												])),
										{
											label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
											onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLabelLink,
											placeholder: elm$core$Maybe$Just(
												A2(
													mdgriffith$elm_ui$Element$Input$placeholder,
													_List_Nil,
													mdgriffith$elm_ui$Element$text('Lien label'))),
											text: A2(
												elm$core$Maybe$withDefault,
												'',
												A2(
													elm$core$Maybe$map,
													function ($) {
														return $.lien;
													},
													model.labelBuffer))
										})),
									A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setLabelVisual, config, model)
								]))
						])),
					A2(
					mdgriffith$elm_ui$Element$map,
					model.externalMsg,
					A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15),
								mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
							]),
						function () {
							var canRemove = (!_Utils_eq(model.selectedLabelInFiche, elm$core$Maybe$Nothing)) && _Utils_eq(model.selectedAvailableLabel, elm$core$Maybe$Nothing);
							var canModify = function () {
								var _n2 = _Utils_Tuple2(
									A2(author$project$GeneralDirectoryEditor$GeneralDirHelpers$extractLabel, model, model.selectedAvailableLabel),
									model.labelBuffer);
								if ((_n2.a.$ === 'Just') && (_n2.b.$ === 'Just')) {
									var avLabel = _n2.a.a;
									var newLabel = _n2.b.a;
									return (!_Utils_eq(avLabel, newLabel)) && author$project$GeneralDirectoryEditor$GeneralDirHelpers$validLabel(newLabel);
								} else {
									return false;
								}
							}();
							var canAdd = function () {
								var _n0 = _Utils_Tuple2(
									A2(author$project$GeneralDirectoryEditor$GeneralDirHelpers$extractLabel, model, model.selectedAvailableLabel),
									model.labelBuffer);
								_n0$2:
								while (true) {
									if (_n0.a.$ === 'Just') {
										if (_n0.b.$ === 'Just') {
											var avLabel = _n0.a.a;
											var newLabel = _n0.b.a;
											return _Utils_eq(avLabel, newLabel);
										} else {
											break _n0$2;
										}
									} else {
										if (_n0.b.$ === 'Just') {
											var _n1 = _n0.a;
											var newLabel = _n0.b.a;
											return author$project$GeneralDirectoryEditor$GeneralDirHelpers$validLabel(newLabel);
										} else {
											break _n0$2;
										}
									}
								}
								return false;
							}();
							return _List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(canAdd),
									{
										label: A2(
											mdgriffith$elm_ui$Element$el,
											_List_Nil,
											mdgriffith$elm_ui$Element$text('Ajouter label')),
										onPress: canAdd ? elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddLabelToFiche) : elm$core$Maybe$Nothing
									}),
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(canRemove),
									{
										label: A2(
											mdgriffith$elm_ui$Element$el,
											_List_Nil,
											mdgriffith$elm_ui$Element$text('Supprimer label')),
										onPress: canRemove ? elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveLabelFromFiche) : elm$core$Maybe$Nothing
									}),
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(canModify),
									{
										label: A2(
											mdgriffith$elm_ui$Element$el,
											_List_Nil,
											mdgriffith$elm_ui$Element$text('Modifier label')),
										onPress: canModify ? elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyLabel) : elm$core$Maybe$Nothing
									})
								]);
						}()))
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRefOtLink = function (a) {
	return {$: 'SetRefOtLink', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRefOtNbr = function (a) {
	return {$: 'SetRefOtNbr', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setOt = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(100)),
								mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						label: A2(
							mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$centerY]),
							A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$bold,
										mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
									]),
								mdgriffith$elm_ui$Element$text('Référence OT'))),
						onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRefOtNbr,
						placeholder: elm$core$Maybe$Nothing,
						text: A2(
							elm$core$Maybe$withDefault,
							'',
							A2(
								elm$core$Maybe$map,
								elm$core$String$fromInt,
								A2(elm$core$Maybe$map, elm$core$Tuple$first, model.ficheBuffer.refOt)))
					}),
					A2(
					mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(100)),
								mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						label: A2(
							mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$centerY]),
							A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$bold,
										mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
									]),
								mdgriffith$elm_ui$Element$text('Lien OT'))),
						onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRefOtLink,
						placeholder: elm$core$Maybe$Nothing,
						text: A2(
							elm$core$Maybe$withDefault,
							'',
							A2(elm$core$Maybe$map, elm$core$Tuple$second, model.ficheBuffer.refOt))
					})
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetEpis = function (a) {
	return {$: 'SetEpis', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetStars = function (a) {
	return {$: 'SetStars', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setRank = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$alignTop
					]),
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(100)),
								mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						label: A2(
							mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$centerY]),
							A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$bold,
										mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
									]),
								mdgriffith$elm_ui$Element$text('Etoiles'))),
						onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetStars,
						placeholder: elm$core$Maybe$Nothing,
						text: A2(
							elm$core$Maybe$withDefault,
							'',
							A2(elm$core$Maybe$map, elm$core$String$fromInt, model.ficheBuffer.rank.stars))
					}),
					A2(
					mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(100)),
								mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						label: A2(
							mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$centerY]),
							A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$bold,
										mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
									]),
								mdgriffith$elm_ui$Element$text('Epis'))),
						onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetEpis,
						placeholder: elm$core$Maybe$Nothing,
						text: A2(
							elm$core$Maybe$withDefault,
							'',
							A2(elm$core$Maybe$map, elm$core$String$fromInt, model.ficheBuffer.rank.epis))
					})
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$labOtRankCont = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(20)
					]),
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle),
			_List_fromArray(
				[
					A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setLabels, config, model),
					A2(
					mdgriffith$elm_ui$Element$map,
					model.externalMsg,
					A2(
						mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15),
								mdgriffith$elm_ui$Element$alignTop,
								mdgriffith$elm_ui$Element$alignRight
							]),
						_List_fromArray(
							[
								A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setOt, config, model),
								A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setRank, config, model)
							])))
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddLinkedDoc = {$: 'AddLinkedDoc'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyLinkedDoc = {$: 'ModifyLinkedDoc'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$OpenDocPicker = {$: 'OpenDocPicker'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveLinkedDoc = {$: 'RemoveLinkedDoc'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLinkedDocDescr = function (a) {
	return {$: 'SetLinkedDocDescr', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLinkedDocExpiry = function (a) {
	return {$: 'SetLinkedDocExpiry', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLinkedDocLabel = function (a) {
	return {$: 'SetLinkedDocLabel', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$CloseDocPicker = {$: 'CloseDocPicker'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLinkedDocUrl = function (a) {
	return {$: 'SetLinkedDocUrl', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$docPickerView = F2(
	function (config, model) {
		return A5(author$project$FileExplorer$FileExplorer$pickerView, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$CloseDocPicker, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLinkedDocUrl, author$project$FileExplorer$FileExplorer$DocsRoot, config, model.externalMsg);
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectLinkedDoc = function (a) {
	return {$: 'SelectLinkedDoc', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$hashLinkedDoc = function (_n0) {
	var url = _n0.url;
	var descr = _n0.descr;
	var label = _n0.label;
	var expiryDate = _n0.expiryDate;
	return elm$core$String$fromInt(
		A2(
			Skinney$murmur3$Murmur3$hashString,
			0,
			'linkedDocViewKey: ' + (url + (label + (A2(elm$core$Maybe$withDefault, 'descr', descr) + A2(
				elm$core$Maybe$withDefault,
				'expiryDate',
				A2(
					elm$core$Maybe$map,
					elm$core$String$fromInt,
					A2(
						elm$core$Maybe$map,
						elm$time$Time$toMillis(elm$time$Time$utc),
						expiryDate))))))));
};
var AdrianRibao$elm_derberos_date$Derberos$Date$Core$addTimezoneMilliseconds = F2(
	function (zone, time) {
		var offset = A2(AdrianRibao$elm_derberos_date$Derberos$Date$Core$getTzOffset, zone, time);
		var millis = elm$time$Time$posixToMillis(time);
		return elm$time$Time$millisToPosix(millis + (offset * 60000));
	});
var AdrianRibao$elm_derberos_date$Derberos$Date$Core$posixToCivil = function (time) {
	var milliseconds = elm$time$Time$posixToMillis(time);
	var minute = A2(
		elm$core$Basics$modBy,
		60,
		elm$core$Basics$floor(milliseconds / (60 * 1000)));
	var minutes = elm$core$Basics$floor(milliseconds / (60 * 1000));
	var rawDay = elm$core$Basics$floor((minutes / (60 * 24)) + 719468);
	var second = A2(
		elm$core$Basics$modBy,
		60,
		elm$core$Basics$floor(milliseconds / 1000));
	var millis = A2(elm$core$Basics$modBy, 1000, milliseconds);
	var hour = A2(
		elm$core$Basics$modBy,
		24,
		elm$core$Basics$floor(milliseconds / ((60 * 60) * 1000)));
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		day: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		hour: hour,
		millis: millis,
		minute: minute,
		month: month,
		second: second,
		year: year + ((month <= 2) ? 1 : 0),
		zone: elm$time$Time$utc
	};
};
var author$project$Internals$CommonHelpers$dateToStr = F2(
	function (zone, d) {
		var dateRec = AdrianRibao$elm_derberos_date$Derberos$Date$Core$posixToCivil(
			A2(AdrianRibao$elm_derberos_date$Derberos$Date$Core$addTimezoneMilliseconds, zone, d));
		return A3(
			elm$core$String$padLeft,
			2,
			_Utils_chr('0'),
			elm$core$String$fromInt(dateRec.day)) + ('/' + (A3(
			elm$core$String$padLeft,
			2,
			_Utils_chr('0'),
			elm$core$String$fromInt(dateRec.month)) + ('/' + elm$core$String$fromInt(dateRec.year))));
	});
var mdgriffith$elm_ui$Element$Keyed$column = F2(
	function (attrs, children) {
		return A4(
			mdgriffith$elm_ui$Internal$Model$element,
			mdgriffith$elm_ui$Internal$Model$asColumn,
			mdgriffith$elm_ui$Internal$Model$div,
			A2(
				elm$core$List$cons,
				mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.contentTop),
				A2(
					elm$core$List$cons,
					mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.contentLeft),
					A2(
						elm$core$List$cons,
						mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
						A2(
							elm$core$List$cons,
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
							attrs)))),
			mdgriffith$elm_ui$Internal$Model$Keyed(children));
	});
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$linkedDocView = F4(
	function (externalMsg, zone, selected, ld) {
		var url = ld.url;
		var descr = ld.descr;
		var label = ld.label;
		var expiryDate = ld.expiryDate;
		var key = function (res) {
			return _Utils_ap(
				res,
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$hashLinkedDoc(ld));
		}(
			A2(
				elm$core$Maybe$withDefault,
				'NoLinkedDoc',
				A2(elm$core$Maybe$map, author$project$GeneralDirectoryEditor$GeneralDirMainFormView$hashLinkedDoc, selected)));
		var fileName = A2(
			elm$core$Maybe$withDefault,
			'',
			elm$core$List$head(
				elm$core$List$reverse(
					A2(
						elm$core$List$filter,
						function (x) {
							return x !== '';
						},
						A2(elm$core$String$split, '/', url)))));
		var expiryDateStr = A2(
			elm$core$Maybe$map,
			author$project$Internals$CommonHelpers$dateToStr(zone),
			expiryDate);
		return A2(
			mdgriffith$elm_ui$Element$Keyed$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$Events$onClick(
					externalMsg(
						author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectLinkedDoc(ld))),
					mdgriffith$elm_ui$Element$pointer,
					mdgriffith$elm_ui$Element$padding(5),
					_Utils_eq(
					elm$core$Maybe$Just(ld),
					selected) ? mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey4) : author$project$Internals$CommonStyleHelpers$noAttr,
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$shrink)
				]),
			A2(
				elm$core$List$map,
				function (e) {
					return _Utils_Tuple2(key, e);
				},
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$bold,
										mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1),
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(300)),
										mdgriffith$elm_ui$Element$clip
									]),
								mdgriffith$elm_ui$Element$text(label)),
								A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$size(12),
										mdgriffith$elm_ui$Element$alignRight,
										mdgriffith$elm_ui$Element$width(
										A2(mdgriffith$elm_ui$Element$maximum, 300, mdgriffith$elm_ui$Element$fill)),
										mdgriffith$elm_ui$Element$clip
									]),
								mdgriffith$elm_ui$Element$text(fileName))
							])),
						A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								A2(
								elm$core$Maybe$withDefault,
								mdgriffith$elm_ui$Element$none,
								A2(
									elm$core$Maybe$map,
									function (d) {
										return A2(
											mdgriffith$elm_ui$Element$el,
											_List_Nil,
											mdgriffith$elm_ui$Element$text(d));
									},
									descr)),
								A2(
								elm$core$Maybe$withDefault,
								mdgriffith$elm_ui$Element$none,
								A2(
									elm$core$Maybe$map,
									function (ed) {
										return A2(
											mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[mdgriffith$elm_ui$Element$alignRight]),
											mdgriffith$elm_ui$Element$text(ed));
									},
									expiryDateStr))
							]))
					])));
	});
var author$project$Internals$CommonStyleHelpers$green4 = A3(mdgriffith$elm_ui$Element$rgb255, 56, 193, 114);
var mdgriffith$elm_ui$Internal$Model$Above = {$: 'Above'};
var mdgriffith$elm_ui$Element$above = function (element) {
	return A2(mdgriffith$elm_ui$Internal$Model$Nearby, mdgriffith$elm_ui$Internal$Model$Above, element);
};
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setLinkedDocs = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
					]),
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Font$bold,
							mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
						]),
					mdgriffith$elm_ui$Element$text('Documents associés')),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Border$width(2),
									mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
									mdgriffith$elm_ui$Element$width(
									mdgriffith$elm_ui$Element$px(600)),
									mdgriffith$elm_ui$Element$height(
									mdgriffith$elm_ui$Element$px(200)),
									mdgriffith$elm_ui$Element$scrollbars
								]),
							A2(
								elm$core$List$map,
								function (ld) {
									return A4(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$linkedDocView, model.externalMsg, config.zone, model.selectedLinkedDoc, ld);
								},
								model.ficheBuffer.linkedDocs)),
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$Input$text,
									_Utils_ap(
										author$project$Internals$CommonStyleHelpers$textInputStyle,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$width(
												mdgriffith$elm_ui$Element$px(230)),
												A2(mdgriffith$elm_ui$Element$spacingXY, 0, 15),
												mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
											])),
									{
										label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
										onChange: A2(elm$core$Basics$composeL, model.externalMsg, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLinkedDocLabel),
										placeholder: elm$core$Maybe$Just(
											A2(
												mdgriffith$elm_ui$Element$Input$placeholder,
												_List_Nil,
												mdgriffith$elm_ui$Element$text('Titre du document'))),
										text: A2(
											elm$core$Maybe$withDefault,
											'',
											A2(
												elm$core$Maybe$map,
												function ($) {
													return $.label;
												},
												model.linkedDocBuffer))
									}),
									A2(
									mdgriffith$elm_ui$Element$Input$text,
									_Utils_ap(
										author$project$Internals$CommonStyleHelpers$textInputStyle,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$width(
												mdgriffith$elm_ui$Element$px(230)),
												A2(mdgriffith$elm_ui$Element$spacingXY, 0, 15),
												mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
											])),
									{
										label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
										onChange: A2(elm$core$Basics$composeL, model.externalMsg, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLinkedDocDescr),
										placeholder: elm$core$Maybe$Just(
											A2(
												mdgriffith$elm_ui$Element$Input$placeholder,
												_List_Nil,
												mdgriffith$elm_ui$Element$text('Remarques/commentaires'))),
										text: A2(
											elm$core$Maybe$withDefault,
											'',
											A2(
												elm$core$Maybe$andThen,
												function ($) {
													return $.descr;
												},
												model.linkedDocBuffer))
									}),
									A2(
									mdgriffith$elm_ui$Element$Input$text,
									_Utils_ap(
										author$project$Internals$CommonStyleHelpers$textInputStyle,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$width(
												mdgriffith$elm_ui$Element$px(230)),
												(!_Utils_eq(
												A2(
													elm$core$Maybe$andThen,
													function ($) {
														return $.expiryDate;
													},
													model.linkedDocBuffer),
												elm$core$Maybe$Nothing)) ? mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$green4) : mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$red4),
												A2(mdgriffith$elm_ui$Element$spacingXY, 0, 15)
											])),
									{
										label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
										onChange: A2(elm$core$Basics$composeL, model.externalMsg, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLinkedDocExpiry),
										placeholder: elm$core$Maybe$Just(
											A2(
												mdgriffith$elm_ui$Element$Input$placeholder,
												_List_Nil,
												mdgriffith$elm_ui$Element$text('Date expiration (jj/mm/aaaa))'))),
										text: function () {
											var _n0 = A2(
												elm$core$Maybe$andThen,
												function ($) {
													return $.expiryDate;
												},
												model.linkedDocBuffer);
											if (_n0.$ === 'Nothing') {
												return A2(elm$core$Maybe$withDefault, '', model.expiryDateBuffer);
											} else {
												var t = _n0.a;
												return A2(author$project$Internals$CommonHelpers$dateToStr, config.zone, t);
											}
										}()
									}),
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_Nil,
									A2(
										mdgriffith$elm_ui$Element$Input$button,
										author$project$Internals$CommonStyleHelpers$buttonStyle(true),
										{
											label: A2(
												mdgriffith$elm_ui$Element$el,
												_List_Nil,
												mdgriffith$elm_ui$Element$text('Sélectionner document')),
											onPress: elm$core$Maybe$Just(
												model.externalMsg(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$OpenDocPicker))
										}))
								]))
						])),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15),
							mdgriffith$elm_ui$Element$above(
							(!model.docPickerOpen) ? mdgriffith$elm_ui$Element$none : A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Background$color(
										A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
										mdgriffith$elm_ui$Element$width(
										A2(
											mdgriffith$elm_ui$Element$minimum,
											850,
											A2(mdgriffith$elm_ui$Element$maximum, 920, mdgriffith$elm_ui$Element$shrink))),
										mdgriffith$elm_ui$Element$Border$shadow(
										{
											blur: 10,
											color: A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
											offset: _Utils_Tuple2(4, 4),
											size: 5
										})
									]),
								A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$docPickerView, config, model)))
						]),
					function () {
						var isExisting = _Utils_eq(
							A2(
								elm$core$Maybe$map,
								function (ld) {
									return A2(elm$core$List$member, ld, model.ficheBuffer.linkedDocs);
								},
								model.linkedDocBuffer),
							elm$core$Maybe$Just(true));
						var canModify = (!_Utils_eq(model.selectedLinkedDoc, elm$core$Maybe$Nothing)) && ((!_Utils_eq(
							model.linkedDocBuffer,
							elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLinkedDoc))) && (!isExisting));
						var canDelete = (!_Utils_eq(model.selectedLinkedDoc, elm$core$Maybe$Nothing)) && isExisting;
						var canAdd = function (res) {
							return _Utils_eq(
								res,
								elm$core$Maybe$Just(true));
						}(
							A2(elm$core$Maybe$map, author$project$GeneralDirectoryEditor$GeneralDirHelpers$validLinkedDoc, model.linkedDocBuffer)) && (_Utils_eq(model.selectedLinkedDoc, elm$core$Maybe$Nothing) && (!isExisting));
						return _List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(canModify),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Modifier document')),
									onPress: canModify ? elm$core$Maybe$Just(
										model.externalMsg(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyLinkedDoc)) : elm$core$Maybe$Nothing
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(canAdd),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Ajouter document')),
									onPress: canAdd ? elm$core$Maybe$Just(
										model.externalMsg(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddLinkedDoc)) : elm$core$Maybe$Nothing
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(canDelete),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Supprimer document')),
									onPress: canDelete ? elm$core$Maybe$Just(
										model.externalMsg(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveLinkedDoc)) : elm$core$Maybe$Nothing
								})
							]);
					}())
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$linkDocsCont = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(20)
					]),
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle),
			_List_fromArray(
				[
					A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setLinkedDocs, config, model)
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetNomEntite = function (a) {
	return {$: 'SetNomEntite', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setNomEntite = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$alignTop
					]),
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(500)),
								mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						label: A2(
							mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$centerY]),
							A2(
								mdgriffith$elm_ui$Element$row,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$Font$bold,
												mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
											]),
										mdgriffith$elm_ui$Element$text('Nom entité')),
										author$project$Internals$CommonStyleHelpers$redStar
									]))),
						onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetNomEntite,
						placeholder: elm$core$Maybe$Nothing,
						text: model.ficheBuffer.nomEntite
					})
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$OpenVisualPicker = {$: 'OpenVisualPicker'};
var mdgriffith$elm_ui$Element$Background$image = function (src) {
	return mdgriffith$elm_ui$Internal$Model$Attr(
		A2(elm$virtual_dom$VirtualDom$style, 'background', 'url(\"' + (src + '\") center / cover no-repeat')));
};
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setVisual = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$alignRight
					]),
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(
							mdgriffith$elm_ui$Element$px(150)),
							mdgriffith$elm_ui$Element$height(
							mdgriffith$elm_ui$Element$px(113)),
							mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey5)
						]),
					A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(138)),
								mdgriffith$elm_ui$Element$height(
								mdgriffith$elm_ui$Element$px(104)),
								mdgriffith$elm_ui$Element$Background$image(model.ficheBuffer.visuel),
								mdgriffith$elm_ui$Element$centerX,
								mdgriffith$elm_ui$Element$centerY
							]),
						mdgriffith$elm_ui$Element$none)),
					A2(
					mdgriffith$elm_ui$Element$Input$button,
					author$project$Internals$CommonStyleHelpers$buttonStyle(true),
					{
						label: A2(
							mdgriffith$elm_ui$Element$row,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_Nil,
									mdgriffith$elm_ui$Element$text('Choisir visuel')),
									author$project$Internals$CommonStyleHelpers$redStar
								])),
						onPress: elm$core$Maybe$Just(
							model.externalMsg(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$OpenVisualPicker))
					})
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$nameVisualCont = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(20)
					]),
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$map,
					model.externalMsg,
					A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setNomEntite, config, model)),
					A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setVisual, config, model)
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetOuverture = function (a) {
	return {$: 'SetOuverture', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setOuverture = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
					]),
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Font$bold,
							mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
						]),
					mdgriffith$elm_ui$Element$text('Période d\'ouverture')),
					A2(
					mdgriffith$elm_ui$Element$Input$radioRow,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					{
						label: mdgriffith$elm_ui$Element$Input$labelHidden(''),
						onChange: author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetOuverture,
						options: _List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$Input$option,
								author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TteAnnee,
								mdgriffith$elm_ui$Element$text('Toute l\'année')),
								A2(
								mdgriffith$elm_ui$Element$Input$option,
								author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Saisonniere,
								mdgriffith$elm_ui$Element$text('Saisonniere'))
							]),
						selected: function () {
							var _n0 = model.ficheBuffer.ouverture;
							if (_n0.$ === 'Just') {
								var o = _n0.a;
								return elm$core$Maybe$Just(o);
							} else {
								return elm$core$Maybe$Just(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TteAnnee);
							}
						}()
					})
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$ouvertureCont = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$map,
			model.externalMsg,
			A2(
				mdgriffith$elm_ui$Element$column,
				author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle,
				_List_fromArray(
					[
						A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setOuverture, config, model)
					])));
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$CloseVisualPicker = {$: 'CloseVisualPicker'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ConfirmVisual = function (a) {
	return {$: 'ConfirmVisual', a: a};
};
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$visualPickerView = F2(
	function (config, model) {
		return A5(author$project$FileExplorer$FileExplorer$pickerView, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$CloseVisualPicker, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ConfirmVisual, author$project$FileExplorer$FileExplorer$ImagesRoot, config, model.externalMsg);
	});
var author$project$GeneralDirectoryEditor$GeneralDirMainFormView$editFicheView = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(20),
					mdgriffith$elm_ui$Element$htmlAttribute(
					A2(elm$html$Html$Attributes$style, 'flex-shrink', '1')),
					mdgriffith$elm_ui$Element$clip,
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Font$bold,
									mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1),
									mdgriffith$elm_ui$Element$Font$size(18)
								]),
							mdgriffith$elm_ui$Element$text('Modification/création fiche')),
							(!_Utils_eq(
							model.ficheBuffer.lastEdit,
							elm$time$Time$millisToPosix(0))) ? A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$alignRight]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$Font$bold,
											mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
										]),
									mdgriffith$elm_ui$Element$text('Date dernière modification: ')),
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_Nil,
									mdgriffith$elm_ui$Element$text(
										A2(author$project$Internals$CommonHelpers$dateToStr, config.zone, model.ficheBuffer.lastEdit)))
								])) : mdgriffith$elm_ui$Element$none
						])),
					A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$height(
							A2(mdgriffith$elm_ui$Element$maximum, config.maxHeight - 120, mdgriffith$elm_ui$Element$fill)),
							mdgriffith$elm_ui$Element$scrollbarY,
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
							mdgriffith$elm_ui$Element$inFront(
							(!model.visualPickerOpen) ? mdgriffith$elm_ui$Element$none : A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Background$color(
										A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
										mdgriffith$elm_ui$Element$width(
										A2(
											mdgriffith$elm_ui$Element$minimum,
											850,
											A2(mdgriffith$elm_ui$Element$maximum, 920, mdgriffith$elm_ui$Element$shrink))),
										mdgriffith$elm_ui$Element$Border$shadow(
										{
											blur: 10,
											color: A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
											offset: _Utils_Tuple2(4, 4),
											size: 5
										})
									]),
								A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$visualPickerView, config, model)))
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(35)
								]),
							_List_fromArray(
								[
									A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$nameVisualCont, config, model),
									A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$catsActivsCont, config, model),
									A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$labOtRankCont, config, model),
									A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$contactsCont, config, model),
									A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$descrCont, config, model),
									A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$linkDocsCont, config, model),
									A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$ouvertureCont, config, model)
								]))
						])),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: A2(
									mdgriffith$elm_ui$Element$el,
									_List_Nil,
									mdgriffith$elm_ui$Element$text('Annuler')),
								onPress: elm$core$Maybe$Just(
									model.externalMsg(
										author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRightPanelDisplay(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$PreviewFiche)))
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								author$project$GeneralDirectoryEditor$GeneralDirHelpers$isValidFiche(model.ficheBuffer)),
							{
								label: A2(
									mdgriffith$elm_ui$Element$el,
									_List_Nil,
									mdgriffith$elm_ui$Element$text('Sauvegarder fiche')),
								onPress: author$project$GeneralDirectoryEditor$GeneralDirHelpers$isValidFiche(model.ficheBuffer) ? elm$core$Maybe$Just(
									model.externalMsg(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SaveFiche)) : elm$core$Maybe$Nothing
							})
						]))
				]));
	});
var author$project$GeneralDirectoryEditor$FichePreview$subBlockStyle = _List_fromArray(
	[
		mdgriffith$elm_ui$Element$padding(10),
		mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey7),
		mdgriffith$elm_ui$Element$Border$rounded(5),
		mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
	]);
var author$project$GeneralDirectoryEditor$FichePreview$activView = function (_n0) {
	var natureActiv = _n0.natureActiv;
	return A2(
		mdgriffith$elm_ui$Element$paragraph,
		_Utils_ap(
			author$project$GeneralDirectoryEditor$FichePreview$subBlockStyle,
			_List_fromArray(
				[mdgriffith$elm_ui$Element$Font$bold, mdgriffith$elm_ui$Element$Font$center])),
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$text(
				A2(elm$core$String$join, ', ', natureActiv))
			]));
};
var author$project$GeneralDirectoryEditor$FichePreview$telPreview = function (tel) {
	return A2(
		mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$spacing(10)
			]),
		function () {
			switch (tel.$) {
				case 'TelFixe':
					var s = tel.a;
					return _List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[mdgriffith$elm_ui$Element$Font$bold]),
									mdgriffith$elm_ui$Element$text('Tel. fixe: ')),
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_Nil,
									mdgriffith$elm_ui$Element$text(s))
								]))
						]);
				case 'TelPortable':
					var s = tel.a;
					return _List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[mdgriffith$elm_ui$Element$Font$bold]),
									mdgriffith$elm_ui$Element$text('Tel. portable: ')),
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_Nil,
									mdgriffith$elm_ui$Element$text(s))
								]))
						]);
				default:
					var _n1 = tel.a;
					var s1 = _n1.a;
					var s2 = _n1.b;
					return _List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[mdgriffith$elm_ui$Element$Font$bold]),
									mdgriffith$elm_ui$Element$text('Tel. fixe: ')),
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_Nil,
									mdgriffith$elm_ui$Element$text(s1))
								])),
							A2(
							mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[mdgriffith$elm_ui$Element$Font$bold]),
									mdgriffith$elm_ui$Element$text('Tel. portable: ')),
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_Nil,
									mdgriffith$elm_ui$Element$text(s2))
								]))
						]);
			}
		}());
};
var author$project$GeneralDirectoryEditor$FichePreview$responsablesView = function (responsables) {
	var respView = function (_n1) {
		var nom = _n1.nom;
		var poste = _n1.poste;
		var tel = _n1.tel;
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(7),
					mdgriffith$elm_ui$Element$padding(5),
					mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey6)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_Nil,
							mdgriffith$elm_ui$Element$text(poste)),
							mdgriffith$elm_ui$Element$text(', '),
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_Nil,
							mdgriffith$elm_ui$Element$text(nom))
						])),
					author$project$GeneralDirectoryEditor$FichePreview$telPreview(tel)
				]));
	};
	if (!responsables.b) {
		return mdgriffith$elm_ui$Element$none;
	} else {
		if (!responsables.b.b) {
			var resp = responsables.a;
			return A2(
				mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(10)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[mdgriffith$elm_ui$Element$Font$bold]),
						mdgriffith$elm_ui$Element$text('Responsable:')),
						respView(resp)
					]));
		} else {
			var resps = responsables;
			return A2(
				mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(10)
					]),
				_Utils_ap(
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$Font$bold]),
							mdgriffith$elm_ui$Element$text('Responsables:'))
						]),
					A2(elm$core$List$map, respView, resps)));
		}
	}
};
var author$project$Internals$CommonStyleHelpers$teal4 = A3(mdgriffith$elm_ui$Element$rgb255, 60, 174, 163);
var elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var elm$html$Html$Attributes$target = elm$html$Html$Attributes$stringProperty('target');
var mdgriffith$elm_ui$Element$newTabLink = F2(
	function (attrs, _n0) {
		var url = _n0.url;
		var label = _n0.label;
		return A4(
			mdgriffith$elm_ui$Internal$Model$element,
			mdgriffith$elm_ui$Internal$Model$asEl,
			mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				elm$core$List$cons,
				mdgriffith$elm_ui$Internal$Model$Attr(
					elm$html$Html$Attributes$href(url)),
				A2(
					elm$core$List$cons,
					mdgriffith$elm_ui$Internal$Model$Attr(
						elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						elm$core$List$cons,
						mdgriffith$elm_ui$Internal$Model$Attr(
							elm$html$Html$Attributes$target('_blank')),
						A2(
							elm$core$List$cons,
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$shrink),
							A2(
								elm$core$List$cons,
								mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$shrink),
								A2(
									elm$core$List$cons,
									mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + mdgriffith$elm_ui$Internal$Style$classes.contentCenterY)),
									attrs)))))),
			mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var author$project$GeneralDirectoryEditor$FichePreview$contactView = function (_n0) {
	var adresse = _n0.adresse;
	var telNumber = _n0.telNumber;
	var email = _n0.email;
	var site = _n0.site;
	var responsables = _n0.responsables;
	return A2(
		mdgriffith$elm_ui$Element$column,
		_Utils_ap(
			author$project$GeneralDirectoryEditor$FichePreview$subBlockStyle,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(10)
				])),
		_List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(5)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[mdgriffith$elm_ui$Element$Font$bold]),
						mdgriffith$elm_ui$Element$text('Adresse: ')),
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_Nil,
						mdgriffith$elm_ui$Element$text(adresse))
					])),
				A2(
				elm$core$Maybe$withDefault,
				mdgriffith$elm_ui$Element$none,
				A2(elm$core$Maybe$map, author$project$GeneralDirectoryEditor$FichePreview$telPreview, telNumber)),
				function () {
				if (!email.b) {
					return mdgriffith$elm_ui$Element$none;
				} else {
					if (!email.b.b) {
						var mail = email.a;
						return A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(5)
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[mdgriffith$elm_ui$Element$Font$bold]),
									mdgriffith$elm_ui$Element$text('Email:')),
									mdgriffith$elm_ui$Element$text(mail)
								]));
					} else {
						var emails = email;
						return A2(
							mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[mdgriffith$elm_ui$Element$Font$bold]),
									mdgriffith$elm_ui$Element$text('Emails: ')),
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_Nil,
									mdgriffith$elm_ui$Element$text(
										A2(elm$core$String$join, ', ', emails)))
								]));
					}
				}
			}(),
				A2(
				elm$core$Maybe$withDefault,
				mdgriffith$elm_ui$Element$none,
				A2(
					elm$core$Maybe$map,
					function (_n2) {
						var siteName = _n2.a;
						var siteUrl = _n2.b;
						return A2(
							mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[mdgriffith$elm_ui$Element$Font$bold]),
									mdgriffith$elm_ui$Element$text('Site: ')),
									A2(
									mdgriffith$elm_ui$Element$newTabLink,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal4)
										]),
									{
										label: mdgriffith$elm_ui$Element$text(siteName),
										url: siteUrl
									})
								]));
					},
					site)),
				author$project$GeneralDirectoryEditor$FichePreview$responsablesView(responsables)
			]));
};
var elm$core$Char$toUpper = _Char_toUpper;
var elm_community$string_extra$String$Extra$changeCase = F2(
	function (mutator, word) {
		return A2(
			elm$core$Maybe$withDefault,
			'',
			A2(
				elm$core$Maybe$map,
				function (_n0) {
					var head = _n0.a;
					var tail = _n0.b;
					return A2(
						elm$core$String$cons,
						mutator(head),
						tail);
				},
				elm$core$String$uncons(word)));
	});
var elm_community$string_extra$String$Extra$toSentenceCase = function (word) {
	return A2(elm_community$string_extra$String$Extra$changeCase, elm$core$Char$toUpper, word);
};
var mdgriffith$elm_ui$Element$Font$italic = mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.italic);
var author$project$GeneralDirectoryEditor$FichePreview$descriptionView = function (_n0) {
	var description = _n0.description;
	var ouverture = _n0.ouverture;
	var _n1 = function () {
		if ((ouverture.$ === 'Just') && (ouverture.a.$ === 'Saisonniere')) {
			var _n3 = ouverture.a;
			return _Utils_Tuple2(
				true,
				A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[mdgriffith$elm_ui$Element$Font$bold]),
					mdgriffith$elm_ui$Element$text('Ouverture saisonniere')));
		} else {
			return _Utils_Tuple2(false, mdgriffith$elm_ui$Element$none);
		}
	}();
	var displayOuv = _n1.a;
	var ouvertureView = _n1.b;
	if (!description.b) {
		return displayOuv ? A2(
			mdgriffith$elm_ui$Element$column,
			author$project$GeneralDirectoryEditor$FichePreview$subBlockStyle,
			_List_fromArray(
				[ouvertureView])) : mdgriffith$elm_ui$Element$none;
	} else {
		var descr = description;
		var descrView = function (d) {
			return A2(
				mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[mdgriffith$elm_ui$Element$Font$italic]),
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$text(
						elm_community$string_extra$String$Extra$toSentenceCase(d))
					]));
		};
		return A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				author$project$GeneralDirectoryEditor$FichePreview$subBlockStyle,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$spacing(10)
					])),
			_Utils_ap(
				A2(elm$core$List$map, descrView, descr),
				_List_fromArray(
					[ouvertureView])));
	}
};
var author$project$GeneralDirectoryEditor$FichePreview$linkedDocsView = F2(
	function (currentTime, _n0) {
		var linkedDocs = _n0.linkedDocs;
		if (!linkedDocs.b) {
			return mdgriffith$elm_ui$Element$none;
		} else {
			var ldocs = linkedDocs;
			var ldView = function (_n3) {
				var url = _n3.url;
				var label = _n3.label;
				var descr = _n3.descr;
				var expiryDate = _n3.expiryDate;
				var resView = A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(7),
							mdgriffith$elm_ui$Element$Border$widthEach(
							{bottom: 1, left: 0, right: 0, top: 0}),
							mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey6),
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
							A2(mdgriffith$elm_ui$Element$paddingXY, 0, 5)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$newTabLink,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal4)
								]),
							{
								label: A2(
									mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$spacing(5)
										]),
									_List_fromArray(
										[
											A2(
											mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$width(
													mdgriffith$elm_ui$Element$px(16)),
													mdgriffith$elm_ui$Element$height(
													mdgriffith$elm_ui$Element$px(16)),
													mdgriffith$elm_ui$Element$Background$uncropped('/assets/images/pdf.svg')
												]),
											mdgriffith$elm_ui$Element$none),
											mdgriffith$elm_ui$Element$text(label)
										])),
								url: url
							}),
							A2(
							elm$core$Maybe$withDefault,
							mdgriffith$elm_ui$Element$none,
							A2(
								elm$core$Maybe$map,
								function (d) {
									return A2(
										mdgriffith$elm_ui$Element$paragraph,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$Font$size(14)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text(d)
											]));
								},
								descr))
						]));
				if (expiryDate.$ === 'Nothing') {
					return resView;
				} else {
					var ed = expiryDate.a;
					return (_Utils_cmp(
						elm$time$Time$posixToMillis(ed),
						elm$time$Time$posixToMillis(currentTime)) < 0) ? mdgriffith$elm_ui$Element$none : resView;
				}
			};
			return A2(
				mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					author$project$GeneralDirectoryEditor$FichePreview$subBlockStyle,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(10)
						])),
				_Utils_ap(
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$Font$bold]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_Nil,
									mdgriffith$elm_ui$Element$text('EN SAVOIR PLUS'))
								]))
						]),
					A2(elm$core$List$map, ldView, ldocs)));
		}
	});
var mdgriffith$elm_ui$Internal$Flag$bgGradient = mdgriffith$elm_ui$Internal$Flag$flag(10);
var mdgriffith$elm_ui$Element$Background$gradient = function (_n0) {
	var angle = _n0.angle;
	var steps = _n0.steps;
	if (!steps.b) {
		return mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		if (!steps.b.b) {
			var clr = steps.a;
			return A2(
				mdgriffith$elm_ui$Internal$Model$StyleClass,
				mdgriffith$elm_ui$Internal$Flag$bgColor,
				A3(
					mdgriffith$elm_ui$Internal$Model$Colored,
					'bg-' + mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
					'background-color',
					clr));
		} else {
			return A2(
				mdgriffith$elm_ui$Internal$Model$StyleClass,
				mdgriffith$elm_ui$Internal$Flag$bgGradient,
				A3(
					mdgriffith$elm_ui$Internal$Model$Single,
					'bg-grad-' + A2(
						elm$core$String$join,
						'-',
						A2(
							elm$core$List$cons,
							mdgriffith$elm_ui$Internal$Model$floatClass(angle),
							A2(elm$core$List$map, mdgriffith$elm_ui$Internal$Model$formatColorClass, steps))),
					'background-image',
					'linear-gradient(' + (A2(
						elm$core$String$join,
						', ',
						A2(
							elm$core$List$cons,
							elm$core$String$fromFloat(angle) + 'rad',
							A2(elm$core$List$map, mdgriffith$elm_ui$Internal$Model$formatColor, steps))) + ')')));
		}
	}
};
var mdgriffith$elm_ui$Internal$Flag$txtShadows = mdgriffith$elm_ui$Internal$Flag$flag(18);
var mdgriffith$elm_ui$Internal$Model$formatTextShadow = function (shadow) {
	return A2(
		elm$core$String$join,
		' ',
		_List_fromArray(
			[
				elm$core$String$fromFloat(shadow.offset.a) + 'px',
				elm$core$String$fromFloat(shadow.offset.b) + 'px',
				elm$core$String$fromFloat(shadow.blur) + 'px',
				mdgriffith$elm_ui$Internal$Model$formatColor(shadow.color)
			]));
};
var mdgriffith$elm_ui$Internal$Model$textShadowName = function (shadow) {
	return elm$core$String$concat(
		_List_fromArray(
			[
				'txt',
				elm$core$String$fromFloat(shadow.offset.a) + 'px',
				elm$core$String$fromFloat(shadow.offset.b) + 'px',
				elm$core$String$fromFloat(shadow.blur) + 'px',
				mdgriffith$elm_ui$Internal$Model$formatColorClass(shadow.color)
			]));
};
var mdgriffith$elm_ui$Element$Font$shadow = function (shade) {
	return A2(
		mdgriffith$elm_ui$Internal$Model$StyleClass,
		mdgriffith$elm_ui$Internal$Flag$txtShadows,
		A3(
			mdgriffith$elm_ui$Internal$Model$Single,
			mdgriffith$elm_ui$Internal$Model$textShadowName(shade),
			'text-shadow',
			mdgriffith$elm_ui$Internal$Model$formatTextShadow(shade)));
};
var author$project$GeneralDirectoryEditor$FichePreview$starsView = function (n) {
	return A2(
		mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$width(
				mdgriffith$elm_ui$Element$px(80)),
				mdgriffith$elm_ui$Element$height(
				mdgriffith$elm_ui$Element$px(50)),
				mdgriffith$elm_ui$Element$Background$gradient(
				{
					angle: 0,
					steps: _List_fromArray(
						[
							A3(mdgriffith$elm_ui$Element$rgb255, 85, 112, 83),
							A3(mdgriffith$elm_ui$Element$rgb255, 143, 188, 139),
							A3(mdgriffith$elm_ui$Element$rgb255, 85, 112, 83)
						])
				})
			]),
		_List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$alignTop,
						mdgriffith$elm_ui$Element$paddingEach(
						{bottom: 0, left: 0, right: 0, top: 5}),
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$Font$center,
						mdgriffith$elm_ui$Element$Font$size(12),
						mdgriffith$elm_ui$Element$Font$color(
						A3(mdgriffith$elm_ui$Element$rgb255, 255, 255, 255))
					]),
				mdgriffith$elm_ui$Element$text('Classement')),
				A2(
				mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
								mdgriffith$elm_ui$Element$centerY,
								mdgriffith$elm_ui$Element$Font$center,
								mdgriffith$elm_ui$Element$Font$size(18),
								mdgriffith$elm_ui$Element$Font$color(
								A3(mdgriffith$elm_ui$Element$rgb255, 255, 215, 0)),
								mdgriffith$elm_ui$Element$Font$shadow(
								{
									blur: 1,
									color: A3(mdgriffith$elm_ui$Element$rgb255, 25, 21, 0),
									offset: _Utils_Tuple2(1, 0)
								})
							]),
						mdgriffith$elm_ui$Element$text(
							A2(elm$core$String$repeat, n, '🟊')))
					]))
			]));
};
var elm$core$List$sort = function (xs) {
	return A2(elm$core$List$sortBy, elm$core$Basics$identity, xs);
};
var elm$html$Html$img = _VirtualDom_node('img');
var author$project$GeneralDirectoryEditor$FichePreview$refView = F2(
	function (maxWidth, _n0) {
		var refOt = _n0.refOt;
		var label = _n0.label;
		var rank = _n0.rank;
		var toImage = function (_n8) {
			var lien = _n8.lien;
			var logo = _n8.logo;
			return {height: logo.height, link: lien, url: logo.url, width: logo.width};
		};
		var refOtView = function () {
			if (refOt.$ === 'Just') {
				var _n7 = refOt.a;
				var ref = _n7.a;
				var link = _n7.b;
				return A2(
					mdgriffith$elm_ui$Element$wrappedRow,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
							mdgriffith$elm_ui$Element$spacing(5)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$Font$bold]),
							mdgriffith$elm_ui$Element$text('Référence office de tourisme:  ')),
							A2(
							mdgriffith$elm_ui$Element$newTabLink,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal4)
								]),
							{
								label: mdgriffith$elm_ui$Element$text(
									elm$core$String$fromInt(ref)),
								url: link
							})
						]));
			} else {
				return mdgriffith$elm_ui$Element$none;
			}
		}();
		var _n1 = function () {
			var _n2 = rank.stars;
			if (_n2.$ === 'Just') {
				var n = _n2.a;
				return _Utils_Tuple2(
					_List_fromArray(
						[
							{height: 50, link: 'https://etoiles-de-france.fr/', url: 'stars', width: 80}
						]),
					n);
			} else {
				return _Utils_Tuple2(_List_Nil, 0);
			}
		}();
		var stars = _n1.a;
		var nbrStars = _n1.b;
		var images = _Utils_ap(
			stars,
			A2(elm$core$List$map, toImage, label));
		var minHeight = A2(
			elm$core$Maybe$withDefault,
			0,
			A2(
				elm$core$Maybe$map,
				elm$core$Basics$min(50),
				elm$core$List$head(
					elm$core$List$sort(
						A2(
							elm$core$List$map,
							function ($) {
								return $.height;
							},
							images)))));
		var imgsScaledToMinHeight = function () {
			var scale = function (_n5) {
				var url = _n5.url;
				var width = _n5.width;
				var height = _n5.height;
				var link = _n5.link;
				return {height: minHeight + 5, link: link, url: url, width: (minHeight * width) / height};
			};
			return A2(elm$core$List$map, scale, images);
		}();
		var totalImgWidth = A3(
			elm$core$List$foldr,
			F2(
				function (i, n) {
					return i.width + n;
				}),
			0,
			imgsScaledToMinHeight);
		var logoView = function (_n4) {
			var url = _n4.url;
			var width = _n4.width;
			var height = _n4.height;
			var link = _n4.link;
			return A2(
				mdgriffith$elm_ui$Element$newTabLink,
				_List_fromArray(
					[
						(_Utils_cmp(totalImgWidth, maxWidth) < 0) ? mdgriffith$elm_ui$Element$width(
						mdgriffith$elm_ui$Element$px(
							elm$core$Basics$round(width))) : mdgriffith$elm_ui$Element$width(
						mdgriffith$elm_ui$Element$fillPortion(
							elm$core$Basics$floor((10000 * width) / totalImgWidth)))
					]),
				{
					label: (url === 'stars') ? author$project$GeneralDirectoryEditor$FichePreview$starsView(nbrStars) : mdgriffith$elm_ui$Element$html(
						A2(
							elm$html$Html$img,
							_List_fromArray(
								[
									A2(elm$html$Html$Attributes$style, 'width', '100%'),
									A2(elm$html$Html$Attributes$style, 'height', 'auto'),
									elm$html$Html$Attributes$src(url)
								]),
							_List_Nil)),
					url: link
				});
		};
		var logosView = function () {
			if (!images.b) {
				return mdgriffith$elm_ui$Element$none;
			} else {
				return A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(10),
							mdgriffith$elm_ui$Element$clip
						]),
					A2(elm$core$List$map, logoView, imgsScaledToMinHeight));
			}
		}();
		return (_Utils_eq(refOt, elm$core$Maybe$Nothing) && _Utils_eq(images, _List_Nil)) ? mdgriffith$elm_ui$Element$none : A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				author$project$GeneralDirectoryEditor$FichePreview$subBlockStyle,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$spacing(10)
					])),
			_List_fromArray(
				[refOtView, logosView]));
	});
var mdgriffith$elm_ui$Element$rgba255 = F4(
	function (red, green, blue, a) {
		return A4(mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, a);
	});
var author$project$Internals$CommonStyleHelpers$aliceBlue = A4(mdgriffith$elm_ui$Element$rgba255, 240, 248, 255, 1);
var author$project$Internals$CommonStyleHelpers$blockLinkGrey = A3(mdgriffith$elm_ui$Element$rgb255, 119, 136, 153);
var author$project$Internals$CommonStyleHelpers$blockLinkGreyAlpha = function (a) {
	return A4(mdgriffith$elm_ui$Element$rgba255, 119, 136, 153, a);
};
var author$project$Internals$CommonStyleHelpers$unselectable = A2(
	elm$core$List$map,
	mdgriffith$elm_ui$Element$htmlAttribute,
	_List_fromArray(
		[
			A2(elm$html$Html$Attributes$style, '-webkit-touch-callout', 'none'),
			A2(elm$html$Html$Attributes$style, '-webkit-user-select', 'none'),
			A2(elm$html$Html$Attributes$style, '-khtml-user-select', 'none'),
			A2(elm$html$Html$Attributes$style, '-moz-user-select', 'none'),
			A2(elm$html$Html$Attributes$style, '-ms-user-select', 'none'),
			A2(elm$html$Html$Attributes$style, 'user-select', 'none')
		]));
var mdgriffith$elm_ui$Internal$Model$Bottom = {$: 'Bottom'};
var mdgriffith$elm_ui$Element$alignBottom = mdgriffith$elm_ui$Internal$Model$AlignY(mdgriffith$elm_ui$Internal$Model$Bottom);
var author$project$GeneralDirectoryEditor$FichePreview$visualPreview = F3(
	function (handler, maxWidth, _n0) {
		var uuid = _n0.uuid;
		var nomEntite = _n0.nomEntite;
		var visuel = _n0.visuel;
		var w = elm$core$Basics$round(maxWidth);
		var h = elm$core$Basics$round(maxWidth / 1.333333333);
		return A2(
			mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$width(
					mdgriffith$elm_ui$Element$px(w)),
					mdgriffith$elm_ui$Element$height(
					mdgriffith$elm_ui$Element$px(h)),
					mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$blockLinkGrey),
					mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Background$color(
							author$project$Internals$CommonStyleHelpers$blockLinkGreyAlpha(0.5))
						])),
					mdgriffith$elm_ui$Element$Events$onClick(
					handler(
						TSFoster$elm_uuid$UUID$canonical(uuid))),
					mdgriffith$elm_ui$Element$pointer
				]),
			A2(
				mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(
						mdgriffith$elm_ui$Element$px(w - 12)),
						mdgriffith$elm_ui$Element$height(
						mdgriffith$elm_ui$Element$px(h - 12)),
						mdgriffith$elm_ui$Element$centerX,
						mdgriffith$elm_ui$Element$centerY,
						mdgriffith$elm_ui$Element$Background$image(visuel),
						mdgriffith$elm_ui$Element$inFront(
						A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$alignBottom,
									mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
									mdgriffith$elm_ui$Element$padding(10),
									mdgriffith$elm_ui$Element$Background$color(
									author$project$Internals$CommonStyleHelpers$blockLinkGreyAlpha(0.8)),
									mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$aliceBlue)
								]),
							A2(
								mdgriffith$elm_ui$Element$el,
								_Utils_ap(
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$Font$center,
											mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
										]),
									author$project$Internals$CommonStyleHelpers$unselectable),
								A2(
									mdgriffith$elm_ui$Element$paragraph,
									_List_Nil,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$text(nomEntite)
										])))))
					]),
				mdgriffith$elm_ui$Element$none));
	});
var author$project$GeneralDirectoryEditor$FichePreview$wrapperStyle = _List_fromArray(
	[
		mdgriffith$elm_ui$Element$padding(10),
		mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey6),
		mdgriffith$elm_ui$Element$Border$rounded(5),
		mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
	]);
var author$project$GeneralDirectoryEditor$FichePreview$ficheView = F5(
	function (handler, currentTime, maxWidth, isOpen, fiche) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$width(
					mdgriffith$elm_ui$Element$px(
						elm$core$Basics$round(maxWidth))),
					mdgriffith$elm_ui$Element$clip
				]),
			_List_fromArray(
				[
					A3(author$project$GeneralDirectoryEditor$FichePreview$visualPreview, handler, maxWidth, fiche),
					isOpen ? A2(
					mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						author$project$GeneralDirectoryEditor$FichePreview$wrapperStyle,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(10)
							])),
					_List_fromArray(
						[
							author$project$GeneralDirectoryEditor$FichePreview$activView(fiche),
							A2(author$project$GeneralDirectoryEditor$FichePreview$refView, maxWidth, fiche),
							author$project$GeneralDirectoryEditor$FichePreview$contactView(fiche),
							author$project$GeneralDirectoryEditor$FichePreview$descriptionView(fiche),
							A2(author$project$GeneralDirectoryEditor$FichePreview$linkedDocsView, currentTime, fiche)
						])) : mdgriffith$elm_ui$Element$none
				]));
	});
var author$project$GeneralDirectoryEditor$FichePreview$fichePreview = F3(
	function (handler, currentTime, f) {
		return A5(author$project$GeneralDirectoryEditor$FichePreview$ficheView, handler, currentTime, 440, true, f);
	});
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$NoOp = {$: 'NoOp'};
var author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveFiche = {$: 'RemoveFiche'};
var author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$previewFicheView = function (model) {
	return A2(
		mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$spacing(15),
				mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
				mdgriffith$elm_ui$Element$scrollbarY,
				mdgriffith$elm_ui$Element$alignTop
			]),
		_List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$Font$bold,
						mdgriffith$elm_ui$Element$Font$size(18)
					]),
				mdgriffith$elm_ui$Element$text('Aperçu fiche')),
				A2(
				elm$core$Maybe$withDefault,
				mdgriffith$elm_ui$Element$none,
				A2(
					elm$core$Maybe$map,
					A2(
						author$project$GeneralDirectoryEditor$FichePreview$fichePreview,
						function (_n0) {
							return author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$NoOp;
						},
						model.currentTime),
					A2(
						elm$core$Maybe$andThen,
						function (id) {
							return A2(elm$core$Dict$get, id, model.fiches);
						},
						model.selectedFiche))),
				A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						function () {
						var _n1 = model.selectedFiche;
						if (_n1.$ === 'Nothing') {
							return A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Nouvelle fiche')),
									onPress: elm$core$Maybe$Just(
										author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRightPanelDisplay(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$EditFiche))
								});
						} else {
							return A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Modifier fiche')),
									onPress: elm$core$Maybe$Just(
										author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRightPanelDisplay(author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$EditFiche))
								});
						}
					}(),
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						author$project$Internals$CommonStyleHelpers$buttonStyle(
							!_Utils_eq(model.selectedFiche, elm$core$Maybe$Nothing)),
						{
							label: A2(
								mdgriffith$elm_ui$Element$el,
								_List_Nil,
								mdgriffith$elm_ui$Element$text('Supprimer fiche')),
							onPress: A2(
								elm$core$Maybe$map,
								function (_n2) {
									return author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveFiche;
								},
								model.selectedFiche)
						})
					]))
			]));
};
var author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$formsView = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$alignTop,
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					function () {
					var _n0 = model.rightPanelDisplay;
					if (_n0.$ === 'PreviewFiche') {
						return A2(
							mdgriffith$elm_ui$Element$map,
							model.externalMsg,
							author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$previewFicheView(model));
					} else {
						return A2(author$project$GeneralDirectoryEditor$GeneralDirMainFormView$editFicheView, config, model);
					}
				}()
				]));
	});
var author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$view = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$padding(15),
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$htmlAttribute(
					A2(elm$html$Html$Attributes$style, 'flex-shrink', '1')),
					mdgriffith$elm_ui$Element$clip,
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$height(
					A2(mdgriffith$elm_ui$Element$maximum, config.maxHeight, mdgriffith$elm_ui$Element$fill))
				]),
			_List_fromArray(
				[
					_Utils_eq(model.rightPanelDisplay, author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$EditFiche) ? mdgriffith$elm_ui$Element$none : A2(
					mdgriffith$elm_ui$Element$map,
					model.externalMsg,
					author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$ficheSelectorView(model)),
					A2(author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$formsView, config, model)
				]));
	});
var author$project$MurolAdmin$FileExplorerTool = {$: 'FileExplorerTool'};
var author$project$MurolAdmin$GeneralDirectoryTool = {$: 'GeneralDirectoryTool'};
var author$project$MurolAdmin$Launch = {$: 'Launch'};
var author$project$MurolAdmin$NewsEditorTool = {$: 'NewsEditorTool'};
var author$project$MurolAdmin$PageTreeTool = {$: 'PageTreeTool'};
var author$project$MurolAdmin$SetCurrentTool = function (a) {
	return {$: 'SetCurrentTool', a: a};
};
var mdgriffith$elm_ui$Internal$Flag$moveY = mdgriffith$elm_ui$Internal$Flag$flag(26);
var mdgriffith$elm_ui$Internal$Model$MoveY = function (a) {
	return {$: 'MoveY', a: a};
};
var mdgriffith$elm_ui$Element$moveDown = function (y) {
	return A2(
		mdgriffith$elm_ui$Internal$Model$TransformComponent,
		mdgriffith$elm_ui$Internal$Flag$moveY,
		mdgriffith$elm_ui$Internal$Model$MoveY(y));
};
var mdgriffith$elm_ui$Element$Border$roundEach = function (_n0) {
	var topLeft = _n0.topLeft;
	var topRight = _n0.topRight;
	var bottomLeft = _n0.bottomLeft;
	var bottomRight = _n0.bottomRight;
	return A2(
		mdgriffith$elm_ui$Internal$Model$StyleClass,
		mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + (elm$core$String$fromInt(topLeft) + ('-' + (elm$core$String$fromInt(topRight) + (elm$core$String$fromInt(bottomLeft) + ('-' + elm$core$String$fromInt(bottomRight)))))),
			'border-radius',
			elm$core$String$fromInt(topLeft) + ('px ' + (elm$core$String$fromInt(topRight) + ('px ' + (elm$core$String$fromInt(bottomRight) + ('px ' + (elm$core$String$fromInt(bottomLeft) + 'px'))))))));
};
var author$project$MurolAdmin$tabView = F3(
	function (currentTool, tool, s) {
		return A2(
			mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$Events$onClick(
						author$project$MurolAdmin$SetCurrentTool(tool)),
						mdgriffith$elm_ui$Element$Border$widthEach(
						{bottom: 0, left: 2, right: 2, top: 2}),
						mdgriffith$elm_ui$Element$Border$roundEach(
						{bottomLeft: 0, bottomRight: 0, topLeft: 8, topRight: 8}),
						_Utils_eq(currentTool, tool) ? mdgriffith$elm_ui$Element$Background$color(
						A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1)) : mdgriffith$elm_ui$Element$Background$color(
						A3(mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
					]),
				_Utils_eq(currentTool, tool) ? _List_fromArray(
					[
						mdgriffith$elm_ui$Element$Border$color(
						A3(mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8))
					]) : _List_fromArray(
					[
						mdgriffith$elm_ui$Element$Border$color(
						A3(mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9)),
						mdgriffith$elm_ui$Element$pointer,
						mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Background$color(
								A3(mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95))
							]))
					])),
			A2(
				mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					_List_Nil,
					_Utils_eq(currentTool, tool) ? _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Border$roundEach(
							{bottomLeft: 0, bottomRight: 0, topLeft: 8, topRight: 8}),
							mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 7, left: 12, right: 12, top: 3}),
							mdgriffith$elm_ui$Element$Border$color(
							A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
							mdgriffith$elm_ui$Element$moveDown(2),
							mdgriffith$elm_ui$Element$Background$color(
							A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
						]) : _List_fromArray(
						[
							mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 5, left: 12, right: 12, top: 5})
						])),
				mdgriffith$elm_ui$Element$text(s)));
	});
var author$project$NewsEditor$NewsEditor$loadingStatus = function (model) {
	return model.loadingStatus;
};
var author$project$NewsEditor$NewsEditor$loadingView = function (model) {
	return A2(
		author$project$Internals$ToolHelpers$toolLoadingView,
		'Chargement des actualités: ',
		{
			loadingStatus: author$project$NewsEditor$NewsEditor$loadingStatus(model)
		});
};
var author$project$NewsEditor$NewsEditor$SaveNews = {$: 'SaveNews'};
var author$project$NewsEditor$NewsEditor$SetExpiry = function (a) {
	return {$: 'SetExpiry', a: a};
};
var author$project$NewsEditor$NewsEditor$SetTitle = function (a) {
	return {$: 'SetTitle', a: a};
};
var author$project$NewsEditor$NewsEditor$ToNewsSelector = {$: 'ToNewsSelector'};
var author$project$NewsEditor$NewsEditor$ToogleContentPreview = {$: 'ToogleContentPreview'};
var author$project$NewsEditor$NewsEditor$containerStyle = _List_fromArray(
	[
		mdgriffith$elm_ui$Element$padding(15),
		mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey6),
		mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var author$project$NewsEditor$NewsEditor$itemStyle = _List_fromArray(
	[
		mdgriffith$elm_ui$Element$padding(15),
		mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey7),
		mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var author$project$NewsEditor$NewsEditor$NoOp = {$: 'NoOp'};
var author$project$NewsEditor$NewsEditor$renderConfig = function (externalMsg) {
	return {
		containersBkgColors: false,
		currentTime: elm$time$Time$millisToPosix(0),
		customElems: elm$core$Dict$empty,
		editMode: true,
		fiches: elm$core$Dict$empty,
		galleries: elm$core$Dict$empty,
		height: 1080,
		mainInterfaceHeight: 75,
		news: elm$core$Dict$empty,
		openFicheMsg: elm$core$Basics$always(
			externalMsg(author$project$NewsEditor$NewsEditor$NoOp)),
		openNewsMsg: elm$core$Basics$always(
			externalMsg(author$project$NewsEditor$NewsEditor$NoOp)),
		openedFiches: elm$core$Set$empty,
		openedNews: elm$core$Set$empty,
		pageIndex: elm$core$Dict$empty,
		previewMode: author$project$Document$DocumentViews$StyleSheets$PreviewScreen,
		season: author$project$Document$DocumentViews$StyleSheets$Spring,
		width: 1920,
		zipperHandlers: elm$core$Maybe$Nothing,
		zone: elm$time$Time$utc
	};
};
var author$project$NewsEditor$NewsEditor$OpenPicPicker = {$: 'OpenPicPicker'};
var author$project$NewsEditor$NewsEditor$setVisual = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				author$project$NewsEditor$NewsEditor$itemStyle,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$alignTop
					])),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$Font$bold]),
							mdgriffith$elm_ui$Element$text('Image ')),
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_Nil,
							mdgriffith$elm_ui$Element$text('(optionnel)'))
						])),
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(
							mdgriffith$elm_ui$Element$px(190)),
							mdgriffith$elm_ui$Element$height(
							mdgriffith$elm_ui$Element$px(190)),
							mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey5)
						]),
					A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(178)),
								mdgriffith$elm_ui$Element$height(
								mdgriffith$elm_ui$Element$px(178)),
								mdgriffith$elm_ui$Element$Background$uncropped(
								A2(
									elm$core$Maybe$withDefault,
									'',
									A2(
										elm$core$Maybe$map,
										function ($) {
											return $.url;
										},
										A2(
											elm$core$Maybe$andThen,
											function ($) {
												return $.pic;
											},
											model.buffer)))),
								mdgriffith$elm_ui$Element$centerX,
								mdgriffith$elm_ui$Element$centerY
							]),
						mdgriffith$elm_ui$Element$none)),
					A2(
					mdgriffith$elm_ui$Element$Input$button,
					author$project$Internals$CommonStyleHelpers$buttonStyle(true),
					{
						label: A2(
							mdgriffith$elm_ui$Element$row,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_Nil,
									mdgriffith$elm_ui$Element$text('Choisir'))
								])),
						onPress: elm$core$Maybe$Just(
							model.externalMsg(author$project$NewsEditor$NewsEditor$OpenPicPicker))
					})
				]));
	});
var author$project$NewsEditor$NewsEditor$validNews = function (_n0) {
	var title = _n0.title;
	var content = _n0.content;
	var expiry = _n0.expiry;
	return (title !== '') && ((!_Utils_eq(content, elm$core$Maybe$Nothing)) && ((!_Utils_eq(
		A2(
			elm$core$Maybe$map,
			function ($) {
				return $.tbElems;
			},
			content),
		elm$core$Maybe$Nothing)) && ((!_Utils_eq(
		A2(
			elm$core$Maybe$map,
			function ($) {
				return $.tbElems;
			},
			content),
		elm$core$Maybe$Just(_List_Nil))) && (!_Utils_eq(
		expiry,
		elm$time$Time$millisToPosix(0))))));
};
var author$project$NewsEditor$NewsEditor$ClosePicPicker = {$: 'ClosePicPicker'};
var author$project$NewsEditor$NewsEditor$ConfirmPic = function (a) {
	return {$: 'ConfirmPic', a: a};
};
var author$project$NewsEditor$NewsEditor$visualPickerView = F2(
	function (config, model) {
		return A5(author$project$FileExplorer$FileExplorer$pickerView, author$project$NewsEditor$NewsEditor$ClosePicPicker, author$project$NewsEditor$NewsEditor$ConfirmPic, author$project$FileExplorer$FileExplorer$ImagesRoot, config, model.externalMsg);
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$ColorPickerClickOff = {$: 'ColorPickerClickOff'};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$InternalUrlSelectorClickOff = {$: 'InternalUrlSelectorClickOff'};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$TextInput = function (a) {
	return {$: 'TextInput', a: a};
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$NewSelection = function (a) {
	return {$: 'NewSelection', a: a};
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$Selection = F3(
	function (start, finish, sel) {
		return {finish: finish, sel: sel, start: start};
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$decodeSelection = A2(
	elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'selection']),
	A2(
		elm$json$Json$Decode$map,
		author$project$PageEditor$EditorPlugins$TextBlockPlugin$NewSelection,
		A4(
			elm$json$Json$Decode$map3,
			author$project$PageEditor$EditorPlugins$TextBlockPlugin$Selection,
			A2(elm$json$Json$Decode$field, 'start', elm$json$Json$Decode$int),
			A2(elm$json$Json$Decode$field, 'finish', elm$json$Json$Decode$int),
			A2(elm$json$Json$Decode$field, 'sel', elm$json$Json$Decode$string))));
var elm$html$Html$textarea = _VirtualDom_node('textarea');
var elm$html$Html$Attributes$cols = function (n) {
	return A2(
		_VirtualDom_attribute,
		'cols',
		elm$core$String$fromInt(n));
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$customTextArea = F4(
	function (attrs, setSelection, height, rawInput) {
		return A2(
			mdgriffith$elm_ui$Element$el,
			attrs,
			mdgriffith$elm_ui$Element$html(
				A3(
					elm$html$Html$node,
					'custom-textarea',
					_Utils_ap(
						_List_fromArray(
							[
								elm$html$Html$Events$onInput(author$project$PageEditor$EditorPlugins$TextBlockPlugin$TextInput),
								A2(elm$html$Html$Events$on, 'Selection', author$project$PageEditor$EditorPlugins$TextBlockPlugin$decodeSelection)
							]),
						function () {
							if (setSelection.$ === 'Just') {
								var selection = setSelection.a;
								return _List_fromArray(
									[
										A2(elm$html$Html$Attributes$property, 'selection', selection)
									]);
							} else {
								return _List_Nil;
							}
						}()),
					_List_fromArray(
						[
							A2(
							elm$html$Html$textarea,
							_List_fromArray(
								[
									A2(elm$html$Html$Attributes$style, 'font-family', 'Arial'),
									A2(elm$html$Html$Attributes$style, 'font-size', '16px'),
									elm$html$Html$Attributes$cols(
									(height === 300) ? 70 : 60),
									A2(
									elm$html$Html$Attributes$style,
									'height',
									elm$core$String$fromInt(height) + 'px'),
									A2(elm$html$Html$Attributes$style, 'spellcheck', 'false'),
									A2(elm$html$Html$Attributes$style, 'background-color', 'Beige'),
									elm$html$Html$Attributes$value(rawInput)
								]),
							_List_Nil)
						]))));
	});
var author$project$Internals$Icons$externalLink = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'external-link',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$path,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$d('M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$polyline,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$points('15 3 21 3 21 9')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('10'),
						elm$svg$Svg$Attributes$y1('14'),
						elm$svg$Svg$Attributes$x2('21'),
						elm$svg$Svg$Attributes$y2('3')
					]),
				_List_Nil)
			]));
};
var author$project$Internals$Icons$link2 = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'link-2',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$path,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$d('M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('8'),
						elm$svg$Svg$Attributes$y1('12'),
						elm$svg$Svg$Attributes$x2('16'),
						elm$svg$Svg$Attributes$y2('12')
					]),
				_List_Nil)
			]));
};
var author$project$Internals$Icons$tag = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'tag',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$path,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$d('M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('7'),
						elm$svg$Svg$Attributes$y1('7'),
						elm$svg$Svg$Attributes$x2('7'),
						elm$svg$Svg$Attributes$y2('7')
					]),
				_List_Nil)
			]));
};
var author$project$Internals$Icons$type_ = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'type',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$polyline,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$points('4 7 4 4 20 4 20 7')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('9'),
						elm$svg$Svg$Attributes$y1('20'),
						elm$svg$Svg$Attributes$x2('15'),
						elm$svg$Svg$Attributes$y2('20')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('12'),
						elm$svg$Svg$Attributes$y1('4'),
						elm$svg$Svg$Attributes$x2('12'),
						elm$svg$Svg$Attributes$y2('20')
					]),
				_List_Nil)
			]));
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$InsertTrackingTag = function (a) {
	return {$: 'InsertTrackingTag', a: a};
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetUrl = F2(
	function (a, b) {
		return {$: 'SetUrl', a: a, b: b};
	});
var mdgriffith$elm_ui$Internal$Model$Monospace = {$: 'Monospace'};
var mdgriffith$elm_ui$Element$Font$monospace = mdgriffith$elm_ui$Internal$Model$Monospace;
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$externalLinkView = F3(
	function (externalMsg, url, _n0) {
		var meta = _n0.meta;
		var attrs = _n0.attrs;
		var dataKind = _n0.dataKind;
		return A2(
			mdgriffith$elm_ui$Element$map,
			externalMsg,
			A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(5)
							]),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[mdgriffith$elm_ui$Element$Font$bold]),
								mdgriffith$elm_ui$Element$text('Lien pour: ')),
								A2(
								mdgriffith$elm_ui$Element$el,
								_List_Nil,
								mdgriffith$elm_ui$Element$text(meta.value))
							])),
						A2(
						mdgriffith$elm_ui$Element$Input$text,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(150)),
								mdgriffith$elm_ui$Element$spacing(5),
								A2(mdgriffith$elm_ui$Element$paddingXY, 15, 5),
								mdgriffith$elm_ui$Element$focused(
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$Border$glow,
										A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
										0)
									])),
								mdgriffith$elm_ui$Element$Font$family(
								_List_fromArray(
									[mdgriffith$elm_ui$Element$Font$monospace]))
							]),
						{
							label: A2(
								mdgriffith$elm_ui$Element$Input$labelLeft,
								_List_fromArray(
									[mdgriffith$elm_ui$Element$centerY, mdgriffith$elm_ui$Element$Font$bold]),
								mdgriffith$elm_ui$Element$text('Url: ')),
							onChange: author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetUrl(meta.uid),
							placeholder: elm$core$Maybe$Nothing,
							text: url
						})
					])));
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$ConfirmHeadingLevel = function (a) {
	return {$: 'ConfirmHeadingLevel', a: a};
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$SelectHeadingLevel = function (a) {
	return {$: 'SelectHeadingLevel', a: a};
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$iconSize = 18;
var elm$html$Html$option = _VirtualDom_node('option');
var elm$html$Html$select = _VirtualDom_node('select');
var elm$html$Html$Attributes$selected = elm$html$Html$Attributes$boolProperty('selected');
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$headingView = F3(
	function (externalMsg, level, _n0) {
		var meta = _n0.meta;
		var attrs = _n0.attrs;
		var dataKind = _n0.dataKind;
		return A2(
			mdgriffith$elm_ui$Element$map,
			externalMsg,
			A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_Nil,
						mdgriffith$elm_ui$Element$html(
							A2(
								elm$html$Html$select,
								_List_fromArray(
									[
										elm$html$Html$Events$onInput(author$project$PageEditor$EditorPlugins$TextBlockPlugin$SelectHeadingLevel)
									]),
								_List_fromArray(
									[
										A2(
										elm$html$Html$option,
										_List_fromArray(
											[
												elm$html$Html$Attributes$value('1'),
												elm$html$Html$Attributes$selected(
												_Utils_eq(
													dataKind,
													author$project$PageEditor$EditorPlugins$TextBlockPlugin$Heading(1)))
											]),
										_List_fromArray(
											[
												elm$html$Html$text('Niveau 1')
											])),
										A2(
										elm$html$Html$option,
										_List_fromArray(
											[
												elm$html$Html$Attributes$value('2'),
												elm$html$Html$Attributes$selected(
												_Utils_eq(
													dataKind,
													author$project$PageEditor$EditorPlugins$TextBlockPlugin$Heading(2)))
											]),
										_List_fromArray(
											[
												elm$html$Html$text('Niveau 2')
											])),
										A2(
										elm$html$Html$option,
										_List_fromArray(
											[
												elm$html$Html$Attributes$value('3'),
												elm$html$Html$Attributes$selected(
												_Utils_eq(
													dataKind,
													author$project$PageEditor$EditorPlugins$TextBlockPlugin$Heading(3)))
											]),
										_List_fromArray(
											[
												elm$html$Html$text('Niveau 3')
											]))
									])))),
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						_Utils_ap(
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(level, elm$core$Maybe$Nothing)),
							_List_fromArray(
								[mdgriffith$elm_ui$Element$alignTop])),
						{
							label: A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$html(
											author$project$Internals$Icons$externalLink(author$project$PageEditor$EditorPlugins$TextBlockPlugin$iconSize))),
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Valider'))
									])),
							onPress: elm$core$Maybe$Just(
								author$project$PageEditor$EditorPlugins$TextBlockPlugin$ConfirmHeadingLevel(meta.uid))
						})
					])));
	});
var author$project$Internals$Icons$bold = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'bold',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$path,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$d('M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$path,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$d('M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z')
					]),
				_List_Nil)
			]));
};
var author$project$Internals$Icons$italic = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'italic',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('19'),
						elm$svg$Svg$Attributes$y1('4'),
						elm$svg$Svg$Attributes$x2('10'),
						elm$svg$Svg$Attributes$y2('4')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('14'),
						elm$svg$Svg$Attributes$y1('20'),
						elm$svg$Svg$Attributes$x2('5'),
						elm$svg$Svg$Attributes$y2('20')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('15'),
						elm$svg$Svg$Attributes$y1('4'),
						elm$svg$Svg$Attributes$x2('9'),
						elm$svg$Svg$Attributes$y2('20')
					]),
				_List_Nil)
			]));
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetBackgroundColor = F2(
	function (a, b) {
		return {$: 'SetBackgroundColor', a: a, b: b};
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetInlineBold = function (a) {
	return {$: 'SetInlineBold', a: a};
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetInlineFont = F2(
	function (a, b) {
		return {$: 'SetInlineFont', a: a, b: b};
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetInlineFontSize = F2(
	function (a, b) {
		return {$: 'SetInlineFontSize', a: a, b: b};
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetInlineItalic = function (a) {
	return {$: 'SetInlineItalic', a: a};
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetTextColor = F2(
	function (a, b) {
		return {$: 'SetTextColor', a: a, b: b};
	});
var author$project$Internals$CommonHelpers$chunks = F2(
	function (n, xs) {
		var helper = F2(
			function (acc, ys) {
				helper:
				while (true) {
					if (!ys.b) {
						return elm$core$List$reverse(acc);
					} else {
						var $temp$acc = A2(
							elm$core$List$cons,
							A2(elm$core$List$take, n, ys),
							acc),
							$temp$ys = A2(elm$core$List$drop, n, ys);
						acc = $temp$acc;
						ys = $temp$ys;
						continue helper;
					}
				}
			});
		return A2(helper, _List_Nil, xs);
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$ColorPickerClick = function (a) {
	return {$: 'ColorPickerClick', a: a};
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$hexToColor = function (hexColor) {
	var hexColor_ = elm$core$String$toLower(hexColor);
	var red = A2(
		elm$core$Result$withDefault,
		0,
		rtfeldman$elm_hex$Hex$fromString(
			A2(elm$core$String$left, 2, hexColor_)));
	var green = A2(
		elm$core$Result$withDefault,
		0,
		rtfeldman$elm_hex$Hex$fromString(
			A2(
				elm$core$String$left,
				2,
				A2(elm$core$String$dropLeft, 2, hexColor_))));
	var blue = A2(
		elm$core$Result$withDefault,
		0,
		rtfeldman$elm_hex$Hex$fromString(
			A2(
				elm$core$String$left,
				2,
				A2(elm$core$String$dropLeft, 4, hexColor_))));
	return A3(mdgriffith$elm_ui$Element$rgb, red / 255, green / 255, blue / 255);
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$webColors = _List_fromArray(
	[
		_Utils_Tuple2('maroon', '800000'),
		_Utils_Tuple2('dark red', '8B0000'),
		_Utils_Tuple2('brown', 'A52A2A'),
		_Utils_Tuple2('firebrick', 'B22222'),
		_Utils_Tuple2('crimson', 'DC143C'),
		_Utils_Tuple2('red', 'FF0000'),
		_Utils_Tuple2('tomato', 'FF6347'),
		_Utils_Tuple2('coral', 'FF7F50'),
		_Utils_Tuple2('indian red', 'CD5C5C'),
		_Utils_Tuple2('light coral', 'F08080'),
		_Utils_Tuple2('dark salmon', 'E9967A'),
		_Utils_Tuple2('salmon', 'FA8072'),
		_Utils_Tuple2('light salmon', 'FFA07A'),
		_Utils_Tuple2('orange red', 'FF4500'),
		_Utils_Tuple2('dark orange', 'FF8C00'),
		_Utils_Tuple2('orange', 'FFA500'),
		_Utils_Tuple2('gold', 'FFD700'),
		_Utils_Tuple2('dark golden rod', 'B8860B'),
		_Utils_Tuple2('golden rod', 'DAA520'),
		_Utils_Tuple2('pale golden rod', 'EEE8AA'),
		_Utils_Tuple2('dark khaki', 'BDB76B'),
		_Utils_Tuple2('khaki', 'F0E68C'),
		_Utils_Tuple2('olive', '808000'),
		_Utils_Tuple2('yellow', 'FFFF00'),
		_Utils_Tuple2('yellow green', '9ACD32'),
		_Utils_Tuple2('dark olive green', '556B2F'),
		_Utils_Tuple2('olive drab', '6B8E23'),
		_Utils_Tuple2('lawn green', '7CFC00'),
		_Utils_Tuple2('chart reuse', '7FFF00'),
		_Utils_Tuple2('green yellow', 'ADFF2F'),
		_Utils_Tuple2('dark green', '006400'),
		_Utils_Tuple2('green', '008000'),
		_Utils_Tuple2('forest green', '228B22'),
		_Utils_Tuple2('lime', '00FF00'),
		_Utils_Tuple2('lime green', '32CD32'),
		_Utils_Tuple2('light green', '90EE90'),
		_Utils_Tuple2('pale green', '98FB98'),
		_Utils_Tuple2('dark sea green', '8FBC8F'),
		_Utils_Tuple2('medium spring green', '00FA9A'),
		_Utils_Tuple2('spring green', '0F0FF7F'),
		_Utils_Tuple2('sea green', '2E8B57'),
		_Utils_Tuple2('medium aqua marine', '66CDAA'),
		_Utils_Tuple2('medium sea green', '3CB371'),
		_Utils_Tuple2('light sea green', '20B2AA'),
		_Utils_Tuple2('dark slate gray', '2F4F4F'),
		_Utils_Tuple2('teal', '008080'),
		_Utils_Tuple2('dark cyan', '008B8B'),
		_Utils_Tuple2('aqua', '00FFFF'),
		_Utils_Tuple2('cyan', '00FFFF'),
		_Utils_Tuple2('light cyan', 'E0FFFF'),
		_Utils_Tuple2('dark turquoise', '00CED1'),
		_Utils_Tuple2('turquoise', '40E0D0'),
		_Utils_Tuple2('medium turquoise', '48D1CC'),
		_Utils_Tuple2('pale turquoise', 'AFEEEE'),
		_Utils_Tuple2('aqua marine', '7FFFD4'),
		_Utils_Tuple2('powder blue', 'B0E0E6'),
		_Utils_Tuple2('cadet blue', '5F9EA0'),
		_Utils_Tuple2('steel blue', '4682B4'),
		_Utils_Tuple2('corn flower blue', '6495ED'),
		_Utils_Tuple2('deep sky blue', '00BFFF'),
		_Utils_Tuple2('dodger blue', '1E90FF'),
		_Utils_Tuple2('light blue', 'ADD8E6'),
		_Utils_Tuple2('sky blue', '87CEEB'),
		_Utils_Tuple2('light sky blue', '87CEFA'),
		_Utils_Tuple2('midnight blue', '191970'),
		_Utils_Tuple2('navy', '000080'),
		_Utils_Tuple2('dark blue', '00008B'),
		_Utils_Tuple2('medium blue', '0000CD'),
		_Utils_Tuple2('blue', '0000FF'),
		_Utils_Tuple2('royal blue', '4169E1'),
		_Utils_Tuple2('blue violet', '8A2BE2'),
		_Utils_Tuple2('indigo', '4B0082'),
		_Utils_Tuple2('dark slate blue', '483D8B'),
		_Utils_Tuple2('slate blue', '6A5ACD'),
		_Utils_Tuple2('medium slate blue', '7B68EE'),
		_Utils_Tuple2('medium purple', '9370DB'),
		_Utils_Tuple2('dark magenta', '8B008B'),
		_Utils_Tuple2('dark violet', '9400D3'),
		_Utils_Tuple2('dark orchid', '9932CC'),
		_Utils_Tuple2('medium orchid', 'BA55D3'),
		_Utils_Tuple2('purple', '800080'),
		_Utils_Tuple2('thistle', 'D8BFD8'),
		_Utils_Tuple2('plum', 'DDA0DD'),
		_Utils_Tuple2('violet', 'EE82EE'),
		_Utils_Tuple2('magenta / fuchsia', 'FF00FF'),
		_Utils_Tuple2('orchid', 'DA70D6'),
		_Utils_Tuple2('medium violet red', 'C71585'),
		_Utils_Tuple2('pale violet red', 'DB7093'),
		_Utils_Tuple2('deep pink', 'FF1493'),
		_Utils_Tuple2('hot pink', 'FF69B4'),
		_Utils_Tuple2('light pink', 'FFB6C1'),
		_Utils_Tuple2('pink', 'FFC0CB'),
		_Utils_Tuple2('antique white', 'FAEBD7'),
		_Utils_Tuple2('beige', 'F5F5DC'),
		_Utils_Tuple2('bisque', 'FFE4C4'),
		_Utils_Tuple2('blanched almond', 'FFEBCD'),
		_Utils_Tuple2('wheat', 'F5DEB3'),
		_Utils_Tuple2('corn silk', 'FFF8DC'),
		_Utils_Tuple2('lemon chiffon', 'FFFACD'),
		_Utils_Tuple2('light golden rod yellow', 'FAFAD2'),
		_Utils_Tuple2('light yellow', 'FFFFE0'),
		_Utils_Tuple2('saddle brown', '8B4513'),
		_Utils_Tuple2('sienna', 'A0522D'),
		_Utils_Tuple2('chocolate', 'D2691E'),
		_Utils_Tuple2('peru', 'CD853F'),
		_Utils_Tuple2('sandy brown', 'F4A460'),
		_Utils_Tuple2('burly wood', 'DEB887'),
		_Utils_Tuple2('tan', 'D2B48C'),
		_Utils_Tuple2('rosy brown', 'BC8F8F'),
		_Utils_Tuple2('moccasin', 'FFE4B5'),
		_Utils_Tuple2('navajo white', 'FFDEAD'),
		_Utils_Tuple2('peach puff', 'FFDAB9'),
		_Utils_Tuple2('misty rose', 'FFE4E1'),
		_Utils_Tuple2('lavender blush', 'FFF0F5'),
		_Utils_Tuple2('linen', 'FAF0E6'),
		_Utils_Tuple2('old lace', 'FDF5E6'),
		_Utils_Tuple2('papaya whip', 'FFEFD5'),
		_Utils_Tuple2('sea shell', 'FFF5EE'),
		_Utils_Tuple2('mint cream', 'F5FFFA'),
		_Utils_Tuple2('slate gray', '708090'),
		_Utils_Tuple2('light slate gray', '778899'),
		_Utils_Tuple2('light steel blue', 'B0C4DE'),
		_Utils_Tuple2('lavender', 'E6E6FA'),
		_Utils_Tuple2('floral white', 'FFFAF0'),
		_Utils_Tuple2('alice blue', 'F0F8FF'),
		_Utils_Tuple2('ghost white', 'F8F8FF'),
		_Utils_Tuple2('honeydew', 'F0FFF0'),
		_Utils_Tuple2('ivory', 'FFFFF0'),
		_Utils_Tuple2('azure', 'F0FFFF'),
		_Utils_Tuple2('snow', 'FFFAFA'),
		_Utils_Tuple2('black', '000000'),
		_Utils_Tuple2('dim gray / dim grey', '696969'),
		_Utils_Tuple2('gray / grey', '808080'),
		_Utils_Tuple2('dark gray / dark grey', 'A9A9A9'),
		_Utils_Tuple2('silver', 'C0C0C0'),
		_Utils_Tuple2('light gray / light grey', 'D3D3D3'),
		_Utils_Tuple2('gainsboro', 'DCDCDC'),
		_Utils_Tuple2('white smoke', 'F5F5F5'),
		_Utils_Tuple2('white', 'FFFFFF')
	]);
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$colorPicker = F5(
	function (colorPickerOpen, currentColor, label, msg, uid) {
		var currentColor_ = function () {
			_n3$2:
			while (true) {
				if (currentColor.$ === 'Just') {
					switch (currentColor.a.$) {
						case 'FontColor':
							var _n4 = currentColor.a.a;
							var r = _n4.a;
							var g = _n4.b;
							var b = _n4.c;
							return A3(mdgriffith$elm_ui$Element$rgb, r, g, b);
						case 'BackgroundColor':
							var _n5 = currentColor.a.a;
							var r = _n5.a;
							var g = _n5.b;
							var b = _n5.c;
							return A3(mdgriffith$elm_ui$Element$rgb, r, g, b);
						default:
							break _n3$2;
					}
				} else {
					break _n3$2;
				}
			}
			return A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
		}();
		var colorPanView = F2(
			function (mbMsg, color) {
				return A2(
					mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(14)),
								mdgriffith$elm_ui$Element$height(
								mdgriffith$elm_ui$Element$px(14)),
								mdgriffith$elm_ui$Element$Background$color(
								author$project$PageEditor$EditorPlugins$TextBlockPlugin$hexToColor(color)),
								mdgriffith$elm_ui$Element$Border$width(1),
								mdgriffith$elm_ui$Element$Border$color(
								A3(mdgriffith$elm_ui$Element$rgb, 0, 0, 0)),
								mdgriffith$elm_ui$Element$pointer,
								mdgriffith$elm_ui$Element$mouseOver(
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Border$color(
										A3(mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
									]))
							]),
						function () {
							if (mbMsg.$ === 'Just') {
								var msg_ = mbMsg.a;
								return _List_fromArray(
									[
										mdgriffith$elm_ui$Element$Events$onClick(
										A2(msg_, uid, color))
									]);
							} else {
								return _List_Nil;
							}
						}()),
					mdgriffith$elm_ui$Element$none);
			});
		var colors = A2(
			elm$core$List$map,
			function (r) {
				return A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(3)
						]),
					A2(
						elm$core$List$map,
						function (_n1) {
							var n = _n1.a;
							var c = _n1.b;
							return A2(
								colorPanView,
								elm$core$Maybe$Just(msg),
								c);
						},
						r));
			},
			A2(author$project$Internals$CommonHelpers$chunks, 12, author$project$PageEditor$EditorPlugins$TextBlockPlugin$webColors));
		return A2(
			mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$below(
					A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Background$color(
								A3(mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95))
							]),
						function () {
							if (colorPickerOpen.$ === 'Just') {
								var l = colorPickerOpen.a;
								return _Utils_eq(l, label) ? A2(
									mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$spacing(3),
											mdgriffith$elm_ui$Element$padding(10)
										]),
									colors) : mdgriffith$elm_ui$Element$none;
							} else {
								return mdgriffith$elm_ui$Element$none;
							}
						}()))
				]),
			A2(
				mdgriffith$elm_ui$Element$Input$button,
				author$project$Internals$CommonStyleHelpers$buttonStyle(true),
				{
					label: A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(10)
							]),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$el,
								_List_Nil,
								mdgriffith$elm_ui$Element$text(label)),
								A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(14)),
										mdgriffith$elm_ui$Element$height(
										mdgriffith$elm_ui$Element$px(14)),
										mdgriffith$elm_ui$Element$Background$color(currentColor_),
										mdgriffith$elm_ui$Element$Border$width(1),
										mdgriffith$elm_ui$Element$Border$color(
										A3(mdgriffith$elm_ui$Element$rgb, 0, 0, 0))
									]),
								mdgriffith$elm_ui$Element$none)
							])),
					onPress: elm$core$Maybe$Just(
						author$project$PageEditor$EditorPlugins$TextBlockPlugin$ColorPickerClick(label))
				}));
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$fontSizes = _List_fromArray(
	['6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '18', '20', '22', '24', '26', '28', '32', '36', '40', '44', '48', '54', '60', '66', '72', '80', '88', '96']);
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$fonts = _List_fromArray(
	['Arial', 'Helvetica', 'Times New Roman', 'Times', 'Courier New', 'Courier', 'Verdana', 'Georgia', 'Palatino', 'Garamond', 'Bookman', 'Comic Sans MS', 'Trebuchet MS', 'Arial Black', 'Impact', 'Libre Baskerville']);
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$inlineStyleView = F2(
	function (model, td) {
		var meta = td.meta;
		var attrs = td.attrs;
		var dataKind = td.dataKind;
		var fontSizeOptionView = F2(
			function (selectedSize, fs) {
				var selected = A2(
					elm$core$Maybe$withDefault,
					false,
					A2(
						elm$core$Maybe$map,
						function (fs_) {
							return _Utils_eq(
								selectedSize,
								elm$core$Maybe$Just(
									author$project$Document$Document$FontSize(fs_)));
						},
						elm$core$String$toInt(fs)));
				return A2(
					elm$html$Html$option,
					_List_fromArray(
						[
							elm$html$Html$Attributes$value(fs),
							elm$html$Html$Attributes$selected(selected)
						]),
					_List_fromArray(
						[
							elm$html$Html$text(fs)
						]));
			});
		var fontOptionView = F2(
			function (selectedFont, f) {
				return A2(
					elm$html$Html$option,
					_List_fromArray(
						[
							elm$html$Html$Attributes$value(f),
							elm$html$Html$Attributes$selected(
							_Utils_eq(
								selectedFont,
								elm$core$Maybe$Just(
									author$project$Document$Document$Font(f))))
						]),
					_List_fromArray(
						[
							elm$html$Html$text(f)
						]));
			});
		return A2(
			mdgriffith$elm_ui$Element$map,
			model.externalMsg,
			A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						A2(
							author$project$Internals$CommonStyleHelpers$toogleButtonStyle,
							A2(elm$core$List$member, author$project$Document$Document$Bold, attrs),
							true),
						{
							label: A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$html(
											author$project$Internals$Icons$bold(author$project$PageEditor$EditorPlugins$TextBlockPlugin$iconSize)))
									])),
							onPress: elm$core$Maybe$Just(
								author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetInlineBold(meta.uid))
						}),
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						A2(
							author$project$Internals$CommonStyleHelpers$toogleButtonStyle,
							A2(elm$core$List$member, author$project$Document$Document$Italic, attrs),
							true),
						{
							label: A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$html(
											author$project$Internals$Icons$italic(author$project$PageEditor$EditorPlugins$TextBlockPlugin$iconSize)))
									])),
							onPress: elm$core$Maybe$Just(
								author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetInlineItalic(meta.uid))
						}),
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_Nil,
						mdgriffith$elm_ui$Element$html(
							A2(
								elm$html$Html$select,
								_List_fromArray(
									[
										elm$html$Html$Events$onInput(
										author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetInlineFont(meta.uid))
									]),
								A2(
									elm$core$List$map,
									fontOptionView(
										elm$core$List$head(
											A2(elm$core$List$filter, author$project$PageEditor$EditorPlugins$TextBlockPlugin$isFontAttr, attrs))),
									author$project$PageEditor$EditorPlugins$TextBlockPlugin$fonts)))),
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_Nil,
						mdgriffith$elm_ui$Element$html(
							A2(
								elm$html$Html$select,
								_List_fromArray(
									[
										elm$html$Html$Events$onInput(
										author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetInlineFontSize(meta.uid))
									]),
								A2(
									elm$core$List$map,
									fontSizeOptionView(
										elm$core$List$head(
											A2(elm$core$List$filter, author$project$PageEditor$EditorPlugins$TextBlockPlugin$isFontSizeAttr, attrs))),
									author$project$PageEditor$EditorPlugins$TextBlockPlugin$fontSizes)))),
						A5(
						author$project$PageEditor$EditorPlugins$TextBlockPlugin$colorPicker,
						model.colorPickerOpen,
						elm$core$List$head(
							A2(elm$core$List$filter, author$project$PageEditor$EditorPlugins$TextBlockPlugin$isFontColorAttr, attrs)),
						'Couleur du texte',
						author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetTextColor,
						meta.uid),
						A5(
						author$project$PageEditor$EditorPlugins$TextBlockPlugin$colorPicker,
						model.colorPickerOpen,
						elm$core$List$head(
							A2(elm$core$List$filter, author$project$PageEditor$EditorPlugins$TextBlockPlugin$isBackgroundColorAttr, attrs)),
						'Couleur du fond',
						author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetBackgroundColor,
						meta.uid)
					])));
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$InternalUrlSelectorClick = {$: 'InternalUrlSelectorClick'};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$NoOp = {$: 'NoOp'};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetInternalLinkKind = F2(
	function (a, b) {
		return {$: 'SetInternalLinkKind', a: a, b: b};
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$ConfirmFileUrl = F2(
	function (a, b) {
		return {$: 'ConfirmFileUrl', a: a, b: b};
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$chooseDocView = F5(
	function (externalMsg, uid, fileExplorer, zone, logInfo) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 15, left: 0, right: 0, top: 0}),
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					author$project$FileExplorer$FileExplorer$view,
					{
						logInfo: logInfo,
						maxHeight: 500,
						mode: author$project$FileExplorer$FileExplorer$ReadOnly(author$project$FileExplorer$FileExplorer$DocsRoot),
						zone: zone
					},
					fileExplorer),
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2(mdgriffith$elm_ui$Element$paddingXY, 15, 0)
						]),
					A2(
						mdgriffith$elm_ui$Element$Input$button,
						_Utils_ap(
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(
									author$project$FileExplorer$FileExplorer$getSelectedDoc(fileExplorer),
									elm$core$Maybe$Nothing)),
							_List_fromArray(
								[mdgriffith$elm_ui$Element$alignTop])),
						{
							label: A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$html(
											author$project$Internals$Icons$externalLink(author$project$PageEditor$EditorPlugins$TextBlockPlugin$iconSize))),
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Valider'))
									])),
							onPress: A2(
								elm$core$Maybe$map,
								A2(
									elm$core$Basics$composeL,
									externalMsg,
									author$project$PageEditor$EditorPlugins$TextBlockPlugin$ConfirmFileUrl(uid)),
								author$project$FileExplorer$FileExplorer$getSelectedDoc(fileExplorer))
						}))
				]));
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$ConfirmInternalPageUrl = F2(
	function (a, b) {
		return {$: 'ConfirmInternalPageUrl', a: a, b: b};
	});
var author$project$PageTreeEditor$PageTreeEditor$Select = {$: 'Select'};
var author$project$PageTreeEditor$PageTreeEditor$internalPageSelectedPageInfo = function (model) {
	var _n0 = model.internalPageSelected;
	if (_n0.$ === 'Nothing') {
		return elm$core$Maybe$Nothing;
	} else {
		var _n1 = _n0.a;
		var pageInfo = _n1.a;
		var xs = _n1.b;
		return elm$core$Maybe$Just(pageInfo);
	}
};
var author$project$PageTreeEditor$PageTreeEditor$CutPage = {$: 'CutPage'};
var author$project$PageTreeEditor$PageTreeEditor$DeletePage = {$: 'DeletePage'};
var author$project$PageTreeEditor$PageTreeEditor$PastePage = {$: 'PastePage'};
var author$project$PageTreeEditor$PageTreeEditor$RenamePage = {$: 'RenamePage'};
var author$project$PageTreeEditor$PageTreeEditor$RenamePageInput = function (a) {
	return {$: 'RenamePageInput', a: a};
};
var author$project$PageTreeEditor$PageTreeEditor$Swap = function (a) {
	return {$: 'Swap', a: a};
};
var author$project$PageTreeEditor$PageTreeEditor$KeywordInput = function (a) {
	return {$: 'KeywordInput', a: a};
};
var author$project$PageTreeEditor$PageTreeEditor$NewKeyword = {$: 'NewKeyword'};
var author$project$PageTreeEditor$PageTreeEditor$SelectKeyword = function (a) {
	return {$: 'SelectKeyword', a: a};
};
var author$project$PageTreeEditor$PageTreeEditor$SelectPageKeyword = function (a) {
	return {$: 'SelectPageKeyword', a: a};
};
var author$project$PageTreeEditor$PageTreeEditor$SetKeyword = {$: 'SetKeyword'};
var author$project$PageTreeEditor$PageTreeEditor$UnsetKeyword = {$: 'UnsetKeyword'};
var elm$core$Set$map = F2(
	function (func, set) {
		return elm$core$Set$fromList(
			A3(
				elm$core$Set$foldl,
				F2(
					function (x, xs) {
						return A2(
							elm$core$List$cons,
							func(x),
							xs);
					}),
				_List_Nil,
				set));
	});
var author$project$PageTreeEditor$PageTreeEditor$keywordsAdminView = F2(
	function (config, model) {
		var visibleKeywords = A2(
			elm$core$List$filter,
			function (k) {
				return A2(
					elm$core$String$contains,
					A2(elm$core$Maybe$withDefault, '', model.keywordsPromptInput),
					k);
			},
			elm$core$Set$toList(
				A2(elm$core$Set$map, elm$core$Tuple$first, model.keywords)));
		var pageKeywords = function () {
			var _n1 = A2(elm$core$Maybe$andThen, author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.selected);
			if (_n1.$ === 'Nothing') {
				return _List_Nil;
			} else {
				var contentId = _n1.a;
				return elm$core$Set$toList(
					A2(
						elm$core$Set$map,
						elm$core$Tuple$first,
						A2(
							elm$core$Set$filter,
							function (_n2) {
								var c = _n2.a;
								var cId = _n2.b;
								return _Utils_eq(
									cId,
									TSFoster$elm_uuid$UUID$canonical(contentId));
							},
							model.keywords)));
			}
		}();
		var keywordView = F2(
			function (isPageKeyword, k) {
				var _n0 = isPageKeyword ? _Utils_Tuple2(
					mdgriffith$elm_ui$Element$Events$onClick(
						author$project$PageTreeEditor$PageTreeEditor$SelectPageKeyword(k)),
					_Utils_eq(
						model.selectedPageKeyword,
						elm$core$Maybe$Just(k))) : _Utils_Tuple2(
					mdgriffith$elm_ui$Element$Events$onClick(
						author$project$PageTreeEditor$PageTreeEditor$SelectKeyword(k)),
					_Utils_eq(
						model.selectedKeyword,
						elm$core$Maybe$Just(k)));
				var handler = _n0.a;
				var selected = _n0.b;
				return A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
							handler,
							A2(mdgriffith$elm_ui$Element$paddingXY, 5, 5),
							mdgriffith$elm_ui$Element$pointer,
							selected ? mdgriffith$elm_ui$Element$Background$color(
							A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 0.3)) : author$project$Internals$CommonStyleHelpers$noAttr
						]),
					mdgriffith$elm_ui$Element$text(k));
			});
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$Border$widthEach(
					{bottom: 0, left: 0, right: 0, top: 2}),
					mdgriffith$elm_ui$Element$Border$color(
					A3(mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8)),
					mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 0, right: 0, top: 15}),
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Font$bold,
							mdgriffith$elm_ui$Element$Font$size(18)
						]),
					mdgriffith$elm_ui$Element$text('Gestion mots clés')),
					A2(
					mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(300)),
								mdgriffith$elm_ui$Element$spacing(0)
							])),
					{
						label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
						onChange: author$project$PageTreeEditor$PageTreeEditor$KeywordInput,
						placeholder: elm$core$Maybe$Nothing,
						text: _Utils_eq(model.keywordsPromptInput, elm$core$Maybe$Nothing) ? A2(elm$core$Maybe$withDefault, '', model.selectedKeyword) : A2(elm$core$Maybe$withDefault, '', model.keywordsPromptInput)
					}),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15),
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Border$width(2),
									mdgriffith$elm_ui$Element$Border$color(
									A3(mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8)),
									mdgriffith$elm_ui$Element$width(
									mdgriffith$elm_ui$Element$px(200)),
									mdgriffith$elm_ui$Element$height(
									mdgriffith$elm_ui$Element$px(400)),
									mdgriffith$elm_ui$Element$scrollbars
								]),
							A2(
								elm$core$List$map,
								keywordView(false),
								visibleKeywords)),
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Border$width(2),
									mdgriffith$elm_ui$Element$Border$color(
									A3(mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8)),
									mdgriffith$elm_ui$Element$width(
									mdgriffith$elm_ui$Element$px(200)),
									mdgriffith$elm_ui$Element$height(
									mdgriffith$elm_ui$Element$px(400)),
									mdgriffith$elm_ui$Element$scrollbars
								]),
							A2(
								elm$core$List$map,
								keywordView(true),
								pageKeywords))
						])),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								(!_Utils_eq(
									A2(elm$core$Maybe$andThen, author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.selected),
									elm$core$Maybe$Nothing)) && ((!_Utils_eq(model.selectedKeyword, elm$core$Maybe$Nothing)) || author$project$PageTreeEditor$PageTreeEditor$validMbStr(model.keywordsPromptInput))),
							{
								label: A2(
									mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$text('Associer mot clé')
										])),
								onPress: ((!_Utils_eq(
									A2(elm$core$Maybe$andThen, author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.selected),
									elm$core$Maybe$Nothing)) && (!_Utils_eq(model.selectedKeyword, elm$core$Maybe$Nothing))) ? elm$core$Maybe$Just(author$project$PageTreeEditor$PageTreeEditor$SetKeyword) : (((!_Utils_eq(
									A2(elm$core$Maybe$andThen, author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.selected),
									elm$core$Maybe$Nothing)) && author$project$PageTreeEditor$PageTreeEditor$validMbStr(model.keywordsPromptInput)) ? elm$core$Maybe$Just(author$project$PageTreeEditor$PageTreeEditor$NewKeyword) : elm$core$Maybe$Nothing)
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								(!_Utils_eq(
									A2(elm$core$Maybe$andThen, author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.selected),
									elm$core$Maybe$Nothing)) && (!_Utils_eq(model.selectedPageKeyword, elm$core$Maybe$Nothing))),
							{
								label: A2(
									mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$text('Dissocier mot clé')
										])),
								onPress: ((!_Utils_eq(
									A2(elm$core$Maybe$andThen, author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.selected),
									elm$core$Maybe$Nothing)) && (!_Utils_eq(model.selectedPageKeyword, elm$core$Maybe$Nothing))) ? elm$core$Maybe$Just(author$project$PageTreeEditor$PageTreeEditor$UnsetKeyword) : elm$core$Maybe$Nothing
							})
						]))
				]));
	});
var author$project$PageTreeEditor$PageTreeEditor$FileIOSelectPage = function (a) {
	return {$: 'FileIOSelectPage', a: a};
};
var author$project$PageTreeEditor$PageTreeEditor$LastChild = function (a) {
	return {$: 'LastChild', a: a};
};
var author$project$PageTreeEditor$PageTreeEditor$NotLastChild = function (a) {
	return {$: 'NotLastChild', a: a};
};
var author$project$PageTreeEditor$PageTreeEditor$SaveAsSelectPage = function (a) {
	return {$: 'SaveAsSelectPage', a: a};
};
var author$project$PageTreeEditor$PageTreeEditor$SelectInternalPage = function (a) {
	return {$: 'SelectInternalPage', a: a};
};
var author$project$PageTreeEditor$PageTreeEditor$SelectPage = function (a) {
	return {$: 'SelectPage', a: a};
};
var author$project$PageTreeEditor$PageTreeEditor$isSubPage = F2(
	function (mbSubPage, page) {
		var xs = page.b;
		return A3(
			elm$core$List$foldr,
			F2(
				function (p, acc) {
					return _Utils_eq(p, mbSubPage) || acc;
				}),
			_Utils_eq(page, mbSubPage),
			xs);
	});
var author$project$PageTreeEditor$PageTreeEditor$prefix = function (offsets) {
	var attrs = function (sel) {
		return _List_fromArray(
			[
				sel ? mdgriffith$elm_ui$Element$Font$color(
				A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1)) : mdgriffith$elm_ui$Element$Font$color(
				A4(mdgriffith$elm_ui$Element$rgba, 0.8, 0.8, 0.8, 1))
			]);
	};
	var helper = F2(
		function (acc, indexes) {
			helper:
			while (true) {
				if (!indexes.b) {
					return _List_fromArray(
						[
							A2(mdgriffith$elm_ui$Element$row, _List_Nil, acc)
						]);
				} else {
					if (indexes.a.$ === 'LastChild') {
						if (!indexes.b.b) {
							var sel = indexes.a.a;
							return _Utils_ap(
								acc,
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										attrs(sel),
										mdgriffith$elm_ui$Element$text(
											A2(elm$core$String$repeat, 3, ' ') + '└─ '))
									]));
						} else {
							var sel = indexes.a.a;
							var xs = indexes.b;
							var $temp$acc = _Utils_ap(
								acc,
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$row,
										attrs(sel),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text(
												A2(elm$core$String$repeat, 3, ' ') + ' ')
											]))
									])),
								$temp$indexes = xs;
							acc = $temp$acc;
							indexes = $temp$indexes;
							continue helper;
						}
					} else {
						if (!indexes.b.b) {
							var sel = indexes.a.a;
							return _Utils_ap(
								acc,
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										attrs(sel),
										mdgriffith$elm_ui$Element$text(
											A2(elm$core$String$repeat, 3, ' ') + '├─ '))
									]));
						} else {
							var sel = indexes.a.a;
							var xs = indexes.b;
							var $temp$acc = _Utils_ap(
								acc,
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										attrs(sel),
										mdgriffith$elm_ui$Element$text(
											A2(elm$core$String$repeat, 3, ' ') + '│'))
									])),
								$temp$indexes = xs;
							acc = $temp$acc;
							indexes = $temp$indexes;
							continue helper;
						}
					}
				}
			}
		});
	return A2(
		helper,
		_List_Nil,
		elm$core$List$reverse(offsets));
};
var author$project$PageTreeEditor$PageTreeEditor$pageTreeView_ = F6(
	function (config, offsets, selected, contents, locked, _n0) {
		var pageInfo = _n0.a;
		var children = _n0.b;
		var l = elm$core$List$length(children);
		var isLocked = A2(
			elm$core$List$any,
			elm$core$Basics$identity,
			A2(
				elm$core$List$map,
				author$project$PageTreeEditor$PageTreeEditor$isSubPage(
					A2(author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children)),
				locked));
		var attrs = function () {
			var _n2 = config.mode;
			switch (_n2.$) {
				case 'Full':
					var selectable = !isLocked;
					return _Utils_ap(
						selectable ? _List_fromArray(
							[
								mdgriffith$elm_ui$Element$Events$onClick(
								author$project$PageTreeEditor$PageTreeEditor$SelectPage(
									A2(author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))),
								mdgriffith$elm_ui$Element$pointer,
								mdgriffith$elm_ui$Element$mouseOver(
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$color(
										A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1))
									]))
							]) : _List_Nil,
						_List_fromArray(
							[
								_Utils_eq(
								selected,
								elm$core$Maybe$Just(
									A2(author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))) ? mdgriffith$elm_ui$Element$Font$color(
								A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1)) : author$project$Internals$CommonStyleHelpers$noAttr
							]));
				case 'Save':
					return _List_fromArray(
						[
							_Utils_eq(
							selected,
							elm$core$Maybe$Just(
								A2(author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))) ? mdgriffith$elm_ui$Element$Font$color(
							A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1)) : mdgriffith$elm_ui$Element$Font$color(
							A4(mdgriffith$elm_ui$Element$rgba, 0.8, 0.8, 0.8, 1))
						]);
				case 'SaveAs':
					var fontColor = function () {
						var _n3 = pageInfo.mbContentId;
						if (_n3.$ === 'Nothing') {
							return mdgriffith$elm_ui$Element$Font$color(
								A4(mdgriffith$elm_ui$Element$rgba, 0.8, 0.8, 0.8, 1));
						} else {
							var contentId = _n3.a;
							var _n4 = A2(
								elm$core$Dict$get,
								TSFoster$elm_uuid$UUID$canonical(contentId),
								contents);
							if (_n4.$ === 'Just') {
								return author$project$Internals$CommonStyleHelpers$noAttr;
							} else {
								return mdgriffith$elm_ui$Element$Font$color(
									A4(mdgriffith$elm_ui$Element$rgba, 1, 0, 0, 0.7));
							}
						}
					}();
					return _Utils_ap(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Events$onClick(
								author$project$PageTreeEditor$PageTreeEditor$SaveAsSelectPage(
									A2(author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))),
								mdgriffith$elm_ui$Element$pointer,
								mdgriffith$elm_ui$Element$mouseOver(
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$color(
										A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1))
									]))
							]),
						_List_fromArray(
							[
								_Utils_eq(
								selected,
								elm$core$Maybe$Just(
									A2(author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))) ? mdgriffith$elm_ui$Element$Font$color(
								A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1)) : fontColor
							]));
				case 'Open':
					var selectable = function (res) {
						return !_Utils_eq(res, elm$core$Maybe$Nothing);
					}(
						A2(
							elm$core$Maybe$map,
							function (k) {
								return A2(
									elm$core$Dict$get,
									TSFoster$elm_uuid$UUID$canonical(k),
									contents);
							},
							pageInfo.mbContentId));
					var fontColor = function () {
						var _n5 = pageInfo.mbContentId;
						if (_n5.$ === 'Nothing') {
							return mdgriffith$elm_ui$Element$Font$color(
								A4(mdgriffith$elm_ui$Element$rgba, 0.8, 0.8, 0.8, 1));
						} else {
							var contentId = _n5.a;
							var _n6 = A2(
								elm$core$Dict$get,
								TSFoster$elm_uuid$UUID$canonical(contentId),
								contents);
							if (_n6.$ === 'Just') {
								return author$project$Internals$CommonStyleHelpers$noAttr;
							} else {
								return mdgriffith$elm_ui$Element$Font$color(
									A4(mdgriffith$elm_ui$Element$rgba, 1, 0, 0, 0.7));
							}
						}
					}();
					return _Utils_ap(
						selectable ? _List_fromArray(
							[
								mdgriffith$elm_ui$Element$Events$onClick(
								author$project$PageTreeEditor$PageTreeEditor$FileIOSelectPage(
									A2(author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))),
								mdgriffith$elm_ui$Element$pointer,
								mdgriffith$elm_ui$Element$mouseOver(
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$color(
										A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1))
									]))
							]) : _List_Nil,
						_List_fromArray(
							[
								_Utils_eq(
								selected,
								elm$core$Maybe$Just(
									A2(author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))) ? mdgriffith$elm_ui$Element$Font$color(
								A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1)) : fontColor
							]));
				default:
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Events$onClick(
							author$project$PageTreeEditor$PageTreeEditor$SelectInternalPage(
								A2(author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))),
							mdgriffith$elm_ui$Element$pointer,
							mdgriffith$elm_ui$Element$mouseOver(
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Font$color(
									A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1))
								])),
							_Utils_eq(
							selected,
							elm$core$Maybe$Just(
								A2(author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))) ? mdgriffith$elm_ui$Element$Font$color(
							A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1)) : author$project$Internals$CommonStyleHelpers$noAttr
						]);
			}
		}();
		var _n1 = _Utils_Tuple2(
			A2(elm$core$List$take, l - 1, children),
			A2(elm$core$List$drop, l - 1, children));
		var firsts = _n1.a;
		var last = _n1.b;
		return _Utils_ap(
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
						]),
					_Utils_ap(
						author$project$PageTreeEditor$PageTreeEditor$prefix(offsets),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$Keyed$el,
								_Utils_ap(
									attrs,
									_List_fromArray(
										[
											isLocked ? mdgriffith$elm_ui$Element$Font$color(
											A4(mdgriffith$elm_ui$Element$rgba, 0.8, 0.8, 0.8, 1)) : author$project$Internals$CommonStyleHelpers$noAttr
										])),
								_Utils_Tuple2(
									A2(elm$core$String$join, '/', pageInfo.path),
									mdgriffith$elm_ui$Element$text(pageInfo.name)))
							])))
				]),
			_Utils_ap(
				A2(
					elm$core$List$concatMap,
					A5(
						author$project$PageTreeEditor$PageTreeEditor$pageTreeView_,
						config,
						A2(
							elm$core$List$cons,
							author$project$PageTreeEditor$PageTreeEditor$NotLastChild(true),
							offsets),
						selected,
						contents,
						locked),
					firsts),
				A2(
					elm$core$List$concatMap,
					A5(
						author$project$PageTreeEditor$PageTreeEditor$pageTreeView_,
						config,
						A2(
							elm$core$List$cons,
							author$project$PageTreeEditor$PageTreeEditor$LastChild(true),
							offsets),
						selected,
						contents,
						locked),
					last)));
	});
var author$project$PageTreeEditor$PageTreeEditor$pageTreeView = F2(
	function (config, model) {
		var selected = function () {
			var _n0 = config.mode;
			switch (_n0.$) {
				case 'Full':
					return model.selected;
				case 'Select':
					return model.internalPageSelected;
				case 'SaveAs':
					return model.saveAsSelected;
				default:
					return model.fileIoSelected;
			}
		}();
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(2),
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$Font$size(14),
					mdgriffith$elm_ui$Element$Font$family(
					_List_fromArray(
						[mdgriffith$elm_ui$Element$Font$monospace])),
					mdgriffith$elm_ui$Element$scrollbars,
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill)
				]),
			A2(
				elm$core$Maybe$withDefault,
				_List_Nil,
				A2(
					elm$core$Maybe$map,
					A5(author$project$PageTreeEditor$PageTreeEditor$pageTreeView_, config, _List_Nil, selected, model.contents, model.lockedPages),
					A2(
						elm$core$Maybe$map,
						author$project$PageTreeEditor$PageTreeEditor$extractPage,
						A2(elm$core$Maybe$map, author$project$PageTreeEditor$PageTreeEditor$rewind, model.pageTree)))));
	});
var mdgriffith$elm_ui$Internal$Flag$borderStyle = mdgriffith$elm_ui$Internal$Flag$flag(11);
var mdgriffith$elm_ui$Element$Border$solid = A2(mdgriffith$elm_ui$Internal$Model$Class, mdgriffith$elm_ui$Internal$Flag$borderStyle, mdgriffith$elm_ui$Internal$Style$classes.borderSolid);
var author$project$PageTreeEditor$PageTreeEditor$fullView = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$htmlAttribute(
					A2(elm$html$Html$Attributes$style, 'flex-shrink', '1')),
					mdgriffith$elm_ui$Element$clip,
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15),
							mdgriffith$elm_ui$Element$alignTop,
							mdgriffith$elm_ui$Element$Border$solid,
							mdgriffith$elm_ui$Element$Border$widthEach(
							{bottom: 0, left: 0, right: 2, top: 0}),
							mdgriffith$elm_ui$Element$Border$color(
							A3(mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8)),
							mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
							mdgriffith$elm_ui$Element$width(
							mdgriffith$elm_ui$Element$px(430)),
							mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 0, left: 0, right: 15, top: 0}),
							mdgriffith$elm_ui$Element$scrollbarY
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Font$bold,
									mdgriffith$elm_ui$Element$Font$size(18)
								]),
							mdgriffith$elm_ui$Element$text('Modification arborescence')),
							A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$Input$text,
									_Utils_ap(
										author$project$Internals$CommonStyleHelpers$textInputStyle,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$width(
												mdgriffith$elm_ui$Element$px(250)),
												mdgriffith$elm_ui$Element$spacing(0)
											])),
									{
										label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
										onChange: author$project$PageTreeEditor$PageTreeEditor$RenamePageInput,
										placeholder: elm$core$Maybe$Nothing,
										text: _Utils_eq(model.renamePageBuffer, elm$core$Maybe$Nothing) ? A2(
											elm$core$Maybe$withDefault,
											'',
											A2(elm$core$Maybe$map, author$project$PageTreeEditor$PageTreeEditor$getName, model.selected)) : A2(elm$core$Maybe$withDefault, '', model.renamePageBuffer)
									}),
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(model.selected, elm$core$Maybe$Nothing)),
									{
										label: A2(
											mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$text('Renommer')
												])),
										onPress: A2(
											elm$core$Maybe$map,
											function (_n0) {
												return author$project$PageTreeEditor$PageTreeEditor$RenamePage;
											},
											model.selected)
									})
								])),
							A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(model.selected, elm$core$Maybe$Nothing)),
									{
										label: A2(
											mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													A2(
													mdgriffith$elm_ui$Element$el,
													_List_Nil,
													mdgriffith$elm_ui$Element$html(
														author$project$Internals$Icons$chevronsUp(18))),
													mdgriffith$elm_ui$Element$text('Monter')
												])),
										onPress: A2(
											elm$core$Maybe$map,
											function (_n1) {
												return author$project$PageTreeEditor$PageTreeEditor$Swap(true);
											},
											model.selected)
									}),
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(model.selected, elm$core$Maybe$Nothing)),
									{
										label: A2(
											mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													A2(
													mdgriffith$elm_ui$Element$el,
													_List_Nil,
													mdgriffith$elm_ui$Element$html(
														author$project$Internals$Icons$chevronsDown(18))),
													mdgriffith$elm_ui$Element$text('Descendre')
												])),
										onPress: A2(
											elm$core$Maybe$map,
											function (_n2) {
												return author$project$PageTreeEditor$PageTreeEditor$Swap(false);
											},
											model.selected)
									})
								])),
							A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(
										(!_Utils_eq(model.selected, elm$core$Maybe$Nothing)) && _Utils_eq(model.pastePageBuffer, elm$core$Maybe$Nothing)),
									{
										label: A2(
											mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$text('Couper')
												])),
										onPress: _Utils_eq(model.pastePageBuffer, elm$core$Maybe$Nothing) ? A2(
											elm$core$Maybe$map,
											function (_n3) {
												return author$project$PageTreeEditor$PageTreeEditor$CutPage;
											},
											model.selected) : elm$core$Maybe$Nothing
									}),
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(
										(!_Utils_eq(model.selected, elm$core$Maybe$Nothing)) && (!_Utils_eq(model.pastePageBuffer, elm$core$Maybe$Nothing))),
									{
										label: A2(
											mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$text('Coller')
												])),
										onPress: (!_Utils_eq(model.pastePageBuffer, elm$core$Maybe$Nothing)) ? A2(
											elm$core$Maybe$map,
											function (_n4) {
												return author$project$PageTreeEditor$PageTreeEditor$PastePage;
											},
											model.selected) : elm$core$Maybe$Nothing
									}),
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(model.selected, elm$core$Maybe$Nothing)),
									{
										label: A2(
											mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$text('Supprimer')
												])),
										onPress: A2(
											elm$core$Maybe$map,
											function (_n5) {
												return author$project$PageTreeEditor$PageTreeEditor$DeletePage;
											},
											model.selected)
									})
								])),
							A2(author$project$PageTreeEditor$PageTreeEditor$keywordsAdminView, config, model)
						])),
					A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$htmlAttribute(
							A2(elm$html$Html$Attributes$style, 'flex-shrink', '1')),
							mdgriffith$elm_ui$Element$clip,
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
							mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									A2(mdgriffith$elm_ui$Element$paddingXY, 15, 10),
									mdgriffith$elm_ui$Element$Background$color(
									A3(mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95)),
									mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$wrappedRow,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
											mdgriffith$elm_ui$Element$Background$color(
											A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
											mdgriffith$elm_ui$Element$padding(4),
											mdgriffith$elm_ui$Element$Border$rounded(5),
											mdgriffith$elm_ui$Element$Font$family(
											_List_fromArray(
												[mdgriffith$elm_ui$Element$Font$monospace]))
										]),
									A2(
										elm$core$Maybe$withDefault,
										_List_fromArray(
											[
												A2(
												mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														A2(mdgriffith$elm_ui$Element$paddingXY, 2, 4)
													]),
												mdgriffith$elm_ui$Element$text('/'))
											]),
										A2(
											elm$core$Maybe$map,
											function (res) {
												return A2(
													elm$core$List$cons,
													A2(
														mdgriffith$elm_ui$Element$el,
														_List_fromArray(
															[
																A2(mdgriffith$elm_ui$Element$paddingXY, 2, 4)
															]),
														mdgriffith$elm_ui$Element$text('/')),
													res);
											},
											A2(
												elm$core$Maybe$map,
												elm$core$List$intersperse(
													A2(
														mdgriffith$elm_ui$Element$el,
														_List_fromArray(
															[
																A2(mdgriffith$elm_ui$Element$paddingXY, 2, 4)
															]),
														mdgriffith$elm_ui$Element$text('/'))),
												A2(
													elm$core$Maybe$map,
													elm$core$List$map(mdgriffith$elm_ui$Element$text),
													A2(elm$core$Maybe$map, author$project$PageTreeEditor$PageTreeEditor$getPath, model.selected))))))
								])),
							A2(author$project$PageTreeEditor$PageTreeEditor$pageTreeView, config, model)
						]))
				]));
	});
var author$project$PageTreeEditor$PageTreeEditor$openView = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$htmlAttribute(
					A2(elm$html$Html$Attributes$style, 'flex-shrink', '1')),
					mdgriffith$elm_ui$Element$clip,
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Font$bold,
							mdgriffith$elm_ui$Element$Font$size(18)
						]),
					mdgriffith$elm_ui$Element$text('Charger une page')),
					A2(author$project$PageTreeEditor$PageTreeEditor$pageTreeView, config, model)
				]));
	});
var author$project$PageTreeEditor$PageTreeEditor$NewPage = {$: 'NewPage'};
var author$project$PageTreeEditor$PageTreeEditor$NewPageInput = function (a) {
	return {$: 'NewPageInput', a: a};
};
var author$project$PageTreeEditor$PageTreeEditor$SaveContent = function (a) {
	return {$: 'SaveContent', a: a};
};
var author$project$PageTreeEditor$PageTreeEditor$saveAsView = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$htmlAttribute(
					A2(elm$html$Html$Attributes$style, 'flex-shrink', '1')),
					mdgriffith$elm_ui$Element$clip,
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Font$bold,
							mdgriffith$elm_ui$Element$Font$size(18)
						]),
					mdgriffith$elm_ui$Element$text('Enregistrer sous')),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$text,
							_Utils_ap(
								author$project$Internals$CommonStyleHelpers$textInputStyle,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(250)),
										mdgriffith$elm_ui$Element$spacing(0)
									])),
							{
								label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
								onChange: author$project$PageTreeEditor$PageTreeEditor$NewPageInput,
								placeholder: elm$core$Maybe$Nothing,
								text: model.newPageBuffer
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: A2(
									mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$text('Nouvelle page')
										])),
								onPress: elm$core$Maybe$Just(author$project$PageTreeEditor$PageTreeEditor$NewPage)
							})
						])),
					A2(author$project$PageTreeEditor$PageTreeEditor$pageTreeView, config, model),
					A2(
					mdgriffith$elm_ui$Element$Input$button,
					author$project$Internals$CommonStyleHelpers$buttonStyle(
						!_Utils_eq(model.saveAsSelected, elm$core$Maybe$Nothing)),
					{
						label: A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$text('Enregistrer')
								])),
						onPress: A2(elm$core$Maybe$map, author$project$PageTreeEditor$PageTreeEditor$SaveContent, model.saveAsSelected)
					})
				]));
	});
var author$project$PageTreeEditor$PageTreeEditor$saveView = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$htmlAttribute(
					A2(elm$html$Html$Attributes$style, 'flex-shrink', '1')),
					mdgriffith$elm_ui$Element$clip,
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Font$bold,
							mdgriffith$elm_ui$Element$Font$size(18)
						]),
					mdgriffith$elm_ui$Element$text('Enregistrer')),
					A2(author$project$PageTreeEditor$PageTreeEditor$pageTreeView, config, model),
					A2(
					mdgriffith$elm_ui$Element$Input$button,
					author$project$Internals$CommonStyleHelpers$buttonStyle(
						!_Utils_eq(model.fileIoSelected, elm$core$Maybe$Nothing)),
					{
						label: A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$text('Valider')
								])),
						onPress: A2(elm$core$Maybe$map, author$project$PageTreeEditor$PageTreeEditor$SaveContent, model.fileIoSelected)
					})
				]));
	});
var author$project$PageTreeEditor$PageTreeEditor$selectView = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$htmlAttribute(
					A2(elm$html$Html$Attributes$style, 'flex-shrink', '1')),
					mdgriffith$elm_ui$Element$clip,
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(author$project$PageTreeEditor$PageTreeEditor$pageTreeView, config, model)
				]));
	});
var author$project$PageTreeEditor$PageTreeEditor$view = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$map,
			model.externalMsg,
			A2(
				mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$Font$size(16),
						mdgriffith$elm_ui$Element$alignTop,
						mdgriffith$elm_ui$Element$padding(15),
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$height(
						A2(mdgriffith$elm_ui$Element$maximum, config.maxHeight, mdgriffith$elm_ui$Element$fill))
					]),
				_List_fromArray(
					[
						function () {
						var _n0 = config.mode;
						switch (_n0.$) {
							case 'Full':
								return A2(author$project$PageTreeEditor$PageTreeEditor$fullView, config, model);
							case 'Save':
								return A2(author$project$PageTreeEditor$PageTreeEditor$saveView, config, model);
							case 'SaveAs':
								return A2(author$project$PageTreeEditor$PageTreeEditor$saveAsView, config, model);
							case 'Open':
								return A2(author$project$PageTreeEditor$PageTreeEditor$openView, config, model);
							default:
								return A2(author$project$PageTreeEditor$PageTreeEditor$selectView, config, model);
						}
					}()
					])));
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$chooseInternalPageView = F5(
	function (externalMsg, uid, pageTreeEditor, zone, logInfo) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 15, left: 0, right: 0, top: 0}),
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					author$project$PageTreeEditor$PageTreeEditor$view,
					{logInfo: logInfo, maxHeight: 500, mode: author$project$PageTreeEditor$PageTreeEditor$Select, zone: zone},
					pageTreeEditor),
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2(mdgriffith$elm_ui$Element$paddingXY, 15, 0)
						]),
					A2(
						mdgriffith$elm_ui$Element$Input$button,
						_Utils_ap(
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(
									author$project$PageTreeEditor$PageTreeEditor$internalPageSelectedPageInfo(pageTreeEditor),
									elm$core$Maybe$Nothing)),
							_List_fromArray(
								[mdgriffith$elm_ui$Element$alignTop])),
						{
							label: A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$html(
											author$project$Internals$Icons$externalLink(author$project$PageEditor$EditorPlugins$TextBlockPlugin$iconSize))),
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Valider'))
									])),
							onPress: A2(
								elm$core$Maybe$map,
								A2(
									elm$core$Basics$composeL,
									externalMsg,
									author$project$PageEditor$EditorPlugins$TextBlockPlugin$ConfirmInternalPageUrl(uid)),
								A2(
									elm$core$Maybe$map,
									TSFoster$elm_uuid$UUID$canonical,
									A2(
										elm$core$Maybe$andThen,
										function ($) {
											return $.mbContentId;
										},
										author$project$PageTreeEditor$PageTreeEditor$internalPageSelectedPageInfo(pageTreeEditor))))
						}))
				]));
	});
var author$project$PageTreeEditor$PageTreeEditor$getPathFromId = F2(
	function (model, cId) {
		var findPath = function (_n0) {
			var path = _n0.a.path;
			var mbContentId = _n0.a.mbContentId;
			var xs = _n0.b;
			return _Utils_eq(
				mbContentId,
				elm$core$Result$toMaybe(
					TSFoster$elm_uuid$UUID$fromString(cId))) ? elm$core$Maybe$Just(
				'/' + A2(elm$core$String$join, '/', path)) : elm$core$List$head(
				A2(elm$core$List$filterMap, findPath, xs));
		};
		return A2(
			elm$core$Maybe$andThen,
			findPath,
			A2(elm$core$Maybe$map, author$project$PageTreeEditor$PageTreeEditor$extractPage, model.pageTree));
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$internalLinkView = F2(
	function (externalMsg, config) {
		return A2(
			mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$below(
					config.selectorOpen ? A2(
						mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									elm$html$Html$Events$stopPropagationOn,
									'click',
									elm$json$Json$Decode$succeed(
										_Utils_Tuple2(
											externalMsg(author$project$PageEditor$EditorPlugins$TextBlockPlugin$NoOp),
											true)))),
								mdgriffith$elm_ui$Element$Background$color(
								A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(850)),
								mdgriffith$elm_ui$Element$Border$shadow(
								{
									blur: 10,
									color: A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
									offset: _Utils_Tuple2(4, 4),
									size: 5
								})
							]),
						_List_fromArray(
							[
								config.isDoc ? A5(author$project$PageEditor$EditorPlugins$TextBlockPlugin$chooseDocView, externalMsg, config.td.meta.uid, config.fileExplorer, config.zone, config.logInfo) : A5(author$project$PageEditor$EditorPlugins$TextBlockPlugin$chooseInternalPageView, externalMsg, config.td.meta.uid, config.pageTreeEditor, config.zone, config.logInfo)
							])) : mdgriffith$elm_ui$Element$none)
				]),
			A2(
				elm$core$List$map,
				mdgriffith$elm_ui$Element$map(externalMsg),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(5)
							]),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[mdgriffith$elm_ui$Element$Font$bold]),
								mdgriffith$elm_ui$Element$text('Lien pour: ')),
								A2(
								mdgriffith$elm_ui$Element$el,
								_List_Nil,
								mdgriffith$elm_ui$Element$text(config.td.meta.value))
							])),
						A2(
						mdgriffith$elm_ui$Element$Input$text,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(150)),
								mdgriffith$elm_ui$Element$spacing(5),
								A2(mdgriffith$elm_ui$Element$paddingXY, 15, 5),
								mdgriffith$elm_ui$Element$focused(
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$Border$glow,
										A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
										0)
									])),
								mdgriffith$elm_ui$Element$Font$family(
								_List_fromArray(
									[mdgriffith$elm_ui$Element$Font$monospace])),
								mdgriffith$elm_ui$Element$Events$onClick(author$project$PageEditor$EditorPlugins$TextBlockPlugin$InternalUrlSelectorClick)
							]),
						{
							label: A2(
								mdgriffith$elm_ui$Element$Input$labelLeft,
								_List_fromArray(
									[mdgriffith$elm_ui$Element$centerY, mdgriffith$elm_ui$Element$Font$bold]),
								mdgriffith$elm_ui$Element$text('Url: ')),
							onChange: author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetUrl(config.td.meta.uid),
							placeholder: elm$core$Maybe$Nothing,
							text: A2(
								elm$core$Maybe$withDefault,
								config.url,
								A2(author$project$PageTreeEditor$PageTreeEditor$getPathFromId, config.pageTreeEditor, config.url))
						}),
						A2(
						mdgriffith$elm_ui$Element$Input$radioRow,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15)
							]),
						{
							label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
							onChange: author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetInternalLinkKind(config.td.meta.uid),
							options: _List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$Input$option,
									false,
									mdgriffith$elm_ui$Element$text('page interne')),
									A2(
									mdgriffith$elm_ui$Element$Input$option,
									true,
									mdgriffith$elm_ui$Element$text('document'))
								]),
							selected: elm$core$Maybe$Just(config.isDoc)
						})
					])));
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$selectionContainsTrackedData = F2(
	function (mbSelection, trackedData) {
		if (mbSelection.$ === 'Nothing') {
			return true;
		} else {
			var start = mbSelection.a.start;
			var finish = mbSelection.a.finish;
			var selectionContainsTd = function (_n1) {
				var meta = _n1.meta;
				return (_Utils_cmp(meta.start, start) > -1) && (_Utils_cmp(meta.stop, finish) < 1);
			};
			return A3(
				elm$core$Dict$foldr,
				F3(
					function (k, v, acc) {
						return selectionContainsTd(v) || acc;
					}),
				false,
				trackedData);
		}
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$selectionInTrackedData = F2(
	function (mbSelection, trackedData) {
		if (mbSelection.$ === 'Nothing') {
			return true;
		} else {
			var start = mbSelection.a.start;
			var finish = mbSelection.a.finish;
			var selectionContainsTd = function (_n1) {
				var meta = _n1.meta;
				return ((_Utils_cmp(start, meta.start) > 0) && (_Utils_cmp(start, meta.stop) < 0)) || ((_Utils_cmp(finish, meta.start) > 0) && (_Utils_cmp(finish, meta.stop) < 0));
			};
			return A3(
				elm$core$Dict$foldr,
				F3(
					function (k, v, acc) {
						return selectionContainsTd(v) || acc;
					}),
				false,
				trackedData);
		}
	});
var author$project$Internals$Icons$alignJustify = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'align-justify',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('21'),
						elm$svg$Svg$Attributes$y1('10'),
						elm$svg$Svg$Attributes$x2('3'),
						elm$svg$Svg$Attributes$y2('10')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('21'),
						elm$svg$Svg$Attributes$y1('6'),
						elm$svg$Svg$Attributes$x2('3'),
						elm$svg$Svg$Attributes$y2('6')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('21'),
						elm$svg$Svg$Attributes$y1('14'),
						elm$svg$Svg$Attributes$x2('3'),
						elm$svg$Svg$Attributes$y2('14')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('21'),
						elm$svg$Svg$Attributes$y1('18'),
						elm$svg$Svg$Attributes$x2('3'),
						elm$svg$Svg$Attributes$y2('18')
					]),
				_List_Nil)
			]));
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetTextBlocAlignment = {$: 'SetTextBlocAlignment'};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetTextBlocBold = {$: 'SetTextBlocBold'};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetTextBlocFont = function (a) {
	return {$: 'SetTextBlocFont', a: a};
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetTextBlocFontSize = function (a) {
	return {$: 'SetTextBlocFontSize', a: a};
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetTextBlocItalic = {$: 'SetTextBlocItalic'};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$textBlockStyleView = function (model) {
	var fontSizeOptionView = F2(
		function (selectedSize, fs) {
			var selected = A2(
				elm$core$Maybe$withDefault,
				false,
				A2(
					elm$core$Maybe$map,
					function (fs_) {
						return _Utils_eq(
							selectedSize,
							elm$core$Maybe$Just(
								author$project$Document$Document$FontSize(fs_)));
					},
					elm$core$String$toInt(fs)));
			return A2(
				elm$html$Html$option,
				_List_fromArray(
					[
						elm$html$Html$Attributes$value(fs),
						elm$html$Html$Attributes$selected(selected)
					]),
				_List_fromArray(
					[
						elm$html$Html$text(fs)
					]));
		});
	var fontOptionView = F2(
		function (selectedFont, f) {
			return A2(
				elm$html$Html$option,
				_List_fromArray(
					[
						elm$html$Html$Attributes$value(f),
						elm$html$Html$Attributes$selected(
						_Utils_eq(
							selectedFont,
							elm$core$Maybe$Just(
								author$project$Document$Document$Font(f))))
					]),
				_List_fromArray(
					[
						elm$html$Html$text(f)
					]));
		});
	return A2(
		mdgriffith$elm_ui$Element$map,
		model.externalMsg,
		A2(
			mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_Nil,
					mdgriffith$elm_ui$Element$html(
						A2(
							elm$html$Html$select,
							_List_fromArray(
								[
									elm$html$Html$Events$onInput(author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetTextBlocFont)
								]),
							A2(
								elm$core$List$map,
								fontOptionView(
									elm$core$List$head(
										A2(elm$core$List$filter, author$project$PageEditor$EditorPlugins$TextBlockPlugin$isFontAttr, model.wholeTextBlocAttr))),
								elm$core$List$sort(author$project$PageEditor$EditorPlugins$TextBlockPlugin$fonts))))),
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_Nil,
					mdgriffith$elm_ui$Element$html(
						A2(
							elm$html$Html$select,
							_List_fromArray(
								[
									elm$html$Html$Events$onInput(author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetTextBlocFontSize)
								]),
							A2(
								elm$core$List$map,
								fontSizeOptionView(
									elm$core$List$head(
										A2(elm$core$List$filter, author$project$PageEditor$EditorPlugins$TextBlockPlugin$isFontSizeAttr, model.wholeTextBlocAttr))),
								author$project$PageEditor$EditorPlugins$TextBlockPlugin$fontSizes)))),
					A2(
					mdgriffith$elm_ui$Element$Input$button,
					A2(
						author$project$Internals$CommonStyleHelpers$toogleButtonStyle,
						A2(elm$core$List$member, author$project$Document$Document$Justify, model.wholeTextBlocAttr),
						_Utils_eq(model.selected, elm$core$Maybe$Nothing)),
					{
						label: A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(5)
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_Nil,
									mdgriffith$elm_ui$Element$html(
										author$project$Internals$Icons$alignJustify(author$project$PageEditor$EditorPlugins$TextBlockPlugin$iconSize)))
								])),
						onPress: elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetTextBlocAlignment)
					}),
					A2(
					mdgriffith$elm_ui$Element$Input$button,
					A2(
						author$project$Internals$CommonStyleHelpers$toogleButtonStyle,
						A2(elm$core$List$member, author$project$Document$Document$Bold, model.wholeTextBlocAttr),
						_Utils_eq(model.selected, elm$core$Maybe$Nothing)),
					{
						label: A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(5)
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_Nil,
									mdgriffith$elm_ui$Element$html(
										author$project$Internals$Icons$bold(author$project$PageEditor$EditorPlugins$TextBlockPlugin$iconSize)))
								])),
						onPress: elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetTextBlocBold)
					}),
					A2(
					mdgriffith$elm_ui$Element$Input$button,
					A2(
						author$project$Internals$CommonStyleHelpers$toogleButtonStyle,
						A2(elm$core$List$member, author$project$Document$Document$Italic, model.wholeTextBlocAttr),
						_Utils_eq(model.selected, elm$core$Maybe$Nothing)),
					{
						label: A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(5)
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_Nil,
									mdgriffith$elm_ui$Element$html(
										author$project$Internals$Icons$italic(author$project$PageEditor$EditorPlugins$TextBlockPlugin$iconSize)))
								])),
						onPress: elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$TextBlockPlugin$SetTextBlocItalic)
					})
				])));
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$interfaceView = F3(
	function (config, isNewsView, model) {
		var isActive = (!_Utils_eq(model.selected, elm$core$Maybe$Nothing)) && ((!A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$selectionContainsTrackedData, model.selected, model.trackedData)) && (!A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$selectionInTrackedData, model.selected, model.trackedData)));
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15),
							mdgriffith$elm_ui$Element$Font$size(16),
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							isNewsView ? mdgriffith$elm_ui$Element$none : A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(isActive),
							{
								label: A2(
									mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$spacing(5)
										]),
									_List_fromArray(
										[
											A2(
											mdgriffith$elm_ui$Element$el,
											_List_Nil,
											mdgriffith$elm_ui$Element$html(
												author$project$Internals$Icons$type_(author$project$PageEditor$EditorPlugins$TextBlockPlugin$iconSize))),
											A2(
											mdgriffith$elm_ui$Element$el,
											_List_Nil,
											mdgriffith$elm_ui$Element$text('Titre'))
										])),
								onPress: isActive ? elm$core$Maybe$Just(
									model.externalMsg(
										author$project$PageEditor$EditorPlugins$TextBlockPlugin$InsertTrackingTag(
											author$project$PageEditor$EditorPlugins$TextBlockPlugin$Heading(1)))) : elm$core$Maybe$Nothing
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(isActive),
							{
								label: A2(
									mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$spacing(5)
										]),
									_List_fromArray(
										[
											A2(
											mdgriffith$elm_ui$Element$el,
											_List_Nil,
											mdgriffith$elm_ui$Element$html(
												author$project$Internals$Icons$link2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$iconSize))),
											A2(
											mdgriffith$elm_ui$Element$el,
											_List_Nil,
											mdgriffith$elm_ui$Element$text('Lien interne'))
										])),
								onPress: isActive ? elm$core$Maybe$Just(
									model.externalMsg(
										author$project$PageEditor$EditorPlugins$TextBlockPlugin$InsertTrackingTag(
											A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$InternalLink, false, '')))) : elm$core$Maybe$Nothing
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(isActive),
							{
								label: A2(
									mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$spacing(5)
										]),
									_List_fromArray(
										[
											A2(
											mdgriffith$elm_ui$Element$el,
											_List_Nil,
											mdgriffith$elm_ui$Element$html(
												author$project$Internals$Icons$externalLink(author$project$PageEditor$EditorPlugins$TextBlockPlugin$iconSize))),
											A2(
											mdgriffith$elm_ui$Element$el,
											_List_Nil,
											mdgriffith$elm_ui$Element$text('lien externe'))
										])),
								onPress: isActive ? elm$core$Maybe$Just(
									model.externalMsg(
										author$project$PageEditor$EditorPlugins$TextBlockPlugin$InsertTrackingTag(
											author$project$PageEditor$EditorPlugins$TextBlockPlugin$ExternalLink('')))) : elm$core$Maybe$Nothing
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(isActive),
							{
								label: A2(
									mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$spacing(5)
										]),
									_List_fromArray(
										[
											A2(
											mdgriffith$elm_ui$Element$el,
											_List_Nil,
											mdgriffith$elm_ui$Element$html(
												author$project$Internals$Icons$tag(author$project$PageEditor$EditorPlugins$TextBlockPlugin$iconSize))),
											A2(
											mdgriffith$elm_ui$Element$el,
											_List_Nil,
											mdgriffith$elm_ui$Element$text('Tag'))
										])),
								onPress: isActive ? elm$core$Maybe$Just(
									model.externalMsg(
										author$project$PageEditor$EditorPlugins$TextBlockPlugin$InsertTrackingTag(author$project$PageEditor$EditorPlugins$TextBlockPlugin$InlineStyled))) : elm$core$Maybe$Nothing
							})
						])),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
							mdgriffith$elm_ui$Element$height(
							mdgriffith$elm_ui$Element$px(30)),
							mdgriffith$elm_ui$Element$Font$size(16)
						]),
					_List_fromArray(
						[
							function () {
							var _n0 = model.currentTrackedData;
							if (_n0.$ === 'Nothing') {
								return author$project$PageEditor$EditorPlugins$TextBlockPlugin$textBlockStyleView(model);
							} else {
								var td = _n0.a;
								var meta = td.meta;
								var attrs = td.attrs;
								var dataKind = td.dataKind;
								switch (dataKind.$) {
									case 'Heading':
										var level = dataKind.a;
										return A3(author$project$PageEditor$EditorPlugins$TextBlockPlugin$headingView, model.externalMsg, model.headingLevel, td);
									case 'InternalLink':
										var isDoc = dataKind.a;
										var url = dataKind.b;
										return A2(
											author$project$PageEditor$EditorPlugins$TextBlockPlugin$internalLinkView,
											model.externalMsg,
											{fileExplorer: config.fileExplorer, isDoc: isDoc, logInfo: config.logInfo, pageTreeEditor: config.pageTreeEditor, selectorOpen: model.internalUrlSelectorOpen, td: td, url: url, zone: config.zone});
									case 'ExternalLink':
										var url = dataKind.a;
										return A3(author$project$PageEditor$EditorPlugins$TextBlockPlugin$externalLinkView, model.externalMsg, url, td);
									default:
										return A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$inlineStyleView, model, td);
								}
							}
						}()
						]))
				]));
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$newsEditorView = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$width(
						mdgriffith$elm_ui$Element$px(675))
					]),
				_Utils_ap(
					model.internalUrlSelectorOpen ? _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Events$onClick(
							model.externalMsg(author$project$PageEditor$EditorPlugins$TextBlockPlugin$InternalUrlSelectorClickOff))
						]) : _List_Nil,
					(!_Utils_eq(model.colorPickerOpen, elm$core$Maybe$Nothing)) ? _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Events$onClick(
							model.externalMsg(author$project$PageEditor$EditorPlugins$TextBlockPlugin$ColorPickerClickOff))
						]) : _List_Nil)),
			_List_fromArray(
				[
					A3(author$project$PageEditor$EditorPlugins$TextBlockPlugin$interfaceView, config, true, model),
					A2(
					mdgriffith$elm_ui$Element$map,
					model.externalMsg,
					A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(30)
							]),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$alignTop,
										mdgriffith$elm_ui$Element$spacing(20)
									]),
								_List_fromArray(
									[
										A4(
										author$project$PageEditor$EditorPlugins$TextBlockPlugin$customTextArea,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
											]),
										model.setSelection,
										300,
										model.rawInput)
									]))
							])))
				]));
	});
var author$project$Document$DocumentViews$DocumentView$idStyle = F2(
	function (_n0, _n1) {
		var customStyles = _n0.customStyles;
		var uid = _n1.uid;
		var docStyleId = _n1.docStyleId;
		var htmlId = _n1.htmlId;
		var classes = _n1.classes;
		return _Utils_ap(
			A2(
				elm$core$Maybe$withDefault,
				_List_Nil,
				A2(
					elm$core$Maybe$andThen,
					function (id) {
						return A2(elm$core$Dict$get, id, customStyles.idNbrs);
					},
					docStyleId)),
			_Utils_ap(
				A2(
					elm$core$Maybe$withDefault,
					_List_Nil,
					A2(
						elm$core$Maybe$map,
						function (hid) {
							return _List_fromArray(
								[
									mdgriffith$elm_ui$Element$htmlAttribute(
									elm$html$Html$Attributes$id(hid))
								]);
						},
						htmlId)),
				elm$core$List$concat(
					A2(
						elm$core$List$filterMap,
						function (c) {
							return A2(elm$core$Dict$get, c, customStyles.classes);
						},
						elm$core$Set$toList(classes)))));
	});
var author$project$Document$Document$toSeColor = function (_n0) {
	var r = _n0.a;
	var g = _n0.b;
	var b = _n0.c;
	return A3(mdgriffith$elm_ui$Element$rgb, r, g, b);
};
var mdgriffith$elm_ui$Element$BigDesktop = {$: 'BigDesktop'};
var mdgriffith$elm_ui$Element$Desktop = {$: 'Desktop'};
var mdgriffith$elm_ui$Element$Landscape = {$: 'Landscape'};
var mdgriffith$elm_ui$Element$Phone = {$: 'Phone'};
var mdgriffith$elm_ui$Element$Portrait = {$: 'Portrait'};
var mdgriffith$elm_ui$Element$Tablet = {$: 'Tablet'};
var mdgriffith$elm_ui$Element$classifyDevice = function (window) {
	return {
		_class: (window.width <= 600) ? mdgriffith$elm_ui$Element$Phone : (((window.width > 600) && (window.width <= 1200)) ? mdgriffith$elm_ui$Element$Tablet : (((window.width > 1200) && (window.width <= 1800)) ? mdgriffith$elm_ui$Element$Desktop : mdgriffith$elm_ui$Element$BigDesktop)),
		orientation: (_Utils_cmp(window.width, window.height) < 0) ? mdgriffith$elm_ui$Element$Portrait : mdgriffith$elm_ui$Element$Landscape
	};
};
var author$project$Document$DocumentViews$StyleSheets$getDevice = function (config) {
	if (config.editMode) {
		var _n0 = config.previewMode;
		switch (_n0.$) {
			case 'PreviewBigScreen':
				return {_class: mdgriffith$elm_ui$Element$BigDesktop, orientation: mdgriffith$elm_ui$Element$Landscape};
			case 'PreviewScreen':
				return {_class: mdgriffith$elm_ui$Element$Desktop, orientation: mdgriffith$elm_ui$Element$Landscape};
			case 'PreviewTablet':
				return {_class: mdgriffith$elm_ui$Element$Tablet, orientation: mdgriffith$elm_ui$Element$Portrait};
			default:
				return {_class: mdgriffith$elm_ui$Element$Phone, orientation: mdgriffith$elm_ui$Element$Portrait};
		}
	} else {
		return mdgriffith$elm_ui$Element$classifyDevice(
			{height: config.height, width: config.width});
	}
};
var elm$html$Html$Events$onDoubleClick = function (msg) {
	return A2(
		elm$html$Html$Events$on,
		'dblclick',
		elm$json$Json$Decode$succeed(msg));
};
var mdgriffith$elm_ui$Element$Events$onDoubleClick = A2(elm$core$Basics$composeL, mdgriffith$elm_ui$Internal$Model$Attr, elm$html$Html$Events$onDoubleClick);
var mdgriffith$elm_ui$Element$Font$alignLeft = A2(mdgriffith$elm_ui$Internal$Model$Class, mdgriffith$elm_ui$Internal$Flag$fontAlignment, mdgriffith$elm_ui$Internal$Style$classes.textLeft);
var mdgriffith$elm_ui$Element$Font$alignRight = A2(mdgriffith$elm_ui$Internal$Model$Class, mdgriffith$elm_ui$Internal$Flag$fontAlignment, mdgriffith$elm_ui$Internal$Style$classes.textRight);
var mdgriffith$elm_ui$Element$Font$justify = A2(mdgriffith$elm_ui$Internal$Model$Class, mdgriffith$elm_ui$Internal$Flag$fontAlignment, mdgriffith$elm_ui$Internal$Style$classes.textJustify);
var author$project$Document$DocumentViews$DocumentView$renderAttrs = F2(
	function (config, attrs) {
		var device = author$project$Document$DocumentViews$StyleSheets$getDevice(config);
		var renderAttr = function (attr) {
			switch (attr.$) {
				case 'PaddingEach':
					var pad = attr.a;
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$paddingEach(pad)
						]);
				case 'SpacingXY':
					var spcX = attr.a;
					var spcY = attr.b;
					return _List_fromArray(
						[
							A2(mdgriffith$elm_ui$Element$spacingXY, spcX, spcY)
						]);
				case 'AlignRight':
					return (_Utils_eq(device._class, mdgriffith$elm_ui$Element$Phone) || _Utils_eq(device._class, mdgriffith$elm_ui$Element$Tablet)) ? _List_fromArray(
						[mdgriffith$elm_ui$Element$centerX]) : _Utils_ap(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$alignRight,
								mdgriffith$elm_ui$Element$paddingEach(
								{bottom: 0, left: 15, right: 0, top: 0})
							]),
						config.editMode ? _List_fromArray(
							[
								mdgriffith$elm_ui$Element$htmlAttribute(
								A2(elm$html$Html$Attributes$style, 'z-index', '1'))
							]) : _List_Nil);
				case 'AlignLeft':
					return (_Utils_eq(device._class, mdgriffith$elm_ui$Element$Phone) || _Utils_eq(device._class, mdgriffith$elm_ui$Element$Tablet)) ? _List_fromArray(
						[mdgriffith$elm_ui$Element$centerX]) : _Utils_ap(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$alignLeft,
								mdgriffith$elm_ui$Element$paddingEach(
								{bottom: 0, left: 0, right: 15, top: 0})
							]),
						config.editMode ? _List_fromArray(
							[
								mdgriffith$elm_ui$Element$htmlAttribute(
								A2(elm$html$Html$Attributes$style, 'z-index', '1'))
							]) : _List_Nil);
				case 'Pointer':
					return _List_fromArray(
						[mdgriffith$elm_ui$Element$pointer]);
				case 'BackgroundColor':
					var color = attr.a;
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Background$color(
							author$project$Document$Document$toSeColor(color))
						]);
				case 'Width':
					var n = attr.a;
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(
							mdgriffith$elm_ui$Element$px(n))
						]);
				case 'Height':
					var n = attr.a;
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$height(
							mdgriffith$elm_ui$Element$px(n))
						]);
				case 'WidthShrink':
					var _n1 = device._class;
					switch (_n1.$) {
						case 'Phone':
							return _List_Nil;
						case 'Tablet':
							return _List_Nil;
						default:
							return _List_fromArray(
								[
									mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$shrink)
								]);
					}
				case 'WidthFill':
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
						]);
				case 'FillPortion':
					var n = attr.a;
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(
							mdgriffith$elm_ui$Element$fillPortion(n))
						]);
				case 'Border':
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Border$color(
							A3(mdgriffith$elm_ui$Element$rgb, 127, 127, 127)),
							mdgriffith$elm_ui$Element$Border$width(1),
							mdgriffith$elm_ui$Element$Border$solid
						]);
				case 'FontColor':
					var color = attr.a;
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Font$color(
							author$project$Document$Document$toSeColor(color))
						]);
				case 'Font':
					var s = attr.a;
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Font$family(
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Font$typeface(s)
								]))
						]);
				case 'FontAlignRight':
					return _List_fromArray(
						[mdgriffith$elm_ui$Element$Font$alignRight]);
				case 'FontAlignLeft':
					return _List_fromArray(
						[mdgriffith$elm_ui$Element$Font$alignLeft]);
				case 'FontSize':
					var n = attr.a;
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Font$size(n)
						]);
				case 'Center':
					return _List_fromArray(
						[mdgriffith$elm_ui$Element$Font$center]);
				case 'Justify':
					return _List_fromArray(
						[mdgriffith$elm_ui$Element$Font$justify]);
				case 'Bold':
					return _List_fromArray(
						[mdgriffith$elm_ui$Element$Font$bold]);
				case 'Italic':
					return _List_fromArray(
						[mdgriffith$elm_ui$Element$Font$italic]);
				default:
					var uid = attr.a;
					var zipperEventHandler = attr.b;
					var _n2 = config.zipperHandlers;
					if (_n2.$ === 'Nothing') {
						return _List_Nil;
					} else {
						var handlers = _n2.a;
						switch (zipperEventHandler.$) {
							case 'OnContainerClick':
								return _List_fromArray(
									[
										mdgriffith$elm_ui$Element$Events$onClick(
										handlers.containerClickHandler(uid))
									]);
							case 'OnContainerDblClick':
								return _List_fromArray(
									[
										mdgriffith$elm_ui$Element$Events$onDoubleClick(
										handlers.containerDblClickHandler(uid))
									]);
							case 'OnContainerMouseOver':
								return _List_fromArray(
									[
										mdgriffith$elm_ui$Element$mouseOver(
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$Background$color(
												A4(mdgriffith$elm_ui$Element$rgba, 0.8, 0.8, 0.8, 0.5))
											])),
										mdgriffith$elm_ui$Element$pointer,
										mdgriffith$elm_ui$Element$htmlAttribute(
										A2(elm$html$Html$Attributes$style, 'transition', '0.3s'))
									]);
							case 'OnCellClick':
								return _List_fromArray(
									[
										mdgriffith$elm_ui$Element$pointer,
										mdgriffith$elm_ui$Element$mouseOver(
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$Background$color(
												A4(mdgriffith$elm_ui$Element$rgba, 0.8, 0.8, 0.8, 0.5))
											])),
										mdgriffith$elm_ui$Element$htmlAttribute(
										A2(elm$html$Html$Attributes$style, 'transition', '0.3s')),
										mdgriffith$elm_ui$Element$Events$onDoubleClick(handlers.cellClick)
									]);
							default:
								return _List_fromArray(
									[
										mdgriffith$elm_ui$Element$Events$onClick(
										handlers.neighbourClickHandler(uid)),
										mdgriffith$elm_ui$Element$pointer
									]);
						}
					}
			}
		};
		return A2(elm$core$List$concatMap, renderAttr, attrs);
	});
var author$project$Document$DocumentViews$StyleSheets$docMaxWidth = F3(
	function (_n0, editMode, previewMode) {
		var winWidth = _n0.a;
		var winHeight = _n0.b;
		var device = mdgriffith$elm_ui$Element$classifyDevice(
			{height: winHeight, width: winWidth});
		if (editMode) {
			switch (previewMode.$) {
				case 'PreviewBigScreen':
					return 1000;
				case 'PreviewTablet':
					return 768;
				case 'PreviewPhone':
					return 320;
				default:
					return 950;
			}
		} else {
			if (_Utils_eq(device._class, mdgriffith$elm_ui$Element$BigDesktop)) {
				return 1000;
			} else {
				return 1000;
			}
		}
	});
var author$project$Document$DocumentViews$StyleSheets$headingStyles = F3(
	function (season, _n0, editMode) {
		var winWidth = _n0.a;
		var winHeight = _n0.b;
		var seasonAttr = function () {
			switch (season.$) {
				case 'Spring':
					return elm$core$Dict$fromList(
						_List_fromArray(
							[
								_Utils_Tuple2(
								1,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Background$color(
										A4(mdgriffith$elm_ui$Element$rgba255, 102, 153, 140, 1)),
										mdgriffith$elm_ui$Element$Font$color(
										A4(mdgriffith$elm_ui$Element$rgba255, 240, 248, 255, 1))
									])),
								_Utils_Tuple2(
								2,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Background$color(
										A4(mdgriffith$elm_ui$Element$rgba255, 102, 153, 140, 1)),
										mdgriffith$elm_ui$Element$Font$color(
										A4(mdgriffith$elm_ui$Element$rgba255, 240, 248, 255, 1))
									])),
								_Utils_Tuple2(3, _List_Nil)
							]));
				case 'Summer':
					return elm$core$Dict$fromList(
						_List_fromArray(
							[
								_Utils_Tuple2(
								1,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Background$color(
										A4(mdgriffith$elm_ui$Element$rgba255, 186, 172, 145, 1)),
										mdgriffith$elm_ui$Element$Font$color(
										A4(mdgriffith$elm_ui$Element$rgba255, 0, 0, 0, 1))
									])),
								_Utils_Tuple2(
								2,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Background$color(
										A4(mdgriffith$elm_ui$Element$rgba255, 255, 193, 58, 1)),
										mdgriffith$elm_ui$Element$Font$color(
										A4(mdgriffith$elm_ui$Element$rgba255, 0, 0, 0, 1))
									])),
								_Utils_Tuple2(3, _List_Nil)
							]));
				case 'Autumn':
					return elm$core$Dict$fromList(
						_List_fromArray(
							[
								_Utils_Tuple2(
								1,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Background$color(
										A4(mdgriffith$elm_ui$Element$rgba255, 205, 133, 63, 1)),
										mdgriffith$elm_ui$Element$Font$color(
										A4(mdgriffith$elm_ui$Element$rgba255, 67, 46, 42, 1))
									])),
								_Utils_Tuple2(
								2,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Background$color(
										A4(mdgriffith$elm_ui$Element$rgba255, 205, 133, 63, 1)),
										mdgriffith$elm_ui$Element$Font$color(
										A4(mdgriffith$elm_ui$Element$rgba255, 67, 46, 42, 1))
									])),
								_Utils_Tuple2(3, _List_Nil)
							]));
				default:
					return elm$core$Dict$fromList(
						_List_fromArray(
							[
								_Utils_Tuple2(
								1,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Background$color(
										A4(mdgriffith$elm_ui$Element$rgba255, 51, 51, 102, 1)),
										mdgriffith$elm_ui$Element$Font$color(
										A4(mdgriffith$elm_ui$Element$rgba255, 240, 248, 255, 1))
									])),
								_Utils_Tuple2(
								2,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Background$color(
										A4(mdgriffith$elm_ui$Element$rgba255, 51, 51, 102, 1)),
										mdgriffith$elm_ui$Element$Font$color(
										A4(mdgriffith$elm_ui$Element$rgba255, 240, 248, 255, 1))
									])),
								_Utils_Tuple2(3, _List_Nil)
							]));
			}
		}();
		var commonAttr = elm$core$Dict$fromList(
			_List_fromArray(
				[
					_Utils_Tuple2(
					1,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Font$size(18),
							mdgriffith$elm_ui$Element$Font$center,
							mdgriffith$elm_ui$Element$Font$bold,
							A2(mdgriffith$elm_ui$Element$paddingXY, 0, 10),
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
						])),
					_Utils_Tuple2(
					2,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Font$size(16),
							mdgriffith$elm_ui$Element$Font$center,
							mdgriffith$elm_ui$Element$Font$bold,
							A2(mdgriffith$elm_ui$Element$paddingXY, 0, 2),
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
						])),
					_Utils_Tuple2(
					3,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Font$size(16),
							mdgriffith$elm_ui$Element$Font$color(
							A3(mdgriffith$elm_ui$Element$rgb, 0, 0.5, 0)),
							mdgriffith$elm_ui$Element$Font$bold
						]))
				]));
		return A3(
			elm$core$Dict$foldr,
			F3(
				function (k, v, acc) {
					return A3(
						elm$core$Dict$update,
						k,
						function (mbSeasonAttr) {
							if (mbSeasonAttr.$ === 'Just') {
								var attrs = mbSeasonAttr.a;
								return elm$core$Maybe$Just(
									_Utils_ap(v, attrs));
							} else {
								return elm$core$Maybe$Just(v);
							}
						},
						acc);
				}),
			commonAttr,
			seasonAttr);
	});
var author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet = function (config) {
	return {
		blocLinkStyle: _List_Nil,
		columnStyle: _List_fromArray(
			[
				mdgriffith$elm_ui$Element$spacing(15),
				mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
			]),
		customStyles: {
			classes: elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'colImg',
						_List_fromArray(
							[mdgriffith$elm_ui$Element$centerX])),
						_Utils_Tuple2('rowImg', _List_Nil),
						_Utils_Tuple2(
						'selected',
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Border$shadow(
								{
									blur: 10,
									color: A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
									offset: _Utils_Tuple2(4, 4),
									size: 5
								})
							]))
					])),
			idNbrs: elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'root',
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$padding(20),
								mdgriffith$elm_ui$Element$spacing(15),
								mdgriffith$elm_ui$Element$Font$family(
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$typeface('Arial')
									])),
								mdgriffith$elm_ui$Element$Font$size(16),
								mdgriffith$elm_ui$Element$width(
								A2(
									mdgriffith$elm_ui$Element$maximum,
									A3(
										author$project$Document$DocumentViews$StyleSheets$docMaxWidth,
										_Utils_Tuple2(config.width, config.height),
										config.editMode,
										config.previewMode),
									mdgriffith$elm_ui$Element$fill)),
								mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
								mdgriffith$elm_ui$Element$centerX
							]))
					]))
		},
		headingStyle: A3(
			author$project$Document$DocumentViews$StyleSheets$headingStyles,
			config.season,
			_Utils_Tuple2(config.width, config.height),
			config.editMode),
		imageStyle: _List_Nil,
		linkStyle: _List_fromArray(
			[
				mdgriffith$elm_ui$Element$Font$color(
				A3(mdgriffith$elm_ui$Element$rgb, 0, 0.5, 0.5))
			]),
		paragraphStyle: _List_fromArray(
			[
				mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
			]),
		pictureLinksStyle: function () {
			var _n0 = config.season;
			switch (_n0.$) {
				case 'Spring':
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Background$color(
							A3(mdgriffith$elm_ui$Element$rgb255, 41, 80, 0))
						]);
				case 'Summer':
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Background$color(
							A4(mdgriffith$elm_ui$Element$rgba255, 255, 193, 58, 1))
						]);
				case 'Autumn':
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Background$color(
							A3(mdgriffith$elm_ui$Element$rgb255, 255, 211, 37))
						]);
				default:
					return _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Background$color(
							A3(mdgriffith$elm_ui$Element$rgb255, 0, 128, 128))
						]);
			}
		}(),
		respBlocStyle: _List_Nil,
		rowStyle: _List_fromArray(
			[
				mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
				mdgriffith$elm_ui$Element$spacing(15)
			]),
		textColumnStyle: _List_fromArray(
			[
				mdgriffith$elm_ui$Element$spacing(15),
				mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
			]),
		textStyle: _List_Nil
	};
};
var mdgriffith$elm_ui$Element$link = F2(
	function (attrs, _n0) {
		var url = _n0.url;
		var label = _n0.label;
		return A4(
			mdgriffith$elm_ui$Internal$Model$element,
			mdgriffith$elm_ui$Internal$Model$asEl,
			mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				elm$core$List$cons,
				mdgriffith$elm_ui$Internal$Model$Attr(
					elm$html$Html$Attributes$href(url)),
				A2(
					elm$core$List$cons,
					mdgriffith$elm_ui$Internal$Model$Attr(
						elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						elm$core$List$cons,
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$shrink),
						A2(
							elm$core$List$cons,
							mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$shrink),
							A2(
								elm$core$List$cons,
								mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + mdgriffith$elm_ui$Internal$Style$classes.contentCenterY)),
								attrs))))),
			mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var author$project$Document$DocumentViews$DocumentView$renderTextBlockPrimitive = F3(
	function (config, tbAttrs, p) {
		var styleSheet = author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		if (p.$ === 'Text') {
			var attrs = p.a;
			var s = p.b;
			return A2(
				mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					styleSheet.textStyle,
					_Utils_ap(
						A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, tbAttrs),
						A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				mdgriffith$elm_ui$Element$text(s));
		} else {
			var attrs = p.a;
			var targetBlank = p.b.targetBlank;
			var url = p.b.url;
			var label = p.b.label;
			var url_ = targetBlank ? url : A2(
				elm$core$Maybe$withDefault,
				'',
				A2(elm$core$Dict$get, url, config.pageIndex));
			var linkFun = targetBlank ? mdgriffith$elm_ui$Element$newTabLink : mdgriffith$elm_ui$Element$link;
			return config.editMode ? A2(
				mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					styleSheet.linkStyle,
					_Utils_ap(
						A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, tbAttrs),
						A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				mdgriffith$elm_ui$Element$text(label)) : A2(
				linkFun,
				_Utils_ap(
					styleSheet.linkStyle,
					_Utils_ap(
						A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, tbAttrs),
						A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				{
					label: mdgriffith$elm_ui$Element$text(label),
					url: url_
				});
		}
	});
var author$project$Document$DocumentViews$DocumentView$renderLi = F3(
	function (config, tbAttrs, li) {
		return A2(
			mdgriffith$elm_ui$Element$paragraph,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$paddingEach(
						{bottom: 0, left: 20, right: 0, top: 0})
					]),
				A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, tbAttrs)),
			_Utils_ap(
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_Nil,
						mdgriffith$elm_ui$Element$text('•  '))
					]),
				A2(
					elm$core$List$map,
					A2(author$project$Document$DocumentViews$DocumentView$renderTextBlockPrimitive, config, tbAttrs),
					li)));
	});
var mdgriffith$elm_ui$Internal$Model$Heading = function (a) {
	return {$: 'Heading', a: a};
};
var mdgriffith$elm_ui$Element$Region$heading = A2(elm$core$Basics$composeL, mdgriffith$elm_ui$Internal$Model$Describe, mdgriffith$elm_ui$Internal$Model$Heading);
var author$project$Document$DocumentViews$DocumentView$renderTextBlockElement = F4(
	function (config, id, tbAttrs, tbe) {
		var styleSheet = author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		switch (tbe.$) {
			case 'Paragraph':
				var attrs = tbe.a;
				var xs = tbe.b;
				return A2(
					mdgriffith$elm_ui$Element$paragraph,
					_Utils_ap(
						styleSheet.paragraphStyle,
						_Utils_ap(
							A2(author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
							_Utils_ap(
								A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, tbAttrs),
								A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs)))),
					A2(
						elm$core$List$map,
						A2(author$project$Document$DocumentViews$DocumentView$renderTextBlockPrimitive, config, tbAttrs),
						xs));
			case 'UList':
				var attrs = tbe.a;
				var xs = tbe.b;
				return A2(
					mdgriffith$elm_ui$Element$paragraph,
					_Utils_ap(
						A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, tbAttrs),
						_Utils_ap(
							A2(author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
							_Utils_ap(
								A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs),
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(10)
									])))),
					A2(
						elm$core$List$map,
						A2(author$project$Document$DocumentViews$DocumentView$renderLi, config, tbAttrs),
						xs));
			case 'Heading':
				var attrs = tbe.a;
				var _n1 = tbe.b;
				var level = _n1.a;
				var s = _n1.b;
				var headingStyle = A2(
					elm$core$Maybe$withDefault,
					_List_Nil,
					A2(elm$core$Dict$get, level, styleSheet.headingStyle));
				return A2(
					mdgriffith$elm_ui$Element$paragraph,
					_Utils_ap(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Region$heading(level)
							]),
						_Utils_ap(
							headingStyle,
							_Utils_ap(
								A2(author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
								_Utils_ap(
									A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, tbAttrs),
									A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))))),
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$text(s)
						]));
			default:
				var p = tbe.a;
				return A2(
					mdgriffith$elm_ui$Element$el,
					A2(author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
					A3(author$project$Document$DocumentViews$DocumentView$renderTextBlockPrimitive, config, tbAttrs, p));
		}
	});
var author$project$Document$DocumentViews$DocumentView$renderTextBlock = F4(
	function (config, id, attrs, xs) {
		return A2(
			elm$core$List$map,
			A3(author$project$Document$DocumentViews$DocumentView$renderTextBlockElement, config, id, attrs),
			xs);
	});
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$textBlockPreview = F2(
	function (model, config) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$width(
					A2(
						mdgriffith$elm_ui$Element$minimum,
						500,
						A2(mdgriffith$elm_ui$Element$maximum, 700, mdgriffith$elm_ui$Element$fill))),
					mdgriffith$elm_ui$Element$height(
					A2(mdgriffith$elm_ui$Element$maximum, 500, mdgriffith$elm_ui$Element$fill)),
					mdgriffith$elm_ui$Element$scrollbarY,
					mdgriffith$elm_ui$Element$spacing(20),
					mdgriffith$elm_ui$Element$alignTop,
					mdgriffith$elm_ui$Element$Border$shadow(
					{
						blur: 10,
						color: A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.16),
						offset: _Utils_Tuple2(4, 4),
						size: 5
					}),
					mdgriffith$elm_ui$Element$padding(15)
				]),
			A4(
				author$project$Document$DocumentViews$DocumentView$renderTextBlock,
				config,
				{classes: elm$core$Set$empty, docStyleId: elm$core$Maybe$Nothing, htmlId: elm$core$Maybe$Nothing, uid: -1},
				model.wholeTextBlocAttr,
				model.output));
	});
var mdgriffith$elm_ui$Element$spaceEvenly = A2(mdgriffith$elm_ui$Internal$Model$Class, mdgriffith$elm_ui$Internal$Flag$spacing, mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly);
var author$project$NewsEditor$NewsEditor$newsEditorView = F2(
	function (config, model) {
		var textBlockConfig = {fileExplorer: config.fileExplorer, logInfo: config.logInfo, maxHeight: 400, pageTreeEditor: config.pageTreeEditor, zone: config.zone};
		return A2(
			mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				author$project$NewsEditor$NewsEditor$containerStyle,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					])),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$row,
							_Utils_ap(
								author$project$NewsEditor$NewsEditor$itemStyle,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(705))
									])),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$below(
											(!model.picPickerOpen) ? mdgriffith$elm_ui$Element$none : A2(
												mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														mdgriffith$elm_ui$Element$Background$color(
														A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
														mdgriffith$elm_ui$Element$width(
														A2(
															mdgriffith$elm_ui$Element$minimum,
															850,
															A2(mdgriffith$elm_ui$Element$maximum, 920, mdgriffith$elm_ui$Element$shrink))),
														mdgriffith$elm_ui$Element$Border$shadow(
														{
															blur: 10,
															color: A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
															offset: _Utils_Tuple2(4, 4),
															size: 5
														})
													]),
												A2(author$project$NewsEditor$NewsEditor$visualPickerView, config, model)))
										]),
									mdgriffith$elm_ui$Element$none),
									A2(
									mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											A2(
											mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[mdgriffith$elm_ui$Element$Font$bold]),
											mdgriffith$elm_ui$Element$text('Titre actualité')),
											A2(
											mdgriffith$elm_ui$Element$Input$text,
											_Utils_ap(
												author$project$Internals$CommonStyleHelpers$textInputStyle,
												_List_fromArray(
													[
														mdgriffith$elm_ui$Element$width(
														mdgriffith$elm_ui$Element$px(500)),
														mdgriffith$elm_ui$Element$spacing(0)
													])),
											{
												label: mdgriffith$elm_ui$Element$Input$labelHidden(''),
												onChange: A2(elm$core$Basics$composeL, model.externalMsg, author$project$NewsEditor$NewsEditor$SetTitle),
												placeholder: elm$core$Maybe$Nothing,
												text: A2(
													elm$core$Maybe$withDefault,
													'',
													A2(
														elm$core$Maybe$map,
														function ($) {
															return $.title;
														},
														model.buffer))
											})
										])),
									A2(
									mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$alignRight,
											mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											A2(
											mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[mdgriffith$elm_ui$Element$Font$bold]),
											mdgriffith$elm_ui$Element$text('Limite validité')),
											A2(
											mdgriffith$elm_ui$Element$Input$text,
											_Utils_ap(
												author$project$Internals$CommonStyleHelpers$textInputStyle,
												_List_fromArray(
													[
														mdgriffith$elm_ui$Element$width(
														mdgriffith$elm_ui$Element$px(150)),
														(!_Utils_eq(
														A2(
															elm$core$Maybe$map,
															function ($) {
																return $.expiry;
															},
															model.buffer),
														elm$core$Maybe$Just(
															elm$time$Time$millisToPosix(0)))) ? mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$green4) : mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$red4)
													])),
											{
												label: mdgriffith$elm_ui$Element$Input$labelHidden(''),
												onChange: A2(elm$core$Basics$composeL, model.externalMsg, author$project$NewsEditor$NewsEditor$SetExpiry),
												placeholder: elm$core$Maybe$Just(
													A2(
														mdgriffith$elm_ui$Element$Input$placeholder,
														_List_fromArray(
															[mdgriffith$elm_ui$Element$clip]),
														mdgriffith$elm_ui$Element$text('jj/mm/aaaa'))),
												text: function () {
													var _n0 = A2(
														elm$core$Maybe$map,
														function ($) {
															return $.expiry;
														},
														model.buffer);
													if (_n0.$ === 'Nothing') {
														return model.expiryBuffer;
													} else {
														var t = _n0.a;
														return _Utils_eq(
															t,
															elm$time$Time$millisToPosix(0)) ? model.expiryBuffer : A2(author$project$Internals$CommonHelpers$dateToStr, config.zone, t);
													}
												}()
											})
										]))
								])),
							A2(
							mdgriffith$elm_ui$Element$column,
							_Utils_ap(
								author$project$NewsEditor$NewsEditor$itemStyle,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(10)
									])),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
										]),
									_List_fromArray(
										[
											A2(
											mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[mdgriffith$elm_ui$Element$Font$bold]),
											mdgriffith$elm_ui$Element$text('Contenu actualité')),
											A2(
											mdgriffith$elm_ui$Element$Input$button,
											_Utils_ap(
												author$project$Internals$CommonStyleHelpers$buttonStyle(true),
												_List_fromArray(
													[mdgriffith$elm_ui$Element$alignRight])),
											{
												label: model.contentPreview ? mdgriffith$elm_ui$Element$text('Edition') : mdgriffith$elm_ui$Element$text('Aperçu'),
												onPress: elm$core$Maybe$Just(
													model.externalMsg(author$project$NewsEditor$NewsEditor$ToogleContentPreview))
											})
										])),
									model.contentPreview ? A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$width(
											mdgriffith$elm_ui$Element$px(675)),
											mdgriffith$elm_ui$Element$height(
											mdgriffith$elm_ui$Element$px(396))
										]),
									A2(
										author$project$PageEditor$EditorPlugins$TextBlockPlugin$textBlockPreview,
										model.textBlockPlugin,
										author$project$NewsEditor$NewsEditor$renderConfig(model.externalMsg))) : A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$newsEditorView, textBlockConfig, model.textBlockPlugin)
								]))
						])),
					A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15),
							mdgriffith$elm_ui$Element$alignTop,
							mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(author$project$NewsEditor$NewsEditor$setVisual, config, model),
							A2(
							mdgriffith$elm_ui$Element$row,
							_Utils_ap(
								author$project$NewsEditor$NewsEditor$itemStyle,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spaceEvenly,
										mdgriffith$elm_ui$Element$alignBottom,
										mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
									])),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(
										A2(
											elm$core$Maybe$withDefault,
											false,
											A2(elm$core$Maybe$map, author$project$NewsEditor$NewsEditor$validNews, model.buffer))),
									{
										label: mdgriffith$elm_ui$Element$text('Sauvegarder'),
										onPress: function () {
											var _n1 = A2(elm$core$Maybe$map, author$project$NewsEditor$NewsEditor$validNews, model.buffer);
											if ((_n1.$ === 'Just') && _n1.a) {
												return elm$core$Maybe$Just(
													model.externalMsg(author$project$NewsEditor$NewsEditor$SaveNews));
											} else {
												return elm$core$Maybe$Nothing;
											}
										}()
									}),
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(true),
									{
										label: mdgriffith$elm_ui$Element$text('Retour'),
										onPress: elm$core$Maybe$Just(
											model.externalMsg(author$project$NewsEditor$NewsEditor$ToNewsSelector))
									})
								]))
						]))
				]));
	});
var author$project$NewsEditor$NewsEditor$EditContent = {$: 'EditContent'};
var author$project$NewsEditor$NewsEditor$RemoveNews = {$: 'RemoveNews'};
var author$project$Internals$Icons$checkSquare = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'check-square',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$polyline,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$points('9 11 12 14 22 4')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$path,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$d('M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11')
					]),
				_List_Nil)
			]));
};
var author$project$Internals$Icons$square = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'square',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$rect,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x('3'),
						elm$svg$Svg$Attributes$y('3'),
						elm$svg$Svg$Attributes$width('18'),
						elm$svg$Svg$Attributes$height('18'),
						elm$svg$Svg$Attributes$rx('2'),
						elm$svg$Svg$Attributes$ry('2')
					]),
				_List_Nil)
			]));
};
var author$project$NewsEditor$NewsEditor$ToogleNews = function (a) {
	return {$: 'ToogleNews', a: a};
};
var mdgriffith$elm_ui$Element$Keyed$row = F2(
	function (attrs, children) {
		return A4(
			mdgriffith$elm_ui$Internal$Model$element,
			mdgriffith$elm_ui$Internal$Model$asRow,
			mdgriffith$elm_ui$Internal$Model$div,
			A2(
				elm$core$List$cons,
				mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.contentLeft),
				A2(
					elm$core$List$cons,
					mdgriffith$elm_ui$Internal$Model$htmlClass(mdgriffith$elm_ui$Internal$Style$classes.contentCenterY),
					A2(
						elm$core$List$cons,
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						attrs))),
			mdgriffith$elm_ui$Internal$Model$Keyed(children));
	});
var author$project$NewsEditor$NewsEditor$checkView = F7(
	function (isChecked, isBuffer, newsId, title, zone, date, expiry) {
		return A2(
			mdgriffith$elm_ui$Element$Keyed$row,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					A2(mdgriffith$elm_ui$Element$paddingXY, 5, 5),
					mdgriffith$elm_ui$Element$pointer,
					mdgriffith$elm_ui$Element$Events$onClick(
					author$project$NewsEditor$NewsEditor$ToogleNews(newsId)),
					mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							isBuffer ? mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey4) : mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey5)
						])),
					isBuffer ? mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey4) : author$project$Internals$CommonStyleHelpers$noAttr,
					mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					_Utils_Tuple2(
					title,
					A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(10)
							]),
						_List_fromArray(
							[
								isChecked ? A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
									]),
								mdgriffith$elm_ui$Element$html(
									author$project$Internals$Icons$checkSquare(18))) : A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
									]),
								mdgriffith$elm_ui$Element$html(
									author$project$Internals$Icons$square(18))),
								A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey2)
									]),
								mdgriffith$elm_ui$Element$text(title))
							]))),
					_Utils_Tuple2(
					title,
					A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$alignRight,
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(150))
							]),
						mdgriffith$elm_ui$Element$text(
							A2(author$project$Internals$CommonHelpers$dateToStr, zone, date)))),
					_Utils_Tuple2(
					title,
					A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$alignRight,
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(150))
							]),
						mdgriffith$elm_ui$Element$text(
							A2(author$project$Internals$CommonHelpers$dateToStr, zone, expiry))))
				]));
	});
var elm$core$Set$isEmpty = function (_n0) {
	var dict = _n0.a;
	return elm$core$Dict$isEmpty(dict);
};
var elm$core$Set$size = function (_n0) {
	var dict = _n0.a;
	return elm$core$Dict$size(dict);
};
var author$project$NewsEditor$NewsEditor$newsSelectorView = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				author$project$NewsEditor$NewsEditor$containerStyle,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					])),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						author$project$NewsEditor$NewsEditor$itemStyle,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15),
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(940))
							])),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								_Utils_eq(model.buffer, elm$core$Maybe$Nothing)),
							{
								label: mdgriffith$elm_ui$Element$text('Créer actualité'),
								onPress: function () {
									var _n0 = model.buffer;
									if (_n0.$ === 'Nothing') {
										return elm$core$Maybe$Just(author$project$NewsEditor$NewsEditor$EditContent);
									} else {
										return elm$core$Maybe$Nothing;
									}
								}()
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(model.buffer, elm$core$Maybe$Nothing)),
							{
								label: mdgriffith$elm_ui$Element$text('Modifier actualité'),
								onPress: A2(
									elm$core$Maybe$map,
									elm$core$Basics$always(author$project$NewsEditor$NewsEditor$EditContent),
									model.buffer)
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								!elm$core$Set$isEmpty(model.checkedNews)),
							{
								label: mdgriffith$elm_ui$Element$text(
									function (n) {
										return (n > 1) ? 'Supprimer actualités' : 'Supprimer actualité';
									}(
										elm$core$Set$size(model.checkedNews))),
								onPress: (!elm$core$Set$isEmpty(model.checkedNews)) ? elm$core$Maybe$Just(author$project$NewsEditor$NewsEditor$RemoveNews) : elm$core$Maybe$Nothing
							})
						])),
					A2(
					mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						author$project$NewsEditor$NewsEditor$itemStyle,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(10),
								mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
							])),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
									mdgriffith$elm_ui$Element$spacing(15),
									A2(mdgriffith$elm_ui$Element$paddingXY, 10, 0)
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[mdgriffith$elm_ui$Element$Font$bold]),
									mdgriffith$elm_ui$Element$text('Titre actualité')),
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$Font$bold,
											mdgriffith$elm_ui$Element$alignRight,
											mdgriffith$elm_ui$Element$width(
											mdgriffith$elm_ui$Element$px(150))
										]),
									mdgriffith$elm_ui$Element$text('Date de création')),
									A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$Font$bold,
											mdgriffith$elm_ui$Element$alignRight,
											mdgriffith$elm_ui$Element$width(
											mdgriffith$elm_ui$Element$px(163))
										]),
									mdgriffith$elm_ui$Element$text('Limite de validité'))
								])),
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Border$width(2),
									mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
									mdgriffith$elm_ui$Element$width(
									A2(mdgriffith$elm_ui$Element$minimum, 800, mdgriffith$elm_ui$Element$fill)),
									mdgriffith$elm_ui$Element$height(
									mdgriffith$elm_ui$Element$px(435)),
									mdgriffith$elm_ui$Element$scrollbars
								]),
							A2(
								elm$core$List$map,
								function (_n1) {
									var id = _n1.a;
									var n = _n1.b;
									return A7(
										author$project$NewsEditor$NewsEditor$checkView,
										A2(elm$core$Set$member, id, model.checkedNews),
										_Utils_eq(
											A2(
												elm$core$Maybe$map,
												function (b) {
													return _Utils_eq(
														TSFoster$elm_uuid$UUID$canonical(b.uuid),
														id);
												},
												model.buffer),
											elm$core$Maybe$Just(true)),
										id,
										n.title,
										config.zone,
										n.date,
										n.expiry);
								},
								elm$core$Dict$toList(model.news)))
						]))
				]));
	});
var author$project$NewsEditor$NewsEditor$view = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$padding(15),
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$htmlAttribute(
					A2(elm$html$Html$Attributes$style, 'flex-shrink', '1')),
					mdgriffith$elm_ui$Element$clip,
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$height(
					A2(mdgriffith$elm_ui$Element$maximum, config.maxHeight, mdgriffith$elm_ui$Element$fill)),
					mdgriffith$elm_ui$Element$scrollbarY
				]),
			_List_fromArray(
				[
					function () {
					var _n0 = model.newsEditorMode;
					if (_n0.$ === 'NewsSelector') {
						return A2(
							mdgriffith$elm_ui$Element$map,
							model.externalMsg,
							A2(author$project$NewsEditor$NewsEditor$newsSelectorView, config, model));
					} else {
						return A2(author$project$NewsEditor$NewsEditor$newsEditorView, config, model);
					}
				}()
				]));
	});
var author$project$Document$Document$isContainer = function (document) {
	if (document.$ === 'Container') {
		return true;
	} else {
		return false;
	}
};
var author$project$NewsEditor$NewsEditor$getNewsDict = function (model) {
	return model.news;
};
var author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$LastChild = function (a) {
	return {$: 'LastChild', a: a};
};
var author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$NotLastChild = function (a) {
	return {$: 'NotLastChild', a: a};
};
var author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$cellContentToString = function (lc) {
	switch (lc.$) {
		case 'Image':
			return 'Image';
		case 'Video':
			return 'Video';
		case 'Table':
			return 'Tableau';
		case 'CustomElement':
			var s = lc.a;
			return 'Element spécial: ' + s;
		case 'BlockLinks':
			return 'Zone blocs de liens';
		case 'Fiches':
			return 'Fiches';
		case 'NewsBlock':
			return 'Zone actualités';
		case 'TextBlock':
			var xs = lc.a;
			return 'Zone de texte';
		case 'CalendarWidget':
			return 'Mini calendrier';
		case 'Calendar':
			return 'Calendrier';
		case 'WeatherWidget':
			return 'Météo';
		case 'DronePanorama':
			return 'Panoramique aérien';
		case 'PictureLinks':
			return 'Bandeau images liens';
		case 'Gallery':
			return 'Galerie photothèque';
		default:
			return 'Cellule vide';
	}
};
var author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$containerLabelToColor = function (cl) {
	switch (cl.$) {
		case 'DocColumn':
			return A4(mdgriffith$elm_ui$Element$rgba, 0, 1, 0, 0.6);
		case 'DocRow':
			return A4(mdgriffith$elm_ui$Element$rgba, 1, 0, 0, 0.6);
		case 'TextColumn':
			return A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 0.6);
		default:
			return A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 1);
	}
};
var author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$containerLabelToString = function (cl) {
	switch (cl.$) {
		case 'DocColumn':
			return 'Colonne';
		case 'DocRow':
			return 'Ligne';
		case 'TextColumn':
			return 'Colonne de texte';
		default:
			return 'Bloc réactif';
	}
};
var author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$prefix = function (offsets) {
	var attrs = function (sel) {
		return _List_fromArray(
			[
				sel ? mdgriffith$elm_ui$Element$Font$color(
				A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1)) : mdgriffith$elm_ui$Element$Font$color(
				A4(mdgriffith$elm_ui$Element$rgba, 0.8, 0.8, 0.8, 1))
			]);
	};
	var helper = F2(
		function (acc, indexes) {
			helper:
			while (true) {
				if (!indexes.b) {
					return _List_fromArray(
						[
							A2(mdgriffith$elm_ui$Element$row, _List_Nil, acc)
						]);
				} else {
					if (indexes.a.$ === 'LastChild') {
						if (!indexes.b.b) {
							var sel = indexes.a.a;
							return _Utils_ap(
								acc,
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										attrs(sel),
										mdgriffith$elm_ui$Element$text(
											A2(elm$core$String$repeat, 3, ' ') + '└─ '))
									]));
						} else {
							var sel = indexes.a.a;
							var xs = indexes.b;
							var $temp$acc = _Utils_ap(
								acc,
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$row,
										attrs(sel),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text(
												A2(elm$core$String$repeat, 3, ' ') + ' ')
											]))
									])),
								$temp$indexes = xs;
							acc = $temp$acc;
							indexes = $temp$indexes;
							continue helper;
						}
					} else {
						if (!indexes.b.b) {
							var sel = indexes.a.a;
							return _Utils_ap(
								acc,
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										attrs(sel),
										mdgriffith$elm_ui$Element$text(
											A2(elm$core$String$repeat, 3, ' ') + '├─ '))
									]));
						} else {
							var sel = indexes.a.a;
							var xs = indexes.b;
							var $temp$acc = _Utils_ap(
								acc,
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										attrs(sel),
										mdgriffith$elm_ui$Element$text(
											A2(elm$core$String$repeat, 3, ' ') + '│'))
									])),
								$temp$indexes = xs;
							acc = $temp$acc;
							indexes = $temp$indexes;
							continue helper;
						}
					}
				}
			}
		});
	return A2(
		helper,
		_List_Nil,
		elm$core$List$reverse(offsets));
};
var author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$docTreeView = F4(
	function (config, offsets, _n0, document) {
		var sContainer = _n0.a;
		var selection = _n0.b;
		var sel = selection || function (i) {
			return _Utils_eq(
				i,
				author$project$Document$Document$getUid(document));
		}(sContainer);
		var labelFontColor = sel ? mdgriffith$elm_ui$Element$Font$color(
			A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 1)) : mdgriffith$elm_ui$Element$Font$color(
			A4(mdgriffith$elm_ui$Element$rgba, 0.8, 0.8, 0.8, 1));
		if (document.$ === 'Container') {
			var containerLabel = document.a.containerLabel;
			var id = document.a.id;
			var attrs = document.a.attrs;
			var xs = document.b;
			var l = elm$core$List$length(xs);
			var _n2 = _Utils_Tuple2(
				A2(elm$core$List$take, l - 1, xs),
				A2(elm$core$List$drop, l - 1, xs));
			var firsts = _n2.a;
			var last = _n2.b;
			return _Utils_ap(
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
							]),
						_Utils_ap(
							author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$prefix(offsets),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$el,
									_Utils_ap(
										_List_fromArray(
											[
												(config.containersColors && sel) ? mdgriffith$elm_ui$Element$Font$color(
												author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$containerLabelToColor(containerLabel)) : labelFontColor
											]),
										config.isActive ? _List_fromArray(
											[
												mdgriffith$elm_ui$Element$Events$onClick(
												config.zipToUidCmd(id.uid)),
												mdgriffith$elm_ui$Element$pointer,
												mdgriffith$elm_ui$Element$mouseOver(
												_List_fromArray(
													[
														mdgriffith$elm_ui$Element$Font$color(
														A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1))
													]))
											]) : _List_Nil),
									mdgriffith$elm_ui$Element$text(
										author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$containerLabelToString(containerLabel)))
								])))
					]),
				_Utils_ap(
					A2(
						elm$core$List$concatMap,
						A3(
							author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$docTreeView,
							config,
							A2(
								elm$core$List$cons,
								author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$NotLastChild(sel),
								offsets),
							_Utils_Tuple2(sContainer, sel)),
						firsts),
					A2(
						elm$core$List$concatMap,
						A3(
							author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$docTreeView,
							config,
							A2(
								elm$core$List$cons,
								author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$LastChild(sel),
								offsets),
							_Utils_Tuple2(sContainer, sel)),
						last)));
		} else {
			var cellContent = document.a.cellContent;
			var id = document.a.id;
			var attrs = document.a.attrs;
			return _List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_Nil,
					_Utils_ap(
						author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$prefix(offsets),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$el,
								_Utils_ap(
									_List_fromArray(
										[labelFontColor]),
									config.isActive ? _List_fromArray(
										[
											mdgriffith$elm_ui$Element$Events$onClick(
											config.zipToUidCmd(id.uid)),
											mdgriffith$elm_ui$Element$pointer,
											mdgriffith$elm_ui$Element$mouseOver(
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$Font$color(
													A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1))
												]))
										]) : _List_Nil),
								mdgriffith$elm_ui$Element$text(
									author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$cellContentToString(cellContent)))
							])))
				]);
		}
	});
var author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$mainPanel = F3(
	function (config, selectedContainer, document) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(2),
					mdgriffith$elm_ui$Element$padding(15)
				]),
			A4(
				author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$docTreeView,
				config,
				_List_Nil,
				_Utils_Tuple2(selectedContainer, false),
				document));
	});
var author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$menuView = function (config) {
	return A2(
		mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$spacing(15)
			]),
		_List_Nil);
};
var author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$documentStructView = F3(
	function (config, selectedContainer, document) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$scrollbars,
					mdgriffith$elm_ui$Element$width(
					A2(mdgriffith$elm_ui$Element$maximum, 330, mdgriffith$elm_ui$Element$fill)),
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$alignTop,
					mdgriffith$elm_ui$Element$Font$size(14),
					mdgriffith$elm_ui$Element$Font$family(
					_List_fromArray(
						[mdgriffith$elm_ui$Element$Font$monospace])),
					mdgriffith$elm_ui$Element$Border$solid,
					mdgriffith$elm_ui$Element$Border$widthEach(
					{bottom: 0, left: 0, right: 2, top: 0}),
					mdgriffith$elm_ui$Element$Border$color(
					A3(mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8))
				]),
			_List_fromArray(
				[
					author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$menuView(config),
					A3(author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$mainPanel, config, selectedContainer, document)
				]));
	});
var author$project$PageEditor$PageEditor$MenuClickOff = {$: 'MenuClickOff'};
var author$project$PageEditor$PageEditor$ZipToUid = function (a) {
	return {$: 'ZipToUid', a: a};
};
var author$project$Document$DocumentViews$DocumentResponsive$flipTable = function (_n0) {
	var style = _n0.style;
	var nbrRows = _n0.nbrRows;
	var nbrCols = _n0.nbrCols;
	var data = _n0.data;
	var uncons = function (xs) {
		if (xs.b) {
			var x = xs.a;
			var xs_ = xs.b;
			return elm$core$Maybe$Just(
				_Utils_Tuple2(x, xs_));
		} else {
			return elm$core$Maybe$Nothing;
		}
	};
	var inverse = F2(
		function (acc, xs) {
			inverse:
			while (true) {
				if (!xs.b) {
					return elm$core$List$reverse(acc);
				} else {
					var xs_ = xs;
					var _n2 = A3(
						elm$core$List$foldr,
						F2(
							function (_n3, _n4) {
								var h = _n3.a;
								var t = _n3.b;
								var hs = _n4.a;
								var ts = _n4.b;
								return _Utils_Tuple2(
									A2(elm$core$List$cons, h, hs),
									A2(elm$core$List$cons, t, ts));
							}),
						_Utils_Tuple2(_List_Nil, _List_Nil),
						A2(elm$core$List$filterMap, uncons, xs_));
					var heads = _n2.a;
					var tails = _n2.b;
					var tails_ = A2(elm$core$List$member, _List_Nil, tails) ? _List_Nil : tails;
					var $temp$acc = A2(elm$core$List$cons, heads, acc),
						$temp$xs = tails_;
					acc = $temp$acc;
					xs = $temp$xs;
					continue inverse;
				}
			}
		});
	var newData = A2(
		elm$core$List$map,
		elm$core$Array$fromList,
		A2(
			inverse,
			_List_Nil,
			A2(elm$core$List$map, elm$core$Array$toList, data)));
	return {data: newData, nbrCols: nbrRows, nbrRows: nbrCols, style: style};
};
var author$project$Document$DocumentViews$DocumentResponsive$responsivePreFormat = F2(
	function (config, document) {
		var device = author$project$Document$DocumentViews$StyleSheets$getDevice(config);
		if (document.$ === 'Container') {
			var nv = document.a;
			var containerLabel = nv.containerLabel;
			var id = nv.id;
			var attrs = nv.attrs;
			var children = document.b;
			switch (containerLabel.$) {
				case 'DocColumn':
					var addColImgClass = function (doc) {
						if (doc.$ === 'Cell') {
							var l = doc;
							var lv = l.a;
							var _n3 = lv.cellContent;
							if (_n3.$ === 'Image') {
								var meta = _n3.a;
								var lId = lv.id;
								return author$project$Document$Document$Cell(
									{
										attrs: lv.attrs,
										cellContent: lv.cellContent,
										id: _Utils_update(
											lId,
											{
												classes: A2(elm$core$Set$insert, 'colImg', lId.classes)
											})
									});
							} else {
								return l;
							}
						} else {
							var doc_ = doc;
							return doc_;
						}
					};
					var children_ = A2(elm$core$List$map, addColImgClass, children);
					return A2(
						author$project$Document$Document$Container,
						nv,
						A2(
							elm$core$List$map,
							author$project$Document$DocumentViews$DocumentResponsive$responsivePreFormat(config),
							children_));
				case 'DocRow':
					return (_Utils_eq(device._class, mdgriffith$elm_ui$Element$Phone) || _Utils_eq(device._class, mdgriffith$elm_ui$Element$Tablet)) ? A2(
						author$project$Document$DocumentViews$DocumentResponsive$responsivePreFormat,
						config,
						A2(
							author$project$Document$Document$Container,
							_Utils_update(
								nv,
								{containerLabel: author$project$Document$Document$DocColumn}),
							children)) : A2(
						author$project$Document$Document$Container,
						nv,
						A2(
							elm$core$List$map,
							author$project$Document$DocumentViews$DocumentResponsive$responsivePreFormat(config),
							children));
				case 'TextColumn':
					return (_Utils_eq(device._class, mdgriffith$elm_ui$Element$Phone) || _Utils_eq(device._class, mdgriffith$elm_ui$Element$Tablet)) ? A2(
						author$project$Document$DocumentViews$DocumentResponsive$responsivePreFormat,
						config,
						A2(
							author$project$Document$Document$Container,
							_Utils_update(
								nv,
								{containerLabel: author$project$Document$Document$DocColumn}),
							children)) : A2(
						author$project$Document$Document$Container,
						nv,
						A2(
							elm$core$List$map,
							author$project$Document$DocumentViews$DocumentResponsive$responsivePreFormat(config),
							children));
				default:
					return A2(
						author$project$Document$Document$Container,
						nv,
						A2(
							elm$core$List$map,
							author$project$Document$DocumentViews$DocumentResponsive$responsivePreFormat(config),
							children));
			}
		} else {
			var l = document;
			var cellContent = l.a.cellContent;
			var id = l.a.id;
			var attrs = l.a.attrs;
			switch (cellContent.$) {
				case 'Image':
					var meta = cellContent.a;
					return l;
				case 'Video':
					var meta = cellContent.a;
					return l;
				case 'BlockLinks':
					var meta = cellContent.a;
					return l;
				case 'Fiches':
					var f = cellContent.a;
					return l;
				case 'NewsBlock':
					return l;
				case 'TextBlock':
					var xs = cellContent.a;
					return l;
				case 'Table':
					var meta = cellContent.a;
					return ((_Utils_eq(device._class, mdgriffith$elm_ui$Element$Phone) || _Utils_eq(device._class, mdgriffith$elm_ui$Element$Tablet)) && (_Utils_cmp(meta.nbrCols, meta.nbrRows) > 0)) ? author$project$Document$Document$Cell(
						{
							attrs: attrs,
							cellContent: author$project$Document$Document$Table(
								author$project$Document$DocumentViews$DocumentResponsive$flipTable(meta)),
							id: id
						}) : l;
				case 'CustomElement':
					var s = cellContent.a;
					return l;
				case 'EmptyCell':
					return l;
				default:
					return l;
			}
		}
	});
var author$project$Document$DocumentViews$StyleSheets$getContainerWidth = function (config) {
	if (config.editMode) {
		var _n0 = config.previewMode;
		switch (_n0.$) {
			case 'PreviewScreen':
				return 980;
			case 'PreviewTablet':
				return 800;
			case 'PreviewPhone':
				return 350;
			default:
				return config.width;
		}
	} else {
		return config.width;
	}
};
var author$project$Document$DocumentViews$DocumentView$renderBlocksLinksMeta = F5(
	function (nbrChunks, config, id, attrs, _n0) {
		var image = _n0.image;
		var label = _n0.label;
		var targetBlank = _n0.targetBlank;
		var url = _n0.url;
		var url_ = targetBlank ? url : A2(
			elm$core$Maybe$withDefault,
			'',
			A2(elm$core$Dict$get, url, config.pageIndex));
		var styleSheet = author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		var linkFun = targetBlank ? mdgriffith$elm_ui$Element$newTabLink : mdgriffith$elm_ui$Element$link;
		var containerWidth = author$project$Document$DocumentViews$StyleSheets$getContainerWidth(config);
		var maxWidth = function () {
			var spacing = 10;
			var padding = 40;
			return A2(elm$core$Basics$min, ((containerWidth - padding) - ((nbrChunks - 1) * padding)) / nbrChunks, 300);
		}();
		var bw = elm$core$Basics$round(maxWidth);
		var bh = elm$core$Basics$round(maxWidth / (300 / 225));
		var block = A2(
			mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				styleSheet.blocLinkStyle,
				_Utils_ap(
					A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs),
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(
							mdgriffith$elm_ui$Element$px(bw)),
							mdgriffith$elm_ui$Element$height(
							mdgriffith$elm_ui$Element$px(bh)),
							mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$blockLinkGrey),
							(!config.editMode) ? mdgriffith$elm_ui$Element$mouseOver(
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Background$color(
									author$project$Internals$CommonStyleHelpers$blockLinkGreyAlpha(0.5))
								])) : author$project$Internals$CommonStyleHelpers$noAttr
						]))),
			A2(
				mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(
						mdgriffith$elm_ui$Element$px(bw - 12)),
						mdgriffith$elm_ui$Element$height(
						mdgriffith$elm_ui$Element$px(bh - 12)),
						mdgriffith$elm_ui$Element$centerX,
						mdgriffith$elm_ui$Element$centerY,
						mdgriffith$elm_ui$Element$Background$image(image),
						mdgriffith$elm_ui$Element$inFront(
						A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$alignBottom,
									mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
									mdgriffith$elm_ui$Element$padding(10),
									mdgriffith$elm_ui$Element$Background$color(
									author$project$Internals$CommonStyleHelpers$blockLinkGreyAlpha(0.8)),
									mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$aliceBlue)
								]),
							A2(
								mdgriffith$elm_ui$Element$el,
								_Utils_ap(
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$Font$center,
											mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
										]),
									author$project$Internals$CommonStyleHelpers$unselectable),
								mdgriffith$elm_ui$Element$text(
									elm_community$string_extra$String$Extra$toSentenceCase(label)))))
					]),
				mdgriffith$elm_ui$Element$none));
		return config.editMode ? A2(
			mdgriffith$elm_ui$Element$Keyed$el,
			_List_Nil,
			_Utils_Tuple2(
				elm$core$String$fromInt(
					A2(
						Skinney$murmur3$Murmur3$hashString,
						0,
						_Utils_ap(
							image,
							_Utils_ap(url, label)))),
				block)) : A2(
			linkFun,
			_List_Nil,
			{label: block, url: url_});
	});
var author$project$Document$DocumentViews$StyleSheets$chunkBy = F5(
	function (config, n1, n2, n3, n4) {
		var device = author$project$Document$DocumentViews$StyleSheets$getDevice(config);
		var _n0 = device._class;
		switch (_n0.$) {
			case 'Phone':
				return n1;
			case 'Tablet':
				return n2;
			case 'Desktop':
				return n3;
			default:
				return n4;
		}
	});
var author$project$Document$DocumentViews$DocumentView$renderBlockLinks = F4(
	function (config, id, attrs, meta) {
		var styleSheet = author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		var nbrChunks = A5(author$project$Document$DocumentViews$StyleSheets$chunkBy, config, 1, 2, 3, 3);
		var rows = A2(
			elm$core$List$map,
			mdgriffith$elm_ui$Element$row(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$centerX,
						mdgriffith$elm_ui$Element$spacing(10)
					])),
			A2(
				author$project$Internals$CommonHelpers$chunks,
				nbrChunks,
				A2(
					elm$core$List$map,
					A4(author$project$Document$DocumentViews$DocumentView$renderBlocksLinksMeta, nbrChunks, config, id, attrs),
					meta)));
		var maxWidth = A3(
			author$project$Document$DocumentViews$StyleSheets$docMaxWidth,
			_Utils_Tuple2(config.width, config.height),
			config.editMode,
			config.previewMode);
		return _List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
							mdgriffith$elm_ui$Element$spacing(10)
						]),
					_Utils_ap(
						A2(author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
						A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				rows)
			]);
	});
var author$project$Document$DocumentViews$DocumentView$renderCalendar = F3(
	function (config, id, attrs) {
		return _List_Nil;
	});
var author$project$Document$DocumentViews$DocumentView$customHeading = F4(
	function (config, level, attrs, title) {
		return A4(
			author$project$Document$DocumentViews$DocumentView$renderTextBlockElement,
			config,
			{
				classes: elm$core$Set$empty,
				docStyleId: elm$core$Maybe$Nothing,
				htmlId: elm$core$Maybe$Just(
					'defaultHtmlId' + elm$core$String$fromInt(0)),
				uid: 0
			},
			_List_Nil,
			A2(
				author$project$Document$Document$Heading,
				attrs,
				_Utils_Tuple2(level, title)));
	});
var elm$html$Html$iframe = _VirtualDom_node('iframe');
var author$project$Document$DocumentViews$DocumentView$renderCalendarWidget = F3(
	function (config, id, attrs) {
		var device = author$project$Document$DocumentViews$StyleSheets$getDevice(config);
		var widgetWidth = function () {
			var _n0 = device._class;
			switch (_n0.$) {
				case 'Phone':
					return mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill);
				case 'Tablet':
					return mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill);
				default:
					return mdgriffith$elm_ui$Element$width(
						mdgriffith$elm_ui$Element$px(300));
			}
		}();
		var containerWidth = author$project$Document$DocumentViews$StyleSheets$getContainerWidth(config);
		var maxWidth = containerWidth - 40;
		return _List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							widgetWidth,
							mdgriffith$elm_ui$Element$alignTop,
							mdgriffith$elm_ui$Element$centerX,
							mdgriffith$elm_ui$Element$spacing(10)
						]),
					_Utils_ap(
						A2(
							author$project$Document$DocumentViews$DocumentView$idStyle,
							author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config),
							id),
						A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				_List_fromArray(
					[
						A4(author$project$Document$DocumentViews$DocumentView$customHeading, config, 1, _List_Nil, 'AGENDA'),
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[mdgriffith$elm_ui$Element$centerX]),
						mdgriffith$elm_ui$Element$html(
							A2(
								elm$html$Html$iframe,
								_List_fromArray(
									[
										elm$html$Html$Attributes$src('https://calendar.google.com/calendar/embed?showTitle=0&showTabs=0&showNav=0&showPrint=0&showCalendars=0&showTz=0&mode=AGENDA&height=150&wkst=2&hl=fr&bgcolor=%23FFFFFF&src=1claq68scg7llpg29j2fasprtk%40group.calendar.google.com&;color=%23fe3b00&;src=n1jce3hgvarkt6n3o69c6nl66g%40group.calendar.google.com&;color=%23007451&;src=r46rbonnui234n2b2glau5btoo%40group.calendar.google.com&;color=%2305f2ff&ctz=Europe%2FParis'),
										A2(elm$html$Html$Attributes$style, 'border-width', '0')
									]),
								_List_Nil)))
					]))
			]);
	});
var author$project$Document$DocumentViews$DocumentView$renderCustomElement = F4(
	function (config, id, attrs, s) {
		return _List_fromArray(
			[
				A2(
				elm$core$Maybe$withDefault,
				mdgriffith$elm_ui$Element$none,
				A2(elm$core$Dict$get, s, config.customElems))
			]);
	});
var author$project$Document$DocumentViews$DocumentView$renderDronePanorama = F3(
	function (config, id, attrs) {
		var device = author$project$Document$DocumentViews$StyleSheets$getDevice(config);
		var widgetWidth = function () {
			var _n0 = device._class;
			switch (_n0.$) {
				case 'Phone':
					return mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill);
				case 'Tablet':
					return mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill);
				default:
					return mdgriffith$elm_ui$Element$width(
						mdgriffith$elm_ui$Element$px(300));
			}
		}();
		var containerWidth = author$project$Document$DocumentViews$StyleSheets$getContainerWidth(config);
		var maxWidth = containerWidth - 40;
		return _List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							widgetWidth,
							mdgriffith$elm_ui$Element$alignTop,
							mdgriffith$elm_ui$Element$centerX,
							mdgriffith$elm_ui$Element$spacing(10)
						]),
					_Utils_ap(
						A2(
							author$project$Document$DocumentViews$DocumentView$idStyle,
							author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config),
							id),
						A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				_List_fromArray(
					[
						A4(author$project$Document$DocumentViews$DocumentView$customHeading, config, 1, _List_Nil, 'VISITE VIRTUELLE AERIENNE'),
						A2(
						mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Background$color(
								A3(mdgriffith$elm_ui$Element$rgb255, 169, 169, 169)),
								mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
								mdgriffith$elm_ui$Element$padding(15),
								mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$newTabLink,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
										mdgriffith$elm_ui$Element$centerX
									]),
								{
									label: A2(
										mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$width(
												mdgriffith$elm_ui$Element$px(200)),
												mdgriffith$elm_ui$Element$height(
												mdgriffith$elm_ui$Element$px(160)),
												mdgriffith$elm_ui$Element$Background$image('assets/images/misc/visiteVirt.jpg'),
												mdgriffith$elm_ui$Element$Border$width(5),
												mdgriffith$elm_ui$Element$Border$color(
												A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
											]),
										mdgriffith$elm_ui$Element$none),
									url: 'visite/visite-virtuelle-aerienne-murol.html'
								}),
								A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[mdgriffith$elm_ui$Element$centerX]),
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Réalisée par la société ')),
										A2(
										mdgriffith$elm_ui$Element$newTabLink,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3)
											]),
										{
											label: mdgriffith$elm_ui$Element$text('W3D\'s'),
											url: 'http://www.w3ds.fr/'
										})
									]))
							]))
					]))
			]);
	});
var author$project$Document$DocumentViews$DocumentView$renderEmptyCell = F3(
	function (config, id, attrs) {
		var styleSheet = author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		return _List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
							mdgriffith$elm_ui$Element$height(
							mdgriffith$elm_ui$Element$px(100)),
							mdgriffith$elm_ui$Element$Background$color(
							A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 0.2))
						]),
					_Utils_ap(
						A2(author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
						A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[mdgriffith$elm_ui$Element$centerX, mdgriffith$elm_ui$Element$centerY]),
						mdgriffith$elm_ui$Element$text('Cellule vide'))
					]))
			]);
	});
var author$project$Document$DocumentViews$DocumentView$renderFiches = F4(
	function (config, id, attrs, fichesId) {
		var styleSheet = author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		var nbrCols = A5(author$project$Document$DocumentViews$StyleSheets$chunkBy, config, 1, 2, 2, 2);
		var mw = function () {
			switch (nbrCols) {
				case 3:
					return 300;
				case 2:
					return 440;
				default:
					return 440;
			}
		}();
		var fiches = A2(
			elm$core$List$filterMap,
			function (fId) {
				return A2(elm$core$Dict$get, fId, config.fiches);
			},
			fichesId);
		var containerWidth = author$project$Document$DocumentViews$StyleSheets$getContainerWidth(config);
		var maxWidth = function () {
			var spacing = 10;
			var padding = 40;
			return A2(elm$core$Basics$min, ((containerWidth - padding) - ((nbrCols - 1) * padding)) / nbrCols, mw);
		}();
		var ficheView_ = function (f) {
			return A5(
				author$project$GeneralDirectoryEditor$FichePreview$ficheView,
				config.openFicheMsg,
				config.currentTime,
				maxWidth,
				config.editMode || A2(
					elm$core$Set$member,
					TSFoster$elm_uuid$UUID$canonical(f.uuid),
					config.openedFiches),
				f);
		};
		var cols = A2(
			elm$core$List$map,
			mdgriffith$elm_ui$Element$column(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$alignTop,
						mdgriffith$elm_ui$Element$spacing(10)
					])),
			A2(
				author$project$Internals$CommonHelpers$chunks,
				elm$core$Basics$ceiling(
					elm$core$List$length(fiches) / nbrCols),
				A2(elm$core$List$map, ficheView_, fiches)));
		return _List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$centerX,
							mdgriffith$elm_ui$Element$spacing(10)
						]),
					_Utils_ap(
						A2(author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
						A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				cols)
			]);
	});
var author$project$Document$DocumentViews$DocumentView$renderGallery = F4(
	function (config, id, attrs, galleryMeta) {
		return _List_Nil;
	});
var author$project$Document$DocumentViews$DocumentView$renderImage = F4(
	function (config, id, attrs, _n0) {
		var uid = id.uid;
		var docStyleId = id.docStyleId;
		var classes = id.classes;
		var src = _n0.src;
		var caption = _n0.caption;
		var size = _n0.size;
		var styleSheet = author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		var src_ = function () {
			if (src.$ === 'Inline') {
				var f = src.a;
				var s = src.b;
				return s;
			} else {
				var s = src.a;
				return s;
			}
		}();
		var attrs_ = _Utils_ap(
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$width(
					A2(mdgriffith$elm_ui$Element$maximum, size.imgWidth, mdgriffith$elm_ui$Element$fill))
				]),
			_Utils_ap(
				styleSheet.imageStyle,
				_Utils_ap(
					A2(author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
					A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))));
		return _List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$el,
				attrs_,
				mdgriffith$elm_ui$Element$html(
					A2(
						elm$html$Html$img,
						_List_fromArray(
							[
								A2(elm$html$Html$Attributes$style, 'width', '100%'),
								A2(elm$html$Html$Attributes$style, 'height', 'auto'),
								elm$html$Html$Attributes$src(src_)
							]),
						_List_Nil)))
			]);
	});
var elm$time$Time$Fri = {$: 'Fri'};
var elm$time$Time$Mon = {$: 'Mon'};
var elm$time$Time$Sat = {$: 'Sat'};
var elm$time$Time$Sun = {$: 'Sun'};
var elm$time$Time$Thu = {$: 'Thu'};
var elm$time$Time$Tue = {$: 'Tue'};
var elm$time$Time$Wed = {$: 'Wed'};
var elm$time$Time$toWeekday = F2(
	function (zone, time) {
		var _n0 = A2(
			elm$core$Basics$modBy,
			7,
			A2(
				elm$time$Time$flooredDiv,
				A2(elm$time$Time$toAdjustedMinutes, zone, time),
				60 * 24));
		switch (_n0) {
			case 0:
				return elm$time$Time$Thu;
			case 1:
				return elm$time$Time$Fri;
			case 2:
				return elm$time$Time$Sat;
			case 3:
				return elm$time$Time$Sun;
			case 4:
				return elm$time$Time$Mon;
			case 5:
				return elm$time$Time$Tue;
			default:
				return elm$time$Time$Wed;
		}
	});
var author$project$Internals$CommonHelpers$dateToFrench = F2(
	function (zone, t) {
		var currentYear = elm$core$String$fromInt(
			A2(elm$time$Time$toYear, zone, t));
		var currentWeekday = function () {
			var _n1 = A2(elm$time$Time$toWeekday, zone, t);
			switch (_n1.$) {
				case 'Mon':
					return 'lundi';
				case 'Tue':
					return 'mardi';
				case 'Wed':
					return 'mercredi';
				case 'Thu':
					return 'jeudi';
				case 'Fri':
					return 'vendredi';
				case 'Sat':
					return 'samedi';
				default:
					return 'dimanche';
			}
		}();
		var currentMonth = function () {
			var _n0 = A2(elm$time$Time$toMonth, zone, t);
			switch (_n0.$) {
				case 'Jan':
					return 'janvier';
				case 'Feb':
					return 'férier';
				case 'Mar':
					return 'mars';
				case 'Apr':
					return 'avril';
				case 'May':
					return 'mai';
				case 'Jun':
					return 'juin';
				case 'Jul':
					return 'juillet';
				case 'Aug':
					return 'août';
				case 'Sep':
					return 'septembre';
				case 'Oct':
					return 'octobre';
				case 'Nov':
					return 'novembre';
				default:
					return 'décembre';
			}
		}();
		var currentDay = elm$core$String$fromInt(
			A2(elm$time$Time$toDay, zone, t));
		return currentWeekday + (' ' + (currentDay + (' ' + (currentMonth + (' ' + currentYear)))));
	});
var mdgriffith$elm_ui$Internal$Model$AsTextColumn = {$: 'AsTextColumn'};
var mdgriffith$elm_ui$Internal$Model$asTextColumn = mdgriffith$elm_ui$Internal$Model$AsTextColumn;
var mdgriffith$elm_ui$Element$textColumn = F2(
	function (attrs, children) {
		return A4(
			mdgriffith$elm_ui$Internal$Model$element,
			mdgriffith$elm_ui$Internal$Model$asTextColumn,
			mdgriffith$elm_ui$Internal$Model$div,
			A2(
				elm$core$List$cons,
				mdgriffith$elm_ui$Element$width(
					A2(
						mdgriffith$elm_ui$Element$maximum,
						750,
						A2(mdgriffith$elm_ui$Element$minimum, 500, mdgriffith$elm_ui$Element$fill))),
				attrs),
			mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var author$project$Document$DocumentViews$DocumentView$renderNews = F3(
	function (config, id, attrs) {
		var styleSheet = author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		var sortedNews = elm$core$List$reverse(
			A2(
				elm$core$List$sortBy,
				A2(
					elm$core$Basics$composeL,
					elm$time$Time$posixToMillis,
					function ($) {
						return $.date;
					}),
				elm$core$Dict$values(config.news)));
		var lastUpdate = A2(
			elm$core$Maybe$map,
			elm$time$Time$millisToPosix,
			elm$core$List$head(
				elm$core$List$reverse(
					elm$core$List$sort(
						A2(
							elm$core$List$map,
							A2(
								elm$core$Basics$composeL,
								elm$time$Time$posixToMillis,
								function ($) {
									return $.date;
								}),
							elm$core$Dict$values(config.news))))));
		var device = author$project$Document$DocumentViews$StyleSheets$getDevice(config);
		var renderNewsBody = F3(
			function (uuid, pic, content) {
				var picView = function (url) {
					return A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(266)),
								mdgriffith$elm_ui$Element$height(
								mdgriffith$elm_ui$Element$px(200)),
								mdgriffith$elm_ui$Element$Background$image(url)
							]),
						mdgriffith$elm_ui$Element$none);
				};
				var bodyAttr = _List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$Background$color(
						A3(mdgriffith$elm_ui$Element$rgb255, 255, 255, 255)),
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$padding(10),
						mdgriffith$elm_ui$Element$Border$roundEach(
						{bottomLeft: 5, bottomRight: 5, topLeft: 0, topRight: 0}),
						mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey4),
						mdgriffith$elm_ui$Element$Border$widthEach(
						{bottom: 1, left: 1, right: 1, top: 0})
					]);
				if (A2(
					elm$core$Set$member,
					TSFoster$elm_uuid$UUID$canonical(uuid),
					config.openedNews)) {
					var _n3 = _Utils_Tuple2(pic, device._class);
					if (_n3.a.$ === 'Just') {
						if (_n3.b.$ === 'Phone') {
							var url = _n3.a.a.url;
							var _n4 = _n3.b;
							return _List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$column,
									bodyAttr,
									_Utils_ap(
										_List_fromArray(
											[
												A2(
												mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[mdgriffith$elm_ui$Element$centerX]),
												picView(url))
											]),
										A4(author$project$Document$DocumentViews$DocumentView$renderTextBlock, config, id, content.attrs, content.tbElems)))
								]);
						} else {
							var url = _n3.a.a.url;
							return _List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$textColumn,
									bodyAttr,
									_Utils_ap(
										_List_fromArray(
											[
												A2(
												mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														mdgriffith$elm_ui$Element$paddingEach(
														{bottom: 0, left: 0, right: 10, top: 0}),
														mdgriffith$elm_ui$Element$alignLeft
													]),
												picView(url))
											]),
										A4(author$project$Document$DocumentViews$DocumentView$renderTextBlock, config, id, content.attrs, content.tbElems)))
								]);
						}
					} else {
						var _n5 = _n3.a;
						return _List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$column,
								bodyAttr,
								A4(author$project$Document$DocumentViews$DocumentView$renderTextBlock, config, id, content.attrs, content.tbElems))
							]);
					}
				} else {
					return _List_Nil;
				}
			});
		var renderNewsHeader = F3(
			function (uuid, title, date) {
				var titleView = A2(
					mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
							mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1),
							mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 0, left: 0, right: 0, top: 0})
						]),
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$text(
							elm_community$string_extra$String$Extra$toSentenceCase(title))
						]));
				var headerAttr = _List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$Events$onClick(
						config.openNewsMsg(
							TSFoster$elm_uuid$UUID$canonical(uuid))),
						mdgriffith$elm_ui$Element$pointer,
						mdgriffith$elm_ui$Element$paddingEach(
						{bottom: 5, left: 5, right: 0, top: 5}),
						mdgriffith$elm_ui$Element$Border$roundEach(
						{bottomLeft: 0, bottomRight: 0, topLeft: 2, topRight: 2}),
						mdgriffith$elm_ui$Element$Border$widthEach(
						{bottom: 1, left: 0, right: 0, top: 0}),
						mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey6),
						mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey5),
						mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey6)
							]))
					]);
				var dateAttr = _List_fromArray(
					[
						mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey6),
						mdgriffith$elm_ui$Element$Border$widthEach(
						{bottom: 0, left: 1, right: 0, top: 0}),
						mdgriffith$elm_ui$Element$paddingEach(
						{bottom: 5, left: 9, right: 5, top: 5})
					]);
				var chevronsView = A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$alignRight,
							mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey3)
						]),
					mdgriffith$elm_ui$Element$html(
						A2(
							elm$core$Set$member,
							TSFoster$elm_uuid$UUID$canonical(uuid),
							config.openedNews) ? author$project$Internals$Icons$chevronsUp(18) : author$project$Internals$Icons$chevronsDown(18)));
				var _n2 = device._class;
				if (_n2.$ === 'Phone') {
					return A2(
						mdgriffith$elm_ui$Element$column,
						headerAttr,
						_List_fromArray(
							[
								titleView,
								A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
									]),
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$el,
										dateAttr,
										mdgriffith$elm_ui$Element$text(
											A2(author$project$Internals$CommonHelpers$dateToStr, config.zone, date))),
										chevronsView
									]))
							]));
				} else {
					return A2(
						mdgriffith$elm_ui$Element$row,
						headerAttr,
						_List_fromArray(
							[
								titleView,
								A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(7)
									]),
								_List_fromArray(
									[
										chevronsView,
										A2(
										mdgriffith$elm_ui$Element$el,
										_Utils_ap(
											dateAttr,
											_List_fromArray(
												[mdgriffith$elm_ui$Element$alignRight])),
										mdgriffith$elm_ui$Element$text(
											A2(author$project$Internals$CommonHelpers$dateToStr, config.zone, date)))
									]))
							]));
				}
			});
		var renderNewsItem = function (_n1) {
			var uuid = _n1.uuid;
			var title = _n1.title;
			var content = _n1.content;
			var date = _n1.date;
			var pic = _n1.pic;
			return A2(
				mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
					]),
				_Utils_ap(
					_List_fromArray(
						[
							A3(renderNewsHeader, uuid, title, date)
						]),
					function () {
						if (content.$ === 'Just') {
							var c = content.a;
							return A3(renderNewsBody, uuid, pic, c);
						} else {
							return _List_Nil;
						}
					}()));
		};
		return _List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$centerX,
							mdgriffith$elm_ui$Element$spacing(15),
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
							mdgriffith$elm_ui$Element$alignTop
						]),
					_Utils_ap(
						A2(author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
						A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				_Utils_ap(
					_List_fromArray(
						[
							A4(author$project$Document$DocumentViews$DocumentView$customHeading, config, 1, _List_Nil, 'ACTUALITES DE LA COMMUNE'),
							A2(
							elm$core$Maybe$withDefault,
							mdgriffith$elm_ui$Element$none,
							A2(
								elm$core$Maybe$map,
								function (lastUp) {
									return A2(
										mdgriffith$elm_ui$Element$paragraph,
										_List_Nil,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text(
												'Dernière mise à jour le ' + A2(author$project$Internals$CommonHelpers$dateToFrench, config.zone, lastUp))
											]));
								},
								lastUpdate))
						]),
					A2(elm$core$List$map, renderNewsItem, sortedNews)))
			]);
	});
var author$project$Document$DocumentViews$DocumentView$renderPictureLinks = F4(
	function (config, id, attrs, picLinks) {
		var styleSheet = author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		var minHeight = A2(
			elm$core$Maybe$withDefault,
			0,
			A2(
				elm$core$Maybe$map,
				elm$core$Basics$min(50),
				elm$core$List$head(
					elm$core$List$sort(
						A2(
							elm$core$List$map,
							A2(
								elm$core$Basics$composeL,
								A2(
									elm$core$Basics$composeL,
									function ($) {
										return $.imgHeight;
									},
									function ($) {
										return $.size;
									}),
								function ($) {
									return $.img;
								}),
							picLinks)))));
		var imgsScaledToMinHeight = function () {
			var scale = function (picLink) {
				var img = picLink.img;
				return _Utils_update(
					picLink,
					{
						img: _Utils_update(
							img,
							{
								size: {
									imgHeight: minHeight + 5,
									imgWidth: elm$core$Basics$round((minHeight * img.size.imgWidth) / img.size.imgHeight)
								}
							})
					});
			};
			return A2(elm$core$List$map, scale, picLinks);
		}();
		var totalImgWidth = A3(
			elm$core$List$foldr,
			F2(
				function (pl, n) {
					return pl.img.size.imgWidth + n;
				}),
			0,
			imgsScaledToMinHeight);
		var logoView = function (_n3) {
			var url = _n3.url;
			var img = _n3.img;
			return config.editMode ? A2(
				mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(
						mdgriffith$elm_ui$Element$fillPortion(
							elm$core$Basics$floor((10000 * img.size.imgWidth) / totalImgWidth)))
					]),
				mdgriffith$elm_ui$Element$html(
					A2(
						elm$html$Html$img,
						_List_fromArray(
							[
								A2(elm$html$Html$Attributes$style, 'width', '100%'),
								A2(elm$html$Html$Attributes$style, 'height', 'auto'),
								function () {
								var _n1 = img.src;
								if (_n1.$ === 'UrlSrc') {
									var urlSrc = _n1.a;
									return elm$html$Html$Attributes$src(urlSrc);
								} else {
									return A2(elm$html$Html$Attributes$style, '', '');
								}
							}()
							]),
						_List_Nil))) : A2(
				mdgriffith$elm_ui$Element$newTabLink,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(
						mdgriffith$elm_ui$Element$fillPortion(
							elm$core$Basics$floor((10000 * img.size.imgWidth) / totalImgWidth))),
						mdgriffith$elm_ui$Element$pointer,
						mdgriffith$elm_ui$Element$Border$width(2),
						mdgriffith$elm_ui$Element$Border$color(
						A4(mdgriffith$elm_ui$Element$rgba255, 255, 255, 255, 0)),
						mdgriffith$elm_ui$Element$Border$rounded(2),
						mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Border$color(
								A3(mdgriffith$elm_ui$Element$rgb255, 255, 255, 255))
							]))
					]),
				{
					label: mdgriffith$elm_ui$Element$html(
						A2(
							elm$html$Html$img,
							_List_fromArray(
								[
									A2(elm$html$Html$Attributes$style, 'width', '100%'),
									A2(elm$html$Html$Attributes$style, 'height', 'auto'),
									function () {
									var _n2 = img.src;
									if (_n2.$ === 'UrlSrc') {
										var urlSrc = _n2.a;
										return elm$html$Html$Attributes$src(urlSrc);
									} else {
										return A2(elm$html$Html$Attributes$style, '', '');
									}
								}()
								]),
							_List_Nil)),
					url: url
				});
		};
		if (!picLinks.b) {
			return _List_Nil;
		} else {
			return _List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(10),
								mdgriffith$elm_ui$Element$padding(10),
								mdgriffith$elm_ui$Element$clip
							]),
						_Utils_ap(
							styleSheet.pictureLinksStyle,
							_Utils_ap(
								A2(author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
								A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs)))),
					A2(elm$core$List$map, logoView, imgsScaledToMinHeight))
				]);
		}
	});
var mdgriffith$elm_ui$Element$InternalIndexedColumn = function (a) {
	return {$: 'InternalIndexedColumn', a: a};
};
var mdgriffith$elm_ui$Internal$Flag$gridPosition = mdgriffith$elm_ui$Internal$Flag$flag(35);
var mdgriffith$elm_ui$Internal$Flag$gridTemplate = mdgriffith$elm_ui$Internal$Flag$flag(34);
var mdgriffith$elm_ui$Internal$Model$GridPosition = function (a) {
	return {$: 'GridPosition', a: a};
};
var mdgriffith$elm_ui$Internal$Model$GridTemplateStyle = function (a) {
	return {$: 'GridTemplateStyle', a: a};
};
var mdgriffith$elm_ui$Internal$Model$AsGrid = {$: 'AsGrid'};
var mdgriffith$elm_ui$Internal$Model$asGrid = mdgriffith$elm_ui$Internal$Model$AsGrid;
var mdgriffith$elm_ui$Element$tableHelper = F2(
	function (attrs, config) {
		var onGrid = F3(
			function (rowLevel, columnLevel, elem) {
				return A4(
					mdgriffith$elm_ui$Internal$Model$element,
					mdgriffith$elm_ui$Internal$Model$asEl,
					mdgriffith$elm_ui$Internal$Model$div,
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Internal$Model$StyleClass,
							mdgriffith$elm_ui$Internal$Flag$gridPosition,
							mdgriffith$elm_ui$Internal$Model$GridPosition(
								{col: columnLevel, height: 1, row: rowLevel, width: 1}))
						]),
					mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[elem])));
			});
		var columnWidth = function (col) {
			if (col.$ === 'InternalIndexedColumn') {
				var colConfig = col.a;
				return colConfig.width;
			} else {
				var colConfig = col.a;
				return colConfig.width;
			}
		};
		var columnHeader = function (col) {
			if (col.$ === 'InternalIndexedColumn') {
				var colConfig = col.a;
				return colConfig.header;
			} else {
				var colConfig = col.a;
				return colConfig.header;
			}
		};
		var maybeHeaders = function (headers) {
			return A2(
				elm$core$List$all,
				elm$core$Basics$eq(mdgriffith$elm_ui$Internal$Model$Empty),
				headers) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(
				A2(
					elm$core$List$indexedMap,
					F2(
						function (col, header) {
							return A3(onGrid, 1, col + 1, header);
						}),
					headers));
		}(
			A2(elm$core$List$map, columnHeader, config.columns));
		var add = F3(
			function (cell, columnConfig, cursor) {
				if (columnConfig.$ === 'InternalIndexedColumn') {
					var col = columnConfig.a;
					return _Utils_update(
						cursor,
						{
							column: cursor.column + 1,
							elements: A2(
								elm$core$List$cons,
								A3(
									onGrid,
									cursor.row,
									cursor.column,
									A2(
										col.view,
										_Utils_eq(maybeHeaders, elm$core$Maybe$Nothing) ? (cursor.row - 1) : (cursor.row - 2),
										cell)),
								cursor.elements)
						});
				} else {
					var col = columnConfig.a;
					return {
						column: cursor.column + 1,
						elements: A2(
							elm$core$List$cons,
							A3(
								onGrid,
								cursor.row,
								cursor.column,
								col.view(cell)),
							cursor.elements),
						row: cursor.row
					};
				}
			});
		var build = F3(
			function (columns, rowData, cursor) {
				var newCursor = A3(
					elm$core$List$foldl,
					add(rowData),
					cursor,
					columns);
				return {column: 1, elements: newCursor.elements, row: cursor.row + 1};
			});
		var children = A3(
			elm$core$List$foldl,
			build(config.columns),
			{
				column: 1,
				elements: _List_Nil,
				row: _Utils_eq(maybeHeaders, elm$core$Maybe$Nothing) ? 1 : 2
			},
			config.data);
		var _n0 = A2(
			mdgriffith$elm_ui$Internal$Model$getSpacing,
			attrs,
			_Utils_Tuple2(0, 0));
		var sX = _n0.a;
		var sY = _n0.b;
		var template = A2(
			mdgriffith$elm_ui$Internal$Model$StyleClass,
			mdgriffith$elm_ui$Internal$Flag$gridTemplate,
			mdgriffith$elm_ui$Internal$Model$GridTemplateStyle(
				{
					columns: A2(elm$core$List$map, columnWidth, config.columns),
					rows: A2(
						elm$core$List$repeat,
						elm$core$List$length(config.data),
						mdgriffith$elm_ui$Internal$Model$Content),
					spacing: _Utils_Tuple2(
						mdgriffith$elm_ui$Element$px(sX),
						mdgriffith$elm_ui$Element$px(sY))
				}));
		return A4(
			mdgriffith$elm_ui$Internal$Model$element,
			mdgriffith$elm_ui$Internal$Model$asGrid,
			mdgriffith$elm_ui$Internal$Model$div,
			A2(
				elm$core$List$cons,
				mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
				A2(elm$core$List$cons, template, attrs)),
			mdgriffith$elm_ui$Internal$Model$Unkeyed(
				function () {
					if (maybeHeaders.$ === 'Nothing') {
						return children.elements;
					} else {
						var renderedHeaders = maybeHeaders.a;
						return _Utils_ap(
							renderedHeaders,
							elm$core$List$reverse(children.elements));
					}
				}()));
	});
var mdgriffith$elm_ui$Element$indexedTable = F2(
	function (attrs, config) {
		return A2(
			mdgriffith$elm_ui$Element$tableHelper,
			attrs,
			{
				columns: A2(elm$core$List$map, mdgriffith$elm_ui$Element$InternalIndexedColumn, config.columns),
				data: config.data
			});
	});
var mdgriffith$elm_ui$Element$scrollbarX = A2(mdgriffith$elm_ui$Internal$Model$Class, mdgriffith$elm_ui$Internal$Flag$overflow, mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX);
var author$project$Document$DocumentViews$DocumentView$renderTable = F4(
	function (config, id, attrs, _n0) {
		var style = _n0.style;
		var nbrRows = _n0.nbrRows;
		var nbrCols = _n0.nbrCols;
		var data = _n0.data;
		var styleSheet = author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		var columns = A2(
			elm$core$List$map,
			function (ci) {
				return {
					header: mdgriffith$elm_ui$Element$none,
					view: F2(
						function (ri, row) {
							return A2(
								mdgriffith$elm_ui$Element$el,
								function (s) {
									return A2(
										elm$core$List$cons,
										mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
										s);
								}(
									A2(
										elm$core$Maybe$withDefault,
										_List_Nil,
										A2(
											elm$core$Maybe$map,
											function ($) {
												return $.containerStyle;
											},
											A2(elm$core$Dict$get, style, author$project$Document$DocumentViews$StyleSheets$tableStyles)))),
								A2(
									mdgriffith$elm_ui$Element$el,
									_Utils_ap(
										A2(
											elm$core$Maybe$withDefault,
											function (_n1) {
												return _List_Nil;
											},
											A2(
												elm$core$Maybe$map,
												function ($) {
													return $.cellStyle;
												},
												A2(elm$core$Dict$get, style, author$project$Document$DocumentViews$StyleSheets$tableStyles)))(ri),
										_List_fromArray(
											[
												A2(mdgriffith$elm_ui$Element$paddingXY, 15, 5),
												mdgriffith$elm_ui$Element$height(
												A2(mdgriffith$elm_ui$Element$minimum, 30, mdgriffith$elm_ui$Element$fill))
											])),
									A2(
										mdgriffith$elm_ui$Element$paragraph,
										_List_Nil,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text(
												A2(
													elm$core$Maybe$withDefault,
													'',
													A2(elm$core$Array$get, ci, row)))
											]))));
						}),
					width: mdgriffith$elm_ui$Element$fill
				};
			},
			A2(elm$core$List$range, 0, nbrCols - 1));
		return _List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$indexedTable,
				_Utils_ap(
					A2(
						elm$core$Maybe$withDefault,
						_List_Nil,
						A2(
							elm$core$Maybe$map,
							function ($) {
								return $.tableStyle;
							},
							A2(elm$core$Dict$get, style, author$project$Document$DocumentViews$StyleSheets$tableStyles))),
					_Utils_ap(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
								mdgriffith$elm_ui$Element$scrollbarX
							]),
						_Utils_ap(
							A2(author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
							A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs)))),
				{columns: columns, data: data})
			]);
	});
var author$project$PageEditor$Internals$DocumentEditorHelpers$buildYoutubeUrl = F2(
	function (src, videoMeta) {
		var params = function (s) {
			return (s === '') ? s : ('?' + s);
		}(
			A2(
				elm$core$String$join,
				'&',
				A2(
					elm$core$List$filterMap,
					elm$core$Basics$identity,
					_List_fromArray(
						[
							A2(
							elm$core$Maybe$map,
							function (n) {
								return 'start=' + elm$core$String$fromInt(n);
							},
							videoMeta.startAt),
							(!videoMeta.frameBorder) ? elm$core$Maybe$Just('frameborder=0') : elm$core$Maybe$Nothing,
							(!videoMeta.suggestions) ? elm$core$Maybe$Just('rel=0') : elm$core$Maybe$Nothing,
							(!videoMeta.controls) ? elm$core$Maybe$Just('controls=0') : elm$core$Maybe$Nothing,
							(!videoMeta.title) ? elm$core$Maybe$Just('showinfo=0') : elm$core$Maybe$Nothing
						]))));
		return 'https://www.youtube' + ((videoMeta.privacy ? '-nocookie' : '') + ('.com/embed/' + (src + params)));
	});
var elm$html$Html$Attributes$height = function (n) {
	return A2(
		_VirtualDom_attribute,
		'height',
		elm$core$String$fromInt(n));
};
var elm$html$Html$Attributes$width = function (n) {
	return A2(
		_VirtualDom_attribute,
		'width',
		elm$core$String$fromInt(n));
};
var author$project$Document$DocumentViews$DocumentView$renderVideo = F4(
	function (config, id, attrs, vidMeta) {
		var uid = id.uid;
		var docStyleId = id.docStyleId;
		var classes = id.classes;
		var styleSheet = author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		var attrs_ = _Utils_ap(
			A2(author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
			A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs));
		return _List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$el,
				attrs_,
				mdgriffith$elm_ui$Element$html(
					A2(
						elm$html$Html$iframe,
						_List_fromArray(
							[
								elm$html$Html$Attributes$src(
								A2(author$project$PageEditor$Internals$DocumentEditorHelpers$buildYoutubeUrl, vidMeta.src, vidMeta)),
								elm$html$Html$Attributes$width(vidMeta.size.videoWidth),
								elm$html$Html$Attributes$height(vidMeta.size.videoHeight),
								vidMeta.frameBorder ? author$project$Internals$CommonStyleHelpers$noHtmlAttr : A2(elm$html$Html$Attributes$attribute, 'frameborder', '0'),
								A2(elm$html$Html$Attributes$attribute, 'allowfullscreen', 'true'),
								A2(elm$html$Html$Attributes$attribute, 'allow', 'autoplay; encrypted-media')
							]),
						_List_Nil)))
			]);
	});
var author$project$Document$DocumentViews$DocumentView$renderWeatherWidget = F3(
	function (config, id, attrs) {
		var device = author$project$Document$DocumentViews$StyleSheets$getDevice(config);
		var widgetWidth = function () {
			var _n0 = device._class;
			switch (_n0.$) {
				case 'Phone':
					return mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill);
				case 'Tablet':
					return mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill);
				default:
					return mdgriffith$elm_ui$Element$width(
						mdgriffith$elm_ui$Element$px(300));
			}
		}();
		var containerWidth = author$project$Document$DocumentViews$StyleSheets$getContainerWidth(config);
		var maxWidth = containerWidth - 40;
		return _List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							widgetWidth,
							mdgriffith$elm_ui$Element$alignTop,
							mdgriffith$elm_ui$Element$centerX,
							mdgriffith$elm_ui$Element$spacing(10)
						]),
					_Utils_ap(
						A2(
							author$project$Document$DocumentViews$DocumentView$idStyle,
							author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config),
							id),
						A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				_List_fromArray(
					[
						A4(author$project$Document$DocumentViews$DocumentView$customHeading, config, 1, _List_Nil, 'METEO'),
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[mdgriffith$elm_ui$Element$centerX]),
						mdgriffith$elm_ui$Element$html(
							A2(
								elm$html$Html$iframe,
								_List_fromArray(
									[
										A2(elm$html$Html$Attributes$style, 'border-width', '0'),
										A2(elm$html$Html$Attributes$style, 'width', '300'),
										elm$html$Html$Attributes$src('/meteo.html')
									]),
								_List_Nil)))
					]))
			]);
	});
var author$project$Document$DocumentViews$DocumentView$renderColumn = F4(
	function (config, id, attrs, children) {
		var styleSheet = author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		return _List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					styleSheet.columnStyle,
					_Utils_ap(
						config.containersBkgColors ? _List_fromArray(
							[
								mdgriffith$elm_ui$Element$Background$color(
								A4(mdgriffith$elm_ui$Element$rgba, 0, 1, 0, 0.3))
							]) : _List_Nil,
						_Utils_ap(
							A2(author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
							_Utils_ap(
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(
										A2(mdgriffith$elm_ui$Element$maximum, config.width, mdgriffith$elm_ui$Element$fill)),
										mdgriffith$elm_ui$Element$alignTop
									]),
								A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))))),
				A2(
					elm$core$List$concatMap,
					author$project$Document$DocumentViews$DocumentView$renderDoc(config),
					children))
			]);
	});
var author$project$Document$DocumentViews$DocumentView$renderDoc = F2(
	function (config, document) {
		if (document.$ === 'Container') {
			var containerLabel = document.a.containerLabel;
			var id = document.a.id;
			var attrs = document.a.attrs;
			var children = document.b;
			switch (containerLabel.$) {
				case 'DocColumn':
					return A4(author$project$Document$DocumentViews$DocumentView$renderColumn, config, id, attrs, children);
				case 'DocRow':
					return A4(author$project$Document$DocumentViews$DocumentView$renderRow, config, id, attrs, children);
				case 'TextColumn':
					return A4(author$project$Document$DocumentViews$DocumentView$renderTextColumn, config, id, attrs, children);
				default:
					return A4(author$project$Document$DocumentViews$DocumentView$renderResponsiveBloc, config, id, attrs, children);
			}
		} else {
			var cellContent = document.a.cellContent;
			var id = document.a.id;
			var attrs = document.a.attrs;
			switch (cellContent.$) {
				case 'Image':
					var meta = cellContent.a;
					return A4(author$project$Document$DocumentViews$DocumentView$renderImage, config, id, attrs, meta);
				case 'Video':
					var meta = cellContent.a;
					return A4(author$project$Document$DocumentViews$DocumentView$renderVideo, config, id, attrs, meta);
				case 'BlockLinks':
					var meta = cellContent.a;
					return A4(author$project$Document$DocumentViews$DocumentView$renderBlockLinks, config, id, attrs, meta);
				case 'Fiches':
					var fichesId = cellContent.a;
					return A4(author$project$Document$DocumentViews$DocumentView$renderFiches, config, id, attrs, fichesId);
				case 'NewsBlock':
					return A3(author$project$Document$DocumentViews$DocumentView$renderNews, config, id, attrs);
				case 'TextBlock':
					var xs = cellContent.a;
					return A4(author$project$Document$DocumentViews$DocumentView$renderTextBlock, config, id, attrs, xs);
				case 'Table':
					var meta = cellContent.a;
					return A4(author$project$Document$DocumentViews$DocumentView$renderTable, config, id, attrs, meta);
				case 'CustomElement':
					var s = cellContent.a;
					return A4(author$project$Document$DocumentViews$DocumentView$renderCustomElement, config, id, attrs, s);
				case 'PictureLinks':
					var picLinks = cellContent.a;
					return A4(author$project$Document$DocumentViews$DocumentView$renderPictureLinks, config, id, attrs, picLinks);
				case 'Gallery':
					var galleryMeta = cellContent.a;
					return A4(author$project$Document$DocumentViews$DocumentView$renderGallery, config, id, attrs, galleryMeta);
				case 'CalendarWidget':
					return A3(author$project$Document$DocumentViews$DocumentView$renderCalendarWidget, config, id, attrs);
				case 'Calendar':
					return A3(author$project$Document$DocumentViews$DocumentView$renderCalendar, config, id, attrs);
				case 'WeatherWidget':
					return A3(author$project$Document$DocumentViews$DocumentView$renderWeatherWidget, config, id, attrs);
				case 'DronePanorama':
					return A3(author$project$Document$DocumentViews$DocumentView$renderDronePanorama, config, id, attrs);
				default:
					return A3(author$project$Document$DocumentViews$DocumentView$renderEmptyCell, config, id, attrs);
			}
		}
	});
var author$project$Document$DocumentViews$DocumentView$renderResponsiveBloc = F4(
	function (config, id, attrs, children) {
		var styleSheet = author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		return _List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					styleSheet.respBlocStyle,
					_Utils_ap(
						A2(author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
						A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				A2(
					elm$core$List$concatMap,
					author$project$Document$DocumentViews$DocumentView$renderDoc(config),
					children))
			]);
	});
var author$project$Document$DocumentViews$DocumentView$renderRow = F4(
	function (config, id, attrs, children) {
		var styleSheet = author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		return _List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					styleSheet.rowStyle,
					_Utils_ap(
						config.containersBkgColors ? _List_fromArray(
							[
								mdgriffith$elm_ui$Element$Background$color(
								A4(mdgriffith$elm_ui$Element$rgba, 1, 0, 0, 0.3))
							]) : _List_Nil,
						_Utils_ap(
							A2(author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
							A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs)))),
				A2(
					elm$core$List$concatMap,
					author$project$Document$DocumentViews$DocumentView$renderDoc(config),
					children))
			]);
	});
var author$project$Document$DocumentViews$DocumentView$renderTextColumn = F4(
	function (config, id, attrs, children) {
		var styleSheet = author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		return _List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$textColumn,
				_Utils_ap(
					styleSheet.textColumnStyle,
					_Utils_ap(
						config.containersBkgColors ? _List_fromArray(
							[
								mdgriffith$elm_ui$Element$Background$color(
								A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 0.3))
							]) : _List_Nil,
						_Utils_ap(
							A2(author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
							A2(author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs)))),
				A2(
					elm$core$List$concatMap,
					author$project$Document$DocumentViews$DocumentView$renderDoc(config),
					children))
			]);
	});
var author$project$Document$Document$OnCellClick = {$: 'OnCellClick'};
var author$project$Document$Document$OnContainerClick = {$: 'OnContainerClick'};
var author$project$Document$Document$OnContainerDblClick = {$: 'OnContainerDblClick'};
var author$project$Document$Document$OnContainerMouseOver = {$: 'OnContainerMouseOver'};
var author$project$Document$Document$OnNeighbourClick = {$: 'OnNeighbourClick'};
var author$project$Document$Document$ZipperAttr = F2(
	function (a, b) {
		return {$: 'ZipperAttr', a: a, b: b};
	});
var author$project$Document$Document$addAttrs = F2(
	function (doc, newAttrs) {
		if (doc.$ === 'Cell') {
			var lv = doc.a;
			var cellContent = lv.cellContent;
			var id = lv.id;
			var attrs = lv.attrs;
			return author$project$Document$Document$Cell(
				_Utils_update(
					lv,
					{
						attrs: _Utils_ap(newAttrs, attrs)
					}));
		} else {
			var nv = doc.a;
			var containerLabel = nv.containerLabel;
			var id = nv.id;
			var attrs = nv.attrs;
			var children = doc.b;
			return A2(
				author$project$Document$Document$Container,
				_Utils_update(
					nv,
					{
						attrs: _Utils_ap(newAttrs, attrs)
					}),
				children);
		}
	});
var author$project$Document$Document$toogleClass = F2(
	function (_class, document) {
		var newId = function (id) {
			return _Utils_update(
				id,
				{
					classes: A2(elm$core$Set$member, _class, id.classes) ? A2(elm$core$Set$remove, _class, id.classes) : A2(elm$core$Set$insert, _class, id.classes)
				});
		};
		if (document.$ === 'Container') {
			var nv = document.a;
			var children = document.b;
			return A2(
				author$project$Document$Document$Container,
				_Utils_update(
					nv,
					{
						id: newId(nv.id)
					}),
				children);
		} else {
			var lv = document.a;
			return author$project$Document$Document$Cell(
				_Utils_update(
					lv,
					{
						id: newId(lv.id)
					}));
		}
	});
var author$project$PageEditor$Internals$DocumentZipper$applyToContexts = F3(
	function (f, path, zipper) {
		var uid = author$project$Document$Document$getUid(
			author$project$PageEditor$Internals$DocumentZipper$extractDoc(zipper));
		var shouldNotApply = function (currentUid) {
			return A2(elm$core$List$member, currentUid, path) || _Utils_eq(currentUid, uid);
		};
		var helper = function (doc) {
			var currentUid = author$project$Document$Document$getUid(doc);
			if (doc.$ === 'Cell') {
				var lv = doc.a;
				return _Utils_eq(currentUid, uid) ? doc : f(doc);
			} else {
				var cv = doc.a;
				var xs = doc.b;
				return A2(elm$core$List$member, currentUid, path) ? (_Utils_eq(currentUid, uid) ? doc : A2(
					author$project$Document$Document$Container,
					cv,
					A2(elm$core$List$map, helper, xs))) : f(
					A2(
						author$project$Document$Document$Container,
						cv,
						A2(elm$core$List$map, helper, xs)));
			}
		};
		var document = author$project$PageEditor$Internals$DocumentZipper$extractDoc(
			author$project$PageEditor$Internals$DocumentZipper$rewind(zipper));
		return author$project$PageEditor$Internals$DocumentZipper$initZip(
			helper(document));
	});
var author$project$PageEditor$Internals$DocumentZipper$getPath = function (document) {
	var helper = F2(
		function (doc, acc) {
			helper:
			while (true) {
				var _n0 = author$project$PageEditor$Internals$DocumentZipper$zipUp(doc);
				if (_n0.$ === 'Nothing') {
					return _Utils_Tuple2(
						A2(
							elm$core$List$cons,
							author$project$Document$Document$getUid(
								author$project$PageEditor$Internals$DocumentZipper$extractDoc(doc)),
							acc),
						doc);
				} else {
					var parent = _n0.a;
					var $temp$doc = parent,
						$temp$acc = A2(
						elm$core$List$cons,
						author$project$Document$Document$getUid(
							author$project$PageEditor$Internals$DocumentZipper$extractDoc(doc)),
						acc);
					doc = $temp$doc;
					acc = $temp$acc;
					continue helper;
				}
			}
		});
	return A2(helper, document, _List_Nil);
};
var author$project$PageEditor$Internals$DocumentZipper$zipDownPath = F2(
	function (path, document) {
		zipDownPath:
		while (true) {
			if (!path.b) {
				return elm$core$Maybe$Just(document);
			} else {
				var uid = path.a;
				var xs = path.b;
				var _n1 = A2(
					author$project$PageEditor$Internals$DocumentZipper$zipDown,
					author$project$Document$Document$hasUid(uid),
					document);
				if (_n1.$ === 'Nothing') {
					return elm$core$Maybe$Nothing;
				} else {
					var child = _n1.a;
					var $temp$path = xs,
						$temp$document = child;
					path = $temp$path;
					document = $temp$document;
					continue zipDownPath;
				}
			}
		}
	});
var author$project$PageEditor$Internals$DocumentZipper$addZipperHandlers = function (dz) {
	var handlers = function (uid) {
		return _List_fromArray(
			[
				A2(author$project$Document$Document$ZipperAttr, uid, author$project$Document$Document$OnContainerClick),
				A2(author$project$Document$Document$ZipperAttr, uid, author$project$Document$Document$OnContainerDblClick),
				A2(author$project$Document$Document$ZipperAttr, uid, author$project$Document$Document$OnContainerMouseOver)
			]);
	};
	var addHandlersToChild = function (doc) {
		return A2(
			author$project$Document$Document$addAttrs,
			doc,
			handlers(
				author$project$Document$Document$getUid(doc)));
	};
	var addHandlerToNeighbours = function (doc) {
		var path = A2(
			elm$core$Maybe$withDefault,
			_List_Nil,
			elm$core$List$tail(
				author$project$PageEditor$Internals$DocumentZipper$getPath(doc).a));
		var newDoc = A3(
			author$project$PageEditor$Internals$DocumentZipper$applyToContexts,
			function (d) {
				return A2(
					author$project$Document$Document$addAttrs,
					d,
					_List_fromArray(
						[
							A2(
							author$project$Document$Document$ZipperAttr,
							author$project$Document$Document$getUid(d),
							author$project$Document$Document$OnNeighbourClick)
						]));
			},
			author$project$PageEditor$Internals$DocumentZipper$getPath(doc).a,
			doc);
		return A2(
			elm$core$Maybe$withDefault,
			doc,
			A2(author$project$PageEditor$Internals$DocumentZipper$zipDownPath, path, newDoc));
	};
	var _n0 = addHandlerToNeighbours(dz);
	var current = _n0.current;
	var contexts = _n0.contexts;
	var currentWithCssSelectors = A2(author$project$Document$Document$toogleClass, 'selected', current);
	if (currentWithCssSelectors.$ === 'Container') {
		var nv = currentWithCssSelectors.a;
		var children = currentWithCssSelectors.b;
		return {
			contexts: contexts,
			current: A2(
				author$project$Document$Document$Container,
				nv,
				A2(elm$core$List$map, addHandlersToChild, children))
		};
	} else {
		var lv = currentWithCssSelectors.a;
		var cellContent = lv.cellContent;
		var id = lv.id;
		var attrs = lv.attrs;
		var newCell = author$project$Document$Document$Cell(
			_Utils_update(
				lv,
				{
					attrs: A2(
						elm$core$List$cons,
						A2(author$project$Document$Document$ZipperAttr, id.uid, author$project$Document$Document$OnCellClick),
						attrs)
				}));
		return {contexts: contexts, current: newCell};
	}
};
var author$project$PageEditor$PageEditor$documentView = function (model) {
	return A2(
		mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$scrollbarY,
				mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
				mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
				mdgriffith$elm_ui$Element$htmlAttribute(
				elm$html$Html$Attributes$id('documentContainer')),
				function () {
				var _n0 = model.config.previewMode;
				switch (_n0.$) {
					case 'PreviewBigScreen':
						return mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill);
					case 'PreviewScreen':
						return mdgriffith$elm_ui$Element$width(
							mdgriffith$elm_ui$Element$px(980));
					case 'PreviewTablet':
						return mdgriffith$elm_ui$Element$width(
							mdgriffith$elm_ui$Element$px(800));
					default:
						return mdgriffith$elm_ui$Element$width(
							mdgriffith$elm_ui$Element$px(350));
				}
			}(),
				mdgriffith$elm_ui$Element$centerX
			]),
		A2(
			author$project$Document$DocumentViews$DocumentView$renderDoc,
			model.config,
			A2(
				author$project$Document$DocumentViews$DocumentResponsive$responsivePreFormat,
				model.config,
				author$project$PageEditor$Internals$DocumentZipper$extractDoc(
					author$project$PageEditor$Internals$DocumentZipper$rewind(
						author$project$PageEditor$Internals$DocumentZipper$addZipperHandlers(model.document))))));
};
var elm$svg$Svg$polygon = elm$svg$Svg$trustedNode('polygon');
var author$project$Internals$Icons$edit = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'edit',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$path,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$d('M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$polygon,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$points('18 2 22 6 12 16 8 16 8 12 18 2')
					]),
				_List_Nil)
			]));
};
var author$project$Internals$Icons$plusSquare = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'plus-square',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$rect,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x('3'),
						elm$svg$Svg$Attributes$y('3'),
						elm$svg$Svg$Attributes$width('18'),
						elm$svg$Svg$Attributes$height('18'),
						elm$svg$Svg$Attributes$rx('2'),
						elm$svg$Svg$Attributes$ry('2')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('12'),
						elm$svg$Svg$Attributes$y1('8'),
						elm$svg$Svg$Attributes$x2('12'),
						elm$svg$Svg$Attributes$y2('16')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('8'),
						elm$svg$Svg$Attributes$y1('12'),
						elm$svg$Svg$Attributes$x2('16'),
						elm$svg$Svg$Attributes$y2('12')
					]),
				_List_Nil)
			]));
};
var author$project$PageEditor$PageEditor$AddNewInside = {$: 'AddNewInside'};
var author$project$PageEditor$PageEditor$AddNewLeft = {$: 'AddNewLeft'};
var author$project$PageEditor$PageEditor$AddNewRight = {$: 'AddNewRight'};
var author$project$PageEditor$PageEditor$DeleteSelected = {$: 'DeleteSelected'};
var author$project$PageEditor$PageEditor$EditContainer = {$: 'EditContainer'};
var author$project$PageEditor$PageEditor$SwapLeft = {$: 'SwapLeft'};
var author$project$PageEditor$PageEditor$SwapRight = {$: 'SwapRight'};
var author$project$PageEditor$PageEditor$iconSize = 18;
var author$project$Document$DocumentViews$StyleSheets$PreviewBigScreen = {$: 'PreviewBigScreen'};
var author$project$Document$DocumentViews$StyleSheets$PreviewPhone = {$: 'PreviewPhone'};
var author$project$PageEditor$Internals$DocumentEditorHelpers$PageTreeEditorPlugin = function (a) {
	return {$: 'PageTreeEditorPlugin', a: a};
};
var author$project$PageEditor$PageEditor$Copy = {$: 'Copy'};
var author$project$PageEditor$PageEditor$Cut = {$: 'Cut'};
var author$project$PageEditor$PageEditor$MenuClick = {$: 'MenuClick'};
var author$project$PageEditor$PageEditor$Paste = {$: 'Paste'};
var author$project$PageEditor$PageEditor$SetEditorPlugin = function (a) {
	return {$: 'SetEditorPlugin', a: a};
};
var author$project$PageEditor$PageEditor$SetPreviewMode = function (a) {
	return {$: 'SetPreviewMode', a: a};
};
var author$project$PageEditor$PageEditor$ToogleCountainersColors = {$: 'ToogleCountainersColors'};
var author$project$PageEditor$PageEditor$TopEntryFocused = function (a) {
	return {$: 'TopEntryFocused', a: a};
};
var author$project$PageEditor$PageEditor$Undo = {$: 'Undo'};
var author$project$PageTreeEditor$PageTreeEditor$Open = {$: 'Open'};
var author$project$PageTreeEditor$PageTreeEditor$Save = {$: 'Save'};
var author$project$PageTreeEditor$PageTreeEditor$SaveAs = {$: 'SaveAs'};
var elm$html$Html$Events$onMouseEnter = function (msg) {
	return A2(
		elm$html$Html$Events$on,
		'mouseenter',
		elm$json$Json$Decode$succeed(msg));
};
var mdgriffith$elm_ui$Element$Events$onMouseEnter = A2(elm$core$Basics$composeL, mdgriffith$elm_ui$Internal$Model$Attr, elm$html$Html$Events$onMouseEnter);
var author$project$PageEditor$PageEditor$mainMenu = function (config) {
	var menuEntry = function (_n1) {
		var label = _n1.label;
		var msg = _n1.msg;
		var icon = _n1.icon;
		var isActive = _n1.isActive;
		var isSelected = _n1.isSelected;
		var isSelectable = _n1.isSelectable;
		return A2(
			mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						A2(mdgriffith$elm_ui$Element$paddingXY, 10, 5),
						mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Background$color(
								A3(mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
							])),
						mdgriffith$elm_ui$Element$spacing(5)
					]),
				isActive ? _List_fromArray(
					[
						mdgriffith$elm_ui$Element$Events$onClick(msg),
						mdgriffith$elm_ui$Element$pointer
					]) : _List_fromArray(
					[
						mdgriffith$elm_ui$Element$Font$color(
						A3(mdgriffith$elm_ui$Element$rgb, 0.7, 0.7, 0.7)),
						mdgriffith$elm_ui$Element$htmlAttribute(
						A2(elm$html$Html$Attributes$style, 'cursor', 'default'))
					])),
			isSelected ? _List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_Nil,
					mdgriffith$elm_ui$Element$html(
						author$project$Internals$Icons$checkSquare(15))),
					mdgriffith$elm_ui$Element$text(label)
				]) : (isSelectable ? _List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_Nil,
					mdgriffith$elm_ui$Element$html(
						author$project$Internals$Icons$square(15))),
					mdgriffith$elm_ui$Element$text(label)
				]) : _List_fromArray(
				[
					mdgriffith$elm_ui$Element$text(label)
				])));
	};
	var groupEntry = function (group) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(0),
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
				]),
			A2(elm$core$List$map, menuEntry, group));
	};
	var topEntry = function (_n0) {
		var label = _n0.a;
		var submenu = _n0.b;
		return A2(
			mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Background$color(
								A3(mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
							])),
						mdgriffith$elm_ui$Element$Events$onMouseEnter(
						author$project$PageEditor$PageEditor$TopEntryFocused(label)),
						mdgriffith$elm_ui$Element$Events$onClick(author$project$PageEditor$PageEditor$MenuClick),
						A2(mdgriffith$elm_ui$Element$paddingXY, 10, 5)
					]),
				(config.clicked && _Utils_eq(config.currentFocus, label)) ? _List_fromArray(
					[
						mdgriffith$elm_ui$Element$below(
						A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(5),
									A2(mdgriffith$elm_ui$Element$paddingXY, 0, 5),
									mdgriffith$elm_ui$Element$Background$color(
									A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
									mdgriffith$elm_ui$Element$Border$width(1),
									mdgriffith$elm_ui$Element$Border$color(
									A3(mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8))
								]),
							A2(
								elm$core$List$intersperse,
								A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
											mdgriffith$elm_ui$Element$Font$center,
											mdgriffith$elm_ui$Element$Border$widthEach(
											{bottom: 0, left: 0, right: 0, top: 1}),
											mdgriffith$elm_ui$Element$Border$color(
											A3(mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
										]),
									mdgriffith$elm_ui$Element$none),
								A2(elm$core$List$map, groupEntry, submenu)))),
						mdgriffith$elm_ui$Element$Background$color(
						A3(mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
					]) : _List_Nil),
			A2(
				mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[mdgriffith$elm_ui$Element$pointer]),
				mdgriffith$elm_ui$Element$text(label)));
	};
	var defEntry = {icon: elm$core$Maybe$Nothing, isActive: true, isSelectable: false, isSelected: false, label: '', msg: author$project$PageEditor$PageEditor$NoOp};
	var menuData = _List_fromArray(
		[
			_Utils_Tuple2(
			'Fichier',
			_List_fromArray(
				[
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{
							isActive: !config.isInPlugin,
							label: 'Ouvrir page',
							msg: author$project$PageEditor$PageEditor$SetEditorPlugin(
								elm$core$Maybe$Just(
									author$project$PageEditor$Internals$DocumentEditorHelpers$PageTreeEditorPlugin(author$project$PageTreeEditor$PageTreeEditor$Open)))
						}),
						_Utils_update(
						defEntry,
						{
							isActive: (!config.isInPlugin) && config.canSave,
							label: 'Enregistrer',
							msg: author$project$PageEditor$PageEditor$SetEditorPlugin(
								elm$core$Maybe$Just(
									author$project$PageEditor$Internals$DocumentEditorHelpers$PageTreeEditorPlugin(author$project$PageTreeEditor$PageTreeEditor$Save)))
						}),
						_Utils_update(
						defEntry,
						{
							isActive: !config.isInPlugin,
							label: 'Enregistrer sous',
							msg: author$project$PageEditor$PageEditor$SetEditorPlugin(
								elm$core$Maybe$Just(
									author$project$PageEditor$Internals$DocumentEditorHelpers$PageTreeEditorPlugin(author$project$PageTreeEditor$PageTreeEditor$SaveAs)))
						})
					]),
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{
							isActive: !config.isInPlugin,
							label: 'Sauvegarde cache',
							msg: author$project$PageEditor$PageEditor$SetEditorPlugin(
								elm$core$Maybe$Just(author$project$PageEditor$Internals$DocumentEditorHelpers$PersistencePlugin))
						})
					])
				])),
			_Utils_Tuple2(
			'Mise en page',
			_List_fromArray(
				[
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{isActive: !config.isInPlugin, label: 'Copier', msg: author$project$PageEditor$PageEditor$Copy}),
						_Utils_update(
						defEntry,
						{isActive: !config.isInPlugin, label: 'Couper', msg: author$project$PageEditor$PageEditor$Cut}),
						_Utils_update(
						defEntry,
						{isActive: (!config.clipboardEmpty) && (!config.isInPlugin), label: 'Coller', msg: author$project$PageEditor$PageEditor$Paste})
					]),
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{isActive: (!config.undoCacheEmpty) && (!config.isInPlugin), label: 'Annuler', msg: author$project$PageEditor$PageEditor$Undo})
					]),
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{isActive: (!config.isInPlugin) && (!config.selectionIsRoot), label: 'Supprimer'}),
						_Utils_update(
						defEntry,
						{isActive: (!config.isInPlugin) && ((!config.selectionIsContainer) && (!config.selectionIsRoot)), label: 'Modifier selection', msg: author$project$PageEditor$PageEditor$EditCell})
					])
				])),
			_Utils_Tuple2(
			'Affichage',
			_List_fromArray(
				[
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{
							isSelectable: true,
							isSelected: _Utils_eq(config.previewMode, author$project$Document$DocumentViews$StyleSheets$PreviewBigScreen),
							label: 'Grand écran',
							msg: author$project$PageEditor$PageEditor$SetPreviewMode(author$project$Document$DocumentViews$StyleSheets$PreviewBigScreen)
						}),
						_Utils_update(
						defEntry,
						{
							isSelectable: true,
							isSelected: _Utils_eq(config.previewMode, author$project$Document$DocumentViews$StyleSheets$PreviewScreen),
							label: 'Petit écran',
							msg: author$project$PageEditor$PageEditor$SetPreviewMode(author$project$Document$DocumentViews$StyleSheets$PreviewScreen)
						}),
						_Utils_update(
						defEntry,
						{
							isSelectable: true,
							isSelected: _Utils_eq(config.previewMode, author$project$Document$DocumentViews$StyleSheets$PreviewTablet),
							label: 'Tablette',
							msg: author$project$PageEditor$PageEditor$SetPreviewMode(author$project$Document$DocumentViews$StyleSheets$PreviewTablet)
						}),
						_Utils_update(
						defEntry,
						{
							isSelectable: true,
							isSelected: _Utils_eq(config.previewMode, author$project$Document$DocumentViews$StyleSheets$PreviewPhone),
							label: 'Téléphone',
							msg: author$project$PageEditor$PageEditor$SetPreviewMode(author$project$Document$DocumentViews$StyleSheets$PreviewPhone)
						})
					]),
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{isSelectable: true, isSelected: config.containersBkgColors, label: 'Couleurs conteneurs', msg: author$project$PageEditor$PageEditor$ToogleCountainersColors})
					]),
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{
							isActive: true,
							isSelectable: true,
							isSelected: _Utils_eq(config.season, author$project$Document$DocumentViews$StyleSheets$Spring),
							label: 'Printemps',
							msg: author$project$PageEditor$PageEditor$SetSeason(author$project$Document$DocumentViews$StyleSheets$Spring)
						}),
						_Utils_update(
						defEntry,
						{
							isActive: true,
							isSelectable: true,
							isSelected: _Utils_eq(config.season, author$project$Document$DocumentViews$StyleSheets$Summer),
							label: 'Eté',
							msg: author$project$PageEditor$PageEditor$SetSeason(author$project$Document$DocumentViews$StyleSheets$Summer)
						}),
						_Utils_update(
						defEntry,
						{
							isActive: true,
							isSelectable: true,
							isSelected: _Utils_eq(config.season, author$project$Document$DocumentViews$StyleSheets$Autumn),
							label: 'Automne',
							msg: author$project$PageEditor$PageEditor$SetSeason(author$project$Document$DocumentViews$StyleSheets$Autumn)
						}),
						_Utils_update(
						defEntry,
						{
							isActive: true,
							isSelectable: true,
							isSelected: _Utils_eq(config.season, author$project$Document$DocumentViews$StyleSheets$Winter),
							label: 'Hiver',
							msg: author$project$PageEditor$PageEditor$SetSeason(author$project$Document$DocumentViews$StyleSheets$Winter)
						})
					])
				])),
			_Utils_Tuple2(
			'Aide',
			_List_fromArray(
				[
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{isActive: false, label: 'A propos'})
					])
				]))
		]);
	return A2(
		mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
			]),
		A2(elm$core$List$map, topEntry, menuData));
};
var author$project$PageEditor$PageEditor$mainInterface = function (config) {
	var menuButtonStyle = function (isActive) {
		return _Utils_ap(
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$Border$rounded(5),
					mdgriffith$elm_ui$Element$Font$center,
					mdgriffith$elm_ui$Element$centerY,
					A2(mdgriffith$elm_ui$Element$paddingXY, 5, 3),
					mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Background$color(
							A3(mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95))
						]))
				]),
			isActive ? _List_fromArray(
				[mdgriffith$elm_ui$Element$pointer]) : _List_fromArray(
				[
					mdgriffith$elm_ui$Element$Font$color(
					A3(mdgriffith$elm_ui$Element$rgb, 0.7, 0.7, 0.7)),
					mdgriffith$elm_ui$Element$htmlAttribute(
					A2(elm$html$Html$Attributes$style, 'cursor', 'default'))
				]));
	};
	var interfaceButton = function (buttonConfig) {
		return A2(
			mdgriffith$elm_ui$Element$Input$button,
			menuButtonStyle(buttonConfig.isActive),
			{
				label: function () {
					var _n0 = buttonConfig.icons;
					if (!_n0.b) {
						return A2(
							mdgriffith$elm_ui$Element$el,
							_List_Nil,
							mdgriffith$elm_ui$Element$text(buttonConfig.labelText));
					} else {
						var icons_ = _n0;
						return A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$row,
									_List_Nil,
									A2(
										elm$core$List$map,
										function (i) {
											return A2(
												mdgriffith$elm_ui$Element$el,
												_List_Nil,
												mdgriffith$elm_ui$Element$html(i));
										},
										icons_)),
									mdgriffith$elm_ui$Element$text(buttonConfig.labelText)
								]));
					}
				}(),
				onPress: buttonConfig.isActive ? buttonConfig.msg : elm$core$Maybe$Nothing
			});
	};
	var defButtonConfig = {icons: _List_Nil, isActive: !config.isInPlugin, labelText: '', msg: elm$core$Maybe$Nothing};
	return A2(
		mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
				mdgriffith$elm_ui$Element$Font$size(15),
				mdgriffith$elm_ui$Element$htmlAttribute(
				elm$html$Html$Attributes$id('mainInterface'))
			]),
		_List_fromArray(
			[
				author$project$PageEditor$PageEditor$mainMenu(config),
				A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$spacing(15),
						A2(mdgriffith$elm_ui$Element$paddingXY, 15, 10),
						mdgriffith$elm_ui$Element$Background$color(
						A3(mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
					]),
				A2(
					elm$core$List$map,
					interfaceButton,
					_List_fromArray(
						[
							_Utils_update(
							defButtonConfig,
							{
								icons: _List_fromArray(
									[
										author$project$Internals$Icons$plusSquare(author$project$PageEditor$PageEditor$iconSize)
									]),
								isActive: (!config.isInPlugin) && config.selectionIsContainer,
								labelText: 'Ajouter',
								msg: elm$core$Maybe$Just(author$project$PageEditor$PageEditor$AddNewInside)
							}),
							_Utils_update(
							defButtonConfig,
							{
								icons: _List_fromArray(
									[
										author$project$Internals$Icons$plusSquare(author$project$PageEditor$PageEditor$iconSize),
										author$project$Internals$Icons$chevronsUp(author$project$PageEditor$PageEditor$iconSize)
									]),
								isActive: (!config.isInPlugin) && (!config.selectionIsRoot),
								labelText: 'Ajouter au dessus',
								msg: elm$core$Maybe$Just(author$project$PageEditor$PageEditor$AddNewLeft)
							}),
							_Utils_update(
							defButtonConfig,
							{
								icons: _List_fromArray(
									[
										author$project$Internals$Icons$plusSquare(author$project$PageEditor$PageEditor$iconSize),
										author$project$Internals$Icons$chevronsDown(author$project$PageEditor$PageEditor$iconSize)
									]),
								isActive: (!config.isInPlugin) && (!config.selectionIsRoot),
								labelText: 'Ajouter en dessous',
								msg: elm$core$Maybe$Just(author$project$PageEditor$PageEditor$AddNewRight)
							}),
							_Utils_update(
							defButtonConfig,
							{
								icons: _List_fromArray(
									[
										author$project$Internals$Icons$edit(author$project$PageEditor$PageEditor$iconSize)
									]),
								isActive: (!config.isInPlugin) && (!config.selectionIsRoot),
								labelText: 'Modifier',
								msg: config.selectionIsContainer ? elm$core$Maybe$Just(author$project$PageEditor$PageEditor$EditContainer) : elm$core$Maybe$Just(author$project$PageEditor$PageEditor$EditCell)
							}),
							_Utils_update(
							defButtonConfig,
							{
								icons: _List_fromArray(
									[
										author$project$Internals$Icons$xSquare(author$project$PageEditor$PageEditor$iconSize)
									]),
								isActive: (!config.isInPlugin) && (!config.selectionIsRoot),
								labelText: 'Supprimer',
								msg: elm$core$Maybe$Just(author$project$PageEditor$PageEditor$DeleteSelected)
							}),
							_Utils_update(
							defButtonConfig,
							{
								icons: _List_fromArray(
									[
										author$project$Internals$Icons$chevronsUp(author$project$PageEditor$PageEditor$iconSize)
									]),
								isActive: (!config.isInPlugin) && (!config.selectionIsRoot),
								labelText: 'Monter',
								msg: elm$core$Maybe$Just(author$project$PageEditor$PageEditor$SwapLeft)
							}),
							_Utils_update(
							defButtonConfig,
							{
								icons: _List_fromArray(
									[
										author$project$Internals$Icons$chevronsDown(author$project$PageEditor$PageEditor$iconSize)
									]),
								isActive: (!config.isInPlugin) && (!config.selectionIsRoot),
								labelText: 'Descendre',
								msg: elm$core$Maybe$Just(author$project$PageEditor$PageEditor$SwapRight)
							})
						])))
			]));
};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SelectBlock = function (a) {
	return {$: 'SelectBlock', a: a};
};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$blockLinksPreview = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$wrappedRow,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$height(
					A2(mdgriffith$elm_ui$Element$maximum, 600, mdgriffith$elm_ui$Element$fill)),
					mdgriffith$elm_ui$Element$scrollbarY
				]),
			A3(
				elm$core$Dict$foldr,
				F3(
					function (id, block, acc) {
						return A2(
							elm$core$List$cons,
							A2(
								mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$Events$onClick(
										model.externalMsg(
											author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SelectBlock(id))),
										_Utils_eq(
										model.selectedBlock,
										elm$core$Maybe$Just(id)) ? mdgriffith$elm_ui$Element$Border$shadow(
										{
											blur: 10,
											color: A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
											offset: _Utils_Tuple2(4, 4),
											size: 5
										}) : author$project$Internals$CommonStyleHelpers$noAttr,
										mdgriffith$elm_ui$Element$padding(7)
									]),
								A5(
									author$project$Document$DocumentViews$DocumentView$renderBlocksLinksMeta,
									1,
									config,
									{classes: elm$core$Set$empty, docStyleId: elm$core$Maybe$Nothing, htmlId: elm$core$Maybe$Nothing, uid: 0},
									_List_Nil,
									block)),
							acc);
					}),
				_List_Nil,
				model.blocks));
	});
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Quit = {$: 'Quit'};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SaveAndQuit = {$: 'SaveAndQuit'};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$bottomInterfaceView = A2(
	mdgriffith$elm_ui$Element$row,
	_List_fromArray(
		[
			mdgriffith$elm_ui$Element$spacing(15),
			mdgriffith$elm_ui$Element$paddingEach(
			{bottom: 15, left: 0, right: 0, top: 0})
		]),
	_List_fromArray(
		[
			A2(
			mdgriffith$elm_ui$Element$Input$button,
			author$project$Internals$CommonStyleHelpers$buttonStyle(true),
			{
				label: mdgriffith$elm_ui$Element$text('Quitter'),
				onPress: elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Quit)
			}),
			A2(
			mdgriffith$elm_ui$Element$Input$button,
			author$project$Internals$CommonStyleHelpers$buttonStyle(true),
			{
				label: mdgriffith$elm_ui$Element$text('Valider et Quitter'),
				onPress: elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SaveAndQuit)
			})
		]));
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$AddBlock = {$: 'AddBlock'};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$LabelPromptInput = function (a) {
	return {$: 'LabelPromptInput', a: a};
};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Move = function (a) {
	return {$: 'Move', a: a};
};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$RemoveBlock = {$: 'RemoveBlock'};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Right = {$: 'Right'};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SelectingImages = {$: 'SelectingImages'};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SelectingLink = {$: 'SelectingLink'};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SetSelector = function (a) {
	return {$: 'SetSelector', a: a};
};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$UpdateLabel = {$: 'UpdateLabel'};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ConfirmExternalLink = {$: 'ConfirmExternalLink'};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$DocLink = {$: 'DocLink'};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ExternalLink = {$: 'ExternalLink'};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ExternalLinkPromptInput = function (a) {
	return {$: 'ExternalLinkPromptInput', a: a};
};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SetLinkType = function (a) {
	return {$: 'SetLinkType', a: a};
};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ConfirmDocUrl = function (a) {
	return {$: 'ConfirmDocUrl', a: a};
};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$iconSize = 18;
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$chooseDocView = F5(
	function (model, renderConfig, fileExplorer, zone, logInfo) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 15, left: 0, right: 0, top: 0}),
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							A2(mdgriffith$elm_ui$Element$paddingXY, 15, 0)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_Nil,
							mdgriffith$elm_ui$Element$text('Document: ')),
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Font$family(
									_List_fromArray(
										[mdgriffith$elm_ui$Element$Font$monospace]))
								]),
							function (t) {
								return A2(
									mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$Font$family(
											_List_fromArray(
												[mdgriffith$elm_ui$Element$Font$monospace]))
										]),
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$text(t)
										]));
							}(
								A2(
									elm$core$Maybe$withDefault,
									'',
									A2(
										elm$core$Maybe$map,
										function (url) {
											return A2(elm$core$String$startsWith, '/baseDocumentaire', url) ? url : '';
										},
										A2(
											elm$core$Maybe$map,
											function ($) {
												return $.url;
											},
											A2(
												elm$core$Maybe$andThen,
												function (id) {
													return A2(elm$core$Dict$get, id, model.blocks);
												},
												model.selectedBlock))))))
						])),
					A2(
					author$project$FileExplorer$FileExplorer$view,
					{
						logInfo: logInfo,
						maxHeight: (renderConfig.height < 800) ? 400 : 500,
						mode: author$project$FileExplorer$FileExplorer$ReadOnly(author$project$FileExplorer$FileExplorer$DocsRoot),
						zone: zone
					},
					fileExplorer),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$padding(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Retour'),
								onPress: elm$core$Maybe$Just(
									model.externalMsg(
										author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SetSelector(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Closed)))
							}),
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									A2(mdgriffith$elm_ui$Element$paddingXY, 15, 0)
								]),
							A2(
								mdgriffith$elm_ui$Element$Input$button,
								_Utils_ap(
									author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(
											author$project$FileExplorer$FileExplorer$getSelectedDoc(fileExplorer),
											elm$core$Maybe$Nothing)),
									_List_fromArray(
										[mdgriffith$elm_ui$Element$alignTop])),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(5)
											]),
										_List_fromArray(
											[
												A2(
												mdgriffith$elm_ui$Element$el,
												_List_Nil,
												mdgriffith$elm_ui$Element$html(
													author$project$Internals$Icons$externalLink(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$iconSize))),
												A2(
												mdgriffith$elm_ui$Element$el,
												_List_Nil,
												mdgriffith$elm_ui$Element$text('Valider'))
											])),
									onPress: A2(
										elm$core$Maybe$map,
										A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ConfirmDocUrl),
										author$project$FileExplorer$FileExplorer$getSelectedDoc(fileExplorer))
								}))
						]))
				]));
	});
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ConfirmInternalPageUrl = function (a) {
	return {$: 'ConfirmInternalPageUrl', a: a};
};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$chooseInternalPageView = F5(
	function (model, renderConfig, pageTreeEditor, zone, logInfo) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 15, left: 0, right: 0, top: 0}),
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							A2(mdgriffith$elm_ui$Element$paddingXY, 15, 0)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_Nil,
							mdgriffith$elm_ui$Element$text('Url: ')),
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Font$family(
									_List_fromArray(
										[mdgriffith$elm_ui$Element$Font$monospace]))
								]),
							mdgriffith$elm_ui$Element$text(
								A2(
									elm$core$Maybe$withDefault,
									'',
									A2(
										elm$core$Maybe$andThen,
										function (url) {
											return A2(author$project$PageTreeEditor$PageTreeEditor$getPathFromId, pageTreeEditor, url);
										},
										A2(
											elm$core$Maybe$map,
											function ($) {
												return $.url;
											},
											A2(
												elm$core$Maybe$andThen,
												function (id) {
													return A2(elm$core$Dict$get, id, model.blocks);
												},
												model.selectedBlock))))))
						])),
					A2(
					author$project$PageTreeEditor$PageTreeEditor$view,
					{
						logInfo: logInfo,
						maxHeight: (renderConfig.height < 800) ? 400 : 500,
						mode: author$project$PageTreeEditor$PageTreeEditor$Select,
						zone: zone
					},
					pageTreeEditor),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$padding(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Retour'),
								onPress: elm$core$Maybe$Just(
									model.externalMsg(
										author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SetSelector(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Closed)))
							}),
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									A2(mdgriffith$elm_ui$Element$paddingXY, 15, 0)
								]),
							A2(
								mdgriffith$elm_ui$Element$Input$button,
								_Utils_ap(
									author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(
											author$project$PageTreeEditor$PageTreeEditor$internalPageSelectedPageInfo(pageTreeEditor),
											elm$core$Maybe$Nothing)),
									_List_fromArray(
										[mdgriffith$elm_ui$Element$alignTop])),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(5)
											]),
										_List_fromArray(
											[
												A2(
												mdgriffith$elm_ui$Element$el,
												_List_Nil,
												mdgriffith$elm_ui$Element$html(
													author$project$Internals$Icons$externalLink(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$iconSize))),
												A2(
												mdgriffith$elm_ui$Element$el,
												_List_Nil,
												mdgriffith$elm_ui$Element$text('Valider'))
											])),
									onPress: A2(
										elm$core$Maybe$map,
										A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ConfirmInternalPageUrl),
										A2(
											elm$core$Maybe$map,
											TSFoster$elm_uuid$UUID$canonical,
											A2(
												elm$core$Maybe$andThen,
												function ($) {
													return $.mbContentId;
												},
												author$project$PageTreeEditor$PageTreeEditor$internalPageSelectedPageInfo(pageTreeEditor))))
								}))
						]))
				]));
	});
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SelectImage = function (a) {
	return {$: 'SelectImage', a: a};
};
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$imagePickerView = F3(
	function (config, renderConfig, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 15, left: 0, right: 0, top: 0})
				]),
			_List_fromArray(
				[
					A2(
					author$project$FileExplorer$FileExplorer$view,
					{
						logInfo: config.logInfo,
						maxHeight: (renderConfig.height < 800) ? 400 : 500,
						mode: author$project$FileExplorer$FileExplorer$ReadWrite(author$project$FileExplorer$FileExplorer$ImagesRoot),
						zone: config.zone
					},
					config.fileExplorer),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15),
							A2(mdgriffith$elm_ui$Element$paddingXY, 15, 0)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Retour'),
								onPress: elm$core$Maybe$Just(
									model.externalMsg(
										author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SetSelector(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Closed)))
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(
									author$project$FileExplorer$FileExplorer$getSelectedImage(config.fileExplorer),
									elm$core$Maybe$Nothing)),
							{
								label: mdgriffith$elm_ui$Element$text('Valider'),
								onPress: A2(
									elm$core$Maybe$map,
									A2(
										elm$core$Basics$composeL,
										A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SelectImage),
										function ($) {
											return $.src;
										}),
									author$project$FileExplorer$FileExplorer$getSelectedImage(config.fileExplorer))
							})
						]))
				]));
	});
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$dropDownView = F3(
	function (config, renderConfig, model) {
		var _n0 = model.selector;
		switch (_n0.$) {
			case 'SelectingImages':
				return A3(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$imagePickerView, config, renderConfig, model);
			case 'SelectingLink':
				return A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15),
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$radioRow,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$padding(15),
									mdgriffith$elm_ui$Element$spacing(15)
								]),
							{
								label: mdgriffith$elm_ui$Element$Input$labelHidden(''),
								onChange: A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SetLinkType),
								options: _List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$Input$option,
										author$project$PageEditor$EditorPlugins$BlockLinksPlugin$InternalLink,
										mdgriffith$elm_ui$Element$text('Lien interne')),
										A2(
										mdgriffith$elm_ui$Element$Input$option,
										author$project$PageEditor$EditorPlugins$BlockLinksPlugin$DocLink,
										mdgriffith$elm_ui$Element$text('Lien document')),
										A2(
										mdgriffith$elm_ui$Element$Input$option,
										author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ExternalLink,
										mdgriffith$elm_ui$Element$text('Lien externe'))
									]),
								selected: elm$core$Maybe$Just(model.linkType)
							}),
							function () {
							var _n1 = model.linkType;
							switch (_n1.$) {
								case 'InternalLink':
									return A5(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$chooseInternalPageView, model, renderConfig, config.pageTreeEditor, config.zone, config.logInfo);
								case 'DocLink':
									return A5(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$chooseDocView, model, renderConfig, config.fileExplorer, config.zone, config.logInfo);
								default:
									return A2(
										mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(15),
												mdgriffith$elm_ui$Element$padding(15)
											]),
										_List_fromArray(
											[
												A2(
												mdgriffith$elm_ui$Element$row,
												_List_fromArray(
													[
														mdgriffith$elm_ui$Element$spacing(15)
													]),
												_List_fromArray(
													[
														A2(
														mdgriffith$elm_ui$Element$Input$text,
														_Utils_ap(
															author$project$Internals$CommonStyleHelpers$textInputStyle,
															_List_fromArray(
																[
																	mdgriffith$elm_ui$Element$width(
																	mdgriffith$elm_ui$Element$px(300))
																])),
														{
															label: A2(
																mdgriffith$elm_ui$Element$Input$labelLeft,
																_List_fromArray(
																	[mdgriffith$elm_ui$Element$centerY]),
																A2(
																	mdgriffith$elm_ui$Element$el,
																	_List_Nil,
																	mdgriffith$elm_ui$Element$text('Url lien externe: '))),
															onChange: A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ExternalLinkPromptInput),
															placeholder: elm$core$Maybe$Nothing,
															text: _Utils_eq(model.externalLinkInput, elm$core$Maybe$Nothing) ? A2(
																elm$core$Maybe$withDefault,
																'',
																A2(
																	elm$core$Maybe$map,
																	function (block) {
																		return block.targetBlank ? block.url : '';
																	},
																	A2(
																		elm$core$Maybe$andThen,
																		function (id) {
																			return A2(elm$core$Dict$get, id, model.blocks);
																		},
																		model.selectedBlock))) : A2(elm$core$Maybe$withDefault, '', model.externalLinkInput)
														})
													])),
												A2(
												mdgriffith$elm_ui$Element$row,
												_List_fromArray(
													[
														mdgriffith$elm_ui$Element$spacing(15)
													]),
												_List_fromArray(
													[
														A2(
														mdgriffith$elm_ui$Element$Input$button,
														author$project$Internals$CommonStyleHelpers$buttonStyle(true),
														{
															label: mdgriffith$elm_ui$Element$text('Retour'),
															onPress: elm$core$Maybe$Just(
																model.externalMsg(
																	author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SetSelector(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Closed)))
														}),
														A2(
														mdgriffith$elm_ui$Element$Input$button,
														author$project$Internals$CommonStyleHelpers$buttonStyle(
															!_Utils_eq(model.externalLinkInput, elm$core$Maybe$Nothing)),
														{
															label: mdgriffith$elm_ui$Element$text('Valider'),
															onPress: A2(
																elm$core$Maybe$map,
																function (_n2) {
																	return model.externalMsg(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ConfirmExternalLink);
																},
																model.externalLinkInput)
														})
													]))
											]));
							}
						}()
						]));
			default:
				return mdgriffith$elm_ui$Element$none;
		}
	});
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$topInterfaceView = F3(
	function (config, renderConfig, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$below(
					_Utils_eq(model.selector, author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Closed) ? mdgriffith$elm_ui$Element$none : A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Background$color(
								A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
								mdgriffith$elm_ui$Element$width(
								A2(
									mdgriffith$elm_ui$Element$minimum,
									850,
									A2(mdgriffith$elm_ui$Element$maximum, 920, mdgriffith$elm_ui$Element$shrink))),
								mdgriffith$elm_ui$Element$Border$shadow(
								{
									blur: 10,
									color: A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
									offset: _Utils_Tuple2(4, 4),
									size: 5
								})
							]),
						A3(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$dropDownView, config, renderConfig, model)))
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$text,
							_Utils_ap(
								author$project$Internals$CommonStyleHelpers$textInputStyle,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(300))
									])),
							{
								label: A2(
									mdgriffith$elm_ui$Element$Input$labelLeft,
									_List_Nil,
									A2(
										mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[mdgriffith$elm_ui$Element$centerY]),
										mdgriffith$elm_ui$Element$text('Nom du bloc: '))),
								onChange: A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$EditorPlugins$BlockLinksPlugin$LabelPromptInput),
								placeholder: elm$core$Maybe$Nothing,
								text: _Utils_eq(model.labelPromptInput, elm$core$Maybe$Nothing) ? A2(
									elm$core$Maybe$withDefault,
									'',
									A2(
										elm$core$Maybe$map,
										function ($) {
											return $.label;
										},
										A2(
											elm$core$Maybe$andThen,
											function (id) {
												return A2(elm$core$Dict$get, id, model.blocks);
											},
											model.selectedBlock))) : A2(elm$core$Maybe$withDefault, '', model.labelPromptInput)
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(model.labelPromptInput, elm$core$Maybe$Nothing)),
							{
								label: mdgriffith$elm_ui$Element$text('Valider'),
								onPress: elm$core$Maybe$Just(
									model.externalMsg(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$UpdateLabel))
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								(!_Utils_eq(model.selectedBlock, elm$core$Maybe$Nothing)) && _Utils_eq(model.selector, author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Closed)),
							{
								label: mdgriffith$elm_ui$Element$text('Modifier Image'),
								onPress: A2(
									elm$core$Maybe$map,
									function (_n0) {
										return model.externalMsg(
											author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SetSelector(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SelectingImages));
									},
									model.selectedBlock)
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								(!_Utils_eq(model.selectedBlock, elm$core$Maybe$Nothing)) && _Utils_eq(model.selector, author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Closed)),
							{
								label: mdgriffith$elm_ui$Element$text('Modifier lien'),
								onPress: A2(
									elm$core$Maybe$map,
									function (_n1) {
										return model.externalMsg(
											author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SetSelector(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SelectingLink));
									},
									model.selectedBlock)
							})
						])),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Nouveau bloc'),
								onPress: elm$core$Maybe$Just(
									model.externalMsg(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$AddBlock))
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(model.selectedBlock, elm$core$Maybe$Nothing)),
							{
								label: mdgriffith$elm_ui$Element$text('Supprimer bloc'),
								onPress: A2(
									elm$core$Maybe$map,
									function (_n2) {
										return model.externalMsg(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$RemoveBlock);
									},
									model.selectedBlock)
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(model.selectedBlock, elm$core$Maybe$Nothing)),
							{
								label: mdgriffith$elm_ui$Element$text('Déplacer à gauche'),
								onPress: A2(
									elm$core$Maybe$map,
									function (_n3) {
										return model.externalMsg(
											author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Move(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Left));
									},
									model.selectedBlock)
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(model.selectedBlock, elm$core$Maybe$Nothing)),
							{
								label: mdgriffith$elm_ui$Element$text('Déplacer à droite'),
								onPress: A2(
									elm$core$Maybe$map,
									function (_n4) {
										return model.externalMsg(
											author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Move(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Right));
									},
									model.selectedBlock)
							})
						]))
				]));
	});
var author$project$PageEditor$EditorPlugins$BlockLinksPlugin$view = F3(
	function (config, renderConfig, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$spacing(15),
					mdgriffith$elm_ui$Element$padding(15),
					mdgriffith$elm_ui$Element$alignTop,
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A3(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$topInterfaceView, config, renderConfig, model),
					A2(author$project$PageEditor$EditorPlugins$BlockLinksPlugin$blockLinksPreview, renderConfig, model),
					A2(mdgriffith$elm_ui$Element$map, model.externalMsg, author$project$PageEditor$EditorPlugins$BlockLinksPlugin$bottomInterfaceView)
				]));
	});
var author$project$PageEditor$EditorPlugins$ContainerEditPlugin$containerLabelToString = function (cl) {
	switch (cl.$) {
		case 'DocColumn':
			return 'colonne';
		case 'DocRow':
			return 'ligne';
		case 'TextColumn':
			return 'colonne de texte';
		default:
			return 'bloc réactif';
	}
};
var author$project$PageEditor$EditorPlugins$ContainerEditPlugin$itemStyle = _List_fromArray(
	[
		mdgriffith$elm_ui$Element$padding(15),
		mdgriffith$elm_ui$Element$spacing(15),
		mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey7),
		mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var author$project$PageEditor$EditorPlugins$ContainerEditPlugin$changeContainerTypeView = function (config) {
	var containerLabel = config.currentContainer.containerLabel;
	return A2(
		mdgriffith$elm_ui$Element$column,
		author$project$PageEditor$EditorPlugins$ContainerEditPlugin$itemStyle,
		_List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[mdgriffith$elm_ui$Element$Font$bold]),
				mdgriffith$elm_ui$Element$text('Modification du type de containeur: ')),
				mdgriffith$elm_ui$Element$text(
				'Transformer ' + (author$project$PageEditor$EditorPlugins$ContainerEditPlugin$containerLabelToString(containerLabel) + ' en: ')),
				A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						author$project$Internals$CommonStyleHelpers$buttonStyle(
							!_Utils_eq(containerLabel, author$project$Document$Document$DocColumn)),
						{
							label: A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(10)
									]),
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$text('Colonne')
									])),
							onPress: (!_Utils_eq(containerLabel, author$project$Document$Document$DocColumn)) ? elm$core$Maybe$Just(
								config.swapContainerType(author$project$Document$Document$DocColumn)) : elm$core$Maybe$Nothing
						}),
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						author$project$Internals$CommonStyleHelpers$buttonStyle(
							!_Utils_eq(containerLabel, author$project$Document$Document$DocRow)),
						{
							label: A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(10)
									]),
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$text('Ligne')
									])),
							onPress: (!_Utils_eq(containerLabel, author$project$Document$Document$DocRow)) ? elm$core$Maybe$Just(
								config.swapContainerType(author$project$Document$Document$DocRow)) : elm$core$Maybe$Nothing
						}),
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						author$project$Internals$CommonStyleHelpers$buttonStyle(
							!_Utils_eq(containerLabel, author$project$Document$Document$TextColumn)),
						{
							label: A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(10)
									]),
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$text('Colonne de texte')
									])),
							onPress: (!_Utils_eq(containerLabel, author$project$Document$Document$TextColumn)) ? elm$core$Maybe$Just(
								config.swapContainerType(author$project$Document$Document$TextColumn)) : elm$core$Maybe$Nothing
						})
					]))
			]));
};
var author$project$PageEditor$EditorPlugins$ContainerEditPlugin$changeContainerWidthView = function (config) {
	var attrs = config.currentContainer.attrs;
	return A2(
		mdgriffith$elm_ui$Element$column,
		_Utils_ap(author$project$PageEditor$EditorPlugins$ContainerEditPlugin$itemStyle, _List_Nil),
		_List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[mdgriffith$elm_ui$Element$Font$bold]),
				mdgriffith$elm_ui$Element$text('Adapter la largeur du containeur au: ')),
				A2(
				mdgriffith$elm_ui$Element$Input$radioRow,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				{
					label: mdgriffith$elm_ui$Element$Input$labelHidden(''),
					onChange: config.updateContainerAttr,
					options: _List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$option,
							_Utils_Tuple2(
								elm$core$Maybe$Just(author$project$Document$Document$WidthShrink),
								elm$core$Maybe$Just(author$project$Document$Document$WidthFill)),
							mdgriffith$elm_ui$Element$text('contenant')),
							A2(
							mdgriffith$elm_ui$Element$Input$option,
							_Utils_Tuple2(
								elm$core$Maybe$Just(author$project$Document$Document$WidthFill),
								elm$core$Maybe$Just(author$project$Document$Document$WidthShrink)),
							mdgriffith$elm_ui$Element$text('contenu'))
						]),
					selected: A2(elm$core$List$member, author$project$Document$Document$WidthShrink, attrs) ? elm$core$Maybe$Just(
						_Utils_Tuple2(
							elm$core$Maybe$Just(author$project$Document$Document$WidthFill),
							elm$core$Maybe$Just(author$project$Document$Document$WidthShrink))) : elm$core$Maybe$Just(
						_Utils_Tuple2(
							elm$core$Maybe$Just(author$project$Document$Document$WidthShrink),
							elm$core$Maybe$Just(author$project$Document$Document$WidthFill)))
				})
			]));
};
var author$project$PageEditor$EditorPlugins$ContainerEditPlugin$containerStyle = _List_fromArray(
	[
		mdgriffith$elm_ui$Element$padding(15),
		mdgriffith$elm_ui$Element$spacing(15),
		mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey6),
		mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var author$project$PageEditor$EditorPlugins$ContainerEditPlugin$view = function (config) {
	return A2(
		mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$padding(15),
				mdgriffith$elm_ui$Element$alignTop
			]),
		A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				author$project$PageEditor$EditorPlugins$ContainerEditPlugin$containerStyle,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$Font$size(16)
					])),
			_List_fromArray(
				[
					author$project$PageEditor$EditorPlugins$ContainerEditPlugin$changeContainerTypeView(config),
					author$project$PageEditor$EditorPlugins$ContainerEditPlugin$changeContainerWidthView(config),
					A2(
					mdgriffith$elm_ui$Element$Input$button,
					author$project$Internals$CommonStyleHelpers$buttonStyle(true),
					{
						label: A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$text('Retour')
								])),
						onPress: elm$core$Maybe$Just(config.goBack)
					})
				])));
};
var author$project$PageEditor$EditorPlugins$FichesPlugin$Quit = {$: 'Quit'};
var author$project$PageEditor$EditorPlugins$FichesPlugin$SaveAndQuit = {$: 'SaveAndQuit'};
var author$project$PageEditor$EditorPlugins$FichesPlugin$FilterByActiv = function (a) {
	return {$: 'FilterByActiv', a: a};
};
var author$project$PageEditor$EditorPlugins$FichesPlugin$formItemStyle = _List_fromArray(
	[
		mdgriffith$elm_ui$Element$padding(15),
		mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey7),
		mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var author$project$PageEditor$EditorPlugins$FichesPlugin$selectView = F4(
	function (isFicheData, selected, handler, entry) {
		return A2(
			mdgriffith$elm_ui$Element$Keyed$el,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					A2(mdgriffith$elm_ui$Element$paddingXY, 5, 5),
					mdgriffith$elm_ui$Element$Events$onClick(handler),
					mdgriffith$elm_ui$Element$pointer,
					_Utils_eq(
					elm$core$Maybe$Just(entry),
					selected) ? mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey4) : author$project$Internals$CommonStyleHelpers$noAttr,
					isFicheData ? mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$teal3) : mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey2)
				]),
			_Utils_Tuple2(
				entry,
				mdgriffith$elm_ui$Element$text(entry)));
	});
var author$project$PageEditor$EditorPlugins$FichesPlugin$activSelector = F2(
	function (_n0, model) {
		var genDirEditor = _n0.genDirEditor;
		var activites = author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeActivs(
			author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$fichesData(genDirEditor));
		return A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$alignTop
					]),
				author$project$PageEditor$EditorPlugins$FichesPlugin$formItemStyle),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Font$bold,
							mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
						]),
					mdgriffith$elm_ui$Element$text('Activités disponibles')),
					A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Border$width(2),
							mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
							mdgriffith$elm_ui$Element$width(
							mdgriffith$elm_ui$Element$px(350)),
							mdgriffith$elm_ui$Element$height(
							mdgriffith$elm_ui$Element$px(200)),
							mdgriffith$elm_ui$Element$scrollbars
						]),
					A2(
						elm$core$List$map,
						function (e) {
							return A4(
								author$project$PageEditor$EditorPlugins$FichesPlugin$selectView,
								false,
								model.activFilter,
								author$project$PageEditor$EditorPlugins$FichesPlugin$FilterByActiv(e),
								e);
						},
						elm$core$Set$toList(activites)))
				]));
	});
var author$project$PageEditor$EditorPlugins$FichesPlugin$FilterByCat = function (a) {
	return {$: 'FilterByCat', a: a};
};
var author$project$PageEditor$EditorPlugins$FichesPlugin$catSelector = F2(
	function (_n0, model) {
		var genDirEditor = _n0.genDirEditor;
		var categories = author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeCats(
			author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$fichesData(genDirEditor));
		return A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$alignTop
					]),
				author$project$PageEditor$EditorPlugins$FichesPlugin$formItemStyle),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Font$bold,
							mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
						]),
					mdgriffith$elm_ui$Element$text('Catégories disponibles')),
					A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Border$width(2),
							mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
							mdgriffith$elm_ui$Element$width(
							mdgriffith$elm_ui$Element$px(150)),
							mdgriffith$elm_ui$Element$height(
							mdgriffith$elm_ui$Element$px(200)),
							mdgriffith$elm_ui$Element$scrollbars
						]),
					A2(
						elm$core$List$map,
						function (e) {
							return A4(
								author$project$PageEditor$EditorPlugins$FichesPlugin$selectView,
								false,
								model.catFilter,
								author$project$PageEditor$EditorPlugins$FichesPlugin$FilterByCat(e),
								e);
						},
						elm$core$Set$toList(categories)))
				]));
	});
var author$project$PageEditor$EditorPlugins$FichesPlugin$containerStyle = _List_fromArray(
	[
		mdgriffith$elm_ui$Element$padding(15),
		mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey6),
		mdgriffith$elm_ui$Element$Border$rounded(5),
		mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
	]);
var author$project$PageEditor$EditorPlugins$FichesPlugin$All = {$: 'All'};
var author$project$PageEditor$EditorPlugins$FichesPlugin$GroupSel = function (a) {
	return {$: 'GroupSel', a: a};
};
var author$project$PageEditor$EditorPlugins$FichesPlugin$None = {$: 'None'};
var author$project$PageEditor$EditorPlugins$FichesPlugin$ToogleFiche = function (a) {
	return {$: 'ToogleFiche', a: a};
};
var author$project$PageEditor$EditorPlugins$FichesPlugin$checkView = F3(
	function (isChecked, ficheId, entry) {
		return A2(
			mdgriffith$elm_ui$Element$Keyed$row,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					A2(mdgriffith$elm_ui$Element$paddingXY, 5, 5),
					mdgriffith$elm_ui$Element$pointer,
					mdgriffith$elm_ui$Element$Events$onClick(
					author$project$PageEditor$EditorPlugins$FichesPlugin$ToogleFiche(ficheId)),
					mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey4)
						])),
					mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					_Utils_Tuple2(
					entry,
					isChecked ? A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
							]),
						mdgriffith$elm_ui$Element$html(
							author$project$Internals$Icons$checkSquare(18))) : A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
							]),
						mdgriffith$elm_ui$Element$html(
							author$project$Internals$Icons$square(18)))),
					_Utils_Tuple2(
					entry,
					A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey2)
							]),
						mdgriffith$elm_ui$Element$text(entry)))
				]));
	});
var author$project$PageEditor$EditorPlugins$FichesPlugin$ficheSelector = F2(
	function (config, model) {
		var isChecked = function (fId) {
			return A2(elm$core$Set$member, fId, model.selectedFiches);
		};
		return A2(
			mdgriffith$elm_ui$Element$column,
			author$project$PageEditor$EditorPlugins$FichesPlugin$containerStyle,
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						author$project$PageEditor$EditorPlugins$FichesPlugin$formItemStyle,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15),
								mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
							])),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[mdgriffith$elm_ui$Element$Font$bold]),
							mdgriffith$elm_ui$Element$text('Nom fiche entité')),
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Border$width(2),
									mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
									mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
									mdgriffith$elm_ui$Element$height(
									mdgriffith$elm_ui$Element$px(480)),
									mdgriffith$elm_ui$Element$scrollbars
								]),
							A2(
								elm$core$List$map,
								function (_n1) {
									var k = _n1.a;
									var n = _n1.b;
									return A3(
										author$project$PageEditor$EditorPlugins$FichesPlugin$checkView,
										isChecked(k),
										k,
										n);
								},
								A2(
									elm$core$List$map,
									function (_n0) {
										var k = _n0.a;
										var v = _n0.b;
										return _Utils_Tuple2(k, v.nomEntite);
									},
									A2(author$project$PageEditor$EditorPlugins$FichesPlugin$filteredFiches, config, model))))
						])),
					A2(
					mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15),
								mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
							]),
						author$project$PageEditor$EditorPlugins$FichesPlugin$formItemStyle),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$Font$bold,
									mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
								]),
							mdgriffith$elm_ui$Element$text('Sélection groupée')),
							A2(
							mdgriffith$elm_ui$Element$Input$radioRow,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15)
								]),
							{
								label: mdgriffith$elm_ui$Element$Input$labelHidden(''),
								onChange: author$project$PageEditor$EditorPlugins$FichesPlugin$GroupSel,
								options: _List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$Input$option,
										author$project$PageEditor$EditorPlugins$FichesPlugin$All,
										mdgriffith$elm_ui$Element$text('Tout')),
										A2(
										mdgriffith$elm_ui$Element$Input$option,
										author$project$PageEditor$EditorPlugins$FichesPlugin$None,
										mdgriffith$elm_ui$Element$text('Rien'))
									]),
								selected: model.groupSel
							})
						]))
				]));
	});
var author$project$PageEditor$EditorPlugins$FichesPlugin$FilterByLabel = function (a) {
	return {$: 'FilterByLabel', a: a};
};
var author$project$PageEditor$EditorPlugins$FichesPlugin$labelSelector = F2(
	function (_n0, model) {
		var genDirEditor = _n0.genDirEditor;
		var labels = author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeLabels(
			author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$fichesData(genDirEditor));
		return A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$alignTop
					]),
				author$project$PageEditor$EditorPlugins$FichesPlugin$formItemStyle),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Font$bold,
							mdgriffith$elm_ui$Element$Font$color(author$project$Internals$CommonStyleHelpers$grey1)
						]),
					mdgriffith$elm_ui$Element$text('Labels disponibles')),
					A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$Border$width(2),
							mdgriffith$elm_ui$Element$Border$color(author$project$Internals$CommonStyleHelpers$grey3),
							mdgriffith$elm_ui$Element$width(
							mdgriffith$elm_ui$Element$px(150)),
							mdgriffith$elm_ui$Element$height(
							mdgriffith$elm_ui$Element$px(200)),
							mdgriffith$elm_ui$Element$scrollbars
						]),
					A2(
						elm$core$List$map,
						function (e) {
							return A4(
								author$project$PageEditor$EditorPlugins$FichesPlugin$selectView,
								false,
								model.labelFilter,
								author$project$PageEditor$EditorPlugins$FichesPlugin$FilterByLabel(e),
								e);
						},
						A2(
							elm$core$List$map,
							function ($) {
								return $.nom;
							},
							labels)))
				]));
	});
var author$project$PageEditor$EditorPlugins$FichesPlugin$FilterByName = function (a) {
	return {$: 'FilterByName', a: a};
};
var author$project$PageEditor$EditorPlugins$FichesPlugin$nameSelector = F2(
	function (_n0, model) {
		var genDirEditor = _n0.genDirEditor;
		return A2(
			mdgriffith$elm_ui$Element$row,
			author$project$PageEditor$EditorPlugins$FichesPlugin$formItemStyle,
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Element$spacingXY, 0, 15),
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(400))
							])),
					{
						label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
						onChange: author$project$PageEditor$EditorPlugins$FichesPlugin$FilterByName,
						placeholder: elm$core$Maybe$Just(
							A2(
								mdgriffith$elm_ui$Element$Input$placeholder,
								_List_Nil,
								mdgriffith$elm_ui$Element$text('Filtrer par nom entité'))),
						text: A2(elm$core$Maybe$withDefault, '', model.nameFilter)
					})
				]));
	});
var author$project$PageEditor$EditorPlugins$FichesPlugin$view = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$map,
			model.externalMsg,
			A2(
				mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$scrollbarY
					]),
				A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15),
							mdgriffith$elm_ui$Element$padding(15),
							mdgriffith$elm_ui$Element$alignTop
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$el,
							author$project$PageEditor$EditorPlugins$FichesPlugin$containerStyle,
							A2(author$project$PageEditor$EditorPlugins$FichesPlugin$nameSelector, config, model)),
							A2(
							mdgriffith$elm_ui$Element$row,
							_Utils_ap(
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(15)
									]),
								author$project$PageEditor$EditorPlugins$FichesPlugin$containerStyle),
							_List_fromArray(
								[
									A2(author$project$PageEditor$EditorPlugins$FichesPlugin$catSelector, config, model),
									A2(author$project$PageEditor$EditorPlugins$FichesPlugin$activSelector, config, model),
									A2(author$project$PageEditor$EditorPlugins$FichesPlugin$labelSelector, config, model)
								])),
							A2(author$project$PageEditor$EditorPlugins$FichesPlugin$ficheSelector, config, model),
							A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(true),
									{
										label: mdgriffith$elm_ui$Element$text('Retour'),
										onPress: elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$FichesPlugin$Quit)
									}),
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(model.selectedFiches, elm$core$Set$empty)),
									{
										label: mdgriffith$elm_ui$Element$text('Valider'),
										onPress: (!_Utils_eq(model.selectedFiches, elm$core$Set$empty)) ? elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$FichesPlugin$SaveAndQuit) : elm$core$Maybe$Nothing
									})
								]))
						]))));
	});
var author$project$PageEditor$EditorPlugins$GalleryPlugin$ImagesRequested = {$: 'ImagesRequested'};
var author$project$PageEditor$EditorPlugins$GalleryPlugin$view = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$map,
			model.externalMsg,
			A2(
				mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$scrollbarY
					]),
				A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$padding(15),
							mdgriffith$elm_ui$Element$spacing(15),
							mdgriffith$elm_ui$Element$alignTop
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Charger images'),
								onPress: elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$GalleryPlugin$ImagesRequested)
							}),
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_Nil,
							A2(
								elm$core$List$map,
								function (_n0) {
									var fn = _n0.a;
									var d = _n0.b;
									return A2(
										mdgriffith$elm_ui$Element$image,
										_List_Nil,
										{description: fn, src: d});
								},
								elm$core$Dict$toList(model.base64Pics)))
						]))));
	});
var author$project$Internals$Icons$alignCenter = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'align-center',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('18'),
						elm$svg$Svg$Attributes$y1('10'),
						elm$svg$Svg$Attributes$x2('6'),
						elm$svg$Svg$Attributes$y2('10')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('21'),
						elm$svg$Svg$Attributes$y1('6'),
						elm$svg$Svg$Attributes$x2('3'),
						elm$svg$Svg$Attributes$y2('6')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('21'),
						elm$svg$Svg$Attributes$y1('14'),
						elm$svg$Svg$Attributes$x2('3'),
						elm$svg$Svg$Attributes$y2('14')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('18'),
						elm$svg$Svg$Attributes$y1('18'),
						elm$svg$Svg$Attributes$x2('6'),
						elm$svg$Svg$Attributes$y2('18')
					]),
				_List_Nil)
			]));
};
var author$project$Internals$Icons$alignLeft = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'align-left',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('17'),
						elm$svg$Svg$Attributes$y1('10'),
						elm$svg$Svg$Attributes$x2('3'),
						elm$svg$Svg$Attributes$y2('10')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('21'),
						elm$svg$Svg$Attributes$y1('6'),
						elm$svg$Svg$Attributes$x2('3'),
						elm$svg$Svg$Attributes$y2('6')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('21'),
						elm$svg$Svg$Attributes$y1('14'),
						elm$svg$Svg$Attributes$x2('3'),
						elm$svg$Svg$Attributes$y2('14')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('17'),
						elm$svg$Svg$Attributes$y1('18'),
						elm$svg$Svg$Attributes$x2('3'),
						elm$svg$Svg$Attributes$y2('18')
					]),
				_List_Nil)
			]));
};
var author$project$Internals$Icons$alignRight = function (size) {
	return A3(
		author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'align-right',
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('21'),
						elm$svg$Svg$Attributes$y1('10'),
						elm$svg$Svg$Attributes$x2('7'),
						elm$svg$Svg$Attributes$y2('10')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('21'),
						elm$svg$Svg$Attributes$y1('6'),
						elm$svg$Svg$Attributes$x2('3'),
						elm$svg$Svg$Attributes$y2('6')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('21'),
						elm$svg$Svg$Attributes$y1('14'),
						elm$svg$Svg$Attributes$x2('3'),
						elm$svg$Svg$Attributes$y2('14')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$line,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x1('21'),
						elm$svg$Svg$Attributes$y1('18'),
						elm$svg$Svg$Attributes$x2('7'),
						elm$svg$Svg$Attributes$y2('18')
					]),
				_List_Nil)
			]));
};
var author$project$PageEditor$EditorPlugins$ImagePlugin$ChangeMode = function (a) {
	return {$: 'ChangeMode', a: a};
};
var author$project$PageEditor$EditorPlugins$ImagePlugin$ImagePicker = {$: 'ImagePicker'};
var author$project$PageEditor$EditorPlugins$ImagePlugin$Quit = {$: 'Quit'};
var author$project$PageEditor$EditorPlugins$ImagePlugin$SaveAndQuit = {$: 'SaveAndQuit'};
var author$project$PageEditor$EditorPlugins$ImagePlugin$SetAlignment = function (a) {
	return {$: 'SetAlignment', a: a};
};
var author$project$PageEditor$EditorPlugins$ImagePlugin$SetCaption = function (a) {
	return {$: 'SetCaption', a: a};
};
var author$project$PageEditor$EditorPlugins$ImagePlugin$iconSize = 18;
var author$project$PageEditor$EditorPlugins$ImagePlugin$imageAttributeEditorView = function (model) {
	return A2(
		mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$spacing(15),
				mdgriffith$elm_ui$Element$Font$size(16),
				mdgriffith$elm_ui$Element$padding(15),
				mdgriffith$elm_ui$Element$alignTop
			]),
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$text('Insérer / Modifier une Image:'),
				mdgriffith$elm_ui$Element$text('Alignement: '),
				A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						A2(
							author$project$Internals$CommonStyleHelpers$toogleButtonStyle,
							_Utils_eq(model.alignment, author$project$PageEditor$Internals$DocumentEditorHelpers$ALeft),
							true),
						{
							label: A2(
								mdgriffith$elm_ui$Element$el,
								_List_Nil,
								mdgriffith$elm_ui$Element$html(
									author$project$Internals$Icons$alignLeft(author$project$PageEditor$EditorPlugins$ImagePlugin$iconSize))),
							onPress: elm$core$Maybe$Just(
								author$project$PageEditor$EditorPlugins$ImagePlugin$SetAlignment(author$project$PageEditor$Internals$DocumentEditorHelpers$ALeft))
						}),
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						A2(
							author$project$Internals$CommonStyleHelpers$toogleButtonStyle,
							_Utils_eq(model.alignment, author$project$PageEditor$Internals$DocumentEditorHelpers$ACenter),
							true),
						{
							label: A2(
								mdgriffith$elm_ui$Element$el,
								_List_Nil,
								mdgriffith$elm_ui$Element$html(
									author$project$Internals$Icons$alignCenter(author$project$PageEditor$EditorPlugins$ImagePlugin$iconSize))),
							onPress: elm$core$Maybe$Just(
								author$project$PageEditor$EditorPlugins$ImagePlugin$SetAlignment(author$project$PageEditor$Internals$DocumentEditorHelpers$ACenter))
						}),
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						A2(
							author$project$Internals$CommonStyleHelpers$toogleButtonStyle,
							_Utils_eq(model.alignment, author$project$PageEditor$Internals$DocumentEditorHelpers$ARight),
							true),
						{
							label: A2(
								mdgriffith$elm_ui$Element$el,
								_List_Nil,
								mdgriffith$elm_ui$Element$html(
									author$project$Internals$Icons$alignRight(author$project$PageEditor$EditorPlugins$ImagePlugin$iconSize))),
							onPress: elm$core$Maybe$Just(
								author$project$PageEditor$EditorPlugins$ImagePlugin$SetAlignment(author$project$PageEditor$Internals$DocumentEditorHelpers$ARight))
						})
					])),
				A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$Input$text,
						author$project$Internals$CommonStyleHelpers$textInputStyle,
						{
							label: A2(
								mdgriffith$elm_ui$Element$Input$labelLeft,
								_List_fromArray(
									[mdgriffith$elm_ui$Element$centerY]),
								A2(
									mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$width(
											mdgriffith$elm_ui$Element$px(110))
										]),
									mdgriffith$elm_ui$Element$text('Légende: '))),
							onChange: author$project$PageEditor$EditorPlugins$ImagePlugin$SetCaption,
							placeholder: elm$core$Maybe$Nothing,
							text: A2(elm$core$Maybe$withDefault, '', model.mbCaption)
						})
					])),
				A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						function () {
						var _n0 = model.mbImageMeta;
						if (_n0.$ === 'Nothing') {
							return mdgriffith$elm_ui$Element$none;
						} else {
							return mdgriffith$elm_ui$Element$text('Aperçu: ');
						}
					}(),
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							label: function () {
								var _n1 = model.mbImageMeta;
								if (_n1.$ === 'Nothing') {
									return A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Nouvelle Image'));
								} else {
									return A2(
										mdgriffith$elm_ui$Element$el,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Remplacer Image'));
								}
							}(),
							onPress: elm$core$Maybe$Just(
								author$project$PageEditor$EditorPlugins$ImagePlugin$ChangeMode(author$project$PageEditor$EditorPlugins$ImagePlugin$ImagePicker))
						})
					])),
				A2(
				mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(
						A2(mdgriffith$elm_ui$Element$maximum, 650, mdgriffith$elm_ui$Element$fill)),
						mdgriffith$elm_ui$Element$height(
						A2(mdgriffith$elm_ui$Element$maximum, 525, mdgriffith$elm_ui$Element$fill)),
						mdgriffith$elm_ui$Element$scrollbars
					]),
				A2(
					mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[mdgriffith$elm_ui$Element$centerY, mdgriffith$elm_ui$Element$centerX]),
					{
						description: A2(elm$core$Maybe$withDefault, '', model.mbCaption),
						src: A2(
							elm$core$Maybe$withDefault,
							'',
							A2(
								elm$core$Maybe$map,
								function (src) {
									if (src.$ === 'Inline') {
										var base64 = src.b;
										return base64;
									} else {
										var url = src.a;
										return url;
									}
								},
								A2(
									elm$core$Maybe$map,
									function ($) {
										return $.src;
									},
									model.mbImageMeta)))
					})),
				A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							label: mdgriffith$elm_ui$Element$text('Quitter'),
							onPress: elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$ImagePlugin$Quit)
						}),
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							label: mdgriffith$elm_ui$Element$text('Valider et Quitter'),
							onPress: elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$ImagePlugin$SaveAndQuit)
						})
					]))
			]));
};
var author$project$PageEditor$EditorPlugins$ImagePlugin$SelectImage = function (a) {
	return {$: 'SelectImage', a: a};
};
var author$project$PageEditor$EditorPlugins$ImagePlugin$imagePickerView = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 15, left: 0, right: 0, top: 0})
				]),
			_List_fromArray(
				[
					A2(
					author$project$FileExplorer$FileExplorer$view,
					{
						logInfo: config.logInfo,
						maxHeight: config.maxHeight - 50,
						mode: author$project$FileExplorer$FileExplorer$ReadWrite(author$project$FileExplorer$FileExplorer$ImagesRoot),
						zone: config.zone
					},
					config.fileExplorer),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15),
							A2(mdgriffith$elm_ui$Element$paddingXY, 15, 0)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Retour'),
								onPress: elm$core$Maybe$Just(
									model.externalMsg(
										author$project$PageEditor$EditorPlugins$ImagePlugin$ChangeMode(author$project$PageEditor$EditorPlugins$ImagePlugin$ImageAttributeEditor)))
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(
									author$project$FileExplorer$FileExplorer$getSelectedImage(config.fileExplorer),
									elm$core$Maybe$Nothing)),
							{
								label: mdgriffith$elm_ui$Element$text('Valider'),
								onPress: A2(
									elm$core$Maybe$map,
									A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$EditorPlugins$ImagePlugin$SelectImage),
									author$project$FileExplorer$FileExplorer$getSelectedImage(config.fileExplorer))
							})
						]))
				]));
	});
var author$project$PageEditor$EditorPlugins$ImagePlugin$view = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$scrollbarY
				]),
			_List_fromArray(
				[
					function () {
					var _n0 = model.mode;
					if (_n0.$ === 'ImageAttributeEditor') {
						return A2(
							mdgriffith$elm_ui$Element$map,
							model.externalMsg,
							author$project$PageEditor$EditorPlugins$ImagePlugin$imageAttributeEditorView(model));
					} else {
						return A2(author$project$PageEditor$EditorPlugins$ImagePlugin$imagePickerView, config, model);
					}
				}()
				]));
	});
var author$project$PageEditor$EditorPlugins$NewDocPlugin$view = function (config) {
	return A2(
		mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$Font$size(16),
				mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
				mdgriffith$elm_ui$Element$alignTop,
				mdgriffith$elm_ui$Element$spacing(20),
				mdgriffith$elm_ui$Element$padding(15)
			]),
		_List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$Border$width(1),
						mdgriffith$elm_ui$Element$Border$color(
						A4(mdgriffith$elm_ui$Element$rgba, 0.9, 0.9, 0.9, 1)),
						mdgriffith$elm_ui$Element$padding(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Font$size(18)
							]),
						mdgriffith$elm_ui$Element$text('Nouveau conteneur')),
						A2(
						mdgriffith$elm_ui$Element$wrappedRow,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Créer colonne')
											])),
									onPress: elm$core$Maybe$Just(
										config.createNewContainer(author$project$Document$Document$DocColumn))
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Créer ligne')
											])),
									onPress: elm$core$Maybe$Just(
										config.createNewContainer(author$project$Document$Document$DocRow))
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Créer colonne de texte')
											])),
									onPress: elm$core$Maybe$Just(
										config.createNewContainer(author$project$Document$Document$TextColumn))
								})
							]))
					])),
				A2(
				mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$padding(15),
						mdgriffith$elm_ui$Element$Border$width(1),
						mdgriffith$elm_ui$Element$Border$color(
						A4(mdgriffith$elm_ui$Element$rgba, 0.9, 0.9, 0.9, 1))
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Font$size(18)
							]),
						mdgriffith$elm_ui$Element$text('Nouvelle cellule')),
						A2(
						mdgriffith$elm_ui$Element$wrappedRow,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Bloc de texte')
											])),
									onPress: elm$core$Maybe$Just(
										config.createNewCell(author$project$PageEditor$Internals$DocumentEditorHelpers$TextBlockPlugin))
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Zone blocs de liens')
											])),
									onPress: elm$core$Maybe$Just(
										config.createNewCell(author$project$PageEditor$Internals$DocumentEditorHelpers$BlockLinksPlugin))
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Zone de fiches')
											])),
									onPress: elm$core$Maybe$Just(
										config.createNewCell(author$project$PageEditor$Internals$DocumentEditorHelpers$FichesPlugin))
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Image')
											])),
									onPress: elm$core$Maybe$Just(
										config.createNewCell(author$project$PageEditor$Internals$DocumentEditorHelpers$ImagePlugin))
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Video')
											])),
									onPress: elm$core$Maybe$Just(
										config.createNewCell(author$project$PageEditor$Internals$DocumentEditorHelpers$VideoPlugin))
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Tableau')
											])),
									onPress: elm$core$Maybe$Just(
										config.createNewCell(author$project$PageEditor$Internals$DocumentEditorHelpers$TablePlugin))
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Bandeau liens images')
											])),
									onPress: elm$core$Maybe$Just(
										config.createNewCell(author$project$PageEditor$Internals$DocumentEditorHelpers$PictureLinksPlugin))
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Galerie photothèque')
											])),
									onPress: elm$core$Maybe$Just(
										config.createNewCell(author$project$PageEditor$Internals$DocumentEditorHelpers$GalleryPlugin))
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Zone actualités')
											])),
									onPress: elm$core$Maybe$Just(
										config.insertNewCell('NewsBlock'))
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Mini calendrier')
											])),
									onPress: elm$core$Maybe$Just(
										config.insertNewCell('CalendarWidget'))
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Calendrier')
											])),
									onPress: elm$core$Maybe$Just(
										config.insertNewCell('Calendar'))
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Météo')
											])),
									onPress: elm$core$Maybe$Just(
										config.insertNewCell('WeatherWidget'))
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Panoramique aérien')
											])),
									onPress: elm$core$Maybe$Just(
										config.insertNewCell('DronePanorama'))
								})
							]))
					])),
				A2(
				mdgriffith$elm_ui$Element$Input$button,
				author$project$Internals$CommonStyleHelpers$buttonStyle(true),
				{
					label: A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(10)
							]),
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$text('Retour')
							])),
					onPress: elm$core$Maybe$Just(config.goBack)
				})
			]));
};
var author$project$PageEditor$EditorPlugins$PictureLinksPlugin$MovePicDown = {$: 'MovePicDown'};
var author$project$PageEditor$EditorPlugins$PictureLinksPlugin$MovePicUp = {$: 'MovePicUp'};
var author$project$PageEditor$EditorPlugins$PictureLinksPlugin$OpenPicker = {$: 'OpenPicker'};
var author$project$PageEditor$EditorPlugins$PictureLinksPlugin$Quit = {$: 'Quit'};
var author$project$PageEditor$EditorPlugins$PictureLinksPlugin$RemovePic = {$: 'RemovePic'};
var author$project$PageEditor$EditorPlugins$PictureLinksPlugin$SaveAndQuit = {$: 'SaveAndQuit'};
var author$project$PageEditor$EditorPlugins$PictureLinksPlugin$SetUrl = {$: 'SetUrl'};
var author$project$PageEditor$EditorPlugins$PictureLinksPlugin$UrlInput = function (a) {
	return {$: 'UrlInput', a: a};
};
var author$project$PageEditor$EditorPlugins$PictureLinksPlugin$containerStyle = _List_fromArray(
	[
		mdgriffith$elm_ui$Element$padding(15),
		mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey6),
		mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var author$project$PageEditor$EditorPlugins$PictureLinksPlugin$ClosePicker = {$: 'ClosePicker'};
var author$project$PageEditor$EditorPlugins$PictureLinksPlugin$NewPicLink = function (a) {
	return {$: 'NewPicLink', a: a};
};
var author$project$PageEditor$EditorPlugins$PictureLinksPlugin$imagePickerView = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 15, left: 0, right: 0, top: 0})
				]),
			_List_fromArray(
				[
					A2(
					author$project$FileExplorer$FileExplorer$view,
					{
						logInfo: config.logInfo,
						maxHeight: 500,
						mode: author$project$FileExplorer$FileExplorer$ReadWrite(author$project$FileExplorer$FileExplorer$ImagesRoot),
						zone: config.zone
					},
					config.fileExplorer),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15),
							A2(mdgriffith$elm_ui$Element$paddingXY, 15, 0)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Retour'),
								onPress: elm$core$Maybe$Just(
									model.externalMsg(author$project$PageEditor$EditorPlugins$PictureLinksPlugin$ClosePicker))
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(
									author$project$FileExplorer$FileExplorer$getSelectedImage(config.fileExplorer),
									elm$core$Maybe$Nothing)),
							{
								label: mdgriffith$elm_ui$Element$text('Valider'),
								onPress: A2(
									elm$core$Maybe$map,
									A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$EditorPlugins$PictureLinksPlugin$NewPicLink),
									author$project$FileExplorer$FileExplorer$getSelectedImage(config.fileExplorer))
							})
						]))
				]));
	});
var author$project$PageEditor$EditorPlugins$PictureLinksPlugin$itemStyle = _List_fromArray(
	[
		mdgriffith$elm_ui$Element$padding(15),
		mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey7),
		mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var author$project$PageEditor$EditorPlugins$PictureLinksPlugin$SelectPic = function (a) {
	return {$: 'SelectPic', a: a};
};
var author$project$PageEditor$EditorPlugins$PictureLinksPlugin$picLinkListView = F2(
	function (mbSelected, xs) {
		var picLinkView = function (_n1) {
			var uuid = _n1.uuid;
			var picLink = _n1.picLink;
			return A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$pointer,
						mdgriffith$elm_ui$Element$padding(7),
						mdgriffith$elm_ui$Element$Border$rounded(5),
						_Utils_eq(
						elm$core$Maybe$Just(
							TSFoster$elm_uuid$UUID$canonical(uuid)),
						mbSelected) ? mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey5) : author$project$Internals$CommonStyleHelpers$noAttr,
						mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$Background$color(author$project$Internals$CommonStyleHelpers$grey6)
							])),
						mdgriffith$elm_ui$Element$Events$onClick(
						author$project$PageEditor$EditorPlugins$PictureLinksPlugin$SelectPic(
							TSFoster$elm_uuid$UUID$canonical(uuid)))
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(100)),
								mdgriffith$elm_ui$Element$height(
								mdgriffith$elm_ui$Element$px(100)),
								mdgriffith$elm_ui$Element$Background$uncropped(
								function () {
									var _n0 = picLink.img.src;
									if (_n0.$ === 'UrlSrc') {
										var s = _n0.a;
										return s;
									} else {
										return '';
									}
								}())
							]),
						mdgriffith$elm_ui$Element$none),
						A2(
						mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$text(
								(picLink.url === '') ? 'pas de lien associé' : picLink.url)
							]))
					]));
		};
		return A2(elm$core$List$map, picLinkView, xs);
	});
var author$project$PageEditor$EditorPlugins$PictureLinksPlugin$view = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
					mdgriffith$elm_ui$Element$scrollbarY,
					mdgriffith$elm_ui$Element$padding(15),
					mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						author$project$PageEditor$EditorPlugins$PictureLinksPlugin$containerStyle,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15)
							])),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$row,
							_Utils_ap(
								author$project$PageEditor$EditorPlugins$PictureLinksPlugin$itemStyle,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(15),
										mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
										mdgriffith$elm_ui$Element$below(
										(!model.imagePickerOpen) ? mdgriffith$elm_ui$Element$none : A2(
											mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$Background$color(
													A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
													mdgriffith$elm_ui$Element$width(
													A2(
														mdgriffith$elm_ui$Element$minimum,
														850,
														A2(mdgriffith$elm_ui$Element$maximum, 920, mdgriffith$elm_ui$Element$shrink))),
													mdgriffith$elm_ui$Element$Border$shadow(
													{
														blur: 10,
														color: A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
														offset: _Utils_Tuple2(4, 4),
														size: 5
													})
												]),
											A2(author$project$PageEditor$EditorPlugins$PictureLinksPlugin$imagePickerView, config, model)))
									])),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(true),
									{
										label: mdgriffith$elm_ui$Element$text('Nouveau lien image'),
										onPress: elm$core$Maybe$Just(
											model.externalMsg(author$project$PageEditor$EditorPlugins$PictureLinksPlugin$OpenPicker))
									}),
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(model.selectedPic, elm$core$Maybe$Nothing)),
									{
										label: mdgriffith$elm_ui$Element$text('Monter'),
										onPress: A2(
											elm$core$Maybe$map,
											elm$core$Basics$always(
												model.externalMsg(author$project$PageEditor$EditorPlugins$PictureLinksPlugin$MovePicUp)),
											model.selectedPic)
									}),
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(model.selectedPic, elm$core$Maybe$Nothing)),
									{
										label: mdgriffith$elm_ui$Element$text('Descendre'),
										onPress: A2(
											elm$core$Maybe$map,
											elm$core$Basics$always(
												model.externalMsg(author$project$PageEditor$EditorPlugins$PictureLinksPlugin$MovePicDown)),
											model.selectedPic)
									}),
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(model.selectedPic, elm$core$Maybe$Nothing)),
									{
										label: mdgriffith$elm_ui$Element$text('Supprimer'),
										onPress: A2(
											elm$core$Maybe$map,
											elm$core$Basics$always(
												model.externalMsg(author$project$PageEditor$EditorPlugins$PictureLinksPlugin$RemovePic)),
											model.selectedPic)
									})
								])),
							A2(
							mdgriffith$elm_ui$Element$row,
							_Utils_ap(
								author$project$PageEditor$EditorPlugins$PictureLinksPlugin$itemStyle,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(15)
									])),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$Input$text,
									_Utils_ap(
										author$project$Internals$CommonStyleHelpers$textInputStyle,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$width(
												mdgriffith$elm_ui$Element$px(400)),
												mdgriffith$elm_ui$Element$spacing(10)
											])),
									{
										label: A2(
											mdgriffith$elm_ui$Element$Input$labelLeft,
											_List_fromArray(
												[mdgriffith$elm_ui$Element$centerY]),
											mdgriffith$elm_ui$Element$text('Lien associé')),
										onChange: A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$EditorPlugins$PictureLinksPlugin$UrlInput),
										placeholder: elm$core$Maybe$Nothing,
										text: A2(elm$core$Maybe$withDefault, '', model.urlBuffer)
									}),
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(
										(!_Utils_eq(model.urlBuffer, elm$core$Maybe$Nothing)) && (!_Utils_eq(model.selectedPic, elm$core$Maybe$Nothing))),
									{
										label: mdgriffith$elm_ui$Element$text('Valider'),
										onPress: ((!_Utils_eq(model.urlBuffer, elm$core$Maybe$Nothing)) && (!_Utils_eq(model.selectedPic, elm$core$Maybe$Nothing))) ? elm$core$Maybe$Just(
											model.externalMsg(author$project$PageEditor$EditorPlugins$PictureLinksPlugin$SetUrl)) : elm$core$Maybe$Nothing
									})
								])),
							A2(
							mdgriffith$elm_ui$Element$map,
							model.externalMsg,
							function () {
								var _n0 = model.buffer;
								if (!_n0.b) {
									return mdgriffith$elm_ui$Element$none;
								} else {
									return A2(
										mdgriffith$elm_ui$Element$column,
										_Utils_ap(
											author$project$PageEditor$EditorPlugins$PictureLinksPlugin$itemStyle,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$spacing(15),
													mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
												])),
										A2(author$project$PageEditor$EditorPlugins$PictureLinksPlugin$picLinkListView, model.selectedPic, model.buffer));
								}
							}())
						])),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								label: mdgriffith$elm_ui$Element$text('Retour'),
								onPress: elm$core$Maybe$Just(
									model.externalMsg(author$project$PageEditor$EditorPlugins$PictureLinksPlugin$Quit))
							}),
							A2(
							mdgriffith$elm_ui$Element$Input$button,
							author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(model.buffer, _List_Nil)),
							{
								label: mdgriffith$elm_ui$Element$text('Valider et quitter'),
								onPress: (!_Utils_eq(model.buffer, _List_Nil)) ? elm$core$Maybe$Just(
									model.externalMsg(author$project$PageEditor$EditorPlugins$PictureLinksPlugin$SaveAndQuit)) : elm$core$Maybe$Nothing
							})
						]))
				]));
	});
var author$project$PageEditor$EditorPlugins$TablePlugin$StyleSelectorClickOff = {$: 'StyleSelectorClickOff'};
var author$project$PageEditor$EditorPlugins$TablePlugin$SwapDisplayMode = {$: 'SwapDisplayMode'};
var author$project$PageEditor$EditorPlugins$TablePlugin$displayOnlyView = function (model) {
	var interfaceView = A2(
		mdgriffith$elm_ui$Element$column,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							label: mdgriffith$elm_ui$Element$text('Modifier'),
							onPress: elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$TablePlugin$SwapDisplayMode)
						})
					]))
			]));
	var dataForTable = elm$core$Array$toList(model.data);
	var columns = A2(
		elm$core$List$map,
		function (ci) {
			return {
				header: mdgriffith$elm_ui$Element$none,
				view: F2(
					function (ri, row) {
						return A2(
							mdgriffith$elm_ui$Element$el,
							function (s) {
								return A2(
									elm$core$List$cons,
									mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
									s);
							}(
								A2(
									elm$core$Maybe$withDefault,
									_List_Nil,
									A2(
										elm$core$Maybe$map,
										function ($) {
											return $.containerStyle;
										},
										A2(elm$core$Dict$get, model.currentStyle, author$project$Document$DocumentViews$StyleSheets$tableStyles)))),
							A2(
								mdgriffith$elm_ui$Element$el,
								_Utils_ap(
									A2(
										elm$core$Maybe$withDefault,
										function (_n0) {
											return _List_Nil;
										},
										A2(
											elm$core$Maybe$map,
											function ($) {
												return $.cellStyle;
											},
											A2(elm$core$Dict$get, model.currentStyle, author$project$Document$DocumentViews$StyleSheets$tableStyles)))(ri),
									_List_fromArray(
										[
											A2(mdgriffith$elm_ui$Element$paddingXY, 15, 5),
											mdgriffith$elm_ui$Element$height(
											A2(mdgriffith$elm_ui$Element$minimum, 30, mdgriffith$elm_ui$Element$fill))
										])),
								mdgriffith$elm_ui$Element$text(
									A2(
										elm$core$Maybe$withDefault,
										'',
										A2(elm$core$Array$get, ci, row)))));
					}),
				width: mdgriffith$elm_ui$Element$fill
			};
		},
		A2(elm$core$List$range, 0, model.nbrCols - 1));
	var tableView = model.setupDone ? A2(
		mdgriffith$elm_ui$Element$indexedTable,
		A2(
			elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				elm$core$Maybe$map,
				function ($) {
					return $.tableStyle;
				},
				A2(elm$core$Dict$get, model.currentStyle, author$project$Document$DocumentViews$StyleSheets$tableStyles))),
		{columns: columns, data: dataForTable}) : mdgriffith$elm_ui$Element$none;
	return A2(
		mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$spacing(15),
				mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[interfaceView, tableView]));
};
var author$project$PageEditor$EditorPlugins$TablePlugin$AddNew = function (a) {
	return {$: 'AddNew', a: a};
};
var author$project$PageEditor$EditorPlugins$TablePlugin$CellFocused = function (a) {
	return {$: 'CellFocused', a: a};
};
var author$project$PageEditor$EditorPlugins$TablePlugin$DataInput = F2(
	function (a, b) {
		return {$: 'DataInput', a: a, b: b};
	});
var author$project$PageEditor$EditorPlugins$TablePlugin$Down = {$: 'Down'};
var author$project$PageEditor$EditorPlugins$TablePlugin$InitializeTable = {$: 'InitializeTable'};
var author$project$PageEditor$EditorPlugins$TablePlugin$Left = {$: 'Left'};
var author$project$PageEditor$EditorPlugins$TablePlugin$Quit = {$: 'Quit'};
var author$project$PageEditor$EditorPlugins$TablePlugin$RemoveSelectedCol = {$: 'RemoveSelectedCol'};
var author$project$PageEditor$EditorPlugins$TablePlugin$RemoveSelectedRow = {$: 'RemoveSelectedRow'};
var author$project$PageEditor$EditorPlugins$TablePlugin$Right = {$: 'Right'};
var author$project$PageEditor$EditorPlugins$TablePlugin$SaveAndQuit = {$: 'SaveAndQuit'};
var author$project$PageEditor$EditorPlugins$TablePlugin$SetNbrCols = function (a) {
	return {$: 'SetNbrCols', a: a};
};
var author$project$PageEditor$EditorPlugins$TablePlugin$SetNbrRows = function (a) {
	return {$: 'SetNbrRows', a: a};
};
var author$project$PageEditor$EditorPlugins$TablePlugin$Up = {$: 'Up'};
var author$project$PageEditor$EditorPlugins$TablePlugin$focusIsValid = F2(
	function (mbFocus, data) {
		return A2(
			elm$core$Maybe$withDefault,
			false,
			A2(
				elm$core$Maybe$map,
				function (_n1) {
					return true;
				},
				A2(
					elm$core$Maybe$andThen,
					function (_n0) {
						var i = _n0.a;
						var j = _n0.b;
						return A2(
							elm$core$Maybe$map,
							function (row) {
								return A2(elm$core$Array$get, j, row);
							},
							A2(elm$core$Array$get, i, data));
					},
					mbFocus)));
	});
var author$project$PageEditor$EditorPlugins$TablePlugin$SetStyle = function (a) {
	return {$: 'SetStyle', a: a};
};
var author$project$PageEditor$EditorPlugins$TablePlugin$StyleSelectorClick = {$: 'StyleSelectorClick'};
var author$project$PageEditor$EditorPlugins$TablePlugin$styleSelector = function (model) {
	return A2(
		mdgriffith$elm_ui$Element$row,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$Input$text,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$Events$onClick(author$project$PageEditor$EditorPlugins$TablePlugin$StyleSelectorClick),
						mdgriffith$elm_ui$Element$width(
						mdgriffith$elm_ui$Element$px(150)),
						mdgriffith$elm_ui$Element$below(
						model.styleSelectorFocused ? A2(
							mdgriffith$elm_ui$Element$column,
							_List_Nil,
							A2(
								elm$core$List$map,
								function (s) {
									return A2(
										mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$Events$onClick(
												author$project$PageEditor$EditorPlugins$TablePlugin$SetStyle(s)),
												mdgriffith$elm_ui$Element$pointer,
												mdgriffith$elm_ui$Element$mouseOver(
												_List_fromArray(
													[
														mdgriffith$elm_ui$Element$Font$color(
														A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
														mdgriffith$elm_ui$Element$Background$color(
														A3(mdgriffith$elm_ui$Element$rgb, 0.7, 0.7, 0.7))
													])),
												mdgriffith$elm_ui$Element$Background$color(
												A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
												mdgriffith$elm_ui$Element$width(
												mdgriffith$elm_ui$Element$px(150)),
												A2(mdgriffith$elm_ui$Element$paddingXY, 15, 5)
											]),
										mdgriffith$elm_ui$Element$text(s));
								},
								elm$core$Dict$keys(author$project$Document$DocumentViews$StyleSheets$tableStyles))) : mdgriffith$elm_ui$Element$none),
						mdgriffith$elm_ui$Element$spacing(15),
						A2(mdgriffith$elm_ui$Element$paddingXY, 15, 5),
						mdgriffith$elm_ui$Element$focused(
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$Border$glow,
								A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
								0)
							]))
					]),
				{
					label: A2(
						mdgriffith$elm_ui$Element$Input$labelLeft,
						_List_fromArray(
							[mdgriffith$elm_ui$Element$centerY]),
						A2(
							mdgriffith$elm_ui$Element$el,
							_List_Nil,
							mdgriffith$elm_ui$Element$text('Style'))),
					onChange: author$project$PageEditor$EditorPlugins$TablePlugin$SetStyle,
					placeholder: elm$core$Maybe$Just(
						A2(
							mdgriffith$elm_ui$Element$Input$placeholder,
							_List_Nil,
							A2(
								mdgriffith$elm_ui$Element$el,
								_List_Nil,
								mdgriffith$elm_ui$Element$text(model.currentStyle)))),
					text: model.styleSelectorInput
				})
			]));
};
var author$project$PageEditor$EditorPlugins$TablePlugin$textInputStyle = _List_fromArray(
	[
		mdgriffith$elm_ui$Element$width(
		mdgriffith$elm_ui$Element$px(50)),
		A2(mdgriffith$elm_ui$Element$paddingXY, 5, 5),
		mdgriffith$elm_ui$Element$spacing(15)
	]);
var mdgriffith$elm_ui$Element$Input$Above = {$: 'Above'};
var mdgriffith$elm_ui$Element$Input$labelAbove = mdgriffith$elm_ui$Element$Input$Label(mdgriffith$elm_ui$Element$Input$Above);
var author$project$PageEditor$EditorPlugins$TablePlugin$editView = function (model) {
	var dataForTable = elm$core$Array$toList(model.data);
	var columns = A2(
		elm$core$List$map,
		function (ci) {
			return {
				header: mdgriffith$elm_ui$Element$none,
				view: F2(
					function (ri, row) {
						return A2(
							mdgriffith$elm_ui$Element$el,
							A2(
								elm$core$Maybe$withDefault,
								_List_Nil,
								A2(
									elm$core$Maybe$map,
									function ($) {
										return $.containerStyle;
									},
									A2(elm$core$Dict$get, model.currentStyle, author$project$Document$DocumentViews$StyleSheets$tableStyles))),
							A2(
								mdgriffith$elm_ui$Element$Keyed$el,
								_Utils_ap(
									A2(
										elm$core$Maybe$withDefault,
										function (_n0) {
											return _List_Nil;
										},
										A2(
											elm$core$Maybe$map,
											function ($) {
												return $.cellStyle;
											},
											A2(elm$core$Dict$get, model.currentStyle, author$project$Document$DocumentViews$StyleSheets$tableStyles)))(ri),
									function () {
										var _n1 = model.currentFocusedCell;
										if (_n1.$ === 'Nothing') {
											return _List_Nil;
										} else {
											var _n2 = _n1.a;
											var i = _n2.a;
											var j = _n2.b;
											return (_Utils_eq(i, ri) && _Utils_eq(j, ci)) ? _List_fromArray(
												[
													mdgriffith$elm_ui$Element$Background$color(
													A4(mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 0.2))
												]) : _List_Nil;
										}
									}()),
								_Utils_Tuple2(
									elm$core$String$fromInt((ri * 100) + ci),
									A2(
										mdgriffith$elm_ui$Element$Input$multiline,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$Border$width(0),
												mdgriffith$elm_ui$Element$centerY,
												mdgriffith$elm_ui$Element$Background$color(
												A4(mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 0)),
												mdgriffith$elm_ui$Element$Events$onClick(
												author$project$PageEditor$EditorPlugins$TablePlugin$CellFocused(
													elm$core$Maybe$Just(
														_Utils_Tuple2(ri, ci)))),
												mdgriffith$elm_ui$Element$focused(
												_List_fromArray(
													[
														A2(
														mdgriffith$elm_ui$Element$Border$glow,
														A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
														0)
													]))
											]),
										{
											label: A2(mdgriffith$elm_ui$Element$Input$labelAbove, _List_Nil, mdgriffith$elm_ui$Element$none),
											onChange: author$project$PageEditor$EditorPlugins$TablePlugin$DataInput(
												_Utils_Tuple2(ri, ci)),
											placeholder: elm$core$Maybe$Nothing,
											spellcheck: false,
											text: A2(
												elm$core$Maybe$withDefault,
												'',
												A2(elm$core$Array$get, ci, row))
										}))));
					}),
				width: mdgriffith$elm_ui$Element$fill
			};
		},
		A2(elm$core$List$range, 0, model.nbrCols - 1));
	var tableView = model.setupDone ? A2(
		mdgriffith$elm_ui$Element$indexedTable,
		A2(
			elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				elm$core$Maybe$map,
				function ($) {
					return $.tableStyle;
				},
				A2(elm$core$Dict$get, model.currentStyle, author$project$Document$DocumentViews$StyleSheets$tableStyles))),
		{columns: columns, data: dataForTable}) : mdgriffith$elm_ui$Element$none;
	var canRemove = A2(author$project$PageEditor$EditorPlugins$TablePlugin$focusIsValid, model.currentFocusedCell, model.data);
	var interfaceView = model.setupDone ? A2(
		mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$spacing(15)
			]),
		_List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							label: mdgriffith$elm_ui$Element$text('Aperçu'),
							onPress: elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$TablePlugin$SwapDisplayMode)
						}),
						author$project$PageEditor$EditorPlugins$TablePlugin$styleSelector(model),
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						author$project$Internals$CommonStyleHelpers$buttonStyle(canRemove),
						{
							label: mdgriffith$elm_ui$Element$text('Supprimer ligne'),
							onPress: canRemove ? elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$TablePlugin$RemoveSelectedRow) : elm$core$Maybe$Nothing
						}),
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						author$project$Internals$CommonStyleHelpers$buttonStyle(canRemove),
						{
							label: mdgriffith$elm_ui$Element$text('Supprimer colonne'),
							onPress: canRemove ? elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$TablePlugin$RemoveSelectedCol) : elm$core$Maybe$Nothing
						})
					])),
				A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							label: mdgriffith$elm_ui$Element$text('Insérer au dessus'),
							onPress: elm$core$Maybe$Just(
								author$project$PageEditor$EditorPlugins$TablePlugin$AddNew(author$project$PageEditor$EditorPlugins$TablePlugin$Up))
						}),
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							label: mdgriffith$elm_ui$Element$text('Insérer en dessous'),
							onPress: elm$core$Maybe$Just(
								author$project$PageEditor$EditorPlugins$TablePlugin$AddNew(author$project$PageEditor$EditorPlugins$TablePlugin$Down))
						}),
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							label: mdgriffith$elm_ui$Element$text('Insérer à gauche'),
							onPress: elm$core$Maybe$Just(
								author$project$PageEditor$EditorPlugins$TablePlugin$AddNew(author$project$PageEditor$EditorPlugins$TablePlugin$Left))
						}),
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							label: mdgriffith$elm_ui$Element$text('Insérer à droite'),
							onPress: elm$core$Maybe$Just(
								author$project$PageEditor$EditorPlugins$TablePlugin$AddNew(author$project$PageEditor$EditorPlugins$TablePlugin$Right))
						})
					]))
			])) : A2(
		mdgriffith$elm_ui$Element$column,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$Input$text,
						author$project$PageEditor$EditorPlugins$TablePlugin$textInputStyle,
						{
							label: A2(
								mdgriffith$elm_ui$Element$Input$labelLeft,
								_List_fromArray(
									[mdgriffith$elm_ui$Element$centerY]),
								A2(
									mdgriffith$elm_ui$Element$el,
									_List_Nil,
									mdgriffith$elm_ui$Element$text('Nbr colonnes'))),
							onChange: author$project$PageEditor$EditorPlugins$TablePlugin$SetNbrCols,
							placeholder: elm$core$Maybe$Nothing,
							text: model.nbrColsInput
						}),
						A2(
						mdgriffith$elm_ui$Element$Input$text,
						author$project$PageEditor$EditorPlugins$TablePlugin$textInputStyle,
						{
							label: A2(
								mdgriffith$elm_ui$Element$Input$labelLeft,
								_List_fromArray(
									[mdgriffith$elm_ui$Element$centerY]),
								A2(
									mdgriffith$elm_ui$Element$el,
									_List_Nil,
									mdgriffith$elm_ui$Element$text('Nbr lignes'))),
							onChange: author$project$PageEditor$EditorPlugins$TablePlugin$SetNbrRows,
							placeholder: elm$core$Maybe$Nothing,
							text: model.nbrRowsInput
						}),
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							label: mdgriffith$elm_ui$Element$text('Créer table'),
							onPress: elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$TablePlugin$InitializeTable)
						})
					])),
				A2(
				mdgriffith$elm_ui$Element$el,
				_List_Nil,
				mdgriffith$elm_ui$Element$text(model.error))
			]));
	return A2(
		mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$spacing(15),
				mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				interfaceView,
				tableView,
				model.setupDone ? A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$paddingEach(
						{bottom: 15, left: 0, right: 0, top: 0})
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							label: mdgriffith$elm_ui$Element$text('Quitter'),
							onPress: elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$TablePlugin$Quit)
						}),
						A2(
						mdgriffith$elm_ui$Element$Input$button,
						author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							label: mdgriffith$elm_ui$Element$text('Valider et Quitter'),
							onPress: elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$TablePlugin$SaveAndQuit)
						})
					])) : mdgriffith$elm_ui$Element$none
			]));
};
var author$project$PageEditor$EditorPlugins$TablePlugin$view = function (model) {
	return A2(
		mdgriffith$elm_ui$Element$map,
		model.externalMsg,
		A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$Font$size(16),
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$scrollbarY,
						mdgriffith$elm_ui$Element$alignTop,
						mdgriffith$elm_ui$Element$padding(15),
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				model.styleSelectorFocused ? _List_fromArray(
					[
						mdgriffith$elm_ui$Element$Events$onClick(author$project$PageEditor$EditorPlugins$TablePlugin$StyleSelectorClickOff)
					]) : _List_Nil),
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$text('Insérer / Modifier un tableau: '),
					function () {
					var _n0 = model.mode;
					if (_n0.$ === 'DisplayOnly') {
						return author$project$PageEditor$EditorPlugins$TablePlugin$displayOnlyView(model);
					} else {
						return author$project$PageEditor$EditorPlugins$TablePlugin$editView(model);
					}
				}()
				])));
};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$Quit = {$: 'Quit'};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$SaveAndQuit = {$: 'SaveAndQuit'};
var author$project$PageEditor$EditorPlugins$TextBlockPlugin$view = F3(
	function (config, renderConfig, model) {
		return A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$padding(15),
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$scrollbarY,
						mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
					]),
				_Utils_ap(
					model.internalUrlSelectorOpen ? _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Events$onClick(
							model.externalMsg(author$project$PageEditor$EditorPlugins$TextBlockPlugin$InternalUrlSelectorClickOff))
						]) : _List_Nil,
					(!_Utils_eq(model.colorPickerOpen, elm$core$Maybe$Nothing)) ? _List_fromArray(
						[
							mdgriffith$elm_ui$Element$Events$onClick(
							model.externalMsg(author$project$PageEditor$EditorPlugins$TextBlockPlugin$ColorPickerClickOff))
						]) : _List_Nil)),
			_List_fromArray(
				[
					A3(author$project$PageEditor$EditorPlugins$TextBlockPlugin$interfaceView, config, false, model),
					A2(
					(renderConfig.width < 1600) ? mdgriffith$elm_ui$Element$column : mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$spacing(30)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$alignTop,
									mdgriffith$elm_ui$Element$spacing(20)
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$map,
									model.externalMsg,
									A4(
										author$project$PageEditor$EditorPlugins$TextBlockPlugin$customTextArea,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
											]),
										model.setSelection,
										500,
										model.rawInput)),
									A2(
									mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											mdgriffith$elm_ui$Element$spacing(15),
											mdgriffith$elm_ui$Element$Font$size(16),
											mdgriffith$elm_ui$Element$paddingEach(
											{bottom: 15, left: 0, right: 0, top: 0})
										]),
									_List_fromArray(
										[
											A2(
											mdgriffith$elm_ui$Element$Input$button,
											author$project$Internals$CommonStyleHelpers$buttonStyle(true),
											{
												label: mdgriffith$elm_ui$Element$text('Quitter'),
												onPress: elm$core$Maybe$Just(
													model.externalMsg(author$project$PageEditor$EditorPlugins$TextBlockPlugin$Quit))
											}),
											A2(
											mdgriffith$elm_ui$Element$Input$button,
											author$project$Internals$CommonStyleHelpers$buttonStyle(true),
											{
												label: mdgriffith$elm_ui$Element$text('Valider et Quitter'),
												onPress: elm$core$Maybe$Just(
													model.externalMsg(author$project$PageEditor$EditorPlugins$TextBlockPlugin$SaveAndQuit))
											})
										]))
								])),
							A2(author$project$PageEditor$EditorPlugins$TextBlockPlugin$textBlockPreview, model, renderConfig)
						]))
				]));
	});
var author$project$PageEditor$EditorPlugins$VideoPlugin$CheckControls = function (a) {
	return {$: 'CheckControls', a: a};
};
var author$project$PageEditor$EditorPlugins$VideoPlugin$CheckFrameBorder = function (a) {
	return {$: 'CheckFrameBorder', a: a};
};
var author$project$PageEditor$EditorPlugins$VideoPlugin$CheckPrivacy = function (a) {
	return {$: 'CheckPrivacy', a: a};
};
var author$project$PageEditor$EditorPlugins$VideoPlugin$CheckSuggestions = function (a) {
	return {$: 'CheckSuggestions', a: a};
};
var author$project$PageEditor$EditorPlugins$VideoPlugin$CheckTitle = function (a) {
	return {$: 'CheckTitle', a: a};
};
var author$project$PageEditor$EditorPlugins$VideoPlugin$ParseHtml = {$: 'ParseHtml'};
var author$project$PageEditor$EditorPlugins$VideoPlugin$Quit = {$: 'Quit'};
var author$project$PageEditor$EditorPlugins$VideoPlugin$SaveAndQuit = {$: 'SaveAndQuit'};
var author$project$PageEditor$EditorPlugins$VideoPlugin$SetAlignment = function (a) {
	return {$: 'SetAlignment', a: a};
};
var author$project$PageEditor$EditorPlugins$VideoPlugin$SetEmbedString = function (a) {
	return {$: 'SetEmbedString', a: a};
};
var author$project$PageEditor$EditorPlugins$VideoPlugin$SetHeight = function (a) {
	return {$: 'SetHeight', a: a};
};
var author$project$PageEditor$EditorPlugins$VideoPlugin$SetStartAt = function (a) {
	return {$: 'SetStartAt', a: a};
};
var author$project$PageEditor$EditorPlugins$VideoPlugin$SetWidth = function (a) {
	return {$: 'SetWidth', a: a};
};
var author$project$PageEditor$EditorPlugins$VideoPlugin$checkIcon = function (c) {
	return c ? mdgriffith$elm_ui$Element$html(
		author$project$Internals$Icons$checkSquare(15)) : mdgriffith$elm_ui$Element$html(
		author$project$Internals$Icons$square(15));
};
var author$project$PageEditor$EditorPlugins$VideoPlugin$iconSize = 18;
var mdgriffith$elm_ui$Element$Input$checkbox = F2(
	function (attrs, _n0) {
		var label = _n0.label;
		var icon = _n0.icon;
		var checked = _n0.checked;
		var onChange = _n0.onChange;
		var attributes = _Utils_ap(
			_List_fromArray(
				[
					mdgriffith$elm_ui$Element$Input$isHiddenLabel(label) ? mdgriffith$elm_ui$Internal$Model$NoAttribute : mdgriffith$elm_ui$Element$spacing(6),
					mdgriffith$elm_ui$Internal$Model$Attr(
					elm$html$Html$Events$onClick(
						onChange(!checked))),
					mdgriffith$elm_ui$Element$Region$announce,
					mdgriffith$elm_ui$Element$Input$onKeyLookup(
					function (code) {
						return _Utils_eq(code, mdgriffith$elm_ui$Element$Input$enter) ? elm$core$Maybe$Just(
							onChange(!checked)) : (_Utils_eq(code, mdgriffith$elm_ui$Element$Input$space) ? elm$core$Maybe$Just(
							onChange(!checked)) : elm$core$Maybe$Nothing);
					}),
					mdgriffith$elm_ui$Element$Input$tabindex(0),
					mdgriffith$elm_ui$Element$pointer,
					mdgriffith$elm_ui$Element$alignLeft,
					mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
				]),
			attrs);
		return A3(
			mdgriffith$elm_ui$Element$Input$applyLabel,
			attributes,
			label,
			A4(
				mdgriffith$elm_ui$Internal$Model$element,
				mdgriffith$elm_ui$Internal$Model$asEl,
				mdgriffith$elm_ui$Internal$Model$div,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Internal$Model$Attr(
						A2(elm$html$Html$Attributes$attribute, 'role', 'checkbox')),
						mdgriffith$elm_ui$Internal$Model$Attr(
						A2(
							elm$html$Html$Attributes$attribute,
							'aria-checked',
							checked ? 'true' : 'false')),
						mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(label),
						mdgriffith$elm_ui$Element$centerY,
						mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$shrink)
					]),
				mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[
							icon(checked)
						]))));
	});
var author$project$PageEditor$EditorPlugins$VideoPlugin$view = F2(
	function (config, model) {
		return A2(
			mdgriffith$elm_ui$Element$map,
			model.externalMsg,
			A2(
				mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$padding(15),
						mdgriffith$elm_ui$Element$alignTop,
						mdgriffith$elm_ui$Element$Font$size(16),
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$scrollbars
					]),
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$text('Insérer / Modifier une video:'),
						A2(
						mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(10),
								mdgriffith$elm_ui$Element$width(
								mdgriffith$elm_ui$Element$px(500))
							]),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$Input$multiline,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
									]),
								{
									label: A2(
										mdgriffith$elm_ui$Element$Input$labelAbove,
										_List_Nil,
										mdgriffith$elm_ui$Element$text('Copier ici le code d\'intégration:')),
									onChange: author$project$PageEditor$EditorPlugins$VideoPlugin$SetEmbedString,
									placeholder: elm$core$Maybe$Nothing,
									spellcheck: false,
									text: A2(elm$core$Maybe$withDefault, '', model.pastedHtml)
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(
									!_Utils_eq(model.pastedHtml, elm$core$Maybe$Nothing)),
								{
									label: mdgriffith$elm_ui$Element$text('Valider'),
									onPress: (!_Utils_eq(model.pastedHtml, elm$core$Maybe$Nothing)) ? elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$VideoPlugin$ParseHtml) : elm$core$Maybe$Nothing
								})
							])),
						A2(
						mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$text('Alignement: '),
								A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(15)
									]),
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$Input$button,
										A2(
											author$project$Internals$CommonStyleHelpers$toogleButtonStyle,
											_Utils_eq(model.alignment, author$project$PageEditor$Internals$DocumentEditorHelpers$ALeft),
											true),
										{
											label: A2(
												mdgriffith$elm_ui$Element$el,
												_List_Nil,
												mdgriffith$elm_ui$Element$html(
													author$project$Internals$Icons$alignLeft(author$project$PageEditor$EditorPlugins$VideoPlugin$iconSize))),
											onPress: elm$core$Maybe$Just(
												author$project$PageEditor$EditorPlugins$VideoPlugin$SetAlignment(author$project$PageEditor$Internals$DocumentEditorHelpers$ALeft))
										}),
										A2(
										mdgriffith$elm_ui$Element$Input$button,
										A2(
											author$project$Internals$CommonStyleHelpers$toogleButtonStyle,
											_Utils_eq(model.alignment, author$project$PageEditor$Internals$DocumentEditorHelpers$ACenter),
											true),
										{
											label: A2(
												mdgriffith$elm_ui$Element$el,
												_List_Nil,
												mdgriffith$elm_ui$Element$html(
													author$project$Internals$Icons$alignCenter(author$project$PageEditor$EditorPlugins$VideoPlugin$iconSize))),
											onPress: elm$core$Maybe$Just(
												author$project$PageEditor$EditorPlugins$VideoPlugin$SetAlignment(author$project$PageEditor$Internals$DocumentEditorHelpers$ACenter))
										}),
										A2(
										mdgriffith$elm_ui$Element$Input$button,
										A2(
											author$project$Internals$CommonStyleHelpers$toogleButtonStyle,
											_Utils_eq(model.alignment, author$project$PageEditor$Internals$DocumentEditorHelpers$ARight),
											true),
										{
											label: A2(
												mdgriffith$elm_ui$Element$el,
												_List_Nil,
												mdgriffith$elm_ui$Element$html(
													author$project$Internals$Icons$alignRight(author$project$PageEditor$EditorPlugins$VideoPlugin$iconSize))),
											onPress: elm$core$Maybe$Just(
												author$project$PageEditor$EditorPlugins$VideoPlugin$SetAlignment(author$project$PageEditor$Internals$DocumentEditorHelpers$ARight))
										})
									])),
								mdgriffith$elm_ui$Element$text('Options: '),
								A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(15)
									]),
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$Input$checkbox,
										_List_Nil,
										{
											checked: model.frameBorder,
											icon: author$project$PageEditor$EditorPlugins$VideoPlugin$checkIcon,
											label: A2(
												mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_Nil,
												mdgriffith$elm_ui$Element$text('Bordure')),
											onChange: author$project$PageEditor$EditorPlugins$VideoPlugin$CheckFrameBorder
										}),
										A2(
										mdgriffith$elm_ui$Element$Input$checkbox,
										_List_Nil,
										{
											checked: model.title,
											icon: author$project$PageEditor$EditorPlugins$VideoPlugin$checkIcon,
											label: A2(
												mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_Nil,
												mdgriffith$elm_ui$Element$text('Afficher titre')),
											onChange: author$project$PageEditor$EditorPlugins$VideoPlugin$CheckTitle
										}),
										A2(
										mdgriffith$elm_ui$Element$Input$checkbox,
										_List_Nil,
										{
											checked: model.controls,
											icon: author$project$PageEditor$EditorPlugins$VideoPlugin$checkIcon,
											label: A2(
												mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_Nil,
												mdgriffith$elm_ui$Element$text('Commandes')),
											onChange: author$project$PageEditor$EditorPlugins$VideoPlugin$CheckControls
										}),
										A2(
										mdgriffith$elm_ui$Element$Input$checkbox,
										_List_Nil,
										{
											checked: model.suggestions,
											icon: author$project$PageEditor$EditorPlugins$VideoPlugin$checkIcon,
											label: A2(
												mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_Nil,
												mdgriffith$elm_ui$Element$text('Suggestions')),
											onChange: author$project$PageEditor$EditorPlugins$VideoPlugin$CheckSuggestions
										}),
										A2(
										mdgriffith$elm_ui$Element$Input$checkbox,
										_List_Nil,
										{
											checked: model.privacy,
											icon: author$project$PageEditor$EditorPlugins$VideoPlugin$checkIcon,
											label: A2(
												mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_Nil,
												mdgriffith$elm_ui$Element$text('Mode privé')),
											onChange: author$project$PageEditor$EditorPlugins$VideoPlugin$CheckPrivacy
										})
									])),
								A2(
								mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(15)
									]),
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$Input$text,
										_Utils_ap(
											author$project$Internals$CommonStyleHelpers$textInputStyle,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$width(
													mdgriffith$elm_ui$Element$px(50))
												])),
										{
											label: A2(
												mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_fromArray(
													[mdgriffith$elm_ui$Element$centerY]),
												mdgriffith$elm_ui$Element$text('largeur: ')),
											onChange: author$project$PageEditor$EditorPlugins$VideoPlugin$SetWidth,
											placeholder: elm$core$Maybe$Nothing,
											text: elm$core$String$fromInt(model.size.videoWidth)
										}),
										A2(
										mdgriffith$elm_ui$Element$Input$text,
										_Utils_ap(
											author$project$Internals$CommonStyleHelpers$textInputStyle,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$width(
													mdgriffith$elm_ui$Element$px(50))
												])),
										{
											label: A2(
												mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_fromArray(
													[mdgriffith$elm_ui$Element$centerY]),
												mdgriffith$elm_ui$Element$text('hauteur: ')),
											onChange: author$project$PageEditor$EditorPlugins$VideoPlugin$SetHeight,
											placeholder: elm$core$Maybe$Nothing,
											text: elm$core$String$fromInt(model.size.videoHeight)
										}),
										A2(
										mdgriffith$elm_ui$Element$Input$text,
										_Utils_ap(
											author$project$Internals$CommonStyleHelpers$textInputStyle,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$width(
													mdgriffith$elm_ui$Element$px(100))
												])),
										{
											label: A2(
												mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_fromArray(
													[mdgriffith$elm_ui$Element$centerY]),
												mdgriffith$elm_ui$Element$text('Commencer lecture à: ')),
											onChange: author$project$PageEditor$EditorPlugins$VideoPlugin$SetStartAt,
											placeholder: elm$core$Maybe$Just(
												A2(
													mdgriffith$elm_ui$Element$Input$placeholder,
													_List_Nil,
													mdgriffith$elm_ui$Element$text('hh:mm:ss'))),
											text: A2(
												elm$core$Maybe$withDefault,
												'',
												A2(elm$core$Maybe$map, elm$core$String$fromInt, model.startAt))
										})
									]))
							])),
						function () {
						var _n0 = model.newSrc;
						if (_n0.$ === 'Just') {
							var url = _n0.a;
							return A2(
								mdgriffith$elm_ui$Element$el,
								_List_Nil,
								mdgriffith$elm_ui$Element$html(
									A2(
										elm$html$Html$iframe,
										_List_fromArray(
											[
												elm$html$Html$Attributes$src(
												A2(author$project$PageEditor$Internals$DocumentEditorHelpers$buildYoutubeUrl, url, model)),
												elm$html$Html$Attributes$width(model.size.videoWidth),
												elm$html$Html$Attributes$height(model.size.videoHeight),
												model.frameBorder ? author$project$Internals$CommonStyleHelpers$noHtmlAttr : A2(elm$html$Html$Attributes$attribute, 'frameborder', '0'),
												A2(elm$html$Html$Attributes$attribute, 'allowfullscreen', 'true'),
												A2(elm$html$Html$Attributes$attribute, 'allow', 'autoplay; encrypted-media')
											]),
										_List_Nil)));
						} else {
							var _n1 = model.mbVideoMeta;
							if (_n1.$ === 'Just') {
								var vidMeta = _n1.a;
								return A2(
									mdgriffith$elm_ui$Element$el,
									_List_Nil,
									mdgriffith$elm_ui$Element$html(
										A2(
											elm$html$Html$iframe,
											_List_fromArray(
												[
													elm$html$Html$Attributes$src(
													A2(author$project$PageEditor$Internals$DocumentEditorHelpers$buildYoutubeUrl, vidMeta.src, model)),
													elm$html$Html$Attributes$width(model.size.videoWidth),
													elm$html$Html$Attributes$height(model.size.videoHeight),
													model.frameBorder ? author$project$Internals$CommonStyleHelpers$noHtmlAttr : A2(elm$html$Html$Attributes$attribute, 'frameborder', '0'),
													A2(elm$html$Html$Attributes$attribute, 'allowfullscreen', 'true'),
													A2(elm$html$Html$Attributes$attribute, 'allow', 'autoplay; encrypted-media')
												]),
											_List_Nil)));
							} else {
								return mdgriffith$elm_ui$Element$none;
							}
						}
					}(),
						A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15),
								mdgriffith$elm_ui$Element$paddingEach(
								{bottom: 15, left: 0, right: 0, top: 0})
							]),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: mdgriffith$elm_ui$Element$text('Quitter'),
									onPress: elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$VideoPlugin$Quit)
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: mdgriffith$elm_ui$Element$text('Valider et Quitter'),
									onPress: elm$core$Maybe$Just(author$project$PageEditor$EditorPlugins$VideoPlugin$SaveAndQuit)
								})
							]))
					])));
	});
var truqu$elm_base64$Base64$Encode$intToBase64 = function (i) {
	switch (i) {
		case 0:
			return 'A';
		case 1:
			return 'B';
		case 2:
			return 'C';
		case 3:
			return 'D';
		case 4:
			return 'E';
		case 5:
			return 'F';
		case 6:
			return 'G';
		case 7:
			return 'H';
		case 8:
			return 'I';
		case 9:
			return 'J';
		case 10:
			return 'K';
		case 11:
			return 'L';
		case 12:
			return 'M';
		case 13:
			return 'N';
		case 14:
			return 'O';
		case 15:
			return 'P';
		case 16:
			return 'Q';
		case 17:
			return 'R';
		case 18:
			return 'S';
		case 19:
			return 'T';
		case 20:
			return 'U';
		case 21:
			return 'V';
		case 22:
			return 'W';
		case 23:
			return 'X';
		case 24:
			return 'Y';
		case 25:
			return 'Z';
		case 26:
			return 'a';
		case 27:
			return 'b';
		case 28:
			return 'c';
		case 29:
			return 'd';
		case 30:
			return 'e';
		case 31:
			return 'f';
		case 32:
			return 'g';
		case 33:
			return 'h';
		case 34:
			return 'i';
		case 35:
			return 'j';
		case 36:
			return 'k';
		case 37:
			return 'l';
		case 38:
			return 'm';
		case 39:
			return 'n';
		case 40:
			return 'o';
		case 41:
			return 'p';
		case 42:
			return 'q';
		case 43:
			return 'r';
		case 44:
			return 's';
		case 45:
			return 't';
		case 46:
			return 'u';
		case 47:
			return 'v';
		case 48:
			return 'w';
		case 49:
			return 'x';
		case 50:
			return 'y';
		case 51:
			return 'z';
		case 52:
			return '0';
		case 53:
			return '1';
		case 54:
			return '2';
		case 55:
			return '3';
		case 56:
			return '4';
		case 57:
			return '5';
		case 58:
			return '6';
		case 59:
			return '7';
		case 60:
			return '8';
		case 61:
			return '9';
		case 62:
			return '+';
		default:
			return '/';
	}
};
var truqu$elm_base64$Base64$Encode$toBase64 = function (_int) {
	return _Utils_ap(
		truqu$elm_base64$Base64$Encode$intToBase64(63 & (_int >>> 18)),
		_Utils_ap(
			truqu$elm_base64$Base64$Encode$intToBase64(63 & (_int >>> 12)),
			_Utils_ap(
				truqu$elm_base64$Base64$Encode$intToBase64(63 & (_int >>> 6)),
				truqu$elm_base64$Base64$Encode$intToBase64(63 & (_int >>> 0)))));
};
var truqu$elm_base64$Base64$Encode$add = F2(
	function (_char, _n0) {
		var res = _n0.a;
		var count = _n0.b;
		var acc = _n0.c;
		var current = (acc << 8) | _char;
		if (count === 2) {
			return _Utils_Tuple3(
				_Utils_ap(
					res,
					truqu$elm_base64$Base64$Encode$toBase64(current)),
				0,
				0);
		} else {
			return _Utils_Tuple3(res, count + 1, current);
		}
	});
var truqu$elm_base64$Base64$Encode$chomp = F2(
	function (char_, acc) {
		var _char = elm$core$Char$toCode(char_);
		return (_char < 128) ? A2(truqu$elm_base64$Base64$Encode$add, _char, acc) : ((_char < 2048) ? A2(
			truqu$elm_base64$Base64$Encode$add,
			128 | (63 & _char),
			A2(truqu$elm_base64$Base64$Encode$add, 192 | (_char >>> 6), acc)) : (((_char < 55296) || ((_char >= 57344) && (_char <= 65535))) ? A2(
			truqu$elm_base64$Base64$Encode$add,
			128 | (63 & _char),
			A2(
				truqu$elm_base64$Base64$Encode$add,
				128 | (63 & (_char >>> 6)),
				A2(truqu$elm_base64$Base64$Encode$add, 224 | (_char >>> 12), acc))) : A2(
			truqu$elm_base64$Base64$Encode$add,
			128 | (63 & _char),
			A2(
				truqu$elm_base64$Base64$Encode$add,
				128 | (63 & (_char >>> 6)),
				A2(
					truqu$elm_base64$Base64$Encode$add,
					128 | (63 & (_char >>> 12)),
					A2(truqu$elm_base64$Base64$Encode$add, 240 | (_char >>> 18), acc))))));
	});
var truqu$elm_base64$Base64$Encode$initial = _Utils_Tuple3('', 0, 0);
var truqu$elm_base64$Base64$Encode$wrapUp = function (_n0) {
	var res = _n0.a;
	var cnt = _n0.b;
	var acc = _n0.c;
	switch (cnt) {
		case 1:
			return res + (truqu$elm_base64$Base64$Encode$intToBase64(63 & (acc >>> 2)) + (truqu$elm_base64$Base64$Encode$intToBase64(63 & (acc << 4)) + '=='));
		case 2:
			return res + (truqu$elm_base64$Base64$Encode$intToBase64(63 & (acc >>> 10)) + (truqu$elm_base64$Base64$Encode$intToBase64(63 & (acc >>> 4)) + (truqu$elm_base64$Base64$Encode$intToBase64(63 & (acc << 2)) + '=')));
		default:
			return res;
	}
};
var truqu$elm_base64$Base64$Encode$encode = function (input) {
	return truqu$elm_base64$Base64$Encode$wrapUp(
		A3(elm$core$String$foldl, truqu$elm_base64$Base64$Encode$chomp, truqu$elm_base64$Base64$Encode$initial, input));
};
var truqu$elm_base64$Base64$encode = truqu$elm_base64$Base64$Encode$encode;
var author$project$PageEditor$Internals$PersistencePlugin$view = function (config) {
	return A2(
		mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				mdgriffith$elm_ui$Element$spacing(15),
				mdgriffith$elm_ui$Element$padding(15),
				mdgriffith$elm_ui$Element$Font$size(16),
				mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill),
				mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
				mdgriffith$elm_ui$Element$scrollbarY
			]),
		_List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$Font$bold,
						mdgriffith$elm_ui$Element$Font$size(18)
					]),
				mdgriffith$elm_ui$Element$text('Persistence dans le cache du navigateur')),
				A2(
				mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15),
						mdgriffith$elm_ui$Element$Background$color(
						A3(mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95)),
						mdgriffith$elm_ui$Element$padding(10),
						mdgriffith$elm_ui$Element$width(
						mdgriffith$elm_ui$Element$px(500))
					]),
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$text('Fichiers disponibles:'),
						A2(
						mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								A2(mdgriffith$elm_ui$Element$spacingXY, 15, 0),
								mdgriffith$elm_ui$Element$Background$color(
								A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
								mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
								mdgriffith$elm_ui$Element$height(
								mdgriffith$elm_ui$Element$px(150)),
								mdgriffith$elm_ui$Element$scrollbars
							]),
						A2(
							elm$core$List$map,
							function (f) {
								return A2(
									mdgriffith$elm_ui$Element$el,
									_Utils_ap(
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$Events$onClick(
												config.setLocalStorageKey(f)),
												mdgriffith$elm_ui$Element$pointer,
												A2(mdgriffith$elm_ui$Element$paddingXY, 5, 3)
											]),
										_Utils_eq(f, config.localStorageKey) ? _List_fromArray(
											[
												mdgriffith$elm_ui$Element$Background$color(
												A4(mdgriffith$elm_ui$Element$rgba, 0.3, 0, 1, 0.3))
											]) : _List_Nil),
									mdgriffith$elm_ui$Element$text(f));
							},
							config.localStorageKeys)),
						A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Effacer fichier')
											])),
									onPress: elm$core$Maybe$Just(config.removeFromLocalStorage)
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Vider cache')
											])),
									onPress: elm$core$Maybe$Just(config.clearLocalStorage)
								})
							])),
						A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Charger fichier')
											])),
									onPress: elm$core$Maybe$Just(config.getFromLocalStorage)
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Conversion Json -> Document')
											])),
									onPress: elm$core$Maybe$Just(config.loadDocument)
								})
							]))
					])),
				A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_Nil,
						mdgriffith$elm_ui$Element$text('Prévisualisation Json: '))
					])),
				A2(
				mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$Keyed$el,
						_List_Nil,
						_Utils_Tuple2(
							config.jsonBuffer,
							A2(
								mdgriffith$elm_ui$Element$Input$multiline,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(500)),
										mdgriffith$elm_ui$Element$height(
										mdgriffith$elm_ui$Element$px(350)),
										mdgriffith$elm_ui$Element$scrollbars,
										mdgriffith$elm_ui$Element$htmlAttribute(
										A2(elm$html$Html$Attributes$style, 'background-color', 'Beige')),
										mdgriffith$elm_ui$Element$Font$size(14),
										mdgriffith$elm_ui$Element$padding(10)
									]),
								{
									label: A2(mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, mdgriffith$elm_ui$Element$none),
									onChange: config.setJsonBuffer,
									placeholder: elm$core$Maybe$Nothing,
									spellcheck: false,
									text: config.jsonBuffer
								}))),
						A2(
						mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								mdgriffith$elm_ui$Element$Input$text,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$width(
										mdgriffith$elm_ui$Element$px(150)),
										mdgriffith$elm_ui$Element$spacing(5),
										A2(mdgriffith$elm_ui$Element$paddingXY, 15, 5),
										mdgriffith$elm_ui$Element$focused(
										_List_fromArray(
											[
												A2(
												mdgriffith$elm_ui$Element$Border$glow,
												A3(mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
												0)
											])),
										mdgriffith$elm_ui$Element$Font$family(
										_List_fromArray(
											[mdgriffith$elm_ui$Element$Font$monospace]))
									]),
								{
									label: A2(
										mdgriffith$elm_ui$Element$Input$labelLeft,
										_List_fromArray(
											[mdgriffith$elm_ui$Element$centerY, mdgriffith$elm_ui$Element$Font$bold]),
										mdgriffith$elm_ui$Element$text('Nom du fichier: ')),
									onChange: config.setLocalStorageKey,
									placeholder: elm$core$Maybe$Nothing,
									text: config.localStorageKey
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Conversion Document -> Json')
											])),
									onPress: elm$core$Maybe$Just(
										config.setLocalStorageValue(
											author$project$Document$Json$DocumentSerializer$encodeDocument(config.document)))
								}),
								A2(
								mdgriffith$elm_ui$Element$Input$button,
								author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									label: A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$text('Sauvegarder')
											])),
									onPress: elm$core$Maybe$Just(config.putInLocalStorage)
								})
							]))
					])),
				A2(
				mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[mdgriffith$elm_ui$Element$Font$bold]),
						mdgriffith$elm_ui$Element$text('Lien téléchargement: ')),
						mdgriffith$elm_ui$Element$html(
						A2(
							elm$html$Html$a,
							_List_fromArray(
								[
									elm$html$Html$Attributes$href(
									'data:application/octet-stream;charset=utf-16le;base64,' + truqu$elm_base64$Base64$encode(config.jsonBuffer)),
									elm$html$Html$Attributes$download(config.localStorageKey + '.json')
								]),
							_List_fromArray(
								[
									elm$html$Html$text(config.localStorageKey + '.json')
								])))
					])),
				A2(
				mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$paddingEach(
						{bottom: 15, left: 0, right: 0, top: 0})
					]),
				A2(
					mdgriffith$elm_ui$Element$Input$button,
					author$project$Internals$CommonStyleHelpers$buttonStyle(true),
					{
						label: A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									mdgriffith$elm_ui$Element$text('Retour')
								])),
						onPress: elm$core$Maybe$Just(
							config.setEditorPlugin(elm$core$Maybe$Nothing))
					}))
			]));
};
var author$project$PageEditor$PageEditor$ClearLocalStorage = {$: 'ClearLocalStorage'};
var author$project$PageEditor$PageEditor$CreateNewCell = function (a) {
	return {$: 'CreateNewCell', a: a};
};
var author$project$PageEditor$PageEditor$CreateNewContainer = function (a) {
	return {$: 'CreateNewContainer', a: a};
};
var author$project$PageEditor$PageEditor$GetFromLocalStorage = {$: 'GetFromLocalStorage'};
var author$project$PageEditor$PageEditor$InsertNewCell = function (a) {
	return {$: 'InsertNewCell', a: a};
};
var author$project$PageEditor$PageEditor$LoadDocument = {$: 'LoadDocument'};
var author$project$PageEditor$PageEditor$LoadLocalStorageDocument = {$: 'LoadLocalStorageDocument'};
var author$project$PageEditor$PageEditor$PutInLocalStorage = {$: 'PutInLocalStorage'};
var author$project$PageEditor$PageEditor$RemoveFromLocalStorage = {$: 'RemoveFromLocalStorage'};
var author$project$PageEditor$PageEditor$SetJsonBuffer = function (a) {
	return {$: 'SetJsonBuffer', a: a};
};
var author$project$PageEditor$PageEditor$SetLocalStorageKey = function (a) {
	return {$: 'SetLocalStorageKey', a: a};
};
var author$project$PageEditor$PageEditor$SetLocalStorageValue = function (a) {
	return {$: 'SetLocalStorageValue', a: a};
};
var author$project$PageEditor$PageEditor$SwapContainerType = function (a) {
	return {$: 'SwapContainerType', a: a};
};
var author$project$PageEditor$PageEditor$UpdateContainerAttr = function (a) {
	return {$: 'UpdateContainerAttr', a: a};
};
var author$project$PageEditor$PageEditor$pluginView = F3(
	function (config, model, plugin) {
		switch (plugin.$) {
			case 'ImagePlugin':
				return A2(
					author$project$PageEditor$EditorPlugins$ImagePlugin$view,
					{fileExplorer: config.fileExplorer, logInfo: config.logInfo, maxHeight: (model.config.height - model.config.mainInterfaceHeight) - 35, picListing: _List_Nil, zone: config.zone},
					model.imagePlugin);
			case 'TablePlugin':
				return author$project$PageEditor$EditorPlugins$TablePlugin$view(model.tablePlugin);
			case 'CustomElementPlugin':
				return A2(
					mdgriffith$elm_ui$Element$el,
					_List_Nil,
					mdgriffith$elm_ui$Element$text('Nothing  here yet!'));
			case 'TextBlockPlugin':
				return A3(
					author$project$PageEditor$EditorPlugins$TextBlockPlugin$view,
					{fileExplorer: config.fileExplorer, logInfo: config.logInfo, pageTreeEditor: config.pageTreeEditor, zone: config.zone},
					model.config,
					model.textBlockPlugin);
			case 'NewDocPlugin':
				return author$project$PageEditor$EditorPlugins$NewDocPlugin$view(
					{
						createNewCell: A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$CreateNewCell),
						createNewContainer: A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$CreateNewContainer),
						goBack: model.externalMsg(
							author$project$PageEditor$PageEditor$SetEditorPlugin(elm$core$Maybe$Nothing)),
						insertNewCell: A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$InsertNewCell),
						nextUid: model.nextUid
					});
			case 'ContainerEditPlugin':
				var _n1 = author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document);
				if (_n1.$ === 'Container') {
					var cv = _n1.a;
					return author$project$PageEditor$EditorPlugins$ContainerEditPlugin$view(
						{
							currentContainer: cv,
							goBack: model.externalMsg(
								author$project$PageEditor$PageEditor$SetEditorPlugin(elm$core$Maybe$Nothing)),
							swapContainerType: A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$SwapContainerType),
							updateContainerAttr: A2(elm$core$Basics$composeL, model.externalMsg, author$project$PageEditor$PageEditor$UpdateContainerAttr)
						});
				} else {
					return mdgriffith$elm_ui$Element$text('Aucun containeur sélectionné');
				}
			case 'VideoPlugin':
				return A2(author$project$PageEditor$EditorPlugins$VideoPlugin$view, _List_Nil, model.videoPlugin);
			case 'BlockLinksPlugin':
				return A3(
					author$project$PageEditor$EditorPlugins$BlockLinksPlugin$view,
					{fileExplorer: config.fileExplorer, logInfo: config.logInfo, pageTreeEditor: config.pageTreeEditor, zone: config.zone},
					model.config,
					model.blockLinksPlugin);
			case 'FichesPlugin':
				return A2(
					author$project$PageEditor$EditorPlugins$FichesPlugin$view,
					{genDirEditor: config.genDirEditor},
					model.fichesPlugin);
			case 'PictureLinksPlugin':
				return A2(
					author$project$PageEditor$EditorPlugins$PictureLinksPlugin$view,
					{fileExplorer: config.fileExplorer, logInfo: config.logInfo, zone: config.zone},
					model.pictureLinksPlugin);
			case 'GalleryPlugin':
				return A2(
					author$project$PageEditor$EditorPlugins$GalleryPlugin$view,
					{fileExplorer: config.fileExplorer, logInfo: config.logInfo, zone: config.zone},
					model.galleryPlugin);
			case 'PersistencePlugin':
				return A2(
					mdgriffith$elm_ui$Element$map,
					model.externalMsg,
					author$project$PageEditor$Internals$PersistencePlugin$view(
						{
							clearLocalStorage: author$project$PageEditor$PageEditor$ClearLocalStorage,
							document: author$project$PageEditor$Internals$DocumentZipper$extractDoc(
								author$project$PageEditor$Internals$DocumentZipper$rewind(model.document)),
							getFromLocalStorage: author$project$PageEditor$PageEditor$GetFromLocalStorage,
							jsonBuffer: model.jsonBuffer,
							loadDocument: author$project$PageEditor$PageEditor$LoadLocalStorageDocument,
							localStorageKey: model.localStorageKey,
							localStorageKeys: model.localStorageKeys,
							localStorageValue: model.localStorageValue,
							noOp: author$project$PageEditor$PageEditor$NoOp,
							putInLocalStorage: author$project$PageEditor$PageEditor$PutInLocalStorage,
							removeFromLocalStorage: author$project$PageEditor$PageEditor$RemoveFromLocalStorage,
							setEditorPlugin: author$project$PageEditor$PageEditor$SetEditorPlugin,
							setJsonBuffer: author$project$PageEditor$PageEditor$SetJsonBuffer,
							setLocalStorageKey: author$project$PageEditor$PageEditor$SetLocalStorageKey,
							setLocalStorageValue: author$project$PageEditor$PageEditor$SetLocalStorageValue
						}));
			default:
				var mode = plugin.a;
				return A2(
					mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							author$project$PageTreeEditor$PageTreeEditor$view,
							{logInfo: config.logInfo, maxHeight: (model.config.height - model.config.mainInterfaceHeight) - 85, mode: mode, zone: config.zone},
							config.pageTreeEditor),
							A2(
							mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									A2(mdgriffith$elm_ui$Element$paddingXY, 15, 0),
									mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(true),
									{
										label: A2(
											mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$text('Retour')
												])),
										onPress: elm$core$Maybe$Just(
											model.externalMsg(
												author$project$PageEditor$PageEditor$SetEditorPlugin(elm$core$Maybe$Nothing)))
									}),
									_Utils_eq(mode, author$project$PageTreeEditor$PageTreeEditor$Open) ? A2(
									mdgriffith$elm_ui$Element$Input$button,
									author$project$Internals$CommonStyleHelpers$buttonStyle(true),
									{
										label: A2(
											mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													mdgriffith$elm_ui$Element$text('Ouvrir')
												])),
										onPress: elm$core$Maybe$Just(
											model.externalMsg(author$project$PageEditor$PageEditor$LoadDocument))
									}) : mdgriffith$elm_ui$Element$none
								]))
						]));
		}
	});
var author$project$PageTreeEditor$PageTreeEditor$fileIoSelectedPageInfo = function (model) {
	var _n0 = model.fileIoSelected;
	if (_n0.$ === 'Nothing') {
		return elm$core$Maybe$Nothing;
	} else {
		var _n1 = _n0.a;
		var pageInfo = _n1.a;
		var xs = _n1.b;
		return elm$core$Maybe$Just(pageInfo);
	}
};
var author$project$PageEditor$PageEditor$view = F2(
	function (config, model) {
		var renderConfig = model.config;
		var newConfig = _Utils_update(
			renderConfig,
			{
				fiches: author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$fichesData(config.genDirEditor),
				news: author$project$NewsEditor$NewsEditor$getNewsDict(config.newsEditor)
			});
		return A2(
			mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$height(
						A2(mdgriffith$elm_ui$Element$maximum, newConfig.height - 35, mdgriffith$elm_ui$Element$fill))
					]),
				model.menuClicked ? _List_fromArray(
					[
						mdgriffith$elm_ui$Element$Events$onClick(
						model.externalMsg(author$project$PageEditor$PageEditor$MenuClickOff))
					]) : _List_Nil),
			_List_fromArray(
				[
					A2(
					mdgriffith$elm_ui$Element$map,
					model.externalMsg,
					author$project$PageEditor$PageEditor$mainInterface(
						{
							canSave: !_Utils_eq(
								author$project$PageTreeEditor$PageTreeEditor$fileIoSelectedPageInfo(config.pageTreeEditor),
								elm$core$Maybe$Nothing),
							clicked: model.menuClicked,
							clipboardEmpty: _Utils_eq(model.clipboard, elm$core$Maybe$Nothing),
							containersBkgColors: newConfig.containersBkgColors,
							currentFocus: model.menuFocused,
							isInPlugin: !_Utils_eq(model.currentPlugin, elm$core$Maybe$Nothing),
							logInfo: config.logInfo,
							previewMode: newConfig.previewMode,
							season: newConfig.season,
							selectionIsContainer: author$project$Document$Document$isContainer(
								author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document)),
							selectionIsRoot: _Utils_eq(
								author$project$PageEditor$Internals$DocumentZipper$zipUp(model.document),
								elm$core$Maybe$Nothing),
							undoCacheEmpty: _Utils_eq(model.undoCache, _List_Nil)
						})),
					A2(
					mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
							mdgriffith$elm_ui$Element$clip,
							mdgriffith$elm_ui$Element$htmlAttribute(
							A2(elm$html$Html$Attributes$style, 'flex-shrink', '1')),
							mdgriffith$elm_ui$Element$height(mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							mdgriffith$elm_ui$Element$map,
							model.externalMsg,
							A3(
								author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$documentStructView,
								{
									containersColors: newConfig.containersBkgColors,
									isActive: _Utils_eq(model.currentPlugin, elm$core$Maybe$Nothing),
									nextUid: model.nextUid,
									zipToUidCmd: author$project$PageEditor$PageEditor$ZipToUid
								},
								author$project$Document$Document$getUid(
									author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.document)),
								author$project$PageEditor$Internals$DocumentZipper$extractDoc(
									author$project$PageEditor$Internals$DocumentZipper$rewind(model.document)))),
							function () {
							var _n0 = model.currentPlugin;
							if (_n0.$ === 'Nothing') {
								return author$project$PageEditor$PageEditor$documentView(
									_Utils_update(
										model,
										{config: newConfig}));
							} else {
								var plugin = _n0.a;
								return A3(
									author$project$PageEditor$PageEditor$pluginView,
									config,
									_Utils_update(
										model,
										{config: newConfig}),
									plugin);
							}
						}()
						]))
				]));
	});
var author$project$PageTreeEditor$PageTreeEditor$Full = {$: 'Full'};
var author$project$PageTreeEditor$PageTreeEditor$loadingStatus = function (model) {
	var _n0 = _Utils_Tuple3(model.pageTreeLoaded, model.contentsLoaded, model.keywordsLoaded);
	_n0$2:
	while (true) {
		_n0$3:
		while (true) {
			_n0$4:
			while (true) {
				switch (_n0.a.$) {
					case 'Success':
						switch (_n0.b.$) {
							case 'Success':
								switch (_n0.c.$) {
									case 'Success':
										var _n1 = _n0.a;
										var _n2 = _n0.b;
										var _n3 = _n0.c;
										return author$project$Internals$ToolHelpers$ToolLoadingSuccess;
									case 'Failure':
										break _n0$3;
									default:
										break _n0$4;
								}
							case 'Failure':
								break _n0$2;
							default:
								if (_n0.c.$ === 'Failure') {
									break _n0$3;
								} else {
									break _n0$4;
								}
						}
					case 'Failure':
						var _n4 = _n0.a;
						return author$project$Internals$ToolHelpers$ToolLoadingFailure('Erreur chargement arborescence');
					default:
						if (_n0.b.$ === 'Failure') {
							break _n0$2;
						} else {
							if (_n0.c.$ === 'Failure') {
								break _n0$3;
							} else {
								break _n0$4;
							}
						}
				}
			}
			return author$project$Internals$ToolHelpers$ToolLoadingWaiting;
		}
		var _n6 = _n0.c;
		return author$project$Internals$ToolHelpers$ToolLoadingFailure('Erreur chargement mots clés');
	}
	var _n5 = _n0.b;
	return author$project$Internals$ToolHelpers$ToolLoadingFailure('Erreur chargement pages');
};
var author$project$PageTreeEditor$PageTreeEditor$loadingView = function (model) {
	return A2(
		author$project$Internals$ToolHelpers$toolLoadingView,
		'Chargement de la stucture du site: ',
		{
			loadingStatus: author$project$PageTreeEditor$PageTreeEditor$loadingStatus(model)
		});
};
var mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 'OnlyDynamic', a: a, b: b};
	});
var mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 'StaticRootAndDynamic', a: a, b: b};
	});
var mdgriffith$elm_ui$Internal$Model$AllowHover = {$: 'AllowHover'};
var mdgriffith$elm_ui$Internal$Model$Layout = {$: 'Layout'};
var mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	backgroundColor: elm$core$Maybe$Nothing,
	borderColor: elm$core$Maybe$Nothing,
	shadow: elm$core$Maybe$Just(
		{
			blur: 3,
			color: A4(mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			offset: _Utils_Tuple2(0, 0),
			size: 3
		})
};
var mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 'HoverOption':
					var hoverable = opt.a;
					var _n4 = record.hover;
					if (_n4.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								hover: elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 'FocusStyleOption':
					var focusStyle = opt.a;
					var _n5 = record.focus;
					if (_n5.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								focus: elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _n6 = record.mode;
					if (_n6.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								mode: elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			focus: function () {
				var _n0 = record.focus;
				if (_n0.$ === 'Nothing') {
					return mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _n0.a;
					return focusable;
				}
			}(),
			hover: function () {
				var _n1 = record.hover;
				if (_n1.$ === 'Nothing') {
					return mdgriffith$elm_ui$Internal$Model$AllowHover;
				} else {
					var hoverable = _n1.a;
					return hoverable;
				}
			}(),
			mode: function () {
				var _n2 = record.mode;
				if (_n2.$ === 'Nothing') {
					return mdgriffith$elm_ui$Internal$Model$Layout;
				} else {
					var actualMode = _n2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			elm$core$List$foldr,
			combine,
			{focus: elm$core$Maybe$Nothing, hover: elm$core$Maybe$Nothing, mode: elm$core$Maybe$Nothing},
			options));
};
var mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 'Unstyled':
				var html = el.a;
				return html(mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Styled':
				var styles = el.a.styles;
				var html = el.a.html;
				return A2(
					html,
					mode(styles),
					mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Text':
				var text = el.a;
				return mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _n0 = options.mode;
			if (_n0.$ === 'NoStaticStyleSheet') {
				return mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				mdgriffith$elm_ui$Internal$Model$element,
				mdgriffith$elm_ui$Internal$Model$asEl,
				mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 'SansSerif'};
var mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			mdgriffith$elm_ui$Internal$Model$StyleClass,
			mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-color-' + mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4(mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4(mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			mdgriffith$elm_ui$Internal$Model$StyleClass,
			mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				mdgriffith$elm_ui$Internal$Model$Colored,
				'font-color-' + mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4(mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4(mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			mdgriffith$elm_ui$Internal$Model$StyleClass,
			mdgriffith$elm_ui$Internal$Flag$fontSize,
			mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			mdgriffith$elm_ui$Internal$Model$StyleClass,
			mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3(elm$core$List$foldl, mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_n0, attrs, child) {
		var options = _n0.options;
		return A3(
			mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				elm$core$List$cons,
				mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						elm$core$String$join,
						' ',
						_List_fromArray(
							[mdgriffith$elm_ui$Internal$Style$classes.root, mdgriffith$elm_ui$Internal$Style$classes.any, mdgriffith$elm_ui$Internal$Style$classes.single]))),
				_Utils_ap(mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var mdgriffith$elm_ui$Element$layout = mdgriffith$elm_ui$Element$layoutWith(
	{options: _List_Nil});
var author$project$MurolAdmin$view = function (model) {
	return {
		body: _List_fromArray(
			[
				A2(
				mdgriffith$elm_ui$Element$layout,
				_List_fromArray(
					[
						mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
						mdgriffith$elm_ui$Element$height(
						A2(mdgriffith$elm_ui$Element$maximum, model.winHeight, mdgriffith$elm_ui$Element$fill)),
						mdgriffith$elm_ui$Element$Font$size(16)
					]),
				function () {
					var _n0 = model.loadingStatus;
					switch (_n0.$) {
						case 'WaitingForLogin':
							return A2(
								author$project$Auth$AuthPlugin$view,
								{zone: model.zone},
								model.authTool);
						case 'Loading':
							var loadingComplete = A2(
								elm$core$List$all,
								function (ls) {
									return _Utils_eq(ls, author$project$Internals$ToolHelpers$ToolLoadingSuccess);
								},
								_List_fromArray(
									[
										author$project$FileExplorer$FileExplorer$loadingStatus(model.fileExplorer),
										author$project$PageTreeEditor$PageTreeEditor$loadingStatus(model.pageTreeEditor),
										author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$loadingStatus(model.generalDirectory),
										author$project$NewsEditor$NewsEditor$loadingStatus(model.newsEditor)
									]));
							return A2(
								mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$spacing(15),
										mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
										mdgriffith$elm_ui$Element$padding(15)
									]),
								_List_fromArray(
									[
										author$project$FileExplorer$FileExplorer$loadingView(model.fileExplorer),
										author$project$PageTreeEditor$PageTreeEditor$loadingView(model.pageTreeEditor),
										author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$loadingView(model.generalDirectory),
										author$project$NewsEditor$NewsEditor$loadingView(model.newsEditor),
										A2(
										mdgriffith$elm_ui$Element$Input$button,
										author$project$Internals$CommonStyleHelpers$buttonStyle(loadingComplete),
										{
											label: mdgriffith$elm_ui$Element$text('Commencer'),
											onPress: elm$core$Maybe$Just(author$project$MurolAdmin$Launch)
										})
									]));
						default:
							return A2(
								mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										mdgriffith$elm_ui$Element$paddingEach(
										{bottom: 0, left: 0, right: 0, top: 5}),
										mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
										mdgriffith$elm_ui$Element$height(
										A2(mdgriffith$elm_ui$Element$maximum, model.winHeight, mdgriffith$elm_ui$Element$fill)),
										mdgriffith$elm_ui$Element$htmlAttribute(
										A2(elm$html$Html$Attributes$style, 'flex-shrink', '1'))
									]),
								_List_fromArray(
									[
										A2(
										mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												mdgriffith$elm_ui$Element$Border$widthEach(
												{bottom: 2, left: 0, right: 0, top: 0}),
												mdgriffith$elm_ui$Element$spacing(5),
												mdgriffith$elm_ui$Element$paddingEach(
												{bottom: 0, left: 5, right: 0, top: 0}),
												mdgriffith$elm_ui$Element$width(mdgriffith$elm_ui$Element$fill),
												mdgriffith$elm_ui$Element$Border$color(
												A3(mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8))
											]),
										_List_fromArray(
											[
												A3(author$project$MurolAdmin$tabView, model.currentTool, author$project$MurolAdmin$PageEditorTool, 'Editeur de page'),
												A3(author$project$MurolAdmin$tabView, model.currentTool, author$project$MurolAdmin$NewsEditorTool, 'Editeur actualités'),
												A3(author$project$MurolAdmin$tabView, model.currentTool, author$project$MurolAdmin$GeneralDirectoryTool, 'Répertoire général'),
												A3(author$project$MurolAdmin$tabView, model.currentTool, author$project$MurolAdmin$PageTreeTool, 'Structure du site'),
												A3(author$project$MurolAdmin$tabView, model.currentTool, author$project$MurolAdmin$FileExplorerTool, 'Explorateur de fichiers'),
												A3(author$project$MurolAdmin$tabView, model.currentTool, author$project$MurolAdmin$AuthTool, 'Authentification')
											])),
										function () {
										var _n1 = model.currentTool;
										switch (_n1.$) {
											case 'PageEditorTool':
												return A2(
													author$project$PageEditor$PageEditor$view,
													{
														fileExplorer: model.fileExplorer,
														genDirEditor: model.generalDirectory,
														logInfo: author$project$Auth$AuthPlugin$getLogInfo(model.authTool),
														newsEditor: model.newsEditor,
														pageTreeEditor: model.pageTreeEditor,
														zone: model.zone
													},
													model.pageEditor);
											case 'FileExplorerTool':
												return A2(
													author$project$FileExplorer$FileExplorer$view,
													{
														logInfo: author$project$Auth$AuthPlugin$getLogInfo(model.authTool),
														maxHeight: model.winHeight - 35,
														mode: author$project$FileExplorer$FileExplorer$Full,
														zone: model.zone
													},
													model.fileExplorer);
											case 'AuthTool':
												return A2(
													author$project$Auth$AuthPlugin$view,
													{zone: model.zone},
													model.authTool);
											case 'PageTreeTool':
												return A2(
													author$project$PageTreeEditor$PageTreeEditor$view,
													{
														logInfo: author$project$Auth$AuthPlugin$getLogInfo(model.authTool),
														maxHeight: model.winHeight - 35,
														mode: author$project$PageTreeEditor$PageTreeEditor$Full,
														zone: model.zone
													},
													model.pageTreeEditor);
											case 'GeneralDirectoryTool':
												return A2(
													author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$view,
													{
														fileExplorer: model.fileExplorer,
														logInfo: author$project$Auth$AuthPlugin$getLogInfo(model.authTool),
														maxHeight: model.winHeight - 35,
														zone: model.zone
													},
													model.generalDirectory);
											default:
												return A2(
													author$project$NewsEditor$NewsEditor$view,
													{
														fileExplorer: model.fileExplorer,
														logInfo: author$project$Auth$AuthPlugin$getLogInfo(model.authTool),
														maxHeight: model.winHeight - 35,
														pageTreeEditor: model.pageTreeEditor,
														zone: model.zone
													},
													model.newsEditor);
										}
									}()
									]));
					}
				}())
			]),
		title: 'MurolAdmin'
	};
};
var elm$browser$Browser$document = _Browser_document;
var author$project$MurolAdmin$main = elm$browser$Browser$document(
	{init: author$project$MurolAdmin$init, subscriptions: author$project$MurolAdmin$subscriptions, update: author$project$MurolAdmin$update, view: author$project$MurolAdmin$view});
_Platform_export({'MurolAdmin':{'init':author$project$MurolAdmin$main(
	A2(
		elm$json$Json$Decode$andThen,
		function (availableThreads) {
			return elm$json$Json$Decode$succeed(
				{availableThreads: availableThreads});
		},
		A2(elm$json$Json$Decode$field, 'availableThreads', elm$json$Json$Decode$int)))({"versions":{"elm":"0.19.0"},"types":{"message":"MurolAdmin.Msg","aliases":{"GeneralDirectoryEditor.GeneralDirectoryEditor.Msg":{"args":[],"type":"GeneralDirectoryEditor.GeneralDirCommonTypes.Msg"},"Browser.Dom.Viewport":{"args":[],"type":"{ scene : { width : Basics.Float, height : Basics.Float }, viewport : { x : Basics.Float, y : Basics.Float, width : Basics.Float, height : Basics.Float } }"},"Document.Document.News":{"args":[],"type":"{ title : String.String, date : Time.Posix, content : Maybe.Maybe Document.Document.NewsContent, pic : Maybe.Maybe Document.Document.Pic, uuid : UUID.UUID, expiry : Time.Posix }"},"Document.Document.NewsContent":{"args":[],"type":"{ tbElems : List.List Document.Document.TextBlockElement, attrs : List.List Document.Document.DocAttribute }"},"Document.Document.Pic":{"args":[],"type":"{ url : String.String, width : Basics.Int, height : Basics.Int }"},"FileExplorer.FileExplorer.FileToUpload":{"args":[],"type":"{ filename : String.String, loaded : Basics.Float, total : Basics.Float, success : Basics.Bool }"},"FileExplorer.FileExplorer.ImageFromFile":{"args":[],"type":"{ contents : String.String, filename : String.String, width : Basics.Int, height : Basics.Int, filesize : Basics.Int }"},"FileExplorer.FileExplorer.Path":{"args":[],"type":"List.List String.String"},"GeneralDirectoryEditor.GeneralDirCommonTypes.Fiche":{"args":[],"type":"{ uuid : UUID.UUID, categories : List.List String.String, natureActiv : List.List String.String, refOt : Maybe.Maybe ( Basics.Int, String.String ), label : List.List GeneralDirectoryEditor.GeneralDirCommonTypes.Label, rank : GeneralDirectoryEditor.GeneralDirCommonTypes.Rank, nomEntite : String.String, responsables : List.List GeneralDirectoryEditor.GeneralDirCommonTypes.Responsable, adresse : String.String, telNumber : Maybe.Maybe GeneralDirectoryEditor.GeneralDirCommonTypes.TelNumber, fax : Maybe.Maybe String.String, email : List.List String.String, site : Maybe.Maybe ( String.String, String.String ), pjaun : Maybe.Maybe String.String, visuel : String.String, description : List.List String.String, linkedDocs : List.List GeneralDirectoryEditor.GeneralDirCommonTypes.LinkedDoc, ouverture : Maybe.Maybe GeneralDirectoryEditor.GeneralDirCommonTypes.Ouverture, lastEdit : Time.Posix }"},"GeneralDirectoryEditor.GeneralDirCommonTypes.GenDirData":{"args":[],"type":"{ fiches : Dict.Dict String.String GeneralDirectoryEditor.GeneralDirCommonTypes.Fiche }"},"GeneralDirectoryEditor.GeneralDirCommonTypes.Label":{"args":[],"type":"{ nom : String.String, logo : { url : String.String, width : Basics.Int, height : Basics.Int }, lien : String.String }"},"GeneralDirectoryEditor.GeneralDirCommonTypes.LinkedDoc":{"args":[],"type":"{ url : String.String, label : String.String, descr : Maybe.Maybe String.String, expiryDate : Maybe.Maybe Time.Posix }"},"GeneralDirectoryEditor.GeneralDirCommonTypes.Rank":{"args":[],"type":"{ stars : Maybe.Maybe Basics.Int, epis : Maybe.Maybe Basics.Int }"},"GeneralDirectoryEditor.GeneralDirCommonTypes.Responsable":{"args":[],"type":"{ poste : String.String, nom : String.String, tel : GeneralDirectoryEditor.GeneralDirCommonTypes.TelNumber }"},"Internals.CommonHelpers.Log":{"args":[],"type":"{ message : String.String, mbDetails : Maybe.Maybe String.String, isError : Basics.Bool, timeStamp : Time.Posix }"},"PageTreeEditor.PageTreeEditor.Context":{"args":[],"type":"{ parent : PageTreeEditor.PageTreeEditor.PageInfo, left : List.List PageTreeEditor.PageTreeEditor.Page, right : List.List PageTreeEditor.PageTreeEditor.Page }"},"PageTreeEditor.PageTreeEditor.PageInfo":{"args":[],"type":"{ name : String.String, path : PageTreeEditor.PageTreeEditor.Path, mbContentId : Maybe.Maybe UUID.UUID }"},"PageTreeEditor.PageTreeEditor.PageTree":{"args":[],"type":"{ current : PageTreeEditor.PageTreeEditor.Page, contexts : List.List PageTreeEditor.PageTreeEditor.Context }"},"PageTreeEditor.PageTreeEditor.Path":{"args":[],"type":"List.List String.String"},"Json.Decode.Value":{"args":[],"type":"Json.Encode.Value"},"Time.Era":{"args":[],"type":"{ start : Basics.Int, offset : Basics.Int }"},"Document.Document.Li":{"args":[],"type":"List.List Document.Document.TextBlockPrimitive"},"FileExplorer.FileExplorer.Meta":{"args":[],"type":"{ path : FileExplorer.FileExplorer.Path, name : String.String, fileType : FileExplorer.FileExplorer.FileType, fileSize : Maybe.Maybe Basics.Int }"},"PageEditor.EditorPlugins.TextBlockPlugin.Selection":{"args":[],"type":"{ start : Basics.Int, finish : Basics.Int, sel : String.String }"},"Document.Document.LinkMeta":{"args":[],"type":"{ targetBlank : Basics.Bool, url : String.String, label : String.String }"}},"unions":{"MurolAdmin.Msg":{"args":[],"tags":{"AuthMsg":["Auth.AuthPlugin.Msg"],"Launch":[],"FileExplorerMsg":["FileExplorer.FileExplorer.Msg"],"PageEditorMsg":["PageEditor.PageEditor.Msg"],"PageTreeEditorMsg":["PageTreeEditor.PageTreeEditor.Msg"],"GeneralDirectoryMsg":["GeneralDirectoryEditor.GeneralDirectoryEditor.Msg"],"NewsEditorMsg":["NewsEditor.NewsEditor.Msg"],"SetCurrentTool":["MurolAdmin.Tool"],"CurrentViewport":["Browser.Dom.Viewport"],"WinResize":["Basics.Int","Basics.Int"],"SetZone":["Time.Zone"],"NoOp":[]}},"Auth.AuthPlugin.Msg":{"args":[],"tags":{"SetUsername":["String.String"],"SetPassword":["String.String"],"SetConfirmPassword":["String.String"],"Login":[],"ConfirmLogin":["Result.Result Http.Error Auth.AuthPlugin.LogInfo"],"SignUp":[],"ConfirmSignUp":["Result.Result Http.Error Basics.Bool"],"Logout":[],"ConfirmLogout":["Result.Result Http.Error Basics.Bool"],"ChangePluginMode":["Auth.AuthPlugin.PluginMode"],"AddLog":["Internals.CommonHelpers.Log"],"Quit":[],"NoOp":[]}},"FileExplorer.FileExplorer.Msg":{"args":[],"tags":{"GoHome":["FileExplorer.FileExplorer.Mode"],"GoNext":["FileExplorer.FileExplorer.Mode"],"GoPrev":["FileExplorer.FileExplorer.Mode"],"GoTo":["FileExplorer.FileExplorer.Mode","FileExplorer.FileExplorer.Path"],"SelectFsItem":["FileExplorer.FileExplorer.Mode","FileExplorer.FileExplorer.FsItem"],"NewFolderInput":["String.String"],"NewFolder":["FileExplorer.FileExplorer.Mode","FileExplorer.FileExplorer.FsItem"],"Delete":["FileExplorer.FileExplorer.Mode","FileExplorer.FileExplorer.FsItem"],"Cut":["FileExplorer.FileExplorer.FsItem"],"Paste":["FileExplorer.FileExplorer.Mode","FileExplorer.FileExplorer.FsItem"],"RenameInput":["String.String"],"Rename":["FileExplorer.FileExplorer.Mode","FileExplorer.FileExplorer.FsItem"],"RefreshFilesys":["Maybe.Maybe FileExplorer.FileExplorer.FsItem","String.String","FileExplorer.FileExplorer.Root","Result.Result Http.Error (List.List FileExplorer.FileExplorer.FsItem)"],"FilesToUpload":["FileExplorer.FileExplorer.Mode","List.List FileExplorer.FileExplorer.FileToUpload"],"UploadFiles":[],"ToogleUploadView":[],"SetImageUploadType":["FileExplorer.FileExplorer.UploadType"],"UploadImage":["FileExplorer.FileExplorer.FsItem"],"FileRead":["FileExplorer.FileExplorer.ImageFromFile"],"ImageRead":["FileExplorer.FileExplorer.ImageFromFile"],"UploadResult":["Result.Result Http.Error ()"],"RotateRight":[],"RotateLeft":[],"Resize":["Basics.Float"],"SetResize":[],"SetFilename":["String.String"],"ResetImageController":[],"AddLog":["Internals.CommonHelpers.Log"],"ToogleLogsView":[],"SetRoot":["FileExplorer.FileExplorer.Root"],"Debug":["String.String"],"NoOp":[]}},"GeneralDirectoryEditor.GeneralDirCommonTypes.Msg":{"args":[],"tags":{"FilterByName":["String.String"],"FilterByCat":["String.String"],"FilterByActiv":["String.String"],"FilterByLabel":["String.String"],"SelectFiche":["String.String"],"LoadGeneralDirectory":["Result.Result Http.Error GeneralDirectoryEditor.GeneralDirCommonTypes.GenDirData"],"FicheUpdated":["GeneralDirectoryEditor.GeneralDirCommonTypes.Fiche","Result.Result Http.Error Basics.Bool"],"SelectCatInFiche":["String.String"],"SelectAvailableCat":["String.String"],"SetCategorie":["String.String"],"ModifyCat":[],"AddCatToFiche":[],"RemoveCatFromFiche":[],"SelectActivInFiche":["String.String"],"SelectAvailableActiv":["String.String"],"SetActivite":["String.String"],"ModifyActiv":[],"AddActivToFiche":[],"RemoveActivFromFiche":[],"SelectLabelInFiche":["String.String"],"SelectAvailableLabel":["String.String"],"SetLabelName":["String.String"],"SetLabelLink":["String.String"],"SetLabelVisual":["Internals.CommonHelpers.PickerResult"],"AddLabelToFiche":[],"RemoveLabelFromFiche":[],"ModifyLabel":[],"SetRefOtNbr":["String.String"],"SetRefOtLink":["String.String"],"SetStars":["String.String"],"SetEpis":["String.String"],"SetNomEntite":["String.String"],"SelectRespInFiche":["GeneralDirectoryEditor.GeneralDirCommonTypes.Responsable"],"SetRespPoste":["String.String"],"SetRespNom":["String.String"],"SetRespTelFixe":["String.String"],"SetRespTelPortable":["String.String"],"ModifyResp":[],"AddResp":[],"RemoveResp":[],"SetAddress":["String.String"],"SetTelFixe":["String.String"],"SetTelPortable":["String.String"],"SetFax":["String.String"],"SelectEmailInFiche":["String.String"],"SetEmail":["String.String"],"ModifyEmail":[],"AddEmail":[],"RemoveEmail":[],"SetSiteUrl":["String.String"],"SetSiteLabel":["String.String"],"SetPjaun":["String.String"],"OpenVisualPicker":[],"CloseVisualPicker":[],"OpenLabelVisualPicker":[],"CloseLabelVisualPicker":[],"OpenDocPicker":[],"CloseDocPicker":[],"ConfirmVisual":["Internals.CommonHelpers.PickerResult"],"SelectDescrInFiche":["String.String"],"SetDescription":["String.String"],"ModifyDescr":[],"AddDescription":[],"RemoveDescription":[],"MoveDescrUp":[],"MoveDescrDown":[],"SelectLinkedDoc":["GeneralDirectoryEditor.GeneralDirCommonTypes.LinkedDoc"],"ModifyLinkedDoc":[],"AddLinkedDoc":[],"RemoveLinkedDoc":[],"SetLinkedDocUrl":["Internals.CommonHelpers.PickerResult"],"SetLinkedDocLabel":["String.String"],"SetLinkedDocDescr":["String.String"],"SetLinkedDocExpiry":["String.String"],"SetOuverture":["GeneralDirectoryEditor.GeneralDirCommonTypes.Ouverture"],"SaveFiche":[],"RemoveFiche":[],"SetInitialSeed":["Time.Posix"],"SetRightPanelDisplay":["GeneralDirectoryEditor.GeneralDirCommonTypes.RightPanelDisplay"],"NoOp":[]}},"MurolAdmin.Tool":{"args":[],"tags":{"PageEditorTool":[],"FileExplorerTool":[],"AuthTool":[],"PageTreeTool":[],"GeneralDirectoryTool":[],"NewsEditorTool":[]}},"NewsEditor.NewsEditor.Msg":{"args":[],"tags":{"LoadNews":["Result.Result Http.Error (Dict.Dict String.String Document.Document.News)"],"ToogleNews":["String.String"],"SetTitle":["String.String"],"SetExpiry":["String.String"],"EditContent":[],"ToNewsSelector":[],"ToogleContentPreview":[],"RemoveNews":[],"NewsRemoved":["List.List String.String","Result.Result Http.Error Basics.Bool"],"OpenPicPicker":[],"ClosePicPicker":[],"ConfirmPic":["Internals.CommonHelpers.PickerResult"],"SaveNews":[],"NewsSaved":["Result.Result Http.Error Basics.Bool"],"DeleteNews":[],"TextBlockPluginMsg":["PageEditor.EditorPlugins.TextBlockPlugin.Msg"],"SetTimeAndInitSeed":["Time.Posix"],"NoOp":[]}},"PageEditor.PageEditor.Msg":{"args":[],"tags":{"CurrentViewport":["Browser.Dom.Viewport"],"WinResize":["Basics.Int","Basics.Int"],"MainInterfaceViewport":["Result.Result Browser.Dom.Error Browser.Dom.Viewport"],"JumpTo":["Maybe.Maybe String.String"],"KeyDown":["String.String"],"KeyUp":["String.String"],"SelectDoc":["Basics.Int"],"ZipToUid":["Basics.Int"],"Rewind":[],"SwapLeft":[],"SwapRight":[],"EditCell":[],"EditContainer":[],"SwapContainerType":["Document.Document.ContainerLabel"],"UpdateContainerAttr":["( Maybe.Maybe Document.Document.DocAttribute, Maybe.Maybe Document.Document.DocAttribute )"],"AddNewInside":[],"AddNewLeft":[],"AddNewRight":[],"CreateNewContainer":["Document.Document.ContainerLabel"],"CreateNewCell":["PageEditor.Internals.DocumentEditorHelpers.EditorPlugin"],"InsertNewCell":["String.String"],"DeleteSelected":[],"Copy":[],"Cut":[],"Paste":[],"Undo":[],"MenuClick":[],"MenuClickOff":[],"TopEntryFocused":["String.String"],"SetPreviewMode":["Document.DocumentViews.StyleSheets.PreviewMode"],"SetSeason":["Document.DocumentViews.StyleSheets.Season"],"ToogleCountainersColors":[],"SetEditorPlugin":["Maybe.Maybe PageEditor.Internals.DocumentEditorHelpers.EditorPlugin"],"TablePluginMsg":["PageEditor.EditorPlugins.TablePlugin.Msg"],"TextBlockPluginMsg":["PageEditor.EditorPlugins.TextBlockPlugin.Msg"],"ImagePluginMsg":["PageEditor.EditorPlugins.ImagePlugin.Msg"],"VideoPluginMsg":["PageEditor.EditorPlugins.VideoPlugin.Msg"],"BlockLinksPluginMsg":["PageEditor.EditorPlugins.BlockLinksPlugin.Msg"],"FichesPluginMsg":["PageEditor.EditorPlugins.FichesPlugin.Msg"],"PictureLinksPluginMsg":["PageEditor.EditorPlugins.PictureLinksPlugin.Msg"],"GalleryPluginMsg":["PageEditor.EditorPlugins.GalleryPlugin.Msg"],"LoadLocalStorageDocument":[],"SetLocalStorageKey":["String.String"],"SetLocalStorageValue":["Json.Encode.Value"],"SetJsonBuffer":["String.String"],"GetFromLocalStorage":[],"PutInLocalStorage":[],"RemoveFromLocalStorage":[],"ClearLocalStorage":[],"ListKeys":[],"Process":["Json.Encode.Value"],"LoadDocument":[],"NoOp":[]}},"PageTreeEditor.PageTreeEditor.Msg":{"args":[],"tags":{"SelectPage":["PageTreeEditor.PageTreeEditor.Page"],"FileIOSelectPage":["PageTreeEditor.PageTreeEditor.Page"],"SelectInternalPage":["PageTreeEditor.PageTreeEditor.Page"],"SaveAsSelectPage":["PageTreeEditor.PageTreeEditor.Page"],"SetInternalPage":["PageTreeEditor.PageTreeEditor.Path"],"LoadContents":["Result.Result Http.Error Json.Decode.Value"],"LoadPageTree":["Result.Result Http.Error PageTreeEditor.PageTreeEditor.PageTree"],"LoadKeywords":["Result.Result Http.Error (Set.Set ( String.String, String.String ))"],"PageTreeUpdated":["Maybe.Maybe PageTreeEditor.PageTreeEditor.Page","PageTreeEditor.PageTreeEditor.Page","Result.Result Http.Error Basics.Bool"],"SaveContent":["PageTreeEditor.PageTreeEditor.Page"],"ContentUpdated":["UUID.UUID","Result.Result Http.Error Basics.Bool"],"RenamePageInput":["String.String"],"RenamePage":[],"NewPageInput":["String.String"],"NewPage":[],"DeletePage":[],"CutPage":[],"PastePage":[],"Swap":["Basics.Bool"],"SelectKeyword":["String.String"],"SelectPageKeyword":["String.String"],"KeywordInput":["String.String"],"NewKeyword":[],"SetKeyword":[],"UnsetKeyword":[],"KeywordUpdated":["Basics.Bool","( String.String, String.String )","Result.Result Http.Error Basics.Bool"],"SetInitialSeed":["Time.Posix"],"NoOp":[]}},"Basics.Float":{"args":[],"tags":{"Float":[]}},"Basics.Int":{"args":[],"tags":{"Int":[]}},"Time.Zone":{"args":[],"tags":{"Zone":["Basics.Int","List.List Time.Era"]}},"UUID.UUID":{"args":[],"tags":{"UUID":["List.List Basics.Int"]}},"Auth.AuthPlugin.LogInfo":{"args":[],"tags":{"LoggedIn":["{ username : String.String, sessionId : String.String }"],"LoggedOut":[]}},"Auth.AuthPlugin.PluginMode":{"args":[],"tags":{"SignUpMode":["Internals.CommonHelpers.Status"],"LoginMode":["Internals.CommonHelpers.Status"],"LogoutMode":["Internals.CommonHelpers.Status"]}},"Document.Document.ContainerLabel":{"args":[],"tags":{"DocColumn":[],"DocRow":[],"TextColumn":[],"ResponsiveBloc":[]}},"Document.Document.DocAttribute":{"args":[],"tags":{"PaddingEach":["{ bottom : Basics.Int, left : Basics.Int, right : Basics.Int, top : Basics.Int }"],"SpacingXY":["Basics.Int","Basics.Int"],"AlignRight":[],"AlignLeft":[],"Pointer":[],"BackgroundColor":["Document.Document.DocColor"],"WidthFill":[],"WidthShrink":[],"Width":["Basics.Int"],"Height":["Basics.Int"],"FillPortion":["Basics.Int"],"Border":[],"Font":["String.String"],"FontColor":["Document.Document.DocColor"],"FontSize":["Basics.Int"],"FontAlignLeft":[],"FontAlignRight":[],"Center":[],"Justify":[],"Bold":[],"Italic":[],"ZipperAttr":["Basics.Int","Document.Document.ZipperEventHandler"]}},"Document.Document.TextBlockElement":{"args":[],"tags":{"Paragraph":["List.List Document.Document.DocAttribute","List.List Document.Document.TextBlockPrimitive"],"UList":["List.List Document.Document.DocAttribute","List.List Document.Document.Li"],"Heading":["List.List Document.Document.DocAttribute","( Basics.Int, String.String )"],"TBPrimitive":["Document.Document.TextBlockPrimitive"]}},"Document.DocumentViews.StyleSheets.PreviewMode":{"args":[],"tags":{"PreviewBigScreen":[],"PreviewScreen":[],"PreviewTablet":[],"PreviewPhone":[]}},"Document.DocumentViews.StyleSheets.Season":{"args":[],"tags":{"Spring":[],"Summer":[],"Autumn":[],"Winter":[]}},"FileExplorer.FileExplorer.FsItem":{"args":[],"tags":{"Folder":["FileExplorer.FileExplorer.Meta","List.List FileExplorer.FileExplorer.FsItem"],"File":["FileExplorer.FileExplorer.Meta"]}},"FileExplorer.FileExplorer.Mode":{"args":[],"tags":{"ReadOnly":["FileExplorer.FileExplorer.Root"],"ReadWrite":["FileExplorer.FileExplorer.Root"],"Full":[]}},"FileExplorer.FileExplorer.Root":{"args":[],"tags":{"ImagesRoot":[],"DocsRoot":[]}},"FileExplorer.FileExplorer.UploadType":{"args":[],"tags":{"BulkUpload":[],"RegUpload":[]}},"GeneralDirectoryEditor.GeneralDirCommonTypes.Ouverture":{"args":[],"tags":{"Saisonniere":[],"TteAnnee":[]}},"GeneralDirectoryEditor.GeneralDirCommonTypes.RightPanelDisplay":{"args":[],"tags":{"PreviewFiche":[],"EditFiche":[]}},"GeneralDirectoryEditor.GeneralDirCommonTypes.TelNumber":{"args":[],"tags":{"TelFixe":["String.String"],"TelPortable":["String.String"],"TelBoth":["( String.String, String.String )"]}},"Internals.CommonHelpers.PickerResult":{"args":[],"tags":{"PickedImage":["{ url : String.String, width : Basics.Int, height : Basics.Int }"],"PickedDoc":["String.String"]}},"PageEditor.EditorPlugins.BlockLinksPlugin.Msg":{"args":[],"tags":{"SetSelector":["PageEditor.EditorPlugins.BlockLinksPlugin.Selector"],"ConfirmDocUrl":["String.String"],"SelectImage":["String.String"],"ConfirmInternalPageUrl":["String.String"],"LabelPromptInput":["String.String"],"UpdateLabel":[],"ExternalLinkPromptInput":["String.String"],"ConfirmExternalLink":[],"SetLinkType":["PageEditor.EditorPlugins.BlockLinksPlugin.LinkType"],"SelectBlock":["Basics.Int"],"AddBlock":[],"RemoveBlock":[],"Move":["PageEditor.EditorPlugins.BlockLinksPlugin.Direction"],"Quit":[],"SaveAndQuit":[],"NoOp":[]}},"PageEditor.EditorPlugins.FichesPlugin.Msg":{"args":[],"tags":{"FilterByName":["String.String"],"FilterByCat":["String.String"],"FilterByActiv":["String.String"],"FilterByLabel":["String.String"],"GroupSel":["PageEditor.EditorPlugins.FichesPlugin.GroupSelection"],"ToogleFiche":["String.String"],"Quit":[],"SaveAndQuit":[],"NoOp":[]}},"PageEditor.EditorPlugins.GalleryPlugin.Msg":{"args":[],"tags":{"ImagesRequested":[],"ImagesSelected":["File.File","List.List File.File"],"Base64Img":["String.String","String.String"],"ImageProcessed":["Json.Decode.Value"],"NoOp":[]}},"PageEditor.EditorPlugins.ImagePlugin.Msg":{"args":[],"tags":{"SetAlignment":["PageEditor.Internals.DocumentEditorHelpers.Alignment"],"SetCaption":["String.String"],"SelectImage":["{ src : String.String, width : Basics.Int, height : Basics.Int }"],"ChangeMode":["PageEditor.EditorPlugins.ImagePlugin.Mode"],"SaveAndQuit":[],"Quit":[],"NoOp":[]}},"PageEditor.EditorPlugins.PictureLinksPlugin.Msg":{"args":[],"tags":{"NoOp":[],"OpenPicker":[],"ClosePicker":[],"NewPicLink":["{ src : String.String, width : Basics.Int, height : Basics.Int }"],"UrlInput":["String.String"],"SetUrl":[],"MovePicUp":[],"MovePicDown":[],"RemovePic":[],"SelectPic":["String.String"],"Quit":[],"SaveAndQuit":[]}},"PageEditor.EditorPlugins.TablePlugin.Msg":{"args":[],"tags":{"SetNbrRows":["String.String"],"SetNbrCols":["String.String"],"SetStyle":["String.String"],"StyleSelectorClick":[],"StyleSelectorClickOff":[],"InitializeTable":[],"DataInput":["( Basics.Int, Basics.Int )","String.String"],"CellFocused":["Maybe.Maybe ( Basics.Int, Basics.Int )"],"RemoveSelectedRow":[],"RemoveSelectedCol":[],"AddNew":["PageEditor.EditorPlugins.TablePlugin.Direction"],"SwapDisplayMode":[],"SaveAndQuit":[],"Quit":[]}},"PageEditor.EditorPlugins.TextBlockPlugin.Msg":{"args":[],"tags":{"TextInput":["String.String"],"InsertTrackingTag":["PageEditor.EditorPlugins.TextBlockPlugin.TrackedDataKind"],"NewSelection":["PageEditor.EditorPlugins.TextBlockPlugin.Selection"],"SetSelection":[],"SetTextBlocFont":["String.String"],"SetTextBlocFontSize":["String.String"],"SetTextBlocAlignment":[],"SetTextBlocBold":[],"SetTextBlocItalic":[],"SelectHeadingLevel":["String.String"],"ConfirmHeadingLevel":["Basics.Int"],"SetUrl":["Basics.Int","String.String"],"SetInternalLinkKind":["Basics.Int","Basics.Bool"],"InternalUrlSelectorClick":[],"InternalUrlSelectorClickOff":[],"ConfirmInternalPageUrl":["Basics.Int","String.String"],"ConfirmFileUrl":["Basics.Int","String.String"],"SetTextColor":["Basics.Int","String.String"],"SetBackgroundColor":["Basics.Int","String.String"],"SetInlineFont":["Basics.Int","String.String"],"SetInlineFontSize":["Basics.Int","String.String"],"SetInlineBold":["Basics.Int"],"SetInlineItalic":["Basics.Int"],"ColorPickerClick":["String.String"],"ColorPickerClickOff":[],"SaveAndQuit":[],"Quit":[],"NoOp":[]}},"PageEditor.EditorPlugins.VideoPlugin.Msg":{"args":[],"tags":{"SetEmbedString":["String.String"],"ParseHtml":[],"SetAlignment":["PageEditor.Internals.DocumentEditorHelpers.Alignment"],"CheckFrameBorder":["Basics.Bool"],"CheckControls":["Basics.Bool"],"CheckPrivacy":["Basics.Bool"],"CheckTitle":["Basics.Bool"],"CheckSuggestions":["Basics.Bool"],"SetStartAt":["String.String"],"SetWidth":["String.String"],"SetHeight":["String.String"],"Quit":[],"SaveAndQuit":[],"NoOp":[]}},"PageEditor.Internals.DocumentEditorHelpers.EditorPlugin":{"args":[],"tags":{"ImagePlugin":[],"VideoPlugin":[],"TablePlugin":[],"CustomElementPlugin":[],"TextBlockPlugin":[],"NewDocPlugin":[],"ContainerEditPlugin":[],"BlockLinksPlugin":[],"PersistencePlugin":[],"PageTreeEditorPlugin":["PageTreeEditor.PageTreeEditor.Mode"],"FichesPlugin":[],"PictureLinksPlugin":[],"GalleryPlugin":[]}},"PageTreeEditor.PageTreeEditor.Page":{"args":[],"tags":{"Page":["PageTreeEditor.PageTreeEditor.PageInfo","List.List PageTreeEditor.PageTreeEditor.Page"]}},"Browser.Dom.Error":{"args":[],"tags":{"NotFound":["String.String"]}},"Basics.Bool":{"args":[],"tags":{"True":[],"False":[]}},"Dict.Dict":{"args":["k","v"],"tags":{"RBNode_elm_builtin":["Dict.NColor","k","v","Dict.Dict k v","Dict.Dict k v"],"RBEmpty_elm_builtin":[]}},"List.List":{"args":["a"],"tags":{}},"Maybe.Maybe":{"args":["a"],"tags":{"Just":["a"],"Nothing":[]}},"Result.Result":{"args":["error","value"],"tags":{"Ok":["value"],"Err":["error"]}},"Set.Set":{"args":["t"],"tags":{"Set_elm_builtin":["Dict.Dict t ()"]}},"String.String":{"args":[],"tags":{"String":[]}},"Http.Error":{"args":[],"tags":{"BadUrl":["String.String"],"Timeout":[],"NetworkError":[],"BadStatus":["Basics.Int"],"BadBody":["String.String"]}},"Json.Encode.Value":{"args":[],"tags":{"Value":[]}},"Time.Posix":{"args":[],"tags":{"Posix":["Basics.Int"]}},"Document.Document.DocColor":{"args":[],"tags":{"DocColor":["Basics.Float","Basics.Float","Basics.Float"]}},"Document.Document.TextBlockPrimitive":{"args":[],"tags":{"Text":["List.List Document.Document.DocAttribute","String.String"],"Link":["List.List Document.Document.DocAttribute","Document.Document.LinkMeta"]}},"Document.Document.ZipperEventHandler":{"args":[],"tags":{"OnContainerClick":[],"OnContainerDblClick":[],"OnContainerMouseOver":[],"OnNeighbourClick":[],"OnCellClick":[]}},"FileExplorer.FileExplorer.FileType":{"args":[],"tags":{"ImageFile":["{ width : Basics.Int, height : Basics.Int }"],"RegFile":[]}},"Internals.CommonHelpers.Status":{"args":[],"tags":{"Initial":[],"Waiting":[],"Success":[],"Failure":[]}},"PageEditor.EditorPlugins.BlockLinksPlugin.Direction":{"args":[],"tags":{"Left":[],"Right":[]}},"PageEditor.EditorPlugins.BlockLinksPlugin.LinkType":{"args":[],"tags":{"InternalLink":[],"DocLink":[],"ExternalLink":[]}},"PageEditor.EditorPlugins.BlockLinksPlugin.Selector":{"args":[],"tags":{"Closed":[],"SelectingImages":[],"SelectingLink":[]}},"PageEditor.EditorPlugins.FichesPlugin.GroupSelection":{"args":[],"tags":{"All":[],"None":[]}},"PageEditor.EditorPlugins.ImagePlugin.Mode":{"args":[],"tags":{"ImageAttributeEditor":[],"ImagePicker":[]}},"PageEditor.EditorPlugins.TablePlugin.Direction":{"args":[],"tags":{"Up":[],"Down":[],"Left":[],"Right":[]}},"PageEditor.EditorPlugins.TextBlockPlugin.TrackedDataKind":{"args":[],"tags":{"InternalLink":["Basics.Bool","String.String"],"ExternalLink":["String.String"],"Heading":["Basics.Int"],"InlineStyled":[]}},"PageEditor.Internals.DocumentEditorHelpers.Alignment":{"args":[],"tags":{"ARight":[],"ACenter":[],"ALeft":[]}},"PageTreeEditor.PageTreeEditor.Mode":{"args":[],"tags":{"Full":[],"Save":[],"SaveAs":[],"Open":[],"Select":[]}},"Dict.NColor":{"args":[],"tags":{"Red":[],"Black":[]}},"File.File":{"args":[],"tags":{"File":[]}}}}})}});}(this));