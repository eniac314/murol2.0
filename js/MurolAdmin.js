(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}




var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log = F2(function(tag, value)
{
	return value;
});

var _Debug_log_UNUSED = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString(value)
{
	return '<internals>';
}

function _Debug_toString_UNUSED(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash_UNUSED(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.bo.dA === region.a4.dA)
	{
		return 'on line ' + region.bo.dA;
	}
	return 'on lines ' + region.bo.dA + ' through ' + region.a4.dA;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**_UNUSED/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**_UNUSED/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**/
	if (typeof x.$ === 'undefined')
	//*/
	/**_UNUSED/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0 = 0;
var _Utils_Tuple0_UNUSED = { $: '#0' };

function _Utils_Tuple2(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2_UNUSED(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3_UNUSED(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr(c) { return c; }
function _Utils_chr_UNUSED(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil = { $: 0 };
var _List_Nil_UNUSED = { $: '[]' };

function _List_Cons(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons_UNUSED(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**_UNUSED/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap_UNUSED(value) { return { $: 0, a: value }; }
function _Json_unwrap_UNUSED(value) { return value.a; }

function _Json_wrap(value) { return value; }
function _Json_unwrap(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.jO,
		impl.mk,
		impl.lT,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**_UNUSED/, _Json_errorToString(result.a) /**/);
	var managers = {};
	result = init(result.a);
	var model = result.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		result = A2(update, msg, model);
		stepper(model = result.a, viewMetadata);
		_Platform_enqueueEffects(managers, result.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, result.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**/
	var node = args['node'];
	//*/
	/**_UNUSED/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^(on|formAction$)/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		dG: func(record.dG),
		fM: record.fM,
		fz: record.fz
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.dG;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.fM;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.fz) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.jO,
		impl.mk,
		impl.lT,
		function(sendToApp, initialModel) {
			var view = impl.mp;
			/**/
			var domNode = args['node'];
			//*/
			/**_UNUSED/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.jO,
		impl.mk,
		impl.lT,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.fH && impl.fH(sendToApp)
			var view = impl.mp;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.eY);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.fP) && (_VirtualDom_doc.title = title = doc.fP);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.kH;
	var onUrlRequest = impl.kI;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		fH: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.hb === next.hb
							&& curr.gy === next.gy
							&& curr.g7.a === next.g7.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		jO: function(flags)
		{
			return A3(impl.jO, flags, _Browser_getUrl(), key);
		},
		mp: impl.mp,
		mk: impl.mk,
		lT: impl.lT
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { jy: 'hidden', ir: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { jy: 'mozHidden', ir: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { jy: 'msHidden', ir: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { jy: 'webkitHidden', ir: 'webkitvisibilitychange' }
		: { jy: 'hidden', ir: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		hl: _Browser_getScene(),
		hJ: {
			ak: _Browser_window.pageXOffset,
			mv: _Browser_window.pageYOffset,
			mt: _Browser_doc.documentElement.clientWidth,
			jx: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		mt: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		jx: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			hl: {
				mt: node.scrollWidth,
				jx: node.scrollHeight
			},
			hJ: {
				ak: node.scrollLeft,
				mv: node.scrollTop,
				mt: node.clientWidth,
				jx: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			hl: _Browser_getScene(),
			hJ: {
				ak: x,
				mv: y,
				mt: _Browser_doc.documentElement.clientWidth,
				jx: _Browser_doc.documentElement.clientHeight
			},
			gg: {
				ak: x + rect.left,
				mv: y + rect.top,
				mt: rect.width,
				jx: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}



function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2($elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.du.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.du.b, xhr)); });
		$elm$core$Maybe$isJust(request.hC) && _Http_track(router, xhr, request.hC.a);

		try {
			xhr.open(request.gO, request.d$, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.d$));
		}

		_Http_configureRequest(xhr, request);

		request.eY.a && xhr.setRequestHeader('Content-Type', request.eY.a);
		xhr.send(request.eY.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.gu; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.hz.a || 0;
	xhr.responseType = request.du.d;
	xhr.withCredentials = request.h0;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		d$: xhr.responseURL,
		lM: xhr.status,
		lN: xhr.statusText,
		gu: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			lx: event.loaded,
			fJ: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			k1: event.loaded,
			fJ: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}


var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});


// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.kk) { flags += 'm'; }
	if (options.im) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;



// DECODER

var _File_decoder = _Json_decodePrim(function(value) {
	// NOTE: checks if `File` exists in case this is run on node
	return (typeof File !== 'undefined' && value instanceof File)
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FILE', value);
});


// METADATA

function _File_name(file) { return file.name; }
function _File_mime(file) { return file.type; }
function _File_size(file) { return file.size; }

function _File_lastModified(file)
{
	return $elm$time$Time$millisToPosix(file.lastModified);
}


// DOWNLOAD

var _File_downloadNode;

function _File_getDownloadNode()
{
	return _File_downloadNode || (_File_downloadNode = document.createElement('a'));
}

var _File_download = F3(function(name, mime, content)
{
	return _Scheduler_binding(function(callback)
	{
		var blob = new Blob([content], {type: mime});

		// for IE10+
		if (navigator.msSaveOrOpenBlob)
		{
			navigator.msSaveOrOpenBlob(blob, name);
			return;
		}

		// for HTML5
		var node = _File_getDownloadNode();
		var objectUrl = URL.createObjectURL(blob);
		node.href = objectUrl;
		node.download = name;
		_File_click(node);
		URL.revokeObjectURL(objectUrl);
	});
});

function _File_downloadUrl(href)
{
	return _Scheduler_binding(function(callback)
	{
		var node = _File_getDownloadNode();
		node.href = href;
		node.download = '';
		node.origin === location.origin || (node.target = '_blank');
		_File_click(node);
	});
}


// IE COMPATIBILITY

function _File_makeBytesSafeForInternetExplorer(bytes)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/10
	// all other browsers can just run `new Blob([bytes])` directly with no problem
	//
	return new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
}

function _File_click(node)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/11
	// all other browsers have MouseEvent and do not need this conditional stuff
	//
	if (typeof MouseEvent === 'function')
	{
		node.dispatchEvent(new MouseEvent('click'));
	}
	else
	{
		var event = document.createEvent('MouseEvents');
		event.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		document.body.appendChild(node);
		node.dispatchEvent(event);
		document.body.removeChild(node);
	}
}


// UPLOAD

var _File_node;

function _File_uploadOne(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			callback(_Scheduler_succeed(event.target.files[0]));
		});
		_File_click(_File_node);
	});
}

function _File_uploadOneOrMore(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.multiple = true;
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			var elmFiles = _List_fromArray(event.target.files);
			callback(_Scheduler_succeed(_Utils_Tuple2(elmFiles.a, elmFiles.b)));
		});
		_File_click(_File_node);
	});
}


// CONTENT

function _File_toString(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsText(blob);
		return function() { reader.abort(); };
	});
}

function _File_toBytes(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(new DataView(reader.result)));
		});
		reader.readAsArrayBuffer(blob);
		return function() { reader.abort(); };
	});
}

function _File_toUrl(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsDataURL(blob);
		return function() { reader.abort(); };
	});
}



function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}



// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});
var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (!node.$) {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === -2) {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = 1;
var $elm$core$Basics$GT = 2;
var $elm$core$Basics$LT = 0;
var $elm$core$Result$Err = function (a) {
	return {$: 1, a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 0, a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 2, a: a};
};
var $elm$core$Basics$False = 1;
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Maybe$Nothing = {$: 1};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 0:
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 1) {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 1:
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 2:
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 1, a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.C) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.M),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.M);
		} else {
			var treeLen = builder.C * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.R) : builder.R;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.C);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.M) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.M);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{R: nodeList, C: (len / $elm$core$Array$branchFactor) | 0, M: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = 0;
var $elm$core$Result$isOk = function (result) {
	if (!result.$) {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 1, a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$browser$Browser$Dom$NotFound = $elm$core$Basics$identity;
var $elm$url$Url$Http = 0;
var $elm$url$Url$Https = 1;
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {gn: fragment, gy: host, K: path, g7: port_, hb: protocol, hc: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 1) {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		0,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		1,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = $elm$core$Basics$identity;
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return 0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0;
		return A2($elm$core$Task$map, tagger, task);
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			A2($elm$core$Task$map, toMessage, task));
	});
var $elm$browser$Browser$document = _Browser_document;
var $elm$json$Json$Decode$field = _Json_decodeField;
var $author$project$MurolAdmin$AuthMsg = function (a) {
	return {$: 0, a: a};
};
var $author$project$MurolAdmin$AuthTool = 2;
var $author$project$MurolAdmin$CurrentViewport = function (a) {
	return {$: 13, a: a};
};
var $author$project$MurolAdmin$FileExplorerMsg = function (a) {
	return {$: 2, a: a};
};
var $author$project$MurolAdmin$GeneralDirectoryMsg = function (a) {
	return {$: 6, a: a};
};
var $author$project$MurolAdmin$HelpMsg = function (a) {
	return {$: 9, a: a};
};
var $author$project$FileExplorer$FileExplorer$ImagesRoot = 0;
var $author$project$MurolAdmin$NewsEditorMsg = function (a) {
	return {$: 7, a: a};
};
var $author$project$MurolAdmin$PageEditorMsg = function (a) {
	return {$: 4, a: a};
};
var $author$project$MurolAdmin$PageTreeEditorMsg = function (a) {
	return {$: 5, a: a};
};
var $author$project$MurolAdmin$PublicationsMsg = function (a) {
	return {$: 8, a: a};
};
var $author$project$MurolAdmin$SetZone = function (a) {
	return {$: 15, a: a};
};
var $author$project$MurolAdmin$WaitingForLogin = 0;
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$core$Dict$RBEmpty_elm_builtin = {$: -2};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$browser$Browser$Dom$getViewport = _Browser_withWindow(_Browser_getViewport);
var $elm$time$Time$Name = function (a) {
	return {$: 0, a: a};
};
var $elm$time$Time$Offset = function (a) {
	return {$: 1, a: a};
};
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$time$Time$customZone = $elm$time$Time$Zone;
var $elm$time$Time$here = _Time_here(0);
var $author$project$Auth$AuthPlugin$LoggedOut = {$: 1};
var $author$project$Auth$AuthPlugin$LoginMode = function (a) {
	return {$: 1, a: a};
};
var $author$project$Internals$CommonHelpers$Waiting = 1;
var $author$project$Auth$AuthPlugin$LoginChecked = function (a) {
	return {$: 4, a: a};
};
var $author$project$Auth$AuthPlugin$LoggedIn = function (a) {
	return {$: 0, a: a};
};
var $elm$json$Json$Decode$string = _Json_decodeString;
var $author$project$Auth$AuthPlugin$decodeLoginResult = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return $author$project$Auth$AuthPlugin$LoggedIn(
				{fF: b, bP: a});
		}),
	A2($elm$json$Json$Decode$field, 'username', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'sessionId', $elm$json$Json$Decode$string));
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 2};
var $elm$http$Http$Receiving = function (a) {
	return {$: 1, a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$Timeout_ = {$: 1};
var $elm$core$Maybe$isJust = function (maybe) {
	if (!maybe.$) {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === -2) {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1) {
					case 0:
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 1:
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$core$Dict$Black = 1;
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: -1, a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = 0;
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === -1) && (!right.a)) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === -1) && (!left.a)) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					0,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, 1, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === -1) && (!left.a)) && (left.d.$ === -1)) && (!left.d.a)) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					0,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 1, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === -2) {
			return A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1) {
				case 0:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 1:
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === -1) && (!_v0.a)) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === -1) && (dict.d.$ === -1)) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.e.d.$ === -1) && (!dict.e.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				0,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr === 1) {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.d.d.$ === -1) && (!dict.d.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				0,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr === 1) {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === -1) && (!left.a)) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === -1) && (right.a === 1)) {
					if (right.d.$ === -1) {
						if (right.d.a === 1) {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === -1) && (dict.d.$ === -1)) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor === 1) {
			if ((lLeft.$ === -1) && (!lLeft.a)) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === -1) {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === -2) {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === -1) && (left.a === 1)) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === -1) && (!lLeft.a)) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === -1) {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === -1) {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === -1) {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === -1) && (!_v0.a)) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (!_v0.$) {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			$elm$core$Basics$identity,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (!result.$) {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$http$Http$BadBody = function (a) {
	return {$: 4, a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 3, a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$NetworkError = {$: 2};
var $elm$http$Http$Timeout = {$: 1};
var $elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 0:
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 1:
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 2:
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			case 3:
				var metadata = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(metadata.lM));
			default:
				var body = response.b;
				return A2(
					$elm$core$Result$mapError,
					$elm$http$Http$BadBody,
					toResult(body));
		}
	});
var $elm$http$Http$expectJson = F2(
	function (toMsg, decoder) {
		return A2(
			$elm$http$Http$expectStringResponse,
			toMsg,
			$elm$http$Http$resolve(
				function (string) {
					return A2(
						$elm$core$Result$mapError,
						$elm$json$Json$Decode$errorToString,
						A2($elm$json$Json$Decode$decodeString, decoder, string));
				}));
	});
var $elm$http$Http$emptyBody = _Http_emptyBody;
var $elm$http$Http$Request = function (a) {
	return {$: 1, a: a};
};
var $elm$http$Http$State = F2(
	function (reqs, subs) {
		return {hf: reqs, hv: subs};
	});
var $elm$http$Http$init = $elm$core$Task$succeed(
	A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return $elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (!cmd.$) {
					var tracker = cmd.a;
					var _v2 = A2($elm$core$Dict$get, tracker, reqs);
					if (_v2.$ === 1) {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _v2.a;
						return A2(
							$elm$core$Task$andThen,
							function (_v3) {
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2($elm$core$Dict$remove, tracker, reqs));
							},
							$elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						$elm$core$Task$andThen,
						function (pid) {
							var _v4 = req.hC;
							if (_v4.$ === 1) {
								return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _v4.a;
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3($elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						$elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								$elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var $elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			$elm$core$Task$andThen,
			function (reqs) {
				return $elm$core$Task$succeed(
					A2($elm$http$Http$State, reqs, subs));
			},
			A3($elm$http$Http$updateReqs, router, cmds, state.hf));
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (!_v0.$) {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _v0) {
		var actualTracker = _v0.a;
		var toMsg = _v0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : $elm$core$Maybe$Nothing;
	});
var $elm$http$Http$onSelfMsg = F3(
	function (router, _v0, state) {
		var tracker = _v0.a;
		var progress = _v0.b;
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$filterMap,
					A3($elm$http$Http$maybeSend, router, tracker, progress),
					state.hv)));
	});
var $elm$http$Http$Cancel = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (!cmd.$) {
			var tracker = cmd.a;
			return $elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return $elm$http$Http$Request(
				{
					h0: r.h0,
					eY: r.eY,
					du: A2(_Http_mapExpect, func, r.du),
					gu: r.gu,
					gO: r.gO,
					hz: r.hz,
					hC: r.hC,
					d$: r.d$
				});
		}
	});
var $elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$http$Http$subMap = F2(
	function (func, _v0) {
		var tracker = _v0.a;
		var toMsg = _v0.b;
		return A2(
			$elm$http$Http$MySub,
			tracker,
			A2($elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
var $elm$http$Http$command = _Platform_leaf('Http');
var $elm$http$Http$subscription = _Platform_leaf('Http');
var $elm$http$Http$request = function (r) {
	return $elm$http$Http$command(
		$elm$http$Http$Request(
			{h0: false, eY: r.eY, du: r.du, gu: r.gu, gO: r.gO, hz: r.hz, hC: r.hC, d$: r.d$}));
};
var $elm$http$Http$get = function (r) {
	return $elm$http$Http$request(
		{eY: $elm$http$Http$emptyBody, du: r.du, gu: _List_Nil, gO: 'GET', hz: $elm$core$Maybe$Nothing, hC: $elm$core$Maybe$Nothing, d$: r.d$});
};
var $author$project$Auth$AuthPlugin$checkLogin = $elm$http$Http$get(
	{
		du: A2($elm$http$Http$expectJson, $author$project$Auth$AuthPlugin$LoginChecked, $author$project$Auth$AuthPlugin$decodeLoginResult),
		d$: 'login.php'
	});
var $elm$core$Platform$Cmd$map = _Platform_map;
var $author$project$Auth$AuthPlugin$init = function (externalMsg) {
	return _Utils_Tuple2(
		{
			ds: '',
			bY: externalMsg,
			be: $author$project$Auth$AuthPlugin$LoggedOut,
			cd: '',
			A: $author$project$Auth$AuthPlugin$LoginMode(1),
			bP: ''
		},
		A2($elm$core$Platform$Cmd$map, externalMsg, $author$project$Auth$AuthPlugin$checkLogin));
};
var $author$project$FileExplorer$FileExplorer$BUHome = 0;
var $author$project$FileExplorer$FileExplorer$FileReader = 0;
var $author$project$FileExplorer$FileExplorer$FilesysDisplay = 0;
var $author$project$FileExplorer$FileExplorer$Home = 0;
var $author$project$FileExplorer$FileExplorer$RegUpload = 1;
var $author$project$FileExplorer$FileExplorer$Regular = 3;
var $author$project$Internals$ToolHelpers$ToolLoadingWaiting = {$: 0};
var $author$project$FileExplorer$FileExplorer$init = F2(
	function (root, externalMsg) {
		return {dq: 3, ct: 0, dr: 0, bT: false, eZ: false, bv: $elm$core$Maybe$Nothing, e6: '', c1: $elm$core$Maybe$Nothing, aN: $elm$core$Maybe$Nothing, aO: 0, aP: $elm$core$Maybe$Nothing, ej: $elm$core$Maybe$Nothing, bY: externalMsg, b0: $elm$core$Dict$empty, em: $elm$core$Dict$empty, cE: 0, eo: $elm$core$Maybe$Nothing, dv: 1, bF: $elm$core$Maybe$Nothing, b4: $author$project$Internals$ToolHelpers$ToolLoadingWaiting, G: _List_Nil, b5: 0, aV: $elm$core$Maybe$Nothing, aW: $elm$core$Maybe$Nothing, bG: $elm$core$Maybe$Nothing, da: $elm$core$Maybe$Nothing, aX: $elm$core$Maybe$Nothing, aY: $elm$core$Maybe$Nothing, b8: false, b9: false, fv: false, bf: '', a_: $elm$core$Dict$empty, de: _List_Nil, bJ: '', Z: root, o: $elm$core$Maybe$Nothing, di: 100, j: $elm$core$Dict$empty};
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$PreviewFiche = 0;
var $elm$core$Set$Set_elm_builtin = $elm$core$Basics$identity;
var $elm$core$Set$empty = $elm$core$Dict$empty;
var $elm$time$Time$Posix = $elm$core$Basics$identity;
var $elm$time$Time$millisToPosix = $elm$core$Basics$identity;
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyFiche = {
	hT: '',
	cZ: _List_Nil,
	ei: _List_Nil,
	i4: _List_Nil,
	je: $elm$core$Maybe$Nothing,
	O: _List_Nil,
	dy: $elm$time$Time$millisToPosix(0),
	j4: _List_Nil,
	ko: _List_Nil,
	kB: '',
	kN: $elm$core$Maybe$Nothing,
	dN: $elm$core$Maybe$Nothing,
	k0: {gh: $elm$core$Maybe$Nothing, lK: $elm$core$Maybe$Nothing},
	k3: $elm$core$Maybe$Nothing,
	k9: _List_Nil,
	lE: $elm$core$Maybe$Nothing,
	l$: $elm$core$Maybe$Nothing,
	fS: $elm$core$Maybe$Nothing,
	mr: ''
};
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$init = function (externalMsg) {
	return _Utils_Tuple2(
		{
			hO: $elm$core$Maybe$Nothing,
			hP: $elm$core$Maybe$Nothing,
			hQ: $elm$core$Set$empty,
			$9: $elm$core$Maybe$Nothing,
			io: $elm$core$Maybe$Nothing,
			cZ: $elm$core$Set$empty,
			iP: $elm$time$Time$millisToPosix(0),
			e6: _List_Nil,
			i$: $elm$core$Maybe$Nothing,
			i1: false,
			i5: $elm$core$Maybe$Nothing,
			ja: $elm$core$Maybe$Nothing,
			bY: externalMsg,
			jf: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyFiche,
			jg: $elm$core$Dict$empty,
			jZ: $elm$core$Maybe$Nothing,
			j_: $elm$core$Maybe$Nothing,
			j$: false,
			j0: false,
			j1: _List_Nil,
			j3: $elm$core$Maybe$Nothing,
			b4: $author$project$Internals$ToolHelpers$ToolLoadingWaiting,
			j8: _List_Nil,
			km: $elm$core$Maybe$Nothing,
			k8: $elm$core$Maybe$Nothing,
			lb: 0,
			ll: $elm$core$Maybe$Nothing,
			lm: $elm$core$Maybe$Nothing,
			ln: $elm$core$Maybe$Nothing,
			lo: $elm$core$Maybe$Nothing,
			lp: $elm$core$Maybe$Nothing,
			lq: $elm$core$Maybe$Nothing,
			lr: $elm$core$Maybe$Nothing,
			ls: $elm$core$Maybe$Nothing,
			lt: $elm$core$Maybe$Nothing,
			lu: $elm$core$Maybe$Nothing,
			lv: $elm$core$Maybe$Nothing,
			lw: $elm$core$Maybe$Nothing,
			mq: false
		},
		$elm$core$Platform$Cmd$none);
};
var $author$project$Help$Help$GotPages = function (a) {
	return {$: 3, a: a};
};
var $author$project$Help$Help$helpPagesData = _List_fromArray(
	[
		{
		iI: _List_fromArray(
			[
				_Utils_Tuple2(0, 'images/notice/Diapositive1.JPG')
			]),
		a: 'root',
		fP: 'Notice éditeur murol.fr'
	},
		{
		iI: _List_fromArray(
			[
				_Utils_Tuple2(1, 'images/notice/Diapositive2.JPG'),
				_Utils_Tuple2(2, 'images/notice/Diapositive3.JPG'),
				_Utils_Tuple2(3, 'images/notice/Diapositive4.JPG'),
				_Utils_Tuple2(4, 'images/notice/Diapositive5.JPG')
			]),
		a: 'ae7aa3c8-b706-4cb7-948b-7038313b2f0c',
		fP: 'Introduction'
	},
		{
		iI: _List_fromArray(
			[
				_Utils_Tuple2(1, 'images/notice/Diapositive6.JPG'),
				_Utils_Tuple2(2, 'images/notice/Diapositive7.JPG')
			]),
		a: '7f766d94-79ec-4856-8e2e-19216dbe0c91',
		fP: 'Actualités'
	},
		{
		iI: _List_fromArray(
			[
				_Utils_Tuple2(1, 'images/notice/Diapositive8.JPG'),
				_Utils_Tuple2(2, 'images/notice/Diapositive9.JPG'),
				_Utils_Tuple2(3, 'images/notice/Diapositive10.JPG')
			]),
		a: '51edfc29-3bfa-4205-ae65-f1ac667fedc8',
		fP: 'Blocs de texte'
	},
		{
		iI: _List_fromArray(
			[
				_Utils_Tuple2(1, 'images/notice/Diapositive11.JPG'),
				_Utils_Tuple2(2, 'images/notice/Diapositive12.JPG'),
				_Utils_Tuple2(3, 'images/notice/Diapositive13.JPG')
			]),
		a: 'a4393746-a12b-467c-b6a5-2e66a6bfdbf7',
		fP: 'Liens'
	},
		{
		iI: _List_fromArray(
			[
				_Utils_Tuple2(1, 'images/notice/Diapositive14.JPG'),
				_Utils_Tuple2(2, 'images/notice/Diapositive15.JPG')
			]),
		a: 'c75dccc8-43bc-44df-afd7-13fd68f23e23',
		fP: 'Explorateur de fichiers'
	},
		{
		iI: _List_fromArray(
			[
				_Utils_Tuple2(1, 'images/notice/Diapositive16.JPG'),
				_Utils_Tuple2(2, 'images/notice/Diapositive17.JPG'),
				_Utils_Tuple2(3, 'images/notice/Diapositive18.JPG'),
				_Utils_Tuple2(4, 'images/notice/Diapositive18.JPG'),
				_Utils_Tuple2(5, 'images/notice/Diapositive18.JPG'),
				_Utils_Tuple2(6, 'images/notice/Diapositive18.JPG')
			]),
		a: 'e8b32207-6cc8-4ec4-860c-adf9a078eb9c',
		fP: 'Editeur de page'
	},
		{
		iI: _List_fromArray(
			[
				_Utils_Tuple2(1, 'images/notice/Diapositive18.JPG'),
				_Utils_Tuple2(2, 'images/notice/Diapositive18.JPG'),
				_Utils_Tuple2(3, 'images/notice/Diapositive18.JPG'),
				_Utils_Tuple2(4, 'images/notice/Diapositive18.JPG'),
				_Utils_Tuple2(5, 'images/notice/Diapositive18.JPG'),
				_Utils_Tuple2(6, 'images/notice/Diapositive18.JPG'),
				_Utils_Tuple2(7, 'images/notice/Diapositive18.JPG'),
				_Utils_Tuple2(8, 'images/notice/Diapositive18.JPG')
			]),
		a: '1a1737c1-0f5b-4b5c-9e7a-cba30cfcb2d9',
		fP: 'Nouvelle cellule'
	},
		{
		iI: _List_fromArray(
			[
				_Utils_Tuple2(1, 'images/notice/Diapositive18.JPG'),
				_Utils_Tuple2(2, 'images/notice/Diapositive18.JPG'),
				_Utils_Tuple2(3, 'images/notice/Diapositive18.JPG')
			]),
		a: 'b75e18b9-b962-4c18-91c3-c5134aae0bbd',
		fP: 'Repertoire géneral'
	}
	]);
var $author$project$Help$Help$indexEntriesData = _List_fromArray(
	[
		{
		a: _Utils_Tuple2(0, 'root'),
		eF: $elm$core$Maybe$Nothing,
		fP: 'Notice éditeur murol.fr'
	},
		{
		a: _Utils_Tuple2(0, 'ae7aa3c8-b706-4cb7-948b-7038313b2f0c'),
		eF: $elm$core$Maybe$Nothing,
		fP: 'Introduction'
	},
		{
		a: _Utils_Tuple2(1, 'ae7aa3c8-b706-4cb7-948b-7038313b2f0c'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, 'ae7aa3c8-b706-4cb7-948b-7038313b2f0c')),
		fP: 'Adresse d\'accès à l\'éditeur'
	},
		{
		a: _Utils_Tuple2(2, 'ae7aa3c8-b706-4cb7-948b-7038313b2f0c'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, 'ae7aa3c8-b706-4cb7-948b-7038313b2f0c')),
		fP: 'Identification'
	},
		{
		a: _Utils_Tuple2(3, 'ae7aa3c8-b706-4cb7-948b-7038313b2f0c'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, 'ae7aa3c8-b706-4cb7-948b-7038313b2f0c')),
		fP: 'Chargement'
	},
		{
		a: _Utils_Tuple2(4, 'ae7aa3c8-b706-4cb7-948b-7038313b2f0c'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, 'ae7aa3c8-b706-4cb7-948b-7038313b2f0c')),
		fP: 'Les differents onglets'
	},
		{
		a: _Utils_Tuple2(0, '7f766d94-79ec-4856-8e2e-19216dbe0c91'),
		eF: $elm$core$Maybe$Nothing,
		fP: 'Actualités'
	},
		{
		a: _Utils_Tuple2(1, '7f766d94-79ec-4856-8e2e-19216dbe0c91'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, '7f766d94-79ec-4856-8e2e-19216dbe0c91')),
		fP: 'Editeur d’actualités - écran d’accueil'
	},
		{
		a: _Utils_Tuple2(2, '7f766d94-79ec-4856-8e2e-19216dbe0c91'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, '7f766d94-79ec-4856-8e2e-19216dbe0c91')),
		fP: 'Créer une actualité'
	},
		{
		a: _Utils_Tuple2(0, '51edfc29-3bfa-4205-ae65-f1ac667fedc8'),
		eF: $elm$core$Maybe$Nothing,
		fP: 'Blocs de texte'
	},
		{
		a: _Utils_Tuple2(1, '51edfc29-3bfa-4205-ae65-f1ac667fedc8'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, '51edfc29-3bfa-4205-ae65-f1ac667fedc8')),
		fP: 'Ecrire un texte pour une actualité ou une page'
	},
		{
		a: _Utils_Tuple2(2, '51edfc29-3bfa-4205-ae65-f1ac667fedc8'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, '51edfc29-3bfa-4205-ae65-f1ac667fedc8')),
		fP: 'Changer le style du texte couleur du texte, du fond…'
	},
		{
		a: _Utils_Tuple2(3, '51edfc29-3bfa-4205-ae65-f1ac667fedc8'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, '51edfc29-3bfa-4205-ae65-f1ac667fedc8')),
		fP: 'Créer ou modifier un titre'
	},
		{
		a: _Utils_Tuple2(0, 'a4393746-a12b-467c-b6a5-2e66a6bfdbf7'),
		eF: $elm$core$Maybe$Nothing,
		fP: 'Liens'
	},
		{
		a: _Utils_Tuple2(1, 'a4393746-a12b-467c-b6a5-2e66a6bfdbf7'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, 'a4393746-a12b-467c-b6a5-2e66a6bfdbf7')),
		fP: 'Inserer un lien vers une page du site'
	},
		{
		a: _Utils_Tuple2(2, 'a4393746-a12b-467c-b6a5-2e66a6bfdbf7'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, 'a4393746-a12b-467c-b6a5-2e66a6bfdbf7')),
		fP: 'Inserer un lien vers une page externe'
	},
		{
		a: _Utils_Tuple2(3, 'a4393746-a12b-467c-b6a5-2e66a6bfdbf7'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, 'a4393746-a12b-467c-b6a5-2e66a6bfdbf7')),
		fP: 'Inserer un lien vers un document'
	},
		{
		a: _Utils_Tuple2(0, 'c75dccc8-43bc-44df-afd7-13fd68f23e23'),
		eF: $elm$core$Maybe$Nothing,
		fP: 'Explorateur de fichiers'
	},
		{
		a: _Utils_Tuple2(1, 'c75dccc8-43bc-44df-afd7-13fd68f23e23'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, 'c75dccc8-43bc-44df-afd7-13fd68f23e23')),
		fP: 'Mettre en ligne une image dans l’explorateur de fichiers'
	},
		{
		a: _Utils_Tuple2(2, 'c75dccc8-43bc-44df-afd7-13fd68f23e23'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, 'c75dccc8-43bc-44df-afd7-13fd68f23e23')),
		fP: 'mettre en ligne un document dans l’explorateur de fichiers'
	},
		{
		a: _Utils_Tuple2(0, 'e8b32207-6cc8-4ec4-860c-adf9a078eb9c'),
		eF: $elm$core$Maybe$Nothing,
		fP: 'Editeur de page'
	},
		{
		a: _Utils_Tuple2(1, 'e8b32207-6cc8-4ec4-860c-adf9a078eb9c'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, 'e8b32207-6cc8-4ec4-860c-adf9a078eb9c')),
		fP: 'Créer ou modifier une page'
	},
		{
		a: _Utils_Tuple2(2, 'e8b32207-6cc8-4ec4-860c-adf9a078eb9c'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, 'e8b32207-6cc8-4ec4-860c-adf9a078eb9c')),
		fP: 'Menu déroulant de l’onglet fichier'
	},
		{
		a: _Utils_Tuple2(3, 'e8b32207-6cc8-4ec4-860c-adf9a078eb9c'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, 'e8b32207-6cc8-4ec4-860c-adf9a078eb9c')),
		fP: 'Menu déroulant de l’onglet mise en page'
	},
		{
		a: _Utils_Tuple2(4, 'e8b32207-6cc8-4ec4-860c-adf9a078eb9c'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, 'e8b32207-6cc8-4ec4-860c-adf9a078eb9c')),
		fP: 'Menu déroulant de l’onglet affichage'
	},
		{
		a: _Utils_Tuple2(5, 'e8b32207-6cc8-4ec4-860c-adf9a078eb9c'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, 'e8b32207-6cc8-4ec4-860c-adf9a078eb9c')),
		fP: 'Gestion des cellules'
	},
		{
		a: _Utils_Tuple2(6, 'e8b32207-6cc8-4ec4-860c-adf9a078eb9c'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, 'e8b32207-6cc8-4ec4-860c-adf9a078eb9c')),
		fP: 'Gestion des conteneurs'
	},
		{
		a: _Utils_Tuple2(0, '1a1737c1-0f5b-4b5c-9e7a-cba30cfcb2d9'),
		eF: $elm$core$Maybe$Nothing,
		fP: 'Nouvelle cellule'
	},
		{
		a: _Utils_Tuple2(1, '1a1737c1-0f5b-4b5c-9e7a-cba30cfcb2d9'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, '1a1737c1-0f5b-4b5c-9e7a-cba30cfcb2d9')),
		fP: 'Bloc de texte'
	},
		{
		a: _Utils_Tuple2(2, '1a1737c1-0f5b-4b5c-9e7a-cba30cfcb2d9'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, '1a1737c1-0f5b-4b5c-9e7a-cba30cfcb2d9')),
		fP: 'Zone de blocs de lien'
	},
		{
		a: _Utils_Tuple2(3, '1a1737c1-0f5b-4b5c-9e7a-cba30cfcb2d9'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, '1a1737c1-0f5b-4b5c-9e7a-cba30cfcb2d9')),
		fP: 'Zone de fiches'
	},
		{
		a: _Utils_Tuple2(4, '1a1737c1-0f5b-4b5c-9e7a-cba30cfcb2d9'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, '1a1737c1-0f5b-4b5c-9e7a-cba30cfcb2d9')),
		fP: 'Image'
	},
		{
		a: _Utils_Tuple2(5, '1a1737c1-0f5b-4b5c-9e7a-cba30cfcb2d9'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, '1a1737c1-0f5b-4b5c-9e7a-cba30cfcb2d9')),
		fP: 'Vidéo'
	},
		{
		a: _Utils_Tuple2(6, '1a1737c1-0f5b-4b5c-9e7a-cba30cfcb2d9'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, '1a1737c1-0f5b-4b5c-9e7a-cba30cfcb2d9')),
		fP: 'Tableau'
	},
		{
		a: _Utils_Tuple2(7, '1a1737c1-0f5b-4b5c-9e7a-cba30cfcb2d9'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, '1a1737c1-0f5b-4b5c-9e7a-cba30cfcb2d9')),
		fP: 'Album phototheque existant'
	},
		{
		a: _Utils_Tuple2(8, '1a1737c1-0f5b-4b5c-9e7a-cba30cfcb2d9'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, '1a1737c1-0f5b-4b5c-9e7a-cba30cfcb2d9')),
		fP: 'Album phototheque création'
	},
		{
		a: _Utils_Tuple2(0, 'b75e18b9-b962-4c18-91c3-c5134aae0bbd'),
		eF: $elm$core$Maybe$Nothing,
		fP: 'Repertoire géneral'
	},
		{
		a: _Utils_Tuple2(1, 'b75e18b9-b962-4c18-91c3-c5134aae0bbd'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, 'b75e18b9-b962-4c18-91c3-c5134aae0bbd')),
		fP: 'Retrouver une fiche'
	},
		{
		a: _Utils_Tuple2(2, 'b75e18b9-b962-4c18-91c3-c5134aae0bbd'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, 'b75e18b9-b962-4c18-91c3-c5134aae0bbd')),
		fP: 'Modifier une fiche'
	},
		{
		a: _Utils_Tuple2(3, 'b75e18b9-b962-4c18-91c3-c5134aae0bbd'),
		eF: $elm$core$Maybe$Just(
			_Utils_Tuple2(0, 'b75e18b9-b962-4c18-91c3-c5134aae0bbd')),
		fP: 'Créer une fiche'
	}
	]);
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Tree = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $turboMaCk$lazy_tree_with_zipper$Lazy$Lazy = function (a) {
	return {$: 0, a: a};
};
var $turboMaCk$lazy_tree_with_zipper$Lazy$lazy = function (thunk) {
	return $turboMaCk$lazy_tree_with_zipper$Lazy$Lazy(thunk);
};
var $turboMaCk$lazy_tree_with_zipper$Lazy$LList$llist = F2(
	function (constructor, arg) {
		return $turboMaCk$lazy_tree_with_zipper$Lazy$lazy(
			function (_v0) {
				return constructor(arg);
			});
	});
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$constructTree = F3(
	function (isParent, list, treeItem) {
		return A2(
			$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Tree,
			treeItem,
			A3(
				$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$fromList_,
				$elm$core$Maybe$Just(treeItem),
				isParent,
				list));
	});
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$fromList_ = F3(
	function (parent, isParent, list) {
		return A2(
			$turboMaCk$lazy_tree_with_zipper$Lazy$LList$llist,
			A2(
				$elm$core$Basics$composeL,
				$elm$core$List$map(
					A2($turboMaCk$lazy_tree_with_zipper$Lazy$Tree$constructTree, isParent, list)),
				$elm$core$List$filter(
					isParent(parent))),
			list);
	});
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$fromList = function (isParent) {
	return A2($turboMaCk$lazy_tree_with_zipper$Lazy$Tree$fromList_, $elm$core$Maybe$Nothing, isParent);
};
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0;
		return A3($elm$core$Dict$insert, key, 0, dict);
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$Zipper = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$fromTree = function (tree) {
	return A2($turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$Zipper, tree, _List_Nil);
};
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (!maybe.$) {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$Basics$neq = _Utils_notEqual;
var $elm$core$Basics$not = _Basics_not;
var $elm$core$Set$remove = F2(
	function (key, _v0) {
		var dict = _v0;
		return A2($elm$core$Dict$remove, key, dict);
	});
var $author$project$Help$Help$NoOp = {$: 5};
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			A2(
				$elm$core$Task$onError,
				A2(
					$elm$core$Basics$composeL,
					A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
					$elm$core$Result$Err),
				A2(
					$elm$core$Task$andThen,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Ok),
					task)));
	});
var $elm$browser$Browser$Dom$getElement = _Browser_getElement;
var $elm$browser$Browser$Dom$setViewportOf = _Browser_setViewportOf;
var $author$project$Help$Help$scrollTo = function (destId) {
	return A2(
		$elm$core$Task$attempt,
		function (_v0) {
			return $author$project$Help$Help$NoOp;
		},
		A2(
			$elm$core$Task$andThen,
			function (mainContInfo) {
				return A2(
					$elm$core$Task$andThen,
					function (el) {
						return A3($elm$browser$Browser$Dom$setViewportOf, 'MainPanel', 0, (el.gg.mv - mainContInfo.gg.mv) - 50);
					},
					$elm$browser$Browser$Dom$getElement(destId));
			},
			$elm$browser$Browser$Dom$getElement('MainContent')));
};
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$descendants = function (_v0) {
	var d = _v0.b;
	return d;
};
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$item = function (_v0) {
	var i = _v0.a;
	return i;
};
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$updateItem = F2(
	function (fc, _v0) {
		var tree = _v0.a;
		var zipperBreadcrumbs = _v0.b;
		return A2(
			$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$Zipper,
			A2(
				$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Tree,
				fc(
					$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$item(tree)),
				$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$descendants(tree)),
			zipperBreadcrumbs);
	});
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (!maybe.$) {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $author$project$Help$Help$update = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 0:
				var zipper = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							gB: $elm$core$Maybe$Just(
								A2(
									$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$updateItem,
									function (_v1) {
										var s = _v1.a;
										var i = _v1.b;
										return _Utils_Tuple2(!s, i);
									},
									zipper))
						}),
					$elm$core$Platform$Cmd$none);
			case 1:
				var external = msg.a;
				var id = msg.b;
				var content = A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.iI;
						},
						A2($elm$core$Dict$get, id.b, model.dd)));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							cx: id,
							dD: (_Utils_eq(id.b, model.cx.b) && (!external)) ? $elm$core$Set$empty : $elm$core$Set$fromList(
								A2($elm$core$List$map, $elm$core$Tuple$second, content)),
							dQ: true
						}),
					$elm$core$Platform$Cmd$none);
			case 2:
				var _v2 = model.cx;
				var anchor = _v2.a;
				var id = _v2.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{dQ: false}),
					A2(
						$elm$core$Platform$Cmd$map,
						model.bY,
						$author$project$Help$Help$scrollTo(
							id + (' ' + $elm$core$String$fromInt(anchor)))));
			case 3:
				var res = msg.a;
				if (!res.$) {
					var _v4 = res.a;
					var pagesList = _v4.a;
					var indexEntries = _v4.b;
					var root = $elm$core$List$head(
						A2(
							$elm$core$List$filter,
							function (e) {
								return _Utils_eq(
									e.a,
									_Utils_Tuple2(0, 'root'));
							},
							indexEntries));
					var pages = $elm$core$Dict$fromList(
						A2(
							$elm$core$List$map,
							function (p) {
								return _Utils_Tuple2(p.a, p);
							},
							pagesList));
					var index = A2(
						$elm$core$Maybe$map,
						$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$fromTree,
						function (forest) {
							return A2(
								$elm$core$Maybe$map,
								function (r) {
									return A2(
										$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Tree,
										_Utils_Tuple2(true, r),
										forest);
								},
								root);
						}(
							A2(
								$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$fromList,
								F2(
									function (mbParent, _v5) {
										var page = _v5.b;
										return _Utils_eq(
											A2(
												$elm$core$Maybe$map,
												A2(
													$elm$core$Basics$composeL,
													function ($) {
														return $.a;
													},
													$elm$core$Tuple$second),
												mbParent),
											page.eF);
									}),
								A2(
									$elm$core$List$map,
									function (p) {
										return _Utils_Tuple2(true, p);
									},
									A2(
										$elm$core$List$filter,
										function (e) {
											return !_Utils_eq(
												e.a,
												_Utils_Tuple2(0, 'root'));
										},
										indexEntries)))));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{gB: index, dd: pages}),
						$elm$core$Platform$Cmd$none);
				} else {
					var e = res.a;
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 4:
				var src = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							dD: A2($elm$core$Set$remove, src, model.dD)
						}),
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Help$Help$init = function (externalMsg) {
	return A3(
		$author$project$Help$Help$update,
		0,
		$author$project$Help$Help$GotPages(
			$elm$core$Result$Ok(
				_Utils_Tuple2($author$project$Help$Help$helpPagesData, $author$project$Help$Help$indexEntriesData))),
		{
			cx: _Utils_Tuple2(0, 'root'),
			bY: externalMsg,
			gB: $elm$core$Maybe$Nothing,
			dD: $elm$core$Set$empty,
			dd: $elm$core$Dict$empty,
			dQ: false
		});
};
var $author$project$Internals$CommonHelpers$Initial = 0;
var $author$project$NewsEditor$NewsEditor$NewsSelector = 0;
var $author$project$NewsEditor$NewsEditor$TextBlockPluginMsg = function (a) {
	return {$: 14, a: a};
};
var $author$project$Document$Document$Font = function (a) {
	return {$: 12, a: a};
};
var $author$project$Document$Document$FontSize = function (a) {
	return {$: 14, a: a};
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$HtmlContent = F2(
	function (html, text) {
		return {gA: html, dV: text};
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$init = F3(
	function (attrs, mbInput, externalMsg) {
		return _Utils_Tuple2(
			{
				bY: externalMsg,
				fk: A2($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$HtmlContent, '', ''),
				gU: 0,
				n: $elm$core$Maybe$Nothing,
				q: A2($elm$core$Maybe$withDefault, _List_Nil, mbInput),
				aq: $elm$core$Maybe$Nothing,
				x: _Utils_eq(attrs, _List_Nil) ? _List_fromArray(
					[
						$author$project$Document$Document$Font('Arial'),
						$author$project$Document$Document$FontSize(16)
					]) : attrs
			},
			$elm$core$Platform$Cmd$none);
	});
var $author$project$NewsEditor$NewsEditor$init = function (externalMsg) {
	var _v0 = A3(
		$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$init,
		_List_Nil,
		$elm$core$Maybe$Nothing,
		A2($elm$core$Basics$composeL, externalMsg, $author$project$NewsEditor$NewsEditor$TextBlockPluginMsg));
	var newTextBlockPlugin = _v0.a;
	var textBlockPluginCmds = _v0.b;
	return _Utils_Tuple2(
		{
			e: $elm$core$Maybe$Nothing,
			_: $elm$core$Set$empty,
			bt: false,
			iP: $elm$time$Time$millisToPosix(0),
			bA: '',
			bY: externalMsg,
			b4: $author$project$Internals$ToolHelpers$ToolLoadingWaiting,
			gT: $elm$core$Dict$empty,
			cN: 0,
			bI: false,
			ll: $elm$core$Maybe$Nothing,
			bM: 0,
			co: newTextBlockPlugin
		},
		textBlockPluginCmds);
};
var $author$project$PageEditor$PageEditor$BlockLinksPluginMsg = function (a) {
	return {$: 38, a: a};
};
var $author$project$PageEditor$PageEditor$CurrentViewport = function (a) {
	return {$: 0, a: a};
};
var $author$project$PageEditor$PageEditor$EditCell = {$: 11};
var $author$project$PageEditor$PageEditor$FichesPluginMsg = function (a) {
	return {$: 39, a: a};
};
var $author$project$PageEditor$PageEditor$GalleryPluginMsg = function (a) {
	return {$: 41, a: a};
};
var $author$project$PageEditor$PageEditor$ImagePluginMsg = function (a) {
	return {$: 36, a: a};
};
var $author$project$PageEditor$PageEditor$MainInterfaceViewport = function (a) {
	return {$: 2, a: a};
};
var $author$project$PageEditor$PageEditor$NoOp = {$: 59};
var $author$project$PageEditor$PageEditor$PictureLinksPluginMsg = function (a) {
	return {$: 40, a: a};
};
var $author$project$Document$DocumentViews$StyleSheets$PreviewScreen = 1;
var $author$project$PageEditor$PageEditor$Rewind = {$: 8};
var $author$project$PageEditor$PageEditor$SelectDoc = function (a) {
	return {$: 6, a: a};
};
var $author$project$PageEditor$PageEditor$SetSeason = function (a) {
	return {$: 30, a: a};
};
var $author$project$Document$DocumentViews$StyleSheets$Spring = 0;
var $author$project$PageEditor$PageEditor$TablePluginMsg = function (a) {
	return {$: 34, a: a};
};
var $author$project$PageEditor$PageEditor$TextBlockPluginMsg = function (a) {
	return {$: 35, a: a};
};
var $author$project$PageEditor$PageEditor$VideoPluginMsg = function (a) {
	return {$: 37, a: a};
};
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $author$project$PageEditor$PageEditor$cmdPort = _Platform_outgoingPort('cmdPort', $elm$core$Basics$identity);
var $author$project$Document$Document$Cell = function (a) {
	return {$: 1, a: a};
};
var $author$project$Document$Document$Container = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$Document$Document$DocColumn = 0;
var $author$project$Document$Document$EmptyCell = {$: 19};
var $author$project$PageEditor$Internals$DocumentEditorHelpers$emptyDoc = A2(
	$author$project$Document$Document$Container,
	{
		y: _List_Nil,
		bs: 0,
		a: {
			br: $elm$core$Set$fromList(_List_Nil),
			bx: $elm$core$Maybe$Just('root'),
			bE: $elm$core$Maybe$Just('mainContainer'),
			cW: 0
		}
	},
	_List_fromArray(
		[
			$author$project$Document$Document$Cell(
			{
				y: _List_Nil,
				at: $author$project$Document$Document$EmptyCell,
				a: {
					br: $elm$core$Set$fromList(_List_Nil),
					bx: $elm$core$Maybe$Nothing,
					bE: $elm$core$Maybe$Nothing,
					cW: 1
				}
			})
		]));
var $author$project$PageEditor$Internals$DocumentEditorHelpers$docSize = function (doc) {
	if (doc.$ === 1) {
		return 1;
	} else {
		var xs = doc.b;
		return A3(
			$elm$core$List$foldr,
			F2(
				function (d, acc) {
					return $author$project$PageEditor$Internals$DocumentEditorHelpers$docSize(d) + acc;
				}),
			1,
			xs);
	}
};
var $author$project$PageEditor$Internals$DocumentEditorHelpers$fixUids = F2(
	function (nextUid, document) {
		if (!document.$) {
			if (!document.b.b) {
				var nv = document.a;
				var id = nv.a;
				return A2(
					$author$project$Document$Document$Container,
					_Utils_update(
						nv,
						{
							a: _Utils_update(
								id,
								{
									bE: $elm$core$Maybe$Just(
										'defaultHtmlId' + $elm$core$String$fromInt(nextUid)),
									cW: nextUid
								})
						}),
					_List_Nil);
			} else {
				var nv = document.a;
				var id = nv.a;
				var children = document.b;
				return A2(
					$author$project$Document$Document$Container,
					_Utils_update(
						nv,
						{
							a: _Utils_update(
								id,
								{
									bE: $elm$core$Maybe$Just(
										'defaultHtmlId' + $elm$core$String$fromInt(nextUid)),
									cW: nextUid
								})
						}),
					A3(
						$elm$core$List$foldr,
						F2(
							function (doc, _v1) {
								var done = _v1.a;
								var nUid = _v1.b;
								return _Utils_Tuple2(
									A2(
										$elm$core$List$cons,
										A2($author$project$PageEditor$Internals$DocumentEditorHelpers$fixUids, nUid, doc),
										done),
									nUid + $author$project$PageEditor$Internals$DocumentEditorHelpers$docSize(doc));
							}),
						_Utils_Tuple2(_List_Nil, nextUid + 1),
						children).a);
			}
		} else {
			var lv = document.a;
			var id = lv.a;
			return $author$project$Document$Document$Cell(
				_Utils_update(
					lv,
					{
						a: _Utils_update(
							id,
							{
								bE: $elm$core$Maybe$Just(
									'defaultHtmlId' + $elm$core$String$fromInt(nextUid)),
								cW: nextUid
							})
					}));
		}
	});
var $elm$browser$Browser$Dom$getViewportOf = _Browser_getViewportOf;
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Closed = 0;
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$InternalLink = 0;
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$init = F2(
	function (mbInput, externalMsg) {
		return {
			k: A2(
				$elm$core$Maybe$withDefault,
				$elm$core$Dict$empty,
				A2(
					$elm$core$Maybe$map,
					$elm$core$Dict$fromList,
					A2(
						$elm$core$Maybe$map,
						$elm$core$List$indexedMap($elm$core$Tuple$pair),
						mbInput))),
			bB: $elm$core$Maybe$Nothing,
			bY: externalMsg,
			b3: $elm$core$Maybe$Nothing,
			dC: 0,
			l: $elm$core$Maybe$Nothing,
			a$: 0
		};
	});
var $author$project$PageEditor$EditorPlugins$FichesPlugin$init = F2(
	function (selectedFiches, externalMsg) {
		return {
			hP: $elm$core$Maybe$Nothing,
			io: $elm$core$Maybe$Nothing,
			bY: externalMsg,
			a7: $elm$core$Maybe$Nothing,
			j_: $elm$core$Maybe$Nothing,
			km: $elm$core$Maybe$Nothing,
			lt: $elm$core$Maybe$Nothing,
			ai: $elm$core$Set$fromList(selectedFiches)
		};
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$GalleryEditor = 3;
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$Home = 0;
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$SetInitialSeed = function (a) {
	return {$: 12, a: a};
};
var $elm$time$Time$now = _Time_now($elm$time$Time$millisToPosix);
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$init = F2(
	function (mbGalleryMeta, externalMsg) {
		var initState = _Utils_eq(mbGalleryMeta, $elm$core$Maybe$Nothing) ? 0 : 3;
		return _Utils_Tuple2(
			{
				a1: $elm$core$Dict$empty,
				bY: externalMsg,
				b0: $elm$core$Dict$empty,
				a5: A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.fP;
					},
					mbGalleryMeta),
				ba: false,
				dF: _List_Nil,
				cH: $elm$core$Maybe$Nothing,
				q: mbGalleryMeta,
				cg: initState,
				a_: $elm$core$Dict$empty,
				de: _List_Nil,
				ll: $elm$core$Maybe$Nothing,
				fL: initState,
				j: $elm$core$Dict$empty
			},
			A2(
				$elm$core$Platform$Cmd$map,
				externalMsg,
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							A2($elm$core$Task$perform, $author$project$PageEditor$EditorPlugins$GalleryPlugin$SetInitialSeed, $elm$time$Time$now)
						]))));
	});
var $author$project$PageEditor$Internals$DocumentEditorHelpers$ACenter = 1;
var $author$project$PageEditor$EditorPlugins$ImagePlugin$ImageAttributeEditor = 0;
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (!maybeValue.$) {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$PageEditor$Internals$DocumentEditorHelpers$ALeft = 2;
var $author$project$PageEditor$Internals$DocumentEditorHelpers$ARight = 0;
var $author$project$PageEditor$Internals$DocumentEditorHelpers$findAlignment = function (attrs) {
	var helper = function (xs) {
		helper:
		while (true) {
			if (!xs.b) {
				return 1;
			} else {
				switch (xs.a.$) {
					case 2:
						var _v1 = xs.a;
						return 0;
					case 3:
						var _v2 = xs.a;
						return 2;
					default:
						var y = xs.a;
						var ys = xs.b;
						var $temp$xs = ys;
						xs = $temp$xs;
						continue helper;
				}
			}
		}
	};
	return helper(attrs);
};
var $author$project$PageEditor$EditorPlugins$ImagePlugin$init = F2(
	function (mbInput, externalMsg) {
		return _Utils_Tuple2(
			{
				bQ: A2(
					$elm$core$Maybe$withDefault,
					1,
					A2(
						$elm$core$Maybe$map,
						A2($elm$core$Basics$composeL, $author$project$PageEditor$Internals$DocumentEditorHelpers$findAlignment, $elm$core$Tuple$second),
						mbInput)),
				bY: externalMsg,
				en: A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2($elm$core$Maybe$map, $elm$core$Tuple$second, mbInput)),
				b6: A2(
					$elm$core$Maybe$andThen,
					A2(
						$elm$core$Basics$composeL,
						function ($) {
							return $.f7;
						},
						$elm$core$Tuple$first),
					mbInput),
				b7: A2($elm$core$Maybe$map, $elm$core$Tuple$first, mbInput),
				h: 0
			},
			A2($elm$core$Platform$Cmd$map, externalMsg, $elm$core$Platform$Cmd$none));
	});
var $TSFoster$elm_uuid$UUID$UUID = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $elm$random$Random$Generator = $elm$core$Basics$identity;
var $elm$random$Random$map = F2(
	function (func, _v0) {
		var genA = _v0;
		return function (seed0) {
			var _v1 = genA(seed0);
			var a = _v1.a;
			var seed1 = _v1.b;
			return _Utils_Tuple2(
				func(a),
				seed1);
		};
	});
var $elm$random$Random$map4 = F5(
	function (func, _v0, _v1, _v2, _v3) {
		var genA = _v0;
		var genB = _v1;
		var genC = _v2;
		var genD = _v3;
		return function (seed0) {
			var _v4 = genA(seed0);
			var a = _v4.a;
			var seed1 = _v4.b;
			var _v5 = genB(seed1);
			var b = _v5.a;
			var seed2 = _v5.b;
			var _v6 = genC(seed2);
			var c = _v6.a;
			var seed3 = _v6.b;
			var _v7 = genD(seed3);
			var d = _v7.a;
			var seed4 = _v7.b;
			return _Utils_Tuple2(
				A4(func, a, b, c, d),
				seed4);
		};
	});
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $TSFoster$elm_uuid$UUID$forceUnsigned = $elm$core$Bitwise$shiftRightZfBy(0);
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$random$Random$Seed = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$random$Random$next = function (_v0) {
	var state0 = _v0.a;
	var incr = _v0.b;
	return A2($elm$random$Random$Seed, ((state0 * 1664525) + incr) >>> 0, incr);
};
var $elm$core$Bitwise$xor = _Bitwise_xor;
var $elm$random$Random$peel = function (_v0) {
	var state = _v0.a;
	var word = (state ^ (state >>> ((state >>> 28) + 4))) * 277803737;
	return ((word >>> 22) ^ word) >>> 0;
};
var $elm$random$Random$int = F2(
	function (a, b) {
		return function (seed0) {
			var _v0 = (_Utils_cmp(a, b) < 0) ? _Utils_Tuple2(a, b) : _Utils_Tuple2(b, a);
			var lo = _v0.a;
			var hi = _v0.b;
			var range = (hi - lo) + 1;
			if (!((range - 1) & range)) {
				return _Utils_Tuple2(
					(((range - 1) & $elm$random$Random$peel(seed0)) >>> 0) + lo,
					$elm$random$Random$next(seed0));
			} else {
				var threshhold = (((-range) >>> 0) % range) >>> 0;
				var accountForBias = function (seed) {
					accountForBias:
					while (true) {
						var x = $elm$random$Random$peel(seed);
						var seedN = $elm$random$Random$next(seed);
						if (_Utils_cmp(x, threshhold) < 0) {
							var $temp$seed = seedN;
							seed = $temp$seed;
							continue accountForBias;
						} else {
							return _Utils_Tuple2((x % range) + lo, seedN);
						}
					}
				};
				return accountForBias(seed0);
			}
		};
	});
var $elm$random$Random$maxInt = 2147483647;
var $elm$random$Random$minInt = -2147483648;
var $TSFoster$elm_uuid$UUID$randomU32 = A2(
	$elm$random$Random$map,
	$TSFoster$elm_uuid$UUID$forceUnsigned,
	A2($elm$random$Random$int, $elm$random$Random$minInt, $elm$random$Random$maxInt));
var $elm$core$Bitwise$or = _Bitwise_or;
var $TSFoster$elm_uuid$UUID$toVariant1 = function (_v0) {
	var a = _v0.a;
	var b = _v0.b;
	var c = _v0.c;
	var d = _v0.d;
	return A4(
		$TSFoster$elm_uuid$UUID$UUID,
		a,
		b,
		$TSFoster$elm_uuid$UUID$forceUnsigned(2147483648 | (1073741823 & c)),
		d);
};
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $TSFoster$elm_uuid$UUID$toVersion = F2(
	function (v, _v0) {
		var a = _v0.a;
		var b = _v0.b;
		var c = _v0.c;
		var d = _v0.d;
		return A4(
			$TSFoster$elm_uuid$UUID$UUID,
			a,
			$TSFoster$elm_uuid$UUID$forceUnsigned((v << 12) | (4294905855 & b)),
			c,
			d);
	});
var $TSFoster$elm_uuid$UUID$generator = A2(
	$elm$random$Random$map,
	A2(
		$elm$core$Basics$composeR,
		$TSFoster$elm_uuid$UUID$toVersion(4),
		$TSFoster$elm_uuid$UUID$toVariant1),
	A5($elm$random$Random$map4, $TSFoster$elm_uuid$UUID$UUID, $TSFoster$elm_uuid$UUID$randomU32, $TSFoster$elm_uuid$UUID$randomU32, $TSFoster$elm_uuid$UUID$randomU32, $TSFoster$elm_uuid$UUID$randomU32));
var $elm$random$Random$initialSeed = function (x) {
	var _v0 = $elm$random$Random$next(
		A2($elm$random$Random$Seed, 0, 1013904223));
	var state1 = _v0.a;
	var incr = _v0.b;
	var state2 = (state1 + x) >>> 0;
	return $elm$random$Random$next(
		A2($elm$random$Random$Seed, state2, incr));
};
var $elm$random$Random$step = F2(
	function (_v0, seed) {
		var generator = _v0;
		return generator(seed);
	});
var $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$init = F2(
	function (input, externalMsg) {
		var _v0 = A3(
			$elm$core$List$foldr,
			F2(
				function (pl, _v1) {
					var acc = _v1.a;
					var seed = _v1.b;
					var _v2 = A2($elm$random$Random$step, $TSFoster$elm_uuid$UUID$generator, seed);
					var uuid = _v2.a;
					var ns = _v2.b;
					return _Utils_Tuple2(
						A2(
							$elm$core$List$cons,
							{ce: pl, fS: uuid},
							acc),
						ns);
				}),
			_Utils_Tuple2(
				_List_Nil,
				$elm$random$Random$initialSeed(0)),
			input);
		var newBuffer = _v0.a;
		var newSeed = _v0.b;
		return {e: newBuffer, bY: externalMsg, c5: false, ll: newSeed, L: $elm$core$Maybe$Nothing, bO: $elm$core$Maybe$Nothing};
	});
var $author$project$PageEditor$EditorPlugins$TablePlugin$Edit = 1;
var $author$project$PageEditor$EditorPlugins$TablePlugin$emptyDocTable = function (externalMsg) {
	return {N: $elm$core$Maybe$Nothing, al: 'bleu-blanc', iU: $elm$core$Array$empty, el: '', bY: externalMsg, h: 1, kp: 0, cK: '', kq: 0, cL: '', cj: false, cl: false, dT: ''};
};
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{R: nodeList, C: nodeListSize, M: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $author$project$PageEditor$EditorPlugins$TablePlugin$init = F2(
	function (mbTableMeta, externalMsg) {
		if (mbTableMeta.$ === 1) {
			return $author$project$PageEditor$EditorPlugins$TablePlugin$emptyDocTable(externalMsg);
		} else {
			var style = mbTableMeta.a.lR;
			var nbrRows = mbTableMeta.a.kq;
			var nbrCols = mbTableMeta.a.kp;
			var data = mbTableMeta.a.iU;
			return _Utils_eq(data, _List_Nil) ? $author$project$PageEditor$EditorPlugins$TablePlugin$emptyDocTable(externalMsg) : {
				N: $elm$core$Maybe$Nothing,
				al: style,
				iU: $elm$core$Array$fromList(data),
				el: '',
				bY: externalMsg,
				h: 1,
				kp: nbrCols,
				cK: '',
				kq: nbrRows,
				cL: '',
				cj: true,
				cl: false,
				dT: ''
			};
		}
	});
var $author$project$Document$Document$VideoSize = F2(
	function (videoWidth, videoHeight) {
		return {mn: videoHeight, mo: videoWidth};
	});
var $author$project$PageEditor$EditorPlugins$VideoPlugin$init = F2(
	function (mbInput, externalMsg) {
		return {
			bQ: A2(
				$elm$core$Maybe$withDefault,
				1,
				A2(
					$elm$core$Maybe$map,
					A2($elm$core$Basics$composeL, $author$project$PageEditor$Internals$DocumentEditorHelpers$findAlignment, $elm$core$Tuple$second),
					mbInput)),
			iL: A2(
				$elm$core$Maybe$withDefault,
				false,
				A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeL,
						function ($) {
							return $.iL;
						},
						$elm$core$Tuple$first),
					mbInput)),
			el: '',
			bY: externalMsg,
			jj: A2(
				$elm$core$Maybe$withDefault,
				false,
				A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeL,
						function ($) {
							return $.jj;
						},
						$elm$core$Tuple$first),
					mbInput)),
			et: A2($elm$core$Maybe$map, $elm$core$Tuple$first, mbInput),
			cM: $elm$core$Maybe$Nothing,
			cR: $elm$core$Maybe$Nothing,
			k_: A2(
				$elm$core$Maybe$withDefault,
				false,
				A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeL,
						function ($) {
							return $.k_;
						},
						$elm$core$Tuple$first),
					mbInput)),
			fJ: A2(
				$elm$core$Maybe$withDefault,
				A2($author$project$Document$Document$VideoSize, 560, 314),
				A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeL,
						function ($) {
							return $.fJ;
						},
						$elm$core$Tuple$first),
					mbInput)),
			dS: A2(
				$elm$core$Maybe$withDefault,
				560 / 315,
				A2(
					$elm$core$Maybe$map,
					function (mbI) {
						var _v0 = function (s) {
							return _Utils_Tuple2(s.mo, s.mn);
						}(mbI.a.fJ);
						var w = _v0.a;
						var h = _v0.b;
						return w / h;
					},
					mbInput)),
			lL: A2(
				$elm$core$Maybe$andThen,
				A2(
					$elm$core$Basics$composeL,
					function ($) {
						return $.lL;
					},
					$elm$core$Tuple$first),
				mbInput),
			lU: A2(
				$elm$core$Maybe$withDefault,
				false,
				A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeL,
						function ($) {
							return $.lU;
						},
						$elm$core$Tuple$first),
					mbInput)),
			fP: A2(
				$elm$core$Maybe$withDefault,
				false,
				A2(
					$elm$core$Maybe$map,
					A2(
						$elm$core$Basics$composeL,
						function ($) {
							return $.fP;
						},
						$elm$core$Tuple$first),
					mbInput)),
			eR: A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($elm$core$Maybe$map, $elm$core$Tuple$second, mbInput))
		};
	});
var $author$project$PageEditor$Internals$DocumentZipper$initZip = function (doc) {
	return {bu: _List_Nil, a3: doc};
};
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$State = $elm$core$Basics$identity;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$initialState = function (prefix) {
	return {fp: false, ap: prefix, ck: $elm$core$Dict$empty};
};
var $billstclair$elm_localstorage$PortFunnel$InternalTypes$ListKeys = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$listKeys = $billstclair$elm_localstorage$PortFunnel$InternalTypes$ListKeys($elm$core$Maybe$Nothing);
var $author$project$PageEditor$Internals$DocumentEditorHelpers$maxUid = function (doc) {
	var listMax = A2(
		$elm$core$List$foldr,
		F2(
			function (x, acc) {
				return A2($elm$core$Basics$max, x, acc);
			}),
		0);
	var helper = F2(
		function (acc, doc_) {
			if (doc.$ === 1) {
				var id = doc.a.a;
				return A2($elm$core$Basics$max, id.cW, acc);
			} else {
				var id = doc.a.a;
				var xs = doc.b;
				return listMax(
					A2($elm$core$List$map, $author$project$PageEditor$Internals$DocumentEditorHelpers$maxUid, xs));
			}
		});
	return A2(helper, 0, doc);
};
var $billstclair$elm_localstorage$PortFunnel$InternalTypes$Clear = function (a) {
	return {$: 6, a: a};
};
var $billstclair$elm_localstorage$PortFunnel$InternalTypes$Get = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $billstclair$elm_localstorage$PortFunnel$InternalTypes$Put = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$addPrefix = F2(
	function (prefix, key) {
		return (prefix === '') ? key : (prefix + ('.' + key));
	});
var $billstclair$elm_localstorage$PortFunnel$InternalTypes$Got = F3(
	function (a, b, c) {
		return {$: 2, a: a, b: b, c: c};
	});
var $billstclair$elm_localstorage$PortFunnel$InternalTypes$Keys = F3(
	function (a, b, c) {
		return {$: 5, a: a, b: b, c: c};
	});
var $billstclair$elm_localstorage$PortFunnel$InternalTypes$SimulateClear = function (a) {
	return {$: 10, a: a};
};
var $billstclair$elm_localstorage$PortFunnel$InternalTypes$SimulateGet = F2(
	function (a, b) {
		return {$: 7, a: a, b: b};
	});
var $billstclair$elm_localstorage$PortFunnel$InternalTypes$SimulateListKeys = F2(
	function (a, b) {
		return {$: 9, a: a, b: b};
	});
var $billstclair$elm_localstorage$PortFunnel$InternalTypes$SimulatePut = F2(
	function (a, b) {
		return {$: 8, a: a, b: b};
	});
var $billstclair$elm_localstorage$PortFunnel$InternalTypes$Startup = {$: 0};
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$GotRecord = F3(
	function (label, key, value) {
		return {jX: key, O: label, hG: value};
	});
var $elm$json$Json$Decode$map3 = _Json_map3;
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$json$Json$Decode$nullable = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder)
			]));
};
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$gotDecoder = A4(
	$elm$json$Json$Decode$map3,
	$billstclair$elm_localstorage$PortFunnel$LocalStorage$GotRecord,
	A2(
		$elm$json$Json$Decode$field,
		'label',
		$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string)),
	A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'value', $elm$json$Json$Decode$value));
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$KeysRecord = F3(
	function (label, prefix, keys) {
		return {jY: keys, O: label, ap: prefix};
	});
var $elm$json$Json$Decode$list = _Json_decodeList;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$keysDecoder = A4(
	$elm$json$Json$Decode$map3,
	$billstclair$elm_localstorage$PortFunnel$LocalStorage$KeysRecord,
	A2(
		$elm$json$Json$Decode$field,
		'label',
		$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string)),
	A2($elm$json$Json$Decode$field, 'prefix', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'keys',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)));
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$labeledStringDecoder = function (property) {
	return A3(
		$elm$json$Json$Decode$map2,
		$elm$core$Tuple$pair,
		A2(
			$elm$json$Json$Decode$field,
			'label',
			$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string)),
		A2($elm$json$Json$Decode$field, property, $elm$json$Json$Decode$string));
};
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$PutRecord = F2(
	function (key, value) {
		return {jX: key, hG: value};
	});
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$putDecoder = A3(
	$elm$json$Json$Decode$map2,
	$billstclair$elm_localstorage$PortFunnel$LocalStorage$PutRecord,
	A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'value', $elm$json$Json$Decode$value));
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$NOTAG = 11;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$ClearTag = 6;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$GetTag = 1;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$GotTag = 2;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$KeysTag = 5;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$ListKeysTag = 4;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$PutTag = 3;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$SimulateClearTag = 10;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$SimulateGetTag = 7;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$SimulateListKeysTag = 9;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$SimulatePutTag = 8;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$StartupTag = 0;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$clearTag = 'clear';
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$getTag = 'get';
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$gotTag = 'got';
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$keysTag = 'keys';
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$listKeysTag = 'listkeys';
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$putTag = 'put';
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$simulateClearTag = 'simulateclear';
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$simulateGetTag = 'simulateget';
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$simulateListKeysTag = 'simulatelistkeys';
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$simulatePutTag = 'simulateput';
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$startupTag = 'startup';
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$tagDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2($billstclair$elm_localstorage$PortFunnel$LocalStorage$startupTag, 0),
			_Utils_Tuple2($billstclair$elm_localstorage$PortFunnel$LocalStorage$getTag, 1),
			_Utils_Tuple2($billstclair$elm_localstorage$PortFunnel$LocalStorage$gotTag, 2),
			_Utils_Tuple2($billstclair$elm_localstorage$PortFunnel$LocalStorage$putTag, 3),
			_Utils_Tuple2($billstclair$elm_localstorage$PortFunnel$LocalStorage$listKeysTag, 4),
			_Utils_Tuple2($billstclair$elm_localstorage$PortFunnel$LocalStorage$keysTag, 5),
			_Utils_Tuple2($billstclair$elm_localstorage$PortFunnel$LocalStorage$clearTag, 6),
			_Utils_Tuple2($billstclair$elm_localstorage$PortFunnel$LocalStorage$simulateGetTag, 7),
			_Utils_Tuple2($billstclair$elm_localstorage$PortFunnel$LocalStorage$simulatePutTag, 8),
			_Utils_Tuple2($billstclair$elm_localstorage$PortFunnel$LocalStorage$simulateListKeysTag, 9),
			_Utils_Tuple2($billstclair$elm_localstorage$PortFunnel$LocalStorage$simulateClearTag, 10)
		]));
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$strtag = function (str) {
	var _v0 = A2($elm$core$Dict$get, str, $billstclair$elm_localstorage$PortFunnel$LocalStorage$tagDict);
	if (!_v0.$) {
		var tag = _v0.a;
		return tag;
	} else {
		return 11;
	}
};
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$decode = function (_v0) {
	var tag = _v0.lX;
	var args = _v0.h4;
	var _v1 = $billstclair$elm_localstorage$PortFunnel$LocalStorage$strtag(tag);
	switch (_v1) {
		case 1:
			var _v2 = A2(
				$elm$json$Json$Decode$decodeValue,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$labeledStringDecoder('key'),
				args);
			if (!_v2.$) {
				var _v3 = _v2.a;
				var label = _v3.a;
				var key = _v3.b;
				return $elm$core$Result$Ok(
					A2($billstclair$elm_localstorage$PortFunnel$InternalTypes$Get, label, key));
			} else {
				return $elm$core$Result$Err(
					'Get key not a string: ' + A2($elm$json$Json$Encode$encode, 0, args));
			}
		case 2:
			var _v4 = A2($elm$json$Json$Decode$decodeValue, $billstclair$elm_localstorage$PortFunnel$LocalStorage$gotDecoder, args);
			if (!_v4.$) {
				var label = _v4.a.O;
				var key = _v4.a.jX;
				var value = _v4.a.hG;
				return $elm$core$Result$Ok(
					A3(
						$billstclair$elm_localstorage$PortFunnel$InternalTypes$Got,
						label,
						key,
						_Utils_eq(value, $elm$json$Json$Encode$null) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(value)));
			} else {
				return $elm$core$Result$Err(
					'Got not { label, key, value }: ' + A2($elm$json$Json$Encode$encode, 0, args));
			}
		case 3:
			var _v5 = A2($elm$json$Json$Decode$decodeValue, $billstclair$elm_localstorage$PortFunnel$LocalStorage$putDecoder, args);
			if (!_v5.$) {
				var key = _v5.a.jX;
				var value = _v5.a.hG;
				return $elm$core$Result$Ok(
					A2(
						$billstclair$elm_localstorage$PortFunnel$InternalTypes$Put,
						key,
						_Utils_eq(value, $elm$json$Json$Encode$null) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(value)));
			} else {
				return $elm$core$Result$Err(
					'Put not { key, value }: ' + A2($elm$json$Json$Encode$encode, 0, args));
			}
		case 4:
			var _v6 = A2(
				$elm$json$Json$Decode$decodeValue,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$labeledStringDecoder('prefix'),
				args);
			if (!_v6.$) {
				var _v7 = _v6.a;
				var label = _v7.a;
				var prefix = _v7.b;
				return $elm$core$Result$Ok(
					A2($billstclair$elm_localstorage$PortFunnel$InternalTypes$ListKeys, label, prefix));
			} else {
				return $elm$core$Result$Err(
					'ListKeys prefix not a string: ' + A2($elm$json$Json$Encode$encode, 0, args));
			}
		case 5:
			var _v8 = A2($elm$json$Json$Decode$decodeValue, $billstclair$elm_localstorage$PortFunnel$LocalStorage$keysDecoder, args);
			if (!_v8.$) {
				var label = _v8.a.O;
				var prefix = _v8.a.ap;
				var keys = _v8.a.jY;
				return $elm$core$Result$Ok(
					A3($billstclair$elm_localstorage$PortFunnel$InternalTypes$Keys, label, prefix, keys));
			} else {
				return $elm$core$Result$Err(
					'Keys not { prefix, keys }: ' + A2($elm$json$Json$Encode$encode, 0, args));
			}
		case 6:
			var _v9 = A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$string, args);
			if (!_v9.$) {
				var prefix = _v9.a;
				return $elm$core$Result$Ok(
					$billstclair$elm_localstorage$PortFunnel$InternalTypes$Clear(prefix));
			} else {
				return $elm$core$Result$Err(
					'Clear prefix not a string: ' + A2($elm$json$Json$Encode$encode, 0, args));
			}
		case 0:
			return $elm$core$Result$Ok($billstclair$elm_localstorage$PortFunnel$InternalTypes$Startup);
		case 7:
			var _v10 = A2(
				$elm$json$Json$Decode$decodeValue,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$labeledStringDecoder('key'),
				args);
			if (!_v10.$) {
				var _v11 = _v10.a;
				var label = _v11.a;
				var key = _v11.b;
				return $elm$core$Result$Ok(
					A2($billstclair$elm_localstorage$PortFunnel$InternalTypes$SimulateGet, label, key));
			} else {
				return $elm$core$Result$Err(
					'Get key not a string: ' + A2($elm$json$Json$Encode$encode, 0, args));
			}
		case 8:
			var _v12 = A2($elm$json$Json$Decode$decodeValue, $billstclair$elm_localstorage$PortFunnel$LocalStorage$putDecoder, args);
			if (!_v12.$) {
				var key = _v12.a.jX;
				var value = _v12.a.hG;
				return $elm$core$Result$Ok(
					A2(
						$billstclair$elm_localstorage$PortFunnel$InternalTypes$SimulatePut,
						key,
						_Utils_eq(value, $elm$json$Json$Encode$null) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(value)));
			} else {
				return $elm$core$Result$Err(
					'SimulatePut not { key, value }: ' + A2($elm$json$Json$Encode$encode, 0, args));
			}
		case 9:
			var _v13 = A2(
				$elm$json$Json$Decode$decodeValue,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$labeledStringDecoder('prefix'),
				args);
			if (!_v13.$) {
				var _v14 = _v13.a;
				var label = _v14.a;
				var prefix = _v14.b;
				return $elm$core$Result$Ok(
					A2($billstclair$elm_localstorage$PortFunnel$InternalTypes$SimulateListKeys, label, prefix));
			} else {
				return $elm$core$Result$Err(
					'SimulateListKeys prefix not a string: ' + A2($elm$json$Json$Encode$encode, 0, args));
			}
		case 10:
			var _v15 = A2($elm$json$Json$Decode$decodeValue, $elm$json$Json$Decode$string, args);
			if (!_v15.$) {
				var prefix = _v15.a;
				return $elm$core$Result$Ok(
					$billstclair$elm_localstorage$PortFunnel$InternalTypes$SimulateClear(prefix));
			} else {
				return $elm$core$Result$Err(
					'SimulateClear prefix not a string: ' + A2($elm$json$Json$Encode$encode, 0, args));
			}
		default:
			return $elm$core$Result$Err('Unknown tag: ' + tag);
	}
};
var $billstclair$elm_port_funnel$PortFunnel$GenericMessage = F3(
	function (moduleName, tag, args) {
		return {h4: args, ki: moduleName, lX: tag};
	});
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(0),
			pairs));
};
var $elm$json$Json$Encode$string = _Json_wrap;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$encodeLabeledString = F3(
	function (label, string, property) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'label',
					function () {
						if (!label.$) {
							var lab = label.a;
							return $elm$json$Json$Encode$string(lab);
						} else {
							return $elm$json$Json$Encode$null;
						}
					}()),
					_Utils_Tuple2(
					property,
					$elm$json$Json$Encode$string(string))
				]));
	});
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(0),
				entries));
	});
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName = 'LocalStorage';
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$encode = function (message) {
	switch (message.$) {
		case 0:
			return A3($billstclair$elm_port_funnel$PortFunnel$GenericMessage, $billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName, $billstclair$elm_localstorage$PortFunnel$LocalStorage$startupTag, $elm$json$Json$Encode$null);
		case 1:
			var label = message.a;
			var key = message.b;
			return A3(
				$billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$getTag,
				A3($billstclair$elm_localstorage$PortFunnel$LocalStorage$encodeLabeledString, label, key, 'key'));
		case 2:
			var label = message.a;
			var key = message.b;
			var value = message.c;
			return A3(
				$billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$gotTag,
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'label',
							function () {
								if (!label.$) {
									var lab = label.a;
									return $elm$json$Json$Encode$string(lab);
								} else {
									return $elm$json$Json$Encode$null;
								}
							}()),
							_Utils_Tuple2(
							'key',
							$elm$json$Json$Encode$string(key)),
							_Utils_Tuple2(
							'value',
							function () {
								if (value.$ === 1) {
									return $elm$json$Json$Encode$null;
								} else {
									var v = value.a;
									return v;
								}
							}())
						])));
		case 3:
			var key = message.a;
			var value = message.b;
			return A3(
				$billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$putTag,
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'key',
							$elm$json$Json$Encode$string(key)),
							_Utils_Tuple2(
							'value',
							function () {
								if (value.$ === 1) {
									return $elm$json$Json$Encode$null;
								} else {
									var v = value.a;
									return v;
								}
							}())
						])));
		case 4:
			var label = message.a;
			var prefix = message.b;
			return A3(
				$billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$listKeysTag,
				A3($billstclair$elm_localstorage$PortFunnel$LocalStorage$encodeLabeledString, label, prefix, 'prefix'));
		case 5:
			var label = message.a;
			var prefix = message.b;
			var keys = message.c;
			return A3(
				$billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$keysTag,
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'label',
							function () {
								if (!label.$) {
									var lab = label.a;
									return $elm$json$Json$Encode$string(lab);
								} else {
									return $elm$json$Json$Encode$null;
								}
							}()),
							_Utils_Tuple2(
							'prefix',
							$elm$json$Json$Encode$string(prefix)),
							_Utils_Tuple2(
							'keys',
							A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, keys))
						])));
		case 6:
			var prefix = message.a;
			return A3(
				$billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$clearTag,
				$elm$json$Json$Encode$string(prefix));
		case 7:
			var label = message.a;
			var key = message.b;
			return A3(
				$billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$simulateGetTag,
				A3($billstclair$elm_localstorage$PortFunnel$LocalStorage$encodeLabeledString, label, key, 'key'));
		case 8:
			var key = message.a;
			var value = message.b;
			return A3(
				$billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$simulatePutTag,
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'key',
							$elm$json$Json$Encode$string(key)),
							_Utils_Tuple2(
							'value',
							function () {
								if (value.$ === 1) {
									return $elm$json$Json$Encode$null;
								} else {
									var v = value.a;
									return v;
								}
							}())
						])));
		case 9:
			var label = message.a;
			var prefix = message.b;
			return A3(
				$billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$simulateListKeysTag,
				A3($billstclair$elm_localstorage$PortFunnel$LocalStorage$encodeLabeledString, label, prefix, 'prefix'));
		default:
			var prefix = message.a;
			return A3(
				$billstclair$elm_port_funnel$PortFunnel$GenericMessage,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
				$billstclair$elm_localstorage$PortFunnel$LocalStorage$simulateClearTag,
				$elm$json$Json$Encode$string(prefix));
	}
};
var $billstclair$elm_port_funnel$PortFunnel$ModuleDesc = $elm$core$Basics$identity;
var $billstclair$elm_port_funnel$PortFunnel$ModuleDescRecord = F4(
	function (moduleName, encoder, decoder, process) {
		return {e8: decoder, fb: encoder, ki: moduleName, fA: process};
	});
var $billstclair$elm_port_funnel$PortFunnel$makeModuleDesc = F4(
	function (name, encoder, decoder, processor) {
		return A4($billstclair$elm_port_funnel$PortFunnel$ModuleDescRecord, name, encoder, decoder, processor);
	});
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$GetResponse = function (a) {
	return {$: 1, a: a};
};
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$ListKeysResponse = function (a) {
	return {$: 2, a: a};
};
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$NoResponse = {$: 0};
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === -2) {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$core$Dict$filter = F2(
	function (isGood, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, d) {
					return A2(isGood, k, v) ? A3($elm$core$Dict$insert, k, v, d) : d;
				}),
			$elm$core$Dict$empty,
			dict);
	});
var $elm_community$dict_extra$Dict$Extra$removeWhen = F2(
	function (pred, dict) {
		return A2(
			$elm$core$Dict$filter,
			F2(
				function (k, v) {
					return !A2(pred, k, v);
				}),
			dict);
	});
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$stripPrefix = F2(
	function (prefix, key) {
		return (prefix === '') ? key : A2(
			$elm$core$String$dropLeft,
			1 + $elm$core$String$length(prefix),
			key);
	});
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$process = F2(
	function (message, boxedState) {
		var state = boxedState;
		switch (message.$) {
			case 2:
				var label = message.a;
				var key = message.b;
				var value = message.c;
				return _Utils_Tuple2(
					boxedState,
					$billstclair$elm_localstorage$PortFunnel$LocalStorage$GetResponse(
						{
							jX: A2($billstclair$elm_localstorage$PortFunnel$LocalStorage$stripPrefix, state.ap, key),
							O: label,
							hG: value
						}));
			case 5:
				var label = message.a;
				var prefix = message.b;
				var keys = message.c;
				return _Utils_Tuple2(
					boxedState,
					$billstclair$elm_localstorage$PortFunnel$LocalStorage$ListKeysResponse(
						{
							jY: A2(
								$elm$core$List$map,
								$billstclair$elm_localstorage$PortFunnel$LocalStorage$stripPrefix(state.ap),
								keys),
							O: label,
							ap: A2($billstclair$elm_localstorage$PortFunnel$LocalStorage$stripPrefix, state.ap, prefix)
						}));
			case 0:
				return _Utils_Tuple2(
					_Utils_update(
						state,
						{fp: true}),
					$billstclair$elm_localstorage$PortFunnel$LocalStorage$NoResponse);
			case 7:
				var label = message.a;
				var key = message.b;
				return _Utils_Tuple2(
					boxedState,
					$billstclair$elm_localstorage$PortFunnel$LocalStorage$GetResponse(
						{
							jX: A2($billstclair$elm_localstorage$PortFunnel$LocalStorage$stripPrefix, state.ap, key),
							O: label,
							hG: A2($elm$core$Dict$get, key, state.ck)
						}));
			case 8:
				var key = message.a;
				var value = message.b;
				return _Utils_Tuple2(
					_Utils_update(
						state,
						{
							ck: function () {
								if (value.$ === 1) {
									return A2($elm$core$Dict$remove, key, state.ck);
								} else {
									var v = value.a;
									return A3($elm$core$Dict$insert, key, v, state.ck);
								}
							}()
						}),
					$billstclair$elm_localstorage$PortFunnel$LocalStorage$NoResponse);
			case 9:
				var label = message.a;
				var prefix = message.b;
				return _Utils_Tuple2(
					boxedState,
					$billstclair$elm_localstorage$PortFunnel$LocalStorage$ListKeysResponse(
						{
							jY: A3(
								$elm$core$Dict$foldr,
								F3(
									function (k, _v2, res) {
										return A2($elm$core$String$startsWith, prefix, k) ? A2(
											$elm$core$List$cons,
											A2($billstclair$elm_localstorage$PortFunnel$LocalStorage$stripPrefix, state.ap, k),
											res) : res;
									}),
								_List_Nil,
								state.ck),
							O: label,
							ap: A2($billstclair$elm_localstorage$PortFunnel$LocalStorage$stripPrefix, state.ap, prefix)
						}));
			case 10:
				var prefix = message.a;
				return _Utils_Tuple2(
					_Utils_update(
						state,
						{
							ck: A2(
								$elm_community$dict_extra$Dict$Extra$removeWhen,
								F2(
									function (k, _v3) {
										return A2($elm$core$String$startsWith, prefix, k);
									}),
								state.ck)
						}),
					$billstclair$elm_localstorage$PortFunnel$LocalStorage$NoResponse);
			default:
				return _Utils_Tuple2(state, $billstclair$elm_localstorage$PortFunnel$LocalStorage$NoResponse);
		}
	});
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleDesc = A4($billstclair$elm_port_funnel$PortFunnel$makeModuleDesc, $billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName, $billstclair$elm_localstorage$PortFunnel$LocalStorage$encode, $billstclair$elm_localstorage$PortFunnel$LocalStorage$decode, $billstclair$elm_localstorage$PortFunnel$LocalStorage$process);
var $billstclair$elm_port_funnel$PortFunnel$encodeGenericMessage = function (message) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'module',
				$elm$json$Json$Encode$string(message.ki)),
				_Utils_Tuple2(
				'tag',
				$elm$json$Json$Encode$string(message.lX)),
				_Utils_Tuple2('args', message.h4)
			]));
};
var $billstclair$elm_port_funnel$PortFunnel$messageToValue = F2(
	function (_v0, message) {
		var moduleDesc = _v0;
		return $billstclair$elm_port_funnel$PortFunnel$encodeGenericMessage(
			moduleDesc.fb(message));
	});
var $billstclair$elm_port_funnel$PortFunnel$sendMessage = F3(
	function (moduleDesc, cmdPort, message) {
		return cmdPort(
			A2($billstclair$elm_port_funnel$PortFunnel$messageToValue, moduleDesc, message));
	});
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$send = F3(
	function (wrapper, message, _v0) {
		var state = _v0;
		var prefix = state.ap;
		var mess = function () {
			switch (message.$) {
				case 1:
					var label = message.a;
					var key = message.b;
					return A2(
						$billstclair$elm_localstorage$PortFunnel$InternalTypes$Get,
						label,
						A2($billstclair$elm_localstorage$PortFunnel$LocalStorage$addPrefix, prefix, key));
				case 3:
					var key = message.a;
					var value = message.b;
					return A2(
						$billstclair$elm_localstorage$PortFunnel$InternalTypes$Put,
						A2($billstclair$elm_localstorage$PortFunnel$LocalStorage$addPrefix, prefix, key),
						value);
				case 4:
					var label = message.a;
					var pref = message.b;
					return A2(
						$billstclair$elm_localstorage$PortFunnel$InternalTypes$ListKeys,
						label,
						A2($billstclair$elm_localstorage$PortFunnel$LocalStorage$addPrefix, prefix, pref));
				case 6:
					var pref = message.a;
					return $billstclair$elm_localstorage$PortFunnel$InternalTypes$Clear(
						A2($billstclair$elm_localstorage$PortFunnel$LocalStorage$addPrefix, prefix, pref));
				default:
					return message;
			}
		}();
		return A3($billstclair$elm_port_funnel$PortFunnel$sendMessage, $billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleDesc, wrapper, mess);
	});
var $author$project$Document$DocumentViews$StyleSheets$Autumn = 2;
var $author$project$Document$DocumentViews$StyleSheets$Summer = 1;
var $author$project$Document$DocumentViews$StyleSheets$Winter = 3;
var $elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return $elm$core$Basics$floor(numerator / denominator);
	});
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0;
	return millis;
};
var $elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.bo, posixMinutes) < 0) {
					return posixMinutes + era.kD;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var $elm$time$Time$toAdjustedMinutes = F2(
	function (_v0, time) {
		var defaultOffset = _v0.a;
		var eras = _v0.b;
		return A3(
			$elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var $elm$core$Basics$ge = _Utils_ge;
var $elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2($elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		e5: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		ft: month,
		fX: year + ((month <= 2) ? 1 : 0)
	};
};
var $elm$time$Time$toDay = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).e5;
	});
var $elm$time$Time$Apr = 3;
var $elm$time$Time$Aug = 7;
var $elm$time$Time$Dec = 11;
var $elm$time$Time$Feb = 1;
var $elm$time$Time$Jan = 0;
var $elm$time$Time$Jul = 6;
var $elm$time$Time$Jun = 5;
var $elm$time$Time$Mar = 2;
var $elm$time$Time$May = 4;
var $elm$time$Time$Nov = 10;
var $elm$time$Time$Oct = 9;
var $elm$time$Time$Sep = 8;
var $elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _v0 = $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).ft;
		switch (_v0) {
			case 1:
				return 0;
			case 2:
				return 1;
			case 3:
				return 2;
			case 4:
				return 3;
			case 5:
				return 4;
			case 6:
				return 5;
			case 7:
				return 6;
			case 8:
				return 7;
			case 9:
				return 8;
			case 10:
				return 9;
			case 11:
				return 10;
			default:
				return 11;
		}
	});
var $author$project$Document$DocumentViews$StyleSheets$timeToSeason = F2(
	function (zone, time) {
		var month = A2($elm$time$Time$toMonth, zone, time);
		var day = A2($elm$time$Time$toDay, zone, time);
		switch (month) {
			case 0:
				return 3;
			case 1:
				return 3;
			case 2:
				return (day < 21) ? 3 : 0;
			case 3:
				return 0;
			case 4:
				return 0;
			case 5:
				return (day < 21) ? 0 : 1;
			case 6:
				return 1;
			case 7:
				return 1;
			case 8:
				return (day < 21) ? 1 : 2;
			case 9:
				return 2;
			case 10:
				return 2;
			default:
				return (day < 21) ? 2 : 3;
		}
	});
var $elm$time$Time$utc = A2($elm$time$Time$Zone, 0, _List_Nil);
var $author$project$PageEditor$PageEditor$reset = F2(
	function (mbDoc, externalMsg) {
		var handlers = {
			ip: externalMsg($author$project$PageEditor$PageEditor$EditCell),
			iE: A2($elm$core$Basics$composeL, externalMsg, $author$project$PageEditor$PageEditor$SelectDoc),
			iF: function (_v3) {
				return externalMsg($author$project$PageEditor$PageEditor$NoOp);
			},
			kr: function (_v4) {
				return externalMsg($author$project$PageEditor$PageEditor$Rewind);
			}
		};
		var funnelState = {
			bp: $billstclair$elm_localstorage$PortFunnel$LocalStorage$initialState('Editor')
		};
		var doc_ = A2(
			$author$project$PageEditor$Internals$DocumentEditorHelpers$fixUids,
			0,
			A2($elm$core$Maybe$withDefault, $author$project$PageEditor$Internals$DocumentEditorHelpers$emptyDoc, mbDoc));
		var config = {
			e1: false,
			iP: $elm$time$Time$millisToPosix(0),
			iS: $elm$core$Dict$empty,
			an: true,
			jg: $elm$core$Dict$empty,
			jl: $elm$core$Dict$empty,
			jx: 1080,
			kb: 75,
			gT: $elm$core$Dict$empty,
			kK: $elm$core$Basics$always(
				externalMsg($author$project$PageEditor$PageEditor$NoOp)),
			kL: $elm$core$Basics$always(
				externalMsg($author$project$PageEditor$PageEditor$NoOp)),
			kM: $elm$core$Set$empty,
			g1: $elm$core$Set$empty,
			dM: $elm$core$Dict$empty,
			eH: 1,
			fB: $elm$core$Maybe$Nothing,
			lj: 0,
			mt: 1920,
			mw: $elm$core$Maybe$Just(handlers),
			fY: $elm$time$Time$utc
		};
		var _v0 = A3(
			$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$init,
			_List_Nil,
			$elm$core$Maybe$Nothing,
			A2($elm$core$Basics$composeL, externalMsg, $author$project$PageEditor$PageEditor$TextBlockPluginMsg));
		var newTextBlockPlugin = _v0.a;
		var textBlockPluginCmds = _v0.b;
		var _v1 = A2(
			$author$project$PageEditor$EditorPlugins$ImagePlugin$init,
			$elm$core$Maybe$Nothing,
			A2($elm$core$Basics$composeL, externalMsg, $author$project$PageEditor$PageEditor$ImagePluginMsg));
		var newImagePlugin = _v1.a;
		var imagePluginCmds = _v1.b;
		var _v2 = A2(
			$author$project$PageEditor$EditorPlugins$GalleryPlugin$init,
			$elm$core$Maybe$Nothing,
			A2($elm$core$Basics$composeL, externalMsg, $author$project$PageEditor$PageEditor$GalleryPluginMsg));
		var newGalleryPlugin = _v2.a;
		var galleryPluginCmds = _v2.b;
		return _Utils_Tuple2(
			{
				bS: A2(
					$author$project$PageEditor$EditorPlugins$BlockLinksPlugin$init,
					$elm$core$Maybe$Nothing,
					A2($elm$core$Basics$composeL, externalMsg, $author$project$PageEditor$PageEditor$BlockLinksPluginMsg)),
				cu: $elm$core$Maybe$Nothing,
				f: config,
				ed: false,
				b: $elm$core$Maybe$Nothing,
				i2: $author$project$PageEditor$Internals$DocumentZipper$initZip(doc_),
				bY: externalMsg,
				bZ: A2(
					$author$project$PageEditor$EditorPlugins$FichesPlugin$init,
					_List_Nil,
					A2($elm$core$Basics$composeL, externalMsg, $author$project$PageEditor$PageEditor$FichesPluginMsg)),
				bC: funnelState,
				bD: newGalleryPlugin,
				b2: newImagePlugin,
				fq: '',
				ep: '',
				j7: _List_Nil,
				bd: $elm$core$Maybe$Nothing,
				cJ: false,
				eu: '',
				gU: $author$project$PageEditor$Internals$DocumentEditorHelpers$maxUid(doc_) + 1,
				cf: A2(
					$author$project$PageEditor$EditorPlugins$PictureLinksPlugin$init,
					_List_Nil,
					A2($elm$core$Basics$composeL, externalMsg, $author$project$PageEditor$PageEditor$PictureLinksPluginMsg)),
				aL: false,
				cn: A2(
					$author$project$PageEditor$EditorPlugins$TablePlugin$init,
					$elm$core$Maybe$Nothing,
					A2($elm$core$Basics$composeL, externalMsg, $author$project$PageEditor$PageEditor$TablePluginMsg)),
				co: newTextBlockPlugin,
				bN: _List_Nil,
				cq: A2(
					$author$project$PageEditor$EditorPlugins$VideoPlugin$init,
					$elm$core$Maybe$Nothing,
					A2($elm$core$Basics$composeL, externalMsg, $author$project$PageEditor$PageEditor$VideoPluginMsg))
			},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A2(
						$elm$core$Platform$Cmd$map,
						externalMsg,
						A2($elm$core$Task$perform, $author$project$PageEditor$PageEditor$CurrentViewport, $elm$browser$Browser$Dom$getViewport)),
						A2(
						$elm$core$Platform$Cmd$map,
						externalMsg,
						A2(
							$elm$core$Task$attempt,
							$author$project$PageEditor$PageEditor$MainInterfaceViewport,
							$elm$browser$Browser$Dom$getViewportOf('mainInterface'))),
						textBlockPluginCmds,
						imagePluginCmds,
						galleryPluginCmds,
						A3(
						$billstclair$elm_localstorage$PortFunnel$LocalStorage$send,
						$author$project$PageEditor$PageEditor$cmdPort,
						$billstclair$elm_localstorage$PortFunnel$LocalStorage$listKeys(''),
						funnelState.bp),
						A2(
						$elm$core$Platform$Cmd$map,
						externalMsg,
						A2(
							$elm$core$Task$perform,
							$author$project$PageEditor$PageEditor$SetSeason,
							A2(
								$elm$core$Task$andThen,
								function (t) {
									return A2(
										$elm$core$Task$andThen,
										function (h) {
											return $elm$core$Task$succeed(
												A2($author$project$Document$DocumentViews$StyleSheets$timeToSeason, h, t));
										},
										$elm$time$Time$here);
								},
								$elm$time$Time$now)))
					])));
	});
var $author$project$PageEditor$PageEditor$init = $author$project$PageEditor$PageEditor$reset;
var $author$project$PageTreeEditor$PageTreeEditor$init = function (externalMsg) {
	return {cv: $elm$core$Dict$empty, cw: 0, iP: $elm$core$Maybe$Nothing, el: '', bY: externalMsg, ao: $elm$core$Maybe$Nothing, c6: $elm$core$Maybe$Nothing, X: $elm$core$Set$empty, c7: 0, aC: $elm$core$Maybe$Nothing, aD: $elm$core$Dict$empty, aE: $elm$core$Set$empty, P: _List_Nil, ca: '', i: $elm$core$Maybe$Nothing, dc: 0, cc: 0, bi: $elm$core$Maybe$Nothing, bK: $elm$core$Maybe$Nothing, dg: $elm$core$Maybe$Nothing, ll: $elm$core$Maybe$Nothing, hm: $elm$core$Maybe$Nothing, aK: $elm$core$Maybe$Nothing, bL: $elm$core$Maybe$Nothing};
};
var $author$project$Publications$Publications$MurolInfo = 0;
var $author$project$Publications$Publications$Select = function (a) {
	return {$: 0, a: a};
};
var $author$project$Publications$Publications$init = function (externalMsg) {
	return {
		cY: $elm$core$Maybe$Nothing,
		ij: $elm$core$Dict$empty,
		bw: '',
		aa: $elm$core$Maybe$Nothing,
		e6: '',
		iW: $elm$core$Dict$empty,
		bW: $author$project$Publications$Publications$Select(0),
		bY: externalMsg,
		ay: $elm$core$Maybe$Nothing,
		gB: $elm$core$Dict$empty,
		aB: $elm$core$Maybe$Nothing,
		b4: $author$project$Internals$ToolHelpers$ToolLoadingWaiting,
		aS: $elm$core$Dict$empty,
		aT: $elm$core$Dict$empty,
		aU: $elm$core$Dict$empty,
		Y: 0,
		H: false,
		kl: $elm$core$Dict$empty,
		mi: $elm$core$Dict$empty,
		j: $elm$core$Maybe$Nothing
	};
};
var $author$project$MurolAdmin$init = function (flags) {
	var publications = $author$project$Publications$Publications$init($author$project$MurolAdmin$PublicationsMsg);
	var newPageTreeEditor = $author$project$PageTreeEditor$PageTreeEditor$init($author$project$MurolAdmin$PageTreeEditorMsg);
	var newFileExplorer = A2($author$project$FileExplorer$FileExplorer$init, 0, $author$project$MurolAdmin$FileExplorerMsg);
	var _v0 = A2($author$project$PageEditor$PageEditor$init, $elm$core$Maybe$Nothing, $author$project$MurolAdmin$PageEditorMsg);
	var newPageEditor = _v0.a;
	var pageEditorCmds = _v0.b;
	var _v1 = $author$project$NewsEditor$NewsEditor$init($author$project$MurolAdmin$NewsEditorMsg);
	var newNewsEditor = _v1.a;
	var newEditorCmds = _v1.b;
	var _v2 = $author$project$Help$Help$init($author$project$MurolAdmin$HelpMsg);
	var help = _v2.a;
	var helpCmd = _v2.b;
	var _v3 = $author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$init($author$project$MurolAdmin$GeneralDirectoryMsg);
	var newGeneralDirectory = _v3.a;
	var generalDirectoryCmds = _v3.b;
	var _v4 = $author$project$Auth$AuthPlugin$init($author$project$MurolAdmin$AuthMsg);
	var newAuthTool = _v4.a;
	var authToolCmds = _v4.b;
	return _Utils_Tuple2(
		{
			p: newAuthTool,
			D: 2,
			fd: newFileExplorer,
			a6: newGeneralDirectory,
			b1: help,
			b4: 0,
			cI: $elm$core$Dict$empty,
			c9: false,
			aH: newNewsEditor,
			cP: newPageEditor,
			J: newPageTreeEditor,
			fB: publications,
			ll: $elm$random$Random$initialSeed(flags.iP),
			eQ: $elm$core$Dict$empty,
			aM: 1080,
			d0: 1920,
			fY: $elm$time$Time$utc
		},
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					pageEditorCmds,
					generalDirectoryCmds,
					authToolCmds,
					helpCmd,
					A2($elm$core$Task$perform, $author$project$MurolAdmin$CurrentViewport, $elm$browser$Browser$Dom$getViewport),
					A2($elm$core$Task$perform, $author$project$MurolAdmin$SetZone, $elm$time$Time$here)
				])));
};
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $author$project$MurolAdmin$NewsEditorTool = 5;
var $author$project$MurolAdmin$PageEditorTool = 0;
var $author$project$MurolAdmin$WinResize = F2(
	function (a, b) {
		return {$: 14, a: a, b: b};
	});
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
var $elm$browser$Browser$Events$Window = 1;
var $elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {g6: pids, hv: subs};
	});
var $elm$browser$Browser$Events$init = $elm$core$Task$succeed(
	A2($elm$browser$Browser$Events$State, _List_Nil, $elm$core$Dict$empty));
var $elm$browser$Browser$Events$nodeToKey = function (node) {
	if (!node) {
		return 'd_';
	} else {
		return 'w_';
	}
};
var $elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			$elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {gi: event, jX: key};
	});
var $elm$browser$Browser$Events$spawn = F3(
	function (router, key, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var actualNode = function () {
			if (!node) {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			$elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						$elm$core$Platform$sendToSelf,
						router,
						A2($elm$browser$Browser$Events$Event, key, event));
				}));
	});
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _v6) {
				var deads = _v6.a;
				var lives = _v6.b;
				var news = _v6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						$elm$core$List$cons,
						A3($elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_v4, pid, _v5) {
				var deads = _v5.a;
				var lives = _v5.b;
				var news = _v5.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _v2, _v3) {
				var deads = _v3.a;
				var lives = _v3.b;
				var news = _v3.c;
				return _Utils_Tuple3(
					deads,
					A3($elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2($elm$core$List$map, $elm$browser$Browser$Events$addKey, subs);
		var _v0 = A6(
			$elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.g6,
			$elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, $elm$core$Dict$empty, _List_Nil));
		var deadPids = _v0.a;
		var livePids = _v0.b;
		var makeNewPids = _v0.c;
		return A2(
			$elm$core$Task$andThen,
			function (pids) {
				return $elm$core$Task$succeed(
					A2(
						$elm$browser$Browser$Events$State,
						newSubs,
						A2(
							$elm$core$Dict$union,
							livePids,
							$elm$core$Dict$fromList(pids))));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$sequence(makeNewPids);
				},
				$elm$core$Task$sequence(
					A2($elm$core$List$map, $elm$core$Process$kill, deadPids))));
	});
var $elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _v0, state) {
		var key = _v0.jX;
		var event = _v0.gi;
		var toMessage = function (_v2) {
			var subKey = _v2.a;
			var _v3 = _v2.b;
			var node = _v3.a;
			var name = _v3.b;
			var decoder = _v3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : $elm$core$Maybe$Nothing;
		};
		var messages = A2($elm$core$List$filterMap, toMessage, state.hv);
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Platform$sendToApp(router),
					messages)));
	});
var $elm$browser$Browser$Events$subMap = F2(
	function (func, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var decoder = _v0.c;
		return A3(
			$elm$browser$Browser$Events$MySub,
			node,
			name,
			A2($elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager($elm$browser$Browser$Events$init, $elm$browser$Browser$Events$onEffects, $elm$browser$Browser$Events$onSelfMsg, 0, $elm$browser$Browser$Events$subMap);
var $elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var $elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return $elm$browser$Browser$Events$subscription(
			A3($elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var $elm$browser$Browser$Events$onResize = function (func) {
	return A3(
		$elm$browser$Browser$Events$on,
		1,
		'resize',
		A2(
			$elm$json$Json$Decode$field,
			'target',
			A3(
				$elm$json$Json$Decode$map2,
				func,
				A2($elm$json$Json$Decode$field, 'innerWidth', $elm$json$Json$Decode$int),
				A2($elm$json$Json$Decode$field, 'innerHeight', $elm$json$Json$Decode$int))));
};
var $author$project$Auth$AuthPlugin$Ping = {$: 11};
var $elm$time$Time$Every = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$time$Time$State = F2(
	function (taggers, processes) {
		return {ha: processes, hx: taggers};
	});
var $elm$time$Time$init = $elm$core$Task$succeed(
	A2($elm$time$Time$State, $elm$core$Dict$empty, $elm$core$Dict$empty));
var $elm$time$Time$addMySub = F2(
	function (_v0, state) {
		var interval = _v0.a;
		var tagger = _v0.b;
		var _v1 = A2($elm$core$Dict$get, interval, state);
		if (_v1.$ === 1) {
			return A3(
				$elm$core$Dict$insert,
				interval,
				_List_fromArray(
					[tagger]),
				state);
		} else {
			var taggers = _v1.a;
			return A3(
				$elm$core$Dict$insert,
				interval,
				A2($elm$core$List$cons, tagger, taggers),
				state);
		}
	});
var $elm$time$Time$setInterval = _Time_setInterval;
var $elm$time$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		if (!intervals.b) {
			return $elm$core$Task$succeed(processes);
		} else {
			var interval = intervals.a;
			var rest = intervals.b;
			var spawnTimer = $elm$core$Process$spawn(
				A2(
					$elm$time$Time$setInterval,
					interval,
					A2($elm$core$Platform$sendToSelf, router, interval)));
			var spawnRest = function (id) {
				return A3(
					$elm$time$Time$spawnHelp,
					router,
					rest,
					A3($elm$core$Dict$insert, interval, id, processes));
			};
			return A2($elm$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var $elm$time$Time$onEffects = F3(
	function (router, subs, _v0) {
		var processes = _v0.ha;
		var rightStep = F3(
			function (_v6, id, _v7) {
				var spawns = _v7.a;
				var existing = _v7.b;
				var kills = _v7.c;
				return _Utils_Tuple3(
					spawns,
					existing,
					A2(
						$elm$core$Task$andThen,
						function (_v5) {
							return kills;
						},
						$elm$core$Process$kill(id)));
			});
		var newTaggers = A3($elm$core$List$foldl, $elm$time$Time$addMySub, $elm$core$Dict$empty, subs);
		var leftStep = F3(
			function (interval, taggers, _v4) {
				var spawns = _v4.a;
				var existing = _v4.b;
				var kills = _v4.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, interval, spawns),
					existing,
					kills);
			});
		var bothStep = F4(
			function (interval, taggers, id, _v3) {
				var spawns = _v3.a;
				var existing = _v3.b;
				var kills = _v3.c;
				return _Utils_Tuple3(
					spawns,
					A3($elm$core$Dict$insert, interval, id, existing),
					kills);
			});
		var _v1 = A6(
			$elm$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			processes,
			_Utils_Tuple3(
				_List_Nil,
				$elm$core$Dict$empty,
				$elm$core$Task$succeed(0)));
		var spawnList = _v1.a;
		var existingDict = _v1.b;
		var killTask = _v1.c;
		return A2(
			$elm$core$Task$andThen,
			function (newProcesses) {
				return $elm$core$Task$succeed(
					A2($elm$time$Time$State, newTaggers, newProcesses));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v2) {
					return A3($elm$time$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var $elm$time$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _v0 = A2($elm$core$Dict$get, interval, state.hx);
		if (_v0.$ === 1) {
			return $elm$core$Task$succeed(state);
		} else {
			var taggers = _v0.a;
			var tellTaggers = function (time) {
				return $elm$core$Task$sequence(
					A2(
						$elm$core$List$map,
						function (tagger) {
							return A2(
								$elm$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						taggers));
			};
			return A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$succeed(state);
				},
				A2($elm$core$Task$andThen, tellTaggers, $elm$time$Time$now));
		}
	});
var $elm$time$Time$subMap = F2(
	function (f, _v0) {
		var interval = _v0.a;
		var tagger = _v0.b;
		return A2(
			$elm$time$Time$Every,
			interval,
			A2($elm$core$Basics$composeL, f, tagger));
	});
_Platform_effectManagers['Time'] = _Platform_createManager($elm$time$Time$init, $elm$time$Time$onEffects, $elm$time$Time$onSelfMsg, 0, $elm$time$Time$subMap);
var $elm$time$Time$subscription = _Platform_leaf('Time');
var $elm$time$Time$every = F2(
	function (interval, tagger) {
		return $elm$time$Time$subscription(
			A2($elm$time$Time$Every, interval, tagger));
	});
var $elm$core$Platform$Sub$map = _Platform_map;
var $author$project$Auth$AuthPlugin$subscriptions = function (model) {
	return A2(
		$elm$core$Platform$Sub$map,
		model.bY,
		function () {
			var _v0 = model.A;
			if (_v0.$ === 1) {
				return A2(
					$elm$time$Time$every,
					30 * 1000,
					function (_v1) {
						return $author$project$Auth$AuthPlugin$Ping;
					});
			} else {
				return $elm$core$Platform$Sub$none;
			}
		}());
};
var $author$project$FileExplorer$FileExplorer$GotProgress = F2(
	function (a, b) {
		return {$: 27, a: a, b: b};
	});
var $author$project$FileExplorer$FileExplorer$ImageProcessed = function (a) {
	return {$: 22, a: a};
};
var $author$project$FileExplorer$FileExplorer$fileExplorerProcessedImages = _Platform_incomingPort('fileExplorerProcessedImages', $elm$json$Json$Decode$value);
var $elm$http$Http$track = F2(
	function (tracker, toMsg) {
		return $elm$http$Http$subscription(
			A2($elm$http$Http$MySub, tracker, toMsg));
	});
var $author$project$FileExplorer$FileExplorer$subscriptions = function (model) {
	return A2(
		$elm$core$Platform$Sub$map,
		model.bY,
		$elm$core$Platform$Sub$batch(
			_Utils_ap(
				_List_fromArray(
					[
						$author$project$FileExplorer$FileExplorer$fileExplorerProcessedImages($author$project$FileExplorer$FileExplorer$ImageProcessed)
					]),
				A3(
					$elm$core$Dict$foldr,
					F3(
						function (fn, _v0, acc) {
							return A2(
								$elm$core$List$cons,
								A2(
									$elm$http$Http$track,
									fn,
									$author$project$FileExplorer$FileExplorer$GotProgress(fn)),
								acc);
						}),
					_List_Nil,
					model.j))));
};
var $author$project$Help$Help$Scroll = {$: 2};
var $elm$browser$Browser$AnimationManager$Time = function (a) {
	return {$: 0, a: a};
};
var $elm$browser$Browser$AnimationManager$State = F3(
	function (subs, request, oldTime) {
		return {fx: oldTime, hg: request, hv: subs};
	});
var $elm$browser$Browser$AnimationManager$init = $elm$core$Task$succeed(
	A3($elm$browser$Browser$AnimationManager$State, _List_Nil, $elm$core$Maybe$Nothing, 0));
var $elm$browser$Browser$AnimationManager$now = _Browser_now(0);
var $elm$browser$Browser$AnimationManager$rAF = _Browser_rAF(0);
var $elm$browser$Browser$AnimationManager$onEffects = F3(
	function (router, subs, _v0) {
		var request = _v0.hg;
		var oldTime = _v0.fx;
		var _v1 = _Utils_Tuple2(request, subs);
		if (_v1.a.$ === 1) {
			if (!_v1.b.b) {
				var _v2 = _v1.a;
				return $elm$browser$Browser$AnimationManager$init;
			} else {
				var _v4 = _v1.a;
				return A2(
					$elm$core$Task$andThen,
					function (pid) {
						return A2(
							$elm$core$Task$andThen,
							function (time) {
								return $elm$core$Task$succeed(
									A3(
										$elm$browser$Browser$AnimationManager$State,
										subs,
										$elm$core$Maybe$Just(pid),
										time));
							},
							$elm$browser$Browser$AnimationManager$now);
					},
					$elm$core$Process$spawn(
						A2(
							$elm$core$Task$andThen,
							$elm$core$Platform$sendToSelf(router),
							$elm$browser$Browser$AnimationManager$rAF)));
			}
		} else {
			if (!_v1.b.b) {
				var pid = _v1.a.a;
				return A2(
					$elm$core$Task$andThen,
					function (_v3) {
						return $elm$browser$Browser$AnimationManager$init;
					},
					$elm$core$Process$kill(pid));
			} else {
				return $elm$core$Task$succeed(
					A3($elm$browser$Browser$AnimationManager$State, subs, request, oldTime));
			}
		}
	});
var $elm$browser$Browser$AnimationManager$onSelfMsg = F3(
	function (router, newTime, _v0) {
		var subs = _v0.hv;
		var oldTime = _v0.fx;
		var send = function (sub) {
			if (!sub.$) {
				var tagger = sub.a;
				return A2(
					$elm$core$Platform$sendToApp,
					router,
					tagger(
						$elm$time$Time$millisToPosix(newTime)));
			} else {
				var tagger = sub.a;
				return A2(
					$elm$core$Platform$sendToApp,
					router,
					tagger(newTime - oldTime));
			}
		};
		return A2(
			$elm$core$Task$andThen,
			function (pid) {
				return A2(
					$elm$core$Task$andThen,
					function (_v1) {
						return $elm$core$Task$succeed(
							A3(
								$elm$browser$Browser$AnimationManager$State,
								subs,
								$elm$core$Maybe$Just(pid),
								newTime));
					},
					$elm$core$Task$sequence(
						A2($elm$core$List$map, send, subs)));
			},
			$elm$core$Process$spawn(
				A2(
					$elm$core$Task$andThen,
					$elm$core$Platform$sendToSelf(router),
					$elm$browser$Browser$AnimationManager$rAF)));
	});
var $elm$browser$Browser$AnimationManager$Delta = function (a) {
	return {$: 1, a: a};
};
var $elm$browser$Browser$AnimationManager$subMap = F2(
	function (func, sub) {
		if (!sub.$) {
			var tagger = sub.a;
			return $elm$browser$Browser$AnimationManager$Time(
				A2($elm$core$Basics$composeL, func, tagger));
		} else {
			var tagger = sub.a;
			return $elm$browser$Browser$AnimationManager$Delta(
				A2($elm$core$Basics$composeL, func, tagger));
		}
	});
_Platform_effectManagers['Browser.AnimationManager'] = _Platform_createManager($elm$browser$Browser$AnimationManager$init, $elm$browser$Browser$AnimationManager$onEffects, $elm$browser$Browser$AnimationManager$onSelfMsg, 0, $elm$browser$Browser$AnimationManager$subMap);
var $elm$browser$Browser$AnimationManager$subscription = _Platform_leaf('Browser.AnimationManager');
var $elm$browser$Browser$AnimationManager$onAnimationFrame = function (tagger) {
	return $elm$browser$Browser$AnimationManager$subscription(
		$elm$browser$Browser$AnimationManager$Time(tagger));
};
var $elm$browser$Browser$Events$onAnimationFrame = $elm$browser$Browser$AnimationManager$onAnimationFrame;
var $author$project$Help$Help$subscriptions = function (model) {
	return A2(
		$elm$core$Platform$Sub$map,
		model.bY,
		$elm$core$Platform$Sub$batch(
			_List_fromArray(
				[
					(model.dQ && _Utils_eq(model.dD, $elm$core$Set$empty)) ? $elm$browser$Browser$Events$onAnimationFrame(
					function (_v0) {
						return $author$project$Help$Help$Scroll;
					}) : $elm$core$Platform$Sub$none
				])));
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$Close = {$: 16};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$GotSelection = function (a) {
	return {$: 2, a: a};
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$LoadContentInTrix = {$: 3};
var $elm$browser$Browser$Events$Document = 0;
var $elm$browser$Browser$Events$onMouseDown = A2($elm$browser$Browser$Events$on, 0, 'mousedown');
var $elm$json$Json$Decode$fail = _Json_fail;
var $elm$json$Json$Decode$lazy = function (thunk) {
	return A2(
		$elm$json$Json$Decode$andThen,
		thunk,
		$elm$json$Json$Decode$succeed(0));
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$isOutsideTarget = function (targetId) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$json$Json$Decode$andThen,
				function (id) {
					return _Utils_eq(targetId, id) ? $elm$json$Json$Decode$succeed(false) : $elm$json$Json$Decode$fail('continue');
				},
				A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string)),
				$elm$json$Json$Decode$lazy(
				function (_v0) {
					return A2(
						$elm$json$Json$Decode$field,
						'parentNode',
						$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$isOutsideTarget(targetId));
				}),
				$elm$json$Json$Decode$succeed(true)
			]));
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$outsideTargetHandler = F2(
	function (targetId, handler) {
		return A2(
			$elm$json$Json$Decode$andThen,
			function (isOutside) {
				return isOutside ? $elm$json$Json$Decode$succeed(handler) : $elm$json$Json$Decode$fail('inside target');
			},
			A2(
				$elm$json$Json$Decode$field,
				'target',
				$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$isOutsideTarget(targetId)));
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$selection = _Platform_incomingPort('selection', $elm$json$Json$Decode$value);
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$trixReady = _Platform_incomingPort('trixReady', $elm$json$Json$Decode$value);
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				function () {
				var _v0 = model.n;
				_v0$4:
				while (true) {
					if (!_v0.$) {
						switch (_v0.a) {
							case 0:
								var _v1 = _v0.a;
								return $elm$browser$Browser$Events$onMouseDown(
									A2($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$outsideTargetHandler, 'fontColorPicker', $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$Close));
							case 1:
								var _v2 = _v0.a;
								return $elm$browser$Browser$Events$onMouseDown(
									A2($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$outsideTargetHandler, 'backgroundColorPicker', $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$Close));
							case 2:
								var _v3 = _v0.a;
								return $elm$browser$Browser$Events$onMouseDown(
									A2($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$outsideTargetHandler, 'internalLinkPicker', $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$Close));
							case 4:
								var _v4 = _v0.a;
								return $elm$browser$Browser$Events$onMouseDown(
									A2($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$outsideTargetHandler, 'docPicker', $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$Close));
							default:
								break _v0$4;
						}
					} else {
						break _v0$4;
					}
				}
				return $elm$core$Platform$Sub$none;
			}(),
				$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$selection($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$GotSelection),
				$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$trixReady(
				$elm$core$Basics$always($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$LoadContentInTrix))
			]));
};
var $author$project$NewsEditor$NewsEditor$subscriptions = function (model) {
	return A2(
		$elm$core$Platform$Sub$map,
		model.bY,
		$elm$core$Platform$Sub$batch(
			_List_fromArray(
				[
					A2(
					$elm$core$Platform$Sub$map,
					$author$project$NewsEditor$NewsEditor$TextBlockPluginMsg,
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$subscriptions(model.co))
				])));
};
var $author$project$PageEditor$PageEditor$Process = function (a) {
	return {$: 51, a: a};
};
var $author$project$PageEditor$PageEditor$WinResize = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$PageEditor$PageEditor$subPort = _Platform_incomingPort('subPort', $elm$json$Json$Decode$value);
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$GotProgress = F2(
	function (a, b) {
		return {$: 13, a: a, b: b};
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$ImageProcessed = function (a) {
	return {$: 3, a: a};
};
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$processedImages = _Platform_incomingPort('processedImages', $elm$json$Json$Decode$value);
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$subscription = function (model) {
	return $elm$core$Platform$Sub$batch(
		_Utils_ap(
			_List_fromArray(
				[
					$author$project$PageEditor$EditorPlugins$GalleryPlugin$processedImages($author$project$PageEditor$EditorPlugins$GalleryPlugin$ImageProcessed)
				]),
			A3(
				$elm$core$Dict$foldr,
				F3(
					function (fn, _v0, acc) {
						return A2(
							$elm$core$List$cons,
							A2(
								$elm$http$Http$track,
								fn,
								$author$project$PageEditor$EditorPlugins$GalleryPlugin$GotProgress(fn)),
							acc);
					}),
				_List_Nil,
				model.j)));
};
var $author$project$PageEditor$PageEditor$subscriptions = function (model) {
	return A2(
		$elm$core$Platform$Sub$map,
		model.bY,
		$elm$core$Platform$Sub$batch(
			_List_fromArray(
				[
					$author$project$PageEditor$PageEditor$subPort($author$project$PageEditor$PageEditor$Process),
					$elm$browser$Browser$Events$onResize($author$project$PageEditor$PageEditor$WinResize),
					A2(
					$elm$core$Platform$Sub$map,
					$author$project$PageEditor$PageEditor$GalleryPluginMsg,
					$author$project$PageEditor$EditorPlugins$GalleryPlugin$subscription(model.bD)),
					A2(
					$elm$core$Platform$Sub$map,
					$author$project$PageEditor$PageEditor$TextBlockPluginMsg,
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$subscriptions(model.co))
				])));
};
var $author$project$Publications$Publications$BulletinCover = function (a) {
	return {$: 19, a: a};
};
var $author$project$Publications$Publications$GotProgress = function (a) {
	return {$: 20, a: a};
};
var $author$project$Publications$Publications$bulletinCover = _Platform_incomingPort('bulletinCover', $elm$json$Json$Decode$value);
var $author$project$Publications$Publications$subscriptions = function (model) {
	return A2(
		$elm$core$Platform$Sub$map,
		model.bY,
		$elm$core$Platform$Sub$batch(
			_List_fromArray(
				[
					$author$project$Publications$Publications$bulletinCover($author$project$Publications$Publications$BulletinCover),
					A2($elm$http$Http$track, 'publicationUpload', $author$project$Publications$Publications$GotProgress)
				])));
};
var $author$project$MurolAdmin$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				$author$project$FileExplorer$FileExplorer$subscriptions(model.fd),
				(!model.D) ? $author$project$PageEditor$PageEditor$subscriptions(model.cP) : $elm$core$Platform$Sub$none,
				$author$project$Publications$Publications$subscriptions(model.fB),
				(model.D === 5) ? $author$project$NewsEditor$NewsEditor$subscriptions(model.aH) : $elm$core$Platform$Sub$none,
				$author$project$Auth$AuthPlugin$subscriptions(model.p),
				$author$project$Help$Help$subscriptions(model.b1),
				$elm$browser$Browser$Events$onResize($author$project$MurolAdmin$WinResize)
			]));
};
var $author$project$MurolAdmin$AddLog = function (a) {
	return {$: 16, a: a};
};
var $author$project$MurolAdmin$HelpTool = 7;
var $author$project$MurolAdmin$Loading = 1;
var $author$project$MurolAdmin$Ready = 2;
var $author$project$MurolAdmin$ReloadFiles = {$: 3};
var $author$project$Internals$ToolHelpers$ToolQuit = {$: 0};
var $author$project$PageEditor$Internals$DocumentZipper$extractDoc = function (_v0) {
	var current = _v0.a3;
	var contexts = _v0.bu;
	return current;
};
var $author$project$PageEditor$Internals$DocumentZipper$zipUp = function (_v0) {
	var current = _v0.a3;
	var contexts = _v0.bu;
	if (!contexts.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var parent = contexts.a.eF;
		var left = contexts.a.bc;
		var right = contexts.a.bl;
		var cs = contexts.b;
		return $elm$core$Maybe$Just(
			{
				bu: cs,
				a3: A2(
					$author$project$Document$Document$Container,
					parent,
					_Utils_ap(
						left,
						_Utils_ap(
							_List_fromArray(
								[current]),
							right)))
			});
	}
};
var $author$project$PageEditor$Internals$DocumentZipper$rewind = function (docZipper) {
	rewind:
	while (true) {
		var _v0 = $author$project$PageEditor$Internals$DocumentZipper$zipUp(docZipper);
		if (_v0.$ === 1) {
			return docZipper;
		} else {
			var docZipper_ = _v0.a;
			var $temp$docZipper = docZipper_;
			docZipper = $temp$docZipper;
			continue rewind;
		}
	}
};
var $author$project$PageEditor$PageEditor$currentDocument = function (model) {
	return $author$project$PageEditor$Internals$DocumentZipper$extractDoc(
		$author$project$PageEditor$Internals$DocumentZipper$rewind(model.i2));
};
var $author$project$Help$Help$SetCurrentPage = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$Help$Help$externalUpdate = F2(
	function (id, model) {
		return A3(
			$author$project$Help$Help$update,
			0,
			A2($author$project$Help$Help$SetCurrentPage, true, id),
			model);
	});
var $author$project$Auth$AuthPlugin$getLogInfo = function (model) {
	return model.be;
};
var $Skinney$murmur3$Murmur3$HashData = F4(
	function (shift, seed, hash, charsProcessed) {
		return {c_: charsProcessed, c4: hash, ll: seed, dh: shift};
	});
var $Skinney$murmur3$Murmur3$c1 = 3432918353;
var $Skinney$murmur3$Murmur3$c2 = 461845907;
var $Skinney$murmur3$Murmur3$multiplyBy = F2(
	function (b, a) {
		return ((a & 65535) * b) + ((((a >>> 16) * b) & 65535) << 16);
	});
var $Skinney$murmur3$Murmur3$rotlBy = F2(
	function (b, a) {
		return (a << b) | (a >>> (32 - b));
	});
var $Skinney$murmur3$Murmur3$finalize = function (data) {
	var acc = (!(!data.c4)) ? (data.ll ^ A2(
		$Skinney$murmur3$Murmur3$multiplyBy,
		$Skinney$murmur3$Murmur3$c2,
		A2(
			$Skinney$murmur3$Murmur3$rotlBy,
			15,
			A2($Skinney$murmur3$Murmur3$multiplyBy, $Skinney$murmur3$Murmur3$c1, data.c4)))) : data.ll;
	var h0 = acc ^ data.c_;
	var h1 = A2($Skinney$murmur3$Murmur3$multiplyBy, 2246822507, h0 ^ (h0 >>> 16));
	var h2 = A2($Skinney$murmur3$Murmur3$multiplyBy, 3266489909, h1 ^ (h1 >>> 13));
	return (h2 ^ (h2 >>> 16)) >>> 0;
};
var $elm$core$String$foldl = _String_foldl;
var $Skinney$murmur3$Murmur3$mix = F2(
	function (h1, k1) {
		return A2(
			$Skinney$murmur3$Murmur3$multiplyBy,
			5,
			A2(
				$Skinney$murmur3$Murmur3$rotlBy,
				13,
				h1 ^ A2(
					$Skinney$murmur3$Murmur3$multiplyBy,
					$Skinney$murmur3$Murmur3$c2,
					A2(
						$Skinney$murmur3$Murmur3$rotlBy,
						15,
						A2($Skinney$murmur3$Murmur3$multiplyBy, $Skinney$murmur3$Murmur3$c1, k1))))) + 3864292196;
	});
var $Skinney$murmur3$Murmur3$hashFold = F2(
	function (c, data) {
		var res = data.c4 | ((255 & $elm$core$Char$toCode(c)) << data.dh);
		var _v0 = data.dh;
		if (_v0 === 24) {
			return {
				c_: data.c_ + 1,
				c4: 0,
				ll: A2($Skinney$murmur3$Murmur3$mix, data.ll, res),
				dh: 0
			};
		} else {
			return {c_: data.c_ + 1, c4: res, ll: data.ll, dh: data.dh + 8};
		}
	});
var $Skinney$murmur3$Murmur3$hashString = F2(
	function (seed, str) {
		return $Skinney$murmur3$Murmur3$finalize(
			A3(
				$elm$core$String$foldl,
				$Skinney$murmur3$Murmur3$hashFold,
				A4($Skinney$murmur3$Murmur3$HashData, 0, seed, 0, 0),
				str));
	});
var $author$project$Internals$CommonHelpers$hashLog = F2(
	function (seed, log) {
		var _v0 = A2(
			$elm$random$Random$step,
			A2($elm$random$Random$int, 0, 10000),
			seed);
		var hashSeed = _v0.a;
		var newSeed = _v0.b;
		var hash = A2(
			$Skinney$murmur3$Murmur3$hashString,
			hashSeed,
			_Utils_ap(
				log.dG,
				_Utils_ap(
					A2($elm$core$Maybe$withDefault, '', log.es),
					_Utils_ap(
						log.dx ? 'isError' : 'isNotError',
						_Utils_ap(
							log.gG ? 'isImportant' : 'isNotImportant',
							$elm$core$String$fromInt(
								$elm$time$Time$posixToMillis(log.dm)))))));
		return _Utils_Tuple2(hash, newSeed);
	});
var $author$project$FileExplorer$FileExplorer$DocsRoot = 1;
var $author$project$FileExplorer$FileExplorer$RefreshFilesys = F4(
	function (a, b, c, d) {
		return {$: 12, a: a, b: b, c: c, d: d};
	});
var $author$project$FileExplorer$FileExplorer$File = function (a) {
	return {$: 1, a: a};
};
var $author$project$FileExplorer$FileExplorer$Folder = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$FileExplorer$FileExplorer$ImageFile = function (a) {
	return {$: 0, a: a};
};
var $author$project$FileExplorer$FileExplorer$RegFile = {$: 1};
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $author$project$FileExplorer$FileExplorer$defMeta = {b$: $elm$core$Maybe$Nothing, cA: $author$project$FileExplorer$FileExplorer$RegFile, I: '', K: _List_Nil};
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {gB: index, kc: match, kC: number, lS: submatches};
	});
var $elm$regex$Regex$findAtMost = _Regex_findAtMost;
var $elm_community$string_extra$String$Extra$firstResultHelp = F2(
	function (_default, list) {
		firstResultHelp:
		while (true) {
			if (!list.b) {
				return _default;
			} else {
				if (!list.a.$) {
					var a = list.a.a;
					return a;
				} else {
					var _v1 = list.a;
					var rest = list.b;
					var $temp$default = _default,
						$temp$list = rest;
					_default = $temp$default;
					list = $temp$list;
					continue firstResultHelp;
				}
			}
		}
	});
var $elm_community$string_extra$String$Extra$firstResult = function (list) {
	return A2($elm_community$string_extra$String$Extra$firstResultHelp, '', list);
};
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{im: false, kk: false},
		string);
};
var $elm$regex$Regex$never = _Regex_never;
var $elm_community$string_extra$String$Extra$regexFromString = A2(
	$elm$core$Basics$composeR,
	$elm$regex$Regex$fromString,
	$elm$core$Maybe$withDefault($elm$regex$Regex$never));
var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $elm_community$string_extra$String$Extra$regexEscape = A2(
	$elm$regex$Regex$replace,
	$elm_community$string_extra$String$Extra$regexFromString('[-/\\^$*+?.()|[\\]{}]'),
	function (_v0) {
		var match = _v0.kc;
		return '\\' + match;
	});
var $elm_community$string_extra$String$Extra$leftOf = F2(
	function (pattern, string) {
		return A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				A2(
					$elm$core$Basics$composeR,
					function ($) {
						return $.lS;
					},
					$elm_community$string_extra$String$Extra$firstResult),
				A3(
					$elm$regex$Regex$findAtMost,
					1,
					$elm_community$string_extra$String$Extra$regexFromString(
						'^(.*?)' + $elm_community$string_extra$String$Extra$regexEscape(pattern)),
					string)));
	});
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom = $elm$json$Json$Decode$map2($elm$core$Basics$apR);
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder = F3(
	function (pathDecoder, valDecoder, fallback) {
		var nullOr = function (decoder) {
			return $elm$json$Json$Decode$oneOf(
				_List_fromArray(
					[
						decoder,
						$elm$json$Json$Decode$null(fallback)
					]));
		};
		var handleResult = function (input) {
			var _v0 = A2($elm$json$Json$Decode$decodeValue, pathDecoder, input);
			if (!_v0.$) {
				var rawValue = _v0.a;
				var _v1 = A2(
					$elm$json$Json$Decode$decodeValue,
					nullOr(valDecoder),
					rawValue);
				if (!_v1.$) {
					var finalResult = _v1.a;
					return $elm$json$Json$Decode$succeed(finalResult);
				} else {
					var finalErr = _v1.a;
					return $elm$json$Json$Decode$fail(
						$elm$json$Json$Decode$errorToString(finalErr));
				}
			} else {
				return $elm$json$Json$Decode$succeed(fallback);
			}
		};
		return A2($elm$json$Json$Decode$andThen, handleResult, $elm$json$Json$Decode$value);
	});
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional = F4(
	function (key, valDecoder, fallback, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optionalDecoder,
				A2($elm$json$Json$Decode$field, key, $elm$json$Json$Decode$value),
				valDecoder,
				fallback),
			decoder);
	});
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required = F3(
	function (key, valDecoder, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A2($elm$json$Json$Decode$field, key, valDecoder),
			decoder);
	});
var $author$project$FileExplorer$FileExplorer$decodeFile = A4(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$optional,
	'isFolder',
	$elm$json$Json$Decode$bool,
	false,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'fileSize',
		$elm$json$Json$Decode$nullable($elm$json$Json$Decode$int),
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'imgSize',
			$elm$json$Json$Decode$nullable(
				A3(
					$elm$json$Json$Decode$map2,
					F2(
						function (w, h) {
							return {jx: h, mt: w};
						}),
					A2($elm$json$Json$Decode$field, 'width', $elm$json$Json$Decode$int),
					A2($elm$json$Json$Decode$field, 'height', $elm$json$Json$Decode$int))),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'name',
				A2(
					$elm$json$Json$Decode$map,
					function (s) {
						return A2($elm$core$String$contains, '?', s) ? A2($elm_community$string_extra$String$Extra$leftOf, '?', s) : s;
					},
					$elm$json$Json$Decode$string),
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'path',
					$elm$json$Json$Decode$string,
					$elm$json$Json$Decode$succeed(
						F5(
							function (p, f, mbImgSize, mbFs, isFolder) {
								return isFolder ? A2(
									$author$project$FileExplorer$FileExplorer$Folder,
									_Utils_update(
										$author$project$FileExplorer$FileExplorer$defMeta,
										{
											I: f,
											K: A2($elm$core$String$split, '/', p)
										}),
									_List_Nil) : $author$project$FileExplorer$FileExplorer$File(
									{
										b$: mbFs,
										cA: function () {
											if (mbImgSize.$ === 1) {
												return $author$project$FileExplorer$FileExplorer$RegFile;
											} else {
												var size = mbImgSize.a;
												return $author$project$FileExplorer$FileExplorer$ImageFile(size);
											}
										}(),
										I: f,
										K: A2($elm$core$String$split, '/', p)
									});
							})))))));
var $author$project$FileExplorer$FileExplorer$decodeFiles = $elm$json$Json$Decode$list($author$project$FileExplorer$FileExplorer$decodeFile);
var $author$project$FileExplorer$FileExplorer$encodeRoot = function (root) {
	if (!root) {
		return _Utils_Tuple2(
			'root',
			$elm$json$Json$Encode$string('images'));
	} else {
		return _Utils_Tuple2(
			'root',
			$elm$json$Json$Encode$string('baseDocumentaire'));
	}
};
var $elm$http$Http$jsonBody = function (value) {
	return A2(
		_Http_pair,
		'application/json',
		A2($elm$json$Json$Encode$encode, 0, value));
};
var $elm$http$Http$post = function (r) {
	return $elm$http$Http$request(
		{eY: r.eY, du: r.du, gu: _List_Nil, gO: 'POST', hz: $elm$core$Maybe$Nothing, hC: $elm$core$Maybe$Nothing, d$: r.d$});
};
var $author$project$FileExplorer$FileExplorer$getFileList = F3(
	function (root, toRefresh, sessionId) {
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'toRefresh',
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, toRefresh)),
						$author$project$FileExplorer$FileExplorer$encodeRoot(root)
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					A3($author$project$FileExplorer$FileExplorer$RefreshFilesys, $elm$core$Maybe$Nothing, 'Chargement info fichier réussi', root),
					$author$project$FileExplorer$FileExplorer$decodeFiles),
				d$: 'getFiles.php'
			});
	});
var $author$project$FileExplorer$FileExplorer$load = F2(
	function (model, logInfo) {
		if (!logInfo.$) {
			var sessionId = logInfo.a.fF;
			return A2(
				$elm$core$Platform$Cmd$map,
				model.bY,
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							A3($author$project$FileExplorer$FileExplorer$getFileList, 0, _List_Nil, sessionId),
							A3($author$project$FileExplorer$FileExplorer$getFileList, 1, _List_Nil, sessionId)
						])));
		} else {
			return $elm$core$Platform$Cmd$none;
		}
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetInitialSeed = function (a) {
	return {$: 77, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$LoadGeneralDirectory = function (a) {
	return {$: 5, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$GenDirData = function (fiches) {
	return {jg: fiches};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Fiche = function (uuid) {
	return function (categories) {
		return function (natureActiv) {
			return function (refOt) {
				return function (label) {
					return function (rank) {
						return function (nomEntite) {
							return function (responsables) {
								return function (adresse) {
									return function (telNumber) {
										return function (fax) {
											return function (email) {
												return function (site) {
													return function (pjaun) {
														return function (visuel) {
															return function (description) {
																return function (linkedDocs) {
																	return function (ouverture) {
																		return function (lastEdit) {
																			return {hT: adresse, cZ: categories, ei: description, i4: email, je: fax, O: label, dy: lastEdit, j4: linkedDocs, ko: natureActiv, kB: nomEntite, kN: ouverture, dN: pjaun, k0: rank, k3: refOt, k9: responsables, lE: site, l$: telNumber, fS: uuid, mr: visuel};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Label = F3(
	function (nom, logo, lien) {
		return {j2: lien, j9: logo, kA: nom};
	});
var $author$project$GeneralDirectoryEditor$GeneralDirJson$decodeLogo = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'height',
	$elm$json$Json$Decode$int,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'width',
		$elm$json$Json$Decode$int,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'url',
			$elm$json$Json$Decode$string,
			$elm$json$Json$Decode$succeed(
				F3(
					function (u, w, h) {
						return {jx: h, d$: u, mt: w};
					})))));
var $author$project$GeneralDirectoryEditor$GeneralDirJson$decodeLabel = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'lien',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'logo',
		$author$project$GeneralDirectoryEditor$GeneralDirJson$decodeLogo,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'nom',
			$elm$json$Json$Decode$string,
			$elm$json$Json$Decode$succeed($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Label))));
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$LinkedDoc = F4(
	function (url, label, descr, expiryDate) {
		return {i_: descr, i9: expiryDate, O: label, d$: url};
	});
var $author$project$GeneralDirectoryEditor$GeneralDirJson$decodeLinkedDoc = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'expiryDate',
	$elm$json$Json$Decode$nullable(
		A2($elm$json$Json$Decode$map, $elm$time$Time$millisToPosix, $elm$json$Json$Decode$int)),
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'descr',
		$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'label',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'url',
				$elm$json$Json$Decode$string,
				$elm$json$Json$Decode$succeed($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$LinkedDoc)))));
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Saisonniere = 0;
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TteAnnee = 1;
var $author$project$GeneralDirectoryEditor$GeneralDirJson$decodeOuverture = A2(
	$elm$json$Json$Decode$andThen,
	function (str) {
		switch (str) {
			case 'Saisonniere':
				return $elm$json$Json$Decode$succeed(0);
			case 'TteAnnee':
				return $elm$json$Json$Decode$succeed(1);
			default:
				var somethingElse = str;
				return $elm$json$Json$Decode$fail('Unknown ouverture: ' + somethingElse);
		}
	},
	$elm$json$Json$Decode$string);
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Rank = F2(
	function (stars, epis) {
		return {gh: epis, lK: stars};
	});
var $author$project$GeneralDirectoryEditor$GeneralDirJson$decodeRank = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'epis',
	$elm$json$Json$Decode$nullable($elm$json$Json$Decode$int),
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'stars',
		$elm$json$Json$Decode$nullable($elm$json$Json$Decode$int),
		$elm$json$Json$Decode$succeed($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Rank)));
var $author$project$GeneralDirectoryEditor$GeneralDirJson$decodeRefOt = $elm$json$Json$Decode$nullable(
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'link',
		$elm$json$Json$Decode$string,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'ref',
			$elm$json$Json$Decode$int,
			$elm$json$Json$Decode$succeed($elm$core$Tuple$pair))));
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Responsable = F3(
	function (poste, nom, tel) {
		return {kA: nom, kY: poste, l_: tel};
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth = function (a) {
	return {$: 2, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelFixe = function (a) {
	return {$: 0, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelPortable = function (a) {
	return {$: 1, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirJson$decodeTel = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'TelFixe',
			$elm$json$Json$Decode$string,
			$elm$json$Json$Decode$succeed($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelFixe)),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'TelPortable',
			$elm$json$Json$Decode$string,
			$elm$json$Json$Decode$succeed($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelPortable)),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'TelBoth',
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'TelPortable',
				$elm$json$Json$Decode$string,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'TelFixe',
					$elm$json$Json$Decode$string,
					$elm$json$Json$Decode$succeed($elm$core$Tuple$pair))),
			$elm$json$Json$Decode$succeed($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth))
		]));
var $author$project$GeneralDirectoryEditor$GeneralDirJson$decodeResp = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'tel',
	$author$project$GeneralDirectoryEditor$GeneralDirJson$decodeTel,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'nom',
		$elm$json$Json$Decode$string,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'poste',
			$elm$json$Json$Decode$string,
			$elm$json$Json$Decode$succeed($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Responsable))));
var $author$project$GeneralDirectoryEditor$GeneralDirJson$decodeSite = $elm$json$Json$Decode$nullable(
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'url',
		$elm$json$Json$Decode$string,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'label',
			$elm$json$Json$Decode$string,
			$elm$json$Json$Decode$succeed($elm$core$Tuple$pair))));
var $elm_community$json_extra$Json$Decode$Extra$fromResult = function (result) {
	if (!result.$) {
		var successValue = result.a;
		return $elm$json$Json$Decode$succeed(successValue);
	} else {
		var errorMessage = result.a;
		return $elm$json$Json$Decode$fail(errorMessage);
	}
};
var $TSFoster$elm_uuid$UUID$WrongFormat = 0;
var $TSFoster$elm_uuid$UUID$WrongLength = 1;
var $elm$core$String$endsWith = _String_endsWith;
var $TSFoster$elm_uuid$UUID$IsNil = 3;
var $TSFoster$elm_uuid$UUID$NoVersion = 4;
var $TSFoster$elm_uuid$UUID$UnsupportedVariant = 2;
var $TSFoster$elm_uuid$UUID$isVariant1 = function (_v0) {
	var c = _v0.c;
	return (c >>> 30) === 2;
};
var $TSFoster$elm_uuid$UUID$version = function (_v0) {
	var b = _v0.b;
	return 15 & (b >>> 12);
};
var $TSFoster$elm_uuid$UUID$fromInt32s = F4(
	function (a, b, c, d) {
		var wouldBeUUID = A4($TSFoster$elm_uuid$UUID$UUID, a, b, c, d);
		return ((!a) && ((!b) && ((!c) && (!d)))) ? $elm$core$Result$Err(3) : (($TSFoster$elm_uuid$UUID$version(wouldBeUUID) > 5) ? $elm$core$Result$Err(4) : ((!$TSFoster$elm_uuid$UUID$isVariant1(wouldBeUUID)) ? $elm$core$Result$Err(2) : $elm$core$Result$Ok(wouldBeUUID)));
	});
var $TSFoster$elm_uuid$UUID$nibbleValuesToU32 = F8(
	function (a, b, c, d, e, f, g, h) {
		return $TSFoster$elm_uuid$UUID$forceUnsigned((a << 28) | ((b << 24) | ((c << 20) | ((d << 16) | ((e << 12) | ((f << 8) | ((g << 4) | h)))))));
	});
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $elm$core$String$toLower = _String_toLower;
var $TSFoster$elm_uuid$UUID$toNibbleValue = function (_char) {
	switch (_char) {
		case '0':
			return $elm$core$Maybe$Just(0);
		case '1':
			return $elm$core$Maybe$Just(1);
		case '2':
			return $elm$core$Maybe$Just(2);
		case '3':
			return $elm$core$Maybe$Just(3);
		case '4':
			return $elm$core$Maybe$Just(4);
		case '5':
			return $elm$core$Maybe$Just(5);
		case '6':
			return $elm$core$Maybe$Just(6);
		case '7':
			return $elm$core$Maybe$Just(7);
		case '8':
			return $elm$core$Maybe$Just(8);
		case '9':
			return $elm$core$Maybe$Just(9);
		case 'a':
			return $elm$core$Maybe$Just(10);
		case 'b':
			return $elm$core$Maybe$Just(11);
		case 'c':
			return $elm$core$Maybe$Just(12);
		case 'd':
			return $elm$core$Maybe$Just(13);
		case 'e':
			return $elm$core$Maybe$Just(14);
		case 'f':
			return $elm$core$Maybe$Just(15);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $TSFoster$elm_uuid$UUID$fromString = function (string) {
	var normalized = function (str) {
		return A2($elm$core$String$startsWith, 'urn:uuid:', str) ? A2($elm$core$String$dropLeft, 9, str) : ((A2($elm$core$String$startsWith, '{', str) && A2($elm$core$String$endsWith, '}', str)) ? A3($elm$core$String$slice, 1, -1, str) : str);
	}(
		$elm$core$String$toLower(
			A3(
				$elm$core$String$replace,
				'-',
				'',
				A3(
					$elm$core$String$replace,
					' ',
					'',
					A3(
						$elm$core$String$replace,
						'\t',
						'',
						A3($elm$core$String$replace, '\n', '', string))))));
	if ($elm$core$String$length(normalized) !== 32) {
		return $elm$core$Result$Err(1);
	} else {
		var _v0 = A2(
			$elm$core$List$filterMap,
			$TSFoster$elm_uuid$UUID$toNibbleValue,
			$elm$core$String$toList(normalized));
		if ((((((((((((((((((((((((((((((((_v0.b && _v0.b.b) && _v0.b.b.b) && _v0.b.b.b.b) && _v0.b.b.b.b.b) && _v0.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b) && (!_v0.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b.b)) {
			var a1 = _v0.a;
			var _v1 = _v0.b;
			var a2 = _v1.a;
			var _v2 = _v1.b;
			var a3 = _v2.a;
			var _v3 = _v2.b;
			var a4 = _v3.a;
			var _v4 = _v3.b;
			var a5 = _v4.a;
			var _v5 = _v4.b;
			var a6 = _v5.a;
			var _v6 = _v5.b;
			var a7 = _v6.a;
			var _v7 = _v6.b;
			var a8 = _v7.a;
			var _v8 = _v7.b;
			var b1 = _v8.a;
			var _v9 = _v8.b;
			var b2 = _v9.a;
			var _v10 = _v9.b;
			var b3 = _v10.a;
			var _v11 = _v10.b;
			var b4 = _v11.a;
			var _v12 = _v11.b;
			var b5 = _v12.a;
			var _v13 = _v12.b;
			var b6 = _v13.a;
			var _v14 = _v13.b;
			var b7 = _v14.a;
			var _v15 = _v14.b;
			var b8 = _v15.a;
			var _v16 = _v15.b;
			var c1 = _v16.a;
			var _v17 = _v16.b;
			var c2 = _v17.a;
			var _v18 = _v17.b;
			var c3 = _v18.a;
			var _v19 = _v18.b;
			var c4 = _v19.a;
			var _v20 = _v19.b;
			var c5 = _v20.a;
			var _v21 = _v20.b;
			var c6 = _v21.a;
			var _v22 = _v21.b;
			var c7 = _v22.a;
			var _v23 = _v22.b;
			var c8 = _v23.a;
			var _v24 = _v23.b;
			var d1 = _v24.a;
			var _v25 = _v24.b;
			var d2 = _v25.a;
			var _v26 = _v25.b;
			var d3 = _v26.a;
			var _v27 = _v26.b;
			var d4 = _v27.a;
			var _v28 = _v27.b;
			var d5 = _v28.a;
			var _v29 = _v28.b;
			var d6 = _v29.a;
			var _v30 = _v29.b;
			var d7 = _v30.a;
			var _v31 = _v30.b;
			var d8 = _v31.a;
			return A4(
				$TSFoster$elm_uuid$UUID$fromInt32s,
				A8($TSFoster$elm_uuid$UUID$nibbleValuesToU32, a1, a2, a3, a4, a5, a6, a7, a8),
				A8($TSFoster$elm_uuid$UUID$nibbleValuesToU32, b1, b2, b3, b4, b5, b6, b7, b8),
				A8($TSFoster$elm_uuid$UUID$nibbleValuesToU32, c1, c2, c3, c4, c5, c6, c7, c8),
				A8($TSFoster$elm_uuid$UUID$nibbleValuesToU32, d1, d2, d3, d4, d5, d6, d7, d8));
		} else {
			return $elm$core$Result$Err(0);
		}
	}
};
var $author$project$GeneralDirectoryEditor$GeneralDirJson$decodeUUID = A2(
	$elm$json$Json$Decode$andThen,
	A2(
		$elm$core$Basics$composeR,
		$TSFoster$elm_uuid$UUID$fromString,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Result$mapError(
				$elm$core$Basics$always('UUID error')),
			$elm_community$json_extra$Json$Decode$Extra$fromResult)),
	$elm$json$Json$Decode$string);
var $author$project$GeneralDirectoryEditor$GeneralDirJson$decodeFiche = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'lastEdit',
	A2($elm$json$Json$Decode$map, $elm$time$Time$millisToPosix, $elm$json$Json$Decode$int),
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'ouverture',
		$elm$json$Json$Decode$nullable($author$project$GeneralDirectoryEditor$GeneralDirJson$decodeOuverture),
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'linkedDocs',
			$elm$json$Json$Decode$list($author$project$GeneralDirectoryEditor$GeneralDirJson$decodeLinkedDoc),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'description',
				$elm$json$Json$Decode$list($elm$json$Json$Decode$string),
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'visuel',
					$elm$json$Json$Decode$string,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'pjaun',
						$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'site',
							$author$project$GeneralDirectoryEditor$GeneralDirJson$decodeSite,
							A3(
								$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
								'email',
								$elm$json$Json$Decode$list($elm$json$Json$Decode$string),
								A3(
									$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
									'fax',
									$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
									A3(
										$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
										'telNumber',
										$elm$json$Json$Decode$nullable($author$project$GeneralDirectoryEditor$GeneralDirJson$decodeTel),
										A3(
											$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
											'adresse',
											$elm$json$Json$Decode$string,
											A3(
												$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
												'responsables',
												$elm$json$Json$Decode$list($author$project$GeneralDirectoryEditor$GeneralDirJson$decodeResp),
												A3(
													$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
													'nomEntite',
													$elm$json$Json$Decode$string,
													A3(
														$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
														'rank',
														$author$project$GeneralDirectoryEditor$GeneralDirJson$decodeRank,
														A3(
															$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
															'label',
															$elm$json$Json$Decode$list($author$project$GeneralDirectoryEditor$GeneralDirJson$decodeLabel),
															A3(
																$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
																'refOt',
																$author$project$GeneralDirectoryEditor$GeneralDirJson$decodeRefOt,
																A3(
																	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
																	'natureActiv',
																	$elm$json$Json$Decode$list($elm$json$Json$Decode$string),
																	A3(
																		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
																		'categories',
																		$elm$json$Json$Decode$list($elm$json$Json$Decode$string),
																		A3(
																			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
																			'uuid',
																			$author$project$GeneralDirectoryEditor$GeneralDirJson$decodeUUID,
																			$elm$json$Json$Decode$succeed($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Fiche))))))))))))))))))));
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $elm$core$String$padLeft = F3(
	function (n, _char, string) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)),
			string);
	});
var $elm$core$String$fromList = _String_fromList;
var $TSFoster$elm_uuid$UUID$toHex = F2(
	function (acc, _int) {
		toHex:
		while (true) {
			if (!_int) {
				return $elm$core$String$fromList(acc);
			} else {
				var _char = function () {
					var _v0 = 15 & _int;
					switch (_v0) {
						case 0:
							return '0';
						case 1:
							return '1';
						case 2:
							return '2';
						case 3:
							return '3';
						case 4:
							return '4';
						case 5:
							return '5';
						case 6:
							return '6';
						case 7:
							return '7';
						case 8:
							return '8';
						case 9:
							return '9';
						case 10:
							return 'a';
						case 11:
							return 'b';
						case 12:
							return 'c';
						case 13:
							return 'd';
						case 14:
							return 'e';
						default:
							return 'f';
					}
				}();
				var $temp$acc = A2($elm$core$List$cons, _char, acc),
					$temp$int = _int >>> 4;
				acc = $temp$acc;
				_int = $temp$int;
				continue toHex;
			}
		}
	});
var $TSFoster$elm_uuid$UUID$toString = function (_v0) {
	var a = _v0.a;
	var b = _v0.b;
	var c = _v0.c;
	var d = _v0.d;
	return A3(
		$elm$core$String$padLeft,
		8,
		'0',
		A2($TSFoster$elm_uuid$UUID$toHex, _List_Nil, a)) + ('-' + (A3(
		$elm$core$String$padLeft,
		4,
		'0',
		A2($TSFoster$elm_uuid$UUID$toHex, _List_Nil, b >>> 16)) + ('-' + (A3(
		$elm$core$String$padLeft,
		4,
		'0',
		A2($TSFoster$elm_uuid$UUID$toHex, _List_Nil, 65535 & b)) + ('-' + (A3(
		$elm$core$String$padLeft,
		4,
		'0',
		A2($TSFoster$elm_uuid$UUID$toHex, _List_Nil, c >>> 16)) + ('-' + (A3(
		$elm$core$String$padLeft,
		4,
		'0',
		A2($TSFoster$elm_uuid$UUID$toHex, _List_Nil, 65535 & c)) + A3(
		$elm$core$String$padLeft,
		8,
		'0',
		A2($TSFoster$elm_uuid$UUID$toHex, _List_Nil, d))))))))));
};
var $author$project$GeneralDirectoryEditor$GeneralDirJson$decodeGenDirData = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'fiches',
	A2(
		$elm$json$Json$Decode$map,
		$elm$core$Dict$fromList,
		A2(
			$elm$json$Json$Decode$map,
			$elm$core$List$map(
				function (f) {
					return _Utils_Tuple2(
						$TSFoster$elm_uuid$UUID$toString(f.fS),
						f);
				}),
			$elm$json$Json$Decode$list($author$project$GeneralDirectoryEditor$GeneralDirJson$decodeFiche))),
	$elm$json$Json$Decode$succeed($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$GenDirData));
var $author$project$GeneralDirectoryEditor$GeneralDirJson$getGeneralDirectory = function (sessionId) {
	var body = $elm$http$Http$jsonBody(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'sessionId',
					$elm$json$Json$Encode$string(sessionId))
				])));
	return $elm$http$Http$post(
		{
			eY: body,
			du: A2($elm$http$Http$expectJson, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$LoadGeneralDirectory, $author$project$GeneralDirectoryEditor$GeneralDirJson$decodeGenDirData),
			d$: 'getGeneralDirectory.php'
		});
};
var $author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$load = F2(
	function (model, logInfo) {
		if (!logInfo.$) {
			var sessionId = logInfo.a.fF;
			return A2(
				$elm$core$Platform$Cmd$map,
				model.bY,
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							$author$project$GeneralDirectoryEditor$GeneralDirJson$getGeneralDirectory(sessionId),
							A2($elm$core$Task$perform, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetInitialSeed, $elm$time$Time$now)
						])));
		} else {
			return $elm$core$Platform$Cmd$none;
		}
	});
var $author$project$NewsEditor$NewsEditor$SetTimeAndInitSeed = function (a) {
	return {$: 15, a: a};
};
var $author$project$NewsEditor$NewsEditor$LoadNews = function (a) {
	return {$: 0, a: a};
};
var $author$project$Document$Document$News = F6(
	function (title, date, content, pic, uuid, expiry) {
		return {iI: content, eg: date, i8: expiry, kS: pic, fP: title, fS: uuid};
	});
var $author$project$Document$Document$Pic = F3(
	function (url, width, height) {
		return {jx: height, d$: url, mt: width};
	});
var $author$project$Document$Document$NewsContent = F2(
	function (tbElems, attrs) {
		return {y: attrs, lZ: tbElems};
	});
var $author$project$Document$Document$AlignLeft = {$: 3};
var $author$project$Document$Document$AlignRight = {$: 2};
var $author$project$Document$Document$BackgroundColor = function (a) {
	return {$: 5, a: a};
};
var $author$project$Document$Document$Bold = {$: 19};
var $author$project$Document$Document$Border = {$: 11};
var $author$project$Document$Document$Center = {$: 17};
var $author$project$Document$Document$FillPortion = function (a) {
	return {$: 10, a: a};
};
var $author$project$Document$Document$FontAlignLeft = {$: 15};
var $author$project$Document$Document$FontAlignRight = {$: 16};
var $author$project$Document$Document$FontColor = function (a) {
	return {$: 13, a: a};
};
var $author$project$Document$Document$Height = function (a) {
	return {$: 9, a: a};
};
var $author$project$Document$Document$Italic = {$: 20};
var $author$project$Document$Document$Justify = {$: 18};
var $author$project$Document$Document$Other = function (a) {
	return {$: 21, a: a};
};
var $author$project$Document$Document$PaddingEach = function (a) {
	return {$: 0, a: a};
};
var $author$project$Document$Document$Pointer = {$: 4};
var $author$project$Document$Document$SpacingXY = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$Document$Document$Width = function (a) {
	return {$: 8, a: a};
};
var $author$project$Document$Document$WidthFill = {$: 6};
var $author$project$Document$Document$WidthShrink = {$: 7};
var $author$project$Document$Document$DocColor = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt = F3(
	function (path, valDecoder, decoder) {
		return A2(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$custom,
			A2($elm$json$Json$Decode$at, path, valDecoder),
			decoder);
	});
var $author$project$Document$Json$DocumentDecoder$decodeDocColor = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
	_List_fromArray(
		['DocColor', 'blue']),
	$elm$json$Json$Decode$float,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
		_List_fromArray(
			['DocColor', 'green']),
		$elm$json$Json$Decode$float,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['DocColor', 'red']),
			$elm$json$Json$Decode$float,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$DocColor))));
var $author$project$Document$Json$DocumentDecoder$decodeDocAttribute = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['PaddingEach', 'top']),
			$elm$json$Json$Decode$int,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
				_List_fromArray(
					['PaddingEach', 'right']),
				$elm$json$Json$Decode$int,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
					_List_fromArray(
						['PaddingEach', 'left']),
					$elm$json$Json$Decode$int,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
						_List_fromArray(
							['PaddingEach', 'bottom']),
						$elm$json$Json$Decode$int,
						$elm$json$Json$Decode$succeed(
							F4(
								function (b, l, r, t) {
									return $author$project$Document$Document$PaddingEach(
										{a2: b, bc: l, bl: r, bq: t});
								})))))),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['SpacingXY', 'Y']),
			$elm$json$Json$Decode$int,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
				_List_fromArray(
					['SpacingXY', 'X']),
				$elm$json$Json$Decode$int,
				$elm$json$Json$Decode$succeed($author$project$Document$Document$SpacingXY))),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'BackgroundColor',
			$author$project$Document$Json$DocumentDecoder$decodeDocColor,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$BackgroundColor)),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Width',
			$elm$json$Json$Decode$int,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$Width)),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Height',
			$elm$json$Json$Decode$int,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$Height)),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'FillPortion',
			$elm$json$Json$Decode$int,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$FillPortion)),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Font',
			$elm$json$Json$Decode$string,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$Font)),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'FontColor',
			$author$project$Document$Json$DocumentDecoder$decodeDocColor,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$FontColor)),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'FontSize',
			$elm$json$Json$Decode$int,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$FontSize)),
			A2(
			$elm$json$Json$Decode$andThen,
			function (str) {
				switch (str) {
					case 'WidthShrink':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$WidthShrink);
					case 'WidthFill':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$WidthFill);
					case 'AlignRight':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$AlignRight);
					case 'AlignLeft':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$AlignLeft);
					case 'Pointer':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$Pointer);
					case 'Border':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$Border);
					case 'FontAlignLeft':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$FontAlignLeft);
					case 'FontAlignRight':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$FontAlignRight);
					case 'Center':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$Center);
					case 'Justify':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$Justify);
					case 'Bold':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$Bold);
					case 'Italic':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$Italic);
					case 'Other':
						return A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
							_List_fromArray(
								['Other', 'value']),
							$elm$json$Json$Decode$string,
							A3(
								$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
								_List_fromArray(
									['Other', 'attribute']),
								$elm$json$Json$Decode$string,
								$elm$json$Json$Decode$succeed(
									F2(
										function (value, attribute) {
											return $author$project$Document$Document$Other(
												_Utils_Tuple2(value, attribute));
										}))));
					default:
						var somethingElse = str;
						return $elm$json$Json$Decode$fail('Unknown DocAttribute: ' + somethingElse);
				}
			},
			$elm$json$Json$Decode$string)
		]));
var $author$project$Document$Json$DocumentDecoder$decodeDocAttributes = $elm$json$Json$Decode$list($author$project$Document$Json$DocumentDecoder$decodeDocAttribute);
var $author$project$Document$Document$Heading = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $author$project$Document$Document$Paragraph = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$Document$Document$TBPrimitive = function (a) {
	return {$: 3, a: a};
};
var $author$project$Document$Document$TrixHtml = function (a) {
	return {$: 4, a: a};
};
var $author$project$Document$Document$UList = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$Document$Document$Link = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$Document$Document$Text = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$Document$Document$LinkMeta = F3(
	function (targetBlank, url, label) {
		return {O: label, hy: targetBlank, d$: url};
	});
var $author$project$Document$Json$DocumentDecoder$decodeLinkMeta = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'label',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'url',
		$elm$json$Json$Decode$string,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'targetBlank',
			$elm$json$Json$Decode$bool,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$LinkMeta))));
var $author$project$Document$Json$DocumentDecoder$decodeTextBlockPrimitive = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['Text', 'value']),
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
				_List_fromArray(
					['Text', 'attrs']),
				$author$project$Document$Json$DocumentDecoder$decodeDocAttributes,
				$elm$json$Json$Decode$succeed($author$project$Document$Document$Text))),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['Link', 'linkMeta']),
			$author$project$Document$Json$DocumentDecoder$decodeLinkMeta,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
				_List_fromArray(
					['Link', 'attrs']),
				$author$project$Document$Json$DocumentDecoder$decodeDocAttributes,
				$elm$json$Json$Decode$succeed($author$project$Document$Document$Link)))
		]));
var $author$project$Document$Json$DocumentDecoder$decodeTextBlockElement = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['Paragraph', 'prims']),
			$elm$json$Json$Decode$list($author$project$Document$Json$DocumentDecoder$decodeTextBlockPrimitive),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
				_List_fromArray(
					['Paragraph', 'attrs']),
				$author$project$Document$Json$DocumentDecoder$decodeDocAttributes,
				$elm$json$Json$Decode$succeed($author$project$Document$Document$Paragraph))),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['UList', 'liList']),
			$elm$json$Json$Decode$list(
				A2(
					$elm$json$Json$Decode$field,
					'li',
					$elm$json$Json$Decode$list($author$project$Document$Json$DocumentDecoder$decodeTextBlockPrimitive))),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
				_List_fromArray(
					['UList', 'attrs']),
				$author$project$Document$Json$DocumentDecoder$decodeDocAttributes,
				$elm$json$Json$Decode$succeed($author$project$Document$Document$UList))),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Heading',
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'value',
				$elm$json$Json$Decode$string,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'level',
					$elm$json$Json$Decode$int,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'attrs',
						$author$project$Document$Json$DocumentDecoder$decodeDocAttributes,
						$elm$json$Json$Decode$succeed(
							F3(
								function (a, l, v) {
									return {y: a, gM: l, hG: v};
								}))))),
			$elm$json$Json$Decode$succeed(
				function (res) {
					return A2(
						$author$project$Document$Document$Heading,
						res.y,
						_Utils_Tuple2(res.gM, res.hG));
				})),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'TBPrimitive',
			$author$project$Document$Json$DocumentDecoder$decodeTextBlockPrimitive,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$TBPrimitive)),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'TrixHtml',
			$elm$json$Json$Decode$string,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$TrixHtml))
		]));
var $author$project$Document$Json$DocumentDecoder$decodeNewsContent = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'attrs',
	$author$project$Document$Json$DocumentDecoder$decodeDocAttributes,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'tbElems',
		$elm$json$Json$Decode$list($author$project$Document$Json$DocumentDecoder$decodeTextBlockElement),
		$elm$json$Json$Decode$succeed($author$project$Document$Document$NewsContent)));
var $author$project$Document$Json$DocumentDecoder$decodeUUID = A2(
	$elm$json$Json$Decode$andThen,
	A2(
		$elm$core$Basics$composeR,
		$TSFoster$elm_uuid$UUID$fromString,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Result$mapError(
				$elm$core$Basics$always('UUID error')),
			$elm_community$json_extra$Json$Decode$Extra$fromResult)),
	$elm$json$Json$Decode$string);
var $author$project$Document$Json$DocumentDecoder$decodeNews = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'expiry',
	A2($elm$json$Json$Decode$map, $elm$time$Time$millisToPosix, $elm$json$Json$Decode$int),
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'uuid',
		$author$project$Document$Json$DocumentDecoder$decodeUUID,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'pic',
			$elm$json$Json$Decode$nullable(
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'height',
					$elm$json$Json$Decode$int,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'width',
						$elm$json$Json$Decode$int,
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'url',
							$elm$json$Json$Decode$string,
							$elm$json$Json$Decode$succeed($author$project$Document$Document$Pic))))),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'content',
				$elm$json$Json$Decode$nullable($author$project$Document$Json$DocumentDecoder$decodeNewsContent),
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'date',
					A2($elm$json$Json$Decode$map, $elm$time$Time$millisToPosix, $elm$json$Json$Decode$int),
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'title',
						$elm$json$Json$Decode$string,
						$elm$json$Json$Decode$succeed($author$project$Document$Document$News)))))));
var $author$project$NewsEditor$NewsEditor$decodeNewsDict = A2(
	$elm$json$Json$Decode$map,
	$elm$core$Dict$fromList,
	A2(
		$elm$json$Json$Decode$map,
		function (newsList) {
			return A2(
				$elm$core$List$map,
				function (news) {
					return _Utils_Tuple2(
						$TSFoster$elm_uuid$UUID$toString(news.fS),
						news);
				},
				newsList);
		},
		$elm$json$Json$Decode$list($author$project$Document$Json$DocumentDecoder$decodeNews)));
var $author$project$NewsEditor$NewsEditor$getAllTheNews = function (sessionId) {
	var body = $elm$http$Http$jsonBody(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'sessionId',
					$elm$json$Json$Encode$string(sessionId))
				])));
	return $elm$http$Http$post(
		{
			eY: body,
			du: A2($elm$http$Http$expectJson, $author$project$NewsEditor$NewsEditor$LoadNews, $author$project$NewsEditor$NewsEditor$decodeNewsDict),
			d$: 'getAllTheNews.php'
		});
};
var $author$project$NewsEditor$NewsEditor$load = F2(
	function (model, logInfo) {
		if (!logInfo.$) {
			var sessionId = logInfo.a.fF;
			return A2(
				$elm$core$Platform$Cmd$map,
				model.bY,
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							A2($elm$core$Task$perform, $author$project$NewsEditor$NewsEditor$SetTimeAndInitSeed, $elm$time$Time$now),
							$author$project$NewsEditor$NewsEditor$getAllTheNews(sessionId)
						])));
		} else {
			return $elm$core$Platform$Cmd$none;
		}
	});
var $author$project$PageTreeEditor$PageTreeEditor$SetInitialSeed = function (a) {
	return {$: 28, a: a};
};
var $author$project$PageTreeEditor$PageTreeEditor$LoadContents = function (a) {
	return {$: 6, a: a};
};
var $author$project$PageTreeEditor$PageTreeEditor$getContents = function (sessionId) {
	var body = $elm$http$Http$jsonBody(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'sessionId',
					$elm$json$Json$Encode$string(sessionId))
				])));
	return $elm$http$Http$post(
		{
			eY: body,
			du: A2($elm$http$Http$expectJson, $author$project$PageTreeEditor$PageTreeEditor$LoadContents, $elm$json$Json$Decode$value),
			d$: 'getContents.php'
		});
};
var $author$project$PageTreeEditor$PageTreeEditor$LoadKeywords = function (a) {
	return {$: 8, a: a};
};
var $author$project$PageTreeEditor$PageTreeEditor$decodeKeyword = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'contentId',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'keyword',
		$elm$json$Json$Decode$string,
		$elm$json$Json$Decode$succeed(
			F2(
				function (k, cid) {
					return _Utils_Tuple2(k, cid);
				}))));
var $author$project$PageTreeEditor$PageTreeEditor$decodeKeywords = A2(
	$elm$json$Json$Decode$map,
	$elm$core$Set$fromList,
	$elm$json$Json$Decode$list($author$project$PageTreeEditor$PageTreeEditor$decodeKeyword));
var $author$project$PageTreeEditor$PageTreeEditor$getKeywords = function () {
	var body = $elm$http$Http$jsonBody(
		$elm$json$Json$Encode$object(_List_Nil));
	return $elm$http$Http$post(
		{
			eY: body,
			du: A2($elm$http$Http$expectJson, $author$project$PageTreeEditor$PageTreeEditor$LoadKeywords, $author$project$PageTreeEditor$PageTreeEditor$decodeKeywords),
			d$: 'getKeywords.php'
		});
}();
var $author$project$PageTreeEditor$PageTreeEditor$LoadPageTree = function (a) {
	return {$: 7, a: a};
};
var $author$project$PageTreeEditor$PageTreeEditor$Page = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$PageTreeEditor$PageTreeEditor$PageInfo = F3(
	function (name, path, mbContentId) {
		return {kf: mbContentId, I: name, K: path};
	});
var $author$project$PageTreeEditor$PageTreeEditor$decodeUUID = A2(
	$elm$json$Json$Decode$andThen,
	A2(
		$elm$core$Basics$composeR,
		$TSFoster$elm_uuid$UUID$fromString,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Result$mapError(
				$elm$core$Basics$always('UUID error')),
			$elm_community$json_extra$Json$Decode$Extra$fromResult)),
	$elm$json$Json$Decode$string);
var $author$project$PageTreeEditor$PageTreeEditor$decodePageInfo = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'mbContentId',
	$elm$json$Json$Decode$nullable($author$project$PageTreeEditor$PageTreeEditor$decodeUUID),
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'path',
		A2(
			$elm$json$Json$Decode$map,
			$elm$core$String$split('/'),
			$elm$json$Json$Decode$string),
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'name',
			$elm$json$Json$Decode$string,
			$elm$json$Json$Decode$succeed($author$project$PageTreeEditor$PageTreeEditor$PageInfo))));
function $author$project$PageTreeEditor$PageTreeEditor$cyclic$decodePage() {
	return A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
		_List_fromArray(
			['Page', 'children']),
		$elm$json$Json$Decode$list(
			$elm$json$Json$Decode$lazy(
				function (_v0) {
					return $author$project$PageTreeEditor$PageTreeEditor$cyclic$decodePage();
				})),
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['Page', 'pageInfo']),
			$author$project$PageTreeEditor$PageTreeEditor$decodePageInfo,
			$elm$json$Json$Decode$succeed($author$project$PageTreeEditor$PageTreeEditor$Page)));
}
var $author$project$PageTreeEditor$PageTreeEditor$decodePage = $author$project$PageTreeEditor$PageTreeEditor$cyclic$decodePage();
$author$project$PageTreeEditor$PageTreeEditor$cyclic$decodePage = function () {
	return $author$project$PageTreeEditor$PageTreeEditor$decodePage;
};
var $author$project$PageTreeEditor$PageTreeEditor$initPageTree = function (page) {
	return {bu: _List_Nil, a3: page};
};
var $author$project$PageTreeEditor$PageTreeEditor$decodePageTree = A2($elm$json$Json$Decode$map, $author$project$PageTreeEditor$PageTreeEditor$initPageTree, $author$project$PageTreeEditor$PageTreeEditor$decodePage);
var $author$project$PageTreeEditor$PageTreeEditor$getPageTree = function () {
	var body = $elm$http$Http$jsonBody(
		$elm$json$Json$Encode$object(_List_Nil));
	return $elm$http$Http$post(
		{
			eY: body,
			du: A2($elm$http$Http$expectJson, $author$project$PageTreeEditor$PageTreeEditor$LoadPageTree, $author$project$PageTreeEditor$PageTreeEditor$decodePageTree),
			d$: 'getPageTree.php'
		});
}();
var $author$project$PageTreeEditor$PageTreeEditor$load = F2(
	function (model, logInfo) {
		if (!logInfo.$) {
			var sessionId = logInfo.a.fF;
			return A2(
				$elm$core$Platform$Cmd$map,
				model.bY,
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							$author$project$PageTreeEditor$PageTreeEditor$getPageTree,
							$author$project$PageTreeEditor$PageTreeEditor$getContents(sessionId),
							$author$project$PageTreeEditor$PageTreeEditor$getKeywords,
							A2($elm$core$Task$perform, $author$project$PageTreeEditor$PageTreeEditor$SetInitialSeed, $elm$time$Time$now)
						])));
		} else {
			return $elm$core$Platform$Cmd$none;
		}
	});
var $author$project$Publications$Publications$LoadPublications = function (a) {
	return {$: 1, a: a};
};
var $author$project$Document$Document$Publications = F3(
	function (murolInfos, delibs, bulletins) {
		return {ij: bulletins, iW: delibs, kl: murolInfos};
	});
var $author$project$Document$Document$BulletinMeta = F4(
	function (issue, date, cover, index) {
		return {iM: cover, eg: date, gB: index, gH: issue};
	});
var $author$project$Publications$Publications$coverFilename = function (n) {
	return function (s) {
		return '/baseDocumentaire/publications/bulletins/miniatures/' + (s + '.jpg');
	}(
		A3(
			$elm$core$String$padLeft,
			3,
			'0',
			$elm$core$String$fromInt(n)));
};
var $elm$json$Json$Decode$map4 = _Json_map4;
var $author$project$Publications$Publications$decodeBulletin = function () {
	var decodeIndexEntry = A3(
		$elm$json$Json$Decode$map2,
		$elm$core$Tuple$pair,
		A2($elm$json$Json$Decode$field, 'topic', $elm$json$Json$Decode$string),
		A2($elm$json$Json$Decode$field, 'page', $elm$json$Json$Decode$int));
	return A5(
		$elm$json$Json$Decode$map4,
		$author$project$Document$Document$BulletinMeta,
		A2($elm$json$Json$Decode$field, 'issue', $elm$json$Json$Decode$int),
		A2(
			$elm$json$Json$Decode$field,
			'date',
			A2($elm$json$Json$Decode$map, $elm$time$Time$millisToPosix, $elm$json$Json$Decode$int)),
		A2(
			$elm$json$Json$Decode$map,
			$author$project$Publications$Publications$coverFilename,
			A2($elm$json$Json$Decode$field, 'issue', $elm$json$Json$Decode$int)),
		A2(
			$elm$json$Json$Decode$field,
			'index',
			$elm$json$Json$Decode$list(decodeIndexEntry)));
}();
var $author$project$Document$Document$DelibMeta = F2(
	function (date, index) {
		return {eg: date, gB: index};
	});
var $author$project$Publications$Publications$decodeDelib = function () {
	var decodeIndexEntry = A3(
		$elm$json$Json$Decode$map2,
		$elm$core$Tuple$pair,
		A2($elm$json$Json$Decode$field, 'topic', $elm$json$Json$Decode$string),
		A2($elm$json$Json$Decode$field, 'page', $elm$json$Json$Decode$int));
	return A3(
		$elm$json$Json$Decode$map2,
		$author$project$Document$Document$DelibMeta,
		A2(
			$elm$json$Json$Decode$field,
			'date',
			A2($elm$json$Json$Decode$map, $elm$time$Time$millisToPosix, $elm$json$Json$Decode$int)),
		A2(
			$elm$json$Json$Decode$field,
			'index',
			$elm$json$Json$Decode$list(decodeIndexEntry)));
}();
var $author$project$Document$Document$MurolInfoMeta = F3(
	function (issue, date, topics) {
		return {eg: date, gH: issue, mi: topics};
	});
var $author$project$Publications$Publications$decodeMurolInfo = A4(
	$elm$json$Json$Decode$map3,
	$author$project$Document$Document$MurolInfoMeta,
	A2($elm$json$Json$Decode$field, 'issue', $elm$json$Json$Decode$int),
	A2(
		$elm$json$Json$Decode$field,
		'date',
		A2($elm$json$Json$Decode$map, $elm$time$Time$millisToPosix, $elm$json$Json$Decode$int)),
	A2(
		$elm$json$Json$Decode$field,
		'topics',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)));
var $author$project$Publications$Publications$decodePublications = A4(
	$elm$json$Json$Decode$map3,
	$author$project$Document$Document$Publications,
	A2(
		$elm$json$Json$Decode$field,
		'murolInfos',
		A2(
			$elm$json$Json$Decode$map,
			$elm$core$Dict$fromList,
			A2(
				$elm$json$Json$Decode$map,
				$elm$core$List$map(
					function (mi) {
						return _Utils_Tuple2(mi.gH, mi);
					}),
				$elm$json$Json$Decode$list($author$project$Publications$Publications$decodeMurolInfo)))),
	A2(
		$elm$json$Json$Decode$field,
		'delibs',
		A2(
			$elm$json$Json$Decode$map,
			$elm$core$Dict$fromList,
			A2(
				$elm$json$Json$Decode$map,
				$elm$core$List$map(
					function (d) {
						return _Utils_Tuple2(
							$elm$time$Time$posixToMillis(d.eg),
							d);
					}),
				$elm$json$Json$Decode$list($author$project$Publications$Publications$decodeDelib)))),
	A2(
		$elm$json$Json$Decode$field,
		'bulletins',
		A2(
			$elm$json$Json$Decode$map,
			$elm$core$Dict$fromList,
			A2(
				$elm$json$Json$Decode$map,
				$elm$core$List$map(
					function (b) {
						return _Utils_Tuple2(b.gH, b);
					}),
				$elm$json$Json$Decode$list($author$project$Publications$Publications$decodeBulletin)))));
var $author$project$Publications$Publications$getAllPublications = function (msg) {
	var body = $elm$http$Http$jsonBody(
		$elm$json$Json$Encode$object(_List_Nil));
	return $elm$http$Http$post(
		{
			eY: body,
			du: A2($elm$http$Http$expectJson, msg, $author$project$Publications$Publications$decodePublications),
			d$: '/getAllPublications.php'
		});
};
var $author$project$Publications$Publications$load = F2(
	function (model, logInfo) {
		if (!logInfo.$) {
			var sessionId = logInfo.a.fF;
			return A2(
				$elm$core$Platform$Cmd$map,
				model.bY,
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							$author$project$Publications$Publications$getAllPublications($author$project$Publications$Publications$LoadPublications)
						])));
		} else {
			return $elm$core$Platform$Cmd$none;
		}
	});
var $author$project$PageTreeEditor$PageTreeEditor$getMbContentId = function (_v0) {
	var mbContentId = _v0.a.kf;
	return mbContentId;
};
var $author$project$PageTreeEditor$PageTreeEditor$loadedContent = function (model) {
	return A2(
		$elm$core$Maybe$andThen,
		function (k) {
			return A2(
				$elm$core$Dict$get,
				$TSFoster$elm_uuid$UUID$toString(k),
				model.cv);
		},
		A2($elm$core$Maybe$andThen, $author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.ao));
};
var $elm$core$Basics$round = _Basics_round;
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (!_v0.$) {
			return true;
		} else {
			return false;
		}
	});
var $author$project$Internals$CommonHelpers$safeInsert = F4(
	function (f, k, v, d) {
		safeInsert:
		while (true) {
			if (A2($elm$core$Dict$member, k, d)) {
				var $temp$f = f,
					$temp$k = f(k),
					$temp$v = v,
					$temp$d = d;
				f = $temp$f;
				k = $temp$k;
				v = $temp$v;
				d = $temp$d;
				continue safeInsert;
			} else {
				return A3($elm$core$Dict$insert, k, v, d);
			}
		}
	});
var $author$project$Internals$CommonHelpers$Failure = 3;
var $author$project$Auth$AuthPlugin$LogoutMode = function (a) {
	return {$: 2, a: a};
};
var $author$project$Auth$AuthPlugin$SignUpMode = function (a) {
	return {$: 0, a: a};
};
var $author$project$Internals$CommonHelpers$Success = 2;
var $author$project$Internals$CommonHelpers$httpErrorToString = function (e) {
	switch (e.$) {
		case 0:
			var s = e.a;
			return 'Url invalide: ' + s;
		case 1:
			return 'Délai d\'attente dépassé';
		case 2:
			return 'Erreur de réseau';
		case 3:
			var statusCode = e.a;
			return 'Erreur serveur: ' + $elm$core$String$fromInt(statusCode);
		default:
			var details = e.a;
			return 'Erreur décodage: ' + details;
	}
};
var $author$project$Auth$AuthPlugin$ConfirmLogin = function (a) {
	return {$: 5, a: a};
};
var $author$project$Auth$AuthPlugin$login = function (model) {
	var body = $elm$http$Http$jsonBody(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'username',
					$elm$json$Json$Encode$string(
						function ($) {
							return $.bP;
						}(model))),
					_Utils_Tuple2(
					'password',
					$elm$json$Json$Encode$string(
						function ($) {
							return $.cd;
						}(model)))
				])));
	return $elm$http$Http$post(
		{
			eY: body,
			du: A2($elm$http$Http$expectJson, $author$project$Auth$AuthPlugin$ConfirmLogin, $author$project$Auth$AuthPlugin$decodeLoginResult),
			d$: 'login.php'
		});
};
var $author$project$Auth$AuthPlugin$ConfirmLogout = function (a) {
	return {$: 9, a: a};
};
var $author$project$Auth$AuthPlugin$decodeLogoutResult = A2($elm$json$Json$Decode$field, 'notLoggedIn', $elm$json$Json$Decode$bool);
var $author$project$Auth$AuthPlugin$logout = $elm$http$Http$get(
	{
		du: A2($elm$http$Http$expectJson, $author$project$Auth$AuthPlugin$ConfirmLogout, $author$project$Auth$AuthPlugin$decodeLogoutResult),
		d$: 'logout.php'
	});
var $author$project$Internals$CommonHelpers$Log = F5(
	function (message, mbDetails, isError, isImportant, timeStamp) {
		return {dx: isError, gG: isImportant, es: mbDetails, dG: message, dm: timeStamp};
	});
var $author$project$Internals$CommonHelpers$newLog = F5(
	function (addLogMsg, logMsg, details, isError, isImportant) {
		return A2(
			$elm$core$Task$perform,
			addLogMsg,
			A2(
				$elm$core$Task$andThen,
				function (t) {
					return $elm$core$Task$succeed(
						A5($author$project$Internals$CommonHelpers$Log, logMsg, details, isError, isImportant, t));
				},
				$elm$time$Time$now));
	});
var $author$project$Auth$AuthPlugin$PingResult = function (a) {
	return {$: 12, a: a};
};
var $author$project$Auth$AuthPlugin$decodePing = A2(
	$elm$json$Json$Decode$map,
	function (s) {
		return s === 'success!';
	},
	A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$string));
var $author$project$Auth$AuthPlugin$ping = function (sessionId) {
	var body = $elm$http$Http$jsonBody(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'sessionId',
					$elm$json$Json$Encode$string(sessionId))
				])));
	return $elm$http$Http$post(
		{
			eY: body,
			du: A2($elm$http$Http$expectJson, $author$project$Auth$AuthPlugin$PingResult, $author$project$Auth$AuthPlugin$decodePing),
			d$: 'ping.php'
		});
};
var $author$project$Auth$AuthPlugin$ConfirmSignUp = function (a) {
	return {$: 7, a: a};
};
var $author$project$Auth$AuthPlugin$decodeSignupResult = A2($elm$json$Json$Decode$field, 'signUpComplete', $elm$json$Json$Decode$bool);
var $author$project$Auth$AuthPlugin$signUp = function (model) {
	var body = $elm$http$Http$jsonBody(
		$elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'username',
					$elm$json$Json$Encode$string(
						function ($) {
							return $.bP;
						}(model))),
					_Utils_Tuple2(
					'password',
					$elm$json$Json$Encode$string(
						function ($) {
							return $.cd;
						}(model)))
				])));
	return $elm$http$Http$post(
		{
			eY: body,
			du: A2($elm$http$Http$expectJson, $author$project$Auth$AuthPlugin$ConfirmSignUp, $author$project$Auth$AuthPlugin$decodeSignupResult),
			d$: 'signup.php'
		});
};
var $author$project$Auth$AuthPlugin$update = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 0:
				var s = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{bP: s}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 1:
				var s = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{cd: s}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 2:
				var s = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{ds: s}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 3:
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							A: $author$project$Auth$AuthPlugin$LoginMode(1)
						}),
					A2(
						$elm$core$Platform$Cmd$map,
						model.bY,
						$author$project$Auth$AuthPlugin$login(model)),
					$elm$core$Maybe$Nothing);
			case 4:
				var res = msg.a;
				if (res.$ === 1) {
					var e = res.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								be: $author$project$Auth$AuthPlugin$LoggedOut,
								A: $author$project$Auth$AuthPlugin$LoginMode(0)
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				} else {
					var logInfo = res.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								be: logInfo,
								A: $author$project$Auth$AuthPlugin$LoginMode(2)
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Just($author$project$Internals$ToolHelpers$ToolQuit));
				}
			case 5:
				var res = msg.a;
				if (res.$ === 1) {
					var e = res.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								be: $author$project$Auth$AuthPlugin$LoggedOut,
								A: $author$project$Auth$AuthPlugin$LoginMode(3)
							}),
						A5(
							$author$project$Internals$CommonHelpers$newLog,
							config.eT,
							'Echec connexion',
							$elm$core$Maybe$Just(
								$author$project$Internals$CommonHelpers$httpErrorToString(e)),
							true,
							true),
						$elm$core$Maybe$Nothing);
				} else {
					var logInfo = res.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								be: logInfo,
								A: $author$project$Auth$AuthPlugin$LoginMode(2)
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				}
			case 6:
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							A: $author$project$Auth$AuthPlugin$SignUpMode(1)
						}),
					A2(
						$elm$core$Platform$Cmd$map,
						model.bY,
						$author$project$Auth$AuthPlugin$signUp(model)),
					$elm$core$Maybe$Nothing);
			case 7:
				var res = msg.a;
				if (res.$ === 1) {
					var e = res.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								A: $author$project$Auth$AuthPlugin$SignUpMode(3)
							}),
						A5(
							$author$project$Internals$CommonHelpers$newLog,
							config.eT,
							'Echec création compte',
							$elm$core$Maybe$Just(
								$author$project$Internals$CommonHelpers$httpErrorToString(e)),
							true,
							true),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								A: $author$project$Auth$AuthPlugin$SignUpMode(2)
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				}
			case 8:
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							A: $author$project$Auth$AuthPlugin$LogoutMode(1)
						}),
					A2($elm$core$Platform$Cmd$map, model.bY, $author$project$Auth$AuthPlugin$logout),
					$elm$core$Maybe$Nothing);
			case 9:
				var res = msg.a;
				if (res.$ === 1) {
					var e = res.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								A: $author$project$Auth$AuthPlugin$LogoutMode(3)
							}),
						A5(
							$author$project$Internals$CommonHelpers$newLog,
							config.eT,
							'Echec déconnexion',
							$elm$core$Maybe$Just(
								$author$project$Internals$CommonHelpers$httpErrorToString(e)),
							true,
							true),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								be: $author$project$Auth$AuthPlugin$LoggedOut,
								A: $author$project$Auth$AuthPlugin$LogoutMode(2)
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				}
			case 10:
				var mode = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{A: mode}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 11:
				var _v5 = model.be;
				if (!_v5.$) {
					var li = _v5.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								A: $author$project$Auth$AuthPlugin$LoginMode(1)
							}),
						A2(
							$elm$core$Platform$Cmd$map,
							model.bY,
							$author$project$Auth$AuthPlugin$ping(li.fF)),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 12:
				var res = msg.a;
				if ((!res.$) && res.a) {
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								A: $author$project$Auth$AuthPlugin$LoginMode(2)
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								be: $author$project$Auth$AuthPlugin$LoggedOut,
								A: $author$project$Auth$AuthPlugin$LoginMode(3)
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				}
			case 13:
				return _Utils_Tuple3(
					model,
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Just($author$project$Internals$ToolHelpers$ToolQuit));
			default:
				return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
		}
	});
var $author$project$FileExplorer$FileExplorer$BUUpload = 1;
var $author$project$FileExplorer$FileExplorer$Base64Img = F2(
	function (a, b) {
		return {$: 21, a: a, b: b};
	});
var $author$project$FileExplorer$FileExplorer$Editor = 1;
var $author$project$FileExplorer$FileExplorer$Full = {$: 2};
var $author$project$FileExplorer$FileExplorer$ImageProcessing = 1;
var $author$project$Internals$ToolHelpers$ToolLoadingFailure = function (a) {
	return {$: 2, a: a};
};
var $author$project$Internals$ToolHelpers$ToolLoadingSuccess = {$: 1};
var $author$project$FileExplorer$FileExplorer$Upload = 2;
var $author$project$FileExplorer$FileExplorer$UploadDisplay = 1;
var $author$project$Internals$CommonHelpers$UploadFailure = function (a) {
	return {$: 1, a: a};
};
var $author$project$Internals$CommonHelpers$UploadSuccessful = {$: 0};
var $elm$http$Http$cancel = function (tracker) {
	return $elm$http$Http$command(
		$elm$http$Http$Cancel(tracker));
};
var $author$project$Auth$AuthPlugin$cmdIfLogged = F2(
	function (logInfo, cmd) {
		if (!logInfo.$) {
			var sessionId = logInfo.a.fF;
			return cmd(sessionId);
		} else {
			return $elm$core$Platform$Cmd$none;
		}
	});
var $author$project$FileExplorer$FileExplorer$ProcessedImage = F5(
	function (filename, content, size, width, height) {
		return {iI: content, E: filename, jx: height, fJ: size, mt: width};
	});
var $elm$json$Json$Decode$map5 = _Json_map5;
var $author$project$FileExplorer$FileExplorer$decodeProcessedData = A6(
	$elm$json$Json$Decode$map5,
	$author$project$FileExplorer$FileExplorer$ProcessedImage,
	A2($elm$json$Json$Decode$field, 'filename', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'content', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'size', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'width', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'height', $elm$json$Json$Decode$int));
var $author$project$FileExplorer$FileExplorer$getPath = function (fsItem) {
	if (!fsItem.$) {
		var path = fsItem.a.K;
		return path;
	} else {
		var path = fsItem.a.K;
		return path;
	}
};
var $author$project$FileExplorer$FileExplorer$encodeFsItemPath = function (fsItem) {
	return $elm$json$Json$Encode$string(
		function (s) {
			return A2($elm$core$String$contains, '?', s) ? A2($elm_community$string_extra$String$Extra$leftOf, '?', s) : s;
		}(
			A2(
				$elm$core$String$join,
				'/',
				$author$project$FileExplorer$FileExplorer$getPath(fsItem))));
};
var $author$project$FileExplorer$FileExplorer$getName = function (fsItem) {
	if (!fsItem.$) {
		var name = fsItem.a.I;
		return name;
	} else {
		var name = fsItem.a.I;
		return name;
	}
};
var $author$project$FileExplorer$FileExplorer$deleteFile = F3(
	function (fsItem, root, sessionId) {
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						$author$project$FileExplorer$FileExplorer$encodeRoot(root),
						_Utils_Tuple2(
						'path',
						$author$project$FileExplorer$FileExplorer$encodeFsItemPath(fsItem))
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					A3(
						$author$project$FileExplorer$FileExplorer$RefreshFilesys,
						$elm$core$Maybe$Just(fsItem),
						'Suppression: ' + $author$project$FileExplorer$FileExplorer$getName(fsItem),
						root),
					$author$project$FileExplorer$FileExplorer$decodeFiles),
				d$: 'deleteFile.php'
			});
	});
var $author$project$FileExplorer$FileExplorer$extractFsItem = function (_v0) {
	var current = _v0.a3;
	var contexts = _v0.bu;
	return current;
};
var $author$project$FileExplorer$FileExplorer$modeRoot = F2(
	function (mode, root) {
		switch (mode.$) {
			case 0:
				var m = mode.a;
				return m;
			case 1:
				var m = mode.a;
				return m;
			default:
				return root;
		}
	});
var $author$project$FileExplorer$FileExplorer$getCurrentFilesys = F2(
	function (mode, model) {
		if (mode.$ === 2) {
			var _v1 = model.Z;
			if (!_v1) {
				return model.aW;
			} else {
				return model.aV;
			}
		} else {
			var mode_ = mode;
			var _v2 = A2($author$project$FileExplorer$FileExplorer$modeRoot, mode_, model.Z);
			if (!_v2) {
				return model.aW;
			} else {
				return model.aV;
			}
		}
	});
var $author$project$FileExplorer$FileExplorer$initFileSys = function (fsItem) {
	return {bu: _List_Nil, a3: fsItem};
};
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $author$project$FileExplorer$FileExplorer$break = F2(
	function (p, xs) {
		var helper = F2(
			function (ys, left) {
				helper:
				while (true) {
					if (!ys.b) {
						return _Utils_Tuple2(left, _List_Nil);
					} else {
						var y = ys.a;
						var ys_ = ys.b;
						if (p(y)) {
							return _Utils_Tuple2(
								$elm$core$List$reverse(left),
								A2($elm$core$List$cons, y, ys_));
						} else {
							var $temp$ys = ys_,
								$temp$left = A2($elm$core$List$cons, y, left);
							ys = $temp$ys;
							left = $temp$left;
							continue helper;
						}
					}
				}
			});
		return A2(helper, xs, _List_Nil);
	});
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$FileExplorer$FileExplorer$insert = F3(
	function (f, rootName, mbFsItem_) {
		var helper = F2(
			function (path, mbFsItem) {
				helper:
				while (true) {
					if (mbFsItem.$ === 1) {
						if (!path.b) {
							var $temp$path = path,
								$temp$mbFsItem = $elm$core$Maybe$Just(
								A2(
									$author$project$FileExplorer$FileExplorer$Folder,
									_Utils_update(
										$author$project$FileExplorer$FileExplorer$defMeta,
										{
											I: rootName,
											K: _List_fromArray(
												[rootName])
										}),
									_List_Nil));
							path = $temp$path;
							mbFsItem = $temp$mbFsItem;
							continue helper;
						} else {
							var root = path.a;
							if (!_Utils_eq(root, rootName)) {
								return $elm$core$Maybe$Nothing;
							} else {
								var $temp$path = path,
									$temp$mbFsItem = $elm$core$Maybe$Just(
									A2(
										$author$project$FileExplorer$FileExplorer$Folder,
										_Utils_update(
											$author$project$FileExplorer$FileExplorer$defMeta,
											{
												I: rootName,
												K: _List_fromArray(
													[rootName])
											}),
										_List_Nil));
								path = $temp$path;
								mbFsItem = $temp$mbFsItem;
								continue helper;
							}
						}
					} else {
						if (!mbFsItem.a.$) {
							var _v2 = mbFsItem.a;
							var meta = _v2.a;
							var children = _v2.b;
							if (!path.b) {
								return $elm$core$Maybe$Just(
									A2($author$project$FileExplorer$FileExplorer$Folder, meta, children));
							} else {
								if (!path.b.b) {
									var curr = path.a;
									return (!_Utils_eq(curr, meta.I)) ? $elm$core$Maybe$Nothing : (A2(
										$elm$core$List$any,
										function (c) {
											return _Utils_eq(
												$author$project$FileExplorer$FileExplorer$getName(c),
												$author$project$FileExplorer$FileExplorer$getName(f));
										},
										children) ? $elm$core$Maybe$Just(
										A2($author$project$FileExplorer$FileExplorer$Folder, meta, children)) : $elm$core$Maybe$Just(
										A2(
											$author$project$FileExplorer$FileExplorer$Folder,
											meta,
											A2($elm$core$List$cons, f, children))));
								} else {
									var curr = path.a;
									var _v4 = path.b;
									var next = _v4.a;
									var rest = _v4.b;
									if (!_Utils_eq(curr, meta.I)) {
										return $elm$core$Maybe$Nothing;
									} else {
										var _v5 = A2(
											$author$project$FileExplorer$FileExplorer$break,
											function (f_) {
												return _Utils_eq(
													$author$project$FileExplorer$FileExplorer$getName(f_),
													next);
											},
											children);
										var l = _v5.a;
										var r = _v5.b;
										if (!r.b) {
											var newFolder = A2(
												$author$project$FileExplorer$FileExplorer$Folder,
												_Utils_update(
													$author$project$FileExplorer$FileExplorer$defMeta,
													{
														I: next,
														K: _Utils_ap(
															meta.K,
															_List_fromArray(
																[next]))
													}),
												_List_Nil);
											return A2(
												$elm$core$Maybe$andThen,
												function (nsbt) {
													return $elm$core$Maybe$Just(
														A2(
															$author$project$FileExplorer$FileExplorer$Folder,
															meta,
															A2($elm$core$List$cons, nsbt, children)));
												},
												A2(
													helper,
													A2($elm$core$List$cons, next, rest),
													$elm$core$Maybe$Just(newFolder)));
										} else {
											var next_ = r.a;
											var rest_ = r.b;
											return A2(
												$elm$core$Maybe$andThen,
												function (nsbt) {
													return $elm$core$Maybe$Just(
														A2(
															$author$project$FileExplorer$FileExplorer$Folder,
															meta,
															_Utils_ap(
																l,
																A2($elm$core$List$cons, nsbt, rest_))));
												},
												A2(
													helper,
													A2($elm$core$List$cons, next, rest),
													$elm$core$Maybe$Just(next_)));
										}
									}
								}
							}
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}
				}
			});
		return A2(
			$elm$core$Maybe$andThen,
			function (p) {
				return A2(helper, p, mbFsItem_);
			},
			A2(
				$elm$core$Maybe$map,
				$elm$core$List$reverse,
				$elm$core$List$tail(
					$elm$core$List$reverse(
						$author$project$FileExplorer$FileExplorer$getPath(f)))));
	});
var $author$project$FileExplorer$FileExplorer$makeNewFolder = F4(
	function (fsItem, folderName, root, sessionId) {
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						$author$project$FileExplorer$FileExplorer$encodeRoot(root),
						_Utils_Tuple2(
						'path',
						$author$project$FileExplorer$FileExplorer$encodeFsItemPath(fsItem)),
						_Utils_Tuple2(
						'folderName',
						$elm$json$Json$Encode$string(folderName))
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					A3(
						$author$project$FileExplorer$FileExplorer$RefreshFilesys,
						$elm$core$Maybe$Just(fsItem),
						'Création dossier: ' + folderName,
						root),
					$author$project$FileExplorer$FileExplorer$decodeFiles),
				d$: 'newFolder.php'
			});
	});
var $elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === -2) {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2($elm$core$Dict$map, func, left),
				A2($elm$core$Dict$map, func, right));
		}
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $elm$core$Basics$modBy = _Basics_modBy;
var $elm$file$File$name = _File_name;
var $author$project$Auth$AuthPlugin$isLogged = function (logInfo) {
	if (!logInfo.$) {
		return true;
	} else {
		return false;
	}
};
var $author$project$Auth$AuthPlugin$newLogIfLogged = F6(
	function (logInfo, addLogMsg, logMsg, details, isError, isImportant) {
		return $author$project$Auth$AuthPlugin$isLogged(logInfo) ? A5($author$project$Internals$CommonHelpers$newLog, addLogMsg, logMsg, details, isError, isImportant) : A5($author$project$Internals$CommonHelpers$newLog, addLogMsg, 'Opération impossible: utilisateur déconnecté', $elm$core$Maybe$Nothing, true, true);
	});
var $author$project$FileExplorer$FileExplorer$pasteFile = F4(
	function (src, dest, root, sessionId) {
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						$author$project$FileExplorer$FileExplorer$encodeRoot(root),
						_Utils_Tuple2(
						'srcPath',
						$author$project$FileExplorer$FileExplorer$encodeFsItemPath(src)),
						_Utils_Tuple2(
						'destPath',
						$author$project$FileExplorer$FileExplorer$encodeFsItemPath(dest))
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					A3(
						$author$project$FileExplorer$FileExplorer$RefreshFilesys,
						$elm$core$Maybe$Just(src),
						'Collage: ' + $author$project$FileExplorer$FileExplorer$getName(src),
						root),
					$author$project$FileExplorer$FileExplorer$decodeFiles),
				d$: 'pasteFile.php'
			});
	});
var $elm$json$Json$Encode$bool = _Json_wrap;
var $elm$json$Json$Encode$int = _Json_wrap;
var $author$project$FileExplorer$FileExplorer$toFileExplorerImageProcessor = _Platform_outgoingPort('toFileExplorerImageProcessor', $elm$core$Basics$identity);
var $author$project$FileExplorer$FileExplorer$processCmd = F3(
	function (model, filename, data) {
		var _v0 = function () {
			var _v1 = model.dq;
			switch (_v1) {
				case 0:
					return _Utils_Tuple2(266, 200);
				case 1:
					return _Utils_Tuple2(300, 225);
				case 2:
					return _Utils_Tuple2(440, 320);
				default:
					return _Utils_Tuple2(800, 600);
			}
		}();
		var w = _v0.a;
		var h = _v0.b;
		return A2(
			$elm$core$Platform$Cmd$map,
			model.bY,
			$author$project$FileExplorer$FileExplorer$toFileExplorerImageProcessor(
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'imageData',
							$elm$json$Json$Encode$string(data)),
							_Utils_Tuple2(
							'filename',
							$elm$json$Json$Encode$string(filename)),
							_Utils_Tuple2(
							'maxHeight',
							$elm$json$Json$Encode$int(h)),
							_Utils_Tuple2(
							'maxWidth',
							$elm$json$Json$Encode$int(w)),
							_Utils_Tuple2(
							'needThumb',
							$elm$json$Json$Encode$bool(false))
						]))));
	});
var $elm_community$list_extra$List$Extra$remove = F2(
	function (x, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var y = xs.a;
			var ys = xs.b;
			return _Utils_eq(x, y) ? ys : A2(
				$elm$core$List$cons,
				y,
				A2($elm_community$list_extra$List$Extra$remove, x, ys));
		}
	});
var $author$project$FileExplorer$FileExplorer$renameFile = F4(
	function (fsItem, newName, root, sessionId) {
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						$author$project$FileExplorer$FileExplorer$encodeRoot(root),
						_Utils_Tuple2(
						'newName',
						$elm$json$Json$Encode$string(newName)),
						_Utils_Tuple2(
						'path',
						$author$project$FileExplorer$FileExplorer$encodeFsItemPath(fsItem))
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					A3(
						$author$project$FileExplorer$FileExplorer$RefreshFilesys,
						$elm$core$Maybe$Just(fsItem),
						'Renommage: ' + $author$project$FileExplorer$FileExplorer$getName(fsItem),
						root),
					$author$project$FileExplorer$FileExplorer$decodeFiles),
				d$: 'renameFile.php'
			});
	});
var $author$project$FileExplorer$FileExplorer$zipUpFilesys = function (filesys) {
	var _v0 = filesys.bu;
	if (!_v0.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var parent = _v0.a.eF;
		var left = _v0.a.bc;
		var right = _v0.a.bl;
		var cs = _v0.b;
		return $elm$core$Maybe$Just(
			_Utils_update(
				filesys,
				{
					bu: cs,
					a3: A2(
						$author$project$FileExplorer$FileExplorer$Folder,
						parent,
						_Utils_ap(
							left,
							_Utils_ap(
								_List_fromArray(
									[filesys.a3]),
								right)))
				}));
	}
};
var $author$project$FileExplorer$FileExplorer$rewindFilesys = function (filesys) {
	rewindFilesys:
	while (true) {
		var _v0 = $author$project$FileExplorer$FileExplorer$zipUpFilesys(filesys);
		if (_v0.$ === 1) {
			return filesys;
		} else {
			var filesys_ = _v0.a;
			var $temp$filesys = filesys_;
			filesys = $temp$filesys;
			continue rewindFilesys;
		}
	}
};
var $author$project$FileExplorer$FileExplorer$FilesSelected = F3(
	function (a, b, c) {
		return {$: 17, a: a, b: b, c: c};
	});
var $elm$file$File$Select$files = F2(
	function (mimes, toMsg) {
		return A2(
			$elm$core$Task$perform,
			function (_v0) {
				var f = _v0.a;
				var fs = _v0.b;
				return A2(toMsg, f, fs);
			},
			_File_uploadOneOrMore(mimes));
	});
var $author$project$FileExplorer$FileExplorer$selectFiles = function (fsItem) {
	return A2(
		$elm$file$File$Select$files,
		_List_Nil,
		$author$project$FileExplorer$FileExplorer$FilesSelected(fsItem));
};
var $author$project$FileExplorer$FileExplorer$ImagesSelected = F2(
	function (a, b) {
		return {$: 20, a: a, b: b};
	});
var $author$project$FileExplorer$FileExplorer$selectImages = A2(
	$elm$file$File$Select$files,
	_List_fromArray(
		['image/png', 'image/jpeg']),
	$author$project$FileExplorer$FileExplorer$ImagesSelected);
var $elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === -2) {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var $elm$core$Dict$size = function (dict) {
	return A2($elm$core$Dict$sizeHelp, 0, dict);
};
var $elm$file$File$size = _File_size;
var $elm$file$File$toUrl = _File_toUrl;
var $author$project$FileExplorer$FileExplorer$updateFilesys = F3(
	function (mode, model, f) {
		if (mode.$ === 2) {
			var _v1 = model.Z;
			if (!_v1) {
				return _Utils_update(
					model,
					{
						aW: f(model.aW)
					});
			} else {
				return _Utils_update(
					model,
					{
						aV: f(model.aV)
					});
			}
		} else {
			var mode_ = mode;
			var _v2 = A2($author$project$FileExplorer$FileExplorer$modeRoot, mode_, model.Z);
			if (!_v2) {
				return _Utils_update(
					model,
					{
						aW: f(model.aW)
					});
			} else {
				return _Utils_update(
					model,
					{
						aV: f(model.aV)
					});
			}
		}
	});
var $author$project$FileExplorer$FileExplorer$Uploaded = F2(
	function (a, b) {
		return {$: 28, a: a, b: b};
	});
var $author$project$Internals$CommonHelpers$decodeUploadStatus = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$map,
			$author$project$Internals$CommonHelpers$UploadFailure,
			A2($elm$json$Json$Decode$field, 'serverError', $elm$json$Json$Decode$string)),
			A2(
			$elm$json$Json$Decode$map,
			$elm$core$Basics$always($author$project$Internals$CommonHelpers$UploadSuccessful),
			A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$string))
		]));
var $elm$http$Http$filePart = _Http_pair;
var $elm$http$Http$multipartBody = function (parts) {
	return A2(
		_Http_pair,
		'',
		_Http_toFormData(parts));
};
var $elm$http$Http$stringPart = _Http_pair;
var $author$project$FileExplorer$FileExplorer$uploadFile = F3(
	function (fsItem, file, sessionId) {
		var uploadPath = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function (p) {
					return p + '/';
				},
				A2(
					$elm$core$Maybe$map,
					$elm$core$String$join('/'),
					$elm$core$List$tail(
						$author$project$FileExplorer$FileExplorer$getPath(fsItem)))));
		var filename = $elm$file$File$name(file);
		var body = $elm$http$Http$multipartBody(
			_List_fromArray(
				[
					A2($elm$http$Http$filePart, 'file', file),
					A2($elm$http$Http$stringPart, 'uploadPath', uploadPath),
					A2($elm$http$Http$stringPart, 'sessionId', sessionId)
				]));
		return $elm$http$Http$request(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					$author$project$FileExplorer$FileExplorer$Uploaded(filename),
					$author$project$Internals$CommonHelpers$decodeUploadStatus),
				gu: _List_Nil,
				gO: 'POST',
				hz: $elm$core$Maybe$Nothing,
				hC: $elm$core$Maybe$Just(filename),
				d$: 'uploadDoc.php'
			});
	});
var $author$project$FileExplorer$FileExplorer$uploadImage = F4(
	function (fsItem, filename, contents, sessionId) {
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'filename',
						$elm$json$Json$Encode$string(filename)),
						_Utils_Tuple2(
						'uploadPath',
						$elm$json$Json$Encode$string(
							A2(
								$elm$core$Maybe$withDefault,
								'',
								A2(
									$elm$core$Maybe$map,
									function (p) {
										return p + '/';
									},
									A2(
										$elm$core$Maybe$map,
										$elm$core$String$join('/'),
										$elm$core$List$tail(
											$author$project$FileExplorer$FileExplorer$getPath(fsItem))))))),
						_Utils_Tuple2(
						'contents',
						$elm$json$Json$Encode$string(contents))
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					A3(
						$author$project$FileExplorer$FileExplorer$RefreshFilesys,
						$elm$core$Maybe$Just(fsItem),
						'Mise en ligne image base64: ' + filename,
						0),
					$author$project$FileExplorer$FileExplorer$decodeFiles),
				d$: 'uploadBase64Pic.php'
			});
	});
var $author$project$FileExplorer$FileExplorer$uploadImageAuto = F4(
	function (fsItem, filename, contents, sessionId) {
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'filename',
						$elm$json$Json$Encode$string(filename)),
						_Utils_Tuple2(
						'uploadPath',
						$elm$json$Json$Encode$string(
							A2(
								$elm$core$Maybe$withDefault,
								'',
								A2(
									$elm$core$Maybe$map,
									function (p) {
										return p + '/';
									},
									A2(
										$elm$core$Maybe$map,
										$elm$core$String$join('/'),
										$elm$core$List$tail(
											$author$project$FileExplorer$FileExplorer$getPath(fsItem))))))),
						_Utils_Tuple2(
						'contents',
						$elm$json$Json$Encode$string(contents))
					])));
		return $elm$http$Http$request(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					$author$project$FileExplorer$FileExplorer$Uploaded(filename),
					$author$project$Internals$CommonHelpers$decodeUploadStatus),
				gu: _List_Nil,
				gO: 'POST',
				hz: $elm$core$Maybe$Nothing,
				hC: $elm$core$Maybe$Just(filename),
				d$: 'uploadBase64PicAuto.php'
			});
	});
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $author$project$FileExplorer$FileExplorer$zipDownFilesys = F2(
	function (p, filesys) {
		var _v0 = filesys.a3;
		if (_v0.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!_v0.b.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var meta = _v0.a;
				var cs = _v0.b;
				var _v1 = A2($author$project$FileExplorer$FileExplorer$break, p, cs);
				var l = _v1.a;
				var r = _v1.b;
				if (!r.b) {
					return $elm$core$Maybe$Nothing;
				} else {
					var f = r.a;
					var fs = r.b;
					return $elm$core$Maybe$Just(
						_Utils_update(
							filesys,
							{
								bu: A2(
									$elm$core$List$cons,
									{bc: l, eF: meta, bl: fs},
									filesys.bu),
								a3: f
							}));
				}
			}
		}
	});
var $author$project$FileExplorer$FileExplorer$zipToFsItem = F2(
	function (path, filesys) {
		var helper = F2(
			function (remainingPath, filesys_) {
				if (!remainingPath.b) {
					return $elm$core$Maybe$Nothing;
				} else {
					if (!remainingPath.b.b) {
						var curr = remainingPath.a;
						return (!_Utils_eq(
							$author$project$FileExplorer$FileExplorer$getName(
								$author$project$FileExplorer$FileExplorer$extractFsItem(filesys_)),
							curr)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(filesys_);
					} else {
						var curr = remainingPath.a;
						var _v1 = remainingPath.b;
						var next = _v1.a;
						var rest = _v1.b;
						return (!_Utils_eq(
							$author$project$FileExplorer$FileExplorer$getName(
								$author$project$FileExplorer$FileExplorer$extractFsItem(filesys_)),
							curr)) ? $elm$core$Maybe$Nothing : A2(
							$elm$core$Maybe$andThen,
							helper(
								A2($elm$core$List$cons, next, rest)),
							A2(
								$author$project$FileExplorer$FileExplorer$zipDownFilesys,
								function (fsItem) {
									return _Utils_eq(
										$author$project$FileExplorer$FileExplorer$getName(fsItem),
										next);
								},
								filesys_));
					}
				}
			});
		return A2(helper, path, filesys);
	});
var $author$project$FileExplorer$FileExplorer$update = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 0:
				var mode = msg.a;
				var newModel = _Utils_update(
					model,
					{
						bF: A2(
							$elm$core$Maybe$map,
							$author$project$FileExplorer$FileExplorer$extractFsItem,
							A2($author$project$FileExplorer$FileExplorer$getCurrentFilesys, mode, model)),
						o: $elm$core$Maybe$Nothing
					});
				var f = function (mbFs) {
					var _v1 = A2($elm$core$Maybe$map, $author$project$FileExplorer$FileExplorer$rewindFilesys, mbFs);
					if (_v1.$ === 1) {
						return mbFs;
					} else {
						var otherwise = _v1;
						return otherwise;
					}
				};
				return _Utils_Tuple3(
					A3($author$project$FileExplorer$FileExplorer$updateFilesys, mode, newModel, f),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 1:
				var mode = msg.a;
				var _v2 = model.bF;
				if (_v2.$ === 1) {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				} else {
					var fsItem = _v2.a;
					var newModel = _Utils_update(
						model,
						{bF: $elm$core$Maybe$Nothing, o: $elm$core$Maybe$Nothing});
					var f = function (mbFs) {
						return A2(
							$elm$core$Maybe$withDefault,
							mbFs,
							A2(
								$elm$core$Maybe$map,
								$author$project$FileExplorer$FileExplorer$zipToFsItem(
									$author$project$FileExplorer$FileExplorer$getPath(fsItem)),
								A2($elm$core$Maybe$map, $author$project$FileExplorer$FileExplorer$rewindFilesys, mbFs)));
					};
					return _Utils_Tuple3(
						A3($author$project$FileExplorer$FileExplorer$updateFilesys, mode, newModel, f),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				}
			case 2:
				var mode = msg.a;
				var newModel = _Utils_update(
					model,
					{
						bF: A2(
							$elm$core$Maybe$map,
							$author$project$FileExplorer$FileExplorer$extractFsItem,
							A2($author$project$FileExplorer$FileExplorer$getCurrentFilesys, mode, model)),
						o: $elm$core$Maybe$Nothing
					});
				var f = function (mbFs) {
					var _v3 = A2($elm$core$Maybe$andThen, $author$project$FileExplorer$FileExplorer$zipUpFilesys, mbFs);
					if (_v3.$ === 1) {
						return mbFs;
					} else {
						var otherwise = _v3;
						return otherwise;
					}
				};
				return _Utils_Tuple3(
					A3($author$project$FileExplorer$FileExplorer$updateFilesys, mode, newModel, f),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 3:
				var mode = msg.a;
				var path = msg.b;
				var newModel = _Utils_update(
					model,
					{
						bF: A2(
							$elm$core$Maybe$map,
							$author$project$FileExplorer$FileExplorer$extractFsItem,
							A2($author$project$FileExplorer$FileExplorer$getCurrentFilesys, mode, model)),
						o: $elm$core$Maybe$Nothing
					});
				var f = function (mbFs) {
					return A2(
						$elm$core$Maybe$withDefault,
						mbFs,
						A2(
							$elm$core$Maybe$map,
							$author$project$FileExplorer$FileExplorer$zipToFsItem(path),
							A2($elm$core$Maybe$map, $author$project$FileExplorer$FileExplorer$rewindFilesys, mbFs)));
				};
				return _Utils_Tuple3(
					A3($author$project$FileExplorer$FileExplorer$updateFilesys, mode, newModel, f),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 4:
				var mode = msg.a;
				var fsItem = msg.b;
				if (_Utils_eq(
					model.o,
					$elm$core$Maybe$Just(fsItem))) {
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{bf: '', bJ: '', o: $elm$core$Maybe$Nothing}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				} else {
					var _v4 = A2(
						$elm$core$Maybe$map,
						$author$project$FileExplorer$FileExplorer$extractFsItem,
						A2($author$project$FileExplorer$FileExplorer$getCurrentFilesys, mode, model));
					if ((!_v4.$) && (!_v4.a.$)) {
						var _v5 = _v4.a;
						var meta = _v5.a;
						var children = _v5.b;
						return A2($elm$core$List$member, fsItem, children) ? _Utils_Tuple3(
							_Utils_update(
								model,
								{
									bf: '',
									bJ: $author$project$FileExplorer$FileExplorer$getName(fsItem),
									o: $elm$core$Maybe$Just(fsItem)
								}),
							$elm$core$Platform$Cmd$none,
							$elm$core$Maybe$Nothing) : _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
					} else {
						return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
					}
				}
			case 5:
				var s = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{bf: s}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 6:
				var mode = msg.a;
				var fsItem = msg.b;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							G: A2($elm$core$List$cons, fsItem, model.G),
							o: $elm$core$Maybe$Nothing
						}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								A2(
									$author$project$Auth$AuthPlugin$cmdIfLogged,
									config.be,
									A3(
										$author$project$FileExplorer$FileExplorer$makeNewFolder,
										fsItem,
										model.bf,
										A2($author$project$FileExplorer$FileExplorer$modeRoot, mode, model.Z)))),
								A6(
								$author$project$Auth$AuthPlugin$newLogIfLogged,
								config.be,
								config.eT,
								'Requête: Nouveau dossier ' + (model.bf + (' dans ' + $author$project$FileExplorer$FileExplorer$getName(fsItem))),
								$elm$core$Maybe$Nothing,
								false,
								true)
							])),
					$elm$core$Maybe$Nothing);
			case 7:
				var mode = msg.a;
				var fsItem = msg.b;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							G: A2($elm$core$List$cons, fsItem, model.G),
							o: $elm$core$Maybe$Nothing
						}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								A2(
									$author$project$Auth$AuthPlugin$cmdIfLogged,
									config.be,
									A2(
										$author$project$FileExplorer$FileExplorer$deleteFile,
										fsItem,
										A2($author$project$FileExplorer$FileExplorer$modeRoot, mode, model.Z)))),
								A6(
								$author$project$Auth$AuthPlugin$newLogIfLogged,
								config.be,
								config.eT,
								'Requête: Suppression ' + $author$project$FileExplorer$FileExplorer$getName(fsItem),
								$elm$core$Maybe$Nothing,
								false,
								true)
							])),
					$elm$core$Maybe$Nothing);
			case 8:
				var src = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							bv: $elm$core$Maybe$Just(src),
							G: A2($elm$core$List$cons, src, model.G)
						}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 9:
				var mode = msg.a;
				var dest = msg.b;
				var _v6 = model.bv;
				if (_v6.$ === 1) {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				} else {
					var src = _v6.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{bv: $elm$core$Maybe$Nothing}),
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A2(
									$elm$core$Platform$Cmd$map,
									model.bY,
									A2(
										$author$project$Auth$AuthPlugin$cmdIfLogged,
										config.be,
										A3(
											$author$project$FileExplorer$FileExplorer$pasteFile,
											src,
											dest,
											A2($author$project$FileExplorer$FileExplorer$modeRoot, mode, model.Z)))),
									A6(
									$author$project$Auth$AuthPlugin$newLogIfLogged,
									config.be,
									config.eT,
									'Requête: Collage de' + ($author$project$FileExplorer$FileExplorer$getName(src) + (' dans ' + $author$project$FileExplorer$FileExplorer$getName(dest))),
									$elm$core$Maybe$Nothing,
									false,
									true)
								])),
						$elm$core$Maybe$Nothing);
				}
			case 10:
				var newName = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{bJ: newName}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 11:
				var mode = msg.a;
				var fsItem = msg.b;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							G: A2($elm$core$List$cons, fsItem, model.G),
							o: $elm$core$Maybe$Nothing
						}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								A2(
									$author$project$Auth$AuthPlugin$cmdIfLogged,
									config.be,
									A3(
										$author$project$FileExplorer$FileExplorer$renameFile,
										fsItem,
										model.bJ,
										A2($author$project$FileExplorer$FileExplorer$modeRoot, mode, model.Z)))),
								A6(
								$author$project$Auth$AuthPlugin$newLogIfLogged,
								config.be,
								config.eT,
								'Requête: Renommage ' + $author$project$FileExplorer$FileExplorer$getName(fsItem),
								$elm$core$Maybe$Nothing,
								false,
								true)
							])),
					$elm$core$Maybe$Nothing);
			case 12:
				var mbToUnlock = msg.a;
				var log = msg.b;
				var root = msg.c;
				var res = msg.d;
				if (!res.$) {
					var fs = res.a;
					var _v8 = function () {
						if (!root) {
							return _Utils_Tuple2(
								model.ej,
								$elm$core$Maybe$Just(fs));
						} else {
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(fs),
								model.eo);
						}
					}();
					var newDocFiles = _v8.a;
					var newImageFiles = _v8.b;
					var _v10 = function () {
						if (!root) {
							return _Utils_Tuple2(
								A2(
									$elm$core$Maybe$map,
									$author$project$FileExplorer$FileExplorer$initFileSys,
									A3(
										$elm$core$List$foldr,
										F2(
											function (f, acc) {
												return A3($author$project$FileExplorer$FileExplorer$insert, f, 'images', acc);
											}),
										$elm$core$Maybe$Nothing,
										fs)),
								A2(
									$elm$core$Maybe$withDefault,
									_List_fromArray(
										['images']),
									A2(
										$elm$core$Maybe$map,
										$author$project$FileExplorer$FileExplorer$getPath,
										A2($elm$core$Maybe$map, $author$project$FileExplorer$FileExplorer$extractFsItem, model.aW))));
						} else {
							return _Utils_Tuple2(
								A2(
									$elm$core$Maybe$map,
									$author$project$FileExplorer$FileExplorer$initFileSys,
									A3(
										$elm$core$List$foldr,
										F2(
											function (f, acc) {
												return A3($author$project$FileExplorer$FileExplorer$insert, f, 'baseDocumentaire', acc);
											}),
										$elm$core$Maybe$Nothing,
										fs)),
								A2(
									$elm$core$Maybe$withDefault,
									_List_fromArray(
										['baseDocumentaire']),
									A2(
										$elm$core$Maybe$map,
										$author$project$FileExplorer$FileExplorer$getPath,
										A2($elm$core$Maybe$map, $author$project$FileExplorer$FileExplorer$extractFsItem, model.aV))));
						}
					}();
					var newFilesys = _v10.a;
					var currentPath = _v10.b;
					var _v12 = function () {
						if (!root) {
							return _Utils_Tuple2(
								function () {
									var _v14 = A2(
										$elm$core$Maybe$andThen,
										$author$project$FileExplorer$FileExplorer$zipToFsItem(currentPath),
										newFilesys);
									if (!_v14.$) {
										var result = _v14.a;
										return $elm$core$Maybe$Just(result);
									} else {
										return newFilesys;
									}
								}(),
								model.aV);
						} else {
							return _Utils_Tuple2(
								model.aW,
								function () {
									var _v15 = A2(
										$elm$core$Maybe$andThen,
										$author$project$FileExplorer$FileExplorer$zipToFsItem(currentPath),
										newFilesys);
									if (!_v15.$) {
										var result = _v15.a;
										return $elm$core$Maybe$Just(result);
									} else {
										return newFilesys;
									}
								}());
						}
					}();
					var mbIFilesys = _v12.a;
					var mbDFilesys = _v12.b;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								ej: newDocFiles,
								eo: newImageFiles,
								b4: function () {
									var _v16 = _Utils_Tuple2(newImageFiles, newDocFiles);
									if ((!_v16.a.$) && (!_v16.b.$)) {
										return $author$project$Internals$ToolHelpers$ToolLoadingSuccess;
									} else {
										return model.b4;
									}
								}(),
								G: A2(
									$elm$core$Maybe$withDefault,
									model.G,
									A2(
										$elm$core$Maybe$map,
										function (f) {
											return A2($elm_community$list_extra$List$Extra$remove, f, model.G);
										},
										mbToUnlock)),
								aV: mbDFilesys,
								aW: mbIFilesys,
								Z: root
							}),
						A5($author$project$Internals$CommonHelpers$newLog, config.eT, log, $elm$core$Maybe$Nothing, false, true),
						$elm$core$Maybe$Nothing);
				} else {
					var e = res.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								b4: _Utils_eq(model.b4, $author$project$Internals$ToolHelpers$ToolLoadingWaiting) ? $author$project$Internals$ToolHelpers$ToolLoadingFailure(
									$author$project$Internals$CommonHelpers$httpErrorToString(e)) : model.b4,
								G: A2(
									$elm$core$Maybe$withDefault,
									model.G,
									A2(
										$elm$core$Maybe$map,
										function (f) {
											return A2($elm_community$list_extra$List$Extra$remove, f, model.G);
										},
										mbToUnlock))
							}),
						A5(
							$author$project$Internals$CommonHelpers$newLog,
							config.eT,
							'Echec requête',
							$elm$core$Maybe$Just(
								$author$project$Internals$CommonHelpers$httpErrorToString(e)),
							true,
							true),
						$elm$core$Maybe$Nothing);
				}
			case 13:
				var mainPanelDisplay = function () {
					var _v17 = model.b5;
					if (_v17 === 1) {
						return 0;
					} else {
						return 1;
					}
				}();
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{eZ: false, b5: mainPanelDisplay, fv: false}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 14:
				var ut = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{dv: ut}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 15:
				var fsItem = msg.a;
				var _v18 = model.bG;
				if (_v18.$ === 1) {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				} else {
					var filename = _v18.a.E;
					var contents = _v18.a.cv;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{bT: false, c1: $elm$core$Maybe$Nothing, aN: $elm$core$Maybe$Nothing, aO: 0, aP: $elm$core$Maybe$Nothing, cE: 0, b5: 0, bG: $elm$core$Maybe$Nothing, da: $elm$core$Maybe$Nothing, aX: $elm$core$Maybe$Nothing, aY: $elm$core$Maybe$Nothing, b8: false, b9: false, di: 100}),
						A2(
							$elm$core$Platform$Cmd$map,
							model.bY,
							A2(
								$author$project$Auth$AuthPlugin$cmdIfLogged,
								config.be,
								A3(
									$author$project$FileExplorer$FileExplorer$uploadImage,
									fsItem,
									A2($elm$core$Maybe$withDefault, filename, model.c1),
									contents))),
						$elm$core$Maybe$Nothing);
				}
			case 16:
				var fsItem = msg.a;
				return _Utils_Tuple3(
					model,
					A2(
						$elm$core$Platform$Cmd$map,
						model.bY,
						$author$project$FileExplorer$FileExplorer$selectFiles(fsItem)),
					$elm$core$Maybe$Nothing);
			case 17:
				var fsItem = msg.a;
				var first = msg.b;
				var remaining = msg.c;
				var files = A2($elm$core$List$cons, first, remaining);
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							dr: 1,
							em: $elm$core$Dict$fromList(
								A2(
									$elm$core$List$map,
									function (f) {
										return _Utils_Tuple2(
											$elm$file$File$name(f),
											f);
									},
									files)),
							j: $elm$core$Dict$fromList(
								A2(
									$elm$core$List$map,
									function (f) {
										return _Utils_Tuple2(
											$elm$file$File$name(f),
											_Utils_Tuple3(
												0,
												$elm$file$File$size(f),
												$elm$core$Maybe$Nothing));
									},
									files))
						}),
					A2(
						$elm$core$Platform$Cmd$map,
						model.bY,
						$elm$core$Platform$Cmd$batch(
							A2(
								$elm$core$List$map,
								function (f) {
									return A2(
										$author$project$Auth$AuthPlugin$cmdIfLogged,
										config.be,
										A2($author$project$FileExplorer$FileExplorer$uploadFile, fsItem, f));
								},
								files))),
					$elm$core$Maybe$Nothing);
			case 18:
				var s = msg.a;
				var _v19 = A2($elm$core$Dict$get, s, model.em);
				if (!_v19.$) {
					var f = _v19.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								j: A3(
									$elm$core$Dict$insert,
									s,
									_Utils_Tuple3(
										0,
										$elm$file$File$size(f),
										$elm$core$Maybe$Nothing),
									model.j)
							}),
						function () {
							var _v20 = _Utils_Tuple2(
								config.be,
								A2(
									$elm$core$Maybe$map,
									$author$project$FileExplorer$FileExplorer$extractFsItem,
									A2($author$project$FileExplorer$FileExplorer$getCurrentFilesys, $author$project$FileExplorer$FileExplorer$Full, model)));
							if ((!_v20.a.$) && (!_v20.b.$)) {
								var info = _v20.a.a;
								var fsItem = _v20.b.a;
								return A2(
									$elm$core$Platform$Cmd$map,
									model.bY,
									A3($author$project$FileExplorer$FileExplorer$uploadFile, fsItem, f, info.fF));
							} else {
								return $elm$core$Platform$Cmd$none;
							}
						}(),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 19:
				return _Utils_Tuple3(
					model,
					A2($elm$core$Platform$Cmd$map, model.bY, $author$project$FileExplorer$FileExplorer$selectImages),
					$elm$core$Maybe$Nothing);
			case 20:
				var first = msg.a;
				var remaining = msg.b;
				var files = A2($elm$core$List$cons, first, remaining);
				var fileSizes = A3(
					$elm$core$List$foldr,
					F2(
						function (_v21, acc) {
							var n = _v21.a;
							var f = _v21.b;
							return A3(
								$elm$core$Dict$insert,
								$elm$file$File$name(f),
								$elm$file$File$size(f),
								acc);
						}),
					model.b0,
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (n, f) {
								return _Utils_Tuple2(n, f);
							}),
						files));
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							b0: fileSizes,
							de: A2(
								$elm$core$List$indexedMap,
								F2(
									function (n, f) {
										return _Utils_Tuple2(
											$elm$file$File$name(f),
											f);
									}),
								remaining)
						}),
					A2(
						$elm$core$Platform$Cmd$map,
						model.bY,
						A2(
							$elm$core$Task$perform,
							$author$project$FileExplorer$FileExplorer$Base64Img(
								$elm$file$File$name(first)),
							$elm$file$File$toUrl(first))),
					$elm$core$Maybe$Nothing);
			case 21:
				var filename = msg.a;
				var data = msg.b;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{ct: 1}),
					A3($author$project$FileExplorer$FileExplorer$processCmd, model, filename, data),
					$elm$core$Maybe$Nothing);
			case 22:
				var json = msg.a;
				var _v22 = A2($elm$json$Json$Decode$decodeValue, $author$project$FileExplorer$FileExplorer$decodeProcessedData, json);
				if (!_v22.$) {
					var pi = _v22.a;
					var content = pi.iI;
					var filename = pi.E;
					var _v23 = function () {
						var _v24 = model.de;
						if (!_v24.b) {
							return _Utils_Tuple2($elm$core$Platform$Cmd$none, _List_Nil);
						} else {
							var _v25 = _v24.a;
							var filename_ = _v25.a;
							var file = _v25.b;
							var rest = _v24.b;
							return _Utils_Tuple2(
								A2(
									$elm$core$Platform$Cmd$map,
									model.bY,
									A2(
										$elm$core$Task$perform,
										$author$project$FileExplorer$FileExplorer$Base64Img(filename_),
										$elm$file$File$toUrl(file))),
								rest);
						}
					}();
					var cmd = _v23.a;
					var processingQueue = _v23.b;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								a_: A3($elm$core$Dict$insert, filename, pi, model.a_),
								de: processingQueue
							}),
						cmd,
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 23:
				var size = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{dq: size}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 24:
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{ct: 0, dr: 0, b0: $elm$core$Dict$empty, a_: $elm$core$Dict$empty, de: _List_Nil, j: $elm$core$Dict$empty}),
					A2(
						$elm$core$Platform$Cmd$map,
						model.bY,
						$elm$core$Platform$Cmd$batch(
							A2(
								$elm$core$List$map,
								$elm$http$Http$cancel,
								$elm$core$Dict$keys(model.j)))),
					$elm$core$Maybe$Nothing);
			case 25:
				var s = msg.a;
				var _v26 = A2($elm$core$Dict$get, s, model.a_);
				if (!_v26.$) {
					var p = _v26.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								j: A3(
									$elm$core$Dict$insert,
									s,
									_Utils_Tuple3(0, p.fJ, $elm$core$Maybe$Nothing),
									model.j)
							}),
						function () {
							var _v27 = _Utils_Tuple2(
								config.be,
								A2(
									$elm$core$Maybe$map,
									$author$project$FileExplorer$FileExplorer$extractFsItem,
									A2($author$project$FileExplorer$FileExplorer$getCurrentFilesys, $author$project$FileExplorer$FileExplorer$Full, model)));
							if ((!_v27.a.$) && (!_v27.b.$)) {
								var info = _v27.a.a;
								var fsItem = _v27.b.a;
								return A2(
									$elm$core$Platform$Cmd$map,
									model.bY,
									A4($author$project$FileExplorer$FileExplorer$uploadImageAuto, fsItem, p.E, p.iI, info.fF));
							} else {
								return $elm$core$Platform$Cmd$none;
							}
						}(),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 26:
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							ct: 2,
							j: A2(
								$elm$core$Dict$map,
								F2(
									function (_v28, p) {
										return _Utils_Tuple3(0, p.fJ, $elm$core$Maybe$Nothing);
									}),
								model.a_)
						}),
					function () {
						var _v29 = _Utils_Tuple2(
							config.be,
							A2(
								$elm$core$Maybe$map,
								$author$project$FileExplorer$FileExplorer$extractFsItem,
								A2($author$project$FileExplorer$FileExplorer$getCurrentFilesys, $author$project$FileExplorer$FileExplorer$Full, model)));
						if ((!_v29.a.$) && (!_v29.b.$)) {
							var info = _v29.a.a;
							var fsItem = _v29.b.a;
							return A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								$elm$core$Platform$Cmd$batch(
									$elm$core$List$reverse(
										A3(
											$elm$core$Dict$foldr,
											F3(
												function (k, v, acc) {
													return A2(
														$elm$core$List$cons,
														A4($author$project$FileExplorer$FileExplorer$uploadImageAuto, fsItem, v.E, v.iI, info.fF),
														acc);
												}),
											_List_Nil,
											model.a_))));
						} else {
							return $elm$core$Platform$Cmd$none;
						}
					}(),
					$elm$core$Maybe$Nothing);
			case 27:
				var filename = msg.a;
				var progress = msg.b;
				if (!progress.$) {
					var sent = progress.a.lx;
					var size = progress.a.fJ;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								j: A3(
									$elm$core$Dict$update,
									filename,
									function (mv) {
										if (mv.$ === 1) {
											return $elm$core$Maybe$Nothing;
										} else {
											var _v32 = mv.a;
											var us = _v32.c;
											return $elm$core$Maybe$Just(
												_Utils_Tuple3(sent, size, us));
										}
									},
									model.j)
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				} else {
					var received = progress.a.k1;
					var size = progress.a.fJ;
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 28:
				var filename = msg.a;
				var res = msg.b;
				if (!res.$) {
					if (!res.a.$) {
						var _v34 = res.a;
						var newUploadProgress = A3(
							$elm$core$Dict$update,
							filename,
							function (mv) {
								if (mv.$ === 1) {
									return $elm$core$Maybe$Nothing;
								} else {
									var _v37 = mv.a;
									var sent = _v37.a;
									var size = _v37.b;
									return $elm$core$Maybe$Just(
										_Utils_Tuple3(
											sent,
											size,
											$elm$core$Maybe$Just($author$project$Internals$CommonHelpers$UploadSuccessful)));
								}
							},
							model.j);
						var uploadDone = function (xs) {
							return _Utils_eq(
								$elm$core$List$length(xs),
								$elm$core$Dict$size(newUploadProgress));
						}(
							A2(
								$elm$core$List$filter,
								function (_v35) {
									var s = _v35.c;
									return _Utils_eq(
										s,
										$elm$core$Maybe$Just($author$project$Internals$CommonHelpers$UploadSuccessful));
								},
								$elm$core$Dict$values(newUploadProgress)));
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{j: newUploadProgress}),
							uploadDone ? A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								A2(
									$author$project$Auth$AuthPlugin$cmdIfLogged,
									config.be,
									A2(
										$author$project$FileExplorer$FileExplorer$getFileList,
										model.Z,
										$elm$core$Dict$keys(newUploadProgress)))) : $elm$core$Platform$Cmd$none,
							$elm$core$Maybe$Nothing);
					} else {
						var e = res.a.a;
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{
									j: A3(
										$elm$core$Dict$update,
										filename,
										function (mv) {
											if (mv.$ === 1) {
												return $elm$core$Maybe$Nothing;
											} else {
												var _v39 = mv.a;
												var sent = _v39.a;
												var size = _v39.b;
												return $elm$core$Maybe$Just(
													_Utils_Tuple3(
														sent,
														size,
														$elm$core$Maybe$Just(
															$author$project$Internals$CommonHelpers$UploadFailure(e))));
											}
										},
										model.j)
								}),
							$elm$core$Platform$Cmd$none,
							$elm$core$Maybe$Nothing);
					}
				} else {
					var e = res.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								j: A3(
									$elm$core$Dict$update,
									filename,
									function (mv) {
										if (mv.$ === 1) {
											return $elm$core$Maybe$Nothing;
										} else {
											var _v41 = mv.a;
											var sent = _v41.a;
											var size = _v41.b;
											return $elm$core$Maybe$Just(
												_Utils_Tuple3(
													sent,
													size,
													$elm$core$Maybe$Just(
														$author$project$Internals$CommonHelpers$UploadFailure(
															$author$project$Internals$CommonHelpers$httpErrorToString(e)))));
										}
									},
									model.j)
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				}
			case 29:
				var data = msg.a;
				var newImage = {cv: data.cv, E: data.E, cB: data.cB, jx: data.jx, mt: data.mt};
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							cE: 1,
							bG: $elm$core$Maybe$Just(newImage),
							da: $elm$core$Maybe$Just(data.cB),
							aX: $elm$core$Maybe$Just(data.jx),
							aY: $elm$core$Maybe$Just(data.mt),
							b8: false
						}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 30:
				var data = msg.a;
				var newImage = {cv: data.cv, E: data.E, cB: data.cB, jx: data.jx, mt: data.mt};
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							bT: false,
							cE: 1,
							bG: $elm$core$Maybe$Just(newImage),
							b8: false,
							b9: false
						}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 31:
				if (!msg.a.$) {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				} else {
					var e = msg.a.a;
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 32:
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							aN: model.aP,
							aO: A2($elm$core$Basics$modBy, 360, 90 + model.aO),
							aP: model.aN,
							aX: model.aY,
							aY: model.aX,
							b9: true
						}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 33:
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							aN: model.aP,
							aO: A2($elm$core$Basics$modBy, 360, model.aO - 90),
							aP: model.aN,
							aX: model.aY,
							aY: model.aX,
							b9: true
						}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 34:
				var n = msg.a;
				var _v42 = _Utils_Tuple2(model.aY, model.aX);
				if ((!_v42.a.$) && (!_v42.b.$)) {
					var oriW = _v42.a.a;
					var oriH = _v42.b.a;
					var ratio = oriW / oriH;
					var desiredWidth = (oriW * n) / 100;
					var desiredHeight = desiredWidth / ratio;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								bT: true,
								aN: $elm$core$Maybe$Just(
									$elm$core$Basics$round(desiredHeight)),
								aP: $elm$core$Maybe$Just(
									$elm$core$Basics$round(desiredWidth)),
								di: n
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 35:
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{b8: true}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 36:
				var filename = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							c1: $elm$core$Maybe$Just(filename)
						}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 37:
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{ct: 0, bT: false, aN: $elm$core$Maybe$Nothing, aO: 0, aP: $elm$core$Maybe$Nothing, cE: 0, bG: $elm$core$Maybe$Nothing, da: $elm$core$Maybe$Nothing, aX: $elm$core$Maybe$Nothing, aY: $elm$core$Maybe$Nothing, b8: false, b9: false, di: 100}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 38:
				var root = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{Z: root}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 39:
				var s = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{e6: s}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			default:
				return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
		}
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FicheUpdated = F2(
	function (a, b) {
		return {$: 6, a: a, b: b};
	});
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0;
		return A2($elm$core$Dict$member, key, dict);
	});
var $elm_community$list_extra$List$Extra$uniqueHelp = F4(
	function (f, existing, remaining, accumulator) {
		uniqueHelp:
		while (true) {
			if (!remaining.b) {
				return $elm$core$List$reverse(accumulator);
			} else {
				var first = remaining.a;
				var rest = remaining.b;
				var computedFirst = f(first);
				if (A2($elm$core$Set$member, computedFirst, existing)) {
					var $temp$f = f,
						$temp$existing = existing,
						$temp$remaining = rest,
						$temp$accumulator = accumulator;
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				} else {
					var $temp$f = f,
						$temp$existing = A2($elm$core$Set$insert, computedFirst, existing),
						$temp$remaining = rest,
						$temp$accumulator = A2($elm$core$List$cons, first, accumulator);
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$uniqueBy = F2(
	function (f, list) {
		return A4($elm_community$list_extra$List$Extra$uniqueHelp, f, $elm$core$Set$empty, list, _List_Nil);
	});
var $author$project$GeneralDirectoryEditor$GeneralDirHelpers$appendLabel = F2(
	function (mbLabel, labelList) {
		return A2(
			$elm$core$Maybe$withDefault,
			labelList,
			A2(
				$elm$core$Maybe$map,
				function (l) {
					return A2(
						$elm_community$list_extra$List$Extra$uniqueBy,
						function (l_) {
							return _Utils_ap(
								function ($) {
									return $.kA;
								}(l_),
								_Utils_ap(
									A2(
										$elm$core$Basics$composeL,
										function ($) {
											return $.d$;
										},
										function ($) {
											return $.j9;
										})(l_),
									function ($) {
										return $.j2;
									}(l_)));
						},
						A2(
							$elm$core$List$append,
							labelList,
							_List_fromArray(
								[l])));
				},
				mbLabel));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirJson$decodeSuccess = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['message']),
	$elm$json$Json$Decode$succeed(true));
var $author$project$GeneralDirectoryEditor$GeneralDirJson$encodeLabel = function (_v0) {
	var nom = _v0.kA;
	var logo = _v0.j9;
	var lien = _v0.j2;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'nom',
				$elm$json$Json$Encode$string(nom)),
				_Utils_Tuple2(
				'logo',
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'url',
							$elm$json$Json$Encode$string(logo.d$)),
							_Utils_Tuple2(
							'width',
							$elm$json$Json$Encode$int(logo.mt)),
							_Utils_Tuple2(
							'height',
							$elm$json$Json$Encode$int(logo.jx))
						]))),
				_Utils_Tuple2(
				'lien',
				$elm$json$Json$Encode$string(lien))
			]));
};
var $author$project$GeneralDirectoryEditor$GeneralDirJson$encodeTel = function (tel) {
	switch (tel.$) {
		case 0:
			var s = tel.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'TelFixe',
						$elm$json$Json$Encode$string(s))
					]));
		case 1:
			var s = tel.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'TelPortable',
						$elm$json$Json$Encode$string(s))
					]));
		default:
			var _v1 = tel.a;
			var s1 = _v1.a;
			var s2 = _v1.b;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'TelBoth',
						$elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'TelFixe',
									$elm$json$Json$Encode$string(s1)),
									_Utils_Tuple2(
									'TelPortable',
									$elm$json$Json$Encode$string(s2))
								])))
					]));
	}
};
var $author$project$GeneralDirectoryEditor$GeneralDirJson$encodeFiche = function (f) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'uuid',
				$elm$json$Json$Encode$string(
					$TSFoster$elm_uuid$UUID$toString(f.fS))),
				_Utils_Tuple2(
				'categories',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, f.cZ)),
				_Utils_Tuple2(
				'natureActiv',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, f.ko)),
				_Utils_Tuple2(
				'refOt',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2(
						$elm$core$Maybe$map,
						function (_v0) {
							var n = _v0.a;
							var s = _v0.b;
							return $elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'ref',
										$elm$json$Json$Encode$int(n)),
										_Utils_Tuple2(
										'link',
										$elm$json$Json$Encode$string(s))
									]));
						},
						f.k3))),
				_Utils_Tuple2(
				'label',
				A2($elm$json$Json$Encode$list, $author$project$GeneralDirectoryEditor$GeneralDirJson$encodeLabel, f.O)),
				_Utils_Tuple2(
				'rank',
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'stars',
							A2(
								$elm$core$Maybe$withDefault,
								$elm$json$Json$Encode$null,
								A2($elm$core$Maybe$map, $elm$json$Json$Encode$int, f.k0.lK))),
							_Utils_Tuple2(
							'epis',
							A2(
								$elm$core$Maybe$withDefault,
								$elm$json$Json$Encode$null,
								A2($elm$core$Maybe$map, $elm$json$Json$Encode$int, f.k0.gh)))
						]))),
				_Utils_Tuple2(
				'nomEntite',
				$elm$json$Json$Encode$string(f.kB)),
				_Utils_Tuple2(
				'responsables',
				A2(
					$elm$json$Json$Encode$list,
					function (r) {
						return $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'poste',
									$elm$json$Json$Encode$string(r.kY)),
									_Utils_Tuple2(
									'nom',
									$elm$json$Json$Encode$string(r.kA)),
									_Utils_Tuple2(
									'tel',
									$author$project$GeneralDirectoryEditor$GeneralDirJson$encodeTel(r.l_))
								]));
					},
					f.k9)),
				_Utils_Tuple2(
				'adresse',
				$elm$json$Json$Encode$string(f.hT)),
				_Utils_Tuple2(
				'telNumber',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2($elm$core$Maybe$map, $author$project$GeneralDirectoryEditor$GeneralDirJson$encodeTel, f.l$))),
				_Utils_Tuple2(
				'fax',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2($elm$core$Maybe$map, $elm$json$Json$Encode$string, f.je))),
				_Utils_Tuple2(
				'email',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, f.i4)),
				_Utils_Tuple2(
				'site',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2(
						$elm$core$Maybe$map,
						function (_v1) {
							var l = _v1.a;
							var url = _v1.b;
							return $elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'label',
										$elm$json$Json$Encode$string(l)),
										_Utils_Tuple2(
										'url',
										$elm$json$Json$Encode$string(url))
									]));
						},
						f.lE))),
				_Utils_Tuple2(
				'pjaun',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2($elm$core$Maybe$map, $elm$json$Json$Encode$string, f.dN))),
				_Utils_Tuple2(
				'visuel',
				$elm$json$Json$Encode$string(f.mr)),
				_Utils_Tuple2(
				'description',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, f.ei)),
				_Utils_Tuple2(
				'linkedDocs',
				A2(
					$elm$json$Json$Encode$list,
					function (ld) {
						return $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'url',
									$elm$json$Json$Encode$string(ld.d$)),
									_Utils_Tuple2(
									'label',
									$elm$json$Json$Encode$string(ld.O)),
									_Utils_Tuple2(
									'descr',
									A2(
										$elm$core$Maybe$withDefault,
										$elm$json$Json$Encode$null,
										A2($elm$core$Maybe$map, $elm$json$Json$Encode$string, ld.i_))),
									_Utils_Tuple2(
									'expiryDate',
									A2(
										$elm$core$Maybe$withDefault,
										$elm$json$Json$Encode$null,
										A2(
											$elm$core$Maybe$map,
											A2($elm$core$Basics$composeL, $elm$json$Json$Encode$int, $elm$time$Time$posixToMillis),
											ld.i9)))
								]));
					},
					f.j4)),
				_Utils_Tuple2(
				'ouverture',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2(
						$elm$core$Maybe$map,
						function (o) {
							if (o === 1) {
								return $elm$json$Json$Encode$string('TteAnnee');
							} else {
								return $elm$json$Json$Encode$string('Saisonniere');
							}
						},
						f.kN))),
				_Utils_Tuple2(
				'lastEdit',
				$elm$json$Json$Encode$int(
					$elm$time$Time$posixToMillis(f.dy)))
			]));
};
var $elm$http$Http$stringResolver = A2(_Http_expect, '', $elm$core$Basics$identity);
var $author$project$Internals$CommonHelpers$jsonResolver = function (decoder) {
	return $elm$http$Http$stringResolver(
		function (response) {
			switch (response.$) {
				case 0:
					var url = response.a;
					return $elm$core$Result$Err(
						$elm$http$Http$BadUrl(url));
				case 1:
					return $elm$core$Result$Err($elm$http$Http$Timeout);
				case 2:
					return $elm$core$Result$Err($elm$http$Http$NetworkError);
				case 3:
					var metadata = response.a;
					var body = response.b;
					return $elm$core$Result$Err(
						$elm$http$Http$BadStatus(metadata.lM));
				default:
					var metadata = response.a;
					var body = response.b;
					var _v1 = A2($elm$json$Json$Decode$decodeString, decoder, body);
					if (!_v1.$) {
						var value = _v1.a;
						return $elm$core$Result$Ok(value);
					} else {
						var err = _v1.a;
						return $elm$core$Result$Err(
							$elm$http$Http$BadBody(
								$elm$json$Json$Decode$errorToString(err)));
					}
			}
		});
};
var $elm$core$Task$fail = _Scheduler_fail;
var $elm$http$Http$resultToTask = function (result) {
	if (!result.$) {
		var a = result.a;
		return $elm$core$Task$succeed(a);
	} else {
		var x = result.a;
		return $elm$core$Task$fail(x);
	}
};
var $elm$http$Http$task = function (r) {
	return A3(
		_Http_toTask,
		0,
		$elm$http$Http$resultToTask,
		{h0: false, eY: r.eY, du: r.k6, gu: r.gu, gO: r.gO, hz: r.hz, hC: $elm$core$Maybe$Nothing, d$: r.d$});
};
var $author$project$GeneralDirectoryEditor$GeneralDirJson$updateFicheTask = F2(
	function (fiche, sessionId) {
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'fiche',
						$author$project$GeneralDirectoryEditor$GeneralDirJson$encodeFiche(fiche))
					])));
		return $elm$http$Http$task(
			{
				eY: body,
				gu: _List_Nil,
				gO: 'Post',
				k6: $author$project$Internals$CommonHelpers$jsonResolver($author$project$GeneralDirectoryEditor$GeneralDirJson$decodeSuccess),
				hz: $elm$core$Maybe$Nothing,
				d$: 'updateFiche.php'
			});
	});
var $author$project$GeneralDirectoryEditor$GeneralDirHelpers$batchFichesUpdate = F2(
	function (logInfo, fichesToUpdate) {
		if (!logInfo.$) {
			var sessionId = logInfo.a.fF;
			return $elm$core$Platform$Cmd$batch(
				A2(
					$elm$core$List$map,
					function (f) {
						return A2(
							$elm$core$Task$attempt,
							$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FicheUpdated(f),
							A2(
								$elm$core$Task$andThen,
								function (t) {
									var datedFb = _Utils_update(
										f,
										{dy: t});
									return A2($author$project$GeneralDirectoryEditor$GeneralDirJson$updateFicheTask, datedFb, sessionId);
								},
								$elm$time$Time$now));
					},
					fichesToUpdate));
		} else {
			return $elm$core$Platform$Cmd$none;
		}
	});
var $AdrianRibao$elm_derberos_date$Derberos$Date$Core$monthToNumber1based = function (month) {
	switch (month) {
		case 0:
			return 1;
		case 1:
			return 2;
		case 2:
			return 3;
		case 3:
			return 4;
		case 4:
			return 5;
		case 5:
			return 6;
		case 6:
			return 7;
		case 7:
			return 8;
		case 8:
			return 9;
		case 9:
			return 10;
		case 10:
			return 11;
		default:
			return 12;
	}
};
var $AdrianRibao$elm_derberos_date$Derberos$Date$Core$newDateRecord = F8(
	function (year, month, day, hour, minute, second, millis, zone) {
		return {e5: day, gz: hour, ew: millis, gP: minute, ft: month, lk: second, fX: year, fY: zone};
	});
var $elm$time$Time$toHour = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			24,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60));
	});
var $elm$time$Time$toMillis = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			1000,
			$elm$time$Time$posixToMillis(time));
	});
var $elm$time$Time$toMinute = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2($elm$time$Time$toAdjustedMinutes, zone, time));
	});
var $elm$time$Time$toSecond = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				1000));
	});
var $elm$time$Time$toYear = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).fX;
	});
var $AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilFromPosixWithTimezone = F2(
	function (tz, time) {
		var zeroOffset = A2($elm$time$Time$customZone, 0, _List_Nil);
		var year = A2($elm$time$Time$toYear, tz, time);
		var second = A2($elm$time$Time$toSecond, tz, time);
		var month = $AdrianRibao$elm_derberos_date$Derberos$Date$Core$monthToNumber1based(
			A2($elm$time$Time$toMonth, tz, time));
		var minute = A2($elm$time$Time$toMinute, tz, time);
		var millis = A2($elm$time$Time$toMillis, tz, time);
		var hour = A2($elm$time$Time$toHour, tz, time);
		var day = A2($elm$time$Time$toDay, tz, time);
		return A8($AdrianRibao$elm_derberos_date$Derberos$Date$Core$newDateRecord, year, month, day, hour, minute, second, millis, zeroOffset);
	});
var $AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilToPosixUnadjusted = function (dateRecord) {
	var y = dateRecord.fX - ((dateRecord.ft <= 2) ? 1 : 0);
	var time = ((((dateRecord.gz * 3600) * 1000) + ((dateRecord.gP * 60) * 1000)) + (dateRecord.lk * 1000)) + dateRecord.ew;
	var mp = A2($elm$core$Basics$modBy, 12, dateRecord.ft + 9);
	var era = $elm$core$Basics$floor(y / 400);
	var yoe = y - (era * 400);
	var doy = (((((153 * mp) + 2) / 5) | 0) + dateRecord.e5) - 1;
	var doe = (((yoe * 365) + ((yoe / 4) | 0)) - ((yoe / 100) | 0)) + doy;
	var days = ((era * 146097) + doe) - 719468;
	var resultInMilliseconds = (((days * 24) * 3600) * 1000) + time;
	return $elm$time$Time$millisToPosix(resultInMilliseconds);
};
var $AdrianRibao$elm_derberos_date$Derberos$Date$Core$getTzOffset = F2(
	function (zone, time) {
		var utcMillis = $elm$time$Time$posixToMillis(time);
		var localMillis = $elm$time$Time$posixToMillis(
			$AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilToPosixUnadjusted(
				A2($AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilFromPosixWithTimezone, zone, time)));
		return ((localMillis - utcMillis) / 60000) | 0;
	});
var $AdrianRibao$elm_derberos_date$Derberos$Date$Core$adjustMilliseconds = F2(
	function (zone, time) {
		var offset = A2($AdrianRibao$elm_derberos_date$Derberos$Date$Core$getTzOffset, zone, time);
		var millis = $elm$time$Time$posixToMillis(time);
		return $elm$time$Time$millisToPosix(millis - (offset * 60000));
	});
var $AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilToPosix = function (dateRecord) {
	return A2(
		$AdrianRibao$elm_derberos_date$Derberos$Date$Core$adjustMilliseconds,
		dateRecord.fY,
		$AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilToPosixUnadjusted(dateRecord));
};
var $author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeActivs = function (fiches) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (_v0, f, acc) {
				return A3(
					$elm$core$List$foldr,
					F2(
						function (a, acc_) {
							return A2($elm$core$Set$insert, a, acc_);
						}),
					acc,
					f.ko);
			}),
		$elm$core$Set$empty,
		fiches);
};
var $author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeCats = function (fiches) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (_v0, f, acc) {
				return A3(
					$elm$core$List$foldr,
					F2(
						function (c, acc_) {
							return A2($elm$core$Set$insert, c, acc_);
						}),
					acc,
					f.cZ);
			}),
		$elm$core$Set$empty,
		fiches);
};
var $author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeLabels = function (fiches) {
	return A2(
		$elm_community$list_extra$List$Extra$uniqueBy,
		function (_v1) {
			var nom = _v1.kA;
			var logo = _v1.j9;
			var lien = _v1.j2;
			return _Utils_ap(
				nom,
				_Utils_ap(logo.d$, lien));
		},
		A3(
			$elm$core$Dict$foldr,
			F3(
				function (_v0, f, acc) {
					return A3(
						$elm$core$List$foldr,
						F2(
							function (l, acc_) {
								return A2($elm$core$List$cons, l, acc_);
							}),
						acc,
						f.O);
				}),
			_List_Nil,
			fiches));
};
var $elm_community$list_extra$List$Extra$findIndexHelp = F3(
	function (index, predicate, list) {
		findIndexHelp:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					return $elm$core$Maybe$Just(index);
				} else {
					var $temp$index = index + 1,
						$temp$predicate = predicate,
						$temp$list = xs;
					index = $temp$index;
					predicate = $temp$predicate;
					list = $temp$list;
					continue findIndexHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$findIndex = $elm_community$list_extra$List$Extra$findIndexHelp(0);
var $elm_community$list_extra$List$Extra$elemIndex = function (x) {
	return $elm_community$list_extra$List$Extra$findIndex(
		$elm$core$Basics$eq(x));
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLabel = A3(
	$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$Label,
	'',
	{jx: 0, d$: '', mt: 0},
	'');
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLinkedDoc = {i_: $elm$core$Maybe$Nothing, i9: $elm$core$Maybe$Nothing, O: '', d$: ''};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyTel = $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelFixe('');
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyResp = {kA: '', kY: '', l_: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyTel};
var $author$project$GeneralDirectoryEditor$GeneralDirHelpers$extractLabel = F2(
	function (model, mbLabelName) {
		return A2(
			$elm$core$Maybe$andThen,
			function (l) {
				return A2(
					$elm$core$Dict$get,
					l,
					$elm$core$Dict$fromList(
						A2(
							$elm$core$List$map,
							function (l_) {
								return _Utils_Tuple2(l_.kA, l_);
							},
							model.j1)));
			},
			mbLabelName);
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ficheToBuffer = function (fiche) {
	return {
		hT: fiche.hT,
		cZ: fiche.cZ,
		ei: fiche.ei,
		i4: fiche.i4,
		je: fiche.je,
		O: fiche.O,
		dy: fiche.dy,
		j4: fiche.j4,
		ko: fiche.ko,
		kB: fiche.kB,
		kN: fiche.kN,
		dN: fiche.dN,
		k0: fiche.k0,
		k3: fiche.k3,
		k9: fiche.k9,
		lE: fiche.lE,
		l$: fiche.l$,
		fS: $elm$core$Maybe$Just(fiche.fS),
		mr: fiche.mr
	};
};
var $elm_community$list_extra$List$Extra$updateIf = F3(
	function (predicate, update, list) {
		return A2(
			$elm$core$List$map,
			function (item) {
				return predicate(item) ? update(item) : item;
			},
			list);
	});
var $elm_community$list_extra$List$Extra$setIf = F3(
	function (predicate, replacement, list) {
		return A3(
			$elm_community$list_extra$List$Extra$updateIf,
			predicate,
			$elm$core$Basics$always(replacement),
			list);
	});
var $author$project$GeneralDirectoryEditor$GeneralDirHelpers$filterAndUpdate = F5(
	function (model, getter, setter, original, _new) {
		return A3(
			$elm$core$Dict$foldr,
			F3(
				function (k, f, _v0) {
					var newDict = _v0.a;
					var toUpdate = _v0.b;
					if (A2(
						$elm$core$List$member,
						original,
						getter(f))) {
						var newVal = A3(
							$elm_community$list_extra$List$Extra$setIf,
							function (l) {
								return _Utils_eq(l, original);
							},
							_new,
							getter(f));
						var newFiche = A2(setter, f, newVal);
						return _Utils_Tuple2(
							A3($elm$core$Dict$insert, k, newFiche, newDict),
							A2($elm$core$List$cons, newFiche, toUpdate));
					} else {
						return _Utils_Tuple2(
							A3($elm$core$Dict$insert, k, f, newDict),
							toUpdate);
					}
				}),
			_Utils_Tuple2($elm$core$Dict$empty, _List_Nil),
			model.jg);
	});
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $author$project$Internals$CommonHelpers$parseDate = F3(
	function (currentTime, zone, s) {
		var _v0 = A2(
			$elm$core$List$filterMap,
			$elm$core$String$toInt,
			A2($elm$core$String$split, '/', s));
		if (((_v0.b && _v0.b.b) && _v0.b.b.b) && (!_v0.b.b.b.b)) {
			var day = _v0.a;
			var _v1 = _v0.b;
			var month = _v1.a;
			var _v2 = _v1.b;
			var year = _v2.a;
			var choosenTime = $AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilToPosix(
				A8($AdrianRibao$elm_derberos_date$Derberos$Date$Core$newDateRecord, year, month, day, 0, 0, 0, 0, $elm$time$Time$utc));
			return (_Utils_cmp(
				$elm$time$Time$posixToMillis(currentTime),
				$elm$time$Time$posixToMillis(choosenTime)) > 0) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				_Utils_Tuple3(day, month, year));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$GeneralDirectoryEditor$GeneralDirJson$removeFiche = F2(
	function (fiche, sessionId) {
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'uuid',
						$elm$json$Json$Encode$string(
							$TSFoster$elm_uuid$UUID$toString(fiche.fS)))
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FicheUpdated(fiche),
					$author$project$GeneralDirectoryEditor$GeneralDirJson$decodeSuccess),
				d$: 'removeFiche.php'
			});
	});
var $author$project$GeneralDirectoryEditor$GeneralDirHelpers$setFicheActiv = F2(
	function (fiche, val) {
		return _Utils_update(
			fiche,
			{ko: val});
	});
var $author$project$GeneralDirectoryEditor$GeneralDirHelpers$setFicheCat = F2(
	function (fiche, val) {
		return _Utils_update(
			fiche,
			{cZ: val});
	});
var $author$project$GeneralDirectoryEditor$GeneralDirHelpers$setFicheLabel = F2(
	function (fiche, val) {
		return _Utils_update(
			fiche,
			{O: val});
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $elm_community$list_extra$List$Extra$splitAt = F2(
	function (n, xs) {
		return _Utils_Tuple2(
			A2($elm$core$List$take, n, xs),
			A2($elm$core$List$drop, n, xs));
	});
var $elm_community$list_extra$List$Extra$uncons = function (list) {
	if (!list.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var first = list.a;
		var rest = list.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(first, rest));
	}
};
var $elm_community$list_extra$List$Extra$swapAt = F3(
	function (index1, index2, l) {
		swapAt:
		while (true) {
			if (_Utils_eq(index1, index2) || (index1 < 0)) {
				return l;
			} else {
				if (_Utils_cmp(index1, index2) > 0) {
					var $temp$index1 = index2,
						$temp$index2 = index1,
						$temp$l = l;
					index1 = $temp$index1;
					index2 = $temp$index2;
					l = $temp$l;
					continue swapAt;
				} else {
					var _v0 = A2($elm_community$list_extra$List$Extra$splitAt, index1, l);
					var part1 = _v0.a;
					var tail1 = _v0.b;
					var _v1 = A2($elm_community$list_extra$List$Extra$splitAt, index2 - index1, tail1);
					var head2 = _v1.a;
					var tail2 = _v1.b;
					var _v2 = _Utils_Tuple2(
						$elm_community$list_extra$List$Extra$uncons(head2),
						$elm_community$list_extra$List$Extra$uncons(tail2));
					if ((!_v2.a.$) && (!_v2.b.$)) {
						var _v3 = _v2.a.a;
						var value1 = _v3.a;
						var part2 = _v3.b;
						var _v4 = _v2.b.a;
						var value2 = _v4.a;
						var part3 = _v4.b;
						return $elm$core$List$concat(
							_List_fromArray(
								[
									part1,
									A2($elm$core$List$cons, value2, part2),
									A2($elm$core$List$cons, value1, part3)
								]));
					} else {
						return l;
					}
				}
			}
		}
	});
var $author$project$GeneralDirectoryEditor$GeneralDirHelpers$validLabel = function (_v0) {
	var nom = _v0.kA;
	var logo = _v0.j9;
	var lien = _v0.j2;
	return (nom !== '') && ((logo.d$ !== '') && (lien !== ''));
};
var $author$project$GeneralDirectoryEditor$GeneralDirHelpers$validLinkedDoc = function (_v0) {
	var url = _v0.d$;
	var label = _v0.O;
	return (url !== '') && (label !== '');
};
var $author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$internalUpdate = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 0:
				var nom = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							km: $elm$core$Maybe$Just(nom)
						}),
					$elm$core$Platform$Cmd$none);
			case 1:
				var cat = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							io: _Utils_eq(
								model.io,
								$elm$core$Maybe$Just(cat)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(cat)
						}),
					$elm$core$Platform$Cmd$none);
			case 2:
				var activ = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							hP: _Utils_eq(
								model.hP,
								$elm$core$Maybe$Just(activ)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(activ)
						}),
					$elm$core$Platform$Cmd$none);
			case 3:
				var label = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							j_: _Utils_eq(
								model.j_,
								$elm$core$Maybe$Just(label)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(label)
						}),
					$elm$core$Platform$Cmd$none);
			case 4:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							jf: _Utils_eq(
								model.lt,
								$elm$core$Maybe$Just(s)) ? $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyFiche : A2(
								$elm$core$Maybe$withDefault,
								$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyFiche,
								A2(
									$elm$core$Maybe$map,
									$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ficheToBuffer,
									A2($elm$core$Dict$get, s, model.jg))),
							lt: _Utils_eq(
								model.lt,
								$elm$core$Maybe$Just(s)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s)
						}),
					$elm$core$Platform$Cmd$none);
			case 5:
				var res = msg.a;
				if (!res.$) {
					var fiches = res.a.jg;
					var labels = $author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeLabels(fiches);
					var categories = $author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeCats(fiches);
					var activites = $author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeActivs(fiches);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{hQ: activites, cZ: categories, jg: fiches, j1: labels, b4: $author$project$Internals$ToolHelpers$ToolLoadingSuccess}),
						$elm$core$Platform$Cmd$none);
				} else {
					var e = res.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								e6: _List_Nil,
								b4: $author$project$Internals$ToolHelpers$ToolLoadingFailure('')
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 6:
				var fiche = msg.a;
				var res = msg.b;
				if ((!res.$) && res.a) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								hQ: $author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeActivs(model.jg),
								cZ: $author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeCats(model.jg),
								j1: $author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeLabels(model.jg),
								j8: A2($elm_community$list_extra$List$Extra$remove, fiche, model.j8)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								e6: A2($elm$core$List$cons, fiche.kB, model.e6),
								jg: A3(
									$elm$core$Dict$insert,
									$TSFoster$elm_uuid$UUID$toString(fiche.fS),
									fiche,
									model.jg),
								j8: A2($elm_community$list_extra$List$Extra$remove, fiche, model.j8)
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 7:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							$9: $elm$core$Maybe$Nothing,
							lo: $elm$core$Maybe$Nothing,
							lq: _Utils_eq(
								model.lq,
								$elm$core$Maybe$Just(s)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s)
						}),
					$elm$core$Platform$Cmd$none);
			case 8:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							$9: _Utils_eq(
								model.lo,
								$elm$core$Maybe$Just(s)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s),
							lo: _Utils_eq(
								model.lo,
								$elm$core$Maybe$Just(s)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s),
							lq: $elm$core$Maybe$Nothing
						}),
					$elm$core$Platform$Cmd$none);
			case 9:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							$9: $elm$core$Maybe$Just(s)
						}),
					$elm$core$Platform$Cmd$none);
			case 10:
				var _v3 = _Utils_Tuple2(model.lo, model.$9);
				if ((!_v3.a.$) && (!_v3.b.$)) {
					var avCat = _v3.a.a;
					var newCat = _v3.b.a;
					if (_Utils_eq(avCat, newCat)) {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var fb = model.jf;
						var newFb = _Utils_update(
							fb,
							{
								cZ: A3(
									$elm_community$list_extra$List$Extra$setIf,
									function (c) {
										return _Utils_eq(c, avCat);
									},
									newCat,
									fb.cZ)
							});
						var _v4 = A5(
							$author$project$GeneralDirectoryEditor$GeneralDirHelpers$filterAndUpdate,
							model,
							function ($) {
								return $.cZ;
							},
							$author$project$GeneralDirectoryEditor$GeneralDirHelpers$setFicheCat,
							avCat,
							newCat);
						var newFiches = _v4.a;
						var fichesToUpdate = _v4.b;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									$9: $elm$core$Maybe$Nothing,
									cZ: $author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeCats(newFiches),
									jf: newFb,
									jg: newFiches,
									j8: _Utils_ap(model.j8, fichesToUpdate),
									lo: $elm$core$Maybe$Nothing,
									lq: $elm$core$Maybe$Nothing
								}),
							A2($author$project$GeneralDirectoryEditor$GeneralDirHelpers$batchFichesUpdate, config.be, fichesToUpdate));
					}
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 11:
				var _v5 = _Utils_Tuple2(model.lo, model.$9);
				_v5$2:
				while (true) {
					if (!_v5.a.$) {
						if (!_v5.b.$) {
							var avCat = _v5.a.a;
							var newCat = _v5.b.a;
							if (_Utils_eq(avCat, newCat)) {
								var newCatsFiche = _Utils_ap(
									model.jf.cZ,
									_List_fromArray(
										[newCat]));
								var fb = model.jf;
								var newFb = _Utils_update(
									fb,
									{cZ: newCatsFiche});
								return _Utils_Tuple2(
									_Utils_update(
										model,
										{$9: $elm$core$Maybe$Nothing, jf: newFb, lo: $elm$core$Maybe$Nothing}),
									$elm$core$Platform$Cmd$none);
							} else {
								return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
							}
						} else {
							break _v5$2;
						}
					} else {
						if (!_v5.b.$) {
							var _v6 = _v5.a;
							var newCat = _v5.b.a;
							var newCatsFiche = _Utils_ap(
								model.jf.cZ,
								_List_fromArray(
									[newCat]));
							var newCats = A2($elm$core$Set$insert, newCat, model.cZ);
							var fb = model.jf;
							var newFb = _Utils_update(
								fb,
								{cZ: newCatsFiche});
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{$9: $elm$core$Maybe$Nothing, cZ: newCats, jf: newFb}),
								$elm$core$Platform$Cmd$none);
						} else {
							break _v5$2;
						}
					}
				}
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 12:
				var fb = model.jf;
				var newCats = A2(
					$elm$core$Maybe$withDefault,
					fb.cZ,
					A2(
						$elm$core$Maybe$map,
						function (c) {
							return A2($elm_community$list_extra$List$Extra$remove, c, fb.cZ);
						},
						model.lq));
				var newFb = _Utils_update(
					fb,
					{cZ: newCats});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{$9: $elm$core$Maybe$Nothing, jf: newFb, lo: $elm$core$Maybe$Nothing, lq: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none);
			case 13:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							hO: $elm$core$Maybe$Nothing,
							lm: _Utils_eq(
								model.lm,
								$elm$core$Maybe$Just(s)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s),
							ln: $elm$core$Maybe$Nothing
						}),
					$elm$core$Platform$Cmd$none);
			case 14:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							hO: _Utils_eq(
								model.ln,
								$elm$core$Maybe$Just(s)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s),
							lm: $elm$core$Maybe$Nothing,
							ln: _Utils_eq(
								model.ln,
								$elm$core$Maybe$Just(s)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s)
						}),
					$elm$core$Platform$Cmd$none);
			case 15:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							hO: $elm$core$Maybe$Just(s)
						}),
					$elm$core$Platform$Cmd$none);
			case 16:
				var _v7 = _Utils_Tuple2(model.ln, model.hO);
				if ((!_v7.a.$) && (!_v7.b.$)) {
					var avActiv = _v7.a.a;
					var newActiv = _v7.b.a;
					if (_Utils_eq(avActiv, newActiv)) {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var fb = model.jf;
						var newFb = _Utils_update(
							fb,
							{
								ko: A3(
									$elm_community$list_extra$List$Extra$setIf,
									function (c) {
										return _Utils_eq(c, avActiv);
									},
									newActiv,
									fb.ko)
							});
						var _v8 = A5(
							$author$project$GeneralDirectoryEditor$GeneralDirHelpers$filterAndUpdate,
							model,
							function ($) {
								return $.ko;
							},
							$author$project$GeneralDirectoryEditor$GeneralDirHelpers$setFicheActiv,
							avActiv,
							newActiv);
						var newFiches = _v8.a;
						var fichesToUpdate = _v8.b;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									hO: $elm$core$Maybe$Nothing,
									hQ: $author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeActivs(newFiches),
									jf: newFb,
									jg: newFiches,
									j8: _Utils_ap(model.j8, fichesToUpdate),
									lm: $elm$core$Maybe$Nothing,
									ln: $elm$core$Maybe$Nothing
								}),
							A2($author$project$GeneralDirectoryEditor$GeneralDirHelpers$batchFichesUpdate, config.be, fichesToUpdate));
					}
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 17:
				var _v9 = _Utils_Tuple2(model.ln, model.hO);
				_v9$2:
				while (true) {
					if (!_v9.a.$) {
						if (!_v9.b.$) {
							var avActiv = _v9.a.a;
							var newActiv = _v9.b.a;
							if (_Utils_eq(avActiv, newActiv)) {
								var newActivFiche = _Utils_ap(
									model.jf.ko,
									_List_fromArray(
										[newActiv]));
								var fb = model.jf;
								var newFb = _Utils_update(
									fb,
									{ko: newActivFiche});
								return _Utils_Tuple2(
									_Utils_update(
										model,
										{hO: $elm$core$Maybe$Nothing, jf: newFb, ln: $elm$core$Maybe$Nothing}),
									$elm$core$Platform$Cmd$none);
							} else {
								return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
							}
						} else {
							break _v9$2;
						}
					} else {
						if (!_v9.b.$) {
							var _v10 = _v9.a;
							var newActiv = _v9.b.a;
							var newActivs = A2($elm$core$Set$insert, newActiv, model.hQ);
							var newActivFiche = _Utils_ap(
								model.jf.ko,
								_List_fromArray(
									[newActiv]));
							var fb = model.jf;
							var newFb = _Utils_update(
								fb,
								{ko: newActivFiche});
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{hO: $elm$core$Maybe$Nothing, hQ: newActivs, jf: newFb}),
								$elm$core$Platform$Cmd$none);
						} else {
							break _v9$2;
						}
					}
				}
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 18:
				var fb = model.jf;
				var newActivs = A2(
					$elm$core$Maybe$withDefault,
					fb.cZ,
					A2(
						$elm$core$Maybe$map,
						function (a) {
							return A2($elm_community$list_extra$List$Extra$remove, a, fb.ko);
						},
						model.lm));
				var newFb = _Utils_update(
					fb,
					{ko: newActivs});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{hO: $elm$core$Maybe$Nothing, jf: newFb, lm: $elm$core$Maybe$Nothing, ln: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none);
			case 19:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							jZ: $elm$core$Maybe$Nothing,
							lp: $elm$core$Maybe$Nothing,
							lu: _Utils_eq(
								model.lu,
								$elm$core$Maybe$Just(s)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s)
						}),
					$elm$core$Platform$Cmd$none);
			case 20:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							jZ: _Utils_eq(
								model.lp,
								$elm$core$Maybe$Just(s)) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
								A2(
									$elm$core$List$filter,
									function (l) {
										return _Utils_eq(l.kA, s);
									},
									model.j1)),
							lp: _Utils_eq(
								model.lp,
								$elm$core$Maybe$Just(s)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s),
							lu: $elm$core$Maybe$Nothing
						}),
					$elm$core$Platform$Cmd$none);
			case 21:
				var s = msg.a;
				var baseLabel = A2($elm$core$Maybe$withDefault, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLabel, model.jZ);
				var newLabel = _Utils_update(
					baseLabel,
					{kA: s});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							jZ: $elm$core$Maybe$Just(newLabel)
						}),
					$elm$core$Platform$Cmd$none);
			case 22:
				var s = msg.a;
				var baseLabel = A2($elm$core$Maybe$withDefault, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLabel, model.jZ);
				var newLabel = _Utils_update(
					baseLabel,
					{j2: s});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							jZ: $elm$core$Maybe$Just(newLabel)
						}),
					$elm$core$Platform$Cmd$none);
			case 23:
				var pr = msg.a;
				if (!pr.$) {
					var url = pr.a.d$;
					var width = pr.a.mt;
					var height = pr.a.jx;
					var baseLabel = A2($elm$core$Maybe$withDefault, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLabel, model.jZ);
					var newLabel = _Utils_update(
						baseLabel,
						{
							j9: {jx: height, d$: url, mt: width}
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								jZ: $elm$core$Maybe$Just(newLabel),
								j0: false
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 24:
				var _v12 = _Utils_Tuple2(model.lp, model.jZ);
				_v12$2:
				while (true) {
					if (!_v12.a.$) {
						if (!_v12.b.$) {
							var mbNewLabel = A2($author$project$GeneralDirectoryEditor$GeneralDirHelpers$extractLabel, model, model.lp);
							var newFicheLabels = A2($author$project$GeneralDirectoryEditor$GeneralDirHelpers$appendLabel, mbNewLabel, model.jf.O);
							var newLabels = A2($author$project$GeneralDirectoryEditor$GeneralDirHelpers$appendLabel, mbNewLabel, model.j1);
							var fb = model.jf;
							var newFb = _Utils_update(
								fb,
								{O: newFicheLabels});
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{jf: newFb, jZ: $elm$core$Maybe$Nothing, j1: newLabels}),
								$elm$core$Platform$Cmd$none);
						} else {
							break _v12$2;
						}
					} else {
						if (!_v12.b.$) {
							var _v13 = _v12.a;
							var _v14 = _Utils_Tuple2(
								model.jZ,
								A2($elm$core$Maybe$map, $author$project$GeneralDirectoryEditor$GeneralDirHelpers$validLabel, model.jZ));
							if (((!_v14.a.$) && (!_v14.b.$)) && _v14.b.a) {
								var newLabel = _v14.a.a;
								var fb = model.jf;
								var newFb = _Utils_update(
									fb,
									{
										O: _Utils_ap(
											fb.O,
											_List_fromArray(
												[newLabel]))
									});
								return _Utils_Tuple2(
									_Utils_update(
										model,
										{
											jf: newFb,
											jZ: $elm$core$Maybe$Nothing,
											j1: _Utils_ap(
												model.j1,
												_List_fromArray(
													[newLabel]))
										}),
									$elm$core$Platform$Cmd$none);
							} else {
								return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
							}
						} else {
							break _v12$2;
						}
					}
				}
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 25:
				var mbLabel = A2($author$project$GeneralDirectoryEditor$GeneralDirHelpers$extractLabel, model, model.lu);
				var fb = model.jf;
				var newLabels = A2(
					$elm$core$Maybe$withDefault,
					fb.O,
					A2(
						$elm$core$Maybe$map,
						function (l) {
							return A2($elm_community$list_extra$List$Extra$remove, l, fb.O);
						},
						mbLabel));
				var newFb = _Utils_update(
					fb,
					{O: newLabels});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{jf: newFb, jZ: $elm$core$Maybe$Nothing, lp: $elm$core$Maybe$Nothing, lu: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none);
			case 26:
				var _v15 = _Utils_Tuple2(
					A2($author$project$GeneralDirectoryEditor$GeneralDirHelpers$extractLabel, model, model.lp),
					model.jZ);
				if ((!_v15.a.$) && (!_v15.b.$)) {
					var avLabel = _v15.a.a;
					var newLabel = _v15.b.a;
					if (_Utils_eq(avLabel, newLabel)) {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var fb = model.jf;
						var newFb = _Utils_update(
							fb,
							{
								O: A3(
									$elm_community$list_extra$List$Extra$setIf,
									function (l) {
										return _Utils_eq(l, avLabel);
									},
									newLabel,
									fb.O)
							});
						var _v16 = A5(
							$author$project$GeneralDirectoryEditor$GeneralDirHelpers$filterAndUpdate,
							model,
							function ($) {
								return $.O;
							},
							$author$project$GeneralDirectoryEditor$GeneralDirHelpers$setFicheLabel,
							avLabel,
							newLabel);
						var newFiches = _v16.a;
						var fichesToUpdate = _v16.b;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									jf: newFb,
									jg: newFiches,
									jZ: $elm$core$Maybe$Nothing,
									j1: $author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeLabels(newFiches),
									j8: _Utils_ap(model.j8, fichesToUpdate),
									lp: $elm$core$Maybe$Nothing,
									lu: $elm$core$Maybe$Nothing
								}),
							A2($author$project$GeneralDirectoryEditor$GeneralDirHelpers$batchFichesUpdate, config.be, fichesToUpdate));
					}
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 27:
				var s = msg.a;
				var fb = model.jf;
				var baseRefOt = A2(
					$elm$core$Maybe$withDefault,
					_Utils_Tuple2(0, ''),
					fb.k3);
				var newRefOt = A2(
					$elm$core$Maybe$andThen,
					function (n) {
						return $elm$core$Maybe$Just(
							A2(
								$elm$core$Tuple$mapFirst,
								$elm$core$Basics$always(n),
								baseRefOt));
					},
					$elm$core$String$toInt(s));
				var newFb = _Utils_update(
					fb,
					{k3: newRefOt});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{jf: newFb}),
					$elm$core$Platform$Cmd$none);
			case 28:
				var s = msg.a;
				var fb = model.jf;
				var baseRefOt = A2(
					$elm$core$Maybe$withDefault,
					_Utils_Tuple2(0, ''),
					fb.k3);
				var newRefOt = $elm$core$Maybe$Just(
					A2(
						$elm$core$Tuple$mapSecond,
						$elm$core$Basics$always(s),
						baseRefOt));
				var newFb = _Utils_update(
					fb,
					{k3: newRefOt});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{jf: newFb}),
					$elm$core$Platform$Cmd$none);
			case 29:
				var s = msg.a;
				var fb = model.jf;
				var rank = fb.k0;
				var newRank = _Utils_update(
					rank,
					{
						lK: $elm$core$String$toInt(s)
					});
				var newFb = _Utils_update(
					fb,
					{k0: newRank});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{jf: newFb}),
					$elm$core$Platform$Cmd$none);
			case 30:
				var s = msg.a;
				var fb = model.jf;
				var rank = fb.k0;
				var newRank = _Utils_update(
					rank,
					{
						gh: $elm$core$String$toInt(s)
					});
				var newFb = _Utils_update(
					fb,
					{k0: newRank});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{jf: newFb}),
					$elm$core$Platform$Cmd$none);
			case 31:
				var s = msg.a;
				var fb = model.jf;
				var newFb = _Utils_update(
					fb,
					{kB: s});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{jf: newFb}),
					$elm$core$Platform$Cmd$none);
			case 32:
				var r = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							k8: _Utils_eq(
								model.lw,
								$elm$core$Maybe$Just(r)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(r),
							lw: _Utils_eq(
								model.lw,
								$elm$core$Maybe$Just(r)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(r)
						}),
					$elm$core$Platform$Cmd$none);
			case 33:
				var s = msg.a;
				var baseResp = A2($elm$core$Maybe$withDefault, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyResp, model.k8);
				var newResp = _Utils_update(
					baseResp,
					{kY: s});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							k8: $elm$core$Maybe$Just(newResp)
						}),
					$elm$core$Platform$Cmd$none);
			case 34:
				var s = msg.a;
				var baseResp = A2($elm$core$Maybe$withDefault, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyResp, model.k8);
				var newResp = _Utils_update(
					baseResp,
					{kA: s});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							k8: $elm$core$Maybe$Just(newResp)
						}),
					$elm$core$Platform$Cmd$none);
			case 35:
				var s = msg.a;
				var baseResp = A2($elm$core$Maybe$withDefault, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyResp, model.k8);
				var newTel = function () {
					var _v17 = baseResp.l_;
					switch (_v17.$) {
						case 0:
							var n = _v17.a;
							return $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelFixe(s);
						case 1:
							var n = _v17.a;
							return $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth(
								_Utils_Tuple2(s, n));
						default:
							var _v18 = _v17.a;
							var n1 = _v18.a;
							var n2 = _v18.b;
							return (s === '') ? $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelPortable(n2) : $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth(
								_Utils_Tuple2(s, n2));
					}
				}();
				var newResp = _Utils_update(
					baseResp,
					{l_: newTel});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							k8: $elm$core$Maybe$Just(newResp)
						}),
					$elm$core$Platform$Cmd$none);
			case 36:
				var s = msg.a;
				var baseResp = A2($elm$core$Maybe$withDefault, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyResp, model.k8);
				var newTel = function () {
					var _v19 = baseResp.l_;
					switch (_v19.$) {
						case 0:
							var n = _v19.a;
							return (n === '') ? $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelPortable(s) : $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth(
								_Utils_Tuple2(n, s));
						case 1:
							var n = _v19.a;
							return (s === '') ? $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelFixe('') : $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelPortable(s);
						default:
							var _v20 = _v19.a;
							var n1 = _v20.a;
							var n2 = _v20.b;
							return (s === '') ? $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelFixe(n1) : $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth(
								_Utils_Tuple2(n1, s));
					}
				}();
				var newResp = _Utils_update(
					baseResp,
					{l_: newTel});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							k8: $elm$core$Maybe$Just(newResp)
						}),
					$elm$core$Platform$Cmd$none);
			case 37:
				var _v21 = _Utils_Tuple2(model.lw, model.k8);
				if ((!_v21.a.$) && (!_v21.b.$)) {
					var r1 = _v21.a.a;
					var r2 = _v21.b.a;
					var fb = model.jf;
					var newFb = _Utils_update(
						fb,
						{
							k9: A3(
								$elm_community$list_extra$List$Extra$setIf,
								function (r) {
									return _Utils_eq(r, r1);
								},
								r2,
								fb.k9)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{jf: newFb}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 38:
				var _v22 = model.k8;
				if (_v22.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var r = _v22.a;
					if (_Utils_eq(r, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyResp)) {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var fb = model.jf;
						var newFb = _Utils_update(
							fb,
							{
								k9: _Utils_ap(
									fb.k9,
									_List_fromArray(
										[r]))
							});
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{jf: newFb, k8: $elm$core$Maybe$Nothing}),
							$elm$core$Platform$Cmd$none);
					}
				}
			case 39:
				var _v23 = model.lw;
				if (_v23.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var r = _v23.a;
					var fb = model.jf;
					var newFb = _Utils_update(
						fb,
						{
							k9: A2($elm_community$list_extra$List$Extra$remove, r, fb.k9)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{jf: newFb, k8: $elm$core$Maybe$Nothing, lw: $elm$core$Maybe$Nothing}),
						$elm$core$Platform$Cmd$none);
				}
			case 40:
				var s = msg.a;
				var fb = model.jf;
				var newFb = _Utils_update(
					fb,
					{hT: s});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{jf: newFb}),
					$elm$core$Platform$Cmd$none);
			case 41:
				var s = msg.a;
				var fb = model.jf;
				var newTel = function () {
					var _v24 = fb.l$;
					if (!_v24.$) {
						switch (_v24.a.$) {
							case 0:
								var n = _v24.a.a;
								return (s === '') ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
									$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelFixe(s));
							case 1:
								var n = _v24.a.a;
								return (s === '') ? $elm$core$Maybe$Just(
									$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelPortable(n)) : $elm$core$Maybe$Just(
									$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth(
										_Utils_Tuple2(s, n)));
							default:
								var _v25 = _v24.a.a;
								var n1 = _v25.a;
								var n2 = _v25.b;
								return (s === '') ? $elm$core$Maybe$Just(
									$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelPortable(n2)) : $elm$core$Maybe$Just(
									$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth(
										_Utils_Tuple2(s, n2)));
						}
					} else {
						return (s === '') ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
							$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelFixe(s));
					}
				}();
				var newFb = _Utils_update(
					fb,
					{l$: newTel});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{jf: newFb}),
					$elm$core$Platform$Cmd$none);
			case 42:
				var s = msg.a;
				var fb = model.jf;
				var newTel = function () {
					var _v26 = fb.l$;
					if (!_v26.$) {
						switch (_v26.a.$) {
							case 0:
								var n = _v26.a.a;
								return (s === '') ? $elm$core$Maybe$Just(
									$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelFixe(n)) : $elm$core$Maybe$Just(
									$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth(
										_Utils_Tuple2(n, s)));
							case 1:
								var n = _v26.a.a;
								return (s === '') ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
									$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelPortable(s));
							default:
								var _v27 = _v26.a.a;
								var n1 = _v27.a;
								var n2 = _v27.b;
								return (s === '') ? $elm$core$Maybe$Just(
									$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelFixe(n1)) : $elm$core$Maybe$Just(
									$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelBoth(
										_Utils_Tuple2(n1, s)));
						}
					} else {
						return (s === '') ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
							$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$TelPortable(s));
					}
				}();
				var newFb = _Utils_update(
					fb,
					{l$: newTel});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{jf: newFb}),
					$elm$core$Platform$Cmd$none);
			case 43:
				var s = msg.a;
				var fb = model.jf;
				var newFb = _Utils_update(
					fb,
					{
						je: (s === '') ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s)
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{jf: newFb}),
					$elm$core$Platform$Cmd$none);
			case 44:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							i5: _Utils_eq(
								model.ls,
								$elm$core$Maybe$Just(s)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s),
							ls: _Utils_eq(
								model.ls,
								$elm$core$Maybe$Just(s)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s)
						}),
					$elm$core$Platform$Cmd$none);
			case 45:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							i5: $elm$core$Maybe$Just(s)
						}),
					$elm$core$Platform$Cmd$none);
			case 46:
				var _v28 = _Utils_Tuple2(model.ls, model.i5);
				if ((!_v28.a.$) && (!_v28.b.$)) {
					var mail1 = _v28.a.a;
					var mail2 = _v28.b.a;
					var fb = model.jf;
					var newFb = _Utils_update(
						fb,
						{
							i4: A3(
								$elm_community$list_extra$List$Extra$setIf,
								function (m) {
									return _Utils_eq(m, mail1);
								},
								mail2,
								fb.i4)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{i5: $elm$core$Maybe$Nothing, jf: newFb, ls: $elm$core$Maybe$Nothing}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 47:
				var _v29 = model.i5;
				if (!_v29.$) {
					var mail = _v29.a;
					if (mail === '') {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var fb = model.jf;
						var newFb = _Utils_update(
							fb,
							{
								i4: _Utils_ap(
									fb.i4,
									_List_fromArray(
										[mail]))
							});
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{i5: $elm$core$Maybe$Nothing, jf: newFb, ls: $elm$core$Maybe$Nothing}),
							$elm$core$Platform$Cmd$none);
					}
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 48:
				var _v30 = model.ls;
				if (_v30.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var mail = _v30.a;
					var fb = model.jf;
					var newFb = _Utils_update(
						fb,
						{
							i4: A2($elm_community$list_extra$List$Extra$remove, mail, fb.i4)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{i5: $elm$core$Maybe$Nothing, jf: newFb, ls: $elm$core$Maybe$Nothing}),
						$elm$core$Platform$Cmd$none);
				}
			case 51:
				var s = msg.a;
				var fb = model.jf;
				var newFb = _Utils_update(
					fb,
					{
						dN: (s === '') ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s)
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{jf: newFb}),
					$elm$core$Platform$Cmd$none);
			case 49:
				var s = msg.a;
				var fb = model.jf;
				var newFb = _Utils_update(
					fb,
					{
						lE: function () {
							var _v31 = fb.lE;
							if (!_v31.$) {
								var _v32 = _v31.a;
								var l = _v32.a;
								var url = _v32.b;
								return ((l === '') && (s === '')) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
									_Utils_Tuple2(l, s));
							} else {
								return (s === '') ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
									_Utils_Tuple2('', s));
							}
						}()
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{jf: newFb}),
					$elm$core$Platform$Cmd$none);
			case 50:
				var s = msg.a;
				var fb = model.jf;
				var newFb = _Utils_update(
					fb,
					{
						lE: function () {
							var _v33 = fb.lE;
							if (!_v33.$) {
								var _v34 = _v33.a;
								var l = _v34.a;
								var url = _v34.b;
								return ((s === '') && (url === '')) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
									_Utils_Tuple2(s, url));
							} else {
								return (s === '') ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
									_Utils_Tuple2(s, ''));
							}
						}()
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{jf: newFb}),
					$elm$core$Platform$Cmd$none);
			case 52:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{mq: true}),
					$elm$core$Platform$Cmd$none);
			case 53:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{mq: false}),
					$elm$core$Platform$Cmd$none);
			case 54:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{j0: true}),
					$elm$core$Platform$Cmd$none);
			case 55:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{j0: false}),
					$elm$core$Platform$Cmd$none);
			case 56:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{i1: true}),
					$elm$core$Platform$Cmd$none);
			case 57:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{i1: false}),
					$elm$core$Platform$Cmd$none);
			case 58:
				var pr = msg.a;
				if (!pr.$) {
					var url = pr.a.d$;
					var fb = model.jf;
					var newFb = _Utils_update(
						fb,
						{mr: url});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{jf: newFb, mq: false}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 59:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							i$: _Utils_eq(
								model.lr,
								$elm$core$Maybe$Just(s)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s),
							lr: _Utils_eq(
								model.lr,
								$elm$core$Maybe$Just(s)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s)
						}),
					$elm$core$Platform$Cmd$none);
			case 60:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							i$: $elm$core$Maybe$Just(s)
						}),
					$elm$core$Platform$Cmd$none);
			case 61:
				var _v36 = _Utils_Tuple2(model.lr, model.i$);
				if ((!_v36.a.$) && (!_v36.b.$)) {
					var d1 = _v36.a.a;
					var d2 = _v36.b.a;
					var fb = model.jf;
					var newFb = _Utils_update(
						fb,
						{
							ei: A3(
								$elm_community$list_extra$List$Extra$setIf,
								function (d) {
									return _Utils_eq(d, d1);
								},
								d2,
								fb.ei)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{i$: $elm$core$Maybe$Nothing, jf: newFb, lr: $elm$core$Maybe$Nothing}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 62:
				var _v37 = model.i$;
				if (_v37.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var d = _v37.a;
					if (d === '') {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var fb = model.jf;
						var newFb = _Utils_update(
							fb,
							{
								ei: _Utils_ap(
									fb.ei,
									_List_fromArray(
										[d]))
							});
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{i$: $elm$core$Maybe$Nothing, jf: newFb}),
							$elm$core$Platform$Cmd$none);
					}
				}
			case 63:
				var _v38 = model.lr;
				if (_v38.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var d = _v38.a;
					var fb = model.jf;
					var newFb = _Utils_update(
						fb,
						{
							ei: A2($elm_community$list_extra$List$Extra$remove, d, fb.ei)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{i$: $elm$core$Maybe$Nothing, jf: newFb, lr: $elm$core$Maybe$Nothing}),
						$elm$core$Platform$Cmd$none);
				}
			case 64:
				var _v39 = A2(
					$elm$core$Maybe$andThen,
					function (d) {
						return A2($elm_community$list_extra$List$Extra$elemIndex, d, model.jf.ei);
					},
					model.lr);
				if (_v39.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var n = _v39.a;
					var fb = model.jf;
					var newFb = _Utils_update(
						fb,
						{
							ei: A3($elm_community$list_extra$List$Extra$swapAt, n - 1, n, fb.ei)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{jf: newFb}),
						$elm$core$Platform$Cmd$none);
				}
			case 65:
				var _v40 = A2(
					$elm$core$Maybe$andThen,
					function (d) {
						return A2($elm_community$list_extra$List$Extra$elemIndex, d, model.jf.ei);
					},
					model.lr);
				if (_v40.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var n = _v40.a;
					var fb = model.jf;
					var newFb = _Utils_update(
						fb,
						{
							ei: A3($elm_community$list_extra$List$Extra$swapAt, n + 1, n, fb.ei)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{jf: newFb}),
						$elm$core$Platform$Cmd$none);
				}
			case 66:
				var ld = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							ja: $elm$core$Maybe$Nothing,
							j3: _Utils_eq(
								model.lv,
								$elm$core$Maybe$Just(ld)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(ld),
							lv: _Utils_eq(
								model.lv,
								$elm$core$Maybe$Just(ld)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(ld)
						}),
					$elm$core$Platform$Cmd$none);
			case 67:
				var _v41 = _Utils_Tuple2(model.lv, model.j3);
				if ((!_v41.a.$) && (!_v41.b.$)) {
					var ld1 = _v41.a.a;
					var ld2 = _v41.b.a;
					var fb = model.jf;
					var newFb = _Utils_update(
						fb,
						{
							j4: A3(
								$elm_community$list_extra$List$Extra$setIf,
								function (ld) {
									return _Utils_eq(ld, ld1);
								},
								ld2,
								fb.j4)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{ja: $elm$core$Maybe$Nothing, jf: newFb, j3: $elm$core$Maybe$Nothing, lv: $elm$core$Maybe$Nothing}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 68:
				var _v42 = model.j3;
				if (_v42.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var ld = _v42.a;
					if (!$author$project$GeneralDirectoryEditor$GeneralDirHelpers$validLinkedDoc(ld)) {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var fb = model.jf;
						var newFb = _Utils_update(
							fb,
							{
								j4: _Utils_ap(
									fb.j4,
									_List_fromArray(
										[ld]))
							});
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{ja: $elm$core$Maybe$Nothing, jf: newFb, j3: $elm$core$Maybe$Nothing}),
							$elm$core$Platform$Cmd$none);
					}
				}
			case 69:
				var _v43 = model.lv;
				if (_v43.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var ld = _v43.a;
					var fb = model.jf;
					var newFb = _Utils_update(
						fb,
						{
							j4: A2($elm_community$list_extra$List$Extra$remove, ld, fb.j4)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{ja: $elm$core$Maybe$Nothing, jf: newFb, j3: $elm$core$Maybe$Nothing, lv: $elm$core$Maybe$Nothing}),
						$elm$core$Platform$Cmd$none);
				}
			case 70:
				var pr = msg.a;
				if (pr.$ === 1) {
					var s = pr.a;
					var baseLD = A2($elm$core$Maybe$withDefault, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLinkedDoc, model.j3);
					var newLd = _Utils_update(
						baseLD,
						{d$: s});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								i1: false,
								j3: $elm$core$Maybe$Just(newLd)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 71:
				var s = msg.a;
				var baseLD = A2($elm$core$Maybe$withDefault, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLinkedDoc, model.j3);
				var newLd = _Utils_update(
					baseLD,
					{O: s});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							j3: $elm$core$Maybe$Just(newLd)
						}),
					$elm$core$Platform$Cmd$none);
			case 72:
				var s = msg.a;
				var baseLD = A2($elm$core$Maybe$withDefault, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLinkedDoc, model.j3);
				var newLd = _Utils_update(
					baseLD,
					{
						i_: $elm$core$Maybe$Just(s)
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							j3: $elm$core$Maybe$Just(newLd)
						}),
					$elm$core$Platform$Cmd$none);
			case 73:
				var s = msg.a;
				var _v45 = A3($author$project$Internals$CommonHelpers$parseDate, model.iP, config.fY, s);
				if (_v45.$ === 1) {
					var baseLD = A2($elm$core$Maybe$withDefault, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLinkedDoc, model.j3);
					var newLd = _Utils_update(
						baseLD,
						{i9: $elm$core$Maybe$Nothing});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								ja: $elm$core$Maybe$Just(s),
								j3: $elm$core$Maybe$Just(newLd)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					var _v46 = _v45.a;
					var day = _v46.a;
					var month = _v46.b;
					var year = _v46.c;
					var newTime = $AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilToPosix(
						A8($AdrianRibao$elm_derberos_date$Derberos$Date$Core$newDateRecord, year, month, day, 0, 0, 0, 0, config.fY));
					var baseLD = A2($elm$core$Maybe$withDefault, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLinkedDoc, model.j3);
					var newLd = _Utils_update(
						baseLD,
						{
							i9: $elm$core$Maybe$Just(newTime)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								ja: $elm$core$Maybe$Nothing,
								j3: $elm$core$Maybe$Just(newLd)
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 74:
				var o = msg.a;
				var fb = model.jf;
				var newFb = _Utils_update(
					fb,
					{
						kN: $elm$core$Maybe$Just(o)
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{jf: newFb}),
					$elm$core$Platform$Cmd$none);
			case 75:
				var _v47 = model.ll;
				if (!_v47.$) {
					var seed = _v47.a;
					var fb = model.jf;
					var _v48 = A2($elm$random$Random$step, $TSFoster$elm_uuid$UUID$generator, seed);
					var uuid = _v48.a;
					var newSeed = _v48.b;
					var toSave = {hT: fb.hT, cZ: fb.cZ, ei: fb.ei, i4: fb.i4, je: fb.je, O: fb.O, dy: fb.dy, j4: fb.j4, ko: fb.ko, kB: fb.kB, kN: fb.kN, dN: fb.dN, k0: fb.k0, k3: fb.k3, k9: fb.k9, lE: fb.lE, l$: fb.l$, fS: uuid, mr: fb.mr};
					var newFiches = A3(
						$elm$core$Dict$insert,
						$TSFoster$elm_uuid$UUID$toString(uuid),
						toSave,
						model.jg);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								hP: $elm$core$Maybe$Nothing,
								io: $elm$core$Maybe$Nothing,
								jf: _Utils_update(
									fb,
									{
										fS: $elm$core$Maybe$Just(uuid)
									}),
								jg: newFiches,
								j_: $elm$core$Maybe$Nothing,
								j8: A2($elm$core$List$cons, toSave, model.j8),
								km: $elm$core$Maybe$Nothing,
								lb: 0,
								ll: $elm$core$Maybe$Just(newSeed),
								lt: $elm$core$Maybe$Just(
									$TSFoster$elm_uuid$UUID$toString(uuid))
							}),
						function () {
							var _v49 = config.be;
							if (!_v49.$) {
								var sessionId = _v49.a.fF;
								return A2(
									$elm$core$Task$attempt,
									$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FicheUpdated(toSave),
									A2(
										$elm$core$Task$andThen,
										function (t) {
											var datedFb = _Utils_update(
												toSave,
												{dy: t});
											return A2($author$project$GeneralDirectoryEditor$GeneralDirJson$updateFicheTask, datedFb, sessionId);
										},
										$elm$time$Time$now));
							} else {
								return $elm$core$Platform$Cmd$none;
							}
						}());
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 76:
				var _v50 = A2(
					$elm$core$Maybe$andThen,
					function (id) {
						return A2(
							$elm$core$Dict$get,
							$TSFoster$elm_uuid$UUID$toString(id),
							model.jg);
					},
					model.jf.fS);
				if (!_v50.$) {
					var f = _v50.a;
					var newFiches = A2(
						$elm$core$Dict$remove,
						$TSFoster$elm_uuid$UUID$toString(f.fS),
						model.jg);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{jg: newFiches}),
						A2(
							$author$project$Auth$AuthPlugin$cmdIfLogged,
							config.be,
							$author$project$GeneralDirectoryEditor$GeneralDirJson$removeFiche(f)));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 78:
				var d = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							hO: $elm$core$Maybe$Nothing,
							hP: $elm$core$Maybe$Nothing,
							$9: $elm$core$Maybe$Nothing,
							io: $elm$core$Maybe$Nothing,
							i$: $elm$core$Maybe$Nothing,
							i1: false,
							i5: $elm$core$Maybe$Nothing,
							ja: $elm$core$Maybe$Nothing,
							jf: (!d) ? $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyFiche : model.jf,
							jZ: $elm$core$Maybe$Nothing,
							j_: $elm$core$Maybe$Nothing,
							j$: false,
							j0: false,
							j3: $elm$core$Maybe$Nothing,
							km: $elm$core$Maybe$Nothing,
							k8: $elm$core$Maybe$Nothing,
							lb: d,
							lm: $elm$core$Maybe$Nothing,
							ln: $elm$core$Maybe$Nothing,
							lo: $elm$core$Maybe$Nothing,
							lp: $elm$core$Maybe$Nothing,
							lq: $elm$core$Maybe$Nothing,
							lr: $elm$core$Maybe$Nothing,
							ls: $elm$core$Maybe$Nothing,
							lt: (!d) ? $elm$core$Maybe$Nothing : model.lt,
							lu: $elm$core$Maybe$Nothing,
							lv: $elm$core$Maybe$Nothing,
							lw: $elm$core$Maybe$Nothing,
							mq: false
						}),
					$elm$core$Platform$Cmd$none);
			case 77:
				var t = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							iP: t,
							ll: $elm$core$Maybe$Just(
								$elm$random$Random$initialSeed(
									$elm$time$Time$posixToMillis(t)))
						}),
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$update = F3(
	function (config, msg, model) {
		var _v0 = A3($author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$internalUpdate, config, msg, model);
		var newModel = _v0.a;
		var cmds = _v0.b;
		return _Utils_Tuple2(
			newModel,
			A2($elm$core$Platform$Cmd$map, model.bY, cmds));
	});
var $author$project$NewsEditor$NewsEditor$NewsEditor = 1;
var $author$project$NewsEditor$NewsEditor$NewsSaved = F2(
	function (a, b) {
		return {$: 13, a: a, b: b};
	});
var $author$project$NewsEditor$NewsEditor$bufferFromNews = function (news) {
	return {
		iI: news.iI,
		eg: news.eg,
		i8: news.i8,
		kS: news.kS,
		fP: news.fP,
		fS: $elm$core$Maybe$Just(news.fS)
	};
};
var $author$project$NewsEditor$NewsEditor$emptyNews = {
	iI: $elm$core$Maybe$Nothing,
	eg: $elm$time$Time$millisToPosix(0),
	i8: $elm$time$Time$millisToPosix(0),
	kS: $elm$core$Maybe$Nothing,
	fP: '',
	fS: $elm$core$Maybe$Nothing
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$parserOutput = function (model) {
	return {y: model.x, lZ: model.q};
};
var $author$project$NewsEditor$NewsEditor$NewsRemoved = F2(
	function (a, b) {
		return {$: 8, a: a, b: b};
	});
var $author$project$NewsEditor$NewsEditor$decodeSuccess = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['message']),
	$elm$json$Json$Decode$succeed(true));
var $author$project$NewsEditor$NewsEditor$removeNews = F2(
	function (idsToRemove, sessionId) {
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'idsToRemove',
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, idsToRemove)),
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId))
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					$author$project$NewsEditor$NewsEditor$NewsRemoved(idsToRemove),
					$author$project$NewsEditor$NewsEditor$decodeSuccess),
				d$: 'removeNews.php'
			});
	});
var $elm$json$Json$Encode$float = _Json_wrap;
var $author$project$Document$Json$DocumentSerializer$encodeDocColor = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'DocColor',
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'red',
							$elm$json$Json$Encode$float(r)),
							_Utils_Tuple2(
							'green',
							$elm$json$Json$Encode$float(g)),
							_Utils_Tuple2(
							'blue',
							$elm$json$Json$Encode$float(b))
						])))
			]));
};
var $author$project$Document$Json$DocumentSerializer$encodeDocAttribute = function (docAttr) {
	switch (docAttr.$) {
		case 0:
			var bottom = docAttr.a.a2;
			var left = docAttr.a.bc;
			var right = docAttr.a.bl;
			var top = docAttr.a.bq;
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'PaddingEach',
							$elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'bottom',
										$elm$json$Json$Encode$int(bottom)),
										_Utils_Tuple2(
										'left',
										$elm$json$Json$Encode$int(left)),
										_Utils_Tuple2(
										'right',
										$elm$json$Json$Encode$int(right)),
										_Utils_Tuple2(
										'top',
										$elm$json$Json$Encode$int(top))
									])))
						])));
		case 1:
			var x = docAttr.a;
			var y = docAttr.b;
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'SpacingXY',
							$elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'X',
										$elm$json$Json$Encode$int(x)),
										_Utils_Tuple2(
										'Y',
										$elm$json$Json$Encode$int(y))
									])))
						])));
		case 2:
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$string('AlignRight'));
		case 3:
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$string('AlignLeft'));
		case 4:
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$string('Pointer'));
		case 5:
			var color = docAttr.a;
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'BackgroundColor',
							$author$project$Document$Json$DocumentSerializer$encodeDocColor(color))
						])));
		case 8:
			var w = docAttr.a;
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Width',
							$elm$json$Json$Encode$int(w))
						])));
		case 9:
			var h = docAttr.a;
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Height',
							$elm$json$Json$Encode$int(h))
						])));
		case 7:
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$string('WidthShrink'));
		case 6:
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$string('WidthFill'));
		case 10:
			var n = docAttr.a;
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'FillPortion',
							$elm$json$Json$Encode$int(n))
						])));
		case 11:
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$string('Border'));
		case 12:
			var s = docAttr.a;
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Font',
							$elm$json$Json$Encode$string(s))
						])));
		case 13:
			var color = docAttr.a;
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'FontColor',
							$author$project$Document$Json$DocumentSerializer$encodeDocColor(color))
						])));
		case 14:
			var s = docAttr.a;
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'FontSize',
							$elm$json$Json$Encode$int(s))
						])));
		case 15:
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$string('FontAlignLeft'));
		case 16:
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$string('FontAlignRight'));
		case 17:
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$string('Center'));
		case 18:
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$string('Justify'));
		case 19:
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$string('Bold'));
		case 20:
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$string('Italic'));
		case 21:
			var _v1 = docAttr.a;
			var attribute = _v1.a;
			var value = _v1.b;
			return $elm$core$Maybe$Just(
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Other',
							$elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'attribute',
										$elm$json$Json$Encode$string(attribute)),
										_Utils_Tuple2(
										'value',
										$elm$json$Json$Encode$string(value))
									])))
						])));
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Document$Json$DocumentSerializer$encodeDocAttributes = function (attrs) {
	return A2(
		$elm$json$Json$Encode$list,
		$elm$core$Basics$identity,
		A2($elm$core$List$filterMap, $author$project$Document$Json$DocumentSerializer$encodeDocAttribute, attrs));
};
var $author$project$Document$Json$DocumentSerializer$encodeLinkMeta = function (_v0) {
	var targetBlank = _v0.hy;
	var url = _v0.d$;
	var label = _v0.O;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'targetBlank',
				$elm$json$Json$Encode$bool(targetBlank)),
				_Utils_Tuple2(
				'url',
				$elm$json$Json$Encode$string(url)),
				_Utils_Tuple2(
				'label',
				$elm$json$Json$Encode$string(label))
			]));
};
var $author$project$Document$Json$DocumentSerializer$encodeTextBlockPrimitive = function (tbPrim) {
	if (!tbPrim.$) {
		var attrs = tbPrim.a;
		var s = tbPrim.b;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Text',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'attrs',
								$author$project$Document$Json$DocumentSerializer$encodeDocAttributes(attrs)),
								_Utils_Tuple2(
								'value',
								$elm$json$Json$Encode$string(s))
							])))
				]));
	} else {
		var attrs = tbPrim.a;
		var lm = tbPrim.b;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Link',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'attrs',
								$author$project$Document$Json$DocumentSerializer$encodeDocAttributes(attrs)),
								_Utils_Tuple2(
								'linkMeta',
								$author$project$Document$Json$DocumentSerializer$encodeLinkMeta(lm))
							])))
				]));
	}
};
var $author$project$Document$Json$DocumentSerializer$encodeTextBlockElement = function (tbElem) {
	switch (tbElem.$) {
		case 0:
			var attrs = tbElem.a;
			var prims = tbElem.b;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Paragraph',
						$elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'attrs',
									$author$project$Document$Json$DocumentSerializer$encodeDocAttributes(attrs)),
									_Utils_Tuple2(
									'prims',
									A2($elm$json$Json$Encode$list, $author$project$Document$Json$DocumentSerializer$encodeTextBlockPrimitive, prims))
								])))
					]));
		case 1:
			var attrs = tbElem.a;
			var liList = tbElem.b;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'UList',
						$elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'attrs',
									$author$project$Document$Json$DocumentSerializer$encodeDocAttributes(attrs)),
									_Utils_Tuple2(
									'liList',
									A2(
										$elm$json$Json$Encode$list,
										function (li) {
											return $elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2('li', li)
													]));
										},
										A2(
											$elm$core$List$map,
											$elm$json$Json$Encode$list($author$project$Document$Json$DocumentSerializer$encodeTextBlockPrimitive),
											liList)))
								])))
					]));
		case 2:
			var attrs = tbElem.a;
			var _v1 = tbElem.b;
			var level = _v1.a;
			var s = _v1.b;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Heading',
						$elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'attrs',
									$author$project$Document$Json$DocumentSerializer$encodeDocAttributes(attrs)),
									_Utils_Tuple2(
									'level',
									$elm$json$Json$Encode$int(level)),
									_Utils_Tuple2(
									'value',
									$elm$json$Json$Encode$string(s))
								])))
					]));
		case 3:
			var prim = tbElem.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'TBPrimitive',
						$author$project$Document$Json$DocumentSerializer$encodeTextBlockPrimitive(prim))
					]));
		default:
			var html = tbElem.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'TrixHtml',
						$elm$json$Json$Encode$string(html))
					]));
	}
};
var $author$project$Document$Json$DocumentSerializer$encodeNewsContent = function (_v0) {
	var tbElems = _v0.lZ;
	var attrs = _v0.y;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'tbElems',
				A2($elm$json$Json$Encode$list, $author$project$Document$Json$DocumentSerializer$encodeTextBlockElement, tbElems)),
				_Utils_Tuple2(
				'attrs',
				$author$project$Document$Json$DocumentSerializer$encodeDocAttributes(attrs))
			]));
};
var $author$project$Document$Json$DocumentSerializer$encodeNews = function (_v0) {
	var title = _v0.fP;
	var date = _v0.eg;
	var content = _v0.iI;
	var pic = _v0.kS;
	var uuid = _v0.fS;
	var expiry = _v0.i8;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'title',
				$elm$json$Json$Encode$string(title)),
				_Utils_Tuple2(
				'date',
				$elm$json$Json$Encode$int(
					$elm$time$Time$posixToMillis(date))),
				_Utils_Tuple2(
				'content',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2($elm$core$Maybe$map, $author$project$Document$Json$DocumentSerializer$encodeNewsContent, content))),
				_Utils_Tuple2(
				'pic',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2(
						$elm$core$Maybe$map,
						function (_v1) {
							var url = _v1.d$;
							var width = _v1.mt;
							var height = _v1.jx;
							return $elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'url',
										$elm$json$Json$Encode$string(url)),
										_Utils_Tuple2(
										'width',
										$elm$json$Json$Encode$int(width)),
										_Utils_Tuple2(
										'height',
										$elm$json$Json$Encode$int(height))
									]));
						},
						pic))),
				_Utils_Tuple2(
				'uuid',
				$elm$json$Json$Encode$string(
					$TSFoster$elm_uuid$UUID$toString(uuid))),
				_Utils_Tuple2(
				'expiry',
				$elm$json$Json$Encode$int(
					$elm$time$Time$posixToMillis(expiry)))
			]));
};
var $author$project$NewsEditor$NewsEditor$setNews = F3(
	function (currentTime, news, sessionId) {
		var datedNews = _Utils_update(
			news,
			{eg: currentTime});
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'news',
						$author$project$Document$Json$DocumentSerializer$encodeNews(datedNews)),
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId))
					])));
		return $elm$http$Http$task(
			{
				eY: body,
				gu: _List_Nil,
				gO: 'Post',
				k6: $author$project$Internals$CommonHelpers$jsonResolver($author$project$NewsEditor$NewsEditor$decodeSuccess),
				hz: $elm$core$Maybe$Nothing,
				d$: 'setNews.php'
			});
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$BackgroundColorPicker = 1;
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$DocPicker = 4;
var $author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData = function (a) {
	return {$: 1, a: a};
};
var $author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginQuit = {$: 0};
var $hecrj$html_parser$Html$Parser$Element = F3(
	function (a, b, c) {
		return {$: 1, a: a, b: b, c: c};
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$FontColorPicker = 0;
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$InternalLinks = 2;
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$activateAttribute = _Platform_outgoingPort('activateAttribute', $elm$core$Basics$identity);
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$deactivateAttributes = _Platform_outgoingPort('deactivateAttributes', $elm$core$Basics$identity);
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$Selection = F4(
	function (start, end, attrs, text) {
		return {y: attrs, a4: end, bo: start, dV: text};
	});
var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$decodeSelection = function () {
	var decodeAttrValue = $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$elm$json$Json$Decode$string,
				A2($elm$json$Json$Decode$map, $elm$core$String$fromInt, $elm$json$Json$Decode$int),
				A2(
				$elm$json$Json$Decode$andThen,
				function (b) {
					return b ? $elm$json$Json$Decode$succeed('true') : $elm$json$Json$Decode$succeed('false');
				},
				$elm$json$Json$Decode$bool),
				$elm$json$Json$Decode$succeed('unknown')
			]));
	return A6(
		$elm$json$Json$Decode$map5,
		F5(
			function (start, end, attrs, ids, text) {
				return _Utils_Tuple2(
					A4($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$Selection, start, end, attrs, text),
					ids);
			}),
		A2($elm$json$Json$Decode$field, 'start', $elm$json$Json$Decode$int),
		A2($elm$json$Json$Decode$field, 'end', $elm$json$Json$Decode$int),
		A2(
			$elm$json$Json$Decode$field,
			'attrs',
			A2(
				$elm$json$Json$Decode$map,
				$elm$core$Dict$fromList,
				$elm$json$Json$Decode$keyValuePairs(decodeAttrValue))),
		A2(
			$elm$json$Json$Decode$field,
			'attachmentsIds',
			$elm$json$Json$Decode$list($elm$json$Json$Decode$int)),
		A2($elm$json$Json$Decode$field, 'text', $elm$json$Json$Decode$string));
}();
var $author$project$PageTreeEditor$PageTreeEditor$extractPage = function (_v0) {
	var current = _v0.a3;
	var contexts = _v0.bu;
	return current;
};
var $elm$core$Result$toMaybe = function (result) {
	if (!result.$) {
		var v = result.a;
		return $elm$core$Maybe$Just(v);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$PageTreeEditor$PageTreeEditor$getPathFromId = F2(
	function (model, cId) {
		var findPath = function (_v0) {
			var path = _v0.a.K;
			var mbContentId = _v0.a.kf;
			var xs = _v0.b;
			return _Utils_eq(
				mbContentId,
				$elm$core$Result$toMaybe(
					$TSFoster$elm_uuid$UUID$fromString(cId))) ? $elm$core$Maybe$Just(
				'/' + A2($elm$core$String$join, '/', path)) : $elm$core$List$head(
				A2($elm$core$List$filterMap, findPath, xs));
		};
		return A2(
			$elm$core$Maybe$andThen,
			findPath,
			A2($elm$core$Maybe$map, $author$project$PageTreeEditor$PageTreeEditor$extractPage, model.i));
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$getSelection = _Platform_outgoingPort(
	'getSelection',
	function ($) {
		return $elm$json$Json$Encode$null;
	});
var $elm$core$Basics$pow = _Basics_pow;
var $rtfeldman$elm_hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		fromStringHelp:
		while (true) {
			if (!chars.b) {
				return $elm$core$Result$Ok(accumulated);
			} else {
				var _char = chars.a;
				var rest = chars.b;
				switch (_char) {
					case '0':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated;
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '1':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + A2($elm$core$Basics$pow, 16, position);
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '2':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (2 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '3':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (3 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '4':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (4 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '5':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (5 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '6':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (6 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '7':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (7 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '8':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (8 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '9':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (9 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'a':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (10 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'b':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (11 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'c':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (12 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'd':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (13 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'e':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (14 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'f':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (15 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					default:
						var nonHex = _char;
						return $elm$core$Result$Err(
							$elm$core$String$fromChar(nonHex) + ' is not a valid hexadecimal character.');
				}
			}
		}
	});
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (!ra.$) {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $rtfeldman$elm_hex$Hex$fromString = function (str) {
	if ($elm$core$String$isEmpty(str)) {
		return $elm$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var result = function () {
			if (A2($elm$core$String$startsWith, '-', str)) {
				var list = A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					$elm$core$List$tail(
						$elm$core$String$toList(str)));
				return A2(
					$elm$core$Result$map,
					$elm$core$Basics$negate,
					A3(
						$rtfeldman$elm_hex$Hex$fromStringHelp,
						$elm$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					$rtfeldman$elm_hex$Hex$fromStringHelp,
					$elm$core$String$length(str) - 1,
					$elm$core$String$toList(str),
					0);
			}
		}();
		var formatError = function (err) {
			return A2(
				$elm$core$String$join,
				' ',
				_List_fromArray(
					['\"' + (str + '\"'), 'is not a valid hexadecimal string because', err]));
		};
		return A2($elm$core$Result$mapError, formatError, result);
	}
};
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (!result.$) {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$hexToDocColor = function (hexColor) {
	var hexColor_ = $elm$core$String$toLower(hexColor);
	var red = A2(
		$elm$core$Result$withDefault,
		0,
		$rtfeldman$elm_hex$Hex$fromString(
			A2($elm$core$String$left, 2, hexColor_)));
	var green = A2(
		$elm$core$Result$withDefault,
		0,
		$rtfeldman$elm_hex$Hex$fromString(
			A2(
				$elm$core$String$left,
				2,
				A2($elm$core$String$dropLeft, 2, hexColor_))));
	var blue = A2(
		$elm$core$Result$withDefault,
		0,
		$rtfeldman$elm_hex$Hex$fromString(
			A2(
				$elm$core$String$left,
				2,
				A2($elm$core$String$dropLeft, 4, hexColor_))));
	return A3($author$project$Document$Document$DocColor, red / 255, green / 255, blue / 255);
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$insertHtml = _Platform_outgoingPort('insertHtml', $elm$core$Basics$identity);
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$isBackgroundColorAttr = function (a) {
	if (a.$ === 5) {
		return true;
	} else {
		return false;
	}
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$isFontAttr = function (a) {
	if (a.$ === 12) {
		return true;
	} else {
		return false;
	}
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$isFontColorAttr = function (a) {
	if (a.$ === 13) {
		return true;
	} else {
		return false;
	}
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$isFontSizeAttr = function (a) {
	if (a.$ === 14) {
		return true;
	} else {
		return false;
	}
};
var $elm_community$string_extra$String$Extra$leftOfBack = F2(
	function (pattern, string) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function (a) {
					return A2($elm$core$String$left, a, string);
				},
				$elm$core$List$head(
					$elm$core$List$reverse(
						A2($elm$core$String$indexes, pattern, string)))));
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$loadHtml = _Platform_outgoingPort('loadHtml', $elm$core$Basics$identity);
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $hecrj$html_parser$Html$Parser$voidElements = _List_fromArray(
	['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'param', 'source', 'track', 'wbr']);
var $hecrj$html_parser$Html$Parser$isVoidElement = function (name) {
	return A2($elm$core$List$member, name, $hecrj$html_parser$Html$Parser$voidElements);
};
var $hecrj$html_parser$Html$Parser$nodeToString = function (node_) {
	var attributeToString = function (_v2) {
		var attr = _v2.a;
		var value = _v2.b;
		return attr + ('=\"' + (value + '\"'));
	};
	switch (node_.$) {
		case 0:
			var text_ = node_.a;
			return text_;
		case 1:
			var name = node_.a;
			var attributes = node_.b;
			var children = node_.c;
			var maybeAttributes = function () {
				if (!attributes.b) {
					return '';
				} else {
					return ' ' + A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, attributeToString, attributes));
				}
			}();
			return $hecrj$html_parser$Html$Parser$isVoidElement(name) ? $elm$core$String$concat(
				_List_fromArray(
					['<', name, maybeAttributes, '>'])) : $elm$core$String$concat(
				_List_fromArray(
					[
						'<',
						name,
						maybeAttributes,
						'>',
						A2(
						$elm$core$String$join,
						'',
						A2($elm$core$List$map, $hecrj$html_parser$Html$Parser$nodeToString, children)),
						'</',
						name,
						'>'
					]));
		default:
			var comment_ = node_.a;
			return '<!-- ' + (comment_ + ' -->');
	}
};
var $elm$url$Url$percentEncode = _Url_percentEncode;
var $author$project$PageTreeEditor$PageTreeEditor$zipUp = function (pageTree) {
	var _v0 = pageTree.bu;
	if (!_v0.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var parent = _v0.a.eF;
		var left = _v0.a.bc;
		var right = _v0.a.bl;
		var cs = _v0.b;
		return $elm$core$Maybe$Just(
			_Utils_update(
				pageTree,
				{
					bu: cs,
					a3: A2(
						$author$project$PageTreeEditor$PageTreeEditor$Page,
						parent,
						_Utils_ap(
							left,
							_Utils_ap(
								_List_fromArray(
									[pageTree.a3]),
								right)))
				}));
	}
};
var $author$project$PageTreeEditor$PageTreeEditor$rewind = function (pageTree) {
	rewind:
	while (true) {
		var _v0 = $author$project$PageTreeEditor$PageTreeEditor$zipUp(pageTree);
		if (_v0.$ === 1) {
			return pageTree;
		} else {
			var pageTree_ = _v0.a;
			var $temp$pageTree = pageTree_;
			pageTree = $temp$pageTree;
			continue rewind;
		}
	}
};
var $author$project$PageTreeEditor$PageTreeEditor$pageIndex = function (model) {
	var toList = function (_v0) {
		var pageInfo = _v0.a;
		var xs = _v0.b;
		var _v1 = pageInfo.kf;
		if (_v1.$ === 1) {
			return A2($elm$core$List$concatMap, toList, xs);
		} else {
			var contentId = _v1.a;
			var strPath = function (path) {
				return function (p) {
					return '/' + p;
				}(
					A2(
						$elm$core$String$join,
						'/',
						A2($elm$core$List$map, $elm$url$Url$percentEncode, path)));
			};
			return A2(
				$elm$core$List$cons,
				_Utils_Tuple3(
					strPath(pageInfo.K),
					pageInfo.I,
					$TSFoster$elm_uuid$UUID$toString(contentId)),
				A2($elm$core$List$concatMap, toList, xs));
		}
	};
	var _v2 = model.i;
	if (!_v2.$) {
		var pt = _v2.a;
		return $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var p = _v3.a;
					var n = _v3.b;
					var cId = _v3.c;
					return _Utils_Tuple2(
						cId,
						{I: n, K: p});
				},
				toList(
					$author$project$PageTreeEditor$PageTreeEditor$extractPage(
						$author$project$PageTreeEditor$PageTreeEditor$rewind(pt)))));
	} else {
		return $elm$core$Dict$empty;
	}
};
var $elm_community$string_extra$String$Extra$rightOfBack = F2(
	function (pattern, string) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				A2(
					$elm$core$Basics$composeR,
					$elm$core$Basics$add(
						$elm$core$String$length(pattern)),
					function (a) {
						return A2($elm$core$String$dropLeft, a, string);
					}),
				$elm$core$List$head(
					$elm$core$List$reverse(
						A2($elm$core$String$indexes, pattern, string)))));
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$setAlignMent = F2(
	function (attrs, alignment) {
		var alignments = _List_fromArray(
			[$author$project$Document$Document$FontAlignRight, $author$project$Document$Document$FontAlignLeft, $author$project$Document$Document$Center, $author$project$Document$Document$Justify]);
		var attrs_ = A2(
			$elm$core$List$filter,
			function (attr) {
				return !A2($elm$core$List$member, attr, alignments);
			},
			attrs);
		return A2($elm$core$List$cons, alignment, attrs_);
	});
var $hecrj$html_parser$Html$Parser$Text = function (a) {
	return {$: 0, a: a};
};
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = $elm$core$Basics$identity;
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0;
		return function (s0) {
			var _v1 = parseA(s0);
			if (_v1.$ === 1) {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p1 = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				var _v2 = callback(a);
				var parseB = _v2;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var p2 = _v3.a;
					var x = _v3.b;
					return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
				} else {
					var p2 = _v3.a;
					var b = _v3.b;
					var s2 = _v3.c;
					return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
				}
			}
		};
	});
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
	var parse = _v0;
	return function (s0) {
		var _v1 = parse(s0);
		if (_v1.$ === 1) {
			var x = _v1.b;
			return A2($elm$parser$Parser$Advanced$Bad, false, x);
		} else {
			var a = _v1.b;
			var s1 = _v1.c;
			return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
		}
	};
};
var $elm$parser$Parser$backtrackable = $elm$parser$Parser$Advanced$backtrackable;
var $elm$parser$Parser$UnexpectedChar = {$: 11};
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {gb: col, iK: contextStack, g8: problem, hi: row};
	});
var $elm$parser$Parser$Advanced$Empty = {$: 0};
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.hi, s.gb, x, s.d));
	});
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return function (s) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.kD, s.fK);
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				0,
				{gb: 1, d: s.d, fm: s.fm, kD: s.kD + 1, hi: s.hi + 1, fK: s.fK}) : A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				0,
				{gb: s.gb + 1, d: s.d, fm: s.fm, kD: newOffset, hi: s.hi, fK: s.fK}));
		};
	});
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.fK);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.kD, offset) < 0,
					0,
					{gb: col, d: s0.d, fm: s0.fm, kD: offset, hi: row, fK: s0.fK});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return function (s) {
		return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.kD, s.hi, s.gb, s);
	};
};
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0;
		var parseB = _v1;
		return function (s0) {
			var _v2 = parseA(s0);
			if (_v2.$ === 1) {
				var p = _v2.a;
				var x = _v2.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p1 = _v2.a;
				var a = _v2.b;
				var s1 = _v2.c;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var p2 = _v3.a;
					var x = _v3.b;
					return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
				} else {
					var p2 = _v3.a;
					var b = _v3.b;
					var s2 = _v3.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p1 || p2,
						A2(func, a, b),
						s2);
				}
			}
		};
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $hecrj$html_parser$Html$Parser$chompOneOrMore = function (fn) {
	return A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$chompIf(fn),
		$elm$parser$Parser$chompWhile(fn));
};
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(s0);
			if (_v1.$ === 1) {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				return A3(
					$elm$parser$Parser$Advanced$Good,
					p,
					A2(
						func,
						A3($elm$core$String$slice, s0.kD, s1.kD, s0.fK),
						a),
					s1);
			}
		};
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $hecrj$html_parser$Html$Parser$isSpaceCharacter = function (c) {
	return (c === ' ') || ((c === '\t') || ((c === '\n') || ((c === '\u000D') || ((c === '\u000C') || (c === '\u00A0')))));
};
var $elm$parser$Parser$Problem = function (a) {
	return {$: 12, a: a};
};
var $elm$parser$Parser$Advanced$problem = function (x) {
	return function (s) {
		return A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, x));
	};
};
var $elm$parser$Parser$problem = function (msg) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(msg));
};
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, a, s);
	};
};
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $hecrj$html_parser$Html$Parser$closingTag = function (name) {
	var chompName = A2(
		$elm$parser$Parser$andThen,
		function (closingName) {
			return _Utils_eq(
				$elm$core$String$toLower(closingName),
				name) ? $elm$parser$Parser$succeed(0) : $elm$parser$Parser$problem('closing tag does not match opening tag: ' + name);
		},
		$elm$parser$Parser$getChompedString(
			$hecrj$html_parser$Html$Parser$chompOneOrMore(
				function (c) {
					return (!$hecrj$html_parser$Html$Parser$isSpaceCharacter(c)) && (c !== '>');
				})));
	return A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$eq('<')),
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$eq('/'))),
				chompName),
			$elm$parser$Parser$chompWhile($hecrj$html_parser$Html$Parser$isSpaceCharacter)),
		$elm$parser$Parser$chompIf(
			$elm$core$Basics$eq('>')));
};
var $hecrj$html_parser$Html$Parser$Comment = function (a) {
	return {$: 2, a: a};
};
var $elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
var $elm$parser$Parser$Advanced$fromInfo = F4(
	function (row, col, x, context) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var $elm$parser$Parser$Advanced$chompUntil = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	return function (s) {
		var _v1 = A5($elm$parser$Parser$Advanced$findSubString, str, s.kD, s.hi, s.gb, s.fK);
		var newOffset = _v1.a;
		var newRow = _v1.b;
		var newCol = _v1.c;
		return _Utils_eq(newOffset, -1) ? A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A4($elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.d)) : A3(
			$elm$parser$Parser$Advanced$Good,
			_Utils_cmp(s.kD, newOffset) < 0,
			0,
			{gb: newCol, d: s.d, fm: s.fm, kD: newOffset, hi: newRow, fK: s.fK});
	};
};
var $elm$parser$Parser$Expecting = function (a) {
	return {$: 0, a: a};
};
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$parser$Parser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $elm$parser$Parser$chompUntil = function (str) {
	return $elm$parser$Parser$Advanced$chompUntil(
		$elm$parser$Parser$toToken(str));
};
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return function (s) {
		var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.kD, s.hi, s.gb, s.fK);
		var newOffset = _v1.a;
		var newRow = _v1.b;
		var newCol = _v1.c;
		return _Utils_eq(newOffset, -1) ? A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
			$elm$parser$Parser$Advanced$Good,
			progress,
			0,
			{gb: newCol, d: s.d, fm: s.fm, kD: newOffset, hi: newRow, fK: s.fK});
	};
};
var $elm$parser$Parser$token = function (str) {
	return $elm$parser$Parser$Advanced$token(
		$elm$parser$Parser$toToken(str));
};
var $hecrj$html_parser$Html$Parser$comment = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($hecrj$html_parser$Html$Parser$Comment),
			$elm$parser$Parser$token('<!')),
		$elm$parser$Parser$token('--')),
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$getChompedString(
			$elm$parser$Parser$chompUntil('-->')),
		$elm$parser$Parser$token('-->')));
var $elm$parser$Parser$Done = function (a) {
	return {$: 1, a: a};
};
var $elm$parser$Parser$Loop = function (a) {
	return {$: 0, a: a};
};
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0;
			var _v1 = parse(s0);
			if (!_v1.$) {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (!step.$) {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return function (s) {
			return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
		};
	});
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(s0);
			if (!_v1.$) {
				var p = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				return A3(
					$elm$parser$Parser$Advanced$Good,
					p,
					func(a),
					s1);
			} else {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			}
		};
	});
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 1, a: a};
};
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 0, a: a};
};
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (!step.$) {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (!_v1.$) {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return function (s) {
		return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
	};
};
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $hecrj$html_parser$Html$Parser$many = function (parser_) {
	return A2(
		$elm$parser$Parser$loop,
		_List_Nil,
		function (list) {
			return $elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$map,
						function (_new) {
							return $elm$parser$Parser$Loop(
								A2($elm$core$List$cons, _new, list));
						},
						parser_),
						$elm$parser$Parser$succeed(
						$elm$parser$Parser$Done(
							$elm$core$List$reverse(list)))
					]));
		});
};
var $hecrj$html_parser$Html$Parser$isTagAttributeCharacter = function (c) {
	return (!$hecrj$html_parser$Html$Parser$isSpaceCharacter(c)) && ((c !== '\"') && ((c !== '\'') && ((c !== '>') && ((c !== '/') && (c !== '=')))));
};
var $hecrj$html_parser$Html$Parser$tagAttributeName = A2(
	$elm$parser$Parser$map,
	$elm$core$String$toLower,
	$elm$parser$Parser$getChompedString(
		$hecrj$html_parser$Html$Parser$chompOneOrMore($hecrj$html_parser$Html$Parser$isTagAttributeCharacter)));
var $hecrj$html_parser$Html$Parser$chompSemicolon = $elm$parser$Parser$chompIf(
	$elm$core$Basics$eq(';'));
var $hecrj$html_parser$Html$Parser$NamedCharacterReferences$dict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('Aacute', 'Á'),
			_Utils_Tuple2('aacute', 'á'),
			_Utils_Tuple2('Abreve', 'Ă'),
			_Utils_Tuple2('abreve', 'ă'),
			_Utils_Tuple2('ac', '∾'),
			_Utils_Tuple2('acd', '∿'),
			_Utils_Tuple2('acE', '∾̳'),
			_Utils_Tuple2('Acirc', 'Â'),
			_Utils_Tuple2('acirc', 'â'),
			_Utils_Tuple2('acute', '´'),
			_Utils_Tuple2('Acy', 'А'),
			_Utils_Tuple2('acy', 'а'),
			_Utils_Tuple2('AElig', 'Æ'),
			_Utils_Tuple2('aelig', 'æ'),
			_Utils_Tuple2('af', '\u2061'),
			_Utils_Tuple2('Afr', '\uD835\uDD04'),
			_Utils_Tuple2('afr', '\uD835\uDD1E'),
			_Utils_Tuple2('Agrave', 'À'),
			_Utils_Tuple2('agrave', 'à'),
			_Utils_Tuple2('alefsym', 'ℵ'),
			_Utils_Tuple2('aleph', 'ℵ'),
			_Utils_Tuple2('Alpha', 'Α'),
			_Utils_Tuple2('alpha', 'α'),
			_Utils_Tuple2('Amacr', 'Ā'),
			_Utils_Tuple2('amacr', 'ā'),
			_Utils_Tuple2('amalg', '⨿'),
			_Utils_Tuple2('amp', '&'),
			_Utils_Tuple2('AMP', '&'),
			_Utils_Tuple2('andand', '⩕'),
			_Utils_Tuple2('And', '⩓'),
			_Utils_Tuple2('and', '∧'),
			_Utils_Tuple2('andd', '⩜'),
			_Utils_Tuple2('andslope', '⩘'),
			_Utils_Tuple2('andv', '⩚'),
			_Utils_Tuple2('ang', '∠'),
			_Utils_Tuple2('ange', '⦤'),
			_Utils_Tuple2('angle', '∠'),
			_Utils_Tuple2('angmsdaa', '⦨'),
			_Utils_Tuple2('angmsdab', '⦩'),
			_Utils_Tuple2('angmsdac', '⦪'),
			_Utils_Tuple2('angmsdad', '⦫'),
			_Utils_Tuple2('angmsdae', '⦬'),
			_Utils_Tuple2('angmsdaf', '⦭'),
			_Utils_Tuple2('angmsdag', '⦮'),
			_Utils_Tuple2('angmsdah', '⦯'),
			_Utils_Tuple2('angmsd', '∡'),
			_Utils_Tuple2('angrt', '∟'),
			_Utils_Tuple2('angrtvb', '⊾'),
			_Utils_Tuple2('angrtvbd', '⦝'),
			_Utils_Tuple2('angsph', '∢'),
			_Utils_Tuple2('angst', 'Å'),
			_Utils_Tuple2('angzarr', '⍼'),
			_Utils_Tuple2('Aogon', 'Ą'),
			_Utils_Tuple2('aogon', 'ą'),
			_Utils_Tuple2('Aopf', '\uD835\uDD38'),
			_Utils_Tuple2('aopf', '\uD835\uDD52'),
			_Utils_Tuple2('apacir', '⩯'),
			_Utils_Tuple2('ap', '≈'),
			_Utils_Tuple2('apE', '⩰'),
			_Utils_Tuple2('ape', '≊'),
			_Utils_Tuple2('apid', '≋'),
			_Utils_Tuple2('apos', '\''),
			_Utils_Tuple2('ApplyFunction', '\u2061'),
			_Utils_Tuple2('approx', '≈'),
			_Utils_Tuple2('approxeq', '≊'),
			_Utils_Tuple2('Aring', 'Å'),
			_Utils_Tuple2('aring', 'å'),
			_Utils_Tuple2('Ascr', '\uD835\uDC9C'),
			_Utils_Tuple2('ascr', '\uD835\uDCB6'),
			_Utils_Tuple2('Assign', '≔'),
			_Utils_Tuple2('ast', '*'),
			_Utils_Tuple2('asymp', '≈'),
			_Utils_Tuple2('asympeq', '≍'),
			_Utils_Tuple2('Atilde', 'Ã'),
			_Utils_Tuple2('atilde', 'ã'),
			_Utils_Tuple2('Auml', 'Ä'),
			_Utils_Tuple2('auml', 'ä'),
			_Utils_Tuple2('awconint', '∳'),
			_Utils_Tuple2('awint', '⨑'),
			_Utils_Tuple2('backcong', '≌'),
			_Utils_Tuple2('backepsilon', '϶'),
			_Utils_Tuple2('backprime', '‵'),
			_Utils_Tuple2('backsim', '∽'),
			_Utils_Tuple2('backsimeq', '⋍'),
			_Utils_Tuple2('Backslash', '∖'),
			_Utils_Tuple2('Barv', '⫧'),
			_Utils_Tuple2('barvee', '⊽'),
			_Utils_Tuple2('barwed', '⌅'),
			_Utils_Tuple2('Barwed', '⌆'),
			_Utils_Tuple2('barwedge', '⌅'),
			_Utils_Tuple2('bbrk', '⎵'),
			_Utils_Tuple2('bbrktbrk', '⎶'),
			_Utils_Tuple2('bcong', '≌'),
			_Utils_Tuple2('Bcy', 'Б'),
			_Utils_Tuple2('bcy', 'б'),
			_Utils_Tuple2('bdquo', '„'),
			_Utils_Tuple2('becaus', '∵'),
			_Utils_Tuple2('because', '∵'),
			_Utils_Tuple2('Because', '∵'),
			_Utils_Tuple2('bemptyv', '⦰'),
			_Utils_Tuple2('bepsi', '϶'),
			_Utils_Tuple2('bernou', 'ℬ'),
			_Utils_Tuple2('Bernoullis', 'ℬ'),
			_Utils_Tuple2('Beta', 'Β'),
			_Utils_Tuple2('beta', 'β'),
			_Utils_Tuple2('beth', 'ℶ'),
			_Utils_Tuple2('between', '≬'),
			_Utils_Tuple2('Bfr', '\uD835\uDD05'),
			_Utils_Tuple2('bfr', '\uD835\uDD1F'),
			_Utils_Tuple2('bigcap', '⋂'),
			_Utils_Tuple2('bigcirc', '◯'),
			_Utils_Tuple2('bigcup', '⋃'),
			_Utils_Tuple2('bigodot', '⨀'),
			_Utils_Tuple2('bigoplus', '⨁'),
			_Utils_Tuple2('bigotimes', '⨂'),
			_Utils_Tuple2('bigsqcup', '⨆'),
			_Utils_Tuple2('bigstar', '★'),
			_Utils_Tuple2('bigtriangledown', '▽'),
			_Utils_Tuple2('bigtriangleup', '△'),
			_Utils_Tuple2('biguplus', '⨄'),
			_Utils_Tuple2('bigvee', '⋁'),
			_Utils_Tuple2('bigwedge', '⋀'),
			_Utils_Tuple2('bkarow', '⤍'),
			_Utils_Tuple2('blacklozenge', '⧫'),
			_Utils_Tuple2('blacksquare', '▪'),
			_Utils_Tuple2('blacktriangle', '▴'),
			_Utils_Tuple2('blacktriangledown', '▾'),
			_Utils_Tuple2('blacktriangleleft', '◂'),
			_Utils_Tuple2('blacktriangleright', '▸'),
			_Utils_Tuple2('blank', '␣'),
			_Utils_Tuple2('blk12', '▒'),
			_Utils_Tuple2('blk14', '░'),
			_Utils_Tuple2('blk34', '▓'),
			_Utils_Tuple2('block', '█'),
			_Utils_Tuple2('bne', '=⃥'),
			_Utils_Tuple2('bnequiv', '≡⃥'),
			_Utils_Tuple2('bNot', '⫭'),
			_Utils_Tuple2('bnot', '⌐'),
			_Utils_Tuple2('Bopf', '\uD835\uDD39'),
			_Utils_Tuple2('bopf', '\uD835\uDD53'),
			_Utils_Tuple2('bot', '⊥'),
			_Utils_Tuple2('bottom', '⊥'),
			_Utils_Tuple2('bowtie', '⋈'),
			_Utils_Tuple2('boxbox', '⧉'),
			_Utils_Tuple2('boxdl', '┐'),
			_Utils_Tuple2('boxdL', '╕'),
			_Utils_Tuple2('boxDl', '╖'),
			_Utils_Tuple2('boxDL', '╗'),
			_Utils_Tuple2('boxdr', '┌'),
			_Utils_Tuple2('boxdR', '╒'),
			_Utils_Tuple2('boxDr', '╓'),
			_Utils_Tuple2('boxDR', '╔'),
			_Utils_Tuple2('boxh', '─'),
			_Utils_Tuple2('boxH', '═'),
			_Utils_Tuple2('boxhd', '┬'),
			_Utils_Tuple2('boxHd', '╤'),
			_Utils_Tuple2('boxhD', '╥'),
			_Utils_Tuple2('boxHD', '╦'),
			_Utils_Tuple2('boxhu', '┴'),
			_Utils_Tuple2('boxHu', '╧'),
			_Utils_Tuple2('boxhU', '╨'),
			_Utils_Tuple2('boxHU', '╩'),
			_Utils_Tuple2('boxminus', '⊟'),
			_Utils_Tuple2('boxplus', '⊞'),
			_Utils_Tuple2('boxtimes', '⊠'),
			_Utils_Tuple2('boxul', '┘'),
			_Utils_Tuple2('boxuL', '╛'),
			_Utils_Tuple2('boxUl', '╜'),
			_Utils_Tuple2('boxUL', '╝'),
			_Utils_Tuple2('boxur', '└'),
			_Utils_Tuple2('boxuR', '╘'),
			_Utils_Tuple2('boxUr', '╙'),
			_Utils_Tuple2('boxUR', '╚'),
			_Utils_Tuple2('boxv', '│'),
			_Utils_Tuple2('boxV', '║'),
			_Utils_Tuple2('boxvh', '┼'),
			_Utils_Tuple2('boxvH', '╪'),
			_Utils_Tuple2('boxVh', '╫'),
			_Utils_Tuple2('boxVH', '╬'),
			_Utils_Tuple2('boxvl', '┤'),
			_Utils_Tuple2('boxvL', '╡'),
			_Utils_Tuple2('boxVl', '╢'),
			_Utils_Tuple2('boxVL', '╣'),
			_Utils_Tuple2('boxvr', '├'),
			_Utils_Tuple2('boxvR', '╞'),
			_Utils_Tuple2('boxVr', '╟'),
			_Utils_Tuple2('boxVR', '╠'),
			_Utils_Tuple2('bprime', '‵'),
			_Utils_Tuple2('breve', '˘'),
			_Utils_Tuple2('Breve', '˘'),
			_Utils_Tuple2('brvbar', '¦'),
			_Utils_Tuple2('bscr', '\uD835\uDCB7'),
			_Utils_Tuple2('Bscr', 'ℬ'),
			_Utils_Tuple2('bsemi', '⁏'),
			_Utils_Tuple2('bsim', '∽'),
			_Utils_Tuple2('bsime', '⋍'),
			_Utils_Tuple2('bsolb', '⧅'),
			_Utils_Tuple2('bsol', '\\'),
			_Utils_Tuple2('bsolhsub', '⟈'),
			_Utils_Tuple2('bull', '•'),
			_Utils_Tuple2('bullet', '•'),
			_Utils_Tuple2('bump', '≎'),
			_Utils_Tuple2('bumpE', '⪮'),
			_Utils_Tuple2('bumpe', '≏'),
			_Utils_Tuple2('Bumpeq', '≎'),
			_Utils_Tuple2('bumpeq', '≏'),
			_Utils_Tuple2('Cacute', 'Ć'),
			_Utils_Tuple2('cacute', 'ć'),
			_Utils_Tuple2('capand', '⩄'),
			_Utils_Tuple2('capbrcup', '⩉'),
			_Utils_Tuple2('capcap', '⩋'),
			_Utils_Tuple2('cap', '∩'),
			_Utils_Tuple2('Cap', '⋒'),
			_Utils_Tuple2('capcup', '⩇'),
			_Utils_Tuple2('capdot', '⩀'),
			_Utils_Tuple2('CapitalDifferentialD', 'ⅅ'),
			_Utils_Tuple2('caps', '∩︀'),
			_Utils_Tuple2('caret', '⁁'),
			_Utils_Tuple2('caron', 'ˇ'),
			_Utils_Tuple2('Cayleys', 'ℭ'),
			_Utils_Tuple2('ccaps', '⩍'),
			_Utils_Tuple2('Ccaron', 'Č'),
			_Utils_Tuple2('ccaron', 'č'),
			_Utils_Tuple2('Ccedil', 'Ç'),
			_Utils_Tuple2('ccedil', 'ç'),
			_Utils_Tuple2('Ccirc', 'Ĉ'),
			_Utils_Tuple2('ccirc', 'ĉ'),
			_Utils_Tuple2('Cconint', '∰'),
			_Utils_Tuple2('ccups', '⩌'),
			_Utils_Tuple2('ccupssm', '⩐'),
			_Utils_Tuple2('Cdot', 'Ċ'),
			_Utils_Tuple2('cdot', 'ċ'),
			_Utils_Tuple2('cedil', '¸'),
			_Utils_Tuple2('Cedilla', '¸'),
			_Utils_Tuple2('cemptyv', '⦲'),
			_Utils_Tuple2('cent', '¢'),
			_Utils_Tuple2('centerdot', '·'),
			_Utils_Tuple2('CenterDot', '·'),
			_Utils_Tuple2('cfr', '\uD835\uDD20'),
			_Utils_Tuple2('Cfr', 'ℭ'),
			_Utils_Tuple2('CHcy', 'Ч'),
			_Utils_Tuple2('chcy', 'ч'),
			_Utils_Tuple2('check', '✓'),
			_Utils_Tuple2('checkmark', '✓'),
			_Utils_Tuple2('Chi', 'Χ'),
			_Utils_Tuple2('chi', 'χ'),
			_Utils_Tuple2('circ', 'ˆ'),
			_Utils_Tuple2('circeq', '≗'),
			_Utils_Tuple2('circlearrowleft', '↺'),
			_Utils_Tuple2('circlearrowright', '↻'),
			_Utils_Tuple2('circledast', '⊛'),
			_Utils_Tuple2('circledcirc', '⊚'),
			_Utils_Tuple2('circleddash', '⊝'),
			_Utils_Tuple2('CircleDot', '⊙'),
			_Utils_Tuple2('circledR', '®'),
			_Utils_Tuple2('circledS', 'Ⓢ'),
			_Utils_Tuple2('CircleMinus', '⊖'),
			_Utils_Tuple2('CirclePlus', '⊕'),
			_Utils_Tuple2('CircleTimes', '⊗'),
			_Utils_Tuple2('cir', '○'),
			_Utils_Tuple2('cirE', '⧃'),
			_Utils_Tuple2('cire', '≗'),
			_Utils_Tuple2('cirfnint', '⨐'),
			_Utils_Tuple2('cirmid', '⫯'),
			_Utils_Tuple2('cirscir', '⧂'),
			_Utils_Tuple2('ClockwiseContourIntegral', '∲'),
			_Utils_Tuple2('CloseCurlyDoubleQuote', '”'),
			_Utils_Tuple2('CloseCurlyQuote', '’'),
			_Utils_Tuple2('clubs', '♣'),
			_Utils_Tuple2('clubsuit', '♣'),
			_Utils_Tuple2('colon', ':'),
			_Utils_Tuple2('Colon', '∷'),
			_Utils_Tuple2('Colone', '⩴'),
			_Utils_Tuple2('colone', '≔'),
			_Utils_Tuple2('coloneq', '≔'),
			_Utils_Tuple2('comma', ','),
			_Utils_Tuple2('commat', '@'),
			_Utils_Tuple2('comp', '∁'),
			_Utils_Tuple2('compfn', '∘'),
			_Utils_Tuple2('complement', '∁'),
			_Utils_Tuple2('complexes', 'ℂ'),
			_Utils_Tuple2('cong', '≅'),
			_Utils_Tuple2('congdot', '⩭'),
			_Utils_Tuple2('Congruent', '≡'),
			_Utils_Tuple2('conint', '∮'),
			_Utils_Tuple2('Conint', '∯'),
			_Utils_Tuple2('ContourIntegral', '∮'),
			_Utils_Tuple2('copf', '\uD835\uDD54'),
			_Utils_Tuple2('Copf', 'ℂ'),
			_Utils_Tuple2('coprod', '∐'),
			_Utils_Tuple2('Coproduct', '∐'),
			_Utils_Tuple2('copy', '©'),
			_Utils_Tuple2('COPY', '©'),
			_Utils_Tuple2('copysr', '℗'),
			_Utils_Tuple2('CounterClockwiseContourIntegral', '∳'),
			_Utils_Tuple2('crarr', '↵'),
			_Utils_Tuple2('cross', '✗'),
			_Utils_Tuple2('Cross', '⨯'),
			_Utils_Tuple2('Cscr', '\uD835\uDC9E'),
			_Utils_Tuple2('cscr', '\uD835\uDCB8'),
			_Utils_Tuple2('csub', '⫏'),
			_Utils_Tuple2('csube', '⫑'),
			_Utils_Tuple2('csup', '⫐'),
			_Utils_Tuple2('csupe', '⫒'),
			_Utils_Tuple2('ctdot', '⋯'),
			_Utils_Tuple2('cudarrl', '⤸'),
			_Utils_Tuple2('cudarrr', '⤵'),
			_Utils_Tuple2('cuepr', '⋞'),
			_Utils_Tuple2('cuesc', '⋟'),
			_Utils_Tuple2('cularr', '↶'),
			_Utils_Tuple2('cularrp', '⤽'),
			_Utils_Tuple2('cupbrcap', '⩈'),
			_Utils_Tuple2('cupcap', '⩆'),
			_Utils_Tuple2('CupCap', '≍'),
			_Utils_Tuple2('cup', '∪'),
			_Utils_Tuple2('Cup', '⋓'),
			_Utils_Tuple2('cupcup', '⩊'),
			_Utils_Tuple2('cupdot', '⊍'),
			_Utils_Tuple2('cupor', '⩅'),
			_Utils_Tuple2('cups', '∪︀'),
			_Utils_Tuple2('curarr', '↷'),
			_Utils_Tuple2('curarrm', '⤼'),
			_Utils_Tuple2('curlyeqprec', '⋞'),
			_Utils_Tuple2('curlyeqsucc', '⋟'),
			_Utils_Tuple2('curlyvee', '⋎'),
			_Utils_Tuple2('curlywedge', '⋏'),
			_Utils_Tuple2('curren', '¤'),
			_Utils_Tuple2('curvearrowleft', '↶'),
			_Utils_Tuple2('curvearrowright', '↷'),
			_Utils_Tuple2('cuvee', '⋎'),
			_Utils_Tuple2('cuwed', '⋏'),
			_Utils_Tuple2('cwconint', '∲'),
			_Utils_Tuple2('cwint', '∱'),
			_Utils_Tuple2('cylcty', '⌭'),
			_Utils_Tuple2('dagger', '†'),
			_Utils_Tuple2('Dagger', '‡'),
			_Utils_Tuple2('daleth', 'ℸ'),
			_Utils_Tuple2('darr', '↓'),
			_Utils_Tuple2('Darr', '↡'),
			_Utils_Tuple2('dArr', '⇓'),
			_Utils_Tuple2('dash', '‐'),
			_Utils_Tuple2('Dashv', '⫤'),
			_Utils_Tuple2('dashv', '⊣'),
			_Utils_Tuple2('dbkarow', '⤏'),
			_Utils_Tuple2('dblac', '˝'),
			_Utils_Tuple2('Dcaron', 'Ď'),
			_Utils_Tuple2('dcaron', 'ď'),
			_Utils_Tuple2('Dcy', 'Д'),
			_Utils_Tuple2('dcy', 'д'),
			_Utils_Tuple2('ddagger', '‡'),
			_Utils_Tuple2('ddarr', '⇊'),
			_Utils_Tuple2('DD', 'ⅅ'),
			_Utils_Tuple2('dd', 'ⅆ'),
			_Utils_Tuple2('DDotrahd', '⤑'),
			_Utils_Tuple2('ddotseq', '⩷'),
			_Utils_Tuple2('deg', '°'),
			_Utils_Tuple2('Del', '∇'),
			_Utils_Tuple2('Delta', 'Δ'),
			_Utils_Tuple2('delta', 'δ'),
			_Utils_Tuple2('demptyv', '⦱'),
			_Utils_Tuple2('dfisht', '⥿'),
			_Utils_Tuple2('Dfr', '\uD835\uDD07'),
			_Utils_Tuple2('dfr', '\uD835\uDD21'),
			_Utils_Tuple2('dHar', '⥥'),
			_Utils_Tuple2('dharl', '⇃'),
			_Utils_Tuple2('dharr', '⇂'),
			_Utils_Tuple2('DiacriticalAcute', '´'),
			_Utils_Tuple2('DiacriticalDot', '˙'),
			_Utils_Tuple2('DiacriticalDoubleAcute', '˝'),
			_Utils_Tuple2('DiacriticalGrave', '`'),
			_Utils_Tuple2('DiacriticalTilde', '˜'),
			_Utils_Tuple2('diam', '⋄'),
			_Utils_Tuple2('diamond', '⋄'),
			_Utils_Tuple2('Diamond', '⋄'),
			_Utils_Tuple2('diamondsuit', '♦'),
			_Utils_Tuple2('diams', '♦'),
			_Utils_Tuple2('die', '¨'),
			_Utils_Tuple2('DifferentialD', 'ⅆ'),
			_Utils_Tuple2('digamma', 'ϝ'),
			_Utils_Tuple2('disin', '⋲'),
			_Utils_Tuple2('div', '÷'),
			_Utils_Tuple2('divide', '÷'),
			_Utils_Tuple2('divideontimes', '⋇'),
			_Utils_Tuple2('divonx', '⋇'),
			_Utils_Tuple2('DJcy', 'Ђ'),
			_Utils_Tuple2('djcy', 'ђ'),
			_Utils_Tuple2('dlcorn', '⌞'),
			_Utils_Tuple2('dlcrop', '⌍'),
			_Utils_Tuple2('dollar', '$'),
			_Utils_Tuple2('Dopf', '\uD835\uDD3B'),
			_Utils_Tuple2('dopf', '\uD835\uDD55'),
			_Utils_Tuple2('Dot', '¨'),
			_Utils_Tuple2('dot', '˙'),
			_Utils_Tuple2('DotDot', '⃜'),
			_Utils_Tuple2('doteq', '≐'),
			_Utils_Tuple2('doteqdot', '≑'),
			_Utils_Tuple2('DotEqual', '≐'),
			_Utils_Tuple2('dotminus', '∸'),
			_Utils_Tuple2('dotplus', '∔'),
			_Utils_Tuple2('dotsquare', '⊡'),
			_Utils_Tuple2('doublebarwedge', '⌆'),
			_Utils_Tuple2('DoubleContourIntegral', '∯'),
			_Utils_Tuple2('DoubleDot', '¨'),
			_Utils_Tuple2('DoubleDownArrow', '⇓'),
			_Utils_Tuple2('DoubleLeftArrow', '⇐'),
			_Utils_Tuple2('DoubleLeftRightArrow', '⇔'),
			_Utils_Tuple2('DoubleLeftTee', '⫤'),
			_Utils_Tuple2('DoubleLongLeftArrow', '⟸'),
			_Utils_Tuple2('DoubleLongLeftRightArrow', '⟺'),
			_Utils_Tuple2('DoubleLongRightArrow', '⟹'),
			_Utils_Tuple2('DoubleRightArrow', '⇒'),
			_Utils_Tuple2('DoubleRightTee', '⊨'),
			_Utils_Tuple2('DoubleUpArrow', '⇑'),
			_Utils_Tuple2('DoubleUpDownArrow', '⇕'),
			_Utils_Tuple2('DoubleVerticalBar', '∥'),
			_Utils_Tuple2('DownArrowBar', '⤓'),
			_Utils_Tuple2('downarrow', '↓'),
			_Utils_Tuple2('DownArrow', '↓'),
			_Utils_Tuple2('Downarrow', '⇓'),
			_Utils_Tuple2('DownArrowUpArrow', '⇵'),
			_Utils_Tuple2('DownBreve', '̑'),
			_Utils_Tuple2('downdownarrows', '⇊'),
			_Utils_Tuple2('downharpoonleft', '⇃'),
			_Utils_Tuple2('downharpoonright', '⇂'),
			_Utils_Tuple2('DownLeftRightVector', '⥐'),
			_Utils_Tuple2('DownLeftTeeVector', '⥞'),
			_Utils_Tuple2('DownLeftVectorBar', '⥖'),
			_Utils_Tuple2('DownLeftVector', '↽'),
			_Utils_Tuple2('DownRightTeeVector', '⥟'),
			_Utils_Tuple2('DownRightVectorBar', '⥗'),
			_Utils_Tuple2('DownRightVector', '⇁'),
			_Utils_Tuple2('DownTeeArrow', '↧'),
			_Utils_Tuple2('DownTee', '⊤'),
			_Utils_Tuple2('drbkarow', '⤐'),
			_Utils_Tuple2('drcorn', '⌟'),
			_Utils_Tuple2('drcrop', '⌌'),
			_Utils_Tuple2('Dscr', '\uD835\uDC9F'),
			_Utils_Tuple2('dscr', '\uD835\uDCB9'),
			_Utils_Tuple2('DScy', 'Ѕ'),
			_Utils_Tuple2('dscy', 'ѕ'),
			_Utils_Tuple2('dsol', '⧶'),
			_Utils_Tuple2('Dstrok', 'Đ'),
			_Utils_Tuple2('dstrok', 'đ'),
			_Utils_Tuple2('dtdot', '⋱'),
			_Utils_Tuple2('dtri', '▿'),
			_Utils_Tuple2('dtrif', '▾'),
			_Utils_Tuple2('duarr', '⇵'),
			_Utils_Tuple2('duhar', '⥯'),
			_Utils_Tuple2('dwangle', '⦦'),
			_Utils_Tuple2('DZcy', 'Џ'),
			_Utils_Tuple2('dzcy', 'џ'),
			_Utils_Tuple2('dzigrarr', '⟿'),
			_Utils_Tuple2('Eacute', 'É'),
			_Utils_Tuple2('eacute', 'é'),
			_Utils_Tuple2('easter', '⩮'),
			_Utils_Tuple2('Ecaron', 'Ě'),
			_Utils_Tuple2('ecaron', 'ě'),
			_Utils_Tuple2('Ecirc', 'Ê'),
			_Utils_Tuple2('ecirc', 'ê'),
			_Utils_Tuple2('ecir', '≖'),
			_Utils_Tuple2('ecolon', '≕'),
			_Utils_Tuple2('Ecy', 'Э'),
			_Utils_Tuple2('ecy', 'э'),
			_Utils_Tuple2('eDDot', '⩷'),
			_Utils_Tuple2('Edot', 'Ė'),
			_Utils_Tuple2('edot', 'ė'),
			_Utils_Tuple2('eDot', '≑'),
			_Utils_Tuple2('ee', 'ⅇ'),
			_Utils_Tuple2('efDot', '≒'),
			_Utils_Tuple2('Efr', '\uD835\uDD08'),
			_Utils_Tuple2('efr', '\uD835\uDD22'),
			_Utils_Tuple2('eg', '⪚'),
			_Utils_Tuple2('Egrave', 'È'),
			_Utils_Tuple2('egrave', 'è'),
			_Utils_Tuple2('egs', '⪖'),
			_Utils_Tuple2('egsdot', '⪘'),
			_Utils_Tuple2('el', '⪙'),
			_Utils_Tuple2('Element', '∈'),
			_Utils_Tuple2('elinters', '⏧'),
			_Utils_Tuple2('ell', 'ℓ'),
			_Utils_Tuple2('els', '⪕'),
			_Utils_Tuple2('elsdot', '⪗'),
			_Utils_Tuple2('Emacr', 'Ē'),
			_Utils_Tuple2('emacr', 'ē'),
			_Utils_Tuple2('empty', '∅'),
			_Utils_Tuple2('emptyset', '∅'),
			_Utils_Tuple2('EmptySmallSquare', '◻'),
			_Utils_Tuple2('emptyv', '∅'),
			_Utils_Tuple2('EmptyVerySmallSquare', '▫'),
			_Utils_Tuple2('emsp13', '\u2004'),
			_Utils_Tuple2('emsp14', '\u2005'),
			_Utils_Tuple2('emsp', '\u2003'),
			_Utils_Tuple2('ENG', 'Ŋ'),
			_Utils_Tuple2('eng', 'ŋ'),
			_Utils_Tuple2('ensp', '\u2002'),
			_Utils_Tuple2('Eogon', 'Ę'),
			_Utils_Tuple2('eogon', 'ę'),
			_Utils_Tuple2('Eopf', '\uD835\uDD3C'),
			_Utils_Tuple2('eopf', '\uD835\uDD56'),
			_Utils_Tuple2('epar', '⋕'),
			_Utils_Tuple2('eparsl', '⧣'),
			_Utils_Tuple2('eplus', '⩱'),
			_Utils_Tuple2('epsi', 'ε'),
			_Utils_Tuple2('Epsilon', 'Ε'),
			_Utils_Tuple2('epsilon', 'ε'),
			_Utils_Tuple2('epsiv', 'ϵ'),
			_Utils_Tuple2('eqcirc', '≖'),
			_Utils_Tuple2('eqcolon', '≕'),
			_Utils_Tuple2('eqsim', '≂'),
			_Utils_Tuple2('eqslantgtr', '⪖'),
			_Utils_Tuple2('eqslantless', '⪕'),
			_Utils_Tuple2('Equal', '⩵'),
			_Utils_Tuple2('equals', '='),
			_Utils_Tuple2('EqualTilde', '≂'),
			_Utils_Tuple2('equest', '≟'),
			_Utils_Tuple2('Equilibrium', '⇌'),
			_Utils_Tuple2('equiv', '≡'),
			_Utils_Tuple2('equivDD', '⩸'),
			_Utils_Tuple2('eqvparsl', '⧥'),
			_Utils_Tuple2('erarr', '⥱'),
			_Utils_Tuple2('erDot', '≓'),
			_Utils_Tuple2('escr', 'ℯ'),
			_Utils_Tuple2('Escr', 'ℰ'),
			_Utils_Tuple2('esdot', '≐'),
			_Utils_Tuple2('Esim', '⩳'),
			_Utils_Tuple2('esim', '≂'),
			_Utils_Tuple2('Eta', 'Η'),
			_Utils_Tuple2('eta', 'η'),
			_Utils_Tuple2('ETH', 'Ð'),
			_Utils_Tuple2('eth', 'ð'),
			_Utils_Tuple2('Euml', 'Ë'),
			_Utils_Tuple2('euml', 'ë'),
			_Utils_Tuple2('euro', '€'),
			_Utils_Tuple2('excl', '!'),
			_Utils_Tuple2('exist', '∃'),
			_Utils_Tuple2('Exists', '∃'),
			_Utils_Tuple2('expectation', 'ℰ'),
			_Utils_Tuple2('exponentiale', 'ⅇ'),
			_Utils_Tuple2('ExponentialE', 'ⅇ'),
			_Utils_Tuple2('fallingdotseq', '≒'),
			_Utils_Tuple2('Fcy', 'Ф'),
			_Utils_Tuple2('fcy', 'ф'),
			_Utils_Tuple2('female', '♀'),
			_Utils_Tuple2('ffilig', 'ﬃ'),
			_Utils_Tuple2('fflig', 'ﬀ'),
			_Utils_Tuple2('ffllig', 'ﬄ'),
			_Utils_Tuple2('Ffr', '\uD835\uDD09'),
			_Utils_Tuple2('ffr', '\uD835\uDD23'),
			_Utils_Tuple2('filig', 'ﬁ'),
			_Utils_Tuple2('FilledSmallSquare', '◼'),
			_Utils_Tuple2('FilledVerySmallSquare', '▪'),
			_Utils_Tuple2('fjlig', 'fj'),
			_Utils_Tuple2('flat', '♭'),
			_Utils_Tuple2('fllig', 'ﬂ'),
			_Utils_Tuple2('fltns', '▱'),
			_Utils_Tuple2('fnof', 'ƒ'),
			_Utils_Tuple2('Fopf', '\uD835\uDD3D'),
			_Utils_Tuple2('fopf', '\uD835\uDD57'),
			_Utils_Tuple2('forall', '∀'),
			_Utils_Tuple2('ForAll', '∀'),
			_Utils_Tuple2('fork', '⋔'),
			_Utils_Tuple2('forkv', '⫙'),
			_Utils_Tuple2('Fouriertrf', 'ℱ'),
			_Utils_Tuple2('fpartint', '⨍'),
			_Utils_Tuple2('frac12', '½'),
			_Utils_Tuple2('frac13', '⅓'),
			_Utils_Tuple2('frac14', '¼'),
			_Utils_Tuple2('frac15', '⅕'),
			_Utils_Tuple2('frac16', '⅙'),
			_Utils_Tuple2('frac18', '⅛'),
			_Utils_Tuple2('frac23', '⅔'),
			_Utils_Tuple2('frac25', '⅖'),
			_Utils_Tuple2('frac34', '¾'),
			_Utils_Tuple2('frac35', '⅗'),
			_Utils_Tuple2('frac38', '⅜'),
			_Utils_Tuple2('frac45', '⅘'),
			_Utils_Tuple2('frac56', '⅚'),
			_Utils_Tuple2('frac58', '⅝'),
			_Utils_Tuple2('frac78', '⅞'),
			_Utils_Tuple2('frasl', '⁄'),
			_Utils_Tuple2('frown', '⌢'),
			_Utils_Tuple2('fscr', '\uD835\uDCBB'),
			_Utils_Tuple2('Fscr', 'ℱ'),
			_Utils_Tuple2('gacute', 'ǵ'),
			_Utils_Tuple2('Gamma', 'Γ'),
			_Utils_Tuple2('gamma', 'γ'),
			_Utils_Tuple2('Gammad', 'Ϝ'),
			_Utils_Tuple2('gammad', 'ϝ'),
			_Utils_Tuple2('gap', '⪆'),
			_Utils_Tuple2('Gbreve', 'Ğ'),
			_Utils_Tuple2('gbreve', 'ğ'),
			_Utils_Tuple2('Gcedil', 'Ģ'),
			_Utils_Tuple2('Gcirc', 'Ĝ'),
			_Utils_Tuple2('gcirc', 'ĝ'),
			_Utils_Tuple2('Gcy', 'Г'),
			_Utils_Tuple2('gcy', 'г'),
			_Utils_Tuple2('Gdot', 'Ġ'),
			_Utils_Tuple2('gdot', 'ġ'),
			_Utils_Tuple2('ge', '≥'),
			_Utils_Tuple2('gE', '≧'),
			_Utils_Tuple2('gEl', '⪌'),
			_Utils_Tuple2('gel', '⋛'),
			_Utils_Tuple2('geq', '≥'),
			_Utils_Tuple2('geqq', '≧'),
			_Utils_Tuple2('geqslant', '⩾'),
			_Utils_Tuple2('gescc', '⪩'),
			_Utils_Tuple2('ges', '⩾'),
			_Utils_Tuple2('gesdot', '⪀'),
			_Utils_Tuple2('gesdoto', '⪂'),
			_Utils_Tuple2('gesdotol', '⪄'),
			_Utils_Tuple2('gesl', '⋛︀'),
			_Utils_Tuple2('gesles', '⪔'),
			_Utils_Tuple2('Gfr', '\uD835\uDD0A'),
			_Utils_Tuple2('gfr', '\uD835\uDD24'),
			_Utils_Tuple2('gg', '≫'),
			_Utils_Tuple2('Gg', '⋙'),
			_Utils_Tuple2('ggg', '⋙'),
			_Utils_Tuple2('gimel', 'ℷ'),
			_Utils_Tuple2('GJcy', 'Ѓ'),
			_Utils_Tuple2('gjcy', 'ѓ'),
			_Utils_Tuple2('gla', '⪥'),
			_Utils_Tuple2('gl', '≷'),
			_Utils_Tuple2('glE', '⪒'),
			_Utils_Tuple2('glj', '⪤'),
			_Utils_Tuple2('gnap', '⪊'),
			_Utils_Tuple2('gnapprox', '⪊'),
			_Utils_Tuple2('gne', '⪈'),
			_Utils_Tuple2('gnE', '≩'),
			_Utils_Tuple2('gneq', '⪈'),
			_Utils_Tuple2('gneqq', '≩'),
			_Utils_Tuple2('gnsim', '⋧'),
			_Utils_Tuple2('Gopf', '\uD835\uDD3E'),
			_Utils_Tuple2('gopf', '\uD835\uDD58'),
			_Utils_Tuple2('grave', '`'),
			_Utils_Tuple2('GreaterEqual', '≥'),
			_Utils_Tuple2('GreaterEqualLess', '⋛'),
			_Utils_Tuple2('GreaterFullEqual', '≧'),
			_Utils_Tuple2('GreaterGreater', '⪢'),
			_Utils_Tuple2('GreaterLess', '≷'),
			_Utils_Tuple2('GreaterSlantEqual', '⩾'),
			_Utils_Tuple2('GreaterTilde', '≳'),
			_Utils_Tuple2('Gscr', '\uD835\uDCA2'),
			_Utils_Tuple2('gscr', 'ℊ'),
			_Utils_Tuple2('gsim', '≳'),
			_Utils_Tuple2('gsime', '⪎'),
			_Utils_Tuple2('gsiml', '⪐'),
			_Utils_Tuple2('gtcc', '⪧'),
			_Utils_Tuple2('gtcir', '⩺'),
			_Utils_Tuple2('gt', '>'),
			_Utils_Tuple2('GT', '>'),
			_Utils_Tuple2('Gt', '≫'),
			_Utils_Tuple2('gtdot', '⋗'),
			_Utils_Tuple2('gtlPar', '⦕'),
			_Utils_Tuple2('gtquest', '⩼'),
			_Utils_Tuple2('gtrapprox', '⪆'),
			_Utils_Tuple2('gtrarr', '⥸'),
			_Utils_Tuple2('gtrdot', '⋗'),
			_Utils_Tuple2('gtreqless', '⋛'),
			_Utils_Tuple2('gtreqqless', '⪌'),
			_Utils_Tuple2('gtrless', '≷'),
			_Utils_Tuple2('gtrsim', '≳'),
			_Utils_Tuple2('gvertneqq', '≩︀'),
			_Utils_Tuple2('gvnE', '≩︀'),
			_Utils_Tuple2('Hacek', 'ˇ'),
			_Utils_Tuple2('hairsp', '\u200A'),
			_Utils_Tuple2('half', '½'),
			_Utils_Tuple2('hamilt', 'ℋ'),
			_Utils_Tuple2('HARDcy', 'Ъ'),
			_Utils_Tuple2('hardcy', 'ъ'),
			_Utils_Tuple2('harrcir', '⥈'),
			_Utils_Tuple2('harr', '↔'),
			_Utils_Tuple2('hArr', '⇔'),
			_Utils_Tuple2('harrw', '↭'),
			_Utils_Tuple2('Hat', '^'),
			_Utils_Tuple2('hbar', 'ℏ'),
			_Utils_Tuple2('Hcirc', 'Ĥ'),
			_Utils_Tuple2('hcirc', 'ĥ'),
			_Utils_Tuple2('hearts', '♥'),
			_Utils_Tuple2('heartsuit', '♥'),
			_Utils_Tuple2('hellip', '…'),
			_Utils_Tuple2('hercon', '⊹'),
			_Utils_Tuple2('hfr', '\uD835\uDD25'),
			_Utils_Tuple2('Hfr', 'ℌ'),
			_Utils_Tuple2('HilbertSpace', 'ℋ'),
			_Utils_Tuple2('hksearow', '⤥'),
			_Utils_Tuple2('hkswarow', '⤦'),
			_Utils_Tuple2('hoarr', '⇿'),
			_Utils_Tuple2('homtht', '∻'),
			_Utils_Tuple2('hookleftarrow', '↩'),
			_Utils_Tuple2('hookrightarrow', '↪'),
			_Utils_Tuple2('hopf', '\uD835\uDD59'),
			_Utils_Tuple2('Hopf', 'ℍ'),
			_Utils_Tuple2('horbar', '―'),
			_Utils_Tuple2('HorizontalLine', '─'),
			_Utils_Tuple2('hscr', '\uD835\uDCBD'),
			_Utils_Tuple2('Hscr', 'ℋ'),
			_Utils_Tuple2('hslash', 'ℏ'),
			_Utils_Tuple2('Hstrok', 'Ħ'),
			_Utils_Tuple2('hstrok', 'ħ'),
			_Utils_Tuple2('HumpDownHump', '≎'),
			_Utils_Tuple2('HumpEqual', '≏'),
			_Utils_Tuple2('hybull', '⁃'),
			_Utils_Tuple2('hyphen', '‐'),
			_Utils_Tuple2('Iacute', 'Í'),
			_Utils_Tuple2('iacute', 'í'),
			_Utils_Tuple2('ic', '\u2063'),
			_Utils_Tuple2('Icirc', 'Î'),
			_Utils_Tuple2('icirc', 'î'),
			_Utils_Tuple2('Icy', 'И'),
			_Utils_Tuple2('icy', 'и'),
			_Utils_Tuple2('Idot', 'İ'),
			_Utils_Tuple2('IEcy', 'Е'),
			_Utils_Tuple2('iecy', 'е'),
			_Utils_Tuple2('iexcl', '¡'),
			_Utils_Tuple2('iff', '⇔'),
			_Utils_Tuple2('ifr', '\uD835\uDD26'),
			_Utils_Tuple2('Ifr', 'ℑ'),
			_Utils_Tuple2('Igrave', 'Ì'),
			_Utils_Tuple2('igrave', 'ì'),
			_Utils_Tuple2('ii', 'ⅈ'),
			_Utils_Tuple2('iiiint', '⨌'),
			_Utils_Tuple2('iiint', '∭'),
			_Utils_Tuple2('iinfin', '⧜'),
			_Utils_Tuple2('iiota', '℩'),
			_Utils_Tuple2('IJlig', 'Ĳ'),
			_Utils_Tuple2('ijlig', 'ĳ'),
			_Utils_Tuple2('Imacr', 'Ī'),
			_Utils_Tuple2('imacr', 'ī'),
			_Utils_Tuple2('image', 'ℑ'),
			_Utils_Tuple2('ImaginaryI', 'ⅈ'),
			_Utils_Tuple2('imagline', 'ℐ'),
			_Utils_Tuple2('imagpart', 'ℑ'),
			_Utils_Tuple2('imath', 'ı'),
			_Utils_Tuple2('Im', 'ℑ'),
			_Utils_Tuple2('imof', '⊷'),
			_Utils_Tuple2('imped', 'Ƶ'),
			_Utils_Tuple2('Implies', '⇒'),
			_Utils_Tuple2('incare', '℅'),
			_Utils_Tuple2('in', '∈'),
			_Utils_Tuple2('infin', '∞'),
			_Utils_Tuple2('infintie', '⧝'),
			_Utils_Tuple2('inodot', 'ı'),
			_Utils_Tuple2('intcal', '⊺'),
			_Utils_Tuple2('int', '∫'),
			_Utils_Tuple2('Int', '∬'),
			_Utils_Tuple2('integers', 'ℤ'),
			_Utils_Tuple2('Integral', '∫'),
			_Utils_Tuple2('intercal', '⊺'),
			_Utils_Tuple2('Intersection', '⋂'),
			_Utils_Tuple2('intlarhk', '⨗'),
			_Utils_Tuple2('intprod', '⨼'),
			_Utils_Tuple2('InvisibleComma', '\u2063'),
			_Utils_Tuple2('InvisibleTimes', '\u2062'),
			_Utils_Tuple2('IOcy', 'Ё'),
			_Utils_Tuple2('iocy', 'ё'),
			_Utils_Tuple2('Iogon', 'Į'),
			_Utils_Tuple2('iogon', 'į'),
			_Utils_Tuple2('Iopf', '\uD835\uDD40'),
			_Utils_Tuple2('iopf', '\uD835\uDD5A'),
			_Utils_Tuple2('Iota', 'Ι'),
			_Utils_Tuple2('iota', 'ι'),
			_Utils_Tuple2('iprod', '⨼'),
			_Utils_Tuple2('iquest', '¿'),
			_Utils_Tuple2('iscr', '\uD835\uDCBE'),
			_Utils_Tuple2('Iscr', 'ℐ'),
			_Utils_Tuple2('isin', '∈'),
			_Utils_Tuple2('isindot', '⋵'),
			_Utils_Tuple2('isinE', '⋹'),
			_Utils_Tuple2('isins', '⋴'),
			_Utils_Tuple2('isinsv', '⋳'),
			_Utils_Tuple2('isinv', '∈'),
			_Utils_Tuple2('it', '\u2062'),
			_Utils_Tuple2('Itilde', 'Ĩ'),
			_Utils_Tuple2('itilde', 'ĩ'),
			_Utils_Tuple2('Iukcy', 'І'),
			_Utils_Tuple2('iukcy', 'і'),
			_Utils_Tuple2('Iuml', 'Ï'),
			_Utils_Tuple2('iuml', 'ï'),
			_Utils_Tuple2('Jcirc', 'Ĵ'),
			_Utils_Tuple2('jcirc', 'ĵ'),
			_Utils_Tuple2('Jcy', 'Й'),
			_Utils_Tuple2('jcy', 'й'),
			_Utils_Tuple2('Jfr', '\uD835\uDD0D'),
			_Utils_Tuple2('jfr', '\uD835\uDD27'),
			_Utils_Tuple2('jmath', 'ȷ'),
			_Utils_Tuple2('Jopf', '\uD835\uDD41'),
			_Utils_Tuple2('jopf', '\uD835\uDD5B'),
			_Utils_Tuple2('Jscr', '\uD835\uDCA5'),
			_Utils_Tuple2('jscr', '\uD835\uDCBF'),
			_Utils_Tuple2('Jsercy', 'Ј'),
			_Utils_Tuple2('jsercy', 'ј'),
			_Utils_Tuple2('Jukcy', 'Є'),
			_Utils_Tuple2('jukcy', 'є'),
			_Utils_Tuple2('Kappa', 'Κ'),
			_Utils_Tuple2('kappa', 'κ'),
			_Utils_Tuple2('kappav', 'ϰ'),
			_Utils_Tuple2('Kcedil', 'Ķ'),
			_Utils_Tuple2('kcedil', 'ķ'),
			_Utils_Tuple2('Kcy', 'К'),
			_Utils_Tuple2('kcy', 'к'),
			_Utils_Tuple2('Kfr', '\uD835\uDD0E'),
			_Utils_Tuple2('kfr', '\uD835\uDD28'),
			_Utils_Tuple2('kgreen', 'ĸ'),
			_Utils_Tuple2('KHcy', 'Х'),
			_Utils_Tuple2('khcy', 'х'),
			_Utils_Tuple2('KJcy', 'Ќ'),
			_Utils_Tuple2('kjcy', 'ќ'),
			_Utils_Tuple2('Kopf', '\uD835\uDD42'),
			_Utils_Tuple2('kopf', '\uD835\uDD5C'),
			_Utils_Tuple2('Kscr', '\uD835\uDCA6'),
			_Utils_Tuple2('kscr', '\uD835\uDCC0'),
			_Utils_Tuple2('lAarr', '⇚'),
			_Utils_Tuple2('Lacute', 'Ĺ'),
			_Utils_Tuple2('lacute', 'ĺ'),
			_Utils_Tuple2('laemptyv', '⦴'),
			_Utils_Tuple2('lagran', 'ℒ'),
			_Utils_Tuple2('Lambda', 'Λ'),
			_Utils_Tuple2('lambda', 'λ'),
			_Utils_Tuple2('lang', '⟨'),
			_Utils_Tuple2('Lang', '⟪'),
			_Utils_Tuple2('langd', '⦑'),
			_Utils_Tuple2('langle', '⟨'),
			_Utils_Tuple2('lap', '⪅'),
			_Utils_Tuple2('Laplacetrf', 'ℒ'),
			_Utils_Tuple2('laquo', '«'),
			_Utils_Tuple2('larrb', '⇤'),
			_Utils_Tuple2('larrbfs', '⤟'),
			_Utils_Tuple2('larr', '←'),
			_Utils_Tuple2('Larr', '↞'),
			_Utils_Tuple2('lArr', '⇐'),
			_Utils_Tuple2('larrfs', '⤝'),
			_Utils_Tuple2('larrhk', '↩'),
			_Utils_Tuple2('larrlp', '↫'),
			_Utils_Tuple2('larrpl', '⤹'),
			_Utils_Tuple2('larrsim', '⥳'),
			_Utils_Tuple2('larrtl', '↢'),
			_Utils_Tuple2('latail', '⤙'),
			_Utils_Tuple2('lAtail', '⤛'),
			_Utils_Tuple2('lat', '⪫'),
			_Utils_Tuple2('late', '⪭'),
			_Utils_Tuple2('lates', '⪭︀'),
			_Utils_Tuple2('lbarr', '⤌'),
			_Utils_Tuple2('lBarr', '⤎'),
			_Utils_Tuple2('lbbrk', '❲'),
			_Utils_Tuple2('lbrace', '{'),
			_Utils_Tuple2('lbrack', '['),
			_Utils_Tuple2('lbrke', '⦋'),
			_Utils_Tuple2('lbrksld', '⦏'),
			_Utils_Tuple2('lbrkslu', '⦍'),
			_Utils_Tuple2('Lcaron', 'Ľ'),
			_Utils_Tuple2('lcaron', 'ľ'),
			_Utils_Tuple2('Lcedil', 'Ļ'),
			_Utils_Tuple2('lcedil', 'ļ'),
			_Utils_Tuple2('lceil', '⌈'),
			_Utils_Tuple2('lcub', '{'),
			_Utils_Tuple2('Lcy', 'Л'),
			_Utils_Tuple2('lcy', 'л'),
			_Utils_Tuple2('ldca', '⤶'),
			_Utils_Tuple2('ldquo', '“'),
			_Utils_Tuple2('ldquor', '„'),
			_Utils_Tuple2('ldrdhar', '⥧'),
			_Utils_Tuple2('ldrushar', '⥋'),
			_Utils_Tuple2('ldsh', '↲'),
			_Utils_Tuple2('le', '≤'),
			_Utils_Tuple2('lE', '≦'),
			_Utils_Tuple2('LeftAngleBracket', '⟨'),
			_Utils_Tuple2('LeftArrowBar', '⇤'),
			_Utils_Tuple2('leftarrow', '←'),
			_Utils_Tuple2('LeftArrow', '←'),
			_Utils_Tuple2('Leftarrow', '⇐'),
			_Utils_Tuple2('LeftArrowRightArrow', '⇆'),
			_Utils_Tuple2('leftarrowtail', '↢'),
			_Utils_Tuple2('LeftCeiling', '⌈'),
			_Utils_Tuple2('LeftDoubleBracket', '⟦'),
			_Utils_Tuple2('LeftDownTeeVector', '⥡'),
			_Utils_Tuple2('LeftDownVectorBar', '⥙'),
			_Utils_Tuple2('LeftDownVector', '⇃'),
			_Utils_Tuple2('LeftFloor', '⌊'),
			_Utils_Tuple2('leftharpoondown', '↽'),
			_Utils_Tuple2('leftharpoonup', '↼'),
			_Utils_Tuple2('leftleftarrows', '⇇'),
			_Utils_Tuple2('leftrightarrow', '↔'),
			_Utils_Tuple2('LeftRightArrow', '↔'),
			_Utils_Tuple2('Leftrightarrow', '⇔'),
			_Utils_Tuple2('leftrightarrows', '⇆'),
			_Utils_Tuple2('leftrightharpoons', '⇋'),
			_Utils_Tuple2('leftrightsquigarrow', '↭'),
			_Utils_Tuple2('LeftRightVector', '⥎'),
			_Utils_Tuple2('LeftTeeArrow', '↤'),
			_Utils_Tuple2('LeftTee', '⊣'),
			_Utils_Tuple2('LeftTeeVector', '⥚'),
			_Utils_Tuple2('leftthreetimes', '⋋'),
			_Utils_Tuple2('LeftTriangleBar', '⧏'),
			_Utils_Tuple2('LeftTriangle', '⊲'),
			_Utils_Tuple2('LeftTriangleEqual', '⊴'),
			_Utils_Tuple2('LeftUpDownVector', '⥑'),
			_Utils_Tuple2('LeftUpTeeVector', '⥠'),
			_Utils_Tuple2('LeftUpVectorBar', '⥘'),
			_Utils_Tuple2('LeftUpVector', '↿'),
			_Utils_Tuple2('LeftVectorBar', '⥒'),
			_Utils_Tuple2('LeftVector', '↼'),
			_Utils_Tuple2('lEg', '⪋'),
			_Utils_Tuple2('leg', '⋚'),
			_Utils_Tuple2('leq', '≤'),
			_Utils_Tuple2('leqq', '≦'),
			_Utils_Tuple2('leqslant', '⩽'),
			_Utils_Tuple2('lescc', '⪨'),
			_Utils_Tuple2('les', '⩽'),
			_Utils_Tuple2('lesdot', '⩿'),
			_Utils_Tuple2('lesdoto', '⪁'),
			_Utils_Tuple2('lesdotor', '⪃'),
			_Utils_Tuple2('lesg', '⋚︀'),
			_Utils_Tuple2('lesges', '⪓'),
			_Utils_Tuple2('lessapprox', '⪅'),
			_Utils_Tuple2('lessdot', '⋖'),
			_Utils_Tuple2('lesseqgtr', '⋚'),
			_Utils_Tuple2('lesseqqgtr', '⪋'),
			_Utils_Tuple2('LessEqualGreater', '⋚'),
			_Utils_Tuple2('LessFullEqual', '≦'),
			_Utils_Tuple2('LessGreater', '≶'),
			_Utils_Tuple2('lessgtr', '≶'),
			_Utils_Tuple2('LessLess', '⪡'),
			_Utils_Tuple2('lesssim', '≲'),
			_Utils_Tuple2('LessSlantEqual', '⩽'),
			_Utils_Tuple2('LessTilde', '≲'),
			_Utils_Tuple2('lfisht', '⥼'),
			_Utils_Tuple2('lfloor', '⌊'),
			_Utils_Tuple2('Lfr', '\uD835\uDD0F'),
			_Utils_Tuple2('lfr', '\uD835\uDD29'),
			_Utils_Tuple2('lg', '≶'),
			_Utils_Tuple2('lgE', '⪑'),
			_Utils_Tuple2('lHar', '⥢'),
			_Utils_Tuple2('lhard', '↽'),
			_Utils_Tuple2('lharu', '↼'),
			_Utils_Tuple2('lharul', '⥪'),
			_Utils_Tuple2('lhblk', '▄'),
			_Utils_Tuple2('LJcy', 'Љ'),
			_Utils_Tuple2('ljcy', 'љ'),
			_Utils_Tuple2('llarr', '⇇'),
			_Utils_Tuple2('ll', '≪'),
			_Utils_Tuple2('Ll', '⋘'),
			_Utils_Tuple2('llcorner', '⌞'),
			_Utils_Tuple2('Lleftarrow', '⇚'),
			_Utils_Tuple2('llhard', '⥫'),
			_Utils_Tuple2('lltri', '◺'),
			_Utils_Tuple2('Lmidot', 'Ŀ'),
			_Utils_Tuple2('lmidot', 'ŀ'),
			_Utils_Tuple2('lmoustache', '⎰'),
			_Utils_Tuple2('lmoust', '⎰'),
			_Utils_Tuple2('lnap', '⪉'),
			_Utils_Tuple2('lnapprox', '⪉'),
			_Utils_Tuple2('lne', '⪇'),
			_Utils_Tuple2('lnE', '≨'),
			_Utils_Tuple2('lneq', '⪇'),
			_Utils_Tuple2('lneqq', '≨'),
			_Utils_Tuple2('lnsim', '⋦'),
			_Utils_Tuple2('loang', '⟬'),
			_Utils_Tuple2('loarr', '⇽'),
			_Utils_Tuple2('lobrk', '⟦'),
			_Utils_Tuple2('longleftarrow', '⟵'),
			_Utils_Tuple2('LongLeftArrow', '⟵'),
			_Utils_Tuple2('Longleftarrow', '⟸'),
			_Utils_Tuple2('longleftrightarrow', '⟷'),
			_Utils_Tuple2('LongLeftRightArrow', '⟷'),
			_Utils_Tuple2('Longleftrightarrow', '⟺'),
			_Utils_Tuple2('longmapsto', '⟼'),
			_Utils_Tuple2('longrightarrow', '⟶'),
			_Utils_Tuple2('LongRightArrow', '⟶'),
			_Utils_Tuple2('Longrightarrow', '⟹'),
			_Utils_Tuple2('looparrowleft', '↫'),
			_Utils_Tuple2('looparrowright', '↬'),
			_Utils_Tuple2('lopar', '⦅'),
			_Utils_Tuple2('Lopf', '\uD835\uDD43'),
			_Utils_Tuple2('lopf', '\uD835\uDD5D'),
			_Utils_Tuple2('loplus', '⨭'),
			_Utils_Tuple2('lotimes', '⨴'),
			_Utils_Tuple2('lowast', '∗'),
			_Utils_Tuple2('lowbar', '_'),
			_Utils_Tuple2('LowerLeftArrow', '↙'),
			_Utils_Tuple2('LowerRightArrow', '↘'),
			_Utils_Tuple2('loz', '◊'),
			_Utils_Tuple2('lozenge', '◊'),
			_Utils_Tuple2('lozf', '⧫'),
			_Utils_Tuple2('lpar', '('),
			_Utils_Tuple2('lparlt', '⦓'),
			_Utils_Tuple2('lrarr', '⇆'),
			_Utils_Tuple2('lrcorner', '⌟'),
			_Utils_Tuple2('lrhar', '⇋'),
			_Utils_Tuple2('lrhard', '⥭'),
			_Utils_Tuple2('lrm', '\u200E'),
			_Utils_Tuple2('lrtri', '⊿'),
			_Utils_Tuple2('lsaquo', '‹'),
			_Utils_Tuple2('lscr', '\uD835\uDCC1'),
			_Utils_Tuple2('Lscr', 'ℒ'),
			_Utils_Tuple2('lsh', '↰'),
			_Utils_Tuple2('Lsh', '↰'),
			_Utils_Tuple2('lsim', '≲'),
			_Utils_Tuple2('lsime', '⪍'),
			_Utils_Tuple2('lsimg', '⪏'),
			_Utils_Tuple2('lsqb', '['),
			_Utils_Tuple2('lsquo', '‘'),
			_Utils_Tuple2('lsquor', '‚'),
			_Utils_Tuple2('Lstrok', 'Ł'),
			_Utils_Tuple2('lstrok', 'ł'),
			_Utils_Tuple2('ltcc', '⪦'),
			_Utils_Tuple2('ltcir', '⩹'),
			_Utils_Tuple2('lt', '<'),
			_Utils_Tuple2('LT', '<'),
			_Utils_Tuple2('Lt', '≪'),
			_Utils_Tuple2('ltdot', '⋖'),
			_Utils_Tuple2('lthree', '⋋'),
			_Utils_Tuple2('ltimes', '⋉'),
			_Utils_Tuple2('ltlarr', '⥶'),
			_Utils_Tuple2('ltquest', '⩻'),
			_Utils_Tuple2('ltri', '◃'),
			_Utils_Tuple2('ltrie', '⊴'),
			_Utils_Tuple2('ltrif', '◂'),
			_Utils_Tuple2('ltrPar', '⦖'),
			_Utils_Tuple2('lurdshar', '⥊'),
			_Utils_Tuple2('luruhar', '⥦'),
			_Utils_Tuple2('lvertneqq', '≨︀'),
			_Utils_Tuple2('lvnE', '≨︀'),
			_Utils_Tuple2('macr', '¯'),
			_Utils_Tuple2('male', '♂'),
			_Utils_Tuple2('malt', '✠'),
			_Utils_Tuple2('maltese', '✠'),
			_Utils_Tuple2('Map', '⤅'),
			_Utils_Tuple2('map', '↦'),
			_Utils_Tuple2('mapsto', '↦'),
			_Utils_Tuple2('mapstodown', '↧'),
			_Utils_Tuple2('mapstoleft', '↤'),
			_Utils_Tuple2('mapstoup', '↥'),
			_Utils_Tuple2('marker', '▮'),
			_Utils_Tuple2('mcomma', '⨩'),
			_Utils_Tuple2('Mcy', 'М'),
			_Utils_Tuple2('mcy', 'м'),
			_Utils_Tuple2('mdash', '—'),
			_Utils_Tuple2('mDDot', '∺'),
			_Utils_Tuple2('measuredangle', '∡'),
			_Utils_Tuple2('MediumSpace', '\u205F'),
			_Utils_Tuple2('Mellintrf', 'ℳ'),
			_Utils_Tuple2('Mfr', '\uD835\uDD10'),
			_Utils_Tuple2('mfr', '\uD835\uDD2A'),
			_Utils_Tuple2('mho', '℧'),
			_Utils_Tuple2('micro', 'µ'),
			_Utils_Tuple2('midast', '*'),
			_Utils_Tuple2('midcir', '⫰'),
			_Utils_Tuple2('mid', '∣'),
			_Utils_Tuple2('middot', '·'),
			_Utils_Tuple2('minusb', '⊟'),
			_Utils_Tuple2('minus', '−'),
			_Utils_Tuple2('minusd', '∸'),
			_Utils_Tuple2('minusdu', '⨪'),
			_Utils_Tuple2('MinusPlus', '∓'),
			_Utils_Tuple2('mlcp', '⫛'),
			_Utils_Tuple2('mldr', '…'),
			_Utils_Tuple2('mnplus', '∓'),
			_Utils_Tuple2('models', '⊧'),
			_Utils_Tuple2('Mopf', '\uD835\uDD44'),
			_Utils_Tuple2('mopf', '\uD835\uDD5E'),
			_Utils_Tuple2('mp', '∓'),
			_Utils_Tuple2('mscr', '\uD835\uDCC2'),
			_Utils_Tuple2('Mscr', 'ℳ'),
			_Utils_Tuple2('mstpos', '∾'),
			_Utils_Tuple2('Mu', 'Μ'),
			_Utils_Tuple2('mu', 'μ'),
			_Utils_Tuple2('multimap', '⊸'),
			_Utils_Tuple2('mumap', '⊸'),
			_Utils_Tuple2('nabla', '∇'),
			_Utils_Tuple2('Nacute', 'Ń'),
			_Utils_Tuple2('nacute', 'ń'),
			_Utils_Tuple2('nang', '∠⃒'),
			_Utils_Tuple2('nap', '≉'),
			_Utils_Tuple2('napE', '⩰̸'),
			_Utils_Tuple2('napid', '≋̸'),
			_Utils_Tuple2('napos', 'ŉ'),
			_Utils_Tuple2('napprox', '≉'),
			_Utils_Tuple2('natural', '♮'),
			_Utils_Tuple2('naturals', 'ℕ'),
			_Utils_Tuple2('natur', '♮'),
			_Utils_Tuple2('nbsp', '\u00A0'),
			_Utils_Tuple2('nbump', '≎̸'),
			_Utils_Tuple2('nbumpe', '≏̸'),
			_Utils_Tuple2('ncap', '⩃'),
			_Utils_Tuple2('Ncaron', 'Ň'),
			_Utils_Tuple2('ncaron', 'ň'),
			_Utils_Tuple2('Ncedil', 'Ņ'),
			_Utils_Tuple2('ncedil', 'ņ'),
			_Utils_Tuple2('ncong', '≇'),
			_Utils_Tuple2('ncongdot', '⩭̸'),
			_Utils_Tuple2('ncup', '⩂'),
			_Utils_Tuple2('Ncy', 'Н'),
			_Utils_Tuple2('ncy', 'н'),
			_Utils_Tuple2('ndash', '–'),
			_Utils_Tuple2('nearhk', '⤤'),
			_Utils_Tuple2('nearr', '↗'),
			_Utils_Tuple2('neArr', '⇗'),
			_Utils_Tuple2('nearrow', '↗'),
			_Utils_Tuple2('ne', '≠'),
			_Utils_Tuple2('nedot', '≐̸'),
			_Utils_Tuple2('NegativeMediumSpace', '\u200B'),
			_Utils_Tuple2('NegativeThickSpace', '\u200B'),
			_Utils_Tuple2('NegativeThinSpace', '\u200B'),
			_Utils_Tuple2('NegativeVeryThinSpace', '\u200B'),
			_Utils_Tuple2('nequiv', '≢'),
			_Utils_Tuple2('nesear', '⤨'),
			_Utils_Tuple2('nesim', '≂̸'),
			_Utils_Tuple2('NestedGreaterGreater', '≫'),
			_Utils_Tuple2('NestedLessLess', '≪'),
			_Utils_Tuple2('NewLine', '\n'),
			_Utils_Tuple2('nexist', '∄'),
			_Utils_Tuple2('nexists', '∄'),
			_Utils_Tuple2('Nfr', '\uD835\uDD11'),
			_Utils_Tuple2('nfr', '\uD835\uDD2B'),
			_Utils_Tuple2('ngE', '≧̸'),
			_Utils_Tuple2('nge', '≱'),
			_Utils_Tuple2('ngeq', '≱'),
			_Utils_Tuple2('ngeqq', '≧̸'),
			_Utils_Tuple2('ngeqslant', '⩾̸'),
			_Utils_Tuple2('nges', '⩾̸'),
			_Utils_Tuple2('nGg', '⋙̸'),
			_Utils_Tuple2('ngsim', '≵'),
			_Utils_Tuple2('nGt', '≫⃒'),
			_Utils_Tuple2('ngt', '≯'),
			_Utils_Tuple2('ngtr', '≯'),
			_Utils_Tuple2('nGtv', '≫̸'),
			_Utils_Tuple2('nharr', '↮'),
			_Utils_Tuple2('nhArr', '⇎'),
			_Utils_Tuple2('nhpar', '⫲'),
			_Utils_Tuple2('ni', '∋'),
			_Utils_Tuple2('nis', '⋼'),
			_Utils_Tuple2('nisd', '⋺'),
			_Utils_Tuple2('niv', '∋'),
			_Utils_Tuple2('NJcy', 'Њ'),
			_Utils_Tuple2('njcy', 'њ'),
			_Utils_Tuple2('nlarr', '↚'),
			_Utils_Tuple2('nlArr', '⇍'),
			_Utils_Tuple2('nldr', '‥'),
			_Utils_Tuple2('nlE', '≦̸'),
			_Utils_Tuple2('nle', '≰'),
			_Utils_Tuple2('nleftarrow', '↚'),
			_Utils_Tuple2('nLeftarrow', '⇍'),
			_Utils_Tuple2('nleftrightarrow', '↮'),
			_Utils_Tuple2('nLeftrightarrow', '⇎'),
			_Utils_Tuple2('nleq', '≰'),
			_Utils_Tuple2('nleqq', '≦̸'),
			_Utils_Tuple2('nleqslant', '⩽̸'),
			_Utils_Tuple2('nles', '⩽̸'),
			_Utils_Tuple2('nless', '≮'),
			_Utils_Tuple2('nLl', '⋘̸'),
			_Utils_Tuple2('nlsim', '≴'),
			_Utils_Tuple2('nLt', '≪⃒'),
			_Utils_Tuple2('nlt', '≮'),
			_Utils_Tuple2('nltri', '⋪'),
			_Utils_Tuple2('nltrie', '⋬'),
			_Utils_Tuple2('nLtv', '≪̸'),
			_Utils_Tuple2('nmid', '∤'),
			_Utils_Tuple2('NoBreak', '\u2060'),
			_Utils_Tuple2('NonBreakingSpace', '\u00A0'),
			_Utils_Tuple2('nopf', '\uD835\uDD5F'),
			_Utils_Tuple2('Nopf', 'ℕ'),
			_Utils_Tuple2('Not', '⫬'),
			_Utils_Tuple2('not', '¬'),
			_Utils_Tuple2('NotCongruent', '≢'),
			_Utils_Tuple2('NotCupCap', '≭'),
			_Utils_Tuple2('NotDoubleVerticalBar', '∦'),
			_Utils_Tuple2('NotElement', '∉'),
			_Utils_Tuple2('NotEqual', '≠'),
			_Utils_Tuple2('NotEqualTilde', '≂̸'),
			_Utils_Tuple2('NotExists', '∄'),
			_Utils_Tuple2('NotGreater', '≯'),
			_Utils_Tuple2('NotGreaterEqual', '≱'),
			_Utils_Tuple2('NotGreaterFullEqual', '≧̸'),
			_Utils_Tuple2('NotGreaterGreater', '≫̸'),
			_Utils_Tuple2('NotGreaterLess', '≹'),
			_Utils_Tuple2('NotGreaterSlantEqual', '⩾̸'),
			_Utils_Tuple2('NotGreaterTilde', '≵'),
			_Utils_Tuple2('NotHumpDownHump', '≎̸'),
			_Utils_Tuple2('NotHumpEqual', '≏̸'),
			_Utils_Tuple2('notin', '∉'),
			_Utils_Tuple2('notindot', '⋵̸'),
			_Utils_Tuple2('notinE', '⋹̸'),
			_Utils_Tuple2('notinva', '∉'),
			_Utils_Tuple2('notinvb', '⋷'),
			_Utils_Tuple2('notinvc', '⋶'),
			_Utils_Tuple2('NotLeftTriangleBar', '⧏̸'),
			_Utils_Tuple2('NotLeftTriangle', '⋪'),
			_Utils_Tuple2('NotLeftTriangleEqual', '⋬'),
			_Utils_Tuple2('NotLess', '≮'),
			_Utils_Tuple2('NotLessEqual', '≰'),
			_Utils_Tuple2('NotLessGreater', '≸'),
			_Utils_Tuple2('NotLessLess', '≪̸'),
			_Utils_Tuple2('NotLessSlantEqual', '⩽̸'),
			_Utils_Tuple2('NotLessTilde', '≴'),
			_Utils_Tuple2('NotNestedGreaterGreater', '⪢̸'),
			_Utils_Tuple2('NotNestedLessLess', '⪡̸'),
			_Utils_Tuple2('notni', '∌'),
			_Utils_Tuple2('notniva', '∌'),
			_Utils_Tuple2('notnivb', '⋾'),
			_Utils_Tuple2('notnivc', '⋽'),
			_Utils_Tuple2('NotPrecedes', '⊀'),
			_Utils_Tuple2('NotPrecedesEqual', '⪯̸'),
			_Utils_Tuple2('NotPrecedesSlantEqual', '⋠'),
			_Utils_Tuple2('NotReverseElement', '∌'),
			_Utils_Tuple2('NotRightTriangleBar', '⧐̸'),
			_Utils_Tuple2('NotRightTriangle', '⋫'),
			_Utils_Tuple2('NotRightTriangleEqual', '⋭'),
			_Utils_Tuple2('NotSquareSubset', '⊏̸'),
			_Utils_Tuple2('NotSquareSubsetEqual', '⋢'),
			_Utils_Tuple2('NotSquareSuperset', '⊐̸'),
			_Utils_Tuple2('NotSquareSupersetEqual', '⋣'),
			_Utils_Tuple2('NotSubset', '⊂⃒'),
			_Utils_Tuple2('NotSubsetEqual', '⊈'),
			_Utils_Tuple2('NotSucceeds', '⊁'),
			_Utils_Tuple2('NotSucceedsEqual', '⪰̸'),
			_Utils_Tuple2('NotSucceedsSlantEqual', '⋡'),
			_Utils_Tuple2('NotSucceedsTilde', '≿̸'),
			_Utils_Tuple2('NotSuperset', '⊃⃒'),
			_Utils_Tuple2('NotSupersetEqual', '⊉'),
			_Utils_Tuple2('NotTilde', '≁'),
			_Utils_Tuple2('NotTildeEqual', '≄'),
			_Utils_Tuple2('NotTildeFullEqual', '≇'),
			_Utils_Tuple2('NotTildeTilde', '≉'),
			_Utils_Tuple2('NotVerticalBar', '∤'),
			_Utils_Tuple2('nparallel', '∦'),
			_Utils_Tuple2('npar', '∦'),
			_Utils_Tuple2('nparsl', '⫽⃥'),
			_Utils_Tuple2('npart', '∂̸'),
			_Utils_Tuple2('npolint', '⨔'),
			_Utils_Tuple2('npr', '⊀'),
			_Utils_Tuple2('nprcue', '⋠'),
			_Utils_Tuple2('nprec', '⊀'),
			_Utils_Tuple2('npreceq', '⪯̸'),
			_Utils_Tuple2('npre', '⪯̸'),
			_Utils_Tuple2('nrarrc', '⤳̸'),
			_Utils_Tuple2('nrarr', '↛'),
			_Utils_Tuple2('nrArr', '⇏'),
			_Utils_Tuple2('nrarrw', '↝̸'),
			_Utils_Tuple2('nrightarrow', '↛'),
			_Utils_Tuple2('nRightarrow', '⇏'),
			_Utils_Tuple2('nrtri', '⋫'),
			_Utils_Tuple2('nrtrie', '⋭'),
			_Utils_Tuple2('nsc', '⊁'),
			_Utils_Tuple2('nsccue', '⋡'),
			_Utils_Tuple2('nsce', '⪰̸'),
			_Utils_Tuple2('Nscr', '\uD835\uDCA9'),
			_Utils_Tuple2('nscr', '\uD835\uDCC3'),
			_Utils_Tuple2('nshortmid', '∤'),
			_Utils_Tuple2('nshortparallel', '∦'),
			_Utils_Tuple2('nsim', '≁'),
			_Utils_Tuple2('nsime', '≄'),
			_Utils_Tuple2('nsimeq', '≄'),
			_Utils_Tuple2('nsmid', '∤'),
			_Utils_Tuple2('nspar', '∦'),
			_Utils_Tuple2('nsqsube', '⋢'),
			_Utils_Tuple2('nsqsupe', '⋣'),
			_Utils_Tuple2('nsub', '⊄'),
			_Utils_Tuple2('nsubE', '⫅̸'),
			_Utils_Tuple2('nsube', '⊈'),
			_Utils_Tuple2('nsubset', '⊂⃒'),
			_Utils_Tuple2('nsubseteq', '⊈'),
			_Utils_Tuple2('nsubseteqq', '⫅̸'),
			_Utils_Tuple2('nsucc', '⊁'),
			_Utils_Tuple2('nsucceq', '⪰̸'),
			_Utils_Tuple2('nsup', '⊅'),
			_Utils_Tuple2('nsupE', '⫆̸'),
			_Utils_Tuple2('nsupe', '⊉'),
			_Utils_Tuple2('nsupset', '⊃⃒'),
			_Utils_Tuple2('nsupseteq', '⊉'),
			_Utils_Tuple2('nsupseteqq', '⫆̸'),
			_Utils_Tuple2('ntgl', '≹'),
			_Utils_Tuple2('Ntilde', 'Ñ'),
			_Utils_Tuple2('ntilde', 'ñ'),
			_Utils_Tuple2('ntlg', '≸'),
			_Utils_Tuple2('ntriangleleft', '⋪'),
			_Utils_Tuple2('ntrianglelefteq', '⋬'),
			_Utils_Tuple2('ntriangleright', '⋫'),
			_Utils_Tuple2('ntrianglerighteq', '⋭'),
			_Utils_Tuple2('Nu', 'Ν'),
			_Utils_Tuple2('nu', 'ν'),
			_Utils_Tuple2('num', '#'),
			_Utils_Tuple2('numero', '№'),
			_Utils_Tuple2('numsp', '\u2007'),
			_Utils_Tuple2('nvap', '≍⃒'),
			_Utils_Tuple2('nvdash', '⊬'),
			_Utils_Tuple2('nvDash', '⊭'),
			_Utils_Tuple2('nVdash', '⊮'),
			_Utils_Tuple2('nVDash', '⊯'),
			_Utils_Tuple2('nvge', '≥⃒'),
			_Utils_Tuple2('nvgt', '>⃒'),
			_Utils_Tuple2('nvHarr', '⤄'),
			_Utils_Tuple2('nvinfin', '⧞'),
			_Utils_Tuple2('nvlArr', '⤂'),
			_Utils_Tuple2('nvle', '≤⃒'),
			_Utils_Tuple2('nvlt', '<⃒'),
			_Utils_Tuple2('nvltrie', '⊴⃒'),
			_Utils_Tuple2('nvrArr', '⤃'),
			_Utils_Tuple2('nvrtrie', '⊵⃒'),
			_Utils_Tuple2('nvsim', '∼⃒'),
			_Utils_Tuple2('nwarhk', '⤣'),
			_Utils_Tuple2('nwarr', '↖'),
			_Utils_Tuple2('nwArr', '⇖'),
			_Utils_Tuple2('nwarrow', '↖'),
			_Utils_Tuple2('nwnear', '⤧'),
			_Utils_Tuple2('Oacute', 'Ó'),
			_Utils_Tuple2('oacute', 'ó'),
			_Utils_Tuple2('oast', '⊛'),
			_Utils_Tuple2('Ocirc', 'Ô'),
			_Utils_Tuple2('ocirc', 'ô'),
			_Utils_Tuple2('ocir', '⊚'),
			_Utils_Tuple2('Ocy', 'О'),
			_Utils_Tuple2('ocy', 'о'),
			_Utils_Tuple2('odash', '⊝'),
			_Utils_Tuple2('Odblac', 'Ő'),
			_Utils_Tuple2('odblac', 'ő'),
			_Utils_Tuple2('odiv', '⨸'),
			_Utils_Tuple2('odot', '⊙'),
			_Utils_Tuple2('odsold', '⦼'),
			_Utils_Tuple2('OElig', 'Œ'),
			_Utils_Tuple2('oelig', 'œ'),
			_Utils_Tuple2('ofcir', '⦿'),
			_Utils_Tuple2('Ofr', '\uD835\uDD12'),
			_Utils_Tuple2('ofr', '\uD835\uDD2C'),
			_Utils_Tuple2('ogon', '˛'),
			_Utils_Tuple2('Ograve', 'Ò'),
			_Utils_Tuple2('ograve', 'ò'),
			_Utils_Tuple2('ogt', '⧁'),
			_Utils_Tuple2('ohbar', '⦵'),
			_Utils_Tuple2('ohm', 'Ω'),
			_Utils_Tuple2('oint', '∮'),
			_Utils_Tuple2('olarr', '↺'),
			_Utils_Tuple2('olcir', '⦾'),
			_Utils_Tuple2('olcross', '⦻'),
			_Utils_Tuple2('oline', '‾'),
			_Utils_Tuple2('olt', '⧀'),
			_Utils_Tuple2('Omacr', 'Ō'),
			_Utils_Tuple2('omacr', 'ō'),
			_Utils_Tuple2('Omega', 'Ω'),
			_Utils_Tuple2('omega', 'ω'),
			_Utils_Tuple2('Omicron', 'Ο'),
			_Utils_Tuple2('omicron', 'ο'),
			_Utils_Tuple2('omid', '⦶'),
			_Utils_Tuple2('ominus', '⊖'),
			_Utils_Tuple2('Oopf', '\uD835\uDD46'),
			_Utils_Tuple2('oopf', '\uD835\uDD60'),
			_Utils_Tuple2('opar', '⦷'),
			_Utils_Tuple2('OpenCurlyDoubleQuote', '“'),
			_Utils_Tuple2('OpenCurlyQuote', '‘'),
			_Utils_Tuple2('operp', '⦹'),
			_Utils_Tuple2('oplus', '⊕'),
			_Utils_Tuple2('orarr', '↻'),
			_Utils_Tuple2('Or', '⩔'),
			_Utils_Tuple2('or', '∨'),
			_Utils_Tuple2('ord', '⩝'),
			_Utils_Tuple2('order', 'ℴ'),
			_Utils_Tuple2('orderof', 'ℴ'),
			_Utils_Tuple2('ordf', 'ª'),
			_Utils_Tuple2('ordm', 'º'),
			_Utils_Tuple2('origof', '⊶'),
			_Utils_Tuple2('oror', '⩖'),
			_Utils_Tuple2('orslope', '⩗'),
			_Utils_Tuple2('orv', '⩛'),
			_Utils_Tuple2('oS', 'Ⓢ'),
			_Utils_Tuple2('Oscr', '\uD835\uDCAA'),
			_Utils_Tuple2('oscr', 'ℴ'),
			_Utils_Tuple2('Oslash', 'Ø'),
			_Utils_Tuple2('oslash', 'ø'),
			_Utils_Tuple2('osol', '⊘'),
			_Utils_Tuple2('Otilde', 'Õ'),
			_Utils_Tuple2('otilde', 'õ'),
			_Utils_Tuple2('otimesas', '⨶'),
			_Utils_Tuple2('Otimes', '⨷'),
			_Utils_Tuple2('otimes', '⊗'),
			_Utils_Tuple2('Ouml', 'Ö'),
			_Utils_Tuple2('ouml', 'ö'),
			_Utils_Tuple2('ovbar', '⌽'),
			_Utils_Tuple2('OverBar', '‾'),
			_Utils_Tuple2('OverBrace', '⏞'),
			_Utils_Tuple2('OverBracket', '⎴'),
			_Utils_Tuple2('OverParenthesis', '⏜'),
			_Utils_Tuple2('para', '¶'),
			_Utils_Tuple2('parallel', '∥'),
			_Utils_Tuple2('par', '∥'),
			_Utils_Tuple2('parsim', '⫳'),
			_Utils_Tuple2('parsl', '⫽'),
			_Utils_Tuple2('part', '∂'),
			_Utils_Tuple2('PartialD', '∂'),
			_Utils_Tuple2('Pcy', 'П'),
			_Utils_Tuple2('pcy', 'п'),
			_Utils_Tuple2('percnt', '%'),
			_Utils_Tuple2('period', '.'),
			_Utils_Tuple2('permil', '‰'),
			_Utils_Tuple2('perp', '⊥'),
			_Utils_Tuple2('pertenk', '‱'),
			_Utils_Tuple2('Pfr', '\uD835\uDD13'),
			_Utils_Tuple2('pfr', '\uD835\uDD2D'),
			_Utils_Tuple2('Phi', 'Φ'),
			_Utils_Tuple2('phi', 'φ'),
			_Utils_Tuple2('phiv', 'ϕ'),
			_Utils_Tuple2('phmmat', 'ℳ'),
			_Utils_Tuple2('phone', '☎'),
			_Utils_Tuple2('Pi', 'Π'),
			_Utils_Tuple2('pi', 'π'),
			_Utils_Tuple2('pitchfork', '⋔'),
			_Utils_Tuple2('piv', 'ϖ'),
			_Utils_Tuple2('planck', 'ℏ'),
			_Utils_Tuple2('planckh', 'ℎ'),
			_Utils_Tuple2('plankv', 'ℏ'),
			_Utils_Tuple2('plusacir', '⨣'),
			_Utils_Tuple2('plusb', '⊞'),
			_Utils_Tuple2('pluscir', '⨢'),
			_Utils_Tuple2('plus', '+'),
			_Utils_Tuple2('plusdo', '∔'),
			_Utils_Tuple2('plusdu', '⨥'),
			_Utils_Tuple2('pluse', '⩲'),
			_Utils_Tuple2('PlusMinus', '±'),
			_Utils_Tuple2('plusmn', '±'),
			_Utils_Tuple2('plussim', '⨦'),
			_Utils_Tuple2('plustwo', '⨧'),
			_Utils_Tuple2('pm', '±'),
			_Utils_Tuple2('Poincareplane', 'ℌ'),
			_Utils_Tuple2('pointint', '⨕'),
			_Utils_Tuple2('popf', '\uD835\uDD61'),
			_Utils_Tuple2('Popf', 'ℙ'),
			_Utils_Tuple2('pound', '£'),
			_Utils_Tuple2('prap', '⪷'),
			_Utils_Tuple2('Pr', '⪻'),
			_Utils_Tuple2('pr', '≺'),
			_Utils_Tuple2('prcue', '≼'),
			_Utils_Tuple2('precapprox', '⪷'),
			_Utils_Tuple2('prec', '≺'),
			_Utils_Tuple2('preccurlyeq', '≼'),
			_Utils_Tuple2('Precedes', '≺'),
			_Utils_Tuple2('PrecedesEqual', '⪯'),
			_Utils_Tuple2('PrecedesSlantEqual', '≼'),
			_Utils_Tuple2('PrecedesTilde', '≾'),
			_Utils_Tuple2('preceq', '⪯'),
			_Utils_Tuple2('precnapprox', '⪹'),
			_Utils_Tuple2('precneqq', '⪵'),
			_Utils_Tuple2('precnsim', '⋨'),
			_Utils_Tuple2('pre', '⪯'),
			_Utils_Tuple2('prE', '⪳'),
			_Utils_Tuple2('precsim', '≾'),
			_Utils_Tuple2('prime', '′'),
			_Utils_Tuple2('Prime', '″'),
			_Utils_Tuple2('primes', 'ℙ'),
			_Utils_Tuple2('prnap', '⪹'),
			_Utils_Tuple2('prnE', '⪵'),
			_Utils_Tuple2('prnsim', '⋨'),
			_Utils_Tuple2('prod', '∏'),
			_Utils_Tuple2('Product', '∏'),
			_Utils_Tuple2('profalar', '⌮'),
			_Utils_Tuple2('profline', '⌒'),
			_Utils_Tuple2('profsurf', '⌓'),
			_Utils_Tuple2('prop', '∝'),
			_Utils_Tuple2('Proportional', '∝'),
			_Utils_Tuple2('Proportion', '∷'),
			_Utils_Tuple2('propto', '∝'),
			_Utils_Tuple2('prsim', '≾'),
			_Utils_Tuple2('prurel', '⊰'),
			_Utils_Tuple2('Pscr', '\uD835\uDCAB'),
			_Utils_Tuple2('pscr', '\uD835\uDCC5'),
			_Utils_Tuple2('Psi', 'Ψ'),
			_Utils_Tuple2('psi', 'ψ'),
			_Utils_Tuple2('puncsp', '\u2008'),
			_Utils_Tuple2('Qfr', '\uD835\uDD14'),
			_Utils_Tuple2('qfr', '\uD835\uDD2E'),
			_Utils_Tuple2('qint', '⨌'),
			_Utils_Tuple2('qopf', '\uD835\uDD62'),
			_Utils_Tuple2('Qopf', 'ℚ'),
			_Utils_Tuple2('qprime', '⁗'),
			_Utils_Tuple2('Qscr', '\uD835\uDCAC'),
			_Utils_Tuple2('qscr', '\uD835\uDCC6'),
			_Utils_Tuple2('quaternions', 'ℍ'),
			_Utils_Tuple2('quatint', '⨖'),
			_Utils_Tuple2('quest', '?'),
			_Utils_Tuple2('questeq', '≟'),
			_Utils_Tuple2('quot', '\"'),
			_Utils_Tuple2('QUOT', '\"'),
			_Utils_Tuple2('rAarr', '⇛'),
			_Utils_Tuple2('race', '∽̱'),
			_Utils_Tuple2('Racute', 'Ŕ'),
			_Utils_Tuple2('racute', 'ŕ'),
			_Utils_Tuple2('radic', '√'),
			_Utils_Tuple2('raemptyv', '⦳'),
			_Utils_Tuple2('rang', '⟩'),
			_Utils_Tuple2('Rang', '⟫'),
			_Utils_Tuple2('rangd', '⦒'),
			_Utils_Tuple2('range', '⦥'),
			_Utils_Tuple2('rangle', '⟩'),
			_Utils_Tuple2('raquo', '»'),
			_Utils_Tuple2('rarrap', '⥵'),
			_Utils_Tuple2('rarrb', '⇥'),
			_Utils_Tuple2('rarrbfs', '⤠'),
			_Utils_Tuple2('rarrc', '⤳'),
			_Utils_Tuple2('rarr', '→'),
			_Utils_Tuple2('Rarr', '↠'),
			_Utils_Tuple2('rArr', '⇒'),
			_Utils_Tuple2('rarrfs', '⤞'),
			_Utils_Tuple2('rarrhk', '↪'),
			_Utils_Tuple2('rarrlp', '↬'),
			_Utils_Tuple2('rarrpl', '⥅'),
			_Utils_Tuple2('rarrsim', '⥴'),
			_Utils_Tuple2('Rarrtl', '⤖'),
			_Utils_Tuple2('rarrtl', '↣'),
			_Utils_Tuple2('rarrw', '↝'),
			_Utils_Tuple2('ratail', '⤚'),
			_Utils_Tuple2('rAtail', '⤜'),
			_Utils_Tuple2('ratio', '∶'),
			_Utils_Tuple2('rationals', 'ℚ'),
			_Utils_Tuple2('rbarr', '⤍'),
			_Utils_Tuple2('rBarr', '⤏'),
			_Utils_Tuple2('RBarr', '⤐'),
			_Utils_Tuple2('rbbrk', '❳'),
			_Utils_Tuple2('rbrace', '}'),
			_Utils_Tuple2('rbrack', ']'),
			_Utils_Tuple2('rbrke', '⦌'),
			_Utils_Tuple2('rbrksld', '⦎'),
			_Utils_Tuple2('rbrkslu', '⦐'),
			_Utils_Tuple2('Rcaron', 'Ř'),
			_Utils_Tuple2('rcaron', 'ř'),
			_Utils_Tuple2('Rcedil', 'Ŗ'),
			_Utils_Tuple2('rcedil', 'ŗ'),
			_Utils_Tuple2('rceil', '⌉'),
			_Utils_Tuple2('rcub', '}'),
			_Utils_Tuple2('Rcy', 'Р'),
			_Utils_Tuple2('rcy', 'р'),
			_Utils_Tuple2('rdca', '⤷'),
			_Utils_Tuple2('rdldhar', '⥩'),
			_Utils_Tuple2('rdquo', '”'),
			_Utils_Tuple2('rdquor', '”'),
			_Utils_Tuple2('rdsh', '↳'),
			_Utils_Tuple2('real', 'ℜ'),
			_Utils_Tuple2('realine', 'ℛ'),
			_Utils_Tuple2('realpart', 'ℜ'),
			_Utils_Tuple2('reals', 'ℝ'),
			_Utils_Tuple2('Re', 'ℜ'),
			_Utils_Tuple2('rect', '▭'),
			_Utils_Tuple2('reg', '®'),
			_Utils_Tuple2('REG', '®'),
			_Utils_Tuple2('ReverseElement', '∋'),
			_Utils_Tuple2('ReverseEquilibrium', '⇋'),
			_Utils_Tuple2('ReverseUpEquilibrium', '⥯'),
			_Utils_Tuple2('rfisht', '⥽'),
			_Utils_Tuple2('rfloor', '⌋'),
			_Utils_Tuple2('rfr', '\uD835\uDD2F'),
			_Utils_Tuple2('Rfr', 'ℜ'),
			_Utils_Tuple2('rHar', '⥤'),
			_Utils_Tuple2('rhard', '⇁'),
			_Utils_Tuple2('rharu', '⇀'),
			_Utils_Tuple2('rharul', '⥬'),
			_Utils_Tuple2('Rho', 'Ρ'),
			_Utils_Tuple2('rho', 'ρ'),
			_Utils_Tuple2('rhov', 'ϱ'),
			_Utils_Tuple2('RightAngleBracket', '⟩'),
			_Utils_Tuple2('RightArrowBar', '⇥'),
			_Utils_Tuple2('rightarrow', '→'),
			_Utils_Tuple2('RightArrow', '→'),
			_Utils_Tuple2('Rightarrow', '⇒'),
			_Utils_Tuple2('RightArrowLeftArrow', '⇄'),
			_Utils_Tuple2('rightarrowtail', '↣'),
			_Utils_Tuple2('RightCeiling', '⌉'),
			_Utils_Tuple2('RightDoubleBracket', '⟧'),
			_Utils_Tuple2('RightDownTeeVector', '⥝'),
			_Utils_Tuple2('RightDownVectorBar', '⥕'),
			_Utils_Tuple2('RightDownVector', '⇂'),
			_Utils_Tuple2('RightFloor', '⌋'),
			_Utils_Tuple2('rightharpoondown', '⇁'),
			_Utils_Tuple2('rightharpoonup', '⇀'),
			_Utils_Tuple2('rightleftarrows', '⇄'),
			_Utils_Tuple2('rightleftharpoons', '⇌'),
			_Utils_Tuple2('rightrightarrows', '⇉'),
			_Utils_Tuple2('rightsquigarrow', '↝'),
			_Utils_Tuple2('RightTeeArrow', '↦'),
			_Utils_Tuple2('RightTee', '⊢'),
			_Utils_Tuple2('RightTeeVector', '⥛'),
			_Utils_Tuple2('rightthreetimes', '⋌'),
			_Utils_Tuple2('RightTriangleBar', '⧐'),
			_Utils_Tuple2('RightTriangle', '⊳'),
			_Utils_Tuple2('RightTriangleEqual', '⊵'),
			_Utils_Tuple2('RightUpDownVector', '⥏'),
			_Utils_Tuple2('RightUpTeeVector', '⥜'),
			_Utils_Tuple2('RightUpVectorBar', '⥔'),
			_Utils_Tuple2('RightUpVector', '↾'),
			_Utils_Tuple2('RightVectorBar', '⥓'),
			_Utils_Tuple2('RightVector', '⇀'),
			_Utils_Tuple2('ring', '˚'),
			_Utils_Tuple2('risingdotseq', '≓'),
			_Utils_Tuple2('rlarr', '⇄'),
			_Utils_Tuple2('rlhar', '⇌'),
			_Utils_Tuple2('rlm', '\u200F'),
			_Utils_Tuple2('rmoustache', '⎱'),
			_Utils_Tuple2('rmoust', '⎱'),
			_Utils_Tuple2('rnmid', '⫮'),
			_Utils_Tuple2('roang', '⟭'),
			_Utils_Tuple2('roarr', '⇾'),
			_Utils_Tuple2('robrk', '⟧'),
			_Utils_Tuple2('ropar', '⦆'),
			_Utils_Tuple2('ropf', '\uD835\uDD63'),
			_Utils_Tuple2('Ropf', 'ℝ'),
			_Utils_Tuple2('roplus', '⨮'),
			_Utils_Tuple2('rotimes', '⨵'),
			_Utils_Tuple2('RoundImplies', '⥰'),
			_Utils_Tuple2('rpar', ')'),
			_Utils_Tuple2('rpargt', '⦔'),
			_Utils_Tuple2('rppolint', '⨒'),
			_Utils_Tuple2('rrarr', '⇉'),
			_Utils_Tuple2('Rrightarrow', '⇛'),
			_Utils_Tuple2('rsaquo', '›'),
			_Utils_Tuple2('rscr', '\uD835\uDCC7'),
			_Utils_Tuple2('Rscr', 'ℛ'),
			_Utils_Tuple2('rsh', '↱'),
			_Utils_Tuple2('Rsh', '↱'),
			_Utils_Tuple2('rsqb', ']'),
			_Utils_Tuple2('rsquo', '’'),
			_Utils_Tuple2('rsquor', '’'),
			_Utils_Tuple2('rthree', '⋌'),
			_Utils_Tuple2('rtimes', '⋊'),
			_Utils_Tuple2('rtri', '▹'),
			_Utils_Tuple2('rtrie', '⊵'),
			_Utils_Tuple2('rtrif', '▸'),
			_Utils_Tuple2('rtriltri', '⧎'),
			_Utils_Tuple2('RuleDelayed', '⧴'),
			_Utils_Tuple2('ruluhar', '⥨'),
			_Utils_Tuple2('rx', '℞'),
			_Utils_Tuple2('Sacute', 'Ś'),
			_Utils_Tuple2('sacute', 'ś'),
			_Utils_Tuple2('sbquo', '‚'),
			_Utils_Tuple2('scap', '⪸'),
			_Utils_Tuple2('Scaron', 'Š'),
			_Utils_Tuple2('scaron', 'š'),
			_Utils_Tuple2('Sc', '⪼'),
			_Utils_Tuple2('sc', '≻'),
			_Utils_Tuple2('sccue', '≽'),
			_Utils_Tuple2('sce', '⪰'),
			_Utils_Tuple2('scE', '⪴'),
			_Utils_Tuple2('Scedil', 'Ş'),
			_Utils_Tuple2('scedil', 'ş'),
			_Utils_Tuple2('Scirc', 'Ŝ'),
			_Utils_Tuple2('scirc', 'ŝ'),
			_Utils_Tuple2('scnap', '⪺'),
			_Utils_Tuple2('scnE', '⪶'),
			_Utils_Tuple2('scnsim', '⋩'),
			_Utils_Tuple2('scpolint', '⨓'),
			_Utils_Tuple2('scsim', '≿'),
			_Utils_Tuple2('Scy', 'С'),
			_Utils_Tuple2('scy', 'с'),
			_Utils_Tuple2('sdotb', '⊡'),
			_Utils_Tuple2('sdot', '⋅'),
			_Utils_Tuple2('sdote', '⩦'),
			_Utils_Tuple2('searhk', '⤥'),
			_Utils_Tuple2('searr', '↘'),
			_Utils_Tuple2('seArr', '⇘'),
			_Utils_Tuple2('searrow', '↘'),
			_Utils_Tuple2('sect', '§'),
			_Utils_Tuple2('semi', ';'),
			_Utils_Tuple2('seswar', '⤩'),
			_Utils_Tuple2('setminus', '∖'),
			_Utils_Tuple2('setmn', '∖'),
			_Utils_Tuple2('sext', '✶'),
			_Utils_Tuple2('Sfr', '\uD835\uDD16'),
			_Utils_Tuple2('sfr', '\uD835\uDD30'),
			_Utils_Tuple2('sfrown', '⌢'),
			_Utils_Tuple2('sharp', '♯'),
			_Utils_Tuple2('SHCHcy', 'Щ'),
			_Utils_Tuple2('shchcy', 'щ'),
			_Utils_Tuple2('SHcy', 'Ш'),
			_Utils_Tuple2('shcy', 'ш'),
			_Utils_Tuple2('ShortDownArrow', '↓'),
			_Utils_Tuple2('ShortLeftArrow', '←'),
			_Utils_Tuple2('shortmid', '∣'),
			_Utils_Tuple2('shortparallel', '∥'),
			_Utils_Tuple2('ShortRightArrow', '→'),
			_Utils_Tuple2('ShortUpArrow', '↑'),
			_Utils_Tuple2('shy', '\u00AD'),
			_Utils_Tuple2('Sigma', 'Σ'),
			_Utils_Tuple2('sigma', 'σ'),
			_Utils_Tuple2('sigmaf', 'ς'),
			_Utils_Tuple2('sigmav', 'ς'),
			_Utils_Tuple2('sim', '∼'),
			_Utils_Tuple2('simdot', '⩪'),
			_Utils_Tuple2('sime', '≃'),
			_Utils_Tuple2('simeq', '≃'),
			_Utils_Tuple2('simg', '⪞'),
			_Utils_Tuple2('simgE', '⪠'),
			_Utils_Tuple2('siml', '⪝'),
			_Utils_Tuple2('simlE', '⪟'),
			_Utils_Tuple2('simne', '≆'),
			_Utils_Tuple2('simplus', '⨤'),
			_Utils_Tuple2('simrarr', '⥲'),
			_Utils_Tuple2('slarr', '←'),
			_Utils_Tuple2('SmallCircle', '∘'),
			_Utils_Tuple2('smallsetminus', '∖'),
			_Utils_Tuple2('smashp', '⨳'),
			_Utils_Tuple2('smeparsl', '⧤'),
			_Utils_Tuple2('smid', '∣'),
			_Utils_Tuple2('smile', '⌣'),
			_Utils_Tuple2('smt', '⪪'),
			_Utils_Tuple2('smte', '⪬'),
			_Utils_Tuple2('smtes', '⪬︀'),
			_Utils_Tuple2('SOFTcy', 'Ь'),
			_Utils_Tuple2('softcy', 'ь'),
			_Utils_Tuple2('solbar', '⌿'),
			_Utils_Tuple2('solb', '⧄'),
			_Utils_Tuple2('sol', '/'),
			_Utils_Tuple2('Sopf', '\uD835\uDD4A'),
			_Utils_Tuple2('sopf', '\uD835\uDD64'),
			_Utils_Tuple2('spades', '♠'),
			_Utils_Tuple2('spadesuit', '♠'),
			_Utils_Tuple2('spar', '∥'),
			_Utils_Tuple2('sqcap', '⊓'),
			_Utils_Tuple2('sqcaps', '⊓︀'),
			_Utils_Tuple2('sqcup', '⊔'),
			_Utils_Tuple2('sqcups', '⊔︀'),
			_Utils_Tuple2('Sqrt', '√'),
			_Utils_Tuple2('sqsub', '⊏'),
			_Utils_Tuple2('sqsube', '⊑'),
			_Utils_Tuple2('sqsubset', '⊏'),
			_Utils_Tuple2('sqsubseteq', '⊑'),
			_Utils_Tuple2('sqsup', '⊐'),
			_Utils_Tuple2('sqsupe', '⊒'),
			_Utils_Tuple2('sqsupset', '⊐'),
			_Utils_Tuple2('sqsupseteq', '⊒'),
			_Utils_Tuple2('square', '□'),
			_Utils_Tuple2('Square', '□'),
			_Utils_Tuple2('SquareIntersection', '⊓'),
			_Utils_Tuple2('SquareSubset', '⊏'),
			_Utils_Tuple2('SquareSubsetEqual', '⊑'),
			_Utils_Tuple2('SquareSuperset', '⊐'),
			_Utils_Tuple2('SquareSupersetEqual', '⊒'),
			_Utils_Tuple2('SquareUnion', '⊔'),
			_Utils_Tuple2('squarf', '▪'),
			_Utils_Tuple2('squ', '□'),
			_Utils_Tuple2('squf', '▪'),
			_Utils_Tuple2('srarr', '→'),
			_Utils_Tuple2('Sscr', '\uD835\uDCAE'),
			_Utils_Tuple2('sscr', '\uD835\uDCC8'),
			_Utils_Tuple2('ssetmn', '∖'),
			_Utils_Tuple2('ssmile', '⌣'),
			_Utils_Tuple2('sstarf', '⋆'),
			_Utils_Tuple2('Star', '⋆'),
			_Utils_Tuple2('star', '☆'),
			_Utils_Tuple2('starf', '★'),
			_Utils_Tuple2('straightepsilon', 'ϵ'),
			_Utils_Tuple2('straightphi', 'ϕ'),
			_Utils_Tuple2('strns', '¯'),
			_Utils_Tuple2('sub', '⊂'),
			_Utils_Tuple2('Sub', '⋐'),
			_Utils_Tuple2('subdot', '⪽'),
			_Utils_Tuple2('subE', '⫅'),
			_Utils_Tuple2('sube', '⊆'),
			_Utils_Tuple2('subedot', '⫃'),
			_Utils_Tuple2('submult', '⫁'),
			_Utils_Tuple2('subnE', '⫋'),
			_Utils_Tuple2('subne', '⊊'),
			_Utils_Tuple2('subplus', '⪿'),
			_Utils_Tuple2('subrarr', '⥹'),
			_Utils_Tuple2('subset', '⊂'),
			_Utils_Tuple2('Subset', '⋐'),
			_Utils_Tuple2('subseteq', '⊆'),
			_Utils_Tuple2('subseteqq', '⫅'),
			_Utils_Tuple2('SubsetEqual', '⊆'),
			_Utils_Tuple2('subsetneq', '⊊'),
			_Utils_Tuple2('subsetneqq', '⫋'),
			_Utils_Tuple2('subsim', '⫇'),
			_Utils_Tuple2('subsub', '⫕'),
			_Utils_Tuple2('subsup', '⫓'),
			_Utils_Tuple2('succapprox', '⪸'),
			_Utils_Tuple2('succ', '≻'),
			_Utils_Tuple2('succcurlyeq', '≽'),
			_Utils_Tuple2('Succeeds', '≻'),
			_Utils_Tuple2('SucceedsEqual', '⪰'),
			_Utils_Tuple2('SucceedsSlantEqual', '≽'),
			_Utils_Tuple2('SucceedsTilde', '≿'),
			_Utils_Tuple2('succeq', '⪰'),
			_Utils_Tuple2('succnapprox', '⪺'),
			_Utils_Tuple2('succneqq', '⪶'),
			_Utils_Tuple2('succnsim', '⋩'),
			_Utils_Tuple2('succsim', '≿'),
			_Utils_Tuple2('SuchThat', '∋'),
			_Utils_Tuple2('sum', '∑'),
			_Utils_Tuple2('Sum', '∑'),
			_Utils_Tuple2('sung', '♪'),
			_Utils_Tuple2('sup1', '¹'),
			_Utils_Tuple2('sup2', '²'),
			_Utils_Tuple2('sup3', '³'),
			_Utils_Tuple2('sup', '⊃'),
			_Utils_Tuple2('Sup', '⋑'),
			_Utils_Tuple2('supdot', '⪾'),
			_Utils_Tuple2('supdsub', '⫘'),
			_Utils_Tuple2('supE', '⫆'),
			_Utils_Tuple2('supe', '⊇'),
			_Utils_Tuple2('supedot', '⫄'),
			_Utils_Tuple2('Superset', '⊃'),
			_Utils_Tuple2('SupersetEqual', '⊇'),
			_Utils_Tuple2('suphsol', '⟉'),
			_Utils_Tuple2('suphsub', '⫗'),
			_Utils_Tuple2('suplarr', '⥻'),
			_Utils_Tuple2('supmult', '⫂'),
			_Utils_Tuple2('supnE', '⫌'),
			_Utils_Tuple2('supne', '⊋'),
			_Utils_Tuple2('supplus', '⫀'),
			_Utils_Tuple2('supset', '⊃'),
			_Utils_Tuple2('Supset', '⋑'),
			_Utils_Tuple2('supseteq', '⊇'),
			_Utils_Tuple2('supseteqq', '⫆'),
			_Utils_Tuple2('supsetneq', '⊋'),
			_Utils_Tuple2('supsetneqq', '⫌'),
			_Utils_Tuple2('supsim', '⫈'),
			_Utils_Tuple2('supsub', '⫔'),
			_Utils_Tuple2('supsup', '⫖'),
			_Utils_Tuple2('swarhk', '⤦'),
			_Utils_Tuple2('swarr', '↙'),
			_Utils_Tuple2('swArr', '⇙'),
			_Utils_Tuple2('swarrow', '↙'),
			_Utils_Tuple2('swnwar', '⤪'),
			_Utils_Tuple2('szlig', 'ß'),
			_Utils_Tuple2('Tab', '\t'),
			_Utils_Tuple2('target', '⌖'),
			_Utils_Tuple2('Tau', 'Τ'),
			_Utils_Tuple2('tau', 'τ'),
			_Utils_Tuple2('tbrk', '⎴'),
			_Utils_Tuple2('Tcaron', 'Ť'),
			_Utils_Tuple2('tcaron', 'ť'),
			_Utils_Tuple2('Tcedil', 'Ţ'),
			_Utils_Tuple2('tcedil', 'ţ'),
			_Utils_Tuple2('Tcy', 'Т'),
			_Utils_Tuple2('tcy', 'т'),
			_Utils_Tuple2('tdot', '⃛'),
			_Utils_Tuple2('telrec', '⌕'),
			_Utils_Tuple2('Tfr', '\uD835\uDD17'),
			_Utils_Tuple2('tfr', '\uD835\uDD31'),
			_Utils_Tuple2('there4', '∴'),
			_Utils_Tuple2('therefore', '∴'),
			_Utils_Tuple2('Therefore', '∴'),
			_Utils_Tuple2('Theta', 'Θ'),
			_Utils_Tuple2('theta', 'θ'),
			_Utils_Tuple2('thetasym', 'ϑ'),
			_Utils_Tuple2('thetav', 'ϑ'),
			_Utils_Tuple2('thickapprox', '≈'),
			_Utils_Tuple2('thicksim', '∼'),
			_Utils_Tuple2('ThickSpace', '\u205F\u200A'),
			_Utils_Tuple2('ThinSpace', '\u2009'),
			_Utils_Tuple2('thinsp', '\u2009'),
			_Utils_Tuple2('thkap', '≈'),
			_Utils_Tuple2('thksim', '∼'),
			_Utils_Tuple2('THORN', 'Þ'),
			_Utils_Tuple2('thorn', 'þ'),
			_Utils_Tuple2('tilde', '˜'),
			_Utils_Tuple2('Tilde', '∼'),
			_Utils_Tuple2('TildeEqual', '≃'),
			_Utils_Tuple2('TildeFullEqual', '≅'),
			_Utils_Tuple2('TildeTilde', '≈'),
			_Utils_Tuple2('timesbar', '⨱'),
			_Utils_Tuple2('timesb', '⊠'),
			_Utils_Tuple2('times', '×'),
			_Utils_Tuple2('timesd', '⨰'),
			_Utils_Tuple2('tint', '∭'),
			_Utils_Tuple2('toea', '⤨'),
			_Utils_Tuple2('topbot', '⌶'),
			_Utils_Tuple2('topcir', '⫱'),
			_Utils_Tuple2('top', '⊤'),
			_Utils_Tuple2('Topf', '\uD835\uDD4B'),
			_Utils_Tuple2('topf', '\uD835\uDD65'),
			_Utils_Tuple2('topfork', '⫚'),
			_Utils_Tuple2('tosa', '⤩'),
			_Utils_Tuple2('tprime', '‴'),
			_Utils_Tuple2('trade', '™'),
			_Utils_Tuple2('TRADE', '™'),
			_Utils_Tuple2('triangle', '▵'),
			_Utils_Tuple2('triangledown', '▿'),
			_Utils_Tuple2('triangleleft', '◃'),
			_Utils_Tuple2('trianglelefteq', '⊴'),
			_Utils_Tuple2('triangleq', '≜'),
			_Utils_Tuple2('triangleright', '▹'),
			_Utils_Tuple2('trianglerighteq', '⊵'),
			_Utils_Tuple2('tridot', '◬'),
			_Utils_Tuple2('trie', '≜'),
			_Utils_Tuple2('triminus', '⨺'),
			_Utils_Tuple2('TripleDot', '⃛'),
			_Utils_Tuple2('triplus', '⨹'),
			_Utils_Tuple2('trisb', '⧍'),
			_Utils_Tuple2('tritime', '⨻'),
			_Utils_Tuple2('trpezium', '⏢'),
			_Utils_Tuple2('Tscr', '\uD835\uDCAF'),
			_Utils_Tuple2('tscr', '\uD835\uDCC9'),
			_Utils_Tuple2('TScy', 'Ц'),
			_Utils_Tuple2('tscy', 'ц'),
			_Utils_Tuple2('TSHcy', 'Ћ'),
			_Utils_Tuple2('tshcy', 'ћ'),
			_Utils_Tuple2('Tstrok', 'Ŧ'),
			_Utils_Tuple2('tstrok', 'ŧ'),
			_Utils_Tuple2('twixt', '≬'),
			_Utils_Tuple2('twoheadleftarrow', '↞'),
			_Utils_Tuple2('twoheadrightarrow', '↠'),
			_Utils_Tuple2('Uacute', 'Ú'),
			_Utils_Tuple2('uacute', 'ú'),
			_Utils_Tuple2('uarr', '↑'),
			_Utils_Tuple2('Uarr', '↟'),
			_Utils_Tuple2('uArr', '⇑'),
			_Utils_Tuple2('Uarrocir', '⥉'),
			_Utils_Tuple2('Ubrcy', 'Ў'),
			_Utils_Tuple2('ubrcy', 'ў'),
			_Utils_Tuple2('Ubreve', 'Ŭ'),
			_Utils_Tuple2('ubreve', 'ŭ'),
			_Utils_Tuple2('Ucirc', 'Û'),
			_Utils_Tuple2('ucirc', 'û'),
			_Utils_Tuple2('Ucy', 'У'),
			_Utils_Tuple2('ucy', 'у'),
			_Utils_Tuple2('udarr', '⇅'),
			_Utils_Tuple2('Udblac', 'Ű'),
			_Utils_Tuple2('udblac', 'ű'),
			_Utils_Tuple2('udhar', '⥮'),
			_Utils_Tuple2('ufisht', '⥾'),
			_Utils_Tuple2('Ufr', '\uD835\uDD18'),
			_Utils_Tuple2('ufr', '\uD835\uDD32'),
			_Utils_Tuple2('Ugrave', 'Ù'),
			_Utils_Tuple2('ugrave', 'ù'),
			_Utils_Tuple2('uHar', '⥣'),
			_Utils_Tuple2('uharl', '↿'),
			_Utils_Tuple2('uharr', '↾'),
			_Utils_Tuple2('uhblk', '▀'),
			_Utils_Tuple2('ulcorn', '⌜'),
			_Utils_Tuple2('ulcorner', '⌜'),
			_Utils_Tuple2('ulcrop', '⌏'),
			_Utils_Tuple2('ultri', '◸'),
			_Utils_Tuple2('Umacr', 'Ū'),
			_Utils_Tuple2('umacr', 'ū'),
			_Utils_Tuple2('uml', '¨'),
			_Utils_Tuple2('UnderBar', '_'),
			_Utils_Tuple2('UnderBrace', '⏟'),
			_Utils_Tuple2('UnderBracket', '⎵'),
			_Utils_Tuple2('UnderParenthesis', '⏝'),
			_Utils_Tuple2('Union', '⋃'),
			_Utils_Tuple2('UnionPlus', '⊎'),
			_Utils_Tuple2('Uogon', 'Ų'),
			_Utils_Tuple2('uogon', 'ų'),
			_Utils_Tuple2('Uopf', '\uD835\uDD4C'),
			_Utils_Tuple2('uopf', '\uD835\uDD66'),
			_Utils_Tuple2('UpArrowBar', '⤒'),
			_Utils_Tuple2('uparrow', '↑'),
			_Utils_Tuple2('UpArrow', '↑'),
			_Utils_Tuple2('Uparrow', '⇑'),
			_Utils_Tuple2('UpArrowDownArrow', '⇅'),
			_Utils_Tuple2('updownarrow', '↕'),
			_Utils_Tuple2('UpDownArrow', '↕'),
			_Utils_Tuple2('Updownarrow', '⇕'),
			_Utils_Tuple2('UpEquilibrium', '⥮'),
			_Utils_Tuple2('upharpoonleft', '↿'),
			_Utils_Tuple2('upharpoonright', '↾'),
			_Utils_Tuple2('uplus', '⊎'),
			_Utils_Tuple2('UpperLeftArrow', '↖'),
			_Utils_Tuple2('UpperRightArrow', '↗'),
			_Utils_Tuple2('upsi', 'υ'),
			_Utils_Tuple2('Upsi', 'ϒ'),
			_Utils_Tuple2('upsih', 'ϒ'),
			_Utils_Tuple2('Upsilon', 'Υ'),
			_Utils_Tuple2('upsilon', 'υ'),
			_Utils_Tuple2('UpTeeArrow', '↥'),
			_Utils_Tuple2('UpTee', '⊥'),
			_Utils_Tuple2('upuparrows', '⇈'),
			_Utils_Tuple2('urcorn', '⌝'),
			_Utils_Tuple2('urcorner', '⌝'),
			_Utils_Tuple2('urcrop', '⌎'),
			_Utils_Tuple2('Uring', 'Ů'),
			_Utils_Tuple2('uring', 'ů'),
			_Utils_Tuple2('urtri', '◹'),
			_Utils_Tuple2('Uscr', '\uD835\uDCB0'),
			_Utils_Tuple2('uscr', '\uD835\uDCCA'),
			_Utils_Tuple2('utdot', '⋰'),
			_Utils_Tuple2('Utilde', 'Ũ'),
			_Utils_Tuple2('utilde', 'ũ'),
			_Utils_Tuple2('utri', '▵'),
			_Utils_Tuple2('utrif', '▴'),
			_Utils_Tuple2('uuarr', '⇈'),
			_Utils_Tuple2('Uuml', 'Ü'),
			_Utils_Tuple2('uuml', 'ü'),
			_Utils_Tuple2('uwangle', '⦧'),
			_Utils_Tuple2('vangrt', '⦜'),
			_Utils_Tuple2('varepsilon', 'ϵ'),
			_Utils_Tuple2('varkappa', 'ϰ'),
			_Utils_Tuple2('varnothing', '∅'),
			_Utils_Tuple2('varphi', 'ϕ'),
			_Utils_Tuple2('varpi', 'ϖ'),
			_Utils_Tuple2('varpropto', '∝'),
			_Utils_Tuple2('varr', '↕'),
			_Utils_Tuple2('vArr', '⇕'),
			_Utils_Tuple2('varrho', 'ϱ'),
			_Utils_Tuple2('varsigma', 'ς'),
			_Utils_Tuple2('varsubsetneq', '⊊︀'),
			_Utils_Tuple2('varsubsetneqq', '⫋︀'),
			_Utils_Tuple2('varsupsetneq', '⊋︀'),
			_Utils_Tuple2('varsupsetneqq', '⫌︀'),
			_Utils_Tuple2('vartheta', 'ϑ'),
			_Utils_Tuple2('vartriangleleft', '⊲'),
			_Utils_Tuple2('vartriangleright', '⊳'),
			_Utils_Tuple2('vBar', '⫨'),
			_Utils_Tuple2('Vbar', '⫫'),
			_Utils_Tuple2('vBarv', '⫩'),
			_Utils_Tuple2('Vcy', 'В'),
			_Utils_Tuple2('vcy', 'в'),
			_Utils_Tuple2('vdash', '⊢'),
			_Utils_Tuple2('vDash', '⊨'),
			_Utils_Tuple2('Vdash', '⊩'),
			_Utils_Tuple2('VDash', '⊫'),
			_Utils_Tuple2('Vdashl', '⫦'),
			_Utils_Tuple2('veebar', '⊻'),
			_Utils_Tuple2('vee', '∨'),
			_Utils_Tuple2('Vee', '⋁'),
			_Utils_Tuple2('veeeq', '≚'),
			_Utils_Tuple2('vellip', '⋮'),
			_Utils_Tuple2('verbar', '|'),
			_Utils_Tuple2('Verbar', '‖'),
			_Utils_Tuple2('vert', '|'),
			_Utils_Tuple2('Vert', '‖'),
			_Utils_Tuple2('VerticalBar', '∣'),
			_Utils_Tuple2('VerticalLine', '|'),
			_Utils_Tuple2('VerticalSeparator', '❘'),
			_Utils_Tuple2('VerticalTilde', '≀'),
			_Utils_Tuple2('VeryThinSpace', '\u200A'),
			_Utils_Tuple2('Vfr', '\uD835\uDD19'),
			_Utils_Tuple2('vfr', '\uD835\uDD33'),
			_Utils_Tuple2('vltri', '⊲'),
			_Utils_Tuple2('vnsub', '⊂⃒'),
			_Utils_Tuple2('vnsup', '⊃⃒'),
			_Utils_Tuple2('Vopf', '\uD835\uDD4D'),
			_Utils_Tuple2('vopf', '\uD835\uDD67'),
			_Utils_Tuple2('vprop', '∝'),
			_Utils_Tuple2('vrtri', '⊳'),
			_Utils_Tuple2('Vscr', '\uD835\uDCB1'),
			_Utils_Tuple2('vscr', '\uD835\uDCCB'),
			_Utils_Tuple2('vsubnE', '⫋︀'),
			_Utils_Tuple2('vsubne', '⊊︀'),
			_Utils_Tuple2('vsupnE', '⫌︀'),
			_Utils_Tuple2('vsupne', '⊋︀'),
			_Utils_Tuple2('Vvdash', '⊪'),
			_Utils_Tuple2('vzigzag', '⦚'),
			_Utils_Tuple2('Wcirc', 'Ŵ'),
			_Utils_Tuple2('wcirc', 'ŵ'),
			_Utils_Tuple2('wedbar', '⩟'),
			_Utils_Tuple2('wedge', '∧'),
			_Utils_Tuple2('Wedge', '⋀'),
			_Utils_Tuple2('wedgeq', '≙'),
			_Utils_Tuple2('weierp', '℘'),
			_Utils_Tuple2('Wfr', '\uD835\uDD1A'),
			_Utils_Tuple2('wfr', '\uD835\uDD34'),
			_Utils_Tuple2('Wopf', '\uD835\uDD4E'),
			_Utils_Tuple2('wopf', '\uD835\uDD68'),
			_Utils_Tuple2('wp', '℘'),
			_Utils_Tuple2('wr', '≀'),
			_Utils_Tuple2('wreath', '≀'),
			_Utils_Tuple2('Wscr', '\uD835\uDCB2'),
			_Utils_Tuple2('wscr', '\uD835\uDCCC'),
			_Utils_Tuple2('xcap', '⋂'),
			_Utils_Tuple2('xcirc', '◯'),
			_Utils_Tuple2('xcup', '⋃'),
			_Utils_Tuple2('xdtri', '▽'),
			_Utils_Tuple2('Xfr', '\uD835\uDD1B'),
			_Utils_Tuple2('xfr', '\uD835\uDD35'),
			_Utils_Tuple2('xharr', '⟷'),
			_Utils_Tuple2('xhArr', '⟺'),
			_Utils_Tuple2('Xi', 'Ξ'),
			_Utils_Tuple2('xi', 'ξ'),
			_Utils_Tuple2('xlarr', '⟵'),
			_Utils_Tuple2('xlArr', '⟸'),
			_Utils_Tuple2('xmap', '⟼'),
			_Utils_Tuple2('xnis', '⋻'),
			_Utils_Tuple2('xodot', '⨀'),
			_Utils_Tuple2('Xopf', '\uD835\uDD4F'),
			_Utils_Tuple2('xopf', '\uD835\uDD69'),
			_Utils_Tuple2('xoplus', '⨁'),
			_Utils_Tuple2('xotime', '⨂'),
			_Utils_Tuple2('xrarr', '⟶'),
			_Utils_Tuple2('xrArr', '⟹'),
			_Utils_Tuple2('Xscr', '\uD835\uDCB3'),
			_Utils_Tuple2('xscr', '\uD835\uDCCD'),
			_Utils_Tuple2('xsqcup', '⨆'),
			_Utils_Tuple2('xuplus', '⨄'),
			_Utils_Tuple2('xutri', '△'),
			_Utils_Tuple2('xvee', '⋁'),
			_Utils_Tuple2('xwedge', '⋀'),
			_Utils_Tuple2('Yacute', 'Ý'),
			_Utils_Tuple2('yacute', 'ý'),
			_Utils_Tuple2('YAcy', 'Я'),
			_Utils_Tuple2('yacy', 'я'),
			_Utils_Tuple2('Ycirc', 'Ŷ'),
			_Utils_Tuple2('ycirc', 'ŷ'),
			_Utils_Tuple2('Ycy', 'Ы'),
			_Utils_Tuple2('ycy', 'ы'),
			_Utils_Tuple2('yen', '¥'),
			_Utils_Tuple2('Yfr', '\uD835\uDD1C'),
			_Utils_Tuple2('yfr', '\uD835\uDD36'),
			_Utils_Tuple2('YIcy', 'Ї'),
			_Utils_Tuple2('yicy', 'ї'),
			_Utils_Tuple2('Yopf', '\uD835\uDD50'),
			_Utils_Tuple2('yopf', '\uD835\uDD6A'),
			_Utils_Tuple2('Yscr', '\uD835\uDCB4'),
			_Utils_Tuple2('yscr', '\uD835\uDCCE'),
			_Utils_Tuple2('YUcy', 'Ю'),
			_Utils_Tuple2('yucy', 'ю'),
			_Utils_Tuple2('yuml', 'ÿ'),
			_Utils_Tuple2('Yuml', 'Ÿ'),
			_Utils_Tuple2('Zacute', 'Ź'),
			_Utils_Tuple2('zacute', 'ź'),
			_Utils_Tuple2('Zcaron', 'Ž'),
			_Utils_Tuple2('zcaron', 'ž'),
			_Utils_Tuple2('Zcy', 'З'),
			_Utils_Tuple2('zcy', 'з'),
			_Utils_Tuple2('Zdot', 'Ż'),
			_Utils_Tuple2('zdot', 'ż'),
			_Utils_Tuple2('zeetrf', 'ℨ'),
			_Utils_Tuple2('ZeroWidthSpace', '\u200B'),
			_Utils_Tuple2('Zeta', 'Ζ'),
			_Utils_Tuple2('zeta', 'ζ'),
			_Utils_Tuple2('zfr', '\uD835\uDD37'),
			_Utils_Tuple2('Zfr', 'ℨ'),
			_Utils_Tuple2('ZHcy', 'Ж'),
			_Utils_Tuple2('zhcy', 'ж'),
			_Utils_Tuple2('zigrarr', '⇝'),
			_Utils_Tuple2('zopf', '\uD835\uDD6B'),
			_Utils_Tuple2('Zopf', 'ℤ'),
			_Utils_Tuple2('Zscr', '\uD835\uDCB5'),
			_Utils_Tuple2('zscr', '\uD835\uDCCF'),
			_Utils_Tuple2('zwj', '\u200D'),
			_Utils_Tuple2('zwnj', '\u200C')
		]));
var $hecrj$html_parser$Html$Parser$namedCharacterReference = A2(
	$elm$parser$Parser$map,
	function (reference) {
		return A2(
			$elm$core$Maybe$withDefault,
			'&' + (reference + ';'),
			A2($elm$core$Dict$get, reference, $hecrj$html_parser$Html$Parser$NamedCharacterReferences$dict));
	},
	$elm$parser$Parser$getChompedString(
		$hecrj$html_parser$Html$Parser$chompOneOrMore($elm$core$Char$isAlpha)));
var $elm$core$Char$fromCode = _Char_fromCode;
var $elm$core$Char$isHexDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return ((48 <= code) && (code <= 57)) || (((65 <= code) && (code <= 70)) || ((97 <= code) && (code <= 102)));
};
var $hecrj$html_parser$Html$Parser$hexadecimal = A2(
	$elm$parser$Parser$andThen,
	function (hex) {
		var _v0 = $rtfeldman$elm_hex$Hex$fromString(
			$elm$core$String$toLower(hex));
		if (!_v0.$) {
			var value = _v0.a;
			return $elm$parser$Parser$succeed(value);
		} else {
			var error = _v0.a;
			return $elm$parser$Parser$problem(error);
		}
	},
	$elm$parser$Parser$getChompedString(
		$hecrj$html_parser$Html$Parser$chompOneOrMore($elm$core$Char$isHexDigit)));
var $elm$parser$Parser$ExpectingInt = {$: 1};
var $elm$parser$Parser$Advanced$consumeBase = _Parser_consumeBase;
var $elm$parser$Parser$Advanced$consumeBase16 = _Parser_consumeBase16;
var $elm$parser$Parser$Advanced$bumpOffset = F2(
	function (newOffset, s) {
		return {gb: s.gb + (newOffset - s.kD), d: s.d, fm: s.fm, kD: newOffset, hi: s.hi, fK: s.fK};
	});
var $elm$parser$Parser$Advanced$chompBase10 = _Parser_chompBase10;
var $elm$parser$Parser$Advanced$isAsciiCode = _Parser_isAsciiCode;
var $elm$parser$Parser$Advanced$consumeExp = F2(
	function (offset, src) {
		if (A3($elm$parser$Parser$Advanced$isAsciiCode, 101, offset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 69, offset, src)) {
			var eOffset = offset + 1;
			var expOffset = (A3($elm$parser$Parser$Advanced$isAsciiCode, 43, eOffset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 45, eOffset, src)) ? (eOffset + 1) : eOffset;
			var newOffset = A2($elm$parser$Parser$Advanced$chompBase10, expOffset, src);
			return _Utils_eq(expOffset, newOffset) ? (-newOffset) : newOffset;
		} else {
			return offset;
		}
	});
var $elm$parser$Parser$Advanced$consumeDotAndExp = F2(
	function (offset, src) {
		return A3($elm$parser$Parser$Advanced$isAsciiCode, 46, offset, src) ? A2(
			$elm$parser$Parser$Advanced$consumeExp,
			A2($elm$parser$Parser$Advanced$chompBase10, offset + 1, src),
			src) : A2($elm$parser$Parser$Advanced$consumeExp, offset, src);
	});
var $elm$parser$Parser$Advanced$finalizeInt = F5(
	function (invalid, handler, startOffset, _v0, s) {
		var endOffset = _v0.a;
		var n = _v0.b;
		if (handler.$ === 1) {
			var x = handler.a;
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		} else {
			var toValue = handler.a;
			return _Utils_eq(startOffset, endOffset) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				_Utils_cmp(s.kD, startOffset) < 0,
				A2($elm$parser$Parser$Advanced$fromState, s, invalid)) : A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				toValue(n),
				A2($elm$parser$Parser$Advanced$bumpOffset, endOffset, s));
		}
	});
var $elm$core$String$toFloat = _String_toFloat;
var $elm$parser$Parser$Advanced$finalizeFloat = F6(
	function (invalid, expecting, intSettings, floatSettings, intPair, s) {
		var intOffset = intPair.a;
		var floatOffset = A2($elm$parser$Parser$Advanced$consumeDotAndExp, intOffset, s.fK);
		if (floatOffset < 0) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A4($elm$parser$Parser$Advanced$fromInfo, s.hi, s.gb - (floatOffset + s.kD), invalid, s.d));
		} else {
			if (_Utils_eq(s.kD, floatOffset)) {
				return A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting));
			} else {
				if (_Utils_eq(intOffset, floatOffset)) {
					return A5($elm$parser$Parser$Advanced$finalizeInt, invalid, intSettings, s.kD, intPair, s);
				} else {
					if (floatSettings.$ === 1) {
						var x = floatSettings.a;
						return A2(
							$elm$parser$Parser$Advanced$Bad,
							true,
							A2($elm$parser$Parser$Advanced$fromState, s, invalid));
					} else {
						var toValue = floatSettings.a;
						var _v1 = $elm$core$String$toFloat(
							A3($elm$core$String$slice, s.kD, floatOffset, s.fK));
						if (_v1.$ === 1) {
							return A2(
								$elm$parser$Parser$Advanced$Bad,
								true,
								A2($elm$parser$Parser$Advanced$fromState, s, invalid));
						} else {
							var n = _v1.a;
							return A3(
								$elm$parser$Parser$Advanced$Good,
								true,
								toValue(n),
								A2($elm$parser$Parser$Advanced$bumpOffset, floatOffset, s));
						}
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$number = function (c) {
	return function (s) {
		if (A3($elm$parser$Parser$Advanced$isAsciiCode, 48, s.kD, s.fK)) {
			var zeroOffset = s.kD + 1;
			var baseOffset = zeroOffset + 1;
			return A3($elm$parser$Parser$Advanced$isAsciiCode, 120, zeroOffset, s.fK) ? A5(
				$elm$parser$Parser$Advanced$finalizeInt,
				c.jU,
				c.gx,
				baseOffset,
				A2($elm$parser$Parser$Advanced$consumeBase16, baseOffset, s.fK),
				s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 111, zeroOffset, s.fK) ? A5(
				$elm$parser$Parser$Advanced$finalizeInt,
				c.jU,
				c.gY,
				baseOffset,
				A3($elm$parser$Parser$Advanced$consumeBase, 8, baseOffset, s.fK),
				s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 98, zeroOffset, s.fK) ? A5(
				$elm$parser$Parser$Advanced$finalizeInt,
				c.jU,
				c.f3,
				baseOffset,
				A3($elm$parser$Parser$Advanced$consumeBase, 2, baseOffset, s.fK),
				s) : A6(
				$elm$parser$Parser$Advanced$finalizeFloat,
				c.jU,
				c.gj,
				c.gE,
				c.gk,
				_Utils_Tuple2(zeroOffset, 0),
				s)));
		} else {
			return A6(
				$elm$parser$Parser$Advanced$finalizeFloat,
				c.jU,
				c.gj,
				c.gE,
				c.gk,
				A3($elm$parser$Parser$Advanced$consumeBase, 10, s.kD, s.fK),
				s);
		}
	};
};
var $elm$parser$Parser$Advanced$int = F2(
	function (expecting, invalid) {
		return $elm$parser$Parser$Advanced$number(
			{
				f3: $elm$core$Result$Err(invalid),
				gj: expecting,
				gk: $elm$core$Result$Err(invalid),
				gx: $elm$core$Result$Err(invalid),
				gE: $elm$core$Result$Ok($elm$core$Basics$identity),
				jU: invalid,
				gY: $elm$core$Result$Err(invalid)
			});
	});
var $elm$parser$Parser$int = A2($elm$parser$Parser$Advanced$int, $elm$parser$Parser$ExpectingInt, $elm$parser$Parser$ExpectingInt);
var $hecrj$html_parser$Html$Parser$numericCharacterReference = function () {
	var codepoint = $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$chompIf(
						function (c) {
							return (c === 'x') || (c === 'X');
						})),
				$hecrj$html_parser$Html$Parser$hexadecimal),
				A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$chompWhile(
						$elm$core$Basics$eq('0'))),
				$elm$parser$Parser$int)
			]));
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$chompIf(
				$elm$core$Basics$eq('#'))),
		A2(
			$elm$parser$Parser$map,
			A2($elm$core$Basics$composeR, $elm$core$Char$fromCode, $elm$core$String$fromChar),
			codepoint));
}();
var $hecrj$html_parser$Html$Parser$characterReference = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$chompIf(
			$elm$core$Basics$eq('&'))),
	$elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$backtrackable($hecrj$html_parser$Html$Parser$namedCharacterReference),
				$hecrj$html_parser$Html$Parser$chompSemicolon),
				A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$backtrackable($hecrj$html_parser$Html$Parser$numericCharacterReference),
				$hecrj$html_parser$Html$Parser$chompSemicolon),
				$elm$parser$Parser$succeed('&')
			])));
var $hecrj$html_parser$Html$Parser$tagAttributeQuotedValue = function (quote) {
	var isQuotedValueChar = function (c) {
		return (!_Utils_eq(c, quote)) && (c !== '&');
	};
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$chompIf(
				$elm$core$Basics$eq(quote))),
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$map,
				$elm$core$String$join(''),
				$hecrj$html_parser$Html$Parser$many(
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								$elm$parser$Parser$getChompedString(
								$hecrj$html_parser$Html$Parser$chompOneOrMore(isQuotedValueChar)),
								$hecrj$html_parser$Html$Parser$characterReference
							])))),
			$elm$parser$Parser$chompIf(
				$elm$core$Basics$eq(quote))));
};
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $hecrj$html_parser$Html$Parser$oneOrMore = F2(
	function (type_, parser_) {
		return A2(
			$elm$parser$Parser$loop,
			_List_Nil,
			function (list) {
				return $elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$map,
							function (_new) {
								return $elm$parser$Parser$Loop(
									A2($elm$core$List$cons, _new, list));
							},
							parser_),
							$elm$core$List$isEmpty(list) ? $elm$parser$Parser$problem('expecting at least one ' + type_) : $elm$parser$Parser$succeed(
							$elm$parser$Parser$Done(
								$elm$core$List$reverse(list)))
						]));
			});
	});
var $hecrj$html_parser$Html$Parser$tagAttributeUnquotedValue = function () {
	var isUnquotedValueChar = function (c) {
		return (!$hecrj$html_parser$Html$Parser$isSpaceCharacter(c)) && ((c !== '\"') && ((c !== '\'') && ((c !== '=') && ((c !== '<') && ((c !== '>') && ((c !== '`') && (c !== '&')))))));
	};
	return A2(
		$elm$parser$Parser$map,
		$elm$core$String$join(''),
		A2(
			$hecrj$html_parser$Html$Parser$oneOrMore,
			'attribute value',
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$getChompedString(
						$hecrj$html_parser$Html$Parser$chompOneOrMore(isUnquotedValueChar)),
						$hecrj$html_parser$Html$Parser$characterReference
					]))));
}();
var $hecrj$html_parser$Html$Parser$tagAttributeValue = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$eq('='))),
				$elm$parser$Parser$chompWhile($hecrj$html_parser$Html$Parser$isSpaceCharacter)),
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						$hecrj$html_parser$Html$Parser$tagAttributeUnquotedValue,
						$hecrj$html_parser$Html$Parser$tagAttributeQuotedValue('\"'),
						$hecrj$html_parser$Html$Parser$tagAttributeQuotedValue('\'')
					]))),
			$elm$parser$Parser$succeed('')
		]));
var $hecrj$html_parser$Html$Parser$tagAttribute = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$keeper,
		$elm$parser$Parser$succeed($elm$core$Tuple$pair),
		A2(
			$elm$parser$Parser$ignorer,
			$hecrj$html_parser$Html$Parser$tagAttributeName,
			$elm$parser$Parser$chompWhile($hecrj$html_parser$Html$Parser$isSpaceCharacter))),
	A2(
		$elm$parser$Parser$ignorer,
		$hecrj$html_parser$Html$Parser$tagAttributeValue,
		$elm$parser$Parser$chompWhile($hecrj$html_parser$Html$Parser$isSpaceCharacter)));
var $hecrj$html_parser$Html$Parser$tagAttributes = $hecrj$html_parser$Html$Parser$many($hecrj$html_parser$Html$Parser$tagAttribute);
var $hecrj$html_parser$Html$Parser$tagName = A2(
	$elm$parser$Parser$map,
	$elm$core$String$toLower,
	$elm$parser$Parser$getChompedString(
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$chompIf($elm$core$Char$isAlphaNum),
			$elm$parser$Parser$chompWhile(
				function (c) {
					return $elm$core$Char$isAlphaNum(c) || (c === '-');
				}))));
var $hecrj$html_parser$Html$Parser$text = A2(
	$elm$parser$Parser$map,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$String$join(''),
		$hecrj$html_parser$Html$Parser$Text),
	A2(
		$hecrj$html_parser$Html$Parser$oneOrMore,
		'text element',
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$getChompedString(
					$hecrj$html_parser$Html$Parser$chompOneOrMore(
						function (c) {
							return (c !== '<') && (c !== '&');
						})),
					$hecrj$html_parser$Html$Parser$characterReference
				]))));
function $hecrj$html_parser$Html$Parser$cyclic$node() {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$hecrj$html_parser$Html$Parser$text,
				$hecrj$html_parser$Html$Parser$comment,
				$hecrj$html_parser$Html$Parser$cyclic$element()
			]));
}
function $hecrj$html_parser$Html$Parser$cyclic$element() {
	return A2(
		$elm$parser$Parser$andThen,
		function (_v0) {
			var name = _v0.a;
			var attributes = _v0.b;
			return $hecrj$html_parser$Html$Parser$isVoidElement(name) ? A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A3($hecrj$html_parser$Html$Parser$Element, name, attributes, _List_Nil)),
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								$elm$parser$Parser$chompIf(
								$elm$core$Basics$eq('/')),
								$elm$parser$Parser$succeed(0)
							]))),
				$elm$parser$Parser$chompIf(
					$elm$core$Basics$eq('>'))) : A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A2($hecrj$html_parser$Html$Parser$Element, name, attributes)),
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$eq('>'))),
				A2(
					$elm$parser$Parser$ignorer,
					$hecrj$html_parser$Html$Parser$many(
						$elm$parser$Parser$backtrackable(
							$hecrj$html_parser$Html$Parser$cyclic$node())),
					$hecrj$html_parser$Html$Parser$closingTag(name)));
		},
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Tuple$pair),
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$eq('<'))),
				A2(
					$elm$parser$Parser$ignorer,
					$hecrj$html_parser$Html$Parser$tagName,
					$elm$parser$Parser$chompWhile($hecrj$html_parser$Html$Parser$isSpaceCharacter))),
			$hecrj$html_parser$Html$Parser$tagAttributes));
}
var $hecrj$html_parser$Html$Parser$node = $hecrj$html_parser$Html$Parser$cyclic$node();
$hecrj$html_parser$Html$Parser$cyclic$node = function () {
	return $hecrj$html_parser$Html$Parser$node;
};
var $hecrj$html_parser$Html$Parser$element = $hecrj$html_parser$Html$Parser$cyclic$element();
$hecrj$html_parser$Html$Parser$cyclic$element = function () {
	return $hecrj$html_parser$Html$Parser$element;
};
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {gb: col, g8: problem, hi: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.hi, p.gb, p.g8);
};
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 0:
					return list;
				case 1:
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0;
		var _v1 = parse(
			{gb: 1, d: _List_Nil, fm: 1, kD: 0, hi: 1, fK: src});
		if (!_v1.$) {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (!_v0.$) {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $hecrj$html_parser$Html$Parser$run = function (str) {
	return $elm$core$String$isEmpty(str) ? $elm$core$Result$Ok(_List_Nil) : A2(
		$elm$parser$Parser$run,
		A2($hecrj$html_parser$Html$Parser$oneOrMore, 'node', $hecrj$html_parser$Html$Parser$node),
		str);
};
var $author$project$Document$DocumentViews$StyleSheets$docAttrToCss = function (attr) {
	switch (attr.$) {
		case 0:
			var padding = attr.a;
			return _List_Nil;
		case 1:
			var x = attr.a;
			var y = attr.b;
			return _List_Nil;
		case 2:
			return _List_fromArray(
				[
					_Utils_Tuple2('float', 'right')
				]);
		case 3:
			return _List_fromArray(
				[
					_Utils_Tuple2('float', 'left')
				]);
		case 4:
			return _List_Nil;
		case 5:
			var _v1 = attr.a;
			var r = _v1.a;
			var g = _v1.b;
			var b = _v1.c;
			var _v2 = _Utils_Tuple3(
				$elm$core$String$fromInt(
					$elm$core$Basics$round(r * 255)),
				$elm$core$String$fromInt(
					$elm$core$Basics$round(g * 255)),
				$elm$core$String$fromInt(
					$elm$core$Basics$round(b * 255)));
			var r_ = _v2.a;
			var g_ = _v2.b;
			var b_ = _v2.c;
			return _List_fromArray(
				[
					_Utils_Tuple2('background-color', 'rgb(' + (r_ + (',' + (g_ + (',' + (b_ + ')'))))))
				]);
		case 6:
			return _List_fromArray(
				[
					_Utils_Tuple2('width', '100%')
				]);
		case 7:
			return _List_Nil;
		case 8:
			var n = attr.a;
			return _List_fromArray(
				[
					_Utils_Tuple2(
					'width',
					$elm$core$String$fromInt(n) + 'px')
				]);
		case 9:
			var n = attr.a;
			return _List_fromArray(
				[
					_Utils_Tuple2(
					'height',
					$elm$core$String$fromInt(n) + 'px')
				]);
		case 10:
			var n = attr.a;
			return _List_Nil;
		case 11:
			return _List_fromArray(
				[
					_Utils_Tuple2('border-style', 'solid'),
					_Utils_Tuple2('border-width', '1px'),
					_Utils_Tuple2('border-color', 'rgb(127,127,127)')
				]);
		case 12:
			var font = attr.a;
			return _List_fromArray(
				[
					_Utils_Tuple2('font-family', font)
				]);
		case 13:
			var _v3 = attr.a;
			var r = _v3.a;
			var g = _v3.b;
			var b = _v3.c;
			var _v4 = _Utils_Tuple3(
				$elm$core$String$fromInt(
					$elm$core$Basics$round(r * 255)),
				$elm$core$String$fromInt(
					$elm$core$Basics$round(g * 255)),
				$elm$core$String$fromInt(
					$elm$core$Basics$round(b * 255)));
			var r_ = _v4.a;
			var g_ = _v4.b;
			var b_ = _v4.c;
			return _List_fromArray(
				[
					_Utils_Tuple2('color', 'rgb(' + (r_ + (',' + (g_ + (',' + (b_ + ')'))))))
				]);
		case 14:
			var n = attr.a;
			return _List_fromArray(
				[
					_Utils_Tuple2(
					'font-size',
					$elm$core$String$fromInt(n) + 'px')
				]);
		case 15:
			return _List_fromArray(
				[
					_Utils_Tuple2('text-align', 'left')
				]);
		case 16:
			return _List_fromArray(
				[
					_Utils_Tuple2('text-align', 'right')
				]);
		case 17:
			return _List_fromArray(
				[
					_Utils_Tuple2('text-align', 'center')
				]);
		case 18:
			return _List_fromArray(
				[
					_Utils_Tuple2('text-align', 'justify')
				]);
		case 19:
			return _List_fromArray(
				[
					_Utils_Tuple2('font-weight', 'bold')
				]);
		case 20:
			return _List_fromArray(
				[
					_Utils_Tuple2('font-style', 'italic')
				]);
		case 21:
			var attrs = attr.a;
			return _List_fromArray(
				[attrs]);
		default:
			var n = attr.a;
			var handler = attr.b;
			return _List_Nil;
	}
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$styleAttr = function (attrs) {
	return function (r) {
		return _List_fromArray(
			[
				_Utils_Tuple2('style', r)
			]);
	}(
		A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				function (_v0) {
					var a = _v0.a;
					var v = _v0.b;
					return a + (': ' + (v + ';'));
				},
				A2($elm$core$List$concatMap, $author$project$Document$DocumentViews$StyleSheets$docAttrToCss, attrs))));
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$textBlockPrimToNode = F2(
	function (pageIndex, tbp) {
		if (!tbp.$) {
			if (!tbp.a.b) {
				var s = tbp.b;
				return $hecrj$html_parser$Html$Parser$Text(s);
			} else {
				var attrs = tbp.a;
				var s = tbp.b;
				return A3(
					$hecrj$html_parser$Html$Parser$Element,
					'span',
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$styleAttr(attrs),
					_List_fromArray(
						[
							$hecrj$html_parser$Html$Parser$Text(s)
						]));
			}
		} else {
			var attrs = tbp.a;
			var targetBlank = tbp.b.hy;
			var url = tbp.b.d$;
			var label = tbp.b.O;
			var url_ = function () {
				var _v1 = A2($elm$core$Dict$get, url, pageIndex);
				if (!_v1.$) {
					return 'lien-interne:' + url;
				} else {
					return A2($elm$core$String$startsWith, '/baseDocumentaire', url) ? ('doc:' + url) : url;
				}
			}();
			return A3(
				$hecrj$html_parser$Html$Parser$Element,
				'a',
				_Utils_ap(
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$styleAttr(attrs),
					_Utils_ap(
						_List_fromArray(
							[
								_Utils_Tuple2('href', url_)
							]),
						targetBlank ? _List_fromArray(
							[
								_Utils_Tuple2('target', 'blank')
							]) : _List_Nil)),
				_List_fromArray(
					[
						$hecrj$html_parser$Html$Parser$Text(label)
					]));
		}
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$textBlockElementToNode = F2(
	function (pageIndex, tbe) {
		switch (tbe.$) {
			case 0:
				var attrs = tbe.a;
				var prims = tbe.b;
				return _List_fromArray(
					[
						A3(
						$hecrj$html_parser$Html$Parser$Element,
						'p',
						$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$styleAttr(attrs),
						A2(
							$elm$core$List$map,
							$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$textBlockPrimToNode(pageIndex),
							prims))
					]);
			case 1:
				var attrs = tbe.a;
				var lis = tbe.b;
				return _List_fromArray(
					[
						A3(
						$hecrj$html_parser$Html$Parser$Element,
						'ul',
						$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$styleAttr(attrs),
						A2(
							$elm$core$List$map,
							function (li) {
								return A3(
									$hecrj$html_parser$Html$Parser$Element,
									'li',
									_List_Nil,
									A2(
										$elm$core$List$map,
										$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$textBlockPrimToNode(pageIndex),
										li));
							},
							lis))
					]);
			case 2:
				switch (tbe.b.a) {
					case 1:
						var attrs = tbe.a;
						var _v1 = tbe.b;
						var s = _v1.b;
						return _List_fromArray(
							[
								A3(
								$hecrj$html_parser$Html$Parser$Element,
								'h1',
								$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$styleAttr(attrs),
								_List_fromArray(
									[
										$hecrj$html_parser$Html$Parser$Text(s)
									]))
							]);
					case 2:
						var attrs = tbe.a;
						var _v2 = tbe.b;
						var s = _v2.b;
						return _List_fromArray(
							[
								A3(
								$hecrj$html_parser$Html$Parser$Element,
								'h2',
								$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$styleAttr(attrs),
								_List_fromArray(
									[
										$hecrj$html_parser$Html$Parser$Text(s)
									]))
							]);
					case 3:
						var attrs = tbe.a;
						var _v3 = tbe.b;
						var s = _v3.b;
						return _List_fromArray(
							[
								A3(
								$hecrj$html_parser$Html$Parser$Element,
								'h3',
								$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$styleAttr(attrs),
								_List_fromArray(
									[
										$hecrj$html_parser$Html$Parser$Text(s)
									]))
							]);
					default:
						return _List_Nil;
				}
			case 3:
				var prim = tbe.a;
				return _List_fromArray(
					[
						A2($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$textBlockPrimToNode, pageIndex, prim)
					]);
			default:
				var html = tbe.a;
				return A2(
					$elm$core$Result$withDefault,
					_List_Nil,
					$hecrj$html_parser$Html$Parser$run(html));
		}
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$updateAttrs = F4(
	function (p, attrWrapper, val, attrs) {
		var helper = F2(
			function (acc, xs) {
				helper:
				while (true) {
					if (!xs.b) {
						return $elm$core$List$reverse(
							A2(
								$elm$core$List$cons,
								attrWrapper(val),
								acc));
					} else {
						var x = xs.a;
						var xs_ = xs.b;
						if (_Utils_eq(
							attrWrapper(val),
							x)) {
							return _Utils_ap(
								$elm$core$List$reverse(acc),
								xs_);
						} else {
							if (p(x)) {
								return _Utils_ap(
									$elm$core$List$reverse(
										A2(
											$elm$core$List$cons,
											attrWrapper(val),
											acc)),
									xs_);
							} else {
								var $temp$acc = A2($elm$core$List$cons, x, acc),
									$temp$xs = xs_;
								acc = $temp$acc;
								xs = $temp$xs;
								continue helper;
							}
						}
					}
				}
			});
		return A2(helper, _List_Nil, attrs);
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$webColors = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('maroon', '800000'),
			_Utils_Tuple2('dark red', '8B0000'),
			_Utils_Tuple2('brown', 'A52A2A'),
			_Utils_Tuple2('firebrick', 'B22222'),
			_Utils_Tuple2('crimson', 'DC143C'),
			_Utils_Tuple2('red', 'FF0000'),
			_Utils_Tuple2('tomato', 'FF6347'),
			_Utils_Tuple2('coral', 'FF7F50'),
			_Utils_Tuple2('indian red', 'CD5C5C'),
			_Utils_Tuple2('light coral', 'F08080'),
			_Utils_Tuple2('dark salmon', 'E9967A'),
			_Utils_Tuple2('salmon', 'FA8072'),
			_Utils_Tuple2('light salmon', 'FFA07A'),
			_Utils_Tuple2('orange red', 'FF4500'),
			_Utils_Tuple2('dark orange', 'FF8C00'),
			_Utils_Tuple2('orange', 'FFA500'),
			_Utils_Tuple2('gold', 'FFD700'),
			_Utils_Tuple2('dark golden rod', 'B8860B'),
			_Utils_Tuple2('golden rod', 'DAA520'),
			_Utils_Tuple2('pale golden rod', 'EEE8AA'),
			_Utils_Tuple2('dark khaki', 'BDB76B'),
			_Utils_Tuple2('khaki', 'F0E68C'),
			_Utils_Tuple2('olive', '808000'),
			_Utils_Tuple2('yellow', 'FFFF00'),
			_Utils_Tuple2('yellow green', '9ACD32'),
			_Utils_Tuple2('dark olive green', '556B2F'),
			_Utils_Tuple2('olive drab', '6B8E23'),
			_Utils_Tuple2('lawn green', '7CFC00'),
			_Utils_Tuple2('chart reuse', '7FFF00'),
			_Utils_Tuple2('green yellow', 'ADFF2F'),
			_Utils_Tuple2('dark green', '006400'),
			_Utils_Tuple2('green', '008000'),
			_Utils_Tuple2('forest green', '228B22'),
			_Utils_Tuple2('lime', '00FF00'),
			_Utils_Tuple2('lime green', '32CD32'),
			_Utils_Tuple2('light green', '90EE90'),
			_Utils_Tuple2('pale green', '98FB98'),
			_Utils_Tuple2('dark sea green', '8FBC8F'),
			_Utils_Tuple2('medium spring green', '00FA9A'),
			_Utils_Tuple2('spring green', '0F0FF7F'),
			_Utils_Tuple2('sea green', '2E8B57'),
			_Utils_Tuple2('medium aqua marine', '66CDAA'),
			_Utils_Tuple2('medium sea green', '3CB371'),
			_Utils_Tuple2('light sea green', '20B2AA'),
			_Utils_Tuple2('dark slate gray', '2F4F4F'),
			_Utils_Tuple2('teal', '008080'),
			_Utils_Tuple2('dark cyan', '008B8B'),
			_Utils_Tuple2('aqua', '00FFFF'),
			_Utils_Tuple2('cyan', '00FFFF'),
			_Utils_Tuple2('light cyan', 'E0FFFF'),
			_Utils_Tuple2('dark turquoise', '00CED1'),
			_Utils_Tuple2('turquoise', '40E0D0'),
			_Utils_Tuple2('medium turquoise', '48D1CC'),
			_Utils_Tuple2('pale turquoise', 'AFEEEE'),
			_Utils_Tuple2('aqua marine', '7FFFD4'),
			_Utils_Tuple2('powder blue', 'B0E0E6'),
			_Utils_Tuple2('cadet blue', '5F9EA0'),
			_Utils_Tuple2('steel blue', '4682B4'),
			_Utils_Tuple2('corn flower blue', '6495ED'),
			_Utils_Tuple2('deep sky blue', '00BFFF'),
			_Utils_Tuple2('dodger blue', '1E90FF'),
			_Utils_Tuple2('light blue', 'ADD8E6'),
			_Utils_Tuple2('sky blue', '87CEEB'),
			_Utils_Tuple2('light sky blue', '87CEFA'),
			_Utils_Tuple2('midnight blue', '191970'),
			_Utils_Tuple2('navy', '000080'),
			_Utils_Tuple2('dark blue', '00008B'),
			_Utils_Tuple2('medium blue', '0000CD'),
			_Utils_Tuple2('blue', '0000FF'),
			_Utils_Tuple2('royal blue', '4169E1'),
			_Utils_Tuple2('blue violet', '8A2BE2'),
			_Utils_Tuple2('indigo', '4B0082'),
			_Utils_Tuple2('dark slate blue', '483D8B'),
			_Utils_Tuple2('slate blue', '6A5ACD'),
			_Utils_Tuple2('medium slate blue', '7B68EE'),
			_Utils_Tuple2('medium purple', '9370DB'),
			_Utils_Tuple2('dark magenta', '8B008B'),
			_Utils_Tuple2('dark violet', '9400D3'),
			_Utils_Tuple2('dark orchid', '9932CC'),
			_Utils_Tuple2('medium orchid', 'BA55D3'),
			_Utils_Tuple2('purple', '800080'),
			_Utils_Tuple2('thistle', 'D8BFD8'),
			_Utils_Tuple2('plum', 'DDA0DD'),
			_Utils_Tuple2('violet', 'EE82EE'),
			_Utils_Tuple2('magenta / fuchsia', 'FF00FF'),
			_Utils_Tuple2('orchid', 'DA70D6'),
			_Utils_Tuple2('medium violet red', 'C71585'),
			_Utils_Tuple2('pale violet red', 'DB7093'),
			_Utils_Tuple2('deep pink', 'FF1493'),
			_Utils_Tuple2('hot pink', 'FF69B4'),
			_Utils_Tuple2('light pink', 'FFB6C1'),
			_Utils_Tuple2('pink', 'FFC0CB'),
			_Utils_Tuple2('antique white', 'FAEBD7'),
			_Utils_Tuple2('beige', 'F5F5DC'),
			_Utils_Tuple2('bisque', 'FFE4C4'),
			_Utils_Tuple2('blanched almond', 'FFEBCD'),
			_Utils_Tuple2('wheat', 'F5DEB3'),
			_Utils_Tuple2('corn silk', 'FFF8DC'),
			_Utils_Tuple2('lemon chiffon', 'FFFACD'),
			_Utils_Tuple2('light golden rod yellow', 'FAFAD2'),
			_Utils_Tuple2('light yellow', 'FFFFE0'),
			_Utils_Tuple2('saddle brown', '8B4513'),
			_Utils_Tuple2('sienna', 'A0522D'),
			_Utils_Tuple2('chocolate', 'D2691E'),
			_Utils_Tuple2('peru', 'CD853F'),
			_Utils_Tuple2('sandy brown', 'F4A460'),
			_Utils_Tuple2('burly wood', 'DEB887'),
			_Utils_Tuple2('tan', 'D2B48C'),
			_Utils_Tuple2('rosy brown', 'BC8F8F'),
			_Utils_Tuple2('moccasin', 'FFE4B5'),
			_Utils_Tuple2('navajo white', 'FFDEAD'),
			_Utils_Tuple2('peach puff', 'FFDAB9'),
			_Utils_Tuple2('misty rose', 'FFE4E1'),
			_Utils_Tuple2('lavender blush', 'FFF0F5'),
			_Utils_Tuple2('linen', 'FAF0E6'),
			_Utils_Tuple2('old lace', 'FDF5E6'),
			_Utils_Tuple2('papaya whip', 'FFEFD5'),
			_Utils_Tuple2('sea shell', 'FFF5EE'),
			_Utils_Tuple2('mint cream', 'F5FFFA'),
			_Utils_Tuple2('slate gray', '708090'),
			_Utils_Tuple2('light slate gray', '778899'),
			_Utils_Tuple2('light steel blue', 'B0C4DE'),
			_Utils_Tuple2('lavender', 'E6E6FA'),
			_Utils_Tuple2('floral white', 'FFFAF0'),
			_Utils_Tuple2('alice blue', 'F0F8FF'),
			_Utils_Tuple2('ghost white', 'F8F8FF'),
			_Utils_Tuple2('honeydew', 'F0FFF0'),
			_Utils_Tuple2('ivory', 'FFFFF0'),
			_Utils_Tuple2('azure', 'F0FFFF'),
			_Utils_Tuple2('snow', 'FFFAFA'),
			_Utils_Tuple2('black', '000000'),
			_Utils_Tuple2('dim gray / dim grey', '696969'),
			_Utils_Tuple2('gray / grey', '808080'),
			_Utils_Tuple2('dark gray / dark grey', 'A9A9A9'),
			_Utils_Tuple2('silver', 'C0C0C0'),
			_Utils_Tuple2('light gray / light grey', 'D3D3D3'),
			_Utils_Tuple2('gainsboro', 'DCDCDC'),
			_Utils_Tuple2('white smoke', 'F5F5F5'),
			_Utils_Tuple2('white', 'FFFFFF')
		]));
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$update = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 0:
				var content = msg.a;
				var output = _List_fromArray(
					[
						$author$project$Document$Document$TrixHtml(content.gA)
					]);
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{fk: content, q: output}),
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$getSelection(0),
					$elm$core$Maybe$Nothing);
			case 1:
				return _Utils_Tuple3(
					model,
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$getSelection(0),
					$elm$core$Maybe$Nothing);
			case 2:
				var value = msg.a;
				var _v1 = A2($elm$json$Json$Decode$decodeValue, $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$decodeSelection, value);
				if (!_v1.$) {
					var _v2 = _v1.a;
					var sel = _v2.a;
					var ids = _v2.b;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								aq: $elm$core$Maybe$Just(sel)
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 3:
				var removeHighlight = function (node) {
					if (node.$ === 1) {
						var tag = node.a;
						var attrs = node.b;
						var nodes = node.c;
						return A3(
							$hecrj$html_parser$Html$Parser$Element,
							tag,
							A3(
								$elm$core$List$foldr,
								F2(
									function (_v4, acc) {
										var attr = _v4.a;
										var value = _v4.b;
										return A2(
											$elm$core$List$cons,
											(attr === 'style') ? _Utils_Tuple2(
												attr,
												A3($elm$core$String$replace, 'background-color: highlight;', '', value)) : _Utils_Tuple2(attr, value),
											acc);
									}),
								_List_Nil,
								attrs),
							A2($elm$core$List$map, removeHighlight, nodes));
					} else {
						var other = node;
						return other;
					}
				};
				return _Utils_Tuple3(
					model,
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$loadHtml(
						function (html) {
							return $elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'tagName',
										$elm$json$Json$Encode$string('initial load')),
										_Utils_Tuple2(
										'html',
										$elm$json$Json$Encode$string(html))
									]));
						}(
							A2(
								$elm$core$String$join,
								'',
								A2(
									$elm$core$List$map,
									$hecrj$html_parser$Html$Parser$nodeToString,
									A2(
										$elm$core$List$map,
										removeHighlight,
										A2(
											$elm$core$List$concatMap,
											$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$textBlockElementToNode(
												$author$project$PageTreeEditor$PageTreeEditor$pageIndex(config.J)),
											model.q)))))),
					$elm$core$Maybe$Nothing);
			case 4:
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							n: _Utils_eq(
								model.n,
								$elm$core$Maybe$Just(0)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(0)
						}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 5:
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							n: _Utils_eq(
								model.n,
								$elm$core$Maybe$Just(1)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(1)
						}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 6:
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							n: _Utils_eq(
								model.n,
								$elm$core$Maybe$Just(2)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(2)
						}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 7:
				var cId = msg.a;
				var _v5 = model.aq;
				if (!_v5.$) {
					var start = _v5.a.bo;
					var end = _v5.a.a4;
					var attrs = _v5.a.y;
					var text = _v5.a.dV;
					if (!_Utils_eq(start, end)) {
						var selected = text;
						var path = A3(
							$elm$core$String$replace,
							' ',
							'_',
							A2(
								$elm$core$Maybe$withDefault,
								'',
								A2($author$project$PageTreeEditor$PageTreeEditor$getPathFromId, config.J, cId)));
						var link = '<a href=lien-interne:' + (cId + ('>' + (selected + '</>')));
						var data = $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'selectionStart',
									$elm$json$Json$Encode$int(start)),
									_Utils_Tuple2(
									'selectionEnd',
									$elm$json$Json$Encode$int(end)),
									_Utils_Tuple2(
									'tagName',
									$elm$json$Json$Encode$string('internal link')),
									_Utils_Tuple2(
									'html',
									$elm$json$Json$Encode$string(link))
								]));
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{n: $elm$core$Maybe$Nothing}),
							$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$insertHtml(data),
							$elm$core$Maybe$Nothing);
					} else {
						return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
					}
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 8:
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							n: _Utils_eq(
								model.n,
								$elm$core$Maybe$Just(4)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(4)
						}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 9:
				var url = msg.a;
				var _v6 = model.aq;
				if (!_v6.$) {
					var start = _v6.a.bo;
					var end = _v6.a.a4;
					var attrs = _v6.a.y;
					var text = _v6.a.dV;
					if (!_Utils_eq(start, end)) {
						var suffix = $elm$url$Url$percentEncode(
							A2($elm_community$string_extra$String$Extra$rightOfBack, '/', url));
						var selected = text;
						var prefix = A2($elm_community$string_extra$String$Extra$leftOfBack, '/', url);
						var link = '<a href=doc:' + (prefix + ('/' + (suffix + ('>' + (selected + '</>')))));
						var data = $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'selectionStart',
									$elm$json$Json$Encode$int(start)),
									_Utils_Tuple2(
									'selectionEnd',
									$elm$json$Json$Encode$int(end)),
									_Utils_Tuple2(
									'tagName',
									$elm$json$Json$Encode$string('document link')),
									_Utils_Tuple2(
									'html',
									$elm$json$Json$Encode$string(link))
								]));
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{n: $elm$core$Maybe$Nothing}),
							$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$insertHtml(data),
							$elm$core$Maybe$Nothing);
					} else {
						return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
					}
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 10:
				var isWholeTextAttr = msg.a;
				var color = msg.b;
				if (isWholeTextAttr) {
					var color_ = $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$hexToDocColor(
						A2(
							$elm$core$Maybe$withDefault,
							'000000',
							A2($elm$core$Dict$get, color, $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$webColors)));
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								n: $elm$core$Maybe$Nothing,
								x: A4($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$updateAttrs, $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$isFontColorAttr, $author$project$Document$Document$FontColor, color_, model.x)
							}),
						$elm$core$Platform$Cmd$batch(_List_Nil),
						$elm$core$Maybe$Nothing);
				} else {
					var _v7 = model.aq;
					if (!_v7.$) {
						var start = _v7.a.bo;
						var end = _v7.a.a4;
						var attrs = _v7.a.y;
						var data = $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'selectionStart',
									$elm$json$Json$Encode$int(start)),
									_Utils_Tuple2(
									'selectionEnd',
									$elm$json$Json$Encode$int(end)),
									_Utils_Tuple2(
									'attribute',
									$elm$json$Json$Encode$string('foregroundColor')),
									_Utils_Tuple2(
									'value',
									$elm$json$Json$Encode$string(
										'#' + A2(
											$elm$core$Maybe$withDefault,
											'000000',
											A2($elm$core$Dict$get, color, $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$webColors))))
								]));
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{n: $elm$core$Maybe$Nothing}),
							$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$activateAttribute(data),
							$elm$core$Maybe$Nothing);
					} else {
						return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
					}
				}
			case 11:
				var isWholeTextAttr = msg.a;
				var color = msg.b;
				if (isWholeTextAttr) {
					var color_ = $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$hexToDocColor(
						A2(
							$elm$core$Maybe$withDefault,
							'000000',
							A2($elm$core$Dict$get, color, $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$webColors)));
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								n: $elm$core$Maybe$Nothing,
								x: A4($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$updateAttrs, $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$isBackgroundColorAttr, $author$project$Document$Document$BackgroundColor, color_, model.x)
							}),
						$elm$core$Platform$Cmd$batch(_List_Nil),
						$elm$core$Maybe$Nothing);
				} else {
					var _v8 = model.aq;
					if (!_v8.$) {
						var start = _v8.a.bo;
						var end = _v8.a.a4;
						var attrs = _v8.a.y;
						var data = $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'selectionStart',
									$elm$json$Json$Encode$int(start)),
									_Utils_Tuple2(
									'selectionEnd',
									$elm$json$Json$Encode$int(end)),
									_Utils_Tuple2(
									'attribute',
									$elm$json$Json$Encode$string('backgroundColor')),
									_Utils_Tuple2(
									'value',
									$elm$json$Json$Encode$string(
										'#' + A2(
											$elm$core$Maybe$withDefault,
											'000000',
											A2($elm$core$Dict$get, color, $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$webColors))))
								]));
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{n: $elm$core$Maybe$Nothing}),
							$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$activateAttribute(data),
							$elm$core$Maybe$Nothing);
					} else {
						return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
					}
				}
			case 12:
				var isWholeTextAttr = msg.a;
				var font = msg.b;
				if (isWholeTextAttr) {
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								x: A4($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$updateAttrs, $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$isFontAttr, $author$project$Document$Document$Font, font, model.x)
							}),
						$elm$core$Platform$Cmd$batch(_List_Nil),
						$elm$core$Maybe$Nothing);
				} else {
					var _v9 = model.aq;
					if (!_v9.$) {
						var start = _v9.a.bo;
						var end = _v9.a.a4;
						var attrs = _v9.a.y;
						var data = $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'selectionStart',
									$elm$json$Json$Encode$int(start)),
									_Utils_Tuple2(
									'selectionEnd',
									$elm$json$Json$Encode$int(end)),
									_Utils_Tuple2(
									'attribute',
									$elm$json$Json$Encode$string('textFont')),
									_Utils_Tuple2(
									'value',
									$elm$json$Json$Encode$string(font))
								]));
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{n: $elm$core$Maybe$Nothing}),
							$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$activateAttribute(data),
							$elm$core$Maybe$Nothing);
					} else {
						return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
					}
				}
			case 13:
				var isWholeTextAttr = msg.a;
				var n = msg.b;
				if (isWholeTextAttr) {
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								x: A4($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$updateAttrs, $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$isFontSizeAttr, $author$project$Document$Document$FontSize, n, model.x)
							}),
						$elm$core$Platform$Cmd$batch(_List_Nil),
						$elm$core$Maybe$Nothing);
				} else {
					var _v10 = model.aq;
					if (!_v10.$) {
						var start = _v10.a.bo;
						var end = _v10.a.a4;
						var attrs = _v10.a.y;
						var data = $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'selectionStart',
									$elm$json$Json$Encode$int(start)),
									_Utils_Tuple2(
									'selectionEnd',
									$elm$json$Json$Encode$int(end)),
									_Utils_Tuple2(
									'attribute',
									$elm$json$Json$Encode$string('fontSize')),
									_Utils_Tuple2(
									'value',
									$elm$json$Json$Encode$string(
										$elm$core$String$fromInt(n) + 'px'))
								]));
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{n: $elm$core$Maybe$Nothing}),
							$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$activateAttribute(data),
							$elm$core$Maybe$Nothing);
					} else {
						return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
					}
				}
			case 14:
				var a = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							x: A2($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$setAlignMent, model.x, a)
						}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 15:
				var _v11 = model.aq;
				if (!_v11.$) {
					var start = _v11.a.bo;
					var end = _v11.a.a4;
					var attrs = _v11.a.y;
					var data = $elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'selectionStart',
								$elm$json$Json$Encode$int(start)),
								_Utils_Tuple2(
								'selectionEnd',
								$elm$json$Json$Encode$int(end)),
								_Utils_Tuple2(
								'attributes',
								A2(
									$elm$json$Json$Encode$list,
									$elm$json$Json$Encode$string,
									$elm$core$Dict$keys(attrs)))
							]));
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{n: $elm$core$Maybe$Nothing}),
						$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$deactivateAttributes(data),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 16:
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{n: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 17:
				return _Utils_Tuple3(
					model,
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Just(
						$author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData(
							_Utils_Tuple2(model.q, model.x))));
			case 18:
				return _Utils_Tuple3(
					model,
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginQuit));
			default:
				return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
		}
	});
var $author$project$NewsEditor$NewsEditor$update = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 0:
				var res = msg.a;
				if (!res.$) {
					var newsDict = res.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{b4: $author$project$Internals$ToolHelpers$ToolLoadingSuccess, gT: newsDict}),
						$elm$core$Platform$Cmd$none);
				} else {
					var e = res.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								b4: $author$project$Internals$ToolHelpers$ToolLoadingFailure('')
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 1:
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							e: A2($elm$core$Set$member, id, model._) ? $elm$core$Maybe$Nothing : A2(
								$elm$core$Maybe$map,
								$author$project$NewsEditor$NewsEditor$bufferFromNews,
								A2($elm$core$Dict$get, id, model.gT)),
							_: A2($elm$core$Set$member, id, model._) ? A2($elm$core$Set$remove, id, model._) : A2($elm$core$Set$insert, id, model._)
						}),
					$elm$core$Platform$Cmd$none);
			case 2:
				var title = msg.a;
				var baseNews = A2($elm$core$Maybe$withDefault, $author$project$NewsEditor$NewsEditor$emptyNews, model.e);
				var newBuffer = _Utils_update(
					baseNews,
					{fP: title});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							e: $elm$core$Maybe$Just(newBuffer)
						}),
					$elm$core$Platform$Cmd$none);
			case 3:
				var s = msg.a;
				var _v2 = A3($author$project$Internals$CommonHelpers$parseDate, model.iP, config.fY, s);
				if (_v2.$ === 1) {
					var baseNews = A2($elm$core$Maybe$withDefault, $author$project$NewsEditor$NewsEditor$emptyNews, model.e);
					var newBuffer = _Utils_update(
						baseNews,
						{
							i8: $elm$time$Time$millisToPosix(0)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								e: $elm$core$Maybe$Just(newBuffer),
								bA: s
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					var _v3 = _v2.a;
					var day = _v3.a;
					var month = _v3.b;
					var year = _v3.c;
					var newTime = $AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilToPosix(
						A8($AdrianRibao$elm_derberos_date$Derberos$Date$Core$newDateRecord, year, month, day, 0, 0, 0, 0, config.fY));
					var baseNews = A2($elm$core$Maybe$withDefault, $author$project$NewsEditor$NewsEditor$emptyNews, model.e);
					var newBuffer = _Utils_update(
						baseNews,
						{i8: newTime});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								e: $elm$core$Maybe$Just(newBuffer),
								bA: s
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 4:
				var baseContent = A2(
					$elm$core$Maybe$withDefault,
					{y: _List_Nil, lZ: _List_Nil},
					A2(
						$elm$core$Maybe$andThen,
						function ($) {
							return $.iI;
						},
						model.e));
				var _v4 = A3(
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$init,
					baseContent.y,
					$elm$core$Maybe$Just(baseContent.lZ),
					A2($elm$core$Basics$composeL, model.bY, $author$project$NewsEditor$NewsEditor$TextBlockPluginMsg));
				var newTextBlockPlugin = _v4.a;
				var textBlockPluginCmds = _v4.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{cN: 1, co: newTextBlockPlugin}),
					textBlockPluginCmds);
			case 5:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{e: $elm$core$Maybe$Nothing, _: $elm$core$Set$empty, bt: false, bA: '', cN: 0, bI: false}),
					$elm$core$Platform$Cmd$none);
			case 6:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{bt: !model.bt}),
					$elm$core$Platform$Cmd$none);
			case 7:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{bM: 1}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								A2(
									$author$project$Auth$AuthPlugin$cmdIfLogged,
									config.be,
									$author$project$NewsEditor$NewsEditor$removeNews(
										$elm$core$Set$toList(model._)))),
								A6($author$project$Auth$AuthPlugin$newLogIfLogged, config.be, config.eT, 'Suppression actualité(s)...', $elm$core$Maybe$Nothing, false, true)
							])));
			case 8:
				var ids = msg.a;
				var res = msg.b;
				if (!res.$) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								e: $elm$core$Maybe$Nothing,
								_: $elm$core$Set$empty,
								bt: false,
								bA: '',
								gT: A3(
									$elm$core$List$foldr,
									F2(
										function (id, acc) {
											return A2($elm$core$Dict$remove, id, acc);
										}),
									model.gT,
									ids),
								cN: 0,
								bI: false,
								bM: 2
							}),
						A5($author$project$Internals$CommonHelpers$newLog, config.eT, 'Actualité(s) suprimée(s)', $elm$core$Maybe$Nothing, false, true));
				} else {
					var e = res.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{bM: 3}),
						A5(
							$author$project$Internals$CommonHelpers$newLog,
							config.eT,
							'Echec suppression actualité(s)',
							$elm$core$Maybe$Just(
								$author$project$Internals$CommonHelpers$httpErrorToString(e)),
							true,
							true));
				}
			case 9:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{bI: true}),
					$elm$core$Platform$Cmd$none);
			case 10:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{bI: false}),
					$elm$core$Platform$Cmd$none);
			case 11:
				var pr = msg.a;
				if (!pr.$) {
					var url = pr.a.d$;
					var width = pr.a.mt;
					var height = pr.a.jx;
					var newPic = A3($author$project$Document$Document$Pic, url, width, height);
					var baseNews = A2($elm$core$Maybe$withDefault, $author$project$NewsEditor$NewsEditor$emptyNews, model.e);
					var newBuffer = _Utils_update(
						baseNews,
						{
							kS: $elm$core$Maybe$Just(newPic)
						});
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								e: $elm$core$Maybe$Just(newBuffer),
								bI: false
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 12:
				var _v7 = _Utils_Tuple3(model.e, config.be, model.ll);
				if (((!_v7.a.$) && (!_v7.b.$)) && (!_v7.c.$)) {
					var news = _v7.a.a;
					var sessionId = _v7.b.a.fF;
					var seed = _v7.c.a;
					var _v8 = A2($elm$random$Random$step, $TSFoster$elm_uuid$UUID$generator, seed);
					var uuid = _v8.a;
					var newSeed = _v8.b;
					var toSave = {iI: news.iI, eg: news.eg, i8: news.i8, kS: news.kS, fP: news.fP, fS: uuid};
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								cN: 0,
								ll: $elm$core$Maybe$Just(newSeed),
								bM: 1
							}),
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A2(
									$elm$core$Platform$Cmd$map,
									model.bY,
									A2(
										$elm$core$Task$attempt,
										$author$project$NewsEditor$NewsEditor$NewsSaved(toSave),
										A2(
											$elm$core$Task$andThen,
											function (t) {
												return A3($author$project$NewsEditor$NewsEditor$setNews, t, toSave, sessionId);
											},
											$elm$time$Time$now))),
									A6($author$project$Auth$AuthPlugin$newLogIfLogged, config.be, config.eT, 'Création actualité...', $elm$core$Maybe$Nothing, false, true)
								])));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 13:
				var toSave = msg.a;
				var res = msg.b;
				if (!res.$) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								e: $elm$core$Maybe$Nothing,
								_: $elm$core$Set$empty,
								bt: false,
								bA: '',
								gT: A3(
									$elm$core$Dict$insert,
									$TSFoster$elm_uuid$UUID$toString(toSave.fS),
									_Utils_update(
										toSave,
										{eg: model.iP}),
									model.gT),
								bI: false,
								bM: 2
							}),
						A5($author$project$Internals$CommonHelpers$newLog, config.eT, 'Actualité sauvegardée', $elm$core$Maybe$Nothing, false, true));
				} else {
					var e = res.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{bM: 3}),
						A5(
							$author$project$Internals$CommonHelpers$newLog,
							config.eT,
							'Echec création actualité(s)',
							$elm$core$Maybe$Just(
								$author$project$Internals$CommonHelpers$httpErrorToString(e)),
							true,
							true));
				}
			case 14:
				var textBlockMsg = msg.a;
				var baseNews = A2($elm$core$Maybe$withDefault, $author$project$NewsEditor$NewsEditor$emptyNews, model.e);
				var _v10 = A3(
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$update,
					{J: config.J},
					textBlockMsg,
					model.co);
				var newTextBlockPlugin = _v10.a;
				var textBlockPluginCmds = _v10.b;
				var mbEditorPluginResult = _v10.c;
				var newBuffer = _Utils_update(
					baseNews,
					{
						iI: $elm$core$Maybe$Just(
							$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$parserOutput(newTextBlockPlugin))
					});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							e: $elm$core$Maybe$Just(newBuffer),
							co: newTextBlockPlugin
						}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[textBlockPluginCmds])));
			case 15:
				var t = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							iP: t,
							ll: $elm$core$Maybe$Just(
								$elm$random$Random$initialSeed(
									$elm$time$Time$posixToMillis(t)))
						}),
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$PageEditor$Internals$DocumentEditorHelpers$ContainerEditPlugin = {$: 6};
var $author$project$PageEditor$PageEditor$DownloadCurrentPage = function (a) {
	return {$: 53, a: a};
};
var $author$project$Document$Document$Fiches = function (a) {
	return {$: 5, a: a};
};
var $author$project$Document$Document$Gallery = function (a) {
	return {$: 15, a: a};
};
var $author$project$PageEditor$PageEditor$GotFile = function (a) {
	return {$: 55, a: a};
};
var $author$project$Document$Document$Image = function (a) {
	return {$: 0, a: a};
};
var $author$project$PageEditor$PageEditor$ListKeys = {$: 50};
var $author$project$PageEditor$PageEditor$LoadFileContent = function (a) {
	return {$: 56, a: a};
};
var $andrewMacmurray$elm_delay$Delay$Millisecond = 0;
var $author$project$PageEditor$Internals$DocumentEditorHelpers$PersistencePlugin = {$: 8};
var $author$project$Document$Document$PictureLinks = function (a) {
	return {$: 14, a: a};
};
var $author$project$Document$DocumentViews$StyleSheets$PreviewTablet = 2;
var $author$project$Document$Document$Table = function (a) {
	return {$: 2, a: a};
};
var $author$project$Document$Document$TextBlock = function (a) {
	return {$: 6, a: a};
};
var $author$project$Document$Document$Video = function (a) {
	return {$: 1, a: a};
};
var $author$project$PageEditor$Internals$DocumentEditorHelpers$newCell = F2(
	function (nextUid, cellContent) {
		return $author$project$Document$Document$Cell(
			{
				y: _List_Nil,
				at: cellContent,
				a: {
					br: $elm$core$Set$empty,
					bx: $elm$core$Maybe$Nothing,
					bE: $elm$core$Maybe$Just(
						'defaultHtmlId' + $elm$core$String$fromInt(nextUid)),
					cW: nextUid
				}
			});
	});
var $author$project$PageEditor$Internals$DocumentEditorHelpers$emptyCell = function (nextUid) {
	return A2($author$project$PageEditor$Internals$DocumentEditorHelpers$newCell, nextUid, $author$project$Document$Document$EmptyCell);
};
var $author$project$PageEditor$Internals$DocumentZipper$addNewInside = F2(
	function (nextUid, _v0) {
		var current = _v0.a3;
		var contexts = _v0.bu;
		if (!current.$) {
			var cv = current.a;
			var xs = current.b;
			return $elm$core$Maybe$Just(
				{
					bu: contexts,
					a3: A2(
						$author$project$Document$Document$Container,
						cv,
						_Utils_ap(
							xs,
							_List_fromArray(
								[
									$author$project$PageEditor$Internals$DocumentEditorHelpers$emptyCell(nextUid)
								])))
				});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$PageEditor$Internals$DocumentZipper$zipLeft = function (_v0) {
	var current = _v0.a3;
	var contexts = _v0.bu;
	if (!contexts.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var parent = contexts.a.eF;
		var left = contexts.a.bc;
		var right = contexts.a.bl;
		var cs = contexts.b;
		var _v2 = $elm$core$List$reverse(left);
		if (!_v2.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var d = _v2.a;
			var ds = _v2.b;
			return $elm$core$Maybe$Just(
				{
					bu: A2(
						$elm$core$List$cons,
						{
							bc: $elm$core$List$reverse(ds),
							eF: parent,
							bl: A2($elm$core$List$cons, current, right)
						},
						cs),
					a3: d
				});
		}
	}
};
var $author$project$PageEditor$Internals$DocumentZipper$addNewLeft = F2(
	function (nextUid, _v0) {
		var current = _v0.a3;
		var contexts = _v0.bu;
		if (!contexts.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var parent = contexts.a.eF;
			var left = contexts.a.bc;
			var right = contexts.a.bl;
			var cs = contexts.b;
			return $author$project$PageEditor$Internals$DocumentZipper$zipLeft(
				{
					bu: A2(
						$elm$core$List$cons,
						{
							bc: _Utils_ap(
								left,
								_List_fromArray(
									[
										$author$project$PageEditor$Internals$DocumentEditorHelpers$emptyCell(nextUid)
									])),
							eF: parent,
							bl: right
						},
						cs),
					a3: current
				});
		}
	});
var $author$project$PageEditor$Internals$DocumentZipper$zipRight = function (_v0) {
	var current = _v0.a3;
	var contexts = _v0.bu;
	if (!contexts.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var parent = contexts.a.eF;
		var left = contexts.a.bc;
		var right = contexts.a.bl;
		var cs = contexts.b;
		if (!right.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var d = right.a;
			var ds = right.b;
			return $elm$core$Maybe$Just(
				{
					bu: A2(
						$elm$core$List$cons,
						{
							bc: _Utils_ap(
								left,
								_List_fromArray(
									[current])),
							eF: parent,
							bl: ds
						},
						cs),
					a3: d
				});
		}
	}
};
var $author$project$PageEditor$Internals$DocumentZipper$addNewRight = F2(
	function (nextUid, _v0) {
		var current = _v0.a3;
		var contexts = _v0.bu;
		if (!contexts.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var parent = contexts.a.eF;
			var left = contexts.a.bc;
			var right = contexts.a.bl;
			var cs = contexts.b;
			return $author$project$PageEditor$Internals$DocumentZipper$zipRight(
				{
					bu: A2(
						$elm$core$List$cons,
						{
							bc: left,
							eF: parent,
							bl: A2(
								$elm$core$List$cons,
								$author$project$PageEditor$Internals$DocumentEditorHelpers$emptyCell(nextUid),
								right)
						},
						cs),
					a3: current
				});
		}
	});
var $andrewMacmurray$elm_delay$Delay$Duration = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$core$Process$sleep = _Process_sleep;
var $andrewMacmurray$elm_delay$Delay$after_ = F2(
	function (time, msg) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$always(msg),
			$elm$core$Process$sleep(time));
	});
var $andrewMacmurray$elm_delay$Delay$Minute = 2;
var $andrewMacmurray$elm_delay$Delay$Second = 1;
var $andrewMacmurray$elm_delay$Delay$toMillis = function (_v0) {
	var t = _v0.a;
	var u = _v0.b;
	switch (u) {
		case 0:
			return t;
		case 1:
			return 1000 * t;
		case 2:
			return $andrewMacmurray$elm_delay$Delay$toMillis(
				A2($andrewMacmurray$elm_delay$Delay$Duration, 60 * t, 1));
		default:
			return $andrewMacmurray$elm_delay$Delay$toMillis(
				A2($andrewMacmurray$elm_delay$Delay$Duration, 60 * t, 2));
	}
};
var $andrewMacmurray$elm_delay$Delay$after = F3(
	function (time, unit, msg) {
		return A2(
			$andrewMacmurray$elm_delay$Delay$after_,
			$andrewMacmurray$elm_delay$Delay$toMillis(
				A2($andrewMacmurray$elm_delay$Delay$Duration, time, unit)),
			msg);
	});
var $billstclair$elm_port_funnel$PortFunnel$process = F4(
	function (accessors, _v0, genericMessage, state) {
		var moduleDesc = _v0;
		var _v1 = moduleDesc.e8(genericMessage);
		if (_v1.$ === 1) {
			var err = _v1.a;
			return $elm$core$Result$Err(err);
		} else {
			var message = _v1.a;
			var substate = accessors.gq(state);
			var _v2 = A2(moduleDesc.fA, message, substate);
			var substate2 = _v2.a;
			var response = _v2.b;
			return $elm$core$Result$Ok(
				_Utils_Tuple2(
					A2(accessors.hp, substate2, state),
					response));
		}
	});
var $Janiczek$cmd_extra$Cmd$Extra$withCmds = F2(
	function (cmds, model) {
		return _Utils_Tuple2(
			model,
			$elm$core$Platform$Cmd$batch(cmds));
	});
var $billstclair$elm_port_funnel$PortFunnel$appProcess = F5(
	function (cmdPort, genericMessage, funnel, state, model) {
		var _v0 = A4($billstclair$elm_port_funnel$PortFunnel$process, funnel.fZ, funnel.gQ, genericMessage, state);
		if (_v0.$ === 1) {
			var error = _v0.a;
			return $elm$core$Result$Err(error);
		} else {
			var _v1 = _v0.a;
			var state2 = _v1.a;
			var response = _v1.b;
			var gmToCmdPort = function (gm) {
				return cmdPort(
					$billstclair$elm_port_funnel$PortFunnel$encodeGenericMessage(gm));
			};
			var cmd = A2(funnel.gc, gmToCmdPort, response);
			var _v2 = A3(funnel.gt, response, state2, model);
			var model2 = _v2.a;
			var cmd2 = _v2.b;
			return $elm$core$Result$Ok(
				A2(
					$Janiczek$cmd_extra$Cmd$Extra$withCmds,
					_List_fromArray(
						[cmd, cmd2]),
					model2));
		}
	});
var $author$project$Document$Document$Bulletin = {$: 18};
var $author$project$Document$Document$Calendar = {$: 9};
var $author$project$Document$Document$CalendarSalleBeaune = {$: 11};
var $author$project$Document$Document$CalendarSalleMurol = {$: 10};
var $author$project$Document$Document$CalendarWidget = {$: 8};
var $author$project$Document$Document$Delib = {$: 17};
var $author$project$Document$Document$DronePanorama = {$: 13};
var $author$project$Document$Document$MurolInfo = {$: 16};
var $author$project$Document$Document$NewsBlock = {$: 7};
var $author$project$Document$Document$WeatherWidget = {$: 12};
var $author$project$PageEditor$EditorPlugins$NewDocPlugin$cellContStrToCellContent = function (s) {
	switch (s) {
		case 'NewsBlock':
			return $elm$core$Maybe$Just($author$project$Document$Document$NewsBlock);
		case 'CalendarWidget':
			return $elm$core$Maybe$Just($author$project$Document$Document$CalendarWidget);
		case 'Calendar':
			return $elm$core$Maybe$Just($author$project$Document$Document$Calendar);
		case 'CalendarSalleMurol':
			return $elm$core$Maybe$Just($author$project$Document$Document$CalendarSalleMurol);
		case 'CalendarSalleBeaune':
			return $elm$core$Maybe$Just($author$project$Document$Document$CalendarSalleBeaune);
		case 'WeatherWidget':
			return $elm$core$Maybe$Just($author$project$Document$Document$WeatherWidget);
		case 'DronePanorama':
			return $elm$core$Maybe$Just($author$project$Document$Document$DronePanorama);
		case 'MurolInfos':
			return $elm$core$Maybe$Just($author$project$Document$Document$MurolInfo);
		case 'Delibs':
			return $elm$core$Maybe$Just($author$project$Document$Document$Delib);
		case 'Bulletins':
			return $elm$core$Maybe$Just($author$project$Document$Document$Bulletin);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$clear = $billstclair$elm_localstorage$PortFunnel$InternalTypes$Clear;
var $author$project$Document$Document$CellValue = F3(
	function (cellContent, id, attrs) {
		return {y: attrs, at: cellContent, a: id};
	});
var $author$project$Document$Document$BlockLinks = function (a) {
	return {$: 4, a: a};
};
var $author$project$Document$Document$CustomElement = function (a) {
	return {$: 3, a: a};
};
var $author$project$Document$Document$PictureLink = F2(
	function (url, img) {
		return {jJ: img, d$: url};
	});
var $author$project$Document$Document$BlockLinkMeta = F4(
	function (image, label, targetBlank, url) {
		return {jF: image, O: label, hy: targetBlank, d$: url};
	});
var $author$project$Document$Json$DocumentDecoder$decodeBlockLink = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'url',
	$elm$json$Json$Decode$string,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'targetBlank',
		$elm$json$Json$Decode$bool,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'label',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'image',
				$elm$json$Json$Decode$string,
				$elm$json$Json$Decode$succeed($author$project$Document$Document$BlockLinkMeta)))));
var $author$project$Document$Document$GalleryMeta = F4(
	function (uuid, title, images, hq) {
		return {jB: hq, jI: images, fP: title, fS: uuid};
	});
var $author$project$Document$Document$ImageMeta = F3(
	function (src, caption, size) {
		return {f7: caption, fJ: size, fK: src};
	});
var $author$project$Document$Document$ImgSize = F2(
	function (imgWidth, imgHeight) {
		return {jK: imgHeight, jL: imgWidth};
	});
var $author$project$Document$Json$DocumentDecoder$decodeImageSize = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'imgHeight',
	$elm$json$Json$Decode$int,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'imgWidth',
		$elm$json$Json$Decode$int,
		$elm$json$Json$Decode$succeed($author$project$Document$Document$ImgSize)));
var $author$project$Document$Document$Inline = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$Document$Document$UrlSrc = function (a) {
	return {$: 0, a: a};
};
var $author$project$Document$Json$DocumentDecoder$decodeImgSource = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'UrlSrc',
			$elm$json$Json$Decode$string,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$UrlSrc)),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
			_List_fromArray(
				['Inline', 'contents']),
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
				_List_fromArray(
					['Inline', 'filename']),
				$elm$json$Json$Decode$string,
				$elm$json$Json$Decode$succeed($author$project$Document$Document$Inline)))
		]));
var $author$project$Document$Json$DocumentDecoder$decodeImageMeta = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'size',
	$author$project$Document$Json$DocumentDecoder$decodeImageSize,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'caption',
		$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'src',
			$author$project$Document$Json$DocumentDecoder$decodeImgSource,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$ImageMeta))));
var $author$project$Document$Json$DocumentDecoder$decodeGalleryMeta = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'hq',
	$elm$json$Json$Decode$bool,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'images',
		$elm$json$Json$Decode$list($author$project$Document$Json$DocumentDecoder$decodeImageMeta),
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'title',
			$elm$json$Json$Decode$string,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'uuid',
				$author$project$Document$Json$DocumentDecoder$decodeUUID,
				$elm$json$Json$Decode$succeed($author$project$Document$Document$GalleryMeta)))));
var $author$project$Document$Document$TableMeta = F4(
	function (style, nbrRows, nbrCols, data) {
		return {iU: data, kp: nbrCols, kq: nbrRows, lR: style};
	});
var $author$project$Document$Json$DocumentDecoder$decodeTableMeta = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'data',
	$elm$json$Json$Decode$list(
		A2(
			$elm$json$Json$Decode$map,
			$elm$core$Array$fromList,
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string))),
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'nbrCols',
		$elm$json$Json$Decode$int,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'nbrRows',
			$elm$json$Json$Decode$int,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'style',
				$elm$json$Json$Decode$string,
				$elm$json$Json$Decode$succeed($author$project$Document$Document$TableMeta)))));
var $author$project$Document$Document$VideoMeta = F9(
	function (src, size, frameBorder, suggestions, controls, privacy, title, startAt, hosting) {
		return {iL: controls, jj: frameBorder, jz: hosting, k_: privacy, fJ: size, fK: src, lL: startAt, lU: suggestions, fP: title};
	});
var $author$project$Document$Document$Youtube = 0;
var $author$project$Document$Json$DocumentDecoder$decodeVideoHost = A2(
	$elm$json$Json$Decode$andThen,
	function (str) {
		if (str === 'Youtube') {
			return $elm$json$Json$Decode$succeed(0);
		} else {
			var somethingElse = str;
			return $elm$json$Json$Decode$fail('Unknown VideoHost: ' + somethingElse);
		}
	},
	$elm$json$Json$Decode$string);
var $author$project$Document$Json$DocumentDecoder$decodeVideoSize = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'videoHeight',
	$elm$json$Json$Decode$int,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'videoWidth',
		$elm$json$Json$Decode$int,
		$elm$json$Json$Decode$succeed($author$project$Document$Document$VideoSize)));
var $author$project$Document$Json$DocumentDecoder$decodeVideoMeta = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'hosting',
	$author$project$Document$Json$DocumentDecoder$decodeVideoHost,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'startAt',
		$elm$json$Json$Decode$nullable($elm$json$Json$Decode$int),
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'title',
			$elm$json$Json$Decode$bool,
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'privacy',
				$elm$json$Json$Decode$bool,
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'controls',
					$elm$json$Json$Decode$bool,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'suggestions',
						$elm$json$Json$Decode$bool,
						A3(
							$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
							'frameBorder',
							$elm$json$Json$Decode$bool,
							A3(
								$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
								'size',
								$author$project$Document$Json$DocumentDecoder$decodeVideoSize,
								A3(
									$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
									'src',
									$elm$json$Json$Decode$string,
									$elm$json$Json$Decode$succeed($author$project$Document$Document$VideoMeta))))))))));
var $author$project$Document$Json$DocumentDecoder$decodeCellContent = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Image',
			$author$project$Document$Json$DocumentDecoder$decodeImageMeta,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$Image)),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Video',
			$author$project$Document$Json$DocumentDecoder$decodeVideoMeta,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$Video)),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Table',
			$author$project$Document$Json$DocumentDecoder$decodeTableMeta,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$Table)),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'CustomElement',
			$elm$json$Json$Decode$string,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$CustomElement)),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'BlockLinks',
			$elm$json$Json$Decode$list($author$project$Document$Json$DocumentDecoder$decodeBlockLink),
			$elm$json$Json$Decode$succeed($author$project$Document$Document$BlockLinks)),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Fiches',
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string),
			$elm$json$Json$Decode$succeed($author$project$Document$Document$Fiches)),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'TextBlock',
			$elm$json$Json$Decode$list($author$project$Document$Json$DocumentDecoder$decodeTextBlockElement),
			$elm$json$Json$Decode$succeed($author$project$Document$Document$TextBlock)),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'PictureLinks',
			$elm$json$Json$Decode$list(
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
					'img',
					$author$project$Document$Json$DocumentDecoder$decodeImageMeta,
					A3(
						$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
						'url',
						$elm$json$Json$Decode$string,
						$elm$json$Json$Decode$succeed($author$project$Document$Document$PictureLink)))),
			$elm$json$Json$Decode$succeed($author$project$Document$Document$PictureLinks)),
			A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'Gallery',
			$author$project$Document$Json$DocumentDecoder$decodeGalleryMeta,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$Gallery)),
			A2(
			$elm$json$Json$Decode$andThen,
			function (str) {
				switch (str) {
					case 'EmptyCell':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$EmptyCell);
					case 'NewsBlock':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$NewsBlock);
					case 'Calendar':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$Calendar);
					case 'CalendarSalleMurol':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$CalendarSalleMurol);
					case 'CalendarSalleBeaune':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$CalendarSalleBeaune);
					case 'CalendarWidget':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$CalendarWidget);
					case 'DronePanorama':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$DronePanorama);
					case 'WeatherWidget':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$WeatherWidget);
					case 'MurolInfo':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$MurolInfo);
					case 'Delib':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$Delib);
					case 'Bulletin':
						return $elm$json$Json$Decode$succeed($author$project$Document$Document$Bulletin);
					default:
						var somethingElse = str;
						return $elm$json$Json$Decode$fail('Unknown CellContent: ' + somethingElse);
				}
			},
			$elm$json$Json$Decode$string)
		]));
var $author$project$Document$Document$Id = F4(
	function (uid, docStyleId, htmlId, classes) {
		return {br: classes, bx: docStyleId, bE: htmlId, cW: uid};
	});
var $author$project$Document$Json$DocumentDecoder$decodeId = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'classes',
	A2(
		$elm$json$Json$Decode$map,
		$elm$core$Set$fromList,
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'htmlId',
		$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'docStyleId',
			$elm$json$Json$Decode$nullable($elm$json$Json$Decode$string),
			A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'uid',
				$elm$json$Json$Decode$int,
				$elm$json$Json$Decode$succeed($author$project$Document$Document$Id)))));
var $author$project$Document$Json$DocumentDecoder$decodeCellValue = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'attrs',
	$author$project$Document$Json$DocumentDecoder$decodeDocAttributes,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'id',
		$author$project$Document$Json$DocumentDecoder$decodeId,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'cellContent',
			$author$project$Document$Json$DocumentDecoder$decodeCellContent,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$CellValue))));
var $author$project$Document$Document$ContainerValue = F3(
	function (containerLabel, id, attrs) {
		return {y: attrs, bs: containerLabel, a: id};
	});
var $author$project$Document$Document$DocRow = 1;
var $author$project$Document$Document$ResponsiveBloc = 3;
var $author$project$Document$Document$TextColumn = 2;
var $author$project$Document$Json$DocumentDecoder$decodeContainerLabel = A2(
	$elm$json$Json$Decode$andThen,
	function (str) {
		switch (str) {
			case 'DocColumn':
				return $elm$json$Json$Decode$succeed(0);
			case 'DocRow':
				return $elm$json$Json$Decode$succeed(1);
			case 'TextColumn':
				return $elm$json$Json$Decode$succeed(2);
			case 'ResponsiveBloc':
				return $elm$json$Json$Decode$succeed(3);
			default:
				var somethingElse = str;
				return $elm$json$Json$Decode$fail('Unknown ContainerLabel: ' + somethingElse);
		}
	},
	$elm$json$Json$Decode$string);
var $author$project$Document$Json$DocumentDecoder$decodeContainerValue = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'attrs',
	$author$project$Document$Json$DocumentDecoder$decodeDocAttributes,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'id',
		$author$project$Document$Json$DocumentDecoder$decodeId,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'containerLabel',
			$author$project$Document$Json$DocumentDecoder$decodeContainerLabel,
			$elm$json$Json$Decode$succeed($author$project$Document$Document$ContainerValue))));
function $author$project$Document$Json$DocumentDecoder$cyclic$decodeDocument() {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
				_List_fromArray(
					['Container', 'children']),
				$elm$json$Json$Decode$list(
					$elm$json$Json$Decode$lazy(
						function (_v0) {
							return $author$project$Document$Json$DocumentDecoder$cyclic$decodeDocument();
						})),
				A3(
					$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$requiredAt,
					_List_fromArray(
						['Container', 'ContainerValue']),
					$author$project$Document$Json$DocumentDecoder$decodeContainerValue,
					$elm$json$Json$Decode$succeed($author$project$Document$Document$Container))),
				A3(
				$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
				'Cell',
				$author$project$Document$Json$DocumentDecoder$decodeCellValue,
				$elm$json$Json$Decode$succeed($author$project$Document$Document$Cell))
			]));
}
var $author$project$Document$Json$DocumentDecoder$decodeDocument = $author$project$Document$Json$DocumentDecoder$cyclic$decodeDocument();
$author$project$Document$Json$DocumentDecoder$cyclic$decodeDocument = function () {
	return $author$project$Document$Json$DocumentDecoder$decodeDocument;
};
var $billstclair$elm_port_funnel$PortFunnel$decodeValue = F2(
	function (decoder, value) {
		var _v0 = A2($elm$json$Json$Decode$decodeValue, decoder, value);
		if (!_v0.$) {
			var res = _v0.a;
			return $elm$core$Result$Ok(res);
		} else {
			var err = _v0.a;
			return $elm$core$Result$Err(
				$elm$json$Json$Decode$errorToString(err));
		}
	});
var $billstclair$elm_port_funnel$PortFunnel$genericMessageDecoder = A4(
	$elm$json$Json$Decode$map3,
	$billstclair$elm_port_funnel$PortFunnel$GenericMessage,
	A2($elm$json$Json$Decode$field, 'module', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'tag', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'args', $elm$json$Json$Decode$value));
var $billstclair$elm_port_funnel$PortFunnel$decodeGenericMessage = function (value) {
	return A2($billstclair$elm_port_funnel$PortFunnel$decodeValue, $billstclair$elm_port_funnel$PortFunnel$genericMessageDecoder, value);
};
var $author$project$Document$Json$DocumentSerializer$encodeBlockLink = function (_v0) {
	var image = _v0.jF;
	var label = _v0.O;
	var targetBlank = _v0.hy;
	var url = _v0.d$;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'image',
				$elm$json$Json$Encode$string(image)),
				_Utils_Tuple2(
				'label',
				$elm$json$Json$Encode$string(label)),
				_Utils_Tuple2(
				'targetBlank',
				$elm$json$Json$Encode$bool(targetBlank)),
				_Utils_Tuple2(
				'url',
				$elm$json$Json$Encode$string(url))
			]));
};
var $author$project$Document$Json$DocumentSerializer$encodeImageSize = function (_v0) {
	var imgWidth = _v0.jL;
	var imgHeight = _v0.jK;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'imgWidth',
				$elm$json$Json$Encode$int(imgWidth)),
				_Utils_Tuple2(
				'imgHeight',
				$elm$json$Json$Encode$int(imgHeight))
			]));
};
var $author$project$Document$Json$DocumentSerializer$encodeImgSource = function (imgSrc) {
	if (!imgSrc.$) {
		var s = imgSrc.a;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'UrlSrc',
					$elm$json$Json$Encode$string(s))
				]));
	} else {
		var filename = imgSrc.a;
		var contents = imgSrc.b;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Inline',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'filename',
								$elm$json$Json$Encode$string(filename)),
								_Utils_Tuple2(
								'contents',
								$elm$json$Json$Encode$string(contents))
							])))
				]));
	}
};
var $author$project$Document$Json$DocumentSerializer$encodeImageMeta = function (_v0) {
	var src = _v0.fK;
	var caption = _v0.f7;
	var size = _v0.fJ;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'src',
				$author$project$Document$Json$DocumentSerializer$encodeImgSource(src)),
				_Utils_Tuple2(
				'caption',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2($elm$core$Maybe$map, $elm$json$Json$Encode$string, caption))),
				_Utils_Tuple2(
				'size',
				$author$project$Document$Json$DocumentSerializer$encodeImageSize(size))
			]));
};
var $author$project$Document$Json$DocumentSerializer$encodePictureLink = function (_v0) {
	var url = _v0.d$;
	var img = _v0.jJ;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'url',
				$elm$json$Json$Encode$string(url)),
				_Utils_Tuple2(
				'img',
				$author$project$Document$Json$DocumentSerializer$encodeImageMeta(img))
			]));
};
var $author$project$Document$Json$DocumentSerializer$encodeTableMeta = function (_v0) {
	var style = _v0.lR;
	var nbrRows = _v0.kq;
	var nbrCols = _v0.kp;
	var data = _v0.iU;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'style',
				$elm$json$Json$Encode$string(style)),
				_Utils_Tuple2(
				'nbrRows',
				$elm$json$Json$Encode$int(nbrRows)),
				_Utils_Tuple2(
				'nbrCols',
				$elm$json$Json$Encode$int(nbrCols)),
				_Utils_Tuple2(
				'data',
				A2(
					$elm$json$Json$Encode$list,
					$elm$core$Basics$identity,
					A2(
						$elm$core$List$map,
						$elm$json$Json$Encode$list($elm$json$Json$Encode$string),
						A2($elm$core$List$map, $elm$core$Array$toList, data))))
			]));
};
var $author$project$Document$Json$DocumentSerializer$encodeVideoHost = function (host) {
	return $elm$json$Json$Encode$string('Youtube');
};
var $author$project$Document$Json$DocumentSerializer$encodeVideoSize = function (_v0) {
	var videoWidth = _v0.mo;
	var videoHeight = _v0.mn;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'videoWidth',
				$elm$json$Json$Encode$int(videoWidth)),
				_Utils_Tuple2(
				'videoHeight',
				$elm$json$Json$Encode$int(videoHeight))
			]));
};
var $author$project$Document$Json$DocumentSerializer$encodeVideoMeta = function (_v0) {
	var src = _v0.fK;
	var size = _v0.fJ;
	var frameBorder = _v0.jj;
	var suggestions = _v0.lU;
	var controls = _v0.iL;
	var privacy = _v0.k_;
	var title = _v0.fP;
	var startAt = _v0.lL;
	var hosting = _v0.jz;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'src',
				$elm$json$Json$Encode$string(src)),
				_Utils_Tuple2(
				'size',
				$author$project$Document$Json$DocumentSerializer$encodeVideoSize(size)),
				_Utils_Tuple2(
				'frameBorder',
				$elm$json$Json$Encode$bool(frameBorder)),
				_Utils_Tuple2(
				'suggestions',
				$elm$json$Json$Encode$bool(suggestions)),
				_Utils_Tuple2(
				'controls',
				$elm$json$Json$Encode$bool(controls)),
				_Utils_Tuple2(
				'privacy',
				$elm$json$Json$Encode$bool(privacy)),
				_Utils_Tuple2(
				'title',
				$elm$json$Json$Encode$bool(title)),
				_Utils_Tuple2(
				'startAt',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2($elm$core$Maybe$map, $elm$json$Json$Encode$int, startAt))),
				_Utils_Tuple2(
				'hosting',
				$author$project$Document$Json$DocumentSerializer$encodeVideoHost(hosting))
			]));
};
var $author$project$Document$Json$DocumentSerializer$encodeCellContent = function (cellContent) {
	switch (cellContent.$) {
		case 0:
			var im = cellContent.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Image',
						$author$project$Document$Json$DocumentSerializer$encodeImageMeta(im))
					]));
		case 1:
			var vm = cellContent.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Video',
						$author$project$Document$Json$DocumentSerializer$encodeVideoMeta(vm))
					]));
		case 2:
			var tm = cellContent.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Table',
						$author$project$Document$Json$DocumentSerializer$encodeTableMeta(tm))
					]));
		case 3:
			var s = cellContent.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'CustomElement',
						$elm$json$Json$Encode$string(s))
					]));
		case 4:
			var blLinks = cellContent.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'BlockLinks',
						A2($elm$json$Json$Encode$list, $author$project$Document$Json$DocumentSerializer$encodeBlockLink, blLinks))
					]));
		case 5:
			var fiches = cellContent.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Fiches',
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, fiches))
					]));
		case 6:
			var tbElems = cellContent.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'TextBlock',
						A2($elm$json$Json$Encode$list, $author$project$Document$Json$DocumentSerializer$encodeTextBlockElement, tbElems))
					]));
		case 14:
			var picLinks = cellContent.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'PictureLinks',
						A2($elm$json$Json$Encode$list, $author$project$Document$Json$DocumentSerializer$encodePictureLink, picLinks))
					]));
		case 15:
			var gallery = cellContent.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'Gallery',
						$elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'uuid',
									$elm$json$Json$Encode$string(
										$TSFoster$elm_uuid$UUID$toString(gallery.fS))),
									_Utils_Tuple2(
									'title',
									$elm$json$Json$Encode$string(gallery.fP)),
									_Utils_Tuple2(
									'images',
									A2($elm$json$Json$Encode$list, $author$project$Document$Json$DocumentSerializer$encodeImageMeta, gallery.jI)),
									_Utils_Tuple2(
									'hq',
									$elm$json$Json$Encode$bool(gallery.jB))
								])))
					]));
		case 7:
			return $elm$json$Json$Encode$string('NewsBlock');
		case 8:
			return $elm$json$Json$Encode$string('CalendarWidget');
		case 10:
			return $elm$json$Json$Encode$string('CalendarSalleMurol');
		case 11:
			return $elm$json$Json$Encode$string('CalendarSalleBeaune');
		case 9:
			return $elm$json$Json$Encode$string('Calendar');
		case 12:
			return $elm$json$Json$Encode$string('WeatherWidget');
		case 13:
			return $elm$json$Json$Encode$string('DronePanorama');
		case 16:
			return $elm$json$Json$Encode$string('MurolInfo');
		case 17:
			return $elm$json$Json$Encode$string('Delib');
		case 18:
			return $elm$json$Json$Encode$string('Bulletin');
		default:
			return $elm$json$Json$Encode$string('EmptyCell');
	}
};
var $elm$core$Set$foldl = F3(
	function (func, initialState, _v0) {
		var dict = _v0;
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (key, _v1, state) {
					return A2(func, key, state);
				}),
			initialState,
			dict);
	});
var $elm$json$Json$Encode$set = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$Set$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(0),
				entries));
	});
var $author$project$Document$Json$DocumentSerializer$encodeId = function (_v0) {
	var uid = _v0.cW;
	var docStyleId = _v0.bx;
	var htmlId = _v0.bE;
	var classes = _v0.br;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'uid',
				$elm$json$Json$Encode$int(uid)),
				_Utils_Tuple2(
				'docStyleId',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2($elm$core$Maybe$map, $elm$json$Json$Encode$string, docStyleId))),
				_Utils_Tuple2(
				'htmlId',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2($elm$core$Maybe$map, $elm$json$Json$Encode$string, htmlId))),
				_Utils_Tuple2(
				'classes',
				A2($elm$json$Json$Encode$set, $elm$json$Json$Encode$string, classes))
			]));
};
var $author$project$Document$Json$DocumentSerializer$encodeCellValue = function (_v0) {
	var cellContent = _v0.at;
	var id = _v0.a;
	var attrs = _v0.y;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'cellContent',
				$author$project$Document$Json$DocumentSerializer$encodeCellContent(cellContent)),
				_Utils_Tuple2(
				'id',
				$author$project$Document$Json$DocumentSerializer$encodeId(id)),
				_Utils_Tuple2(
				'attrs',
				$author$project$Document$Json$DocumentSerializer$encodeDocAttributes(attrs))
			]));
};
var $author$project$Document$Json$DocumentSerializer$encodeContainerLabel = function (cLabel) {
	switch (cLabel) {
		case 0:
			return $elm$json$Json$Encode$string('DocColumn');
		case 1:
			return $elm$json$Json$Encode$string('DocRow');
		case 2:
			return $elm$json$Json$Encode$string('TextColumn');
		default:
			return $elm$json$Json$Encode$string('ResponsiveBloc');
	}
};
var $author$project$Document$Json$DocumentSerializer$encodeContainerValue = function (_v0) {
	var containerLabel = _v0.bs;
	var id = _v0.a;
	var attrs = _v0.y;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'containerLabel',
				$author$project$Document$Json$DocumentSerializer$encodeContainerLabel(containerLabel)),
				_Utils_Tuple2(
				'id',
				$author$project$Document$Json$DocumentSerializer$encodeId(id)),
				_Utils_Tuple2(
				'attrs',
				$author$project$Document$Json$DocumentSerializer$encodeDocAttributes(attrs))
			]));
};
var $author$project$Document$Json$DocumentSerializer$encodeDocument = function (doc) {
	if (!doc.$) {
		var cv = doc.a;
		var docs = doc.b;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Container',
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'ContainerValue',
								$author$project$Document$Json$DocumentSerializer$encodeContainerValue(cv)),
								_Utils_Tuple2(
								'children',
								A2($elm$json$Json$Encode$list, $author$project$Document$Json$DocumentSerializer$encodeDocument, docs))
							])))
				]));
	} else {
		var cv = doc.a;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'Cell',
					$author$project$Document$Json$DocumentSerializer$encodeCellValue(cv))
				]));
	}
};
var $elm$file$File$Select$file = F2(
	function (mimes, toMsg) {
		return A2(
			$elm$core$Task$perform,
			toMsg,
			_File_uploadOne(mimes));
	});
var $author$project$PageTreeEditor$PageTreeEditor$fileIoSelectedPageInfo = function (model) {
	var _v0 = model.ao;
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var _v1 = _v0.a;
		var pageInfo = _v1.a;
		var xs = _v1.b;
		return $elm$core$Maybe$Just(pageInfo);
	}
};
var $emilianobovetti$elm_yajson$Yajson$Array = function (a) {
	return {$: 1, a: a};
};
var $emilianobovetti$elm_yajson$Yajson$Bool = function (a) {
	return {$: 4, a: a};
};
var $emilianobovetti$elm_yajson$Yajson$Null = {$: 5};
var $emilianobovetti$elm_yajson$Yajson$Number = function (a) {
	return {$: 3, a: a};
};
var $emilianobovetti$elm_yajson$Yajson$Object = function (a) {
	return {$: 0, a: a};
};
var $emilianobovetti$elm_yajson$Yajson$String = function (a) {
	return {$: 2, a: a};
};
function $emilianobovetti$elm_yajson$Yajson$cyclic$decoder() {
	var objectDecoder = A2(
		$elm$json$Json$Decode$map,
		$elm$core$List$reverse,
		$elm$json$Json$Decode$keyValuePairs(
			$elm$json$Json$Decode$lazy(
				function (_v1) {
					return $emilianobovetti$elm_yajson$Yajson$cyclic$decoder();
				})));
	var arrayDecoder = $elm$json$Json$Decode$list(
		$elm$json$Json$Decode$lazy(
			function (_v0) {
				return $emilianobovetti$elm_yajson$Yajson$cyclic$decoder();
			}));
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$map, $emilianobovetti$elm_yajson$Yajson$Object, objectDecoder),
				A2($elm$json$Json$Decode$map, $emilianobovetti$elm_yajson$Yajson$Array, arrayDecoder),
				A2($elm$json$Json$Decode$map, $emilianobovetti$elm_yajson$Yajson$String, $elm$json$Json$Decode$string),
				A2($elm$json$Json$Decode$map, $emilianobovetti$elm_yajson$Yajson$Number, $elm$json$Json$Decode$float),
				A2($elm$json$Json$Decode$map, $emilianobovetti$elm_yajson$Yajson$Bool, $elm$json$Json$Decode$bool),
				$elm$json$Json$Decode$null($emilianobovetti$elm_yajson$Yajson$Null)
			]));
}
var $emilianobovetti$elm_yajson$Yajson$decoder = $emilianobovetti$elm_yajson$Yajson$cyclic$decoder();
$emilianobovetti$elm_yajson$Yajson$cyclic$decoder = function () {
	return $emilianobovetti$elm_yajson$Yajson$decoder;
};
var $emilianobovetti$elm_yajson$Yajson$fromValue = function (val) {
	return A2($elm$json$Json$Decode$decodeValue, $emilianobovetti$elm_yajson$Yajson$decoder, val);
};
var $billstclair$elm_port_funnel$PortFunnel$FunnelSpec = F4(
	function (accessors, moduleDesc, commander, handler) {
		return {fZ: accessors, gc: commander, gt: handler, gQ: moduleDesc};
	});
var $author$project$PageEditor$PageEditor$StorageFunnel = $elm$core$Basics$identity;
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$commander = F2(
	function (_v0, _v1) {
		return $elm$core$Platform$Cmd$none;
	});
var $billstclair$elm_port_funnel$PortFunnel$StateAccessors = F2(
	function (get, set) {
		return {gq: get, hp: set};
	});
var $author$project$PageEditor$PageEditor$storageAccessors = A2(
	$billstclair$elm_port_funnel$PortFunnel$StateAccessors,
	function ($) {
		return $.bp;
	},
	F2(
		function (substate, state) {
			return _Utils_update(
				state,
				{bp: substate});
		}));
var $author$project$PageEditor$PageEditor$storageHandler = F3(
	function (response, state, mdl) {
		var model = _Utils_update(
			mdl,
			{bC: state});
		switch (response.$) {
			case 1:
				var key = response.a.jX;
				var value = response.a.hG;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ep: key, bd: value}),
					$elm$core$Platform$Cmd$none);
			case 2:
				var keys = response.a.jY;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{j7: keys}),
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$PageEditor$PageEditor$funnels = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			$billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleName,
			A4($billstclair$elm_port_funnel$PortFunnel$FunnelSpec, $author$project$PageEditor$PageEditor$storageAccessors, $billstclair$elm_localstorage$PortFunnel$LocalStorage$moduleDesc, $billstclair$elm_localstorage$PortFunnel$LocalStorage$commander, $author$project$PageEditor$PageEditor$storageHandler))
		]));
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$get = $billstclair$elm_localstorage$PortFunnel$InternalTypes$Get($elm$core$Maybe$Nothing);
var $author$project$Document$Document$getAttrs = function (doc) {
	if (doc.$ === 1) {
		var cellContent = doc.a.at;
		var id = doc.a.a;
		var attrs = doc.a.y;
		return attrs;
	} else {
		var containerLabel = doc.a.bs;
		var id = doc.a.a;
		var attrs = doc.a.y;
		return attrs;
	}
};
var $author$project$PageTreeEditor$PageTreeEditor$getFileIoPath = function (model) {
	var _v0 = model.ao;
	if (!_v0.$) {
		var _v1 = _v0.a;
		var path = _v1.a.K;
		return path;
	} else {
		return _List_Nil;
	}
};
var $author$project$Document$Document$getHtmlId = function (doc) {
	if (doc.$ === 1) {
		var cv = doc.a;
		return cv.a.bE;
	} else {
		var cv = doc.a;
		return cv.a.bE;
	}
};
var $author$project$Document$Document$getId = function (doc) {
	if (doc.$ === 1) {
		var cellContent = doc.a.at;
		var id = doc.a.a;
		var attrs = doc.a.y;
		return id;
	} else {
		var containerLabel = doc.a.bs;
		var id = doc.a.a;
		var attrs = doc.a.y;
		return id;
	}
};
var $author$project$Document$Document$hasUid = F2(
	function (id, document) {
		if (!document.$) {
			var nv = document.a;
			return _Utils_eq(id, nv.a.cW);
		} else {
			var lv = document.a;
			return _Utils_eq(id, lv.a.cW);
		}
	});
var $author$project$PageEditor$Internals$DocumentEditorHelpers$newContainer = F2(
	function (nextUid, containerLabel) {
		return A2(
			$author$project$Document$Document$Container,
			{
				y: _List_Nil,
				bs: containerLabel,
				a: {
					br: $elm$core$Set$empty,
					bx: $elm$core$Maybe$Nothing,
					bE: $elm$core$Maybe$Just(
						'defaultHtmlId' + $elm$core$String$fromInt(nextUid)),
					cW: nextUid
				}
			},
			_List_fromArray(
				[
					$author$project$PageEditor$Internals$DocumentEditorHelpers$emptyCell(nextUid + 1)
				]));
	});
var $author$project$PageEditor$EditorPlugins$ImagePlugin$open = F3(
	function (config, mbInput, externalMsg) {
		return _Utils_Tuple2(
			{
				bQ: A2(
					$elm$core$Maybe$withDefault,
					1,
					A2(
						$elm$core$Maybe$map,
						A2($elm$core$Basics$composeL, $author$project$PageEditor$Internals$DocumentEditorHelpers$findAlignment, $elm$core$Tuple$second),
						mbInput)),
				bY: externalMsg,
				en: A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2($elm$core$Maybe$map, $elm$core$Tuple$second, mbInput)),
				b6: A2(
					$elm$core$Maybe$andThen,
					A2(
						$elm$core$Basics$composeL,
						function ($) {
							return $.f7;
						},
						$elm$core$Tuple$first),
					mbInput),
				b7: A2($elm$core$Maybe$map, $elm$core$Tuple$first, mbInput),
				h: 0
			},
			$elm$core$Platform$Cmd$none);
	});
var $author$project$PageEditor$PageEditor$openNewPlugin = F2(
	function (config, model) {
		var _v0 = model.b;
		_v0$8:
		while (true) {
			if (!_v0.$) {
				switch (_v0.a.$) {
					case 2:
						var _v1 = _v0.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									cn: A2(
										$author$project$PageEditor$EditorPlugins$TablePlugin$init,
										$elm$core$Maybe$Nothing,
										A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$TablePluginMsg))
								}),
							$elm$core$Platform$Cmd$none);
					case 4:
						var _v2 = _v0.a;
						var _v3 = A3(
							$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$init,
							_List_Nil,
							$elm$core$Maybe$Nothing,
							A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$TextBlockPluginMsg));
						var newTextBlockPlugin = _v3.a;
						var textBlockPluginCmds = _v3.b;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{co: newTextBlockPlugin}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[textBlockPluginCmds])));
					case 0:
						var _v4 = _v0.a;
						var _v5 = A3(
							$author$project$PageEditor$EditorPlugins$ImagePlugin$open,
							config,
							$elm$core$Maybe$Nothing,
							A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$ImagePluginMsg));
						var newImagePlugin = _v5.a;
						var imagePluginCmds = _v5.b;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{b2: newImagePlugin}),
							imagePluginCmds);
					case 1:
						var _v6 = _v0.a;
						var newVideoPlugin = A2(
							$author$project$PageEditor$EditorPlugins$VideoPlugin$init,
							$elm$core$Maybe$Nothing,
							A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$VideoPluginMsg));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{cq: newVideoPlugin}),
							$elm$core$Platform$Cmd$none);
					case 7:
						var _v7 = _v0.a;
						var newBlockLinksPlugin = A2(
							$author$project$PageEditor$EditorPlugins$BlockLinksPlugin$init,
							$elm$core$Maybe$Nothing,
							A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$BlockLinksPluginMsg));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{bS: newBlockLinksPlugin}),
							$elm$core$Platform$Cmd$none);
					case 10:
						var _v8 = _v0.a;
						var newFichesPlugin = A2(
							$author$project$PageEditor$EditorPlugins$FichesPlugin$init,
							_List_Nil,
							A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$FichesPluginMsg));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{bZ: newFichesPlugin}),
							$elm$core$Platform$Cmd$none);
					case 11:
						var _v9 = _v0.a;
						var pictureLinksPlugin = A2(
							$author$project$PageEditor$EditorPlugins$PictureLinksPlugin$init,
							_List_Nil,
							A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$PictureLinksPluginMsg));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{cf: pictureLinksPlugin}),
							$elm$core$Platform$Cmd$none);
					case 12:
						var _v10 = _v0.a;
						var _v11 = A2(
							$author$project$PageEditor$EditorPlugins$GalleryPlugin$init,
							$elm$core$Maybe$Nothing,
							A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$GalleryPluginMsg));
						var galleryPlugin = _v11.a;
						var newCmds = _v11.b;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{bD: galleryPlugin}),
							newCmds);
					default:
						break _v0$8;
				}
			} else {
				break _v0$8;
			}
		}
		return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
	});
var $author$project$PageEditor$Internals$DocumentEditorHelpers$BlockLinksPlugin = {$: 7};
var $author$project$PageEditor$Internals$DocumentEditorHelpers$FichesPlugin = {$: 10};
var $author$project$PageEditor$Internals$DocumentEditorHelpers$GalleryPlugin = {$: 12};
var $author$project$PageEditor$Internals$DocumentEditorHelpers$ImagePlugin = {$: 0};
var $author$project$PageEditor$Internals$DocumentEditorHelpers$NewDocPlugin = {$: 5};
var $author$project$PageEditor$Internals$DocumentEditorHelpers$PictureLinksPlugin = {$: 11};
var $author$project$PageEditor$Internals$DocumentEditorHelpers$TablePlugin = {$: 2};
var $author$project$PageEditor$Internals$DocumentEditorHelpers$TextBlockPlugin = {$: 4};
var $author$project$PageEditor$Internals$DocumentEditorHelpers$VideoPlugin = {$: 1};
var $author$project$PageEditor$PageEditor$openPlugin = F2(
	function (config, model) {
		var _v0 = $author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2);
		if (_v0.$ === 1) {
			var cellContent = _v0.a.at;
			var id = _v0.a.a;
			var attrs = _v0.a.y;
			switch (cellContent.$) {
				case 2:
					var tm = cellContent.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								b: $elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$TablePlugin),
								cn: A2(
									$author$project$PageEditor$EditorPlugins$TablePlugin$init,
									$elm$core$Maybe$Just(tm),
									A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$TablePluginMsg))
							}),
						$elm$core$Platform$Cmd$none);
				case 6:
					var tbElems = cellContent.a;
					var _v2 = A3(
						$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$init,
						attrs,
						$elm$core$Maybe$Just(tbElems),
						A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$TextBlockPluginMsg));
					var newTextBlockPlugin = _v2.a;
					var textBlockPluginCmds = _v2.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								b: $elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$TextBlockPlugin),
								co: newTextBlockPlugin
							}),
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[textBlockPluginCmds])));
				case 19:
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								b: $elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$NewDocPlugin)
							}),
						$elm$core$Platform$Cmd$none);
				case 0:
					var imgMeta = cellContent.a;
					var _v3 = A3(
						$author$project$PageEditor$EditorPlugins$ImagePlugin$open,
						config,
						$elm$core$Maybe$Just(
							_Utils_Tuple2(imgMeta, attrs)),
						A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$ImagePluginMsg));
					var newImagePlugin = _v3.a;
					var imagePluginCmds = _v3.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								b: $elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$ImagePlugin),
								b2: newImagePlugin
							}),
						imagePluginCmds);
				case 1:
					var videoMeta = cellContent.a;
					var newVideoPlugin = A2(
						$author$project$PageEditor$EditorPlugins$VideoPlugin$init,
						$elm$core$Maybe$Just(
							_Utils_Tuple2(videoMeta, attrs)),
						A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$VideoPluginMsg));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								b: $elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$VideoPlugin),
								cq: newVideoPlugin
							}),
						$elm$core$Platform$Cmd$none);
				case 4:
					var blocks = cellContent.a;
					var newBlockLinksPlugin = A2(
						$author$project$PageEditor$EditorPlugins$BlockLinksPlugin$init,
						$elm$core$Maybe$Just(blocks),
						A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$BlockLinksPluginMsg));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								bS: newBlockLinksPlugin,
								b: $elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$BlockLinksPlugin)
							}),
						$elm$core$Platform$Cmd$none);
				case 5:
					var fichesId = cellContent.a;
					var newFichesPlugin = A2(
						$author$project$PageEditor$EditorPlugins$FichesPlugin$init,
						fichesId,
						A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$FichesPluginMsg));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								b: $elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$FichesPlugin),
								bZ: newFichesPlugin
							}),
						$elm$core$Platform$Cmd$none);
				case 14:
					var picLinks = cellContent.a;
					var newPicLinks = A2(
						$author$project$PageEditor$EditorPlugins$PictureLinksPlugin$init,
						picLinks,
						A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$PictureLinksPluginMsg));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								b: $elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$PictureLinksPlugin),
								cf: newPicLinks
							}),
						$elm$core$Platform$Cmd$none);
				case 15:
					var galleryMeta = cellContent.a;
					var _v4 = A2(
						$author$project$PageEditor$EditorPlugins$GalleryPlugin$init,
						$elm$core$Maybe$Just(galleryMeta),
						A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$GalleryPluginMsg));
					var newGallery = _v4.a;
					var newCmds = _v4.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								b: $elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$GalleryPlugin),
								bD: newGallery
							}),
						newCmds);
				default:
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			}
		} else {
			return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $emilianobovetti$elm_yajson$Yajson$Stringify$Level = function (a) {
	return {$: 1, a: a};
};
var $emilianobovetti$elm_yajson$Yajson$Stringify$None = {$: 0};
var $emilianobovetti$elm_yajson$Yajson$Stringify$append = F2(
	function (suffix, str) {
		return _Utils_ap(str, suffix);
	});
var $emilianobovetti$elm_yajson$Yajson$Stringify$beginArray = function (ind) {
	if (!ind.$) {
		return '[';
	} else {
		return '[ ';
	}
};
var $emilianobovetti$elm_yajson$Yajson$Stringify$beginObject = function (ind) {
	if (!ind.$) {
		return '{';
	} else {
		return '{ ';
	}
};
var $elm$core$String$fromFloat = _String_fromNumber;
var $emilianobovetti$elm_yajson$Yajson$Stringify$indent = F2(
	function (ind, str) {
		if (!ind.$) {
			return str;
		} else {
			if (!ind.a) {
				return '\n' + str;
			} else {
				var lvl = ind.a;
				return '\n' + (A2($elm$core$String$repeat, lvl, '    ') + str);
			}
		}
	});
var $emilianobovetti$elm_yajson$Yajson$Stringify$nameSeparator = function (ind) {
	if (!ind.$) {
		return ':';
	} else {
		return ': ';
	}
};
var $emilianobovetti$elm_yajson$Yajson$Stringify$unescape = F2(
	function (chr, acc) {
		switch (chr) {
			case '\"':
				return '\\\"' + acc;
			case '\\':
				return '\\\\' + acc;
			case '\n':
				return '\\n' + acc;
			case '\t':
				return '\\t' + acc;
			case '\u0008':
				return '\\b' + acc;
			case '\u000C':
				return '\\f' + acc;
			case '\u000D':
				return '\\r' + acc;
			default:
				return _Utils_ap(
					$elm$core$String$fromChar(chr),
					acc);
		}
	});
var $emilianobovetti$elm_yajson$Yajson$Stringify$stringToSource = function (str) {
	return '\"' + (A3($elm$core$String$foldr, $emilianobovetti$elm_yajson$Yajson$Stringify$unescape, '', str) + '\"');
};
var $emilianobovetti$elm_yajson$Yajson$Stringify$valueSeparator = function (ind) {
	if (!ind.$) {
		return ',';
	} else {
		return A2($emilianobovetti$elm_yajson$Yajson$Stringify$indent, ind, ', ');
	}
};
var $emilianobovetti$elm_yajson$Yajson$Stringify$foldArray = F3(
	function (ind, val, acc) {
		if (acc === '') {
			return A2(
				$emilianobovetti$elm_yajson$Yajson$Stringify$append,
				A2($emilianobovetti$elm_yajson$Yajson$Stringify$nextLevel, ind, val),
				$emilianobovetti$elm_yajson$Yajson$Stringify$beginArray(ind));
		} else {
			return A2(
				$emilianobovetti$elm_yajson$Yajson$Stringify$append,
				A2($emilianobovetti$elm_yajson$Yajson$Stringify$nextLevel, ind, val),
				A2(
					$emilianobovetti$elm_yajson$Yajson$Stringify$append,
					$emilianobovetti$elm_yajson$Yajson$Stringify$valueSeparator(ind),
					acc));
		}
	});
var $emilianobovetti$elm_yajson$Yajson$Stringify$foldObject = F3(
	function (ind, _v2, acc) {
		var name = _v2.a;
		var val = _v2.b;
		if (acc === '') {
			return A2(
				$emilianobovetti$elm_yajson$Yajson$Stringify$append,
				A2($emilianobovetti$elm_yajson$Yajson$Stringify$nextLevel, ind, val),
				A2(
					$emilianobovetti$elm_yajson$Yajson$Stringify$append,
					$emilianobovetti$elm_yajson$Yajson$Stringify$nameSeparator(ind),
					A2(
						$emilianobovetti$elm_yajson$Yajson$Stringify$append,
						$emilianobovetti$elm_yajson$Yajson$Stringify$stringToSource(name),
						$emilianobovetti$elm_yajson$Yajson$Stringify$beginObject(ind))));
		} else {
			return A2(
				$emilianobovetti$elm_yajson$Yajson$Stringify$append,
				A2($emilianobovetti$elm_yajson$Yajson$Stringify$nextLevel, ind, val),
				A2(
					$emilianobovetti$elm_yajson$Yajson$Stringify$append,
					$emilianobovetti$elm_yajson$Yajson$Stringify$nameSeparator(ind),
					A2(
						$emilianobovetti$elm_yajson$Yajson$Stringify$append,
						$emilianobovetti$elm_yajson$Yajson$Stringify$stringToSource(name),
						A2(
							$emilianobovetti$elm_yajson$Yajson$Stringify$append,
							$emilianobovetti$elm_yajson$Yajson$Stringify$valueSeparator(ind),
							acc))));
		}
	});
var $emilianobovetti$elm_yajson$Yajson$Stringify$nextLevel = F2(
	function (ind, json) {
		if (ind.$ === 1) {
			var lvl = ind.a;
			return A2(
				$emilianobovetti$elm_yajson$Yajson$Stringify$toString,
				$emilianobovetti$elm_yajson$Yajson$Stringify$Level(lvl + 1),
				json);
		} else {
			return A2($emilianobovetti$elm_yajson$Yajson$Stringify$toString, $emilianobovetti$elm_yajson$Yajson$Stringify$None, json);
		}
	});
var $emilianobovetti$elm_yajson$Yajson$Stringify$toString = F2(
	function (ind, json) {
		switch (json.$) {
			case 0:
				if (!json.a.b) {
					return A2($emilianobovetti$elm_yajson$Yajson$Stringify$indent, ind, '{}');
				} else {
					var assoc = json.a;
					return A2(
						$emilianobovetti$elm_yajson$Yajson$Stringify$indent,
						ind,
						A2(
							$emilianobovetti$elm_yajson$Yajson$Stringify$append,
							A2($emilianobovetti$elm_yajson$Yajson$Stringify$indent, ind, '}'),
							A3(
								$elm$core$List$foldl,
								$emilianobovetti$elm_yajson$Yajson$Stringify$foldObject(ind),
								'',
								assoc)));
				}
			case 1:
				if (!json.a.b) {
					return A2($emilianobovetti$elm_yajson$Yajson$Stringify$indent, ind, '[]');
				} else {
					var list = json.a;
					return A2(
						$emilianobovetti$elm_yajson$Yajson$Stringify$indent,
						ind,
						A2(
							$emilianobovetti$elm_yajson$Yajson$Stringify$append,
							A2($emilianobovetti$elm_yajson$Yajson$Stringify$indent, ind, ']'),
							A3(
								$elm$core$List$foldl,
								$emilianobovetti$elm_yajson$Yajson$Stringify$foldArray(ind),
								'',
								list)));
				}
			case 2:
				var str = json.a;
				return $emilianobovetti$elm_yajson$Yajson$Stringify$stringToSource(str);
			case 3:
				var num = json.a;
				return $elm$core$String$fromFloat(num);
			case 4:
				if (!json.a) {
					return 'false';
				} else {
					return 'true';
				}
			default:
				return 'null';
		}
	});
var $elm$core$String$trim = _String_trim;
var $emilianobovetti$elm_yajson$Yajson$Stringify$pretty = A2(
	$elm$core$Basics$composeR,
	$emilianobovetti$elm_yajson$Yajson$Stringify$toString(
		$emilianobovetti$elm_yajson$Yajson$Stringify$Level(0)),
	$elm$core$String$trim);
var $billstclair$elm_localstorage$PortFunnel$LocalStorage$put = $billstclair$elm_localstorage$PortFunnel$InternalTypes$Put;
var $author$project$PageTreeEditor$PageTreeEditor$ResetFileIoSelected = {$: 27};
var $author$project$PageTreeEditor$PageTreeEditor$resetFileIoSelected = function (model) {
	return A2(
		$elm$core$Task$perform,
		$elm$core$Basics$always(
			model.bY($author$project$PageTreeEditor$PageTreeEditor$ResetFileIoSelected)),
		$elm$core$Task$succeed(0));
};
var $author$project$PageEditor$Internals$DocumentZipper$safeDeleteCurrent = F2(
	function (nextUid, _v0) {
		var current = _v0.a3;
		var contexts = _v0.bu;
		if (!contexts.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var parent = contexts.a.eF;
			var left = contexts.a.bc;
			var right = contexts.a.bl;
			var cs = contexts.b;
			return (_Utils_eq(left, _List_Nil) && _Utils_eq(right, _List_Nil)) ? $elm$core$Maybe$Just(
				{
					bu: cs,
					a3: A2(
						$author$project$Document$Document$Container,
						parent,
						_List_fromArray(
							[
								$author$project$PageEditor$Internals$DocumentEditorHelpers$emptyCell(nextUid)
							]))
				}) : $elm$core$Maybe$Just(
				{
					bu: cs,
					a3: A2(
						$author$project$Document$Document$Container,
						parent,
						_Utils_ap(left, right))
				});
		}
	});
var $author$project$PageEditor$PageEditor$scrollTo = function (mbId) {
	if (mbId.$ === 1) {
		return $elm$core$Platform$Cmd$none;
	} else {
		var destId = mbId.a;
		return A2(
			$elm$core$Task$attempt,
			function (_v1) {
				return $author$project$PageEditor$PageEditor$NoOp;
			},
			A2(
				$elm$core$Task$andThen,
				function (mainContInfo) {
					return A2(
						$elm$core$Task$andThen,
						function (el) {
							return A3($elm$browser$Browser$Dom$setViewportOf, 'documentContainer', 0, (el.gg.mv - mainContInfo.gg.mv) - 50);
						},
						$elm$browser$Browser$Dom$getElement(destId));
				},
				$elm$browser$Browser$Dom$getElement('defaultHtmlId0')));
	}
};
var $author$project$PageTreeEditor$PageTreeEditor$SetFileIoPage = function (a) {
	return {$: 5, a: a};
};
var $author$project$PageTreeEditor$PageTreeEditor$setFileIoSelection = F2(
	function (model, path) {
		return A2(
			$elm$core$Platform$Cmd$map,
			model.bY,
			A2(
				$elm$core$Task$perform,
				$author$project$PageTreeEditor$PageTreeEditor$SetFileIoPage,
				$elm$core$Task$succeed(path)));
	});
var $elm$file$File$Download$string = F3(
	function (name, mime, content) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$never,
			A3(_File_download, name, mime, content));
	});
var $author$project$PageEditor$Internals$DocumentZipper$swapLeft = function (_v0) {
	var current = _v0.a3;
	var contexts = _v0.bu;
	if (!contexts.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var parent = contexts.a.eF;
		var left = contexts.a.bc;
		var right = contexts.a.bl;
		var cs = contexts.b;
		var _v2 = $elm$core$List$reverse(left);
		if (!_v2.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var d = _v2.a;
			var ds = _v2.b;
			return $elm$core$Maybe$Just(
				{
					bu: A2(
						$elm$core$List$cons,
						{
							bc: $elm$core$List$reverse(ds),
							eF: parent,
							bl: A2($elm$core$List$cons, d, right)
						},
						cs),
					a3: current
				});
		}
	}
};
var $author$project$PageEditor$Internals$DocumentZipper$swapRight = function (_v0) {
	var current = _v0.a3;
	var contexts = _v0.bu;
	if (!contexts.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var parent = contexts.a.eF;
		var left = contexts.a.bc;
		var right = contexts.a.bl;
		var cs = contexts.b;
		if (!right.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var d = right.a;
			var ds = right.b;
			return $elm$core$Maybe$Just(
				{
					bu: A2(
						$elm$core$List$cons,
						{
							bc: _Utils_ap(
								left,
								_List_fromArray(
									[d])),
							eF: parent,
							bl: ds
						},
						cs),
					a3: current
				});
		}
	}
};
var $AdrianRibao$elm_derberos_date$Derberos$Date$Core$addTimezoneMilliseconds = F2(
	function (zone, time) {
		var offset = A2($AdrianRibao$elm_derberos_date$Derberos$Date$Core$getTzOffset, zone, time);
		var millis = $elm$time$Time$posixToMillis(time);
		return $elm$time$Time$millisToPosix(millis + (offset * 60000));
	});
var $AdrianRibao$elm_derberos_date$Derberos$Date$Core$posixToCivil = function (time) {
	var milliseconds = $elm$time$Time$posixToMillis(time);
	var minute = A2(
		$elm$core$Basics$modBy,
		60,
		$elm$core$Basics$floor(milliseconds / (60 * 1000)));
	var minutes = $elm$core$Basics$floor(milliseconds / (60 * 1000));
	var rawDay = $elm$core$Basics$floor((minutes / (60 * 24)) + 719468);
	var second = A2(
		$elm$core$Basics$modBy,
		60,
		$elm$core$Basics$floor(milliseconds / 1000));
	var millis = A2($elm$core$Basics$modBy, 1000, milliseconds);
	var hour = A2(
		$elm$core$Basics$modBy,
		24,
		$elm$core$Basics$floor(milliseconds / ((60 * 60) * 1000)));
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		e5: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		gz: hour,
		ew: millis,
		gP: minute,
		ft: month,
		lk: second,
		fX: year + ((month <= 2) ? 1 : 0),
		fY: $elm$time$Time$utc
	};
};
var $author$project$Internals$CommonHelpers$timeToStr = F2(
	function (zone, t) {
		var dateRec = $AdrianRibao$elm_derberos_date$Derberos$Date$Core$posixToCivil(
			A2($AdrianRibao$elm_derberos_date$Derberos$Date$Core$addTimezoneMilliseconds, zone, t));
		return A3(
			$elm$core$String$padLeft,
			2,
			'0',
			$elm$core$String$fromInt(dateRec.e5)) + ('-' + (A3(
			$elm$core$String$padLeft,
			2,
			'0',
			$elm$core$String$fromInt(dateRec.ft)) + ('-' + ($elm$core$String$fromInt(dateRec.fX) + (' ' + (A3(
			$elm$core$String$padLeft,
			2,
			'0',
			$elm$core$String$fromInt(dateRec.gz)) + ('H' + A3(
			$elm$core$String$padLeft,
			2,
			'0',
			$elm$core$String$fromInt(dateRec.gP)))))))));
	});
var $elm$file$File$toString = _File_toString;
var $author$project$PageEditor$PageEditor$undoCacheDepth = 4;
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Left = 0;
var $elm$core$List$unzip = function (pairs) {
	var step = F2(
		function (_v0, _v1) {
			var x = _v0.a;
			var y = _v0.b;
			var xs = _v1.a;
			var ys = _v1.b;
			return _Utils_Tuple2(
				A2($elm$core$List$cons, x, xs),
				A2($elm$core$List$cons, y, ys));
		});
	return A3(
		$elm$core$List$foldr,
		step,
		_Utils_Tuple2(_List_Nil, _List_Nil),
		pairs);
};
var $elm_community$list_extra$List$Extra$zip = $elm$core$List$map2($elm$core$Tuple$pair);
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 0:
				var sel = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{a$: sel}),
					$elm$core$Maybe$Nothing);
			case 1:
				var url = msg.a;
				var _v1 = model.l;
				if (!_v1.$) {
					var id = _v1.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								k: A3(
									$elm$core$Dict$update,
									id,
									function (mbVal) {
										if (!mbVal.$) {
											var val = mbVal.a;
											return $elm$core$Maybe$Just(
												_Utils_update(
													val,
													{hy: true, d$: url}));
										} else {
											return $elm$core$Maybe$Nothing;
										}
									},
									model.k),
								a$: 0
							}),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
				}
			case 3:
				var url = msg.a;
				var _v3 = model.l;
				if (!_v3.$) {
					var id = _v3.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								k: A3(
									$elm$core$Dict$update,
									id,
									function (mbVal) {
										if (!mbVal.$) {
											var val = mbVal.a;
											return $elm$core$Maybe$Just(
												_Utils_update(
													val,
													{hy: false, d$: url}));
										} else {
											return $elm$core$Maybe$Nothing;
										}
									},
									model.k),
								a$: 0
							}),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
				}
			case 6:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							bB: $elm$core$Maybe$Just(s)
						}),
					$elm$core$Maybe$Nothing);
			case 7:
				var _v5 = _Utils_Tuple2(model.l, model.bB);
				if ((!_v5.a.$) && (!_v5.b.$)) {
					var id = _v5.a.a;
					var url = _v5.b.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								k: A3(
									$elm$core$Dict$update,
									id,
									function (mbVal) {
										if (!mbVal.$) {
											var val = mbVal.a;
											return $elm$core$Maybe$Just(
												_Utils_update(
													val,
													{hy: true, d$: url}));
										} else {
											return $elm$core$Maybe$Nothing;
										}
									},
									model.k),
								a$: 0
							}),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
				}
			case 2:
				var url = msg.a;
				var _v7 = model.l;
				if (!_v7.$) {
					var id = _v7.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								k: A3(
									$elm$core$Dict$update,
									id,
									function (mbVal) {
										if (!mbVal.$) {
											var val = mbVal.a;
											return $elm$core$Maybe$Just(
												_Utils_update(
													val,
													{jF: url}));
										} else {
											return $elm$core$Maybe$Nothing;
										}
									},
									model.k),
								bB: $elm$core$Maybe$Nothing,
								b3: $elm$core$Maybe$Nothing,
								a$: 0
							}),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
				}
			case 4:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							b3: $elm$core$Maybe$Just(s)
						}),
					$elm$core$Maybe$Nothing);
			case 5:
				var _v9 = _Utils_Tuple2(model.l, model.b3);
				if ((!_v9.a.$) && (!_v9.b.$)) {
					var id = _v9.a.a;
					var newLabel = _v9.b.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								k: A3(
									$elm$core$Dict$update,
									id,
									function (mbVal) {
										if (!mbVal.$) {
											var val = mbVal.a;
											return $elm$core$Maybe$Just(
												_Utils_update(
													val,
													{O: newLabel}));
										} else {
											return $elm$core$Maybe$Nothing;
										}
									},
									model.k)
							}),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
				}
			case 8:
				var lt = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{dC: lt}),
					$elm$core$Maybe$Nothing);
			case 9:
				var n = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							l: $elm$core$Maybe$Just(n)
						}),
					$elm$core$Maybe$Nothing);
			case 10:
				var nextId = 1 + A3(
					$elm$core$List$foldr,
					F2(
						function (k, acc) {
							return A2($elm$core$Basics$max, k, acc);
						}),
					0,
					$elm$core$Dict$keys(model.k));
				var newBlock = {jF: '', O: '', hy: false, d$: ''};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							k: A3($elm$core$Dict$insert, nextId, newBlock, model.k)
						}),
					$elm$core$Maybe$Nothing);
			case 11:
				var _v11 = model.l;
				if (!_v11.$) {
					var id = _v11.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								k: A2($elm$core$Dict$remove, id, model.k)
							}),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
				}
			case 14:
				return _Utils_Tuple2(
					model,
					$elm$core$Maybe$Just(
						$author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData(
							$author$project$Document$Document$BlockLinks(
								$elm$core$Dict$values(model.k)))));
			case 12:
				var dir = msg.a;
				var _v12 = model.l;
				if (!_v12.$) {
					var n = _v12.a;
					var xs = $elm$core$Dict$toList(model.k);
					var mbInd = A2(
						$elm_community$list_extra$List$Extra$findIndex,
						function (_v14) {
							var j = _v14.a;
							return _Utils_eq(j, n);
						},
						xs);
					var l = $elm$core$List$length(xs);
					var _v13 = $elm$core$List$unzip(xs);
					var indexes = _v13.a;
					var values = _v13.b;
					var newIndexes = A2(
						$elm$core$Maybe$withDefault,
						indexes,
						A2(
							$elm$core$Maybe$map,
							function (i) {
								return (!dir) ? A3($elm_community$list_extra$List$Extra$swapAt, i, i - 1, indexes) : A3($elm_community$list_extra$List$Extra$swapAt, i, i + 1, indexes);
							},
							mbInd));
					var newBlocks = $elm$core$Dict$fromList(
						A2($elm_community$list_extra$List$Extra$zip, newIndexes, values));
					var selection = _Utils_eq(model.k, newBlocks) ? $elm$core$Maybe$Just(n) : ((!dir) ? $elm$core$Maybe$Just(n - 1) : $elm$core$Maybe$Just(n + 1));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{k: newBlocks, l: selection}),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
				}
			case 13:
				return _Utils_Tuple2(
					model,
					$elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginQuit));
			default:
				return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
		}
	});
var $author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$fichesData = function (model) {
	return model.jg;
};
var $elm$core$List$sortBy = _List_sortBy;
var $author$project$PageEditor$EditorPlugins$FichesPlugin$filteredFiches = F2(
	function (_v0, model) {
		var genDirEditor = _v0.gp;
		var nameFilterFun = function () {
			var _v8 = model.km;
			if (!_v8.$) {
				if (_v8.a === '') {
					return $elm$core$Basics$always(true);
				} else {
					var name = _v8.a;
					return function (_v9) {
						var k = _v9.a;
						var f = _v9.b;
						return A2(
							$elm$core$String$contains,
							$elm$core$String$toLower(name),
							$elm$core$String$toLower(f.kB));
					};
				}
			} else {
				return $elm$core$Basics$always(true);
			}
		}();
		var labelFilterFun = function () {
			var _v6 = model.j_;
			if (!_v6.$) {
				var label = _v6.a;
				return function (_v7) {
					var k = _v7.a;
					var f = _v7.b;
					return A2(
						$elm$core$List$any,
						function (l) {
							return _Utils_eq(l.kA, label);
						},
						f.O);
				};
			} else {
				return $elm$core$Basics$always(true);
			}
		}();
		var catFilterFun = function () {
			var _v4 = model.io;
			if (!_v4.$) {
				var cat = _v4.a;
				return function (_v5) {
					var k = _v5.a;
					var f = _v5.b;
					return A2($elm$core$List$member, cat, f.cZ);
				};
			} else {
				return $elm$core$Basics$always(true);
			}
		}();
		var activFilterFun = function () {
			var _v2 = model.hP;
			if (!_v2.$) {
				var activ = _v2.a;
				return function (_v3) {
					var k = _v3.a;
					var f = _v3.b;
					return A2($elm$core$List$member, activ, f.ko);
				};
			} else {
				return $elm$core$Basics$always(true);
			}
		}();
		return A2(
			$elm$core$List$sortBy,
			function (_v1) {
				var k = _v1.a;
				var f = _v1.b;
				return $elm$core$String$toLower(f.kB);
			},
			A2(
				$elm$core$List$filter,
				labelFilterFun,
				A2(
					$elm$core$List$filter,
					activFilterFun,
					A2(
						$elm$core$List$filter,
						catFilterFun,
						A2(
							$elm$core$List$filter,
							nameFilterFun,
							$elm$core$Dict$toList(
								$author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$fichesData(genDirEditor)))))));
	});
var $elm$core$Set$union = F2(
	function (_v0, _v1) {
		var dict1 = _v0;
		var dict2 = _v1;
		return A2($elm$core$Dict$union, dict1, dict2);
	});
var $author$project$PageEditor$EditorPlugins$FichesPlugin$update = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 0:
				var nom = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							a7: $elm$core$Maybe$Nothing,
							km: $elm$core$Maybe$Just(nom)
						}),
					$elm$core$Maybe$Nothing);
			case 1:
				var cat = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							io: _Utils_eq(
								model.io,
								$elm$core$Maybe$Just(cat)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(cat),
							a7: $elm$core$Maybe$Nothing
						}),
					$elm$core$Maybe$Nothing);
			case 2:
				var activ = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							hP: _Utils_eq(
								model.hP,
								$elm$core$Maybe$Just(activ)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(activ),
							a7: $elm$core$Maybe$Nothing
						}),
					$elm$core$Maybe$Nothing);
			case 3:
				var label = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							a7: $elm$core$Maybe$Nothing,
							j_: _Utils_eq(
								model.j_,
								$elm$core$Maybe$Just(label)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(label)
						}),
					$elm$core$Maybe$Nothing);
			case 4:
				var sel = msg.a;
				if (!sel) {
					var fichesToAdd = $elm$core$Set$fromList(
						A2(
							$elm$core$List$map,
							$elm$core$Tuple$first,
							A2($author$project$PageEditor$EditorPlugins$FichesPlugin$filteredFiches, config, model)));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								a7: $elm$core$Maybe$Just(sel),
								ai: A2($elm$core$Set$union, model.ai, fichesToAdd)
							}),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								a7: $elm$core$Maybe$Just(sel),
								ai: $elm$core$Set$empty
							}),
						$elm$core$Maybe$Nothing);
				}
			case 5:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							a7: $elm$core$Maybe$Nothing,
							ai: A2($elm$core$Set$member, s, model.ai) ? A2($elm$core$Set$remove, s, model.ai) : A2($elm$core$Set$insert, s, model.ai)
						}),
					$elm$core$Maybe$Nothing);
			case 6:
				return _Utils_Tuple2(
					model,
					$elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginQuit));
			case 7:
				return _Utils_eq(model.ai, $elm$core$Set$empty) ? _Utils_Tuple2(model, $elm$core$Maybe$Nothing) : _Utils_Tuple2(
					model,
					$elm$core$Maybe$Just(
						$author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData(
							$elm$core$Set$toList(model.ai))));
			default:
				return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
		}
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$Base64Img = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$ImageProcessing = 1;
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$Upload = 2;
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$ProcessedImage = F6(
	function (filename, content, thumb, size, width, height) {
		return {iI: content, E: filename, jx: height, fJ: size, mf: thumb, mt: width};
	});
var $elm$json$Json$Decode$map6 = _Json_map6;
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$decodeProcessedData = A7(
	$elm$json$Json$Decode$map6,
	$author$project$PageEditor$EditorPlugins$GalleryPlugin$ProcessedImage,
	A2($elm$json$Json$Decode$field, 'filename', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'content', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'thumb', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'size', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'width', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'height', $elm$json$Json$Decode$int));
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$PicDeleted = F2(
	function (a, b) {
		return {$: 9, a: a, b: b};
	});
var $elm$http$Http$expectBytesResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'arraybuffer',
			_Http_toDataView,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$http$Http$expectWhatever = function (toMsg) {
	return A2(
		$elm$http$Http$expectBytesResponse,
		toMsg,
		$elm$http$Http$resolve(
			function (_v0) {
				return $elm$core$Result$Ok(0);
			}));
};
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$deleteImage = F2(
	function (path, sessionId) {
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'root',
						$elm$json$Json$Encode$string('images')),
						_Utils_Tuple2(
						'path',
						$elm$json$Json$Encode$string(
							A2($elm$core$String$dropLeft, 1, path)))
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: $elm$http$Http$expectWhatever(
					$author$project$PageEditor$EditorPlugins$GalleryPlugin$PicDeleted(path)),
				d$: 'deleteFile.php'
			});
	});
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $elm_community$list_extra$List$Extra$getAt = F2(
	function (idx, xs) {
		return (idx < 0) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
			A2($elm$core$List$drop, idx, xs));
	});
var $elm_community$string_extra$String$Extra$replaceSlice = F4(
	function (substitution, start, end, string) {
		return _Utils_ap(
			A3($elm$core$String$slice, 0, start, string),
			_Utils_ap(
				substitution,
				A3(
					$elm$core$String$slice,
					end,
					$elm$core$String$length(string),
					string)));
	});
var $elm_community$string_extra$String$Extra$insertAt = F3(
	function (insert, pos, string) {
		return A4($elm_community$string_extra$String$Extra$replaceSlice, insert, pos, pos, string);
	});
var $author$project$Internals$CommonHelpers$hdSrc = function (s) {
	var _v0 = $elm$core$List$reverse(
		A2($elm$core$String$indexes, '/', s));
	if (!_v0.b) {
		return s;
	} else {
		var n = _v0.a;
		return A3($elm_community$string_extra$String$Extra$insertAt, '/HQ', n, s);
	}
};
var $author$project$Internals$CommonStyleHelpers$strCons = F2(
	function (tail, head) {
		return _Utils_ap(head, tail);
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$indexName = function (n) {
	return A2(
		$author$project$Internals$CommonStyleHelpers$strCons,
		'.jpg',
		A3(
			$elm$core$String$padLeft,
			3,
			'0',
			$elm$core$String$fromInt(n)));
};
var $author$project$Document$Document$dummyPic = {
	f7: $elm$core$Maybe$Nothing,
	fJ: A2($author$project$Document$Document$ImgSize, 0, 0),
	fK: A2($author$project$Document$Document$Inline, '', '')
};
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$makeGalleryMeta = F3(
	function (title, hq, pics) {
		return function (seed) {
			var _v0 = A2($elm$random$Random$step, $TSFoster$elm_uuid$UUID$generator, seed);
			var uuid = _v0.a;
			var newSeed = _v0.b;
			return _Utils_Tuple2(
				newSeed,
				{
					jB: hq,
					jI: A2(
						$elm$core$List$map,
						function (_v1) {
							var n = _v1.a;
							var p = _v1.b;
							return _Utils_update(
								$author$project$Document$Document$dummyPic,
								{
									fK: $author$project$Document$Document$UrlSrc(p)
								});
						},
						pics),
					fP: title,
					fS: uuid
				});
		};
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$toImageProcessor = _Platform_outgoingPort('toImageProcessor', $elm$core$Basics$identity);
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$processCmd = F3(
	function (model, filename, data) {
		return A2(
			$elm$core$Platform$Cmd$map,
			model.bY,
			$author$project$PageEditor$EditorPlugins$GalleryPlugin$toImageProcessor(
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'imageData',
							$elm$json$Json$Encode$string(data)),
							_Utils_Tuple2(
							'filename',
							$elm$json$Json$Encode$string(filename)),
							_Utils_Tuple2(
							'maxHeight',
							$elm$json$Json$Encode$int(600)),
							_Utils_Tuple2(
							'maxWidth',
							$elm$json$Json$Encode$int(800)),
							_Utils_Tuple2(
							'needThumb',
							$elm$json$Json$Encode$bool(true))
						]))));
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$ImagesSelected = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$selectImages = A2(
	$elm$file$File$Select$files,
	_List_fromArray(
		['image/png', 'image/jpeg']),
	$author$project$PageEditor$EditorPlugins$GalleryPlugin$ImagesSelected);
var $author$project$Internals$CommonHelpers$thumbSrc = function (s) {
	var _v0 = $elm$core$List$reverse(
		A2($elm$core$String$indexes, '/', s));
	if (!_v0.b) {
		return s;
	} else {
		var n = _v0.a;
		return A3($elm_community$string_extra$String$Extra$insertAt, '/thumbs', n, s);
	}
};
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$Uploaded = F2(
	function (a, b) {
		return {$: 14, a: a, b: b};
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$uploadImage = F6(
	function (title, filename, contents, thumb, mbHdef, sessionId) {
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'title',
						$elm$json$Json$Encode$string(title)),
						_Utils_Tuple2(
						'filename',
						$elm$json$Json$Encode$string(filename)),
						_Utils_Tuple2(
						'contents',
						$elm$json$Json$Encode$string(contents)),
						_Utils_Tuple2(
						'thumb',
						$elm$json$Json$Encode$string(thumb)),
						_Utils_Tuple2(
						'HDef',
						A2(
							$elm$core$Maybe$withDefault,
							$elm$json$Json$Encode$null,
							A2($elm$core$Maybe$map, $elm$json$Json$Encode$string, mbHdef)))
					])));
		return $elm$http$Http$request(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					$author$project$PageEditor$EditorPlugins$GalleryPlugin$Uploaded(filename),
					$author$project$Internals$CommonHelpers$decodeUploadStatus),
				gu: _List_Nil,
				gO: 'POST',
				hz: $elm$core$Maybe$Nothing,
				hC: $elm$core$Maybe$Just(filename),
				d$: 'photothequeUpload.php'
			});
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$update = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 0:
				return _Utils_Tuple3(
					model,
					A2($elm$core$Platform$Cmd$map, model.bY, $author$project$PageEditor$EditorPlugins$GalleryPlugin$selectImages),
					$elm$core$Maybe$Nothing);
			case 1:
				var first = msg.a;
				var remaining = msg.b;
				var indexStart = function (n) {
					return n + 1;
				}(
					A3(
						$elm$core$List$foldr,
						$elm$core$Basics$max,
						0,
						A2(
							$elm$core$List$filterMap,
							$elm$core$Basics$identity,
							A2(
								$elm$core$List$map,
								function (s) {
									if (!s.$) {
										var s_ = s.a;
										return $elm$core$String$toInt(
											A2(
												$elm$core$String$dropRight,
												4,
												A2($elm_community$string_extra$String$Extra$rightOfBack, '/', s_)));
									} else {
										return $elm$core$Maybe$Nothing;
									}
								},
								A2(
									$elm$core$List$map,
									function ($) {
										return $.fK;
									},
									A2(
										$elm$core$Maybe$withDefault,
										_List_Nil,
										A2(
											$elm$core$Maybe$map,
											function ($) {
												return $.jI;
											},
											model.q)))))));
				var files = A2($elm$core$List$cons, first, remaining);
				var fileSizes = A3(
					$elm$core$List$foldr,
					F2(
						function (_v1, acc) {
							var n = _v1.a;
							var f = _v1.b;
							return A3(
								$elm$core$Dict$insert,
								$author$project$PageEditor$EditorPlugins$GalleryPlugin$indexName(n),
								$elm$file$File$size(f),
								acc);
						}),
					model.b0,
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (n, f) {
								return _Utils_Tuple2(indexStart + n, f);
							}),
						files));
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							b0: fileSizes,
							de: A2(
								$elm$core$List$indexedMap,
								F2(
									function (n, f) {
										return _Utils_Tuple2(
											$author$project$PageEditor$EditorPlugins$GalleryPlugin$indexName((indexStart + n) + 1),
											f);
									}),
								remaining)
						}),
					A2(
						$elm$core$Platform$Cmd$map,
						model.bY,
						A2(
							$elm$core$Task$perform,
							$author$project$PageEditor$EditorPlugins$GalleryPlugin$Base64Img(
								$author$project$PageEditor$EditorPlugins$GalleryPlugin$indexName(indexStart)),
							$elm$file$File$toUrl(first))),
					$elm$core$Maybe$Nothing);
			case 2:
				var filename = msg.a;
				var data = msg.b;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							a1: model.ba ? A3($elm$core$Dict$insert, filename, data, model.a1) : model.a1,
							cg: 1
						}),
					A3($author$project$PageEditor$EditorPlugins$GalleryPlugin$processCmd, model, filename, data),
					$elm$core$Maybe$Nothing);
			case 3:
				var json = msg.a;
				var _v3 = A2($elm$json$Json$Decode$decodeValue, $author$project$PageEditor$EditorPlugins$GalleryPlugin$decodeProcessedData, json);
				if (!_v3.$) {
					var pi = _v3.a;
					var content = pi.iI;
					var filename = pi.E;
					var _v4 = function () {
						var _v5 = model.de;
						if (!_v5.b) {
							return _Utils_Tuple2($elm$core$Platform$Cmd$none, _List_Nil);
						} else {
							var _v6 = _v5.a;
							var filename_ = _v6.a;
							var file = _v6.b;
							var rest = _v5.b;
							return _Utils_Tuple2(
								A2(
									$elm$core$Platform$Cmd$map,
									model.bY,
									A2(
										$elm$core$Task$perform,
										$author$project$PageEditor$EditorPlugins$GalleryPlugin$Base64Img(filename_),
										$elm$file$File$toUrl(file))),
								rest);
						}
					}();
					var cmd = _v4.a;
					var processingQueue = _v4.b;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								a_: A3($elm$core$Dict$insert, filename, pi, model.a_),
								de: processingQueue
							}),
						cmd,
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 11:
				var hq = msg.a;
				var title = msg.b;
				var pics = msg.c;
				var _v7 = model.ll;
				if (_v7.$ === 1) {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				} else {
					var seed = _v7.a;
					var _v8 = A4($author$project$PageEditor$EditorPlugins$GalleryPlugin$makeGalleryMeta, title, hq, pics, seed);
					var newSeed = _v8.a;
					var galleryMeta = _v8.b;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								a5: $elm$core$Maybe$Just(title),
								q: $elm$core$Maybe$Just(galleryMeta),
								cg: 3,
								ll: $elm$core$Maybe$Just(newSeed)
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				}
			case 12:
				var t = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							ll: $elm$core$Maybe$Just(
								$elm$random$Random$initialSeed(
									$elm$time$Time$posixToMillis(t)))
						}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 13:
				var filename = msg.a;
				var progress = msg.b;
				if (!progress.$) {
					var sent = progress.a.lx;
					var size = progress.a.fJ;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								j: A3(
									$elm$core$Dict$update,
									filename,
									function (mv) {
										if (mv.$ === 1) {
											return $elm$core$Maybe$Nothing;
										} else {
											var _v11 = mv.a;
											var us = _v11.c;
											return $elm$core$Maybe$Just(
												_Utils_Tuple3(sent, size, us));
										}
									},
									model.j)
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				} else {
					var received = progress.a.k1;
					var size = progress.a.fJ;
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 14:
				var filename = msg.a;
				var res = msg.b;
				if (!res.$) {
					if (!res.a.$) {
						var _v13 = res.a;
						var newUploadProgress = A3(
							$elm$core$Dict$update,
							filename,
							function (mv) {
								if (mv.$ === 1) {
									return $elm$core$Maybe$Nothing;
								} else {
									var _v18 = mv.a;
									var sent = _v18.a;
									var size = _v18.b;
									return $elm$core$Maybe$Just(
										_Utils_Tuple3(
											sent,
											size,
											$elm$core$Maybe$Just($author$project$Internals$CommonHelpers$UploadSuccessful)));
								}
							},
							model.j);
						var canEdit = A2(
							$elm$core$List$all,
							function (us) {
								return _Utils_eq(
									us,
									$elm$core$Maybe$Just($author$project$Internals$CommonHelpers$UploadSuccessful));
							},
							A3(
								$elm$core$Dict$foldr,
								F3(
									function (_v15, _v16, acc) {
										var us = _v16.c;
										return A2($elm$core$List$cons, us, acc);
									}),
								_List_Nil,
								newUploadProgress));
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{j: newUploadProgress}),
							canEdit ? A2(
								$elm$core$Task$perform,
								function (_v14) {
									return config.hd;
								},
								$elm$core$Task$succeed(0)) : $elm$core$Platform$Cmd$none,
							$elm$core$Maybe$Nothing);
					} else {
						var e = res.a.a;
						return _Utils_Tuple3(
							_Utils_update(
								model,
								{
									j: A3(
										$elm$core$Dict$update,
										filename,
										function (mv) {
											if (mv.$ === 1) {
												return $elm$core$Maybe$Nothing;
											} else {
												var _v20 = mv.a;
												var sent = _v20.a;
												var size = _v20.b;
												return $elm$core$Maybe$Just(
													_Utils_Tuple3(
														sent,
														size,
														$elm$core$Maybe$Just(
															$author$project$Internals$CommonHelpers$UploadFailure(e))));
											}
										},
										model.j)
								}),
							$elm$core$Platform$Cmd$none,
							$elm$core$Maybe$Nothing);
					}
				} else {
					var e = res.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								j: A3(
									$elm$core$Dict$update,
									filename,
									function (mv) {
										if (mv.$ === 1) {
											return $elm$core$Maybe$Nothing;
										} else {
											var _v22 = mv.a;
											var sent = _v22.a;
											var size = _v22.b;
											return $elm$core$Maybe$Just(
												_Utils_Tuple3(
													sent,
													size,
													$elm$core$Maybe$Just(
														$author$project$Internals$CommonHelpers$UploadFailure(
															$author$project$Internals$CommonHelpers$httpErrorToString(e)))));
										}
									},
									model.j)
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				}
			case 15:
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{a1: $elm$core$Dict$empty, b0: $elm$core$Dict$empty, q: $elm$core$Maybe$Nothing, cg: 0, a_: $elm$core$Dict$empty, de: _List_Nil, j: $elm$core$Dict$empty}),
					A2(
						$elm$core$Platform$Cmd$map,
						model.bY,
						$elm$core$Platform$Cmd$batch(
							A2(
								$elm$core$List$map,
								$elm$http$Http$cancel,
								$elm$core$Dict$keys(model.j)))),
					$elm$core$Maybe$Nothing);
			case 16:
				var s = msg.a;
				var _v23 = A2($elm$core$Dict$get, s, model.a_);
				if (!_v23.$) {
					var p = _v23.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								j: A3(
									$elm$core$Dict$insert,
									s,
									_Utils_Tuple3(
										0,
										model.ba ? (p.fJ + A2(
											$elm$core$Maybe$withDefault,
											0,
											A2($elm$core$Dict$get, p.E, model.b0))) : p.fJ,
										$elm$core$Maybe$Nothing),
									model.j)
							}),
						function () {
							var _v24 = _Utils_Tuple2(config.be, model.a5);
							if ((!_v24.a.$) && (!_v24.b.$)) {
								var info = _v24.a.a;
								var title = _v24.b.a;
								return A2(
									$elm$core$Platform$Cmd$map,
									model.bY,
									A6(
										$author$project$PageEditor$EditorPlugins$GalleryPlugin$uploadImage,
										title,
										p.E,
										p.iI,
										p.mf,
										model.ba ? A2($elm$core$Dict$get, p.E, model.a1) : $elm$core$Maybe$Nothing,
										info.fF));
							} else {
								return $elm$core$Platform$Cmd$none;
							}
						}(),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 17:
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							cg: 2,
							j: A2(
								$elm$core$Dict$map,
								F2(
									function (_v25, p) {
										return _Utils_Tuple3(
											0,
											model.ba ? (p.fJ + A2(
												$elm$core$Maybe$withDefault,
												0,
												A2($elm$core$Dict$get, p.E, model.b0))) : p.fJ,
											$elm$core$Maybe$Nothing);
									}),
								model.a_)
						}),
					function () {
						var _v26 = _Utils_Tuple2(config.be, model.a5);
						if ((!_v26.a.$) && (!_v26.b.$)) {
							var info = _v26.a.a;
							var title = _v26.b.a;
							return A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								$elm$core$Platform$Cmd$batch(
									$elm$core$List$reverse(
										A3(
											$elm$core$Dict$foldr,
											F3(
												function (k, v, acc) {
													return A2(
														$elm$core$List$cons,
														A6(
															$author$project$PageEditor$EditorPlugins$GalleryPlugin$uploadImage,
															title,
															v.E,
															v.iI,
															v.mf,
															model.ba ? A2($elm$core$Dict$get, v.E, model.a1) : $elm$core$Maybe$Nothing,
															info.fF),
														acc);
												}),
											_List_Nil,
											model.a_))));
						} else {
							return $elm$core$Platform$Cmd$none;
						}
					}(),
					$elm$core$Maybe$Nothing);
			case 18:
				var _v27 = _Utils_Tuple2(model.ll, model.a5);
				if ((!_v27.a.$) && (!_v27.b.$)) {
					var seed = _v27.a.a;
					var title = _v27.b.a;
					var pics = A2(
						$elm$core$List$map,
						function (fn) {
							return _Utils_Tuple2(fn, '/images/phototheque/' + (title + ('/' + fn)));
						},
						$elm$core$Dict$keys(model.a_));
					var _v28 = A4($author$project$PageEditor$EditorPlugins$GalleryPlugin$makeGalleryMeta, title, model.ba, pics, seed);
					var newSeed = _v28.a;
					var newGalleryMeta = _v28.b;
					var galleryMeta = function () {
						var _v29 = model.q;
						if (!_v29.$) {
							var images = _v29.a.jI;
							return _Utils_update(
								newGalleryMeta,
								{
									jI: _Utils_ap(images, newGalleryMeta.jI)
								});
						} else {
							return newGalleryMeta;
						}
					}();
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								a1: $elm$core$Dict$empty,
								b0: $elm$core$Dict$empty,
								q: $elm$core$Maybe$Just(galleryMeta),
								cg: 3,
								a_: $elm$core$Dict$empty,
								de: _List_Nil,
								ll: $elm$core$Maybe$Just(newSeed),
								j: $elm$core$Dict$empty
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 19:
				var _v30 = model.q;
				if (_v30.$ === 1) {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				} else {
					var galleryMeta = _v30.a;
					return _Utils_Tuple3(
						model,
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Just(
							$author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData(galleryMeta)));
				}
			case 20:
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{a1: $elm$core$Dict$empty, q: $elm$core$Maybe$Nothing, a_: $elm$core$Dict$empty, de: _List_Nil, j: $elm$core$Dict$empty}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginQuit));
			case 4:
				var s = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							a5: $elm$core$Maybe$Just(s)
						}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 5:
				var src = msg.a;
				var caption = msg.b;
				var _v31 = model.q;
				if (_v31.$ === 1) {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				} else {
					var output = _v31.a;
					var newOutput = _Utils_update(
						output,
						{
							jI: A3(
								$elm_community$list_extra$List$Extra$updateIf,
								function (i) {
									return _Utils_eq(
										i.fK,
										$author$project$Document$Document$UrlSrc(src));
								},
								function (i) {
									return _Utils_update(
										i,
										{
											f7: $elm$core$Maybe$Just(caption)
										});
								},
								output.jI)
						});
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								q: $elm$core$Maybe$Just(newOutput)
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				}
			case 6:
				var id = msg.a;
				var _v32 = model.q;
				if (_v32.$ === 1) {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				} else {
					var output = _v32.a;
					var newOutput = _Utils_update(
						output,
						{
							jI: A3($elm_community$list_extra$List$Extra$swapAt, id, id - 1, output.jI)
						});
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								q: $elm$core$Maybe$Just(newOutput)
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				}
			case 7:
				var id = msg.a;
				var _v33 = model.q;
				if (_v33.$ === 1) {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				} else {
					var output = _v33.a;
					var newOutput = _Utils_update(
						output,
						{
							jI: A3($elm_community$list_extra$List$Extra$swapAt, id, id + 1, output.jI)
						});
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								q: $elm$core$Maybe$Just(newOutput)
							}),
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				}
			case 8:
				var id = msg.a;
				var _v34 = A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.fK;
					},
					A2(
						$elm$core$Maybe$andThen,
						$elm_community$list_extra$List$Extra$getAt(id),
						A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.jI;
							},
							model.q)));
				if ((!_v34.$) && (!_v34.a.$)) {
					var src = _v34.a.a;
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								dF: _Utils_ap(
									_List_fromArray(
										[
											src,
											$author$project$Internals$CommonHelpers$thumbSrc(src)
										]),
									_Utils_eq(
										A2(
											$elm$core$Maybe$map,
											function ($) {
												return $.jB;
											},
											model.q),
										$elm$core$Maybe$Just(true)) ? _List_fromArray(
										[
											$author$project$Internals$CommonHelpers$hdSrc(src)
										]) : _List_Nil),
								cH: A2(
									$elm$core$Maybe$andThen,
									$elm_community$list_extra$List$Extra$getAt(id),
									A2(
										$elm$core$Maybe$map,
										function ($) {
											return $.jI;
										},
										model.q))
							}),
						A2(
							$elm$core$Platform$Cmd$map,
							model.bY,
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										$author$project$Auth$AuthPlugin$cmdIfLogged,
										config.be,
										$author$project$PageEditor$EditorPlugins$GalleryPlugin$deleteImage(src)),
										A2(
										$author$project$Auth$AuthPlugin$cmdIfLogged,
										config.be,
										$author$project$PageEditor$EditorPlugins$GalleryPlugin$deleteImage(
											$author$project$Internals$CommonHelpers$thumbSrc(src))),
										_Utils_eq(
										A2(
											$elm$core$Maybe$map,
											function ($) {
												return $.jB;
											},
											model.q),
										$elm$core$Maybe$Just(true)) ? A2(
										$author$project$Auth$AuthPlugin$cmdIfLogged,
										config.be,
										$author$project$PageEditor$EditorPlugins$GalleryPlugin$deleteImage(
											$author$project$Internals$CommonHelpers$hdSrc(src))) : $elm$core$Platform$Cmd$none
									]))),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}
			case 9:
				var src = msg.a;
				var res = msg.b;
				if (!res.$) {
					var lockedFilespath = A2($elm_community$list_extra$List$Extra$remove, src, model.dF);
					var allDone = _Utils_eq(lockedFilespath, _List_Nil);
					return _Utils_Tuple3(
						_Utils_update(
							model,
							{
								dF: lockedFilespath,
								cH: allDone ? $elm$core$Maybe$Nothing : model.cH,
								q: function () {
									var _v36 = _Utils_Tuple3(model.q, model.cH, allDone);
									if (((!_v36.a.$) && (!_v36.b.$)) && _v36.c) {
										var o = _v36.a.a;
										var images = o.jI;
										var pic = _v36.b.a;
										return $elm$core$Maybe$Just(
											_Utils_update(
												o,
												{
													jI: A2($elm_community$list_extra$List$Extra$remove, pic, images)
												}));
									} else {
										return model.q;
									}
								}()
							}),
						allDone ? $elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A6($author$project$Auth$AuthPlugin$newLogIfLogged, config.be, config.eT, src + ' supprimée', $elm$core$Maybe$Nothing, false, false),
									A2(
									$elm$core$Task$perform,
									function (_v37) {
										return config.hd;
									},
									$elm$core$Task$succeed(0))
								])) : $elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Nothing);
				} else {
					var e = res.a;
					return _Utils_Tuple3(
						model,
						A6(
							$author$project$Auth$AuthPlugin$newLogIfLogged,
							config.be,
							config.eT,
							'Impossible de supprimer  ' + src,
							$elm$core$Maybe$Just(
								$author$project$Internals$CommonHelpers$httpErrorToString(e)),
							true,
							true),
						$elm$core$Maybe$Nothing);
				}
			case 10:
				var b = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{ba: b}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			default:
				return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
		}
	});
var $author$project$PageEditor$Internals$DocumentEditorHelpers$setAligment = F2(
	function (a, attrs) {
		var removeOldAlignment = F2(
			function (acc, xs) {
				removeOldAlignment:
				while (true) {
					if (!xs.b) {
						return $elm$core$List$reverse(acc);
					} else {
						switch (xs.a.$) {
							case 2:
								var _v1 = xs.a;
								var xs_ = xs.b;
								var $temp$acc = acc,
									$temp$xs = xs_;
								acc = $temp$acc;
								xs = $temp$xs;
								continue removeOldAlignment;
							case 3:
								var _v2 = xs.a;
								var xs_ = xs.b;
								var $temp$acc = acc,
									$temp$xs = xs_;
								acc = $temp$acc;
								xs = $temp$xs;
								continue removeOldAlignment;
							default:
								var y = xs.a;
								var ys = xs.b;
								var $temp$acc = A2($elm$core$List$cons, y, acc),
									$temp$xs = ys;
								acc = $temp$acc;
								xs = $temp$xs;
								continue removeOldAlignment;
						}
					}
				}
			});
		var newAlignment = function () {
			switch (a) {
				case 1:
					return _List_Nil;
				case 0:
					return _List_fromArray(
						[$author$project$Document$Document$AlignRight]);
				default:
					return _List_fromArray(
						[$author$project$Document$Document$AlignLeft]);
			}
		}();
		return _Utils_ap(
			newAlignment,
			A2(removeOldAlignment, _List_Nil, attrs));
	});
var $author$project$PageEditor$EditorPlugins$ImagePlugin$update = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 0:
				var alignment = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{bQ: alignment}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 1:
				var caption = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							b6: (caption === '') ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(caption)
						}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 2:
				var src = msg.a.fK;
				var width = msg.a.mt;
				var height = msg.a.jx;
				var newImageMeta = {
					f7: model.b6,
					fJ: {jK: height, jL: width},
					fK: $author$project$Document$Document$UrlSrc(src)
				};
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{
							b7: $elm$core$Maybe$Just(newImageMeta),
							h: 0
						}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 3:
				var mode = msg.a;
				return _Utils_Tuple3(
					_Utils_update(
						model,
						{h: mode}),
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Nothing);
			case 4:
				var _v1 = model.b7;
				if (_v1.$ === 1) {
					return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				} else {
					var imageMeta = _v1.a;
					return _Utils_Tuple3(
						model,
						$elm$core$Platform$Cmd$none,
						$elm$core$Maybe$Just(
							$author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData(
								_Utils_Tuple2(
									_Utils_update(
										imageMeta,
										{f7: model.b6}),
									A2($author$project$PageEditor$Internals$DocumentEditorHelpers$setAligment, model.bQ, model.en)))));
				}
			case 5:
				return _Utils_Tuple3(
					model,
					$elm$core$Platform$Cmd$none,
					$elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginQuit));
			default:
				return _Utils_Tuple3(model, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
		}
	});
var $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 1:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{c5: true}),
					$elm$core$Maybe$Nothing);
			case 2:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{c5: false}),
					$elm$core$Maybe$Nothing);
			case 3:
				var src = msg.a.fK;
				var width = msg.a.mt;
				var height = msg.a.jx;
				var _v1 = A2($elm$random$Random$step, $TSFoster$elm_uuid$UUID$generator, model.ll);
				var uuid = _v1.a;
				var newSeed = _v1.b;
				var newPicLink = {
					ce: {
						jJ: {
							f7: $elm$core$Maybe$Nothing,
							fJ: {jK: height, jL: width},
							fK: $author$project$Document$Document$UrlSrc(src)
						},
						d$: ''
					},
					fS: uuid
				};
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							e: _Utils_ap(
								model.e,
								_List_fromArray(
									[newPicLink])),
							c5: false,
							ll: newSeed
						}),
					$elm$core$Maybe$Nothing);
			case 4:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							bO: $elm$core$Maybe$Just(s)
						}),
					$elm$core$Maybe$Nothing);
			case 5:
				var _v2 = _Utils_Tuple2(model.L, model.bO);
				if ((!_v2.a.$) && (!_v2.b.$)) {
					var uuid = _v2.a.a;
					var url = _v2.b.a;
					var newBuffer = A2(
						$elm$core$List$map,
						function (pl) {
							if (_Utils_eq(
								$TSFoster$elm_uuid$UUID$toString(pl.fS),
								uuid)) {
								var picLink = pl.ce;
								return _Utils_update(
									pl,
									{
										ce: _Utils_update(
											picLink,
											{d$: url})
									});
							} else {
								return pl;
							}
						},
						model.e);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{e: newBuffer, bO: $elm$core$Maybe$Nothing}),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
				}
			case 6:
				var _v3 = A2(
					$elm$core$Maybe$andThen,
					function (s) {
						return A2(
							$elm_community$list_extra$List$Extra$findIndex,
							function (p) {
								return _Utils_eq(
									$TSFoster$elm_uuid$UUID$toString(p.fS),
									s);
							},
							model.e);
					},
					model.L);
				if (_v3.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
				} else {
					var n = _v3.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								e: A3($elm_community$list_extra$List$Extra$swapAt, n - 1, n, model.e)
							}),
						$elm$core$Maybe$Nothing);
				}
			case 7:
				var _v4 = A2(
					$elm$core$Maybe$andThen,
					function (s) {
						return A2(
							$elm_community$list_extra$List$Extra$findIndex,
							function (p) {
								return _Utils_eq(
									$TSFoster$elm_uuid$UUID$toString(p.fS),
									s);
							},
							model.e);
					},
					model.L);
				if (_v4.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
				} else {
					var n = _v4.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								e: A3($elm_community$list_extra$List$Extra$swapAt, n + 1, n, model.e)
							}),
						$elm$core$Maybe$Nothing);
				}
			case 8:
				var _v5 = model.L;
				if (_v5.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
				} else {
					var s = _v5.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								e: A2(
									$elm$core$List$filter,
									function (p) {
										return !_Utils_eq(
											$TSFoster$elm_uuid$UUID$toString(p.fS),
											s);
									},
									model.e)
							}),
						$elm$core$Maybe$Nothing);
				}
			case 9:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							L: _Utils_eq(
								model.L,
								$elm$core$Maybe$Just(s)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s),
							bO: _Utils_eq(
								model.L,
								$elm$core$Maybe$Just(s)) ? $elm$core$Maybe$Nothing : A2(
								$elm$core$Maybe$map,
								A2(
									$elm$core$Basics$composeL,
									function ($) {
										return $.d$;
									},
									function ($) {
										return $.ce;
									}),
								$elm$core$List$head(
									A2(
										$elm$core$List$filter,
										function (p) {
											return _Utils_eq(
												$TSFoster$elm_uuid$UUID$toString(p.fS),
												s);
										},
										model.e)))
						}),
					$elm$core$Maybe$Nothing);
			case 11:
				return _Utils_Tuple2(
					model,
					$elm$core$Maybe$Just(
						$author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData(
							A2(
								$elm$core$List$map,
								function ($) {
									return $.ce;
								},
								model.e))));
			case 10:
				return _Utils_Tuple2(
					model,
					$elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginQuit));
			default:
				return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
		}
	});
var $author$project$PageEditor$EditorPlugins$TablePlugin$DisplayOnly = 0;
var $elm$core$Elm$JsArray$appendN = _JsArray_appendN;
var $elm$core$Elm$JsArray$slice = _JsArray_slice;
var $elm$core$Array$appendHelpBuilder = F2(
	function (tail, builder) {
		var tailLen = $elm$core$Elm$JsArray$length(tail);
		var notAppended = ($elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(builder.M)) - tailLen;
		var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, builder.M, tail);
		return (notAppended < 0) ? {
			R: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.R),
			C: builder.C + 1,
			M: A3($elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)
		} : ((!notAppended) ? {
			R: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.R),
			C: builder.C + 1,
			M: $elm$core$Elm$JsArray$empty
		} : {R: builder.R, C: builder.C, M: appended});
	});
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Elm$JsArray$push = _JsArray_push;
var $elm$core$Elm$JsArray$singleton = _JsArray_singleton;
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var $elm$core$Array$insertTailInTree = F4(
	function (shift, index, tail, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		if (_Utils_cmp(
			pos,
			$elm$core$Elm$JsArray$length(tree)) > -1) {
			if (shift === 5) {
				return A2(
					$elm$core$Elm$JsArray$push,
					$elm$core$Array$Leaf(tail),
					tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$empty));
				return A2($elm$core$Elm$JsArray$push, newSub, tree);
			}
		} else {
			var value = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (!value.$) {
				var subTree = value.a;
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, subTree));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4(
						$elm$core$Array$insertTailInTree,
						shift - $elm$core$Array$shiftStep,
						index,
						tail,
						$elm$core$Elm$JsArray$singleton(value)));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			}
		}
	});
var $elm$core$Array$unsafeReplaceTail = F2(
	function (newTail, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var originalTailLen = $elm$core$Elm$JsArray$length(tail);
		var newTailLen = $elm$core$Elm$JsArray$length(newTail);
		var newArrayLen = len + (newTailLen - originalTailLen);
		if (_Utils_eq(newTailLen, $elm$core$Array$branchFactor)) {
			var overflow = _Utils_cmp(newArrayLen >>> $elm$core$Array$shiftStep, 1 << startShift) > 0;
			if (overflow) {
				var newShift = startShift + $elm$core$Array$shiftStep;
				var newTree = A4(
					$elm$core$Array$insertTailInTree,
					newShift,
					len,
					newTail,
					$elm$core$Elm$JsArray$singleton(
						$elm$core$Array$SubTree(tree)));
				return A4($elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, $elm$core$Elm$JsArray$empty);
			} else {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					newArrayLen,
					startShift,
					A4($elm$core$Array$insertTailInTree, startShift, len, newTail, tree),
					$elm$core$Elm$JsArray$empty);
			}
		} else {
			return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
		}
	});
var $elm$core$Array$appendHelpTree = F2(
	function (toAppend, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		var itemsToAppend = $elm$core$Elm$JsArray$length(toAppend);
		var notAppended = ($elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(tail)) - itemsToAppend;
		var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, tail, toAppend);
		var newArray = A2($elm$core$Array$unsafeReplaceTail, appended, array);
		if (notAppended < 0) {
			var nextTail = A3($elm$core$Elm$JsArray$slice, notAppended, itemsToAppend, toAppend);
			return A2($elm$core$Array$unsafeReplaceTail, nextTail, newArray);
		} else {
			return newArray;
		}
	});
var $elm$core$Elm$JsArray$foldl = _JsArray_foldl;
var $elm$core$Array$builderFromArray = function (_v0) {
	var len = _v0.a;
	var tree = _v0.c;
	var tail = _v0.d;
	var helper = F2(
		function (node, acc) {
			if (!node.$) {
				var subTree = node.a;
				return A3($elm$core$Elm$JsArray$foldl, helper, acc, subTree);
			} else {
				return A2($elm$core$List$cons, node, acc);
			}
		});
	return {
		R: A3($elm$core$Elm$JsArray$foldl, helper, _List_Nil, tree),
		C: (len / $elm$core$Array$branchFactor) | 0,
		M: tail
	};
};
var $elm$core$Array$append = F2(
	function (a, _v0) {
		var aTail = a.d;
		var bLen = _v0.a;
		var bTree = _v0.c;
		var bTail = _v0.d;
		if (_Utils_cmp(bLen, $elm$core$Array$branchFactor * 4) < 1) {
			var foldHelper = F2(
				function (node, array) {
					if (!node.$) {
						var tree = node.a;
						return A3($elm$core$Elm$JsArray$foldl, foldHelper, array, tree);
					} else {
						var leaf = node.a;
						return A2($elm$core$Array$appendHelpTree, leaf, array);
					}
				});
			return A2(
				$elm$core$Array$appendHelpTree,
				bTail,
				A3($elm$core$Elm$JsArray$foldl, foldHelper, a, bTree));
		} else {
			var foldHelper = F2(
				function (node, builder) {
					if (!node.$) {
						var tree = node.a;
						return A3($elm$core$Elm$JsArray$foldl, foldHelper, builder, tree);
					} else {
						var leaf = node.a;
						return A2($elm$core$Array$appendHelpBuilder, leaf, builder);
					}
				});
			return A2(
				$elm$core$Array$builderToArray,
				true,
				A2(
					$elm$core$Array$appendHelpBuilder,
					bTail,
					A3(
						$elm$core$Elm$JsArray$foldl,
						foldHelper,
						$elm$core$Array$builderFromArray(a),
						bTree)));
		}
	});
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (!_v0.$) {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $author$project$PageEditor$EditorPlugins$TablePlugin$makeDataGrid = F2(
	function (i, j) {
		return A2(
			$elm$core$Array$initialize,
			i,
			$elm$core$Basics$always(
				A2(
					$elm$core$Array$initialize,
					j,
					$elm$core$Basics$always(''))));
	});
var $elm$core$Elm$JsArray$map = _JsArray_map;
var $elm$core$Array$map = F2(
	function (func, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = function (node) {
			if (!node.$) {
				var subTree = node.a;
				return $elm$core$Array$SubTree(
					A2($elm$core$Elm$JsArray$map, helper, subTree));
			} else {
				var values = node.a;
				return $elm$core$Array$Leaf(
					A2($elm$core$Elm$JsArray$map, func, values));
			}
		};
		return A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A2($elm$core$Elm$JsArray$map, helper, tree),
			A2($elm$core$Elm$JsArray$map, func, tail));
	});
var $author$project$PageEditor$EditorPlugins$TablePlugin$maxCols = 30;
var $author$project$PageEditor$EditorPlugins$TablePlugin$maxRows = 100;
var $elm$core$Array$push = F2(
	function (a, array) {
		var tail = array.d;
		return A2(
			$elm$core$Array$unsafeReplaceTail,
			A2($elm$core$Elm$JsArray$push, a, tail),
			array);
	});
var $elm$core$Array$setHelp = F4(
	function (shift, index, value, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
		if (!_v0.$) {
			var subTree = _v0.a;
			var newSub = A4($elm$core$Array$setHelp, shift - $elm$core$Array$shiftStep, index, value, subTree);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$SubTree(newSub),
				tree);
		} else {
			var values = _v0.a;
			var newLeaf = A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, values);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$Leaf(newLeaf),
				tree);
		}
	});
var $elm$core$Array$set = F3(
	function (index, value, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? array : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			tree,
			A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, tail)) : A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A4($elm$core$Array$setHelp, startShift, index, value, tree),
			tail));
	});
var $elm$core$Array$sliceLeft = F2(
	function (from, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		if (!from) {
			return array;
		} else {
			if (_Utils_cmp(
				from,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					len - from,
					$elm$core$Array$shiftStep,
					$elm$core$Elm$JsArray$empty,
					A3(
						$elm$core$Elm$JsArray$slice,
						from - $elm$core$Array$tailIndex(len),
						$elm$core$Elm$JsArray$length(tail),
						tail));
			} else {
				var skipNodes = (from / $elm$core$Array$branchFactor) | 0;
				var helper = F2(
					function (node, acc) {
						if (!node.$) {
							var subTree = node.a;
							return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
						} else {
							var leaf = node.a;
							return A2($elm$core$List$cons, leaf, acc);
						}
					});
				var leafNodes = A3(
					$elm$core$Elm$JsArray$foldr,
					helper,
					_List_fromArray(
						[tail]),
					tree);
				var nodesToInsert = A2($elm$core$List$drop, skipNodes, leafNodes);
				if (!nodesToInsert.b) {
					return $elm$core$Array$empty;
				} else {
					var head = nodesToInsert.a;
					var rest = nodesToInsert.b;
					var firstSlice = from - (skipNodes * $elm$core$Array$branchFactor);
					var initialBuilder = {
						R: _List_Nil,
						C: 0,
						M: A3(
							$elm$core$Elm$JsArray$slice,
							firstSlice,
							$elm$core$Elm$JsArray$length(head),
							head)
					};
					return A2(
						$elm$core$Array$builderToArray,
						true,
						A3($elm$core$List$foldl, $elm$core$Array$appendHelpBuilder, initialBuilder, rest));
				}
			}
		}
	});
var $elm$core$Array$fetchNewTail = F4(
	function (shift, end, treeEnd, tree) {
		fetchNewTail:
		while (true) {
			var pos = $elm$core$Array$bitMask & (treeEnd >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (!_v0.$) {
				var sub = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$end = end,
					$temp$treeEnd = treeEnd,
					$temp$tree = sub;
				shift = $temp$shift;
				end = $temp$end;
				treeEnd = $temp$treeEnd;
				tree = $temp$tree;
				continue fetchNewTail;
			} else {
				var values = _v0.a;
				return A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, values);
			}
		}
	});
var $elm$core$Array$hoistTree = F3(
	function (oldShift, newShift, tree) {
		hoistTree:
		while (true) {
			if ((_Utils_cmp(oldShift, newShift) < 1) || (!$elm$core$Elm$JsArray$length(tree))) {
				return tree;
			} else {
				var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, 0, tree);
				if (!_v0.$) {
					var sub = _v0.a;
					var $temp$oldShift = oldShift - $elm$core$Array$shiftStep,
						$temp$newShift = newShift,
						$temp$tree = sub;
					oldShift = $temp$oldShift;
					newShift = $temp$newShift;
					tree = $temp$tree;
					continue hoistTree;
				} else {
					return tree;
				}
			}
		}
	});
var $elm$core$Array$sliceTree = F3(
	function (shift, endIdx, tree) {
		var lastPos = $elm$core$Array$bitMask & (endIdx >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, lastPos, tree);
		if (!_v0.$) {
			var sub = _v0.a;
			var newSub = A3($elm$core$Array$sliceTree, shift - $elm$core$Array$shiftStep, endIdx, sub);
			return (!$elm$core$Elm$JsArray$length(newSub)) ? A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree) : A3(
				$elm$core$Elm$JsArray$unsafeSet,
				lastPos,
				$elm$core$Array$SubTree(newSub),
				A3($elm$core$Elm$JsArray$slice, 0, lastPos + 1, tree));
		} else {
			return A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree);
		}
	});
var $elm$core$Array$sliceRight = F2(
	function (end, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		if (_Utils_eq(end, len)) {
			return array;
		} else {
			if (_Utils_cmp(
				end,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					startShift,
					tree,
					A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, tail));
			} else {
				var endIdx = $elm$core$Array$tailIndex(end);
				var depth = $elm$core$Basics$floor(
					A2(
						$elm$core$Basics$logBase,
						$elm$core$Array$branchFactor,
						A2($elm$core$Basics$max, 1, endIdx - 1)));
				var newShift = A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep);
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					newShift,
					A3(
						$elm$core$Array$hoistTree,
						startShift,
						newShift,
						A3($elm$core$Array$sliceTree, startShift, endIdx, tree)),
					A4($elm$core$Array$fetchNewTail, startShift, end, endIdx, tree));
			}
		}
	});
var $elm$core$Array$translateIndex = F2(
	function (index, _v0) {
		var len = _v0.a;
		var posIndex = (index < 0) ? (len + index) : index;
		return (posIndex < 0) ? 0 : ((_Utils_cmp(posIndex, len) > 0) ? len : posIndex);
	});
var $elm$core$Array$slice = F3(
	function (from, to, array) {
		var correctTo = A2($elm$core$Array$translateIndex, to, array);
		var correctFrom = A2($elm$core$Array$translateIndex, from, array);
		return (_Utils_cmp(correctFrom, correctTo) > 0) ? $elm$core$Array$empty : A2(
			$elm$core$Array$sliceLeft,
			correctFrom,
			A2($elm$core$Array$sliceRight, correctTo, array));
	});
var $mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 4, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
var $mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(x * 255));
};
var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var $mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Flag$borderColor = $mdgriffith$elm_ui$Internal$Flag$flag(28);
var $mdgriffith$elm_ui$Element$Border$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'border-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 7, a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
var $mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		return _Utils_eq(x, y) ? A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + $elm$core$String$fromInt(x),
				x,
				x,
				x,
				x)) : A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
				y,
				x,
				y,
				x));
	});
var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var $mdgriffith$elm_ui$Element$rgba = $mdgriffith$elm_ui$Internal$Model$Rgba;
var $mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 7, a: a};
};
var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
var $mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(
	function (a, b, c, d, e) {
		return {$: 6, a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
var $mdgriffith$elm_ui$Element$Border$width = function (v) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + $elm$core$String$fromInt(v),
			v,
			v,
			v,
			v));
};
var $mdgriffith$elm_ui$Element$Border$widthXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$borderWidth,
			A5(
				$mdgriffith$elm_ui$Internal$Model$BorderWidth,
				'b-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
				y,
				x,
				y,
				x));
	});
var $mdgriffith$elm_ui$Element$Border$widthEach = function (_v0) {
	var bottom = _v0.a2;
	var top = _v0.bq;
	var left = _v0.bc;
	var right = _v0.bl;
	return (_Utils_eq(top, bottom) && _Utils_eq(left, right)) ? (_Utils_eq(top, right) ? $mdgriffith$elm_ui$Element$Border$width(top) : A2($mdgriffith$elm_ui$Element$Border$widthXY, left, top)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left))))))),
			top,
			right,
			bottom,
			left));
};
var $author$project$Document$DocumentViews$StyleSheets$tableStyles = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'default',
			{
				iq: function (ri) {
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{a2: 1, bc: 0, bl: 1, bq: 0}),
							$mdgriffith$elm_ui$Element$Background$color(
							(!A2($elm$core$Basics$modBy, 2, ri)) ? A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8) : A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]);
				},
				iG: _List_Nil,
				lV: _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Border$widthEach(
						{a2: 0, bc: 1, bl: 0, bq: 1})
					])
			}),
			_Utils_Tuple2(
			'souligné',
			{
				iq: function (ri) {
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{a2: 1, bc: 0, bl: 0, bq: 0}),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]);
				},
				iG: _List_fromArray(
					[
						A2($mdgriffith$elm_ui$Element$paddingXY, 1, 0)
					]),
				lV: _List_Nil
			}),
			_Utils_Tuple2(
			'gris-vert',
			{
				iq: function (ri) {
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{a2: 1, bc: 0, bl: 0, bq: 0}),
							$mdgriffith$elm_ui$Element$Border$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0.5, 0.5, 0.5, 1)),
							$mdgriffith$elm_ui$Element$Background$color(
							(!A2($elm$core$Basics$modBy, 2, ri)) ? A3($mdgriffith$elm_ui$Element$rgb, 0.83, 0.83, 0.83) : A3($mdgriffith$elm_ui$Element$rgb, 0.58, 0.93, 0.58)),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]);
				},
				iG: _List_fromArray(
					[
						A2($mdgriffith$elm_ui$Element$paddingXY, 1, 1)
					]),
				lV: _List_Nil
			}),
			_Utils_Tuple2(
			'bleu-blanc',
			{
				iq: function (ri) {
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{a2: 1, bc: 0, bl: 0, bq: 0}),
							$mdgriffith$elm_ui$Element$Border$color(
							A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5)),
							$mdgriffith$elm_ui$Element$Background$color(
							(!A2($elm$core$Basics$modBy, 2, ri)) ? A3($mdgriffith$elm_ui$Element$rgb, 0.53, 0.81, 0.92) : A3($mdgriffith$elm_ui$Element$rgb, 0.92, 0.92, 0.84)),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]);
				},
				iG: _List_fromArray(
					[
						A2($mdgriffith$elm_ui$Element$paddingXY, 1, 1)
					]),
				lV: _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Border$width(1)
					])
			})
		]));
var $elm$core$Array$toIndexedList = function (array) {
	var len = array.a;
	var helper = F2(
		function (entry, _v0) {
			var index = _v0.a;
			var list = _v0.b;
			return _Utils_Tuple2(
				index - 1,
				A2(
					$elm$core$List$cons,
					_Utils_Tuple2(index, entry),
					list));
		});
	return A3(
		$elm$core$Array$foldr,
		helper,
		_Utils_Tuple2(len - 1, _List_Nil),
		array).b;
};
var $author$project$PageEditor$EditorPlugins$TablePlugin$toTableMeta = function (docTable) {
	return {
		iU: $elm$core$Array$toList(docTable.iU),
		kp: docTable.kp,
		kq: docTable.kq,
		lR: docTable.al
	};
};
var $author$project$PageEditor$EditorPlugins$TablePlugin$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 0:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{cL: s}),
					$elm$core$Maybe$Nothing);
			case 1:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{cK: s}),
					$elm$core$Maybe$Nothing);
			case 2:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							al: function () {
								var _v1 = A2($elm$core$Dict$get, s, $author$project$Document$DocumentViews$StyleSheets$tableStyles);
								if (_v1.$ === 1) {
									return model.al;
								} else {
									return s;
								}
							}(),
							dT: s
						}),
					$elm$core$Maybe$Nothing);
			case 3:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{N: $elm$core$Maybe$Nothing, cl: !model.cl}),
					$elm$core$Maybe$Nothing);
			case 4:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{cl: false}),
					$elm$core$Maybe$Nothing);
			case 5:
				var nbrRows = function (n) {
					return (_Utils_cmp(n, $author$project$PageEditor$EditorPlugins$TablePlugin$maxRows) < 1) ? n : model.kq;
				}(
					A2(
						$elm$core$Maybe$withDefault,
						0,
						$elm$core$String$toInt(model.cL)));
				var nbrCols = function (n) {
					return (_Utils_cmp(n, $author$project$PageEditor$EditorPlugins$TablePlugin$maxCols) < 1) ? n : model.kp;
				}(
					A2(
						$elm$core$Maybe$withDefault,
						0,
						$elm$core$String$toInt(model.cK)));
				var data = A2($author$project$PageEditor$EditorPlugins$TablePlugin$makeDataGrid, nbrRows, nbrCols);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{iU: data, kp: nbrCols, cK: '', kq: nbrRows, cL: '', cj: true}),
					$elm$core$Maybe$Nothing);
			case 6:
				var _v2 = msg.a;
				var i = _v2.a;
				var j = _v2.b;
				var s = msg.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							iU: function () {
								var _v3 = A2($elm$core$Array$get, i, model.iU);
								if (_v3.$ === 1) {
									return model.iU;
								} else {
									var a = _v3.a;
									return A3(
										$elm$core$Array$set,
										i,
										A3($elm$core$Array$set, j, s, a),
										model.iU);
								}
							}()
						}),
					$elm$core$Maybe$Nothing);
			case 7:
				var mbFocus = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{N: mbFocus}),
					$elm$core$Maybe$Nothing);
			case 8:
				var _v4 = model.N;
				if (_v4.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
				} else {
					var _v5 = _v4.a;
					var ri = _v5.a;
					var ci = _v5.b;
					var newData = $elm$core$Array$fromList(
						A2(
							$elm$core$List$map,
							$elm$core$Tuple$second,
							A2(
								$elm$core$List$filter,
								function (_v6) {
									var i = _v6.a;
									return !_Utils_eq(i, ri);
								},
								$elm$core$Array$toIndexedList(model.iU))));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{N: $elm$core$Maybe$Nothing, iU: newData, kq: model.kq + 1}),
						$elm$core$Maybe$Nothing);
				}
			case 9:
				var _v7 = model.N;
				if (_v7.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
				} else {
					var _v8 = _v7.a;
					var ri = _v8.a;
					var ci = _v8.b;
					var newData = A2(
						$elm$core$Array$map,
						function (row) {
							return $elm$core$Array$fromList(
								A2(
									$elm$core$List$map,
									$elm$core$Tuple$second,
									A2(
										$elm$core$List$filter,
										function (_v9) {
											var j = _v9.a;
											return !_Utils_eq(j, ci);
										},
										$elm$core$Array$toIndexedList(row))));
						},
						model.iU);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{N: $elm$core$Maybe$Nothing, iU: newData, kp: model.kp - 1}),
						$elm$core$Maybe$Nothing);
				}
			case 10:
				var direction = msg.a;
				var _v10 = _Utils_Tuple2(direction, model.N);
				if (_v10.b.$ === 1) {
					switch (_v10.a) {
						case 0:
							var _v11 = _v10.a;
							var _v12 = _v10.b;
							var newRow = $elm$core$Array$fromList(
								_List_fromArray(
									[
										A2(
										$elm$core$Array$initialize,
										model.kp,
										$elm$core$Basics$always(''))
									]));
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										iU: A2($elm$core$Array$append, newRow, model.iU),
										kq: model.kq + 1
									}),
								$elm$core$Maybe$Nothing);
						case 1:
							var _v13 = _v10.a;
							var _v14 = _v10.b;
							var newRow = A2(
								$elm$core$Array$initialize,
								model.kp,
								$elm$core$Basics$always(''));
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										iU: A2($elm$core$Array$push, newRow, model.iU),
										kq: model.kq + 1
									}),
								$elm$core$Maybe$Nothing);
						case 2:
							var _v15 = _v10.a;
							var _v16 = _v10.b;
							var newData = A2(
								$elm$core$Array$map,
								function (row) {
									return A2(
										$elm$core$Array$append,
										$elm$core$Array$fromList(
											_List_fromArray(
												[''])),
										row);
								},
								model.iU);
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{iU: newData, kp: model.kp + 1}),
								$elm$core$Maybe$Nothing);
						default:
							var _v17 = _v10.a;
							var _v18 = _v10.b;
							var newData = A2(
								$elm$core$Array$map,
								function (row) {
									return A2($elm$core$Array$push, '', row);
								},
								model.iU);
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{iU: newData, kp: model.kp + 1}),
								$elm$core$Maybe$Nothing);
					}
				} else {
					switch (_v10.a) {
						case 0:
							var _v19 = _v10.a;
							var _v20 = _v10.b.a;
							var i = _v20.a;
							var j = _v20.b;
							var topHalf = A3($elm$core$Array$slice, 0, i, model.iU);
							var newRow = $elm$core$Array$fromList(
								_List_fromArray(
									[
										A2(
										$elm$core$Array$initialize,
										model.kp,
										$elm$core$Basics$always(''))
									]));
							var bottomHalf = A3($elm$core$Array$slice, i, model.kq, model.iU);
							var newData = A2(
								$elm$core$Array$append,
								topHalf,
								A2($elm$core$Array$append, newRow, bottomHalf));
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{N: $elm$core$Maybe$Nothing, iU: newData, kq: model.kq + 1}),
								$elm$core$Maybe$Nothing);
						case 1:
							var _v21 = _v10.a;
							var _v22 = _v10.b.a;
							var i = _v22.a;
							var j = _v22.b;
							var topHalf = A3($elm$core$Array$slice, 0, i + 1, model.iU);
							var newRow = $elm$core$Array$fromList(
								_List_fromArray(
									[
										A2(
										$elm$core$Array$initialize,
										model.kp,
										$elm$core$Basics$always(''))
									]));
							var bottomHalf = A3($elm$core$Array$slice, i + 1, model.kq, model.iU);
							var newData = A2(
								$elm$core$Array$append,
								topHalf,
								A2($elm$core$Array$append, newRow, bottomHalf));
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{N: $elm$core$Maybe$Nothing, iU: newData, kq: model.kq + 1}),
								$elm$core$Maybe$Nothing);
						case 2:
							var _v23 = _v10.a;
							var _v24 = _v10.b.a;
							var i = _v24.a;
							var j = _v24.b;
							var addNewCell = function (row) {
								var rightHalf = A3($elm$core$Array$slice, j, model.kp, row);
								var leftHalf = A3($elm$core$Array$slice, 0, j, row);
								return A2(
									$elm$core$Array$append,
									A2($elm$core$Array$push, '', leftHalf),
									rightHalf);
							};
							var newData = A2($elm$core$Array$map, addNewCell, model.iU);
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{N: $elm$core$Maybe$Nothing, iU: newData, kp: model.kp + 1}),
								$elm$core$Maybe$Nothing);
						default:
							var _v25 = _v10.a;
							var _v26 = _v10.b.a;
							var i = _v26.a;
							var j = _v26.b;
							var addNewCell = function (row) {
								var rightHalf = A3($elm$core$Array$slice, j + 1, model.kp, row);
								var leftHalf = A3($elm$core$Array$slice, 0, j + 1, row);
								return A2(
									$elm$core$Array$append,
									A2($elm$core$Array$push, '', leftHalf),
									rightHalf);
							};
							var newData = A2($elm$core$Array$map, addNewCell, model.iU);
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{N: $elm$core$Maybe$Nothing, iU: newData, kp: model.kp + 1}),
								$elm$core$Maybe$Nothing);
					}
				}
			case 11:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							N: $elm$core$Maybe$Nothing,
							h: (!model.h) ? 1 : 0
						}),
					$elm$core$Maybe$Nothing);
			case 12:
				return _Utils_Tuple2(
					model,
					$elm$core$Maybe$Just(
						$author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData(
							$author$project$PageEditor$EditorPlugins$TablePlugin$toTableMeta(model))));
			default:
				return _Utils_Tuple2(
					model,
					$elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginQuit));
		}
	});
var $elm$core$String$words = _String_words;
var $author$project$PageEditor$EditorPlugins$VideoPlugin$parseHtml = function (str) {
	var propDict = $elm$core$Dict$fromList(
		A2(
			$elm$core$List$filterMap,
			function (mbPair) {
				_v1$2:
				while (true) {
					if (mbPair.b) {
						if (!mbPair.b.b) {
							var property = mbPair.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(property, 'True'));
						} else {
							if (!mbPair.b.b.b) {
								var property = mbPair.a;
								var _v2 = mbPair.b;
								var value = _v2.a;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(
										property,
										A3($elm$core$String$replace, '\"', '', value)));
							} else {
								break _v1$2;
							}
						}
					} else {
						break _v1$2;
					}
				}
				return $elm$core$Maybe$Nothing;
			},
			A2(
				$elm$core$List$map,
				$elm$core$String$split('='),
				A2(
					$elm$core$List$concatMap,
					$elm$core$String$split('?'),
					$elm$core$String$words(
						A2(
							$elm$core$String$dropRight,
							10,
							A3(
								$elm$core$String$replace,
								'></iframe>',
								'',
								A3($elm$core$String$replace, '<iframe ', '', str))))))));
	var mbNewSrc = A2(
		$elm$core$Maybe$map,
		$elm$core$List$head,
		A2(
			$elm$core$Maybe$map,
			$elm$core$List$reverse,
			A2(
				$elm$core$Maybe$map,
				$elm$core$String$split('/'),
				A2($elm$core$Dict$get, 'src', propDict))));
	if (!mbNewSrc.$) {
		var newSrc = mbNewSrc.a;
		return $elm$core$Maybe$Just(
			{
				iL: A2(
					$elm$core$Maybe$withDefault,
					true,
					A2(
						$elm$core$Maybe$map,
						function (v) {
							return !(v === '0');
						},
						A2($elm$core$Dict$get, 'controls', propDict))),
				jj: A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						function (v) {
							return v === '1';
						},
						A2($elm$core$Dict$get, 'frameborder', propDict))),
				jx: A2(
					$elm$core$Maybe$withDefault,
					315,
					A2(
						$elm$core$Maybe$andThen,
						$elm$core$String$toInt,
						A2($elm$core$Dict$get, 'height', propDict))),
				cM: newSrc,
				k_: A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						$elm$core$String$contains('nocookie'),
						A2($elm$core$Dict$get, 'src', propDict))),
				lL: A2(
					$elm$core$Maybe$andThen,
					$elm$core$String$toInt,
					A2($elm$core$Dict$get, 'start', propDict)),
				lU: A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						function (v) {
							return v === '1';
						},
						A2($elm$core$Dict$get, 'rel', propDict))),
				fP: A2(
					$elm$core$Maybe$withDefault,
					true,
					A2(
						$elm$core$Maybe$map,
						function (v) {
							return !(v === '0');
						},
						A2($elm$core$Dict$get, 'showinfo', propDict))),
				mt: A2(
					$elm$core$Maybe$withDefault,
					560,
					A2(
						$elm$core$Maybe$andThen,
						$elm$core$String$toInt,
						A2($elm$core$Dict$get, 'width', propDict)))
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$PageEditor$EditorPlugins$VideoPlugin$parseTime = function (str) {
	var _v0 = A2($elm$core$String$split, ':', str);
	if (!_v0.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		if (!_v0.b.b) {
			var ss = _v0.a;
			return $elm$core$String$toInt(ss);
		} else {
			if (!_v0.b.b.b) {
				var mm = _v0.a;
				var _v1 = _v0.b;
				var ss = _v1.a;
				var _v2 = _Utils_Tuple2(
					$elm$core$String$toInt(mm),
					$elm$core$String$toInt(ss));
				if ((!_v2.a.$) && (!_v2.b.$)) {
					var mm_ = _v2.a.a;
					var ss_ = _v2.b.a;
					return $elm$core$Maybe$Just((mm_ * 60) + ss_);
				} else {
					return $elm$core$Maybe$Nothing;
				}
			} else {
				if (!_v0.b.b.b.b) {
					var hh = _v0.a;
					var _v3 = _v0.b;
					var mm = _v3.a;
					var _v4 = _v3.b;
					var ss = _v4.a;
					var _v5 = _Utils_Tuple3(
						$elm$core$String$toInt(hh),
						$elm$core$String$toInt(mm),
						$elm$core$String$toInt(ss));
					if (((!_v5.a.$) && (!_v5.b.$)) && (!_v5.c.$)) {
						var hh_ = _v5.a.a;
						var mm_ = _v5.b.a;
						var ss_ = _v5.c.a;
						return $elm$core$Maybe$Just(((hh_ * 3600) + (mm_ * 60)) + ss_);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	}
};
var $author$project$PageEditor$EditorPlugins$VideoPlugin$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 0:
				var s = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							cR: $elm$core$Maybe$Just(s)
						}),
					$elm$core$Maybe$Nothing);
			case 1:
				var _v1 = A2($elm$core$Maybe$andThen, $author$project$PageEditor$EditorPlugins$VideoPlugin$parseHtml, model.cR);
				if (_v1.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
				} else {
					var res = _v1.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								iL: res.iL,
								jj: res.jj,
								cM: res.cM,
								k_: res.k_,
								fJ: A2($author$project$Document$Document$VideoSize, res.mt, res.jx),
								dS: res.mt / res.jx,
								lL: res.lL,
								lU: res.lU,
								fP: res.fP
							}),
						$elm$core$Maybe$Nothing);
				}
			case 2:
				var alignment = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{bQ: alignment}),
					$elm$core$Maybe$Nothing);
			case 3:
				var bool = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{jj: bool}),
					$elm$core$Maybe$Nothing);
			case 4:
				var bool = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{iL: bool}),
					$elm$core$Maybe$Nothing);
			case 5:
				var bool = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{k_: bool}),
					$elm$core$Maybe$Nothing);
			case 6:
				var bool = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{fP: bool}),
					$elm$core$Maybe$Nothing);
			case 7:
				var bool = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{lU: bool}),
					$elm$core$Maybe$Nothing);
			case 8:
				var s = msg.a;
				var _v2 = $author$project$PageEditor$EditorPlugins$VideoPlugin$parseTime(s);
				if (_v2.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
				} else {
					var t = _v2.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								lL: $elm$core$Maybe$Just(t)
							}),
						$elm$core$Maybe$Nothing);
				}
			case 9:
				var s = msg.a;
				var _v3 = $elm$core$String$toInt(s);
				if (!_v3.$) {
					var w = _v3.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								fJ: A2(
									$author$project$Document$Document$VideoSize,
									w,
									$elm$core$Basics$round(w / model.dS))
							}),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
				}
			case 10:
				var s = msg.a;
				var _v4 = $elm$core$String$toInt(s);
				if (!_v4.$) {
					var h = _v4.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								fJ: A2(
									$author$project$Document$Document$VideoSize,
									$elm$core$Basics$round(h * model.dS),
									h)
							}),
						$elm$core$Maybe$Nothing);
				} else {
					return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
				}
			case 12:
				var _v5 = model.cM;
				if (_v5.$ === 1) {
					var _v6 = model.et;
					if (_v6.$ === 1) {
						return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
					} else {
						var vm = _v6.a;
						var newVideoMeta = {iL: model.iL, jj: model.jj, jz: 0, k_: model.k_, fJ: model.fJ, fK: vm.fK, lL: model.lL, lU: model.lU, fP: model.fP};
						return _Utils_Tuple2(
							model,
							$elm$core$Maybe$Just(
								$author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData(
									_Utils_Tuple2(
										newVideoMeta,
										A2($author$project$PageEditor$Internals$DocumentEditorHelpers$setAligment, model.bQ, model.eR)))));
					}
				} else {
					var url = _v5.a;
					var newVideoMeta = {iL: model.iL, jj: model.jj, jz: 0, k_: model.k_, fJ: model.fJ, fK: url, lL: model.lL, lU: model.lU, fP: model.fP};
					return _Utils_Tuple2(
						model,
						$elm$core$Maybe$Just(
							$author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginData(
								_Utils_Tuple2(
									newVideoMeta,
									A2($author$project$PageEditor$Internals$DocumentEditorHelpers$setAligment, model.bQ, model.eR)))));
				}
			case 11:
				return _Utils_Tuple2(
					model,
					$elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$EditorPluginQuit));
			default:
				return _Utils_Tuple2(model, $elm$core$Maybe$Nothing);
		}
	});
var $author$project$PageEditor$Internals$DocumentZipper$updateCurrent = F2(
	function (_new, _v0) {
		var current = _v0.a3;
		var contexts = _v0.bu;
		return {bu: contexts, a3: _new};
	});
var $author$project$PageEditor$Internals$DocumentZipper$break = F2(
	function (p, xs) {
		var helper = F2(
			function (ys, left) {
				helper:
				while (true) {
					if (!ys.b) {
						return _Utils_Tuple2(left, _List_Nil);
					} else {
						var y = ys.a;
						var ys_ = ys.b;
						if (p(y)) {
							return _Utils_Tuple2(
								$elm$core$List$reverse(left),
								A2($elm$core$List$cons, y, ys_));
						} else {
							var $temp$ys = ys_,
								$temp$left = A2($elm$core$List$cons, y, left);
							ys = $temp$ys;
							left = $temp$left;
							continue helper;
						}
					}
				}
			});
		return A2(helper, xs, _List_Nil);
	});
var $author$project$PageEditor$Internals$DocumentZipper$zipDown = F2(
	function (p, _v0) {
		var current = _v0.a3;
		var contexts = _v0.bu;
		if (current.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!current.b.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var nv = current.a;
				var ds = current.b;
				var _v2 = A2($author$project$PageEditor$Internals$DocumentZipper$break, p, ds);
				var l = _v2.a;
				var r = _v2.b;
				if (!r.b) {
					return $elm$core$Maybe$Nothing;
				} else {
					var d = r.a;
					var ds_ = r.b;
					return $elm$core$Maybe$Just(
						{
							bu: A2(
								$elm$core$List$cons,
								{bc: l, eF: nv, bl: ds_},
								contexts),
							a3: d
						});
				}
			}
		}
	});
var $author$project$Document$Document$getUid = function (doc) {
	if (doc.$ === 1) {
		var cellContent = doc.a.at;
		var id = doc.a.a;
		var attrs = doc.a.y;
		return id.cW;
	} else {
		var containerLabel = doc.a.bs;
		var id = doc.a.a;
		var attrs = doc.a.y;
		return id.cW;
	}
};
var $author$project$PageEditor$Internals$DocumentZipper$zipToUid = F2(
	function (uid, docZipper) {
		var helper = function (zipper) {
			var current = zipper.a3;
			var contexts = zipper.bu;
			if (_Utils_eq(
				$author$project$Document$Document$getUid(current),
				uid)) {
				return $elm$core$Maybe$Just(zipper);
			} else {
				if (current.$ === 1) {
					return $elm$core$Maybe$Nothing;
				} else {
					var children = current.b;
					var nextStep = function (child) {
						return A2(
							$elm$core$Maybe$andThen,
							helper,
							A2(
								$author$project$PageEditor$Internals$DocumentZipper$zipDown,
								function (d) {
									return _Utils_eq(
										$author$project$Document$Document$getUid(d),
										$author$project$Document$Document$getUid(child));
								},
								zipper));
					};
					return $elm$core$List$head(
						A2($elm$core$List$filterMap, nextStep, children));
				}
			}
		};
		return helper(
			$author$project$PageEditor$Internals$DocumentZipper$rewind(docZipper));
	});
var $author$project$PageEditor$PageEditor$internalUpdate = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 0:
				var vp = msg.a;
				var ws = model.f;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							f: _Utils_update(
								ws,
								{
									jx: $elm$core$Basics$round(vp.hJ.jx),
									eH: (vp.hJ.mt < 1300) ? 2 : 1,
									mt: $elm$core$Basics$round(vp.hJ.mt)
								})
						}),
					$elm$core$Platform$Cmd$none);
			case 2:
				var res = msg.a;
				if (!res.$) {
					var viewport = res.a.hJ;
					var currentConfig = model.f;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								f: _Utils_update(
									currentConfig,
									{
										kb: $elm$core$Basics$round(viewport.jx)
									})
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					var s = res.a;
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 1:
				var width = msg.a;
				var height = msg.b;
				var cfg = model.f;
				var newConfig = _Utils_update(
					cfg,
					{jx: height, mt: width});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{f: newConfig}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$elm$core$Task$attempt,
								A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$MainInterfaceViewport),
								$elm$browser$Browser$Dom$getViewportOf('mainInterface'))
							])));
			case 3:
				var id = msg.a;
				return _Utils_Tuple2(
					model,
					A2(
						$elm$core$Platform$Cmd$map,
						model.bY,
						$author$project$PageEditor$PageEditor$scrollTo(id)));
			case 4:
				var s = msg.a;
				return (s === 'Control') ? _Utils_Tuple2(
					_Utils_update(
						model,
						{ed: true}),
					$elm$core$Platform$Cmd$none) : _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 5:
				var s = msg.a;
				return (s === 'Control') ? _Utils_Tuple2(
					_Utils_update(
						model,
						{ed: false}),
					$elm$core$Platform$Cmd$none) : _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 6:
				var uid = msg.a;
				var _v2 = A2(
					$author$project$PageEditor$Internals$DocumentZipper$zipDown,
					$author$project$Document$Document$hasUid(uid),
					model.i2);
				if (_v2.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var newDocument = _v2.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{i2: newDocument}),
						$elm$core$Platform$Cmd$none);
				}
			case 7:
				var uid = msg.a;
				var _v3 = A2($author$project$PageEditor$Internals$DocumentZipper$zipToUid, uid, model.i2);
				if (_v3.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var newDocument = _v3.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{i2: newDocument}),
						A2(
							$elm$core$Platform$Cmd$map,
							model.bY,
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										$author$project$PageEditor$PageEditor$scrollTo(
										$author$project$Document$Document$getHtmlId(
											$author$project$PageEditor$Internals$DocumentZipper$extractDoc(newDocument)))
									]))));
				}
			case 8:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							i2: $author$project$PageEditor$Internals$DocumentZipper$rewind(model.i2)
						}),
					$elm$core$Platform$Cmd$none);
			case 9:
				var _v4 = $author$project$PageEditor$Internals$DocumentZipper$swapLeft(model.i2);
				if (_v4.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var newDoc = _v4.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{i2: newDoc}),
						A2(
							$elm$core$Platform$Cmd$map,
							model.bY,
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										$author$project$PageEditor$PageEditor$scrollTo(
										$author$project$Document$Document$getHtmlId(
											$author$project$PageEditor$Internals$DocumentZipper$extractDoc(newDoc)))
									]))));
				}
			case 10:
				var _v5 = $author$project$PageEditor$Internals$DocumentZipper$swapRight(model.i2);
				if (_v5.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var newDoc = _v5.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{i2: newDoc}),
						A2(
							$elm$core$Platform$Cmd$map,
							model.bY,
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										$author$project$PageEditor$PageEditor$scrollTo(
										$author$project$Document$Document$getHtmlId(
											$author$project$PageEditor$Internals$DocumentZipper$extractDoc(newDoc)))
									]))));
				}
			case 11:
				return A2($author$project$PageEditor$PageEditor$openPlugin, config, model);
			case 12:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							b: $elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$ContainerEditPlugin)
						}),
					$elm$core$Platform$Cmd$none);
			case 13:
				var containerLabel = msg.a;
				var _v6 = $author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2);
				if (!_v6.$) {
					var cv = _v6.a;
					var children = _v6.b;
					var newDoc = A2(
						$author$project$Document$Document$Container,
						_Utils_update(
							cv,
							{bs: containerLabel}),
						children);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								b: $elm$core$Maybe$Nothing,
								i2: A2($author$project$PageEditor$Internals$DocumentZipper$updateCurrent, newDoc, model.i2)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 14:
				var _v7 = msg.a;
				var mbToRemove = _v7.a;
				var mbToAdd = _v7.b;
				var _v8 = $author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2);
				if (!_v8.$) {
					var cv = _v8.a;
					var children = _v8.b;
					var removeFun = A2(
						$elm$core$Maybe$withDefault,
						$elm$core$Basics$identity,
						A2($elm$core$Maybe$map, $elm_community$list_extra$List$Extra$remove, mbToRemove));
					var addFun = A2(
						$elm$core$Maybe$withDefault,
						$elm$core$Basics$identity,
						A2(
							$elm$core$Maybe$map,
							F2(
								function (toAdd, attrs) {
									return A2($elm$core$List$member, toAdd, attrs) ? attrs : _Utils_ap(
										attrs,
										_List_fromArray(
											[toAdd]));
								}),
							mbToAdd));
					var newAttrs = addFun(
						removeFun(cv.y));
					var newDoc = A2(
						$author$project$Document$Document$Container,
						_Utils_update(
							cv,
							{y: newAttrs}),
						children);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								b: $elm$core$Maybe$Nothing,
								i2: A2($author$project$PageEditor$Internals$DocumentZipper$updateCurrent, newDoc, model.i2)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 15:
				var _v9 = A2($author$project$PageEditor$Internals$DocumentZipper$addNewInside, model.gU, model.i2);
				if (_v9.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var newDoc = _v9.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{i2: newDoc, gU: model.gU + 1}),
						$elm$core$Platform$Cmd$none);
				}
			case 16:
				var _v10 = A2($author$project$PageEditor$Internals$DocumentZipper$addNewLeft, model.gU, model.i2);
				if (_v10.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var newDoc = _v10.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{i2: newDoc, gU: model.gU + 1}),
						A2(
							$elm$core$Platform$Cmd$map,
							model.bY,
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										$author$project$PageEditor$PageEditor$scrollTo(
										$author$project$Document$Document$getHtmlId(
											$author$project$PageEditor$Internals$DocumentZipper$extractDoc(newDoc)))
									]))));
				}
			case 17:
				var _v11 = A2($author$project$PageEditor$Internals$DocumentZipper$addNewRight, model.gU, model.i2);
				if (_v11.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var newDoc = _v11.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{i2: newDoc, gU: model.gU + 1}),
						A2(
							$elm$core$Platform$Cmd$map,
							model.bY,
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										$author$project$PageEditor$PageEditor$scrollTo(
										$author$project$Document$Document$getHtmlId(
											$author$project$PageEditor$Internals$DocumentZipper$extractDoc(newDoc)))
									]))));
				}
			case 18:
				var containerLabel = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							b: $elm$core$Maybe$Nothing,
							i2: A2(
								$author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
								A2($author$project$PageEditor$Internals$DocumentEditorHelpers$newContainer, model.gU, containerLabel),
								model.i2),
							gU: model.gU + 2
						}),
					$elm$core$Platform$Cmd$batch(_List_Nil));
			case 19:
				var plugin = msg.a;
				var _v12 = A2(
					$author$project$PageEditor$PageEditor$openNewPlugin,
					config,
					_Utils_update(
						model,
						{
							b: $elm$core$Maybe$Just(plugin)
						}));
				var newModel = _v12.a;
				var cmd = _v12.b;
				return _Utils_Tuple2(
					_Utils_update(
						newModel,
						{gU: model.gU + 1}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[cmd])));
			case 20:
				var cellContent = msg.a;
				var _v13 = $author$project$PageEditor$EditorPlugins$NewDocPlugin$cellContStrToCellContent(cellContent);
				if (!_v13.$) {
					var cellContent_ = _v13.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								b: $elm$core$Maybe$Nothing,
								i2: A2(
									$author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
									A2($author$project$PageEditor$Internals$DocumentEditorHelpers$newCell, model.gU, cellContent_),
									model.i2),
								gU: model.gU + 1
							}),
						$elm$core$Platform$Cmd$batch(_List_Nil));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 21:
				var newDoc = A2($author$project$PageEditor$Internals$DocumentZipper$safeDeleteCurrent, model.gU, model.i2);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							i2: A2($elm$core$Maybe$withDefault, model.i2, newDoc),
							bN: A2(
								$elm$core$List$take,
								$author$project$PageEditor$PageEditor$undoCacheDepth,
								A2($elm$core$List$cons, model.i2, model.bN))
						}),
					$elm$core$Platform$Cmd$none);
			case 22:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							cu: $elm$core$Maybe$Just(
								$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2))
						}),
					$elm$core$Platform$Cmd$none);
			case 23:
				var newDoc = A2($author$project$PageEditor$Internals$DocumentZipper$safeDeleteCurrent, model.gU, model.i2);
				var currentDoc = $author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							cu: $elm$core$Maybe$Just(currentDoc),
							i2: A2($elm$core$Maybe$withDefault, model.i2, newDoc),
							gU: model.gU + 1,
							bN: A2(
								$elm$core$List$take,
								$author$project$PageEditor$PageEditor$undoCacheDepth,
								A2($elm$core$List$cons, model.i2, model.bN))
						}),
					$elm$core$Platform$Cmd$none);
			case 24:
				var _v14 = _Utils_Tuple2(
					$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2),
					model.cu);
				if ((!_v14.a.$) && (!_v14.b.$)) {
					var _v15 = _v14.a;
					var cv = _v15.a;
					var xs = _v15.b;
					var doc = _v14.b.a;
					var newDoc = A2(
						$author$project$Document$Document$Container,
						cv,
						_Utils_ap(
							xs,
							_List_fromArray(
								[
									A2($author$project$PageEditor$Internals$DocumentEditorHelpers$fixUids, model.gU, doc)
								])));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								cu: $elm$core$Maybe$Nothing,
								i2: A2($author$project$PageEditor$Internals$DocumentZipper$updateCurrent, newDoc, model.i2),
								gU: $author$project$PageEditor$Internals$DocumentEditorHelpers$maxUid(newDoc) + 1
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 25:
				var _v16 = model.bN;
				if (!_v16.b) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var zipper = _v16.a;
					var xs = _v16.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{i2: zipper, bN: xs}),
						$elm$core$Platform$Cmd$none);
				}
			case 26:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{cJ: !model.cJ}),
					$elm$core$Platform$Cmd$none);
			case 27:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{cJ: false}),
					$elm$core$Platform$Cmd$none);
			case 28:
				var label = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{eu: label}),
					$elm$core$Platform$Cmd$none);
			case 29:
				var pm = msg.a;
				var config_ = model.f;
				var newConfig = _Utils_update(
					config_,
					{eH: pm});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{f: newConfig}),
					$elm$core$Platform$Cmd$none);
			case 30:
				var season = msg.a;
				var config_ = model.f;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							f: _Utils_update(
								config_,
								{lj: season})
						}),
					$elm$core$Platform$Cmd$none);
			case 31:
				var config_ = model.f;
				var newConfig = _Utils_update(
					config_,
					{e1: !config_.e1});
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{f: newConfig}),
					$elm$core$Platform$Cmd$none);
			case 32:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{aL: !model.aL}),
					$elm$core$Platform$Cmd$none);
			case 33:
				var mbPlugin = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{b: mbPlugin}),
					$elm$core$Platform$Cmd$none);
			case 34:
				var tableMsg = msg.a;
				var _v17 = A2($author$project$PageEditor$EditorPlugins$TablePlugin$update, tableMsg, model.cn);
				var newTablePlugin = _v17.a;
				var mbEditorPluginResult = _v17.b;
				if (mbEditorPluginResult.$ === 1) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{cn: newTablePlugin}),
						$elm$core$Platform$Cmd$none);
				} else {
					if (!mbEditorPluginResult.a.$) {
						var _v19 = mbEditorPluginResult.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{b: $elm$core$Maybe$Nothing, cn: newTablePlugin}),
							A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								$elm$core$Platform$Cmd$batch(
									_List_fromArray(
										[
											$author$project$PageEditor$PageEditor$scrollTo(
											$author$project$Document$Document$getHtmlId(
												$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2)))
										]))));
					} else {
						var tm = mbEditorPluginResult.a.a;
						var newDoc = A2(
							$author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
							$author$project$Document$Document$Cell(
								{
									y: $author$project$Document$Document$getAttrs(
										$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2)),
									at: $author$project$Document$Document$Table(tm),
									a: $author$project$Document$Document$getId(
										$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2))
								}),
							model.i2);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{b: $elm$core$Maybe$Nothing, i2: newDoc}),
							A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								$elm$core$Platform$Cmd$batch(
									_List_fromArray(
										[
											$author$project$PageEditor$PageEditor$scrollTo(
											$author$project$Document$Document$getHtmlId(
												$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2)))
										]))));
					}
				}
			case 35:
				var textBlockMsg = msg.a;
				var _v20 = A3(
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$update,
					{J: config.J},
					textBlockMsg,
					model.co);
				var newTextBlockPlugin = _v20.a;
				var textBlockPluginCmds = _v20.b;
				var mbEditorPluginResult = _v20.c;
				if (mbEditorPluginResult.$ === 1) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{co: newTextBlockPlugin}),
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[textBlockPluginCmds])));
				} else {
					if (!mbEditorPluginResult.a.$) {
						var _v22 = mbEditorPluginResult.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{b: $elm$core$Maybe$Nothing, co: newTextBlockPlugin}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										$elm$core$Platform$Cmd$map,
										model.bY,
										$author$project$PageEditor$PageEditor$scrollTo(
											$author$project$Document$Document$getHtmlId(
												$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2)))),
										textBlockPluginCmds
									])));
					} else {
						var _v23 = mbEditorPluginResult.a.a;
						var tbElems = _v23.a;
						var attrs = _v23.b;
						var newDoc = A2(
							$author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
							$author$project$Document$Document$Cell(
								{
									y: attrs,
									at: $author$project$Document$Document$TextBlock(tbElems),
									a: $author$project$Document$Document$getId(
										$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2))
								}),
							model.i2);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{b: $elm$core$Maybe$Nothing, i2: newDoc}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										$elm$core$Platform$Cmd$map,
										model.bY,
										$author$project$PageEditor$PageEditor$scrollTo(
											$author$project$Document$Document$getHtmlId(
												$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2)))),
										textBlockPluginCmds
									])));
					}
				}
			case 36:
				var imgPlugMsg = msg.a;
				var _v24 = A3($author$project$PageEditor$EditorPlugins$ImagePlugin$update, config, imgPlugMsg, model.b2);
				var newImagePlugin = _v24.a;
				var imagePluginCmds = _v24.b;
				var mbEditorPluginResult = _v24.c;
				if (mbEditorPluginResult.$ === 1) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{b2: newImagePlugin}),
						imagePluginCmds);
				} else {
					if (!mbEditorPluginResult.a.$) {
						var _v26 = mbEditorPluginResult.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{b: $elm$core$Maybe$Nothing, b2: newImagePlugin}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										$elm$core$Platform$Cmd$map,
										model.bY,
										$author$project$PageEditor$PageEditor$scrollTo(
											$author$project$Document$Document$getHtmlId(
												$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2)))),
										imagePluginCmds
									])));
					} else {
						var _v27 = mbEditorPluginResult.a.a;
						var imgMeta = _v27.a;
						var attrs = _v27.b;
						var newDoc = A2(
							$author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
							$author$project$Document$Document$Cell(
								{
									y: attrs,
									at: $author$project$Document$Document$Image(imgMeta),
									a: $author$project$Document$Document$getId(
										$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2))
								}),
							model.i2);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{b: $elm$core$Maybe$Nothing, i2: newDoc}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										$elm$core$Platform$Cmd$map,
										model.bY,
										$author$project$PageEditor$PageEditor$scrollTo(
											$author$project$Document$Document$getHtmlId(
												$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2)))),
										imagePluginCmds
									])));
					}
				}
			case 37:
				var vidPlugMsg = msg.a;
				var _v28 = A2($author$project$PageEditor$EditorPlugins$VideoPlugin$update, vidPlugMsg, model.cq);
				var newVideoPlugin = _v28.a;
				var mbEditorPluginResult = _v28.b;
				if (mbEditorPluginResult.$ === 1) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{cq: newVideoPlugin}),
						$elm$core$Platform$Cmd$none);
				} else {
					if (!mbEditorPluginResult.a.$) {
						var _v30 = mbEditorPluginResult.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{b: $elm$core$Maybe$Nothing, cq: newVideoPlugin}),
							A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								$author$project$PageEditor$PageEditor$scrollTo(
									$author$project$Document$Document$getHtmlId(
										$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2)))));
					} else {
						var _v31 = mbEditorPluginResult.a.a;
						var videoMeta = _v31.a;
						var attrs = _v31.b;
						var newDoc = A2(
							$author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
							$author$project$Document$Document$Cell(
								{
									y: attrs,
									at: $author$project$Document$Document$Video(videoMeta),
									a: $author$project$Document$Document$getId(
										$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2))
								}),
							model.i2);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{b: $elm$core$Maybe$Nothing, i2: newDoc}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										$elm$core$Platform$Cmd$map,
										model.bY,
										$author$project$PageEditor$PageEditor$scrollTo(
											$author$project$Document$Document$getHtmlId(
												$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2))))
									])));
					}
				}
			case 38:
				var blockLinksPluginMsg = msg.a;
				var _v32 = A2($author$project$PageEditor$EditorPlugins$BlockLinksPlugin$update, blockLinksPluginMsg, model.bS);
				var newBlockLinksPlugin = _v32.a;
				var mbEditorPluginResult = _v32.b;
				if (mbEditorPluginResult.$ === 1) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{bS: newBlockLinksPlugin}),
						$elm$core$Platform$Cmd$none);
				} else {
					if (!mbEditorPluginResult.a.$) {
						var _v34 = mbEditorPluginResult.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{bS: newBlockLinksPlugin, b: $elm$core$Maybe$Nothing}),
							A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								$author$project$PageEditor$PageEditor$scrollTo(
									$author$project$Document$Document$getHtmlId(
										$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2)))));
					} else {
						var newBlockLinks = mbEditorPluginResult.a.a;
						var newDoc = A2(
							$author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
							$author$project$Document$Document$Cell(
								{
									y: _List_Nil,
									at: newBlockLinks,
									a: $author$project$Document$Document$getId(
										$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2))
								}),
							model.i2);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{b: $elm$core$Maybe$Nothing, i2: newDoc}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										$elm$core$Platform$Cmd$map,
										model.bY,
										$author$project$PageEditor$PageEditor$scrollTo(
											$author$project$Document$Document$getHtmlId(
												$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2))))
									])));
					}
				}
			case 39:
				var fichesPluginMsg = msg.a;
				var _v35 = A3($author$project$PageEditor$EditorPlugins$FichesPlugin$update, config, fichesPluginMsg, model.bZ);
				var newFichesPlugin = _v35.a;
				var mbEditorPluginResult = _v35.b;
				if (mbEditorPluginResult.$ === 1) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{bZ: newFichesPlugin}),
						$elm$core$Platform$Cmd$none);
				} else {
					if (!mbEditorPluginResult.a.$) {
						var _v37 = mbEditorPluginResult.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{b: $elm$core$Maybe$Nothing, bZ: newFichesPlugin}),
							A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								$author$project$PageEditor$PageEditor$scrollTo(
									$author$project$Document$Document$getHtmlId(
										$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2)))));
					} else {
						var newFichesIds = mbEditorPluginResult.a.a;
						var newDoc = A2(
							$author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
							$author$project$Document$Document$Cell(
								{
									y: _List_Nil,
									at: $author$project$Document$Document$Fiches(newFichesIds),
									a: $author$project$Document$Document$getId(
										$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2))
								}),
							model.i2);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{b: $elm$core$Maybe$Nothing, i2: newDoc}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										$elm$core$Platform$Cmd$map,
										model.bY,
										$author$project$PageEditor$PageEditor$scrollTo(
											$author$project$Document$Document$getHtmlId(
												$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2))))
									])));
					}
				}
			case 40:
				var pictureLinksPluginMsg = msg.a;
				var _v38 = A2($author$project$PageEditor$EditorPlugins$PictureLinksPlugin$update, pictureLinksPluginMsg, model.cf);
				var newPictureLinksPlugin = _v38.a;
				var mbEditorPluginResult = _v38.b;
				if (mbEditorPluginResult.$ === 1) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{cf: newPictureLinksPlugin}),
						$elm$core$Platform$Cmd$none);
				} else {
					if (!mbEditorPluginResult.a.$) {
						var _v40 = mbEditorPluginResult.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{b: $elm$core$Maybe$Nothing, cf: newPictureLinksPlugin}),
							A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								$author$project$PageEditor$PageEditor$scrollTo(
									$author$project$Document$Document$getHtmlId(
										$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2)))));
					} else {
						var newPictureLinks = mbEditorPluginResult.a.a;
						var newDoc = A2(
							$author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
							$author$project$Document$Document$Cell(
								{
									y: _List_Nil,
									at: $author$project$Document$Document$PictureLinks(newPictureLinks),
									a: $author$project$Document$Document$getId(
										$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2))
								}),
							model.i2);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{b: $elm$core$Maybe$Nothing, i2: newDoc}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										$elm$core$Platform$Cmd$map,
										model.bY,
										$author$project$PageEditor$PageEditor$scrollTo(
											$author$project$Document$Document$getHtmlId(
												$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2))))
									])));
					}
				}
			case 41:
				var galleryPluginMsg = msg.a;
				var _v41 = A3(
					$author$project$PageEditor$EditorPlugins$GalleryPlugin$update,
					{eT: config.eT, be: config.be, hd: config.hd},
					galleryPluginMsg,
					model.bD);
				var newGalleryPlugin = _v41.a;
				var galleryCmd = _v41.b;
				var mbGalleryPluginResult = _v41.c;
				if (mbGalleryPluginResult.$ === 1) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{bD: newGalleryPlugin}),
						galleryCmd);
				} else {
					if (!mbGalleryPluginResult.a.$) {
						var _v43 = mbGalleryPluginResult.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{b: $elm$core$Maybe$Nothing, bD: newGalleryPlugin}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										$elm$core$Platform$Cmd$map,
										model.bY,
										$author$project$PageEditor$PageEditor$scrollTo(
											$author$project$Document$Document$getHtmlId(
												$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2)))),
										galleryCmd
									])));
					} else {
						var newGalleryMeta = mbGalleryPluginResult.a.a;
						var newDoc = A2(
							$author$project$PageEditor$Internals$DocumentZipper$updateCurrent,
							$author$project$Document$Document$Cell(
								{
									y: _List_Nil,
									at: $author$project$Document$Document$Gallery(newGalleryMeta),
									a: $author$project$Document$Document$getId(
										$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2))
								}),
							model.i2);
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{b: $elm$core$Maybe$Nothing, i2: newDoc}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										$elm$core$Platform$Cmd$map,
										model.bY,
										$author$project$PageEditor$PageEditor$scrollTo(
											$author$project$Document$Document$getHtmlId(
												$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2)))),
										galleryCmd
									])));
					}
				}
			case 42:
				var _v44 = A2(
					$elm$core$Maybe$map,
					$elm$json$Json$Decode$decodeValue($author$project$Document$Json$DocumentDecoder$decodeDocument),
					model.bd);
				if ((!_v44.$) && (!_v44.a.$)) {
					var newDoc = _v44.a.a;
					var _v45 = A2(
						$author$project$PageEditor$PageEditor$reset,
						$elm$core$Maybe$Just(newDoc),
						model.bY);
					var newModel = _v45.a;
					var cmd = _v45.b;
					return _Utils_Tuple2(
						_Utils_update(
							newModel,
							{
								b: $elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$PersistencePlugin)
							}),
						cmd);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 43:
				var key = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ep: key}),
					$elm$core$Platform$Cmd$none);
			case 44:
				var val = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							fq: function (res) {
								if (!res.$) {
									var json = res.a;
									return $emilianobovetti$elm_yajson$Yajson$Stringify$pretty(json);
								} else {
									var error = res.a;
									return 'error';
								}
							}(
								$emilianobovetti$elm_yajson$Yajson$fromValue(val)),
							bd: $elm$core$Maybe$Just(val)
						}),
					$elm$core$Platform$Cmd$none);
			case 45:
				var s = msg.a;
				var newLocalStorageValue = function () {
					var _v48 = A2($elm$json$Json$Decode$decodeString, $elm$json$Json$Decode$value, s);
					if (!_v48.$) {
						var value = _v48.a;
						return $elm$core$Maybe$Just(value);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}();
				var newBuffer = function (res) {
					if (!res.$) {
						var json = res.a;
						return $emilianobovetti$elm_yajson$Yajson$Stringify$pretty(json);
					} else {
						var error = res.a;
						return 'error';
					}
				}(
					$emilianobovetti$elm_yajson$Yajson$fromValue(
						A2($elm$core$Maybe$withDefault, $elm$json$Json$Encode$null, newLocalStorageValue)));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{fq: newBuffer, bd: newLocalStorageValue}),
					$elm$core$Platform$Cmd$none);
			case 46:
				return _Utils_Tuple2(
					model,
					A2(
						$elm$core$Platform$Cmd$map,
						model.bY,
						A3(
							$billstclair$elm_localstorage$PortFunnel$LocalStorage$send,
							$author$project$PageEditor$PageEditor$cmdPort,
							$billstclair$elm_localstorage$PortFunnel$LocalStorage$get(model.ep),
							model.bC.bp)));
			case 47:
				return _Utils_Tuple2(
					model,
					A2(
						$elm$core$Platform$Cmd$map,
						model.bY,
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A3(
									$billstclair$elm_localstorage$PortFunnel$LocalStorage$send,
									$author$project$PageEditor$PageEditor$cmdPort,
									A2($billstclair$elm_localstorage$PortFunnel$LocalStorage$put, model.ep, model.bd),
									model.bC.bp),
									A3($andrewMacmurray$elm_delay$Delay$after, 500, 0, $author$project$PageEditor$PageEditor$ListKeys)
								]))));
			case 48:
				return _Utils_Tuple2(
					model,
					A2(
						$elm$core$Platform$Cmd$map,
						model.bY,
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A3(
									$billstclair$elm_localstorage$PortFunnel$LocalStorage$send,
									$author$project$PageEditor$PageEditor$cmdPort,
									A2($billstclair$elm_localstorage$PortFunnel$LocalStorage$put, model.ep, $elm$core$Maybe$Nothing),
									model.bC.bp),
									A3($andrewMacmurray$elm_delay$Delay$after, 500, 0, $author$project$PageEditor$PageEditor$ListKeys)
								]))));
			case 49:
				return _Utils_Tuple2(
					model,
					A2(
						$elm$core$Platform$Cmd$map,
						model.bY,
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									A3(
									$billstclair$elm_localstorage$PortFunnel$LocalStorage$send,
									$author$project$PageEditor$PageEditor$cmdPort,
									$billstclair$elm_localstorage$PortFunnel$LocalStorage$clear(''),
									model.bC.bp),
									A3($andrewMacmurray$elm_delay$Delay$after, 500, 0, $author$project$PageEditor$PageEditor$ListKeys)
								]))));
			case 50:
				return _Utils_Tuple2(
					model,
					A2(
						$elm$core$Platform$Cmd$map,
						model.bY,
						A3(
							$billstclair$elm_localstorage$PortFunnel$LocalStorage$send,
							$author$project$PageEditor$PageEditor$cmdPort,
							$billstclair$elm_localstorage$PortFunnel$LocalStorage$listKeys(''),
							model.bC.bp)));
			case 51:
				var val = msg.a;
				var _v49 = $billstclair$elm_port_funnel$PortFunnel$decodeGenericMessage(val);
				if (_v49.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var genericMessage = _v49.a;
					var moduleName = genericMessage.ki;
					var _v50 = A2($elm$core$Dict$get, moduleName, $author$project$PageEditor$PageEditor$funnels);
					if (!_v50.$) {
						var funnel = _v50.a;
						var storFunnel = funnel;
						var _v52 = A5($billstclair$elm_port_funnel$PortFunnel$appProcess, $author$project$PageEditor$PageEditor$cmdPort, genericMessage, storFunnel, model.bC, model);
						if (_v52.$ === 1) {
							return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
						} else {
							var _v53 = _v52.a;
							var mdl = _v53.a;
							var cmd = _v53.b;
							var newBuffer = function (res) {
								if (!res.$) {
									var json = res.a;
									return $emilianobovetti$elm_yajson$Yajson$Stringify$pretty(json);
								} else {
									var error = res.a;
									return 'error';
								}
							}(
								$emilianobovetti$elm_yajson$Yajson$fromValue(
									A2($elm$core$Maybe$withDefault, $elm$json$Json$Encode$null, mdl.bd)));
							return _Utils_Tuple2(
								_Utils_update(
									mdl,
									{fq: newBuffer}),
								$elm$core$Platform$Cmd$batch(
									_List_fromArray(
										[cmd])));
						}
					} else {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					}
				}
			case 52:
				return _Utils_Tuple2(
					model,
					A2(
						$elm$core$Task$perform,
						A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$DownloadCurrentPage),
						$elm$time$Time$now));
			case 53:
				var time = msg.a;
				var path = $author$project$PageTreeEditor$PageTreeEditor$getFileIoPath(config.J);
				var pageName = function () {
					var _v56 = $author$project$PageTreeEditor$PageTreeEditor$fileIoSelectedPageInfo(config.J);
					if (!_v56.$) {
						var name = _v56.a.I;
						return name;
					} else {
						return 'nouvelle page';
					}
				}();
				var filename = pageName + (' ' + (A2($author$project$Internals$CommonHelpers$timeToStr, config.fY, time) + '.json'));
				var content = function (res) {
					if (!res.$) {
						var json = res.a;
						return $emilianobovetti$elm_yajson$Yajson$Stringify$pretty(json);
					} else {
						var error = res.a;
						return 'page invalide';
					}
				}(
					$emilianobovetti$elm_yajson$Yajson$fromValue(
						function (doc) {
							return $elm$json$Json$Encode$object(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'path',
										A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, path)),
										_Utils_Tuple2('document', doc)
									]));
						}(
							$author$project$Document$Json$DocumentSerializer$encodeDocument(
								$author$project$PageEditor$Internals$DocumentZipper$extractDoc(
									$author$project$PageEditor$Internals$DocumentZipper$rewind(model.i2))))));
				return _Utils_Tuple2(
					model,
					A3($elm$file$File$Download$string, filename, 'text/json', content));
			case 54:
				return _Utils_Tuple2(
					model,
					A2(
						$elm$core$Platform$Cmd$map,
						model.bY,
						A2(
							$elm$file$File$Select$file,
							_List_fromArray(
								['text/json']),
							$author$project$PageEditor$PageEditor$GotFile)));
			case 55:
				var file = msg.a;
				return _Utils_Tuple2(
					model,
					A2(
						$elm$core$Task$perform,
						A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$LoadFileContent),
						$elm$file$File$toString(file)));
			case 56:
				var content = msg.a;
				var pageDecoder = A3(
					$elm$json$Json$Decode$map2,
					$elm$core$Tuple$pair,
					A2(
						$elm$json$Json$Decode$field,
						'path',
						$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
					A2($elm$json$Json$Decode$field, 'document', $author$project$Document$Json$DocumentDecoder$decodeDocument));
				var _v57 = A2($elm$json$Json$Decode$decodeString, pageDecoder, content);
				if (!_v57.$) {
					var _v58 = _v57.a;
					var path = _v58.a;
					var newDoc = _v58.b;
					var _v59 = A2(
						$author$project$PageEditor$PageEditor$reset,
						$elm$core$Maybe$Just(newDoc),
						model.bY);
					var newModel = _v59.a;
					var cmd = _v59.b;
					return _Utils_Tuple2(
						newModel,
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									cmd,
									A2($author$project$PageTreeEditor$PageTreeEditor$setFileIoSelection, config.J, path)
								])));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 57:
				var _v60 = A2($author$project$PageEditor$PageEditor$reset, $elm$core$Maybe$Nothing, model.bY);
				var newModel = _v60.a;
				var cmd = _v60.b;
				return _Utils_Tuple2(
					_Utils_update(
						newModel,
						{b: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								cmd,
								$author$project$PageTreeEditor$PageTreeEditor$resetFileIoSelected(config.J)
							])));
			case 58:
				var _v61 = $author$project$PageTreeEditor$PageTreeEditor$loadedContent(config.J);
				if (!_v61.$) {
					var docContent = _v61.a.i0;
					var _v62 = A2(
						$author$project$PageEditor$PageEditor$reset,
						$elm$core$Maybe$Just(docContent),
						model.bY);
					var newModel = _v62.a;
					var cmd = _v62.b;
					return _Utils_Tuple2(
						_Utils_update(
							newModel,
							{b: $elm$core$Maybe$Nothing}),
						cmd);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			default:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$PageEditor$PageEditor$update = F3(
	function (config, msg, model) {
		var _v0 = A3($author$project$PageEditor$PageEditor$internalUpdate, config, msg, model);
		var newModel = _v0.a;
		var cmds = _v0.b;
		return _Utils_Tuple3(newModel, cmds, $elm$core$Maybe$Nothing);
	});
var $author$project$PageTreeEditor$PageTreeEditor$SaveContent = function (a) {
	return {$: 10, a: a};
};
var $author$project$PageTreeEditor$PageTreeEditor$Content = F3(
	function (contentId, jsonContent, docContent) {
		return {eb: contentId, i0: docContent, gK: jsonContent};
	});
var $author$project$PageTreeEditor$PageTreeEditor$decodeContent = A3(
	$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
	'jsonContent',
	$author$project$Document$Json$DocumentDecoder$decodeDocument,
	A3(
		$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
		'jsonContent',
		$elm$json$Json$Decode$value,
		A3(
			$NoRedInk$elm_json_decode_pipeline$Json$Decode$Pipeline$required,
			'contentId',
			$author$project$PageTreeEditor$PageTreeEditor$decodeUUID,
			$elm$json$Json$Decode$succeed($author$project$PageTreeEditor$PageTreeEditor$Content))));
var $author$project$PageTreeEditor$PageTreeEditor$decodeContents = A2(
	$elm$json$Json$Decode$map,
	$elm$core$Dict$fromList,
	A2(
		$elm$json$Json$Decode$map,
		$elm$core$List$map(
			function (c) {
				return _Utils_Tuple2(
					$TSFoster$elm_uuid$UUID$toString(c.eb),
					c);
			}),
		$elm$json$Json$Decode$list($author$project$PageTreeEditor$PageTreeEditor$decodeContent)));
var $author$project$PageTreeEditor$PageTreeEditor$delete = function (_v0) {
	var current = _v0.a3;
	var contexts = _v0.bu;
	if (!contexts.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var parent = contexts.a.eF;
		var left = contexts.a.bc;
		var right = contexts.a.bl;
		var cs = contexts.b;
		return $elm$core$Maybe$Just(
			{
				bu: cs,
				a3: A2(
					$author$project$PageTreeEditor$PageTreeEditor$Page,
					parent,
					_Utils_ap(left, right))
			});
	}
};
var $author$project$PageTreeEditor$PageTreeEditor$ContentUpdated = F2(
	function (a, b) {
		return {$: 12, a: a, b: b};
	});
var $author$project$PageTreeEditor$PageTreeEditor$decodeSuccess = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['message']),
	$elm$json$Json$Decode$succeed(true));
var $author$project$PageTreeEditor$PageTreeEditor$deleteContent = F2(
	function (contentId, sessionId) {
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'contentId',
						$elm$json$Json$Encode$string(
							$TSFoster$elm_uuid$UUID$toString(contentId)))
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					$author$project$PageTreeEditor$PageTreeEditor$ContentUpdated(contentId),
					$author$project$PageTreeEditor$PageTreeEditor$decodeSuccess),
				d$: 'deleteContent.php'
			});
	});
var $elm$core$Set$filter = F2(
	function (isGood, _v0) {
		var dict = _v0;
		return A2(
			$elm$core$Dict$filter,
			F2(
				function (key, _v1) {
					return isGood(key);
				}),
			dict);
	});
var $author$project$PageTreeEditor$PageTreeEditor$getPath = function (_v0) {
	var path = _v0.a.K;
	return path;
};
var $author$project$PageTreeEditor$PageTreeEditor$fixPaths = function (homePage) {
	var helper = F2(
		function (currPath, _v0) {
			var pageInfo = _v0.a;
			var ps = _v0.b;
			return A2(
				$author$project$PageTreeEditor$PageTreeEditor$Page,
				_Utils_update(
					pageInfo,
					{
						K: _Utils_ap(
							currPath,
							_List_fromArray(
								[pageInfo.I]))
					}),
				A2(
					$elm$core$List$map,
					helper(
						_Utils_ap(
							currPath,
							_List_fromArray(
								[pageInfo.I]))),
					ps));
		});
	return A2(
		helper,
		A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				$elm$core$List$reverse,
				$elm$core$List$tail(
					$elm$core$List$reverse(
						$author$project$PageTreeEditor$PageTreeEditor$getPath(homePage))))),
		homePage);
};
var $author$project$PageTreeEditor$PageTreeEditor$saveContent = F3(
	function (contentId, doc, sessionId) {
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'contentId',
						$elm$json$Json$Encode$string(
							$TSFoster$elm_uuid$UUID$toString(contentId))),
						_Utils_Tuple2(
						'content',
						$author$project$Document$Json$DocumentSerializer$encodeDocument(doc))
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					$author$project$PageTreeEditor$PageTreeEditor$ContentUpdated(contentId),
					$author$project$PageTreeEditor$PageTreeEditor$decodeSuccess),
				d$: 'saveContent.php'
			});
	});
var $author$project$PageTreeEditor$PageTreeEditor$PageTreeUpdated = F3(
	function (a, b, c) {
		return {$: 11, a: a, b: b, c: c};
	});
var $author$project$PageTreeEditor$PageTreeEditor$encodePageInfo = function (_v0) {
	var name = _v0.I;
	var path = _v0.K;
	var mbContentId = _v0.kf;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'name',
				$elm$json$Json$Encode$string(name)),
				_Utils_Tuple2(
				'path',
				$elm$json$Json$Encode$string(
					A2($elm$core$String$join, '/', path))),
				_Utils_Tuple2(
				'mbContentId',
				A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Encode$null,
					A2(
						$elm$core$Maybe$map,
						$elm$json$Json$Encode$string,
						A2($elm$core$Maybe$map, $TSFoster$elm_uuid$UUID$toString, mbContentId))))
			]));
};
var $author$project$PageTreeEditor$PageTreeEditor$encodePage = function (_v0) {
	var pageInfo = _v0.a;
	var children = _v0.b;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'Page',
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'pageInfo',
							$author$project$PageTreeEditor$PageTreeEditor$encodePageInfo(pageInfo)),
							_Utils_Tuple2(
							'children',
							A2($elm$json$Json$Encode$list, $author$project$PageTreeEditor$PageTreeEditor$encodePage, children))
						])))
			]));
};
var $author$project$PageTreeEditor$PageTreeEditor$savePageTree = F4(
	function (mbPage, page, pageTree, sessionId) {
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'pageTree',
						$author$project$PageTreeEditor$PageTreeEditor$encodePage(pageTree))
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					A2($author$project$PageTreeEditor$PageTreeEditor$PageTreeUpdated, mbPage, page),
					$author$project$PageTreeEditor$PageTreeEditor$decodeSuccess),
				d$: 'savePageTree.php'
			});
	});
var $author$project$PageTreeEditor$PageTreeEditor$KeywordUpdated = F3(
	function (a, b, c) {
		return {$: 26, a: a, b: b, c: c};
	});
var $author$project$PageTreeEditor$PageTreeEditor$setKeyword = F2(
	function (_v0, sessionId) {
		var keyword = _v0.a;
		var contentId = _v0.b;
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'contentId',
						$elm$json$Json$Encode$string(contentId)),
						_Utils_Tuple2(
						'keyword',
						$elm$json$Json$Encode$string(keyword))
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					A2(
						$author$project$PageTreeEditor$PageTreeEditor$KeywordUpdated,
						false,
						_Utils_Tuple2(keyword, contentId)),
					$author$project$PageTreeEditor$PageTreeEditor$decodeSuccess),
				d$: 'setKeyword.php'
			});
	});
var $author$project$PageTreeEditor$PageTreeEditor$swapLeft = function (_v0) {
	var current = _v0.a3;
	var contexts = _v0.bu;
	if (!contexts.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var parent = contexts.a.eF;
		var left = contexts.a.bc;
		var right = contexts.a.bl;
		var cs = contexts.b;
		var _v2 = $elm$core$List$reverse(left);
		if (!_v2.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var d = _v2.a;
			var ds = _v2.b;
			return $elm$core$Maybe$Just(
				{
					bu: A2(
						$elm$core$List$cons,
						{
							bc: $elm$core$List$reverse(ds),
							eF: parent,
							bl: A2($elm$core$List$cons, d, right)
						},
						cs),
					a3: current
				});
		}
	}
};
var $author$project$PageTreeEditor$PageTreeEditor$swapRight = function (_v0) {
	var current = _v0.a3;
	var contexts = _v0.bu;
	if (!contexts.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var parent = contexts.a.eF;
		var left = contexts.a.bc;
		var right = contexts.a.bl;
		var cs = contexts.b;
		if (!right.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var d = right.a;
			var ds = right.b;
			return $elm$core$Maybe$Just(
				{
					bu: A2(
						$elm$core$List$cons,
						{
							bc: _Utils_ap(
								left,
								_List_fromArray(
									[d])),
							eF: parent,
							bl: ds
						},
						cs),
					a3: current
				});
		}
	}
};
var $author$project$PageTreeEditor$PageTreeEditor$unsetKeyword = F2(
	function (_v0, sessionId) {
		var keyword = _v0.a;
		var contentId = _v0.b;
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'contentId',
						$elm$json$Json$Encode$string(contentId)),
						_Utils_Tuple2(
						'keyword',
						$elm$json$Json$Encode$string(keyword))
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					A2(
						$author$project$PageTreeEditor$PageTreeEditor$KeywordUpdated,
						true,
						_Utils_Tuple2(keyword, contentId)),
					$author$project$PageTreeEditor$PageTreeEditor$decodeSuccess),
				d$: 'unsetKeyword.php'
			});
	});
var $author$project$PageTreeEditor$PageTreeEditor$updateCurrPageTree = F2(
	function (_new, pageTree) {
		return _Utils_update(
			pageTree,
			{a3: _new});
	});
var $author$project$PageTreeEditor$PageTreeEditor$validMbStr = function (mbStr) {
	return (!_Utils_eq(mbStr, $elm$core$Maybe$Nothing)) && (!_Utils_eq(
		mbStr,
		$elm$core$Maybe$Just('')));
};
var $author$project$PageTreeEditor$PageTreeEditor$getName = function (_v0) {
	var name = _v0.a.I;
	return name;
};
var $author$project$PageTreeEditor$PageTreeEditor$break = F2(
	function (p, xs) {
		var helper = F2(
			function (ys, left) {
				helper:
				while (true) {
					if (!ys.b) {
						return _Utils_Tuple2(left, _List_Nil);
					} else {
						var y = ys.a;
						var ys_ = ys.b;
						if (p(y)) {
							return _Utils_Tuple2(
								$elm$core$List$reverse(left),
								A2($elm$core$List$cons, y, ys_));
						} else {
							var $temp$ys = ys_,
								$temp$left = A2($elm$core$List$cons, y, left);
							ys = $temp$ys;
							left = $temp$left;
							continue helper;
						}
					}
				}
			});
		return A2(helper, xs, _List_Nil);
	});
var $author$project$PageTreeEditor$PageTreeEditor$zipDown = F2(
	function (pred, pageTree) {
		var _v0 = pageTree.a3;
		if (!_v0.b.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var pageInfo = _v0.a;
			var xs = _v0.b;
			var _v1 = A2($author$project$PageTreeEditor$PageTreeEditor$break, pred, xs);
			var l = _v1.a;
			var r = _v1.b;
			if (!r.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var p = r.a;
				var ps = r.b;
				return $elm$core$Maybe$Just(
					_Utils_update(
						pageTree,
						{
							bu: A2(
								$elm$core$List$cons,
								{bc: l, eF: pageInfo, bl: ps},
								pageTree.bu),
							a3: p
						}));
			}
		}
	});
var $author$project$PageTreeEditor$PageTreeEditor$zipTo = F2(
	function (path, pageTree) {
		var helper = F2(
			function (remainingPath, pageTree_) {
				if (!remainingPath.b) {
					return $elm$core$Maybe$Nothing;
				} else {
					if (!remainingPath.b.b) {
						var curr = remainingPath.a;
						return (!_Utils_eq(
							$author$project$PageTreeEditor$PageTreeEditor$getName(
								$author$project$PageTreeEditor$PageTreeEditor$extractPage(pageTree_)),
							curr)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(pageTree_);
					} else {
						var curr = remainingPath.a;
						var _v1 = remainingPath.b;
						var next = _v1.a;
						var rest = _v1.b;
						return (!_Utils_eq(
							$author$project$PageTreeEditor$PageTreeEditor$getName(
								$author$project$PageTreeEditor$PageTreeEditor$extractPage(pageTree_)),
							curr)) ? $elm$core$Maybe$Nothing : A2(
							$elm$core$Maybe$andThen,
							helper(
								A2($elm$core$List$cons, next, rest)),
							A2(
								$author$project$PageTreeEditor$PageTreeEditor$zipDown,
								function (page) {
									return _Utils_eq(
										$author$project$PageTreeEditor$PageTreeEditor$getName(page),
										next);
								},
								pageTree_));
					}
				}
			});
		return A2(helper, path, pageTree);
	});
var $author$project$PageTreeEditor$PageTreeEditor$update = F3(
	function (config, msg, model) {
		update:
		while (true) {
			switch (msg.$) {
				case 0:
					var page = msg.a;
					var pageInfo = page.a;
					var xs = page.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								bK: $elm$core$Maybe$Nothing,
								hm: $elm$core$Maybe$Just(page)
							}),
						$elm$core$Platform$Cmd$none);
				case 1:
					var page = msg.a;
					var pageInfo = page.a;
					var xs = page.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								ao: $elm$core$Maybe$Just(page)
							}),
						$elm$core$Platform$Cmd$none);
				case 2:
					var page = msg.a;
					var pageInfo = page.a;
					var xs = page.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								c6: $elm$core$Maybe$Just(page)
							}),
						$elm$core$Platform$Cmd$none);
				case 3:
					var page = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								dg: $elm$core$Maybe$Just(page)
							}),
						$elm$core$Platform$Cmd$none);
				case 4:
					var path = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								c6: A2(
									$elm$core$Maybe$map,
									$author$project$PageTreeEditor$PageTreeEditor$extractPage,
									A2(
										$elm$core$Maybe$andThen,
										$author$project$PageTreeEditor$PageTreeEditor$zipTo(path),
										model.i))
							}),
						$elm$core$Platform$Cmd$none);
				case 5:
					var path = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								ao: A2(
									$elm$core$Maybe$map,
									$author$project$PageTreeEditor$PageTreeEditor$extractPage,
									A2(
										$elm$core$Maybe$andThen,
										$author$project$PageTreeEditor$PageTreeEditor$zipTo(path),
										model.i))
							}),
						$elm$core$Platform$Cmd$none);
				case 6:
					var res = msg.a;
					if (!res.$) {
						var jsonVal = res.a;
						var _v2 = A2($elm$json$Json$Decode$decodeValue, $author$project$PageTreeEditor$PageTreeEditor$decodeContents, jsonVal);
						if (!_v2.$) {
							var contents = _v2.a;
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{cv: contents, cw: 2}),
								A5($author$project$Internals$CommonHelpers$newLog, config.eT, 'Chargement des pages réussi', $elm$core$Maybe$Nothing, false, false));
						} else {
							var e = _v2.a;
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{cw: 3}),
								A5(
									$author$project$Internals$CommonHelpers$newLog,
									config.eT,
									'Erreur décodage Json',
									$elm$core$Maybe$Just(
										$elm$json$Json$Decode$errorToString(e)),
									true,
									true));
						}
					} else {
						var e = res.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{cw: 3}),
							A5(
								$author$project$Internals$CommonHelpers$newLog,
								config.eT,
								'Impossible de charger les pages',
								$elm$core$Maybe$Just(
									$author$project$Internals$CommonHelpers$httpErrorToString(e)),
								true,
								true));
					}
				case 7:
					var res = msg.a;
					if (!res.$) {
						var pageTree = res.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									i: $elm$core$Maybe$Just(pageTree),
									dc: 2
								}),
							A5($author$project$Internals$CommonHelpers$newLog, config.eT, 'Chargement arborescence réussi', $elm$core$Maybe$Nothing, false, false));
					} else {
						var e = res.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{dc: 3}),
							A5(
								$author$project$Internals$CommonHelpers$newLog,
								config.eT,
								'Impossible de charger l\'arborescence',
								$elm$core$Maybe$Just(
									$author$project$Internals$CommonHelpers$httpErrorToString(e)),
								true,
								true));
					}
				case 8:
					var res = msg.a;
					if (!res.$) {
						var keywords = res.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{X: keywords, c7: 2}),
							A5($author$project$Internals$CommonHelpers$newLog, config.eT, 'Chargement mots clés réussi', $elm$core$Maybe$Nothing, false, false));
					} else {
						var e = res.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{el: '', c7: 3}),
							A5(
								$author$project$Internals$CommonHelpers$newLog,
								config.eT,
								'Impossible de charger les mots clés',
								$elm$core$Maybe$Just(
									$author$project$Internals$CommonHelpers$httpErrorToString(e)),
								true,
								true));
					}
				case 11:
					var mbBackup = msg.a;
					var page = msg.b;
					var res = msg.c;
					if ((!res.$) && res.a) {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									P: A2($elm_community$list_extra$List$Extra$remove, page, model.P),
									cc: 2,
									hm: $elm$core$Maybe$Nothing
								}),
							A5($author$project$Internals$CommonHelpers$newLog, config.eT, 'Arborescence mise à jour', $elm$core$Maybe$Nothing, false, false));
					} else {
						var error = res;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									P: A2($elm_community$list_extra$List$Extra$remove, page, model.P),
									i: function () {
										if (!mbBackup.$) {
											var backup = mbBackup.a;
											return A2(
												$elm$core$Maybe$map,
												$author$project$PageTreeEditor$PageTreeEditor$rewind,
												A2(
													$elm$core$Maybe$map,
													$author$project$PageTreeEditor$PageTreeEditor$updateCurrPageTree(backup),
													A2(
														$elm$core$Maybe$andThen,
														$author$project$PageTreeEditor$PageTreeEditor$zipTo(
															$author$project$PageTreeEditor$PageTreeEditor$getPath(page)),
														model.i)));
										} else {
											return A2(
												$elm$core$Maybe$map,
												$author$project$PageTreeEditor$PageTreeEditor$rewind,
												A2(
													$elm$core$Maybe$andThen,
													$author$project$PageTreeEditor$PageTreeEditor$delete,
													A2(
														$elm$core$Maybe$andThen,
														$author$project$PageTreeEditor$PageTreeEditor$zipTo(
															$author$project$PageTreeEditor$PageTreeEditor$getPath(page)),
														model.i)));
										}
									}(),
									cc: 3
								}),
							function () {
								if (error.$ === 1) {
									var e = error.a;
									return A5(
										$author$project$Internals$CommonHelpers$newLog,
										config.eT,
										'Echec de la mise à jour de l\'arborescence',
										$elm$core$Maybe$Just(
											$author$project$Internals$CommonHelpers$httpErrorToString(e)),
										true,
										true);
								} else {
									return $elm$core$Platform$Cmd$none;
								}
							}());
					}
				case 9:
					if (model.ca === '') {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var _v8 = _Utils_Tuple2(model.dg, model.ll);
						if ((!_v8.a.$) && (!_v8.b.$)) {
							var page = _v8.a.a;
							var pageInfo = page.a;
							var xs = page.b;
							var seed = _v8.b.a;
							var newPage = A2(
								$author$project$PageTreeEditor$PageTreeEditor$Page,
								{
									kf: $elm$core$Maybe$Nothing,
									I: model.ca,
									K: _Utils_ap(
										pageInfo.K,
										_List_fromArray(
											[model.ca]))
								},
								_List_Nil);
							var newPageTree = A2(
								$elm$core$Maybe$map,
								$author$project$PageTreeEditor$PageTreeEditor$rewind,
								A2(
									$elm$core$Maybe$map,
									$author$project$PageTreeEditor$PageTreeEditor$updateCurrPageTree(
										A2(
											$author$project$PageTreeEditor$PageTreeEditor$Page,
											pageInfo,
											_Utils_ap(
												xs,
												_List_fromArray(
													[newPage])))),
									A2(
										$elm$core$Maybe$andThen,
										$author$project$PageTreeEditor$PageTreeEditor$zipTo(pageInfo.K),
										model.i)));
							var newModel = _Utils_update(
								model,
								{i: newPageTree});
							var $temp$config = config,
								$temp$msg = $author$project$PageTreeEditor$PageTreeEditor$SaveContent(newPage),
								$temp$model = newModel;
							config = $temp$config;
							msg = $temp$msg;
							model = $temp$model;
							continue update;
						} else {
							return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
						}
					}
				case 10:
					var page = msg.a;
					var pageInfo = page.a;
					var xs = page.b;
					var _v9 = model.ll;
					if (!_v9.$) {
						var seed = _v9.a;
						var mbBackup = A2(
							$elm$core$Maybe$map,
							$author$project$PageTreeEditor$PageTreeEditor$extractPage,
							A2(
								$elm$core$Maybe$andThen,
								$author$project$PageTreeEditor$PageTreeEditor$zipTo(pageInfo.K),
								model.i));
						var _v10 = A2($elm$random$Random$step, $TSFoster$elm_uuid$UUID$generator, seed);
						var uuid = _v10.a;
						var newSeed = _v10.b;
						var contentId = A2($elm$core$Maybe$withDefault, uuid, pageInfo.kf);
						var mbBackupContent = A2(
							$elm$core$Dict$get,
							$TSFoster$elm_uuid$UUID$toString(contentId),
							model.cv);
						var newContent = {
							eb: contentId,
							i0: config.iO,
							gK: $author$project$Document$Json$DocumentSerializer$encodeDocument(config.iO)
						};
						var newContents = A3(
							$elm$core$Dict$insert,
							$TSFoster$elm_uuid$UUID$toString(contentId),
							newContent,
							model.cv);
						var newPage = A2(
							$author$project$PageTreeEditor$PageTreeEditor$Page,
							_Utils_update(
								pageInfo,
								{
									kf: $elm$core$Maybe$Just(contentId)
								}),
							xs);
						var newPageTree = A2(
							$elm$core$Maybe$map,
							$author$project$PageTreeEditor$PageTreeEditor$rewind,
							A2(
								$elm$core$Maybe$map,
								$author$project$PageTreeEditor$PageTreeEditor$updateCurrPageTree(newPage),
								A2(
									$elm$core$Maybe$andThen,
									$author$project$PageTreeEditor$PageTreeEditor$zipTo(pageInfo.K),
									model.i)));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									cv: newContents,
									ao: $elm$core$Maybe$Just(
										A2(
											$author$project$PageTreeEditor$PageTreeEditor$Page,
											_Utils_update(
												pageInfo,
												{
													kf: $elm$core$Maybe$Just(contentId)
												}),
											xs)),
									aD: A3(
										$elm$core$Dict$insert,
										$TSFoster$elm_uuid$UUID$toString(contentId),
										mbBackupContent,
										model.aD),
									P: A2($elm$core$List$cons, newPage, model.P),
									i: newPageTree,
									cc: 1,
									ll: $elm$core$Maybe$Just(newSeed)
								}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										$elm$core$Platform$Cmd$map,
										model.bY,
										A2(
											$author$project$Auth$AuthPlugin$cmdIfLogged,
											config.be,
											A2($author$project$PageTreeEditor$PageTreeEditor$saveContent, contentId, config.iO))),
										A2(
										$elm$core$Platform$Cmd$map,
										model.bY,
										A2(
											$elm$core$Maybe$withDefault,
											$elm$core$Platform$Cmd$none,
											A2(
												$elm$core$Maybe$map,
												function (pt) {
													return A2(
														$author$project$Auth$AuthPlugin$cmdIfLogged,
														config.be,
														A3($author$project$PageTreeEditor$PageTreeEditor$savePageTree, mbBackup, newPage, pt));
												},
												A2($elm$core$Maybe$map, $author$project$PageTreeEditor$PageTreeEditor$extractPage, newPageTree)))),
										A6($author$project$Auth$AuthPlugin$newLogIfLogged, config.be, config.eT, 'Sauvegarde page...', $elm$core$Maybe$Nothing, false, true),
										A6($author$project$Auth$AuthPlugin$newLogIfLogged, config.be, config.eT, 'Sauvegarde arborescence...', $elm$core$Maybe$Nothing, false, false)
									])));
					} else {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					}
				case 12:
					var uuid = msg.a;
					var res = msg.b;
					if (!res.$) {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									X: A2(
										$elm$core$Set$filter,
										function (_v12) {
											var k = _v12.a;
											var cId = _v12.b;
											return A2($elm$core$Dict$member, cId, model.cv);
										},
										model.X),
									aD: A2(
										$elm$core$Dict$remove,
										$TSFoster$elm_uuid$UUID$toString(uuid),
										model.aD),
									cc: 2
								}),
							A5($author$project$Internals$CommonHelpers$newLog, config.eT, 'Page sauvegardée', $elm$core$Maybe$Nothing, false, true));
					} else {
						var e = res.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									cv: function () {
										var _v13 = A2(
											$elm$core$Dict$get,
											$TSFoster$elm_uuid$UUID$toString(uuid),
											model.aD);
										if ((!_v13.$) && (!_v13.a.$)) {
											var backup = _v13.a.a;
											return A3(
												$elm$core$Dict$insert,
												$TSFoster$elm_uuid$UUID$toString(uuid),
												backup,
												model.cv);
										} else {
											return A2(
												$elm$core$Dict$remove,
												$TSFoster$elm_uuid$UUID$toString(uuid),
												model.cv);
										}
									}(),
									aD: A2(
										$elm$core$Dict$remove,
										$TSFoster$elm_uuid$UUID$toString(uuid),
										model.aD),
									cc: 3
								}),
							A5(
								$author$project$Internals$CommonHelpers$newLog,
								config.eT,
								'Echec sauvegarde page',
								$elm$core$Maybe$Just(
									$author$project$Internals$CommonHelpers$httpErrorToString(e)),
								true,
								true));
					}
				case 13:
					var s = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								bK: $elm$core$Maybe$Just(s)
							}),
						$elm$core$Platform$Cmd$none);
				case 14:
					var _v14 = model.hm;
					if (!_v14.$) {
						var _v15 = _v14.a;
						var pageInfo = _v15.a;
						var xs = _v15.b;
						if ($author$project$PageTreeEditor$PageTreeEditor$validMbStr(model.bK)) {
							var newPage = $author$project$PageTreeEditor$PageTreeEditor$fixPaths(
								A2(
									$author$project$PageTreeEditor$PageTreeEditor$Page,
									_Utils_update(
										pageInfo,
										{
											I: A2($elm$core$Maybe$withDefault, '', model.bK)
										}),
									xs));
							var newPageTree = A2(
								$elm$core$Maybe$map,
								$author$project$PageTreeEditor$PageTreeEditor$rewind,
								A2(
									$elm$core$Maybe$map,
									$author$project$PageTreeEditor$PageTreeEditor$updateCurrPageTree(newPage),
									A2(
										$elm$core$Maybe$andThen,
										$author$project$PageTreeEditor$PageTreeEditor$zipTo(pageInfo.K),
										model.i)));
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										P: A2($elm$core$List$cons, newPage, model.P),
										i: newPageTree,
										bK: $elm$core$Maybe$Nothing,
										hm: $elm$core$Maybe$Nothing
									}),
								A2(
									$elm$core$Platform$Cmd$map,
									model.bY,
									A2(
										$elm$core$Maybe$withDefault,
										$elm$core$Platform$Cmd$none,
										A2(
											$elm$core$Maybe$map,
											function (pt) {
												return A2(
													$author$project$Auth$AuthPlugin$cmdIfLogged,
													config.be,
													A3(
														$author$project$PageTreeEditor$PageTreeEditor$savePageTree,
														$elm$core$Maybe$Just(
															A2($author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, xs)),
														newPage,
														pt));
											},
											A2($elm$core$Maybe$map, $author$project$PageTreeEditor$PageTreeEditor$extractPage, newPageTree)))));
						} else {
							return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
						}
					} else {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					}
				case 15:
					var s = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{ca: s}),
						$elm$core$Platform$Cmd$none);
				case 16:
					var _v16 = model.hm;
					if (!_v16.$) {
						var _v17 = _v16.a;
						var pageInfo = _v17.a;
						var xs = _v17.b;
						var newPageTree = A2(
							$elm$core$Maybe$map,
							$author$project$PageTreeEditor$PageTreeEditor$rewind,
							A2(
								$elm$core$Maybe$andThen,
								$author$project$PageTreeEditor$PageTreeEditor$delete,
								A2(
									$elm$core$Maybe$andThen,
									$author$project$PageTreeEditor$PageTreeEditor$zipTo(pageInfo.K),
									model.i)));
						var mbBackup = A2(
							$elm$core$Maybe$andThen,
							$author$project$PageTreeEditor$PageTreeEditor$zipUp,
							A2(
								$elm$core$Maybe$andThen,
								$author$project$PageTreeEditor$PageTreeEditor$zipTo(pageInfo.K),
								model.i));
						var _v18 = A2($elm$core$Maybe$map, $author$project$PageTreeEditor$PageTreeEditor$extractPage, mbBackup);
						if (!_v18.$) {
							var backup = _v18.a;
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										ao: $elm$core$Maybe$Nothing,
										aD: A2(
											$elm$core$Maybe$withDefault,
											model.aD,
											A2(
												$elm$core$Maybe$map,
												function (cId) {
													return A3(
														$elm$core$Dict$insert,
														$TSFoster$elm_uuid$UUID$toString(cId),
														$elm$core$Maybe$Nothing,
														model.aD);
												},
												$author$project$PageTreeEditor$PageTreeEditor$getMbContentId(
													A2($author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, xs)))),
										P: A2($elm$core$List$cons, backup, model.P),
										i: newPageTree,
										hm: $elm$core$Maybe$Nothing
									}),
								A2(
									$elm$core$Platform$Cmd$map,
									model.bY,
									$elm$core$Platform$Cmd$batch(
										_List_fromArray(
											[
												A2(
												$elm$core$Maybe$withDefault,
												$elm$core$Platform$Cmd$none,
												A2(
													$elm$core$Maybe$map,
													function (pt) {
														return A2(
															$author$project$Auth$AuthPlugin$cmdIfLogged,
															config.be,
															A3(
																$author$project$PageTreeEditor$PageTreeEditor$savePageTree,
																$elm$core$Maybe$Just(backup),
																backup,
																pt));
													},
													A2($elm$core$Maybe$map, $author$project$PageTreeEditor$PageTreeEditor$extractPage, newPageTree))),
												A2(
												$elm$core$Maybe$withDefault,
												$elm$core$Platform$Cmd$none,
												A2(
													$elm$core$Maybe$map,
													function (contentId) {
														return A2(
															$author$project$Auth$AuthPlugin$cmdIfLogged,
															config.be,
															$author$project$PageTreeEditor$PageTreeEditor$deleteContent(contentId));
													},
													$author$project$PageTreeEditor$PageTreeEditor$getMbContentId(
														A2($author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, xs))))
											]))));
						} else {
							return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
						}
					} else {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					}
				case 17:
					var _v19 = _Utils_Tuple2(model.hm, model.bi);
					if ((!_v19.a.$) && (_v19.b.$ === 1)) {
						var page = _v19.a.a;
						var _v20 = _v19.b;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									P: A2($elm$core$List$cons, page, model.P),
									bi: $elm$core$Maybe$Just(page),
									hm: $elm$core$Maybe$Nothing
								}),
							$elm$core$Platform$Cmd$none);
					} else {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					}
				case 18:
					var _v21 = _Utils_Tuple2(model.hm, model.bi);
					if ((!_v21.a.$) && (!_v21.b.$)) {
						var _v22 = _v21.a.a;
						var pageInfo = _v22.a;
						var xs = _v22.b;
						var page = _v21.b.a;
						var newPageTree = A2(
							$elm$core$Maybe$map,
							$author$project$PageTreeEditor$PageTreeEditor$initPageTree,
							A2(
								$elm$core$Maybe$map,
								$author$project$PageTreeEditor$PageTreeEditor$fixPaths,
								A2(
									$elm$core$Maybe$map,
									$author$project$PageTreeEditor$PageTreeEditor$extractPage,
									A2(
										$elm$core$Maybe$map,
										$author$project$PageTreeEditor$PageTreeEditor$rewind,
										A2(
											$elm$core$Maybe$andThen,
											$author$project$PageTreeEditor$PageTreeEditor$delete,
											A2(
												$elm$core$Maybe$andThen,
												$author$project$PageTreeEditor$PageTreeEditor$zipTo(
													$author$project$PageTreeEditor$PageTreeEditor$getPath(page)),
												A2(
													$elm$core$Maybe$map,
													$author$project$PageTreeEditor$PageTreeEditor$rewind,
													A2(
														$elm$core$Maybe$map,
														$author$project$PageTreeEditor$PageTreeEditor$updateCurrPageTree(
															A2(
																$author$project$PageTreeEditor$PageTreeEditor$Page,
																pageInfo,
																_Utils_ap(
																	xs,
																	_List_fromArray(
																		[page])))),
														A2(
															$elm$core$Maybe$andThen,
															$author$project$PageTreeEditor$PageTreeEditor$zipTo(pageInfo.K),
															model.i)))))))));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{i: newPageTree, bi: $elm$core$Maybe$Nothing, hm: $elm$core$Maybe$Nothing}),
							A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								A2(
									$elm$core$Maybe$withDefault,
									$elm$core$Platform$Cmd$none,
									A2(
										$elm$core$Maybe$map,
										function (pt) {
											return A2(
												$author$project$Auth$AuthPlugin$cmdIfLogged,
												config.be,
												A3(
													$author$project$PageTreeEditor$PageTreeEditor$savePageTree,
													$elm$core$Maybe$Just(page),
													page,
													pt));
										},
										A2($elm$core$Maybe$map, $author$project$PageTreeEditor$PageTreeEditor$extractPage, newPageTree)))));
					} else {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					}
				case 19:
					var up = msg.a;
					var _v23 = model.hm;
					if (!_v23.$) {
						var _v24 = _v23.a;
						var pageInfo = _v24.a;
						var xs = _v24.b;
						var _v25 = A2(
							$elm$core$Maybe$andThen,
							$author$project$PageTreeEditor$PageTreeEditor$zipUp,
							A2(
								$elm$core$Maybe$andThen,
								up ? $author$project$PageTreeEditor$PageTreeEditor$swapLeft : $author$project$PageTreeEditor$PageTreeEditor$swapRight,
								A2(
									$elm$core$Maybe$andThen,
									$author$project$PageTreeEditor$PageTreeEditor$zipTo(pageInfo.K),
									model.i)));
						if (!_v25.$) {
							var newPageTree = _v25.a;
							var newPage = $author$project$PageTreeEditor$PageTreeEditor$extractPage(newPageTree);
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										P: A2($elm$core$List$cons, newPage, model.P),
										i: $elm$core$Maybe$Just(
											$author$project$PageTreeEditor$PageTreeEditor$rewind(newPageTree)),
										hm: $elm$core$Maybe$Nothing
									}),
								A2(
									$elm$core$Platform$Cmd$map,
									model.bY,
									function (pt) {
										return A2(
											$author$project$Auth$AuthPlugin$cmdIfLogged,
											config.be,
											A3(
												$author$project$PageTreeEditor$PageTreeEditor$savePageTree,
												A2(
													$elm$core$Maybe$map,
													$author$project$PageTreeEditor$PageTreeEditor$extractPage,
													A2(
														$elm$core$Maybe$andThen,
														$author$project$PageTreeEditor$PageTreeEditor$zipUp,
														A2(
															$elm$core$Maybe$andThen,
															$author$project$PageTreeEditor$PageTreeEditor$zipTo(pageInfo.K),
															model.i))),
												newPage,
												pt));
									}(
										$author$project$PageTreeEditor$PageTreeEditor$extractPage(
											$author$project$PageTreeEditor$PageTreeEditor$rewind(newPageTree)))));
						} else {
							return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
						}
					} else {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					}
				case 20:
					var s = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								aK: _Utils_eq(
									model.aK,
									$elm$core$Maybe$Just(s)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s)
							}),
						$elm$core$Platform$Cmd$none);
				case 21:
					var s = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								bL: _Utils_eq(
									model.bL,
									$elm$core$Maybe$Just(s)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(s)
							}),
						$elm$core$Platform$Cmd$none);
				case 22:
					var s = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								aC: $elm$core$Maybe$Just(s),
								aK: $elm$core$Maybe$Nothing
							}),
						$elm$core$Platform$Cmd$none);
				case 23:
					var _v26 = A2($elm$core$Maybe$andThen, $author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.hm);
					if (!_v26.$) {
						var contentId = _v26.a;
						if ($author$project$PageTreeEditor$PageTreeEditor$validMbStr(model.aC)) {
							var newEntry = _Utils_Tuple2(
								A2($elm$core$Maybe$withDefault, '', model.aC),
								$TSFoster$elm_uuid$UUID$toString(contentId));
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										X: A2($elm$core$Set$insert, newEntry, model.X),
										aC: $elm$core$Maybe$Nothing,
										aE: A2($elm$core$Set$insert, newEntry, model.aE),
										aK: $elm$core$Maybe$Nothing
									}),
								A2(
									$elm$core$Platform$Cmd$map,
									model.bY,
									A2(
										$author$project$Auth$AuthPlugin$cmdIfLogged,
										config.be,
										$author$project$PageTreeEditor$PageTreeEditor$setKeyword(newEntry))));
						} else {
							return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
						}
					} else {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					}
				case 24:
					var _v27 = _Utils_Tuple2(
						model.aK,
						A2($elm$core$Maybe$andThen, $author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.hm));
					if ((!_v27.a.$) && (!_v27.b.$)) {
						var keyword = _v27.a.a;
						var contentId = _v27.b.a;
						var newEntry = _Utils_Tuple2(
							keyword,
							$TSFoster$elm_uuid$UUID$toString(contentId));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									X: A2($elm$core$Set$insert, newEntry, model.X),
									aC: $elm$core$Maybe$Nothing,
									aE: A2($elm$core$Set$insert, newEntry, model.aE),
									aK: $elm$core$Maybe$Nothing
								}),
							A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								A2(
									$author$project$Auth$AuthPlugin$cmdIfLogged,
									config.be,
									$author$project$PageTreeEditor$PageTreeEditor$setKeyword(newEntry))));
					} else {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					}
				case 25:
					var _v28 = _Utils_Tuple2(
						model.bL,
						A2($elm$core$Maybe$andThen, $author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.hm));
					if ((!_v28.a.$) && (!_v28.b.$)) {
						var keyword = _v28.a.a;
						var contentId = _v28.b.a;
						var newEntry = _Utils_Tuple2(
							keyword,
							$TSFoster$elm_uuid$UUID$toString(contentId));
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									X: A2($elm$core$Set$remove, newEntry, model.X),
									aE: A2($elm$core$Set$insert, newEntry, model.aE),
									bL: $elm$core$Maybe$Nothing
								}),
							A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								A2(
									$author$project$Auth$AuthPlugin$cmdIfLogged,
									config.be,
									$author$project$PageTreeEditor$PageTreeEditor$unsetKeyword(newEntry))));
					} else {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					}
				case 26:
					var unset = msg.a;
					var _v29 = msg.b;
					var k = _v29.a;
					var cId = _v29.b;
					var res = msg.c;
					if ((!res.$) && res.a) {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									aE: A2(
										$elm$core$Set$remove,
										_Utils_Tuple2(k, cId),
										model.aE)
								}),
							$elm$core$Platform$Cmd$none);
					} else {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									X: unset ? A2(
										$elm$core$Set$insert,
										_Utils_Tuple2(k, cId),
										model.X) : A2(
										$elm$core$Set$remove,
										_Utils_Tuple2(k, cId),
										model.X),
									aE: A2(
										$elm$core$Set$remove,
										_Utils_Tuple2(k, cId),
										model.aE)
								}),
							$elm$core$Platform$Cmd$none);
					}
				case 27:
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{ao: $elm$core$Maybe$Nothing}),
						$elm$core$Platform$Cmd$none);
				case 28:
					var t = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								iP: $elm$core$Maybe$Just(t),
								ll: $elm$core$Maybe$Just(
									$elm$random$Random$initialSeed(
										$elm$time$Time$posixToMillis(t)))
							}),
						$elm$core$Platform$Cmd$none);
				default:
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			}
		}
	});
var $author$project$Publications$Publications$Bulletin = 2;
var $author$project$Publications$Publications$Delib = 1;
var $author$project$Publications$Publications$Edit = function (a) {
	return {$: 1, a: a};
};
var $author$project$Publications$Publications$FileConverted = function (a) {
	return {$: 18, a: a};
};
var $author$project$Publications$Publications$Upload = function (a) {
	return {$: 2, a: a};
};
var $author$project$Internals$CommonHelpers$dateToStr = F2(
	function (zone, d) {
		var dateRec = $AdrianRibao$elm_derberos_date$Derberos$Date$Core$posixToCivil(
			A2($AdrianRibao$elm_derberos_date$Derberos$Date$Core$addTimezoneMilliseconds, zone, d));
		return A3(
			$elm$core$String$padLeft,
			2,
			'0',
			$elm$core$String$fromInt(dateRec.e5)) + ('/' + (A3(
			$elm$core$String$padLeft,
			2,
			'0',
			$elm$core$String$fromInt(dateRec.ft)) + ('/' + $elm$core$String$fromInt(dateRec.fX))));
	});
var $author$project$Publications$Publications$decodeBulletinCover = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2($elm$json$Json$Decode$field, 'content', $elm$json$Json$Decode$string),
			A2($elm$json$Json$Decode$field, 'error', $elm$json$Json$Decode$string)
		]));
var $author$project$Publications$Publications$BulletinDeleted = F2(
	function (a, b) {
		return {$: 33, a: a, b: b};
	});
var $author$project$Publications$Publications$decodeSuccess = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['message']),
	$elm$json$Json$Decode$succeed(true));
var $author$project$Publications$Publications$deleteBulletin = F2(
	function (issue, sessionId) {
		var name = function (s) {
			return s + '.pdf';
		}(
			A3(
				$elm$core$String$padLeft,
				3,
				'0',
				$elm$core$String$fromInt(issue)));
		var cover = function (s) {
			return s + '.jpg';
		}(
			A3(
				$elm$core$String$padLeft,
				3,
				'0',
				$elm$core$String$fromInt(issue)));
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'issue',
						$elm$json$Json$Encode$int(issue)),
						_Utils_Tuple2(
						'name',
						$elm$json$Json$Encode$string(name)),
						_Utils_Tuple2(
						'cover',
						$elm$json$Json$Encode$string(cover)),
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId))
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					$author$project$Publications$Publications$BulletinDeleted(issue),
					$author$project$Publications$Publications$decodeSuccess),
				d$: '/deleteBulletin.php'
			});
	});
var $author$project$Publications$Publications$DelibDeleted = F2(
	function (a, b) {
		return {$: 29, a: a, b: b};
	});
var $author$project$Publications$Publications$deleteDelib = F3(
	function (name, date, sessionId) {
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'date',
						$elm$json$Json$Encode$int(date)),
						_Utils_Tuple2(
						'name',
						$elm$json$Json$Encode$string(name)),
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId))
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					$author$project$Publications$Publications$DelibDeleted(date),
					$author$project$Publications$Publications$decodeSuccess),
				d$: '/deleteDelib.php'
			});
	});
var $author$project$Publications$Publications$MurolInfoDeleted = F2(
	function (a, b) {
		return {$: 25, a: a, b: b};
	});
var $author$project$Publications$Publications$deleteMurolInfo = F2(
	function (issue, sessionId) {
		var name = function (s) {
			return s + '.pdf';
		}(
			A3(
				$elm$core$String$padLeft,
				3,
				'0',
				$elm$core$String$fromInt(issue)));
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'issue',
						$elm$json$Json$Encode$int(issue)),
						_Utils_Tuple2(
						'name',
						$elm$json$Json$Encode$string(name)),
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId))
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					$author$project$Publications$Publications$MurolInfoDeleted(issue),
					$author$project$Publications$Publications$decodeSuccess),
				d$: '/deleteMurolInfo.php'
			});
	});
var $author$project$Publications$Publications$extractPubType = function (model) {
	var _v0 = model.bW;
	switch (_v0.$) {
		case 0:
			var pt = _v0.a;
			return pt;
		case 1:
			var pt = _v0.a;
			return pt;
		default:
			var pt = _v0.a;
			return pt;
	}
};
var $author$project$Publications$Publications$nextKey = function (dict) {
	return function (n) {
		return n + 1;
	}(
		A3(
			$elm$core$List$foldr,
			$elm$core$Basics$max,
			0,
			$elm$core$Dict$keys(dict)));
};
var $author$project$Publications$Publications$parseDate = F2(
	function (zone, s) {
		var _v0 = A2(
			$elm$core$List$filterMap,
			$elm$core$String$toInt,
			A2($elm$core$String$split, '/', s));
		if (((_v0.b && _v0.b.b) && _v0.b.b.b) && (!_v0.b.b.b.b)) {
			var day = _v0.a;
			var _v1 = _v0.b;
			var month = _v1.a;
			var _v2 = _v1.b;
			var year = _v2.a;
			if (year < 2000) {
				return $elm$core$Maybe$Nothing;
			} else {
				var choosenTime = $AdrianRibao$elm_derberos_date$Derberos$Date$Core$civilToPosix(
					A8($AdrianRibao$elm_derberos_date$Derberos$Date$Core$newDateRecord, year, month, day, 0, 0, 0, 0, zone));
				return $elm$core$Maybe$Just(choosenTime);
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Publications$Publications$requestBulletinCover = _Platform_outgoingPort('requestBulletinCover', $elm$core$Basics$identity);
var $author$project$Publications$Publications$BulletinSaved = F2(
	function (a, b) {
		return {$: 31, a: a, b: b};
	});
var $author$project$Publications$Publications$encodeBulletin = function (_v0) {
	var issue = _v0.gH;
	var date = _v0.eg;
	var cover = _v0.iM;
	var index = _v0.gB;
	var encodeIndexEntry = function (_v1) {
		var topic = _v1.a;
		var page = _v1.b;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'topic',
					$elm$json$Json$Encode$string(topic)),
					_Utils_Tuple2(
					'page',
					$elm$json$Json$Encode$int(page))
				]));
	};
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'issue',
				$elm$json$Json$Encode$int(issue)),
				_Utils_Tuple2(
				'date',
				$elm$json$Json$Encode$int(
					$elm$time$Time$posixToMillis(date))),
				_Utils_Tuple2(
				'cover',
				(cover === '') ? $elm$json$Json$Encode$null : $elm$json$Json$Encode$string(cover)),
				_Utils_Tuple2(
				'index',
				A2($elm$json$Json$Encode$list, encodeIndexEntry, index))
			]));
};
var $author$project$Publications$Publications$saveBulletinMeta = F2(
	function (bulletin, sessionId) {
		var name = function (s) {
			return s + '.jpg';
		}(
			A3(
				$elm$core$String$padLeft,
				3,
				'0',
				$elm$core$String$fromInt(bulletin.gH)));
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'name',
						$elm$json$Json$Encode$string(name)),
						_Utils_Tuple2(
						'bulletin',
						$author$project$Publications$Publications$encodeBulletin(bulletin))
					])));
		return $elm$http$Http$request(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					$author$project$Publications$Publications$BulletinSaved(bulletin.gH),
					$author$project$Publications$Publications$decodeSuccess),
				gu: _List_Nil,
				gO: 'POST',
				hz: $elm$core$Maybe$Nothing,
				hC: $elm$core$Maybe$Just('bulletinMeta'),
				d$: '/saveBulletin.php'
			});
	});
var $author$project$Publications$Publications$DelibSaved = F2(
	function (a, b) {
		return {$: 27, a: a, b: b};
	});
var $author$project$Publications$Publications$encodeDelib = function (_v0) {
	var date = _v0.eg;
	var index = _v0.gB;
	var encodeIndexEntry = function (_v1) {
		var topic = _v1.a;
		var page = _v1.b;
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'topic',
					$elm$json$Json$Encode$string(topic)),
					_Utils_Tuple2(
					'page',
					$elm$json$Json$Encode$int(page))
				]));
	};
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'date',
				$elm$json$Json$Encode$int(
					$elm$time$Time$posixToMillis(date))),
				_Utils_Tuple2(
				'index',
				A2($elm$json$Json$Encode$list, encodeIndexEntry, index))
			]));
};
var $author$project$Publications$Publications$saveDelibMeta = F2(
	function (delib, sessionId) {
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'delib',
						$author$project$Publications$Publications$encodeDelib(delib))
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					$author$project$Publications$Publications$DelibSaved(
						$elm$time$Time$posixToMillis(delib.eg)),
					$author$project$Publications$Publications$decodeSuccess),
				d$: '/saveDelib.php'
			});
	});
var $author$project$Publications$Publications$MurolInfoSaved = F2(
	function (a, b) {
		return {$: 23, a: a, b: b};
	});
var $author$project$Publications$Publications$encodeMurolInfo = function (_v0) {
	var issue = _v0.gH;
	var date = _v0.eg;
	var topics = _v0.mi;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'issue',
				$elm$json$Json$Encode$int(issue)),
				_Utils_Tuple2(
				'date',
				$elm$json$Json$Encode$int(
					$elm$time$Time$posixToMillis(date))),
				_Utils_Tuple2(
				'topics',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, topics))
			]));
};
var $author$project$Publications$Publications$saveMurolInfoMeta = F2(
	function (murolInfo, sessionId) {
		var body = $elm$http$Http$jsonBody(
			$elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'sessionId',
						$elm$json$Json$Encode$string(sessionId)),
						_Utils_Tuple2(
						'murolInfo',
						$author$project$Publications$Publications$encodeMurolInfo(murolInfo))
					])));
		return $elm$http$Http$post(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					$author$project$Publications$Publications$MurolInfoSaved(murolInfo.gH),
					$author$project$Publications$Publications$decodeSuccess),
				d$: '/saveMurolInfo.php'
			});
	});
var $author$project$Publications$Publications$FileSelected = function (a) {
	return {$: 17, a: a};
};
var $author$project$Publications$Publications$selectFile = A2(
	$elm$file$File$Select$file,
	_List_fromArray(
		['application/pdf']),
	$author$project$Publications$Publications$FileSelected);
var $author$project$Publications$Publications$UploadDone = F2(
	function (a, b) {
		return {$: 21, a: a, b: b};
	});
var $author$project$Publications$Publications$uploadPub = F5(
	function (file, pubType, name, saveMetaCmd, sessionId) {
		var pubTypeStr = function () {
			switch (pubType) {
				case 0:
					return 'murolInfo';
				case 1:
					return 'delib';
				default:
					return 'bulletin';
			}
		}();
		var body = $elm$http$Http$multipartBody(
			_List_fromArray(
				[
					A2($elm$http$Http$stringPart, 'sessionId', sessionId),
					A2($elm$http$Http$stringPart, 'pubType', pubTypeStr),
					A2($elm$http$Http$stringPart, 'name', name),
					A2($elm$http$Http$filePart, 'file', file)
				]));
		return $elm$http$Http$request(
			{
				eY: body,
				du: A2(
					$elm$http$Http$expectJson,
					$author$project$Publications$Publications$UploadDone(
						saveMetaCmd(sessionId)),
					$author$project$Internals$CommonHelpers$decodeUploadStatus),
				gu: _List_Nil,
				gO: 'POST',
				hz: $elm$core$Maybe$Nothing,
				hC: $elm$core$Maybe$Just('publicationUpload'),
				d$: '/uploadPub.php'
			});
	});
var $author$project$Publications$Publications$update = F3(
	function (config, msg, model) {
		switch (msg.$) {
			case 0:
				var pt = msg.a;
				var _v1 = model.bW;
				switch (_v1.$) {
					case 0:
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									bW: $author$project$Publications$Publications$Select(pt)
								}),
							$elm$core$Platform$Cmd$none);
					case 1:
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									bW: $author$project$Publications$Publications$Edit(pt)
								}),
							$elm$core$Platform$Cmd$none);
					default:
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									bW: $author$project$Publications$Publications$Upload(pt)
								}),
							$elm$core$Platform$Cmd$none);
				}
			case 1:
				var res = msg.a;
				if (!res.$) {
					var murolInfos = res.a.kl;
					var delibs = res.a.iW;
					var bulletins = res.a.ij;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{ij: bulletins, iW: delibs, b4: $author$project$Internals$ToolHelpers$ToolLoadingSuccess, kl: murolInfos}),
						$elm$core$Platform$Cmd$none);
				} else {
					var e = res.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								b4: $author$project$Internals$ToolHelpers$ToolLoadingFailure('')
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 2:
				var n = msg.a;
				var _v3 = A2($elm$core$Dict$get, n, model.kl);
				if (!_v3.$) {
					var issue = _v3.a.gH;
					var date = _v3.a.eg;
					var topics = _v3.a.mi;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								bw: A2($author$project$Internals$CommonHelpers$dateToStr, config.fY, date),
								aa: $elm$core$Maybe$Just(date),
								bW: $author$project$Publications$Publications$Edit(0),
								aB: $elm$core$Maybe$Just(
									$elm$core$String$fromInt(issue)),
								H: true,
								mi: $elm$core$Dict$fromList(
									A2(
										$elm$core$List$indexedMap,
										F2(
											function (i, t) {
												return _Utils_Tuple2(
													i,
													$elm$core$Maybe$Just(t));
											}),
										topics))
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 3:
				var n = msg.a;
				var _v4 = A2($elm$core$Dict$get, n, model.iW);
				if (!_v4.$) {
					var date = _v4.a.eg;
					var index = _v4.a.gB;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								bw: A2($author$project$Internals$CommonHelpers$dateToStr, config.fY, date),
								aa: $elm$core$Maybe$Just(date),
								bW: $author$project$Publications$Publications$Edit(1),
								gB: $elm$core$Dict$fromList(
									A2(
										$elm$core$List$indexedMap,
										F2(
											function (i, _v5) {
												var t = _v5.a;
												var p = _v5.b;
												return _Utils_Tuple2(
													i,
													_Utils_Tuple2(
														$elm$core$Maybe$Just(t),
														$elm$core$Maybe$Just(p)));
											}),
										index)),
								H: true
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 4:
				var n = msg.a;
				var _v6 = A2($elm$core$Dict$get, n, model.ij);
				if (!_v6.$) {
					var issue = _v6.a.gH;
					var date = _v6.a.eg;
					var cover = _v6.a.iM;
					var index = _v6.a.gB;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								cY: $elm$core$Maybe$Nothing,
								bw: A2($author$project$Internals$CommonHelpers$dateToStr, config.fY, date),
								aa: $elm$core$Maybe$Just(date),
								bW: $author$project$Publications$Publications$Edit(2),
								gB: $elm$core$Dict$fromList(
									A2(
										$elm$core$List$indexedMap,
										F2(
											function (i, _v7) {
												var t = _v7.a;
												var p = _v7.b;
												return _Utils_Tuple2(
													i,
													_Utils_Tuple2(
														$elm$core$Maybe$Just(t),
														$elm$core$Maybe$Just(p)));
											}),
										index)),
								aB: $elm$core$Maybe$Just(
									$elm$core$String$fromInt(issue)),
								H: true
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 5:
				var issue = msg.a;
				var newIssue = (issue === '') ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(issue);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{aB: newIssue}),
					$elm$core$Platform$Cmd$none);
			case 6:
				var date = msg.a;
				var _v8 = A2($author$project$Publications$Publications$parseDate, config.fY, date);
				if (!_v8.$) {
					var posix = _v8.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								bw: date,
								aa: $elm$core$Maybe$Just(posix)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{bw: date, aa: $elm$core$Maybe$Nothing}),
						$elm$core$Platform$Cmd$none);
				}
			case 7:
				var key = $author$project$Publications$Publications$nextKey(model.mi);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							mi: A3($elm$core$Dict$insert, key, $elm$core$Maybe$Nothing, model.mi)
						}),
					$elm$core$Platform$Cmd$none);
			case 8:
				var key = msg.a;
				var topic = msg.b;
				var newTopic = (topic === '') ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(topic);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							mi: A3($elm$core$Dict$insert, key, newTopic, model.mi)
						}),
					$elm$core$Platform$Cmd$none);
			case 9:
				var key = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							mi: A2($elm$core$Dict$remove, key, model.mi)
						}),
					$elm$core$Platform$Cmd$none);
			case 10:
				var key = $author$project$Publications$Publications$nextKey(model.gB);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							gB: A3(
								$elm$core$Dict$insert,
								key,
								_Utils_Tuple2($elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
								model.gB)
						}),
					$elm$core$Platform$Cmd$none);
			case 11:
				var key = msg.a;
				var topic = msg.b;
				var _v9 = A2($elm$core$Dict$get, key, model.gB);
				if (!_v9.$) {
					var _v10 = _v9.a;
					var pNbr = _v10.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								gB: A3(
									$elm$core$Dict$insert,
									key,
									_Utils_Tuple2(
										(topic === '') ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(topic),
										pNbr),
									model.gB)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 12:
				var key = msg.a;
				var pageNbr = msg.b;
				var _v11 = A2($elm$core$Dict$get, key, model.gB);
				if (!_v11.$) {
					var _v12 = _v11.a;
					var topic = _v12.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								gB: A3(
									$elm$core$Dict$insert,
									key,
									_Utils_Tuple2(
										topic,
										$elm$core$String$toInt(pageNbr)),
									model.gB)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 13:
				var key = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							gB: A2($elm$core$Dict$remove, key, model.gB)
						}),
					$elm$core$Platform$Cmd$none);
			case 14:
				var i = msg.a;
				var _v13 = $author$project$Publications$Publications$extractPubType(model);
				if (!_v13) {
					var newTopics = $elm$core$Dict$fromList(
						A2(
							$elm$core$List$indexedMap,
							$elm$core$Tuple$pair,
							A3(
								$elm_community$list_extra$List$Extra$swapAt,
								i,
								i - 1,
								$elm$core$Dict$values(model.mi))));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{mi: newTopics}),
						$elm$core$Platform$Cmd$none);
				} else {
					var newIndex = $elm$core$Dict$fromList(
						A2(
							$elm$core$List$indexedMap,
							$elm$core$Tuple$pair,
							A3(
								$elm_community$list_extra$List$Extra$swapAt,
								i,
								i - 1,
								$elm$core$Dict$values(model.gB))));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{gB: newIndex}),
						$elm$core$Platform$Cmd$none);
				}
			case 15:
				var i = msg.a;
				var _v14 = $author$project$Publications$Publications$extractPubType(model);
				if (!_v14) {
					var newTopics = $elm$core$Dict$fromList(
						A2(
							$elm$core$List$indexedMap,
							$elm$core$Tuple$pair,
							A3(
								$elm_community$list_extra$List$Extra$swapAt,
								i,
								i + 1,
								$elm$core$Dict$values(model.mi))));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{mi: newTopics}),
						$elm$core$Platform$Cmd$none);
				} else {
					var newIndex = $elm$core$Dict$fromList(
						A2(
							$elm$core$List$indexedMap,
							$elm$core$Tuple$pair,
							A3(
								$elm_community$list_extra$List$Extra$swapAt,
								i,
								i + 1,
								$elm$core$Dict$values(model.gB))));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{gB: newIndex}),
						$elm$core$Platform$Cmd$none);
				}
			case 16:
				return _Utils_Tuple2(
					model,
					A2($elm$core$Platform$Cmd$map, model.bY, $author$project$Publications$Publications$selectFile));
			case 17:
				var file = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							bW: $author$project$Publications$Publications$Edit(
								$author$project$Publications$Publications$extractPubType(model)),
							ay: $elm$core$Maybe$Just(file)
						}),
					function () {
						var _v15 = model.bW;
						if ((!_v15.$) && (_v15.a === 2)) {
							var _v16 = _v15.a;
							return A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								A2(
									$elm$core$Task$perform,
									$author$project$Publications$Publications$FileConverted,
									$elm$file$File$toUrl(file)));
						} else {
							return $elm$core$Platform$Cmd$none;
						}
					}());
			case 18:
				var fileStr = msg.a;
				return _Utils_Tuple2(
					model,
					A2(
						$elm$core$Platform$Cmd$map,
						model.bY,
						$author$project$Publications$Publications$requestBulletinCover(
							$elm$json$Json$Encode$string(fileStr))));
			case 19:
				var json = msg.a;
				var _v17 = A2($elm$json$Json$Decode$decodeValue, $author$project$Publications$Publications$decodeBulletinCover, json);
				if (!_v17.$) {
					var cover = _v17.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								cY: $elm$core$Maybe$Just(cover)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					var e = _v17.a;
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 20:
				var progress = msg.a;
				if (!progress.$) {
					var sent = progress.a.lx;
					var size = progress.a.fJ;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								j: $elm$core$Maybe$Just(
									_Utils_Tuple2(
										$elm$core$Basics$floor((100 * sent) / size),
										$elm$core$Maybe$Nothing))
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 21:
				var saveMetaCmd = msg.a;
				var res = msg.b;
				if (!res.$) {
					if (!res.a.$) {
						var _v20 = res.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									j: $elm$core$Maybe$Just(
										_Utils_Tuple2(
											100,
											$elm$core$Maybe$Just($author$project$Internals$CommonHelpers$UploadSuccessful)))
								}),
							A2($elm$core$Platform$Cmd$map, model.bY, saveMetaCmd));
					} else {
						var e = res.a.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									j: $elm$core$Maybe$Just(
										_Utils_Tuple2(
											0,
											$elm$core$Maybe$Just(
												$author$project$Internals$CommonHelpers$UploadFailure(e))))
								}),
							$elm$core$Platform$Cmd$none);
					}
				} else {
					var e = res.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								j: $elm$core$Maybe$Just(
									_Utils_Tuple2(
										0,
										$elm$core$Maybe$Just(
											$author$project$Internals$CommonHelpers$UploadFailure(
												$author$project$Internals$CommonHelpers$httpErrorToString(e)))))
							}),
						$elm$core$Platform$Cmd$none);
				}
			case 22:
				var _v21 = _Utils_Tuple3(
					A2($elm$core$Maybe$andThen, $elm$core$String$toInt, model.aB),
					model.aa,
					A2(
						$elm$core$List$filterMap,
						$elm$core$Basics$identity,
						$elm$core$Dict$values(model.mi)));
				if (((!_v21.a.$) && (!_v21.b.$)) && _v21.c.b) {
					var issue = _v21.a.a;
					var date = _v21.b.a;
					var _v22 = _v21.c;
					var t = _v22.a;
					var ts = _v22.b;
					var saveMetaCmd = $author$project$Publications$Publications$saveMurolInfoMeta(
						{
							eg: date,
							gH: issue,
							mi: A2($elm$core$List$cons, t, ts)
						});
					var name = function (s) {
						return s + '.pdf';
					}(
						A3(
							$elm$core$String$padLeft,
							3,
							'0',
							$elm$core$String$fromInt(issue)));
					if (model.H) {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									bW: $author$project$Publications$Publications$Upload(0),
									Y: 1
								}),
							A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								A2($author$project$Auth$AuthPlugin$cmdIfLogged, config.be, saveMetaCmd)));
					} else {
						var _v23 = model.ay;
						if (!_v23.$) {
							var file = _v23.a;
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										bW: $author$project$Publications$Publications$Upload(0),
										Y: 1
									}),
								A2(
									$elm$core$Platform$Cmd$map,
									model.bY,
									A2(
										$author$project$Auth$AuthPlugin$cmdIfLogged,
										config.be,
										A4($author$project$Publications$Publications$uploadPub, file, 0, name, saveMetaCmd))));
						} else {
							return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
						}
					}
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 23:
				var issue = msg.a;
				var res = msg.b;
				if ((!res.$) && res.a) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								aU: A2($elm$core$Dict$remove, issue, model.aU),
								Y: 2
							}),
						A2(
							$elm$core$Task$perform,
							function (_v25) {
								return config.hd;
							},
							$elm$core$Task$succeed(0)));
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{Y: 3}),
						$elm$core$Platform$Cmd$none);
				}
			case 24:
				var issue = msg.a;
				var _v26 = A2($elm$core$Dict$get, issue, model.kl);
				if (!_v26.$) {
					var mu = _v26.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								aU: A3($elm$core$Dict$insert, issue, mu, model.aU),
								kl: A2($elm$core$Dict$remove, issue, model.kl)
							}),
						A2(
							$elm$core$Platform$Cmd$map,
							model.bY,
							A2(
								$author$project$Auth$AuthPlugin$cmdIfLogged,
								config.be,
								$author$project$Publications$Publications$deleteMurolInfo(issue))));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 25:
				var issue = msg.a;
				var res = msg.b;
				var _v27 = _Utils_Tuple2(
					res,
					A2($elm$core$Dict$get, issue, model.aU));
				if (!_v27.b.$) {
					if ((!_v27.a.$) && _v27.a.a) {
						var mu = _v27.b.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									aU: A2($elm$core$Dict$remove, issue, model.aU)
								}),
							A2(
								$elm$core$Task$perform,
								function (_v28) {
									return config.hd;
								},
								$elm$core$Task$succeed(0)));
					} else {
						var mu = _v27.b.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									aU: A2($elm$core$Dict$remove, issue, model.aU),
									kl: A3($elm$core$Dict$insert, issue, mu, model.kl)
								}),
							$elm$core$Platform$Cmd$none);
					}
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 26:
				var _v29 = _Utils_Tuple2(
					model.aa,
					A3(
						$elm$core$List$foldr,
						F2(
							function (v, acc) {
								if ((!v.a.$) && (!v.b.$)) {
									var topic = v.a.a;
									var pageNbr = v.b.a;
									return A2(
										$elm$core$List$cons,
										_Utils_Tuple2(topic, pageNbr),
										acc);
								} else {
									return acc;
								}
							}),
						_List_Nil,
						$elm$core$Dict$values(model.gB)));
				if ((!_v29.a.$) && _v29.b.b) {
					var date = _v29.a.a;
					var _v31 = _v29.b;
					var x = _v31.a;
					var xs = _v31.b;
					var saveMetaCmd = $author$project$Publications$Publications$saveDelibMeta(
						{
							eg: date,
							gB: A2($elm$core$List$cons, x, xs)
						});
					var name = function (s) {
						return s + '.pdf';
					}(
						A3(
							$elm$core$String$replace,
							'/',
							'-',
							A2($author$project$Internals$CommonHelpers$dateToStr, config.fY, date)));
					if (model.H) {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									bW: $author$project$Publications$Publications$Upload(1),
									Y: 1
								}),
							A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								A2($author$project$Auth$AuthPlugin$cmdIfLogged, config.be, saveMetaCmd)));
					} else {
						var _v32 = model.ay;
						if (!_v32.$) {
							var file = _v32.a;
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										bW: $author$project$Publications$Publications$Upload(1),
										Y: 1
									}),
								A2(
									$elm$core$Platform$Cmd$map,
									model.bY,
									A2(
										$author$project$Auth$AuthPlugin$cmdIfLogged,
										config.be,
										A4($author$project$Publications$Publications$uploadPub, file, 1, name, saveMetaCmd))));
						} else {
							return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
						}
					}
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 27:
				var date = msg.a;
				var res = msg.b;
				if ((!res.$) && res.a) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								aT: A2($elm$core$Dict$remove, date, model.aT),
								Y: 2
							}),
						A2(
							$elm$core$Task$perform,
							function (_v34) {
								return config.hd;
							},
							$elm$core$Task$succeed(0)));
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{Y: 3}),
						$elm$core$Platform$Cmd$none);
				}
			case 28:
				var date = msg.a;
				var _v35 = A2($elm$core$Dict$get, date, model.iW);
				if (!_v35.$) {
					var delib = _v35.a;
					var name = function (s) {
						return s + '.pdf';
					}(
						A3(
							$elm$core$String$replace,
							'/',
							'-',
							A2(
								$author$project$Internals$CommonHelpers$dateToStr,
								config.fY,
								$elm$time$Time$millisToPosix(date))));
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								iW: A2($elm$core$Dict$remove, date, model.iW),
								aT: A3($elm$core$Dict$insert, date, delib, model.aT)
							}),
						A2(
							$elm$core$Platform$Cmd$map,
							model.bY,
							A2(
								$author$project$Auth$AuthPlugin$cmdIfLogged,
								config.be,
								A2($author$project$Publications$Publications$deleteDelib, name, date))));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 29:
				var date = msg.a;
				var res = msg.b;
				var _v36 = _Utils_Tuple2(
					res,
					A2($elm$core$Dict$get, date, model.aT));
				if (!_v36.b.$) {
					if ((!_v36.a.$) && _v36.a.a) {
						var delib = _v36.b.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									aT: A2($elm$core$Dict$remove, date, model.aT)
								}),
							A2(
								$elm$core$Task$perform,
								function (_v37) {
									return config.hd;
								},
								$elm$core$Task$succeed(0)));
					} else {
						var delib = _v36.b.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									iW: A3($elm$core$Dict$insert, date, delib, model.iW),
									aT: A2($elm$core$Dict$remove, date, model.aT)
								}),
							$elm$core$Platform$Cmd$none);
					}
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 30:
				var _v38 = _Utils_Tuple2(
					_Utils_Tuple2(
						A2($elm$core$Maybe$andThen, $elm$core$String$toInt, model.aB),
						model.aa),
					A3(
						$elm$core$List$foldr,
						F2(
							function (v, acc) {
								if ((!v.a.$) && (!v.b.$)) {
									var topic = v.a.a;
									var pageNbr = v.b.a;
									return A2(
										$elm$core$List$cons,
										_Utils_Tuple2(topic, pageNbr),
										acc);
								} else {
									return acc;
								}
							}),
						_List_Nil,
						$elm$core$Dict$values(model.gB)));
				if (((!_v38.a.a.$) && (!_v38.a.b.$)) && _v38.b.b) {
					var _v40 = _v38.a;
					var issue = _v40.a.a;
					var date = _v40.b.a;
					var _v41 = _v38.b;
					var x = _v41.a;
					var xs = _v41.b;
					var saveMetaCmd = $author$project$Publications$Publications$saveBulletinMeta(
						{
							iM: A2($elm$core$Maybe$withDefault, '', model.cY),
							eg: date,
							gB: A2($elm$core$List$cons, x, xs),
							gH: issue
						});
					var name = function (s) {
						return s + '.pdf';
					}(
						A3(
							$elm$core$String$padLeft,
							3,
							'0',
							$elm$core$String$fromInt(issue)));
					if (model.H) {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									bW: $author$project$Publications$Publications$Upload(2),
									Y: 1
								}),
							A2(
								$elm$core$Platform$Cmd$map,
								model.bY,
								A2($author$project$Auth$AuthPlugin$cmdIfLogged, config.be, saveMetaCmd)));
					} else {
						var _v42 = model.ay;
						if (!_v42.$) {
							var file = _v42.a;
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										bW: $author$project$Publications$Publications$Upload(2),
										Y: 1
									}),
								A2(
									$elm$core$Platform$Cmd$map,
									model.bY,
									A2(
										$author$project$Auth$AuthPlugin$cmdIfLogged,
										config.be,
										A4($author$project$Publications$Publications$uploadPub, file, 2, name, saveMetaCmd))));
						} else {
							return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
						}
					}
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 31:
				var issue = msg.a;
				var res = msg.b;
				if ((!res.$) && res.a) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								aS: A2($elm$core$Dict$remove, issue, model.aS),
								Y: 2
							}),
						A2(
							$elm$core$Task$perform,
							function (_v44) {
								return config.hd;
							},
							$elm$core$Task$succeed(0)));
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{Y: 3}),
						$elm$core$Platform$Cmd$none);
				}
			case 32:
				var issue = msg.a;
				var _v45 = A2($elm$core$Dict$get, issue, model.ij);
				if (!_v45.$) {
					var bulletin = _v45.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								ij: A2($elm$core$Dict$remove, issue, model.ij),
								aS: A3($elm$core$Dict$insert, issue, bulletin, model.aS)
							}),
						A2(
							$elm$core$Platform$Cmd$map,
							model.bY,
							A2(
								$author$project$Auth$AuthPlugin$cmdIfLogged,
								config.be,
								$author$project$Publications$Publications$deleteBulletin(issue))));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 33:
				var issue = msg.a;
				var res = msg.b;
				var _v46 = _Utils_Tuple2(
					res,
					A2($elm$core$Dict$get, issue, model.aS));
				if (!_v46.b.$) {
					if ((!_v46.a.$) && _v46.a.a) {
						var bulletin = _v46.b.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									aS: A2($elm$core$Dict$remove, issue, model.aS)
								}),
							A2(
								$elm$core$Task$perform,
								function (_v47) {
									return config.hd;
								},
								$elm$core$Task$succeed(0)));
					} else {
						var bulletin = _v46.b.a;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									ij: A3($elm$core$Dict$insert, issue, bulletin, model.ij),
									aS: A2($elm$core$Dict$remove, issue, model.aS)
								}),
							$elm$core$Platform$Cmd$none);
					}
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 34:
				return _Utils_Tuple2(
					$author$project$Publications$Publications$init(model.bY),
					A2(
						$elm$core$Platform$Cmd$map,
						model.bY,
						$author$project$Publications$Publications$getAllPublications($author$project$Publications$Publications$LoadPublications)));
			default:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$MurolAdmin$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 1:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{D: 0, b4: 2}),
					$elm$core$Platform$Cmd$none);
			case 3:
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$FileExplorer$FileExplorer$load,
						model.fd,
						$author$project$Auth$AuthPlugin$getLogInfo(model.p)));
			case 2:
				var fileExplorerMsg = msg.a;
				var _v1 = A3(
					$author$project$FileExplorer$FileExplorer$update,
					{
						eT: $author$project$MurolAdmin$AddLog,
						be: $author$project$Auth$AuthPlugin$getLogInfo(model.p)
					},
					fileExplorerMsg,
					model.fd);
				var newFileExplorer = _v1.a;
				var fileExplorerCmds = _v1.b;
				var mbEditorPluginResult = _v1.c;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{fd: newFileExplorer}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[fileExplorerCmds])));
			case 0:
				var authToolMsg = msg.a;
				var _v2 = A3(
					$author$project$Auth$AuthPlugin$update,
					{eT: $author$project$MurolAdmin$AddLog},
					authToolMsg,
					model.p);
				var newAuthTool = _v2.a;
				var authToolCmds = _v2.b;
				var mbToolResult = _v2.c;
				var logInfo = $author$project$Auth$AuthPlugin$getLogInfo(newAuthTool);
				var _v3 = ((!model.b4) && (!_Utils_eq(logInfo, $author$project$Auth$AuthPlugin$LoggedOut))) ? _Utils_Tuple2(
					1,
					_List_fromArray(
						[
							A2($author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$load, model.a6, logInfo),
							A2($author$project$PageTreeEditor$PageTreeEditor$load, model.J, logInfo),
							A2($author$project$FileExplorer$FileExplorer$load, model.fd, logInfo),
							A2($author$project$NewsEditor$NewsEditor$load, model.aH, logInfo),
							A2($author$project$Publications$Publications$load, model.fB, logInfo)
						])) : _Utils_Tuple2(model.b4, _List_Nil);
				var newLoadingStatus = _v3.a;
				var loadingCmds = _v3.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							p: newAuthTool,
							D: _Utils_eq(
								mbToolResult,
								$elm$core$Maybe$Just($author$project$Internals$ToolHelpers$ToolQuit)) ? 0 : model.D,
							b4: newLoadingStatus
						}),
					$elm$core$Platform$Cmd$batch(
						_Utils_ap(
							_List_fromArray(
								[authToolCmds]),
							loadingCmds)));
			case 4:
				var pageEditorMsg = msg.a;
				var _v4 = A3(
					$author$project$PageEditor$PageEditor$update,
					{
						eT: $author$project$MurolAdmin$AddLog,
						fd: model.fd,
						gp: model.a6,
						j6: $author$project$PageTreeEditor$PageTreeEditor$loadedContent(model.J),
						be: $author$project$Auth$AuthPlugin$getLogInfo(model.p),
						J: model.J,
						hd: $author$project$MurolAdmin$ReloadFiles,
						fY: model.fY
					},
					pageEditorMsg,
					model.cP);
				var newPageEditor = _v4.a;
				var pageEditorCmds = _v4.b;
				var mbToolResult = _v4.c;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{cP: newPageEditor}),
					pageEditorCmds);
			case 5:
				var pageTreeEditorMsg = msg.a;
				var _v5 = A3(
					$author$project$PageTreeEditor$PageTreeEditor$update,
					{
						eT: $author$project$MurolAdmin$AddLog,
						iO: $author$project$PageEditor$PageEditor$currentDocument(model.cP),
						be: $author$project$Auth$AuthPlugin$getLogInfo(model.p)
					},
					pageTreeEditorMsg,
					model.J);
				var newPageTreeEditor = _v5.a;
				var pageTreeEditorCmds = _v5.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{J: newPageTreeEditor}),
					pageTreeEditorCmds);
			case 6:
				var generalDirectoryMsg = msg.a;
				var _v6 = A3(
					$author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$update,
					{
						eT: $author$project$MurolAdmin$AddLog,
						be: $author$project$Auth$AuthPlugin$getLogInfo(model.p),
						fY: model.fY
					},
					generalDirectoryMsg,
					model.a6);
				var newGeneralDirectory = _v6.a;
				var generalDirectoryCmds = _v6.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{a6: newGeneralDirectory}),
					generalDirectoryCmds);
			case 7:
				var newsEditorMsg = msg.a;
				var _v7 = A3(
					$author$project$NewsEditor$NewsEditor$update,
					{
						eT: $author$project$MurolAdmin$AddLog,
						be: $author$project$Auth$AuthPlugin$getLogInfo(model.p),
						J: model.J,
						fY: model.fY
					},
					newsEditorMsg,
					model.aH);
				var newNewsEditor = _v7.a;
				var newsEditorCmds = _v7.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{aH: newNewsEditor}),
					newsEditorCmds);
			case 8:
				var publicationsMsg = msg.a;
				var _v8 = A3(
					$author$project$Publications$Publications$update,
					{
						eT: $author$project$MurolAdmin$AddLog,
						be: $author$project$Auth$AuthPlugin$getLogInfo(model.p),
						hd: $author$project$MurolAdmin$ReloadFiles,
						fY: model.fY
					},
					publicationsMsg,
					model.fB);
				var newPublications = _v8.a;
				var newPubCmds = _v8.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{fB: newPublications}),
					newPubCmds);
			case 9:
				var helpMsg = msg.a;
				var _v9 = A3($author$project$Help$Help$update, 0, helpMsg, model.b1);
				var newHelp = _v9.a;
				var helpCmd = _v9.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{D: 7, b1: newHelp}),
					helpCmd);
			case 10:
				var id = msg.a;
				var _v10 = A2($author$project$Help$Help$externalUpdate, id, model.b1);
				var newHelp = _v10.a;
				var helpCmd = _v10.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{b1: newHelp}),
					helpCmd);
			case 11:
				var value = msg.a;
				var decodeTrixState = A3(
					$elm$json$Json$Decode$map2,
					$elm$core$Tuple$pair,
					A2($elm$json$Json$Decode$field, 'tool', $elm$json$Json$Decode$string),
					A2($elm$json$Json$Decode$field, 'state', $elm$json$Json$Decode$string));
				var _v11 = A2($elm$json$Json$Decode$decodeValue, decodeTrixState, value);
				if (!_v11.$) {
					var _v12 = _v11.a;
					var tool = _v12.a;
					var state = _v12.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								eQ: A3($elm$core$Dict$insert, tool, state, model.eQ)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 12:
				var t = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{D: t}),
					$elm$core$Platform$Cmd$batch(_List_Nil));
			case 13:
				var vp = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							aM: $elm$core$Basics$round(vp.hJ.jx),
							d0: $elm$core$Basics$round(vp.hJ.mt)
						}),
					$elm$core$Platform$Cmd$none);
			case 14:
				var width = msg.a;
				var height = msg.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{aM: height, d0: width}),
					$elm$core$Platform$Cmd$none);
			case 15:
				var zone = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{fY: zone}),
					$elm$core$Platform$Cmd$none);
			case 16:
				var log = msg.a;
				var _v13 = A2($author$project$Internals$CommonHelpers$hashLog, model.ll, log);
				var logHash = _v13.a;
				var newSeed = _v13.b;
				var newLogs = A4(
					$author$project$Internals$CommonHelpers$safeInsert,
					function (k) {
						return k + 1;
					},
					logHash,
					_Utils_Tuple2(log, false),
					model.cI);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{cI: newLogs, ll: newSeed}),
					$elm$core$Platform$Cmd$none);
			case 17:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{c9: !model.c9}),
					$elm$core$Platform$Cmd$none);
			case 18:
				var h = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							cI: A3(
								$elm$core$Dict$update,
								h,
								$elm$core$Maybe$andThen(
									function (_v14) {
										var l = _v14.a;
										var isOpen = _v14.b;
										return $elm$core$Maybe$Just(
											_Utils_Tuple2(l, !isOpen));
									}),
								model.cI)
						}),
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$MurolAdmin$FileExplorerTool = 1;
var $author$project$PageTreeEditor$PageTreeEditor$Full = 0;
var $author$project$MurolAdmin$GeneralDirectoryTool = 4;
var $author$project$MurolAdmin$Launch = {$: 1};
var $author$project$MurolAdmin$PageTreeTool = 3;
var $author$project$MurolAdmin$PublicationsTool = 6;
var $mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Button = {$: 8};
var $mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsEl = 2;
var $mdgriffith$elm_ui$Internal$Model$asEl = 2;
var $mdgriffith$elm_ui$Internal$Style$classes = {hN: 'a', eS: 'atv', hU: 'ab', hV: 'cx', hW: 'cy', hX: 'acb', hY: 'accx', hZ: 'accy', h_: 'acr', f$: 'al', f0: 'ar', h$: 'at', eU: 'ah', eV: 'av', h3: 's', h9: 'bh', ia: 'b', id: 'w7', $8: 'bd', ig: 'bdt', d3: 'bn', ih: 'bs', d6: 'cpe', ix: 'cp', iy: 'cpx', iz: 'cpy', e0: 'c', d8: 'ctr', d9: 'cb', ea: 'ccx', bU: 'ccy', dt: 'cl', ec: 'cr', iJ: 'ct', iQ: 'cptr', iR: 'ctxt', gl: 'fcs', gm: 'focus-within', jk: 'fs', jt: 'g', fg: 'hbh', fi: 'hc', gv: 'he', fj: 'hf', gw: 'hfp', jA: 'hv', jG: 'ic', jN: 'fr', jP: 'iml', jQ: 'imlf', jR: 'imlp', jS: 'implw', jT: 'it', jW: 'i', dB: 'lnk', db: 'nb', gV: 'notxt', kF: 'ol', kG: 'or', cO: 'oq', kO: 'oh', g3: 'pg', g4: 'p', kR: 'ppe', Z: 'ui', hi: 'r', lf: 'sb', lg: 'sbx', lh: 'sby', li: 'sbt', lD: 'e', lF: 'cap', lH: 'sev', lQ: 'sk', dV: 't', l0: 'tc', l2: 'w8', l3: 'w2', l4: 'w9', l5: 'tj', eP: 'tja', l6: 'tl', l7: 'w3', l8: 'w5', l9: 'w4', ma: 'tr', mb: 'w6', md: 'w1', me: 'tun', hE: 'ts', cV: 'clr', hF: 'u', fT: 'wc', hK: 'we', fU: 'wf', hL: 'wfp', fV: 'wrp'};
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $mdgriffith$elm_ui$Internal$Model$Generic = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.h3 + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.e0);
var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.h3 + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.jt);
var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.h3 + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.g3);
var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.h3 + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.g4);
var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.h3 + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.hi);
var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.h3 + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.lD);
var $mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context) {
		case 0:
			return $mdgriffith$elm_ui$Internal$Model$rowClass;
		case 1:
			return $mdgriffith$elm_ui$Internal$Model$columnClass;
		case 2:
			return $mdgriffith$elm_ui$Internal$Model$singleClass;
		case 3:
			return $mdgriffith$elm_ui$Internal$Model$gridClass;
		case 4:
			return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return $mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 0:
				return existing;
			case 1:
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 2:
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 0:
				return existing;
			case 1:
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 2:
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$AsParagraph = 4;
var $mdgriffith$elm_ui$Internal$Model$asParagraph = 4;
var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$html$Html$div = _VirtualDom_node('div');
var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 0:
			var px = x.a;
			return $elm$core$String$fromInt(px) + 'px';
		case 1:
			return 'auto';
		case 2:
			var i = x.a;
			return $elm$core$String$fromInt(i) + 'fr';
		case 3:
			var min = x.a;
			var len = x.b;
			return 'min' + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'mv-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			return $elm$core$Maybe$Just(
				'tfrm-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 13:
			var name = style.a;
			return name;
		case 12:
			var name = style.a;
			var o = style.b;
			return name;
		case 0:
			var _class = style.a;
			return _class;
		case 1:
			var name = style.a;
			return name;
		case 2:
			var i = style.a;
			return 'font-size-' + $elm$core$String$fromInt(i);
		case 3:
			var _class = style.a;
			return _class;
		case 4:
			var _class = style.a;
			return _class;
		case 5:
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 7:
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 6:
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 8:
			var template = style.a;
			return 'grid-rows-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.ld)) + ('-cols-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.iC)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.lI.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.lI.b)))))));
		case 9:
			var pos = style.a;
			return 'gp grid-pos-' + ($elm$core$String$fromInt(pos.hi) + ('-' + ($elm$core$String$fromInt(pos.gb) + ('-' + ($elm$core$String$fromInt(pos.mt) + ('-' + $elm$core$String$fromInt(pos.jx)))))));
		case 11:
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector) {
					case 0:
						return 'fs';
					case 1:
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (sty) {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_v1 === '') {
							return '';
						} else {
							var styleName = _v1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2($elm$core$Set$insert, styleName, cache),
			A2($elm$core$List$cons, style, existing));
	});
var $mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var $mdgriffith$elm_ui$Internal$Model$formatColor = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return 'rgba(' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(red * 255)) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(green * 255))) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(blue * 255))) + (',' + ($elm$core$String$fromFloat(alpha) + ')')))));
};
var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.gD ? $elm$core$Maybe$Just('inset') : $elm$core$Maybe$Nothing,
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.kD.a) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.kD.b) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.ic) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.fJ) + 'px'),
					$elm$core$Maybe$Just(
					$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.iA))
				])));
};
var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gm) + ':focus-within',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.ie),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.h6),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										ic: shadow.ic,
										iA: shadow.iA,
										gD: false,
										kD: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.kD)),
										fJ: shadow.fJ
									}));
						},
						focus.lC),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					]))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h3) + (':focus .focusable, ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h3) + '.focusable:focus')),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.ie),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.h6),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										ic: shadow.ic,
										iA: shadow.iA,
										gD: false,
										kD: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.kD)),
										fJ: shadow.fJ
									}));
						},
						focus.lC),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					])))
		]);
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 5, a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Left = 3;
var $mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Right = 2;
var $mdgriffith$elm_ui$Internal$Style$Self = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Content = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Style$Bottom = 1;
var $mdgriffith$elm_ui$Internal$Style$CenterX = 4;
var $mdgriffith$elm_ui$Internal$Style$CenterY = 5;
var $mdgriffith$elm_ui$Internal$Style$Top = 0;
var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[0, 1, 2, 3, 4, 5]);
var $mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc) {
		case 0:
			var _v1 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.iJ);
		case 1:
			var _v2 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d9);
		case 2:
			var _v3 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ec);
		case 3:
			var _v4 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dt);
		case 4:
			var _v5 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ea);
		default:
			var _v6 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bU);
	}
};
var $mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc) {
		case 0:
			var _v1 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h$);
		case 1:
			var _v2 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hU);
		case 2:
			var _v3 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f0);
		case 3:
			var _v4 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f$);
		case 4:
			var _v5 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hV);
		default:
			var _v6 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hW);
	}
};
var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _v0 = values(alignment);
		var content = _v0.a;
		var indiv = _v0.b;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$contentName(alignment),
				content),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h3),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(alignment),
						indiv)
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fg),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h9),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.li),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dV),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fU),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fi),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fU),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hL),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fT),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		$mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment) {
				case 0:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 1:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 2:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 3:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 4:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h3),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h3),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(alignment),
						values(alignment))
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$Above = 0;
var $mdgriffith$elm_ui$Internal$Style$Behind = 5;
var $mdgriffith$elm_ui$Internal$Style$Below = 1;
var $mdgriffith$elm_ui$Internal$Style$OnLeft = 3;
var $mdgriffith$elm_ui$Internal$Style$OnRight = 2;
var $mdgriffith$elm_ui$Internal$Style$Within = 4;
var $mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = 0;
	var _v0 = function () {
		switch (loc) {
			case 0:
				return 0;
			case 1:
				return 0;
			case 2:
				return 0;
			case 3:
				return 0;
			case 4:
				return 0;
			default:
				return 0;
		}
	}();
	return _List_fromArray(
		[0, 1, 2, 3, 4, 5]);
}();
var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h3),
			_Utils_ap(
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lD),
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jG))),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h3) + ':focus',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.Z),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h3),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jN),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.db),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.db),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lD),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				$mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc) {
							case 0:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hN),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fU),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 1:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ia),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 2:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.kG),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 3:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.kF),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 4:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jN),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h9),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h3),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fV),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gV),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.iQ),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.iR),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.kR),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d6),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cV),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cO),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.jA, $mdgriffith$elm_ui$Internal$Style$classes.cV)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.jA, $mdgriffith$elm_ui$Internal$Style$classes.cO)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.gl, $mdgriffith$elm_ui$Internal$Style$classes.cV)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.gl, $mdgriffith$elm_ui$Internal$Style$classes.cO)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.eS, $mdgriffith$elm_ui$Internal$Style$classes.cV)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.eS, $mdgriffith$elm_ui$Internal$Style$classes.cO)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hE),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lf),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lg),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hi),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lh),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.e0),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lD),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ix),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.iy),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.iz),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fT),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d3),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.$8),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ig),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ih),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dV),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jT),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lD),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hi),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h3),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hK),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dB),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gw),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fU),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d8),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.h_,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.hY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hV),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.hY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hV),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.hY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hW),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.hY + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.h_ + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.hY)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 1:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 2:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 3:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 4:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lH),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.e0),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h3),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gv),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.e0),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fU),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hL),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fT),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.hX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.hZ,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hW),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.hZ,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hW),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.hZ,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hW),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.hZ + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.hX + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.hZ)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 1:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 2:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 3:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 4:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d8),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lH),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jt),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h3),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 1:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 2:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 3:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 4:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.g3),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h3 + ':first-child'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.h3 + ($mdgriffith$elm_ui$Internal$Style$selfName(3) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.h3))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.h3 + ($mdgriffith$elm_ui$Internal$Style$selfName(2) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.h3))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 1:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 2:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 3:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 4:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jP),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background-color', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jS),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lD),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jR),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jQ),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'transparent')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.g4),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fg),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h9),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dV),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lD),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jN),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h9),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hN),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ia),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.kG),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.kF),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dV),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lD),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Internal$Style$Child,
										$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dV),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
											]))
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hi),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.e0),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jt),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 1:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 2:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 3:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 4:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.md),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.l3),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.l7),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.l9),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.l8),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.mb),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.id),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.l2),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.l4),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.jW),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lQ),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hF),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hF),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.lQ)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.me),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.l5),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eP),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.l0),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ma),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.l6),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var $mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + $elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							$elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 6)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 8, 32)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var $mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + ($mdgriffith$elm_ui$Internal$Style$classes.h3 + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + ($mdgriffith$elm_ui$Internal$Style$classes.h3 + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$sliderReset = '\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$thumbReset = '\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var $mdgriffith$elm_ui$Internal$Style$trackReset = '\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h3) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hi) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h3) + (' { flex-basis: auto !important; } ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h3) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hi) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.h3) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d8) + (' { flex-basis: auto !important; }}' + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
var $mdgriffith$elm_ui$Internal$Style$Intermediate = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return {d7: closing, ah: _List_Nil, ci: _List_Nil, a$: selector};
	});
var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_v0, rulesToRender) {
		var parent = _v0;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 0:
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								ci: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.ci)
							});
					case 2:
						var _v2 = rule.a;
						var prop = _v2.a;
						var value = _v2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								ah: A2(
									$elm$core$List$cons,
									{d7: '\n}', ah: _List_Nil, ci: props, a$: '@supports (' + (prop + (':' + (value + (') {' + parent.a$))))},
									rendered.ah)
							});
					case 4:
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								ah: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.a$ + (' + ' + selector), ''),
										adjRules),
									rendered.ah)
							});
					case 1:
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								ah: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.a$ + (' > ' + child), ''),
										childRules),
									rendered.ah)
							});
					case 3:
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								ah: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											$mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.a$, descriptor),
											''),
										descriptorRules),
									rendered.ah)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								ah: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.a$, ''),
										batched),
									rendered.ah)
							});
				}
			});
		return A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender);
	});
var $mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var x = _v3.a;
					var y = _v3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _v2 = rule.ci;
		if (!_v2.b) {
			return '';
		} else {
			return rule.a$ + ('{' + (renderValues(rule.ci) + (rule.d7 + '}')));
		}
	};
	var renderIntermediate = function (_v0) {
		var rule = _v0;
		return _Utils_ap(
			renderClass(rule),
			$elm$core$String$concat(
				A2($elm$core$List$map, renderIntermediate, rule.ah)));
	};
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			renderIntermediate,
			A3(
				$elm$core$List$foldr,
				F2(
					function (_v1, existing) {
						var name = _v1.a;
						var styleRules = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Internal$Style$renderRules,
								A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	$mdgriffith$elm_ui$Internal$Style$overrides,
	$mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $mdgriffith$elm_ui$Internal$Model$staticRoot = function (opts) {
	var _v0 = opts.h;
	switch (_v0) {
		case 0:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'div',
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$elm$virtual_dom$VirtualDom$node,
						'style',
						_List_Nil,
						_List_fromArray(
							[
								$elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
							]))
					]));
		case 1:
			return $elm$virtual_dom$VirtualDom$text('');
		default:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'elm-ui-static-rules',
				_List_fromArray(
					[
						A2(
						$elm$virtual_dom$VirtualDom$property,
						'rules',
						$elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
					]),
				_List_Nil);
	}
};
var $mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 0:
			return 'serif';
		case 1:
			return 'sans-serif';
		case 2:
			return 'monospace';
		case 3:
			var name = font.a;
			return '\"' + (name + '\"');
		case 4:
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.I;
			return '\"' + (name + '\"');
	}
};
var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 0:
			var name = _var.a;
			return name === 'smcp';
		case 1:
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 5) {
		var font = typeface.a;
		return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.hH);
	} else {
		return false;
	}
};
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _v0, existing) {
		var key = _v0.a;
		var val = _v0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(
	function (options, maybePseudo, selector, props) {
		if (maybePseudo.$ === 1) {
			return _List_fromArray(
				[
					selector + ('{' + (A3(
					$elm$core$List$foldl,
					$mdgriffith$elm_ui$Internal$Model$renderProps(false),
					'',
					props) + '\n}'))
				]);
		} else {
			var pseudo = maybePseudo.a;
			switch (pseudo) {
				case 1:
					var _v2 = options.jA;
					switch (_v2) {
						case 0:
							return _List_Nil;
						case 2:
							return _List_fromArray(
								[
									selector + ('-hv {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(true),
									'',
									props) + '\n}'))
								]);
						default:
							return _List_fromArray(
								[
									selector + ('-hv:hover {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(false),
									'',
									props) + '\n}'))
								]);
					}
				case 0:
					var renderedProps = A3(
						$elm$core$List$foldl,
						$mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props);
					return _List_fromArray(
						[selector + ('-fs:focus {' + (renderedProps + '\n}')), '.' + ($mdgriffith$elm_ui$Internal$Style$classes.h3 + (':focus ~ ' + (selector + ('-fs:not(.focus)  {' + (renderedProps + '\n}'))))), '.' + ($mdgriffith$elm_ui$Internal$Style$classes.h3 + (':focus ' + (selector + ('-fs  {' + (renderedProps + '\n}'))))), selector + ('-fs:focus-within {' + (renderedProps + '\n}')), '.focusable-parent:focus ~ ' + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.h3 + (' ' + (selector + ('-fs {' + (renderedProps + '\n}'))))))]);
				default:
					return _List_fromArray(
						[
							selector + ('-act:active {' + (A3(
							$elm$core$List$foldl,
							$mdgriffith$elm_ui$Internal$Model$renderProps(false),
							'',
							props) + '\n}'))
						]);
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 0:
			var name = _var.a;
			return '\"' + (name + '\"');
		case 1:
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + $elm$core$String$fromInt(index)));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 5) {
		var font = typeface.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.hH)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'translate3d(' + ($elm$core$String$fromFloat(x) + ('px, ' + ($elm$core$String$fromFloat(y) + ('px, ' + ($elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + ($elm$core$String$fromFloat(tx) + ('px, ' + ($elm$core$String$fromFloat(ty) + ('px, ' + ($elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + ($elm$core$String$fromFloat(sx) + (', ' + ($elm$core$String$fromFloat(sy) + (', ' + ($elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + ($elm$core$String$fromFloat(ox) + (', ' + ($elm$core$String$fromFloat(oy) + (', ' + ($elm$core$String$fromFloat(oz) + (', ' + ($elm$core$String$fromFloat(angle) + 'rad)')))))));
			return $elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(
	function (options, rule, maybePseudo) {
		switch (rule.$) {
			case 0:
				var selector = rule.a;
				var props = rule.b;
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
			case 13:
				var name = rule.a;
				var prop = rule.b;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
						]));
			case 12:
				var name = rule.a;
				var transparency = rule.b;
				var opacity = A2(
					$elm$core$Basics$max,
					0,
					A2($elm$core$Basics$min, 1, 1 - transparency));
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'opacity',
							$elm$core$String$fromFloat(opacity))
						]));
			case 2:
				var i = rule.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			case 1:
				var name = rule.a;
				var typefaces = rule.b;
				var features = A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
				var families = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-family',
						A2(
							$elm$core$String$join,
							', ',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-variant',
						A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
					]);
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, '.' + name, families);
			case 3:
				var _class = rule.a;
				var prop = rule.b;
				var val = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
						]));
			case 4:
				var _class = rule.a;
				var prop = rule.b;
				var color = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							prop,
							$mdgriffith$elm_ui$Internal$Model$formatColor(color))
						]));
			case 5:
				var cls = rule.a;
				var x = rule.b;
				var y = rule.c;
				var yPx = $elm$core$String$fromInt(y) + 'px';
				var xPx = $elm$core$String$fromInt(x) + 'px';
				var single = '.' + $mdgriffith$elm_ui$Internal$Style$classes.lD;
				var row = '.' + $mdgriffith$elm_ui$Internal$Style$classes.hi;
				var wrappedRow = '.' + ($mdgriffith$elm_ui$Internal$Style$classes.fV + row);
				var right = '.' + $mdgriffith$elm_ui$Internal$Style$classes.f0;
				var paragraph = '.' + $mdgriffith$elm_ui$Internal$Style$classes.g4;
				var page = '.' + $mdgriffith$elm_ui$Internal$Style$classes.g3;
				var left = '.' + $mdgriffith$elm_ui$Internal$Style$classes.f$;
				var halfY = $elm$core$String$fromFloat(y / 2) + 'px';
				var halfX = $elm$core$String$fromFloat(x / 2) + 'px';
				var column = '.' + $mdgriffith$elm_ui$Internal$Style$classes.e0;
				var _class = '.' + cls;
				var any = '.' + $mdgriffith$elm_ui$Internal$Style$classes.h3;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (row + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (wrappedRow + (' > ' + any)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (column + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_Utils_ap(_class, paragraph),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							'textarea' + (any + _class),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)')),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'height',
									'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::after'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-top',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::before'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-bottom',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								]))
						]));
			case 7:
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'padding',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 6:
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'border-width',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 8:
				var template = rule.a;
				var toGridLengthHelper = F3(
					function (minimum, maximum, x) {
						toGridLengthHelper:
						while (true) {
							switch (x.$) {
								case 0:
									var px = x.a;
									return $elm$core$String$fromInt(px) + 'px';
								case 1:
									var _v2 = _Utils_Tuple2(minimum, maximum);
									if (_v2.a.$ === 1) {
										if (_v2.b.$ === 1) {
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											return 'max-content';
										} else {
											var _v6 = _v2.a;
											var maxSize = _v2.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v2.b.$ === 1) {
											var minSize = _v2.a.a;
											var _v5 = _v2.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
										} else {
											var minSize = _v2.a.a;
											var maxSize = _v2.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 2:
									var i = x.a;
									var _v7 = _Utils_Tuple2(minimum, maximum);
									if (_v7.a.$ === 1) {
										if (_v7.b.$ === 1) {
											var _v8 = _v7.a;
											var _v9 = _v7.b;
											return $elm$core$String$fromInt(i) + 'fr';
										} else {
											var _v11 = _v7.a;
											var maxSize = _v7.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v7.b.$ === 1) {
											var minSize = _v7.a.a;
											var _v10 = _v7.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
										} else {
											var minSize = _v7.a.a;
											var maxSize = _v7.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 3:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = $elm$core$Maybe$Just(m),
										$temp$maximum = maximum,
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
								default:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = minimum,
										$temp$maximum = $elm$core$Maybe$Just(m),
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
							}
						}
					});
				var toGridLength = function (x) {
					return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
				};
				var xSpacing = toGridLength(template.lI.a);
				var ySpacing = toGridLength(template.lI.b);
				var rows = function (x) {
					return 'grid-template-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.ld)));
				var msRows = function (x) {
					return '-ms-grid-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.iC)));
				var msColumns = function (x) {
					return '-ms-grid-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.iC)));
				var gapY = 'grid-row-gap:' + (toGridLength(template.lI.b) + ';');
				var gapX = 'grid-column-gap:' + (toGridLength(template.lI.a) + ';');
				var columns = function (x) {
					return 'grid-template-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.iC)));
				var _class = '.grid-rows-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.ld)) + ('-cols-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.iC)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.lI.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.lI.b)))))));
				var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msColumns + (msRows + '}')));
				return _List_fromArray(
					[base, supports]);
			case 9:
				var position = rule.a;
				var msPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'-ms-grid-row: ' + ($elm$core$String$fromInt(position.hi) + ';'),
							'-ms-grid-row-span: ' + ($elm$core$String$fromInt(position.jx) + ';'),
							'-ms-grid-column: ' + ($elm$core$String$fromInt(position.gb) + ';'),
							'-ms-grid-column-span: ' + ($elm$core$String$fromInt(position.mt) + ';')
						]));
				var modernPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'grid-row: ' + ($elm$core$String$fromInt(position.hi) + (' / ' + ($elm$core$String$fromInt(position.hi + position.jx) + ';'))),
							'grid-column: ' + ($elm$core$String$fromInt(position.gb) + (' / ' + ($elm$core$String$fromInt(position.gb + position.mt) + ';')))
						]));
				var _class = '.grid-pos-' + ($elm$core$String$fromInt(position.hi) + ('-' + ($elm$core$String$fromInt(position.gb) + ('-' + ($elm$core$String$fromInt(position.mt) + ('-' + $elm$core$String$fromInt(position.jx)))))));
				var modernGrid = _class + ('{' + (modernPosition + '}'));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msPosition + '}'));
				return _List_fromArray(
					[base, supports]);
			case 11:
				var _class = rule.a;
				var styles = rule.b;
				var renderPseudoRule = function (style) {
					return A3(
						$mdgriffith$elm_ui$Internal$Model$renderStyleRule,
						options,
						style,
						$elm$core$Maybe$Just(_class));
				};
				return A2($elm$core$List$concatMap, renderPseudoRule, styles);
			default:
				var transform = rule.a;
				var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
				var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				var _v12 = _Utils_Tuple2(_class, val);
				if ((!_v12.a.$) && (!_v12.b.$)) {
					var cls = _v12.a.a;
					var v = _v12.b.a;
					return A4(
						$mdgriffith$elm_ui$Internal$Model$renderStyle,
						options,
						maybePseudo,
						'.' + cls,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
							]));
				} else {
					return _List_Nil;
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(
	function (options, stylesheet) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$map,
				function (style) {
					var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
					return _Utils_Tuple2(
						$mdgriffith$elm_ui$Internal$Model$getStyleName(style),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
				},
				stylesheet));
	});
var $mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_v0) {
			var name = _v0.a;
			var val = _v0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$map, renderPair, rules)) + '}'));
	});
var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _v0) {
		var parentAdj = _v0.a;
		var textAdjustment = _v0.b;
		return _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.dV + (', .' + (name + (' .' + (modifier + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.dV)))))))))), textAdjustment)
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _v0, otherFontName) {
		var full = _v0.a;
		var capital = _v0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_Utils_ap(
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.lF, capital),
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.jk, full)));
	});
var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.lF + (', ' + ('.' + (name + (' .' + $mdgriffith$elm_ui$Internal$Style$classes.lF))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.lF + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.dV + (', .' + (name + (' .' + ($mdgriffith$elm_ui$Internal$Style$classes.lF + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.dV)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {jx: height / size, fJ: size, hI: vertical};
	});
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.il, adjustment.h8, adjustment.iZ, adjustment.ka]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.iZ,
		$elm$core$List$minimum(lines));
	var newBaseline = A2(
		$elm$core$Maybe$withDefault,
		adjustment.h8,
		$elm$core$List$minimum(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.il,
		$elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		il: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		go: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				$elm$core$String$fromFloat(converted.jx)),
				_Utils_Tuple2(
				'vertical-align',
				$elm$core$String$fromFloat(converted.hI) + 'em'),
				_Utils_Tuple2(
				'font-size',
				$elm$core$String$fromFloat(converted.fJ) + 'em')
			]));
};
var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 1) {
					if (face.$ === 5) {
						var _with = face.a;
						var _v2 = _with.hS;
						if (_v2.$ === 1) {
							return found;
						} else {
							var adjustment = _v2.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.go;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.il;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		$elm$core$Maybe$Nothing,
		typefaces);
};
var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 4) {
			var url = font.b;
			return $elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_v2) {
		var name = _v2.a;
		var typefaces = _v2.b;
		var imports = A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
	var fontAdjustments = function (_v1) {
		var name = _v1.a;
		var typefaces = _v1.b;
		var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_v0.$ === 1) {
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontImports, rules)),
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontAdjustments, rules)));
};
var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 1) {
		var name = rule.a;
		var typefaces = rule.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var combine = F2(
			function (style, rendered) {
				return {
					eM: _Utils_ap(
						rendered.eM,
						A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
					dX: function () {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_v1.$ === 1) {
							return rendered.dX;
						} else {
							var topLevel = _v1.a;
							return A2($elm$core$List$cons, topLevel, rendered.dX);
						}
					}()
				};
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			combine,
			{eM: _List_Nil, dX: _List_Nil},
			stylesheet);
		var topLevel = _v0.dX;
		var rules = _v0.eM;
		return _Utils_ap(
			$mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			$elm$core$String$concat(rules));
	});
var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		var _v0 = options.h;
		switch (_v0) {
			case 0:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			case 1:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			default:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'elm-ui-rules',
					_List_fromArray(
						[
							A2(
							$elm$virtual_dom$VirtualDom$property,
							'rules',
							A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
						]),
					_List_Nil);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.gl)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'static-stylesheet',
				$mdgriffith$elm_ui$Internal$Model$staticRoot(opts)),
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
				children)) : A2(
			$elm$core$List$cons,
			_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
			children);
	});
var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.gl)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Internal$Model$staticRoot(opts),
			A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
	});
var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$p = _VirtualDom_node('p');
var $mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _v0) {
		var fieldOne = _v0.a;
		var fieldTwo = _v0.b;
		if (!myFlag.$) {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var $elm$html$Html$s = _VirtualDom_node('s');
var $elm$html$Html$u = _VirtualDom_node('u');
var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 1) {
					var keyed = children.a;
					return A3(
						$elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 0:
									return keyed;
								case 2:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return $elm$html$Html$div;
								case 'p':
									return $elm$html$Html$p;
								default:
									return $elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 0:
									return unkeyed;
								case 2:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 0:
					return A2(createNode, 'div', attributes);
				case 1:
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						$elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.h3 + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.lD))
									]))
							]));
			}
		}();
		switch (parentContext) {
			case 0:
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.h3, $mdgriffith$elm_ui$Internal$Style$classes.lD, $mdgriffith$elm_ui$Internal$Style$classes.d8, $mdgriffith$elm_ui$Internal$Style$classes.bU, $mdgriffith$elm_ui$Internal$Style$classes.h_])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.h3, $mdgriffith$elm_ui$Internal$Style$classes.lD, $mdgriffith$elm_ui$Internal$Style$classes.d8, $mdgriffith$elm_ui$Internal$Style$classes.bU, $mdgriffith$elm_ui$Internal$Style$classes.hY])))
						]),
					_List_fromArray(
						[html])) : html));
			case 1:
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.h3, $mdgriffith$elm_ui$Internal$Style$classes.lD, $mdgriffith$elm_ui$Internal$Style$classes.d8, $mdgriffith$elm_ui$Internal$Style$classes.hZ])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.h3, $mdgriffith$elm_ui$Internal$Style$classes.lD, $mdgriffith$elm_ui$Internal$Style$classes.d8, $mdgriffith$elm_ui$Internal$Style$classes.hX])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.h3 + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.dV + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.fT + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.fi)))));
var $mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.h3 + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.dV + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.fU + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.fj)))));
var $mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_v8, _v9) {
				var key = _v8.a;
				var child = _v8.b;
				var htmls = _v9.a;
				var existingStyles = _v9.b;
				switch (child.$) {
					case 0:
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 1:
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.gA, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.hu : _Utils_ap(styled.hu, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.gA, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.hu : _Utils_ap(styled.hu, existingStyles));
					case 2:
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _v6) {
				var htmls = _v6.a;
				var existingStyles = _v6.b;
				switch (child.$) {
					case 0:
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 1:
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.gA, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.hu : _Utils_ap(styled.hu, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.gA, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.hu : _Utils_ap(styled.hu, existingStyles));
					case 2:
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 1) {
			var keyedChildren = children.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _v1.a;
			var styles = _v1.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.hu : _Utils_ap(rendered.hu, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.cD,
						rendered.gW,
						rendered.cs,
						$mdgriffith$elm_ui$Internal$Model$Keyed(
							A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.iu)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						gA: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.cD,
							rendered.gW,
							rendered.cs,
							$mdgriffith$elm_ui$Internal$Model$Keyed(
								A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.iu))),
						hu: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _v3 = A3(
				$elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _v3.a;
			var styles = _v3.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.hu : _Utils_ap(rendered.hu, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.cD,
						rendered.gW,
						rendered.cs,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.iu)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						gA: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.cD,
							rendered.gW,
							rendered.cs,
							$mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.iu))),
						hu: allStyles
					});
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 3, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 10, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _v0) {
		var one = _v0.a;
		var two = _v0.b;
		if (!myFlag.$) {
			var first = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					function () {
						switch (location) {
							case 0:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.db, $mdgriffith$elm_ui$Internal$Style$classes.lD, $mdgriffith$elm_ui$Internal$Style$classes.hN]));
							case 1:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.db, $mdgriffith$elm_ui$Internal$Style$classes.lD, $mdgriffith$elm_ui$Internal$Style$classes.ia]));
							case 2:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.db, $mdgriffith$elm_ui$Internal$Style$classes.lD, $mdgriffith$elm_ui$Internal$Style$classes.kG]));
							case 3:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.db, $mdgriffith$elm_ui$Internal$Style$classes.lD, $mdgriffith$elm_ui$Internal$Style$classes.kF]));
							case 4:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.db, $mdgriffith$elm_ui$Internal$Style$classes.lD, $mdgriffith$elm_ui$Internal$Style$classes.jN]));
							default:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.db, $mdgriffith$elm_ui$Internal$Style$classes.lD, $mdgriffith$elm_ui$Internal$Style$classes.h9]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 3:
							return $elm$virtual_dom$VirtualDom$text('');
						case 2:
							var str = elem.a;
							return $mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 0:
							var html = elem.a;
							return html($mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.gA, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 0:
				if (location === 5) {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 1:
				var existingBehind = existing.a;
				if (location === 5) {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2($elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 2:
				var existingInFront = existing.a;
				if (location === 5) {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2($elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location === 5) {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2($elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2($elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 0:
				return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 1:
				var name = old.a;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align) {
		case 0:
			return $mdgriffith$elm_ui$Internal$Style$classes.eU + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.f$);
		case 2:
			return $mdgriffith$elm_ui$Internal$Style$classes.eU + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.f0);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.eU + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.hV);
	}
};
var $mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align) {
		case 0:
			return $mdgriffith$elm_ui$Internal$Style$classes.eV + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.h$);
		case 2:
			return $mdgriffith$elm_ui$Internal$Style$classes.eV + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.hU);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.eV + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.hW);
	}
};
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 2, a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 0:
				switch (component.$) {
					case 0:
						var x = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 1:
						var y = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 2:
						var z = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 3:
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 4:
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 1:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 0:
						var newX = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 1:
						var newY = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 2:
						var newZ = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 3:
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 4:
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 0:
						var newX = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 1:
						var newY = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 2:
						var newZ = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 3:
						var newMove = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 4:
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
var $mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_v0, _v1) {
		var one = _v0.a;
		var two = _v0.b;
		var three = _v1.a;
		var four = _v1.b;
		return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 0:
			var px = h.a;
			var val = $elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.gv + (' ' + name),
				_List_fromArray(
					[
						A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 1:
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.fi,
				_List_Nil);
		case 2:
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.fj,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.gw + (' height-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.h3 + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.e0 + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 3:
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
var $mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 0:
			var px = w.a;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.hK + (' width-px-' + $elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + $elm$core$String$fromInt(px),
						'width',
						$elm$core$String$fromInt(px) + 'px')
					]));
		case 1:
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.fT,
				_List_Nil);
		case 2:
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.fU,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.hL + (' width-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.h3 + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.hi + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 3:
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 3) {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 2:
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 7:
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_v1.$ === 1) {
					return {
						cs: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes),
							attrs),
						iu: children,
						cD: has,
						gW: node,
						hu: styles
					};
				} else {
					var _class = _v1.a;
					return {
						cs: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						iu: children,
						cD: has,
						gW: node,
						hu: A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 0:
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 3:
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 1:
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 4:
						var flag = attribute.a;
						var style = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2($elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 10:
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 7:
						var width = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 0:
									var px = width.a;
									var $temp$classes = ($mdgriffith$elm_ui$Internal$Style$classes.hK + (' width-px-' + $elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3(
											$mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + $elm$core$String$fromInt(px),
											'width',
											$elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 1:
									var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.fT),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 2:
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.fU),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.hL + (' width-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.h3 + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.hi + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _v4.a;
									var newClass = _v4.b;
									var newStyles = _v4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 8:
						var height = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 0:
									var px = height.a;
									var val = $elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.gv + (' ' + (name + (' ' + classes))),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 1:
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.fi + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 2:
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.fj + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.gw + (' height-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.h3 + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.e0 + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _v6.a;
									var newClass = _v6.b;
									var newStyles = _v6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 2:
						var description = attribute.a;
						switch (description.$) {
							case 0:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 1:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 2:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 3:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 4:
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											$mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + $elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 9:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 8:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 5:
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 6:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 9:
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 3:
									return styles;
								case 2:
									var str = elem.a;
									return styles;
								case 0:
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.hu);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 6:
						var x = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x) {
									case 1:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 2:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y) {
									case 1:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 2:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
var $mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			$mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				$mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				$mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				$mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				$elm$core$List$reverse(attributes)));
	});
var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 0};
var $mdgriffith$elm_ui$Element$Input$hasFocusStyle = function (attr) {
	if (((attr.$ === 4) && (attr.b.$ === 11)) && (!attr.b.a)) {
		var _v1 = attr.b;
		var _v2 = _v1.a;
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		$elm$html$Html$Attributes$class(cls));
};
var $mdgriffith$elm_ui$Element$Input$focusDefault = function (attrs) {
	return A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, attrs) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
};
var $mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 8, a: a};
};
var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 0, a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
var $mdgriffith$elm_ui$Element$Input$enter = 'Enter';
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 2, a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $mdgriffith$elm_ui$Element$Input$onKey = F2(
	function (desiredCode, msg) {
		var decode = function (code) {
			return _Utils_eq(code, desiredCode) ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail('Not the enter key');
		};
		var isKey = A2(
			$elm$json$Json$Decode$andThen,
			decode,
			A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
		return $mdgriffith$elm_ui$Internal$Model$Attr(
			A2(
				$elm$html$Html$Events$preventDefaultOn,
				'keyup',
				A2(
					$elm$json$Json$Decode$map,
					function (fired) {
						return _Utils_Tuple2(fired, true);
					},
					isKey)));
	});
var $mdgriffith$elm_ui$Element$Input$onEnter = function (msg) {
	return A2($mdgriffith$elm_ui$Element$Input$onKey, $mdgriffith$elm_ui$Element$Input$enter, msg);
};
var $mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$cursor = $mdgriffith$elm_ui$Internal$Flag$flag(21);
var $mdgriffith$elm_ui$Element$pointer = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.iQ);
var $mdgriffith$elm_ui$Internal$Model$Content = {$: 1};
var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $mdgriffith$elm_ui$Element$Input$button = F2(
	function (attrs, _v0) {
		var onPress = _v0.aI;
		var label = _v0.O;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.ea + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.bU + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.li + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.gV)))))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$pointer,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$Input$focusDefault(attrs),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Button),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											$elm$html$Html$Attributes$tabindex(0)),
										function () {
											if (onPress.$ === 1) {
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$Attr(
														$elm$html$Html$Attributes$disabled(true)),
													attrs);
											} else {
												var msg = onPress.a;
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Element$Events$onClick(msg),
													A2(
														$elm$core$List$cons,
														$mdgriffith$elm_ui$Element$Input$onEnter(msg),
														attrs));
											}
										}()))))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Internal$Flag$fontAlignment = $mdgriffith$elm_ui$Internal$Flag$flag(12);
var $mdgriffith$elm_ui$Element$Font$center = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.l0);
var $mdgriffith$elm_ui$Internal$Model$AlignY = function (a) {
	return {$: 5, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$CenterY = 1;
var $mdgriffith$elm_ui$Element$centerY = $mdgriffith$elm_ui$Internal$Model$AlignY(1);
var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
var $mdgriffith$elm_ui$Element$Font$color = function (fontColor) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor),
			'color',
			fontColor));
};
var $mdgriffith$elm_ui$Internal$Model$Focus = 0;
var $mdgriffith$elm_ui$Internal$Model$PseudoSelector = F2(
	function (a, b) {
		return {$: 11, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$focus = $mdgriffith$elm_ui$Internal$Flag$flag(31);
var $mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 6, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 9, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 10, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Empty = {$: 3};
var $mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 2, a: a};
};
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $mdgriffith$elm_ui$Internal$Model$map = F2(
	function (fn, el) {
		switch (el.$) {
			case 1:
				var styled = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						gA: F2(
							function (add, context) {
								return A2(
									$elm$virtual_dom$VirtualDom$map,
									fn,
									A2(styled.gA, add, context));
							}),
						hu: styled.hu
					});
			case 0:
				var html = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A2(
						$elm$core$Basics$composeL,
						$elm$virtual_dom$VirtualDom$map(fn),
						html));
			case 2:
				var str = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Text(str);
			default:
				return $mdgriffith$elm_ui$Internal$Model$Empty;
		}
	});
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 0:
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 2:
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 6:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 5:
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 7:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 8:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 3:
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 4:
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 9:
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 1:
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$removeNever = function (style) {
	return A2($mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle, $elm$core$Basics$never, style);
};
var $mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper = F2(
	function (attr, _v0) {
		var styles = _v0.a;
		var trans = _v0.b;
		var _v1 = $mdgriffith$elm_ui$Internal$Model$removeNever(attr);
		switch (_v1.$) {
			case 4:
				var style = _v1.b;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, style, styles),
					trans);
			case 10:
				var flag = _v1.a;
				var component = _v1.b;
				return _Utils_Tuple2(
					styles,
					A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, trans, component));
			default:
				return _Utils_Tuple2(styles, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$unwrapDecorations = function (attrs) {
	var _v0 = A3(
		$elm$core$List$foldl,
		$mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper,
		_Utils_Tuple2(_List_Nil, $mdgriffith$elm_ui$Internal$Model$Untransformed),
		attrs);
	var styles = _v0.a;
	var transform = _v0.b;
	return A2(
		$elm$core$List$cons,
		$mdgriffith$elm_ui$Internal$Model$Transform(transform),
		styles);
};
var $mdgriffith$elm_ui$Element$focused = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$focus,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			0,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $mdgriffith$elm_ui$Internal$Model$boxShadowClass = function (shadow) {
	return $elm$core$String$concat(
		_List_fromArray(
			[
				shadow.gD ? 'box-inset' : 'box-',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.kD.a) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.kD.b) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.ic) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.fJ) + 'px',
				$mdgriffith$elm_ui$Internal$Model$formatColorClass(shadow.iA)
			]));
};
var $mdgriffith$elm_ui$Internal$Flag$shadows = $mdgriffith$elm_ui$Internal$Flag$flag(19);
var $mdgriffith$elm_ui$Element$Border$shadow = function (almostShade) {
	var shade = {ic: almostShade.ic, iA: almostShade.iA, gD: false, kD: almostShade.kD, fJ: almostShade.fJ};
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$shadows,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			$mdgriffith$elm_ui$Internal$Model$boxShadowClass(shade),
			'box-shadow',
			$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(shade)));
};
var $mdgriffith$elm_ui$Element$Border$glow = F2(
	function (clr, size) {
		return $mdgriffith$elm_ui$Element$Border$shadow(
			{
				ic: size * 2,
				iA: clr,
				kD: _Utils_Tuple2(0, 0),
				fJ: size
			});
	});
var $mdgriffith$elm_ui$Element$htmlAttribute = $mdgriffith$elm_ui$Internal$Model$Attr;
var $mdgriffith$elm_ui$Internal$Model$Hover = 1;
var $mdgriffith$elm_ui$Internal$Flag$hover = $mdgriffith$elm_ui$Internal$Flag$flag(33);
var $mdgriffith$elm_ui$Element$mouseOver = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$hover,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			1,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $mdgriffith$elm_ui$Element$padding = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(x),
			x,
			x,
			x,
			x));
};
var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
var $mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + $elm$core$String$fromInt(radius),
			'border-radius',
			$elm$core$String$fromInt(radius) + 'px'));
};
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $author$project$Internals$CommonStyleHelpers$buttonStyle = function (isActive) {
	return _Utils_ap(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Border$rounded(5),
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$padding(5),
				$mdgriffith$elm_ui$Element$focused(
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Border$glow,
						A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
						0)
					]))
			]),
		isActive ? _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9)),
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.85, 0.85, 0.85))
					])),
				$mdgriffith$elm_ui$Element$Border$width(1),
				$mdgriffith$elm_ui$Element$Border$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
			]) : _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95)),
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0.7, 0.7)),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'cursor', 'default')),
				$mdgriffith$elm_ui$Element$Border$width(1),
				$mdgriffith$elm_ui$Element$Border$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95))
			]));
};
var $mdgriffith$elm_ui$Internal$Model$CenterX = 1;
var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX(1);
var $mdgriffith$elm_ui$Internal$Model$AsColumn = 1;
var $mdgriffith$elm_ui$Internal$Model$asColumn = 1;
var $mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.iJ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.dt)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var $mdgriffith$elm_ui$Internal$Model$FocusStyleOption = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Element$focusStyle = $mdgriffith$elm_ui$Internal$Model$FocusStyleOption;
var $mdgriffith$elm_ui$Element$rgb255 = F3(
	function (red, green, blue) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, 1);
	});
var $author$project$Internals$CommonStyleHelpers$grey6 = A3($mdgriffith$elm_ui$Element$rgb255, 225, 231, 236);
var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$AllowHover = 1;
var $mdgriffith$elm_ui$Internal$Model$Layout = 0;
var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	h6: $elm$core$Maybe$Nothing,
	ie: $elm$core$Maybe$Nothing,
	lC: $elm$core$Maybe$Just(
		{
			ic: 0,
			iA: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			kD: _Utils_Tuple2(0, 0),
			fJ: 3
		})
};
var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 0:
					var hoverable = opt.a;
					var _v4 = record.jA;
					if (_v4.$ === 1) {
						return _Utils_update(
							record,
							{
								jA: $elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 1:
					var focusStyle = opt.a;
					var _v5 = record.gl;
					if (_v5.$ === 1) {
						return _Utils_update(
							record,
							{
								gl: $elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _v6 = record.h;
					if (_v6.$ === 1) {
						return _Utils_update(
							record,
							{
								h: $elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			gl: function () {
				var _v0 = record.gl;
				if (_v0.$ === 1) {
					return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _v0.a;
					return focusable;
				}
			}(),
			jA: function () {
				var _v1 = record.jA;
				if (_v1.$ === 1) {
					return 1;
				} else {
					var hoverable = _v1.a;
					return hoverable;
				}
			}(),
			h: function () {
				var _v2 = record.h;
				if (_v2.$ === 1) {
					return 0;
				} else {
					var actualMode = _v2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			$elm$core$List$foldr,
			combine,
			{gl: $elm$core$Maybe$Nothing, jA: $elm$core$Maybe$Nothing, h: $elm$core$Maybe$Nothing},
			options));
};
var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 0:
				var html = el.a;
				return html($mdgriffith$elm_ui$Internal$Model$asEl);
			case 1:
				var styles = el.a.hu;
				var html = el.a.gA;
				return A2(
					html,
					mode(styles),
					$mdgriffith$elm_ui$Internal$Model$asEl);
			case 2:
				var text = el.a;
				return $mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return $mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _v0 = options.h;
			if (_v0 === 1) {
				return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 1};
var $mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 3, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 0:
						return 'serif';
					case 1:
						return 'sans-serif';
					case 2:
						return 'monospace';
					case 3:
						var name = font.a;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					case 4:
						var name = font.a;
						var url = font.b;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					default:
						var name = font.a.I;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
				}
			}());
	});
var $mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			$mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			$mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontSize,
			$mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				$mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var $mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_v0, attrs, child) {
		var options = _v0.g2;
		return A3(
			$mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[$mdgriffith$elm_ui$Internal$Style$classes.Z, $mdgriffith$elm_ui$Internal$Style$classes.h3, $mdgriffith$elm_ui$Internal$Style$classes.lD]))),
				_Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var $author$project$FileExplorer$FileExplorer$loadingStatus = function (model) {
	return model.b4;
};
var $author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$loadingStatus = function (model) {
	return model.b4;
};
var $author$project$NewsEditor$NewsEditor$loadingStatus = function (model) {
	return model.b4;
};
var $author$project$PageTreeEditor$PageTreeEditor$loadingStatus = function (model) {
	var _v0 = _Utils_Tuple3(model.dc, model.cw, model.c7);
	_v0$2:
	while (true) {
		_v0$3:
		while (true) {
			_v0$4:
			while (true) {
				switch (_v0.a) {
					case 2:
						switch (_v0.b) {
							case 2:
								switch (_v0.c) {
									case 2:
										var _v1 = _v0.a;
										var _v2 = _v0.b;
										var _v3 = _v0.c;
										return $author$project$Internals$ToolHelpers$ToolLoadingSuccess;
									case 3:
										break _v0$3;
									default:
										break _v0$4;
								}
							case 3:
								break _v0$2;
							default:
								if (_v0.c === 3) {
									break _v0$3;
								} else {
									break _v0$4;
								}
						}
					case 3:
						var _v4 = _v0.a;
						return $author$project$Internals$ToolHelpers$ToolLoadingFailure('Erreur chargement arborescence');
					default:
						if (_v0.b === 3) {
							break _v0$2;
						} else {
							if (_v0.c === 3) {
								break _v0$3;
							} else {
								break _v0$4;
							}
						}
				}
			}
			return $author$project$Internals$ToolHelpers$ToolLoadingWaiting;
		}
		var _v6 = _v0.c;
		return $author$project$Internals$ToolHelpers$ToolLoadingFailure('Erreur chargement mots clés');
	}
	var _v5 = _v0.b;
	return $author$project$Internals$ToolHelpers$ToolLoadingFailure('Erreur chargement pages');
};
var $mdgriffith$elm_ui$Internal$Model$AsRow = 0;
var $mdgriffith$elm_ui$Internal$Model$asRow = 0;
var $mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.dt + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.bU)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 5, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y)));
	});
var $mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var $mdgriffith$elm_ui$Element$text = function (content) {
	return $mdgriffith$elm_ui$Internal$Model$Text(content);
};
var $author$project$Internals$ToolHelpers$toolLoadingView = F2(
	function (s, model) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(s),
					function () {
					var _v0 = model.b4;
					switch (_v0.$) {
						case 0:
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 1, 195 / 255, 0))
									]),
								$mdgriffith$elm_ui$Element$text('En cours...'));
						case 1:
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 60 / 255, 179 / 255, 113 / 255))
									]),
								$mdgriffith$elm_ui$Element$text('Terminé!'));
						default:
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color(
										A3($mdgriffith$elm_ui$Element$rgb, 1, 0, 0))
									]),
								$mdgriffith$elm_ui$Element$text('Echec'));
					}
				}()
				]));
	});
var $author$project$FileExplorer$FileExplorer$loadingView = function (model) {
	return A2($author$project$Internals$ToolHelpers$toolLoadingView, 'Chargement Explorateur de fichiers: ', model);
};
var $author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$loadingView = function (model) {
	return A2(
		$author$project$Internals$ToolHelpers$toolLoadingView,
		'Chargement du répertoire général: ',
		{
			b4: $author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$loadingStatus(model)
		});
};
var $author$project$NewsEditor$NewsEditor$loadingView = function (model) {
	return A2(
		$author$project$Internals$ToolHelpers$toolLoadingView,
		'Chargement des actualités: ',
		{
			b4: $author$project$NewsEditor$NewsEditor$loadingStatus(model)
		});
};
var $author$project$PageTreeEditor$PageTreeEditor$loadingView = function (model) {
	return A2(
		$author$project$Internals$ToolHelpers$toolLoadingView,
		'Chargement de la stucture du site: ',
		{
			b4: $author$project$PageTreeEditor$PageTreeEditor$loadingStatus(model)
		});
};
var $author$project$Publications$Publications$loadingStatus = function (model) {
	return model.b4;
};
var $author$project$Publications$Publications$loadingView = function (model) {
	return A2(
		$author$project$Internals$ToolHelpers$toolLoadingView,
		'Chargement des publications: ',
		{
			b4: $author$project$Publications$Publications$loadingStatus(model)
		});
};
var $mdgriffith$elm_ui$Internal$Model$Max = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$maximum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Max, i, l);
	});
var $author$project$MurolAdmin$ToogleLog = function (a) {
	return {$: 18, a: a};
};
var $author$project$MurolAdmin$ToogleLogs = {$: 17};
var $mdgriffith$elm_ui$Internal$Model$Above = 0;
var $mdgriffith$elm_ui$Element$createNearby = F2(
	function (loc, element) {
		if (element.$ === 3) {
			return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
		} else {
			return A2($mdgriffith$elm_ui$Internal$Model$Nearby, loc, element);
		}
	});
var $mdgriffith$elm_ui$Element$above = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, 0, element);
};
var $mdgriffith$elm_ui$Internal$Model$Bottom = 2;
var $mdgriffith$elm_ui$Element$alignBottom = $mdgriffith$elm_ui$Internal$Model$AlignY(2);
var $mdgriffith$elm_ui$Internal$Model$Right = 2;
var $mdgriffith$elm_ui$Element$alignRight = $mdgriffith$elm_ui$Internal$Model$AlignX(2);
var $elm$svg$Svg$Attributes$class = _VirtualDom_attribute('class');
var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var $elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');
var $elm$svg$Svg$Attributes$strokeLinecap = _VirtualDom_attribute('stroke-linecap');
var $elm$svg$Svg$Attributes$strokeLinejoin = _VirtualDom_attribute('stroke-linejoin');
var $elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');
var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode('svg');
var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var $author$project$Internals$Icons$customSvgFeatherIcon = F2(
	function (size, className) {
		return $elm$svg$Svg$svg(
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$class('feather feather-' + className),
					$elm$svg$Svg$Attributes$fill('none'),
					$elm$svg$Svg$Attributes$height(
					$elm$core$String$fromInt(size)),
					$elm$svg$Svg$Attributes$stroke('currentColor'),
					$elm$svg$Svg$Attributes$strokeLinecap('round'),
					$elm$svg$Svg$Attributes$strokeLinejoin('round'),
					$elm$svg$Svg$Attributes$strokeWidth('2'),
					$elm$svg$Svg$Attributes$viewBox('0 0 24 24'),
					$elm$svg$Svg$Attributes$width(
					$elm$core$String$fromInt(size))
				]));
	});
var $elm$svg$Svg$Attributes$points = _VirtualDom_attribute('points');
var $elm$svg$Svg$polyline = $elm$svg$Svg$trustedNode('polyline');
var $author$project$Internals$Icons$chevronsDown = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'chevrons-down',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('7 13 12 18 17 13')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('7 6 12 11 17 6')
					]),
				_List_Nil)
			]));
};
var $author$project$Internals$Icons$chevronsUp = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'chevrons-up',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('17 11 12 6 7 11')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('17 18 12 13 7 18')
					]),
				_List_Nil)
			]));
};
var $author$project$Internals$CommonStyleHelpers$green4 = A3($mdgriffith$elm_ui$Element$rgb255, 56, 193, 114);
var $mdgriffith$elm_ui$Internal$Model$unstyled = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Unstyled, $elm$core$Basics$always);
var $mdgriffith$elm_ui$Element$html = $mdgriffith$elm_ui$Internal$Model$unstyled;
var $mdgriffith$elm_ui$Internal$Model$paddingName = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left)))))));
	});
var $mdgriffith$elm_ui$Element$paddingEach = function (_v0) {
	var top = _v0.bq;
	var right = _v0.bl;
	var bottom = _v0.a2;
	var left = _v0.bc;
	return (_Utils_eq(top, right) && (_Utils_eq(top, bottom) && _Utils_eq(top, left))) ? A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(top),
			top,
			top,
			top,
			top)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			A4($mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left),
			top,
			right,
			bottom,
			left));
};
var $mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Element$px = $mdgriffith$elm_ui$Internal$Model$Px;
var $author$project$Internals$CommonStyleHelpers$red6 = A3($mdgriffith$elm_ui$Element$rgb255, 245, 170, 170);
var $elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var $elm$svg$Svg$path = $elm$svg$Svg$trustedNode('path');
var $author$project$Internals$Icons$save = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'save',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('17 21 17 13 7 13 7 21')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('7 3 7 8 15 8')
					]),
				_List_Nil)
			]));
};
var $author$project$Internals$CommonHelpers$combineStatus = function (xs) {
	return A2($elm$core$List$member, 3, xs) ? 3 : (A2($elm$core$List$member, 1, xs) ? 1 : 2);
};
var $author$project$Auth$AuthPlugin$status = function (model) {
	var _v0 = model.A;
	switch (_v0.$) {
		case 0:
			var s = _v0.a;
			return s;
		case 1:
			var s = _v0.a;
			return s;
		default:
			var s = _v0.a;
			return s;
	}
};
var $author$project$FileExplorer$FileExplorer$status = function (model) {
	return $author$project$Internals$CommonHelpers$combineStatus(_List_Nil);
};
var $author$project$NewsEditor$NewsEditor$status = function (model) {
	return model.bM;
};
var $author$project$PageTreeEditor$PageTreeEditor$status = function (model) {
	return $author$project$Internals$CommonHelpers$combineStatus(
		_List_fromArray(
			[model.dc, model.cw, model.c7, model.cc]));
};
var $author$project$MurolAdmin$savingStatus = function (model) {
	return $author$project$Internals$CommonHelpers$combineStatus(
		_List_fromArray(
			[
				$author$project$Auth$AuthPlugin$status(model.p),
				$author$project$PageTreeEditor$PageTreeEditor$status(model.J),
				$author$project$FileExplorer$FileExplorer$status(model.fd),
				$author$project$NewsEditor$NewsEditor$status(model.aH)
			]));
};
var $author$project$Internals$CommonStyleHelpers$sides = {a2: 0, bc: 0, bl: 0, bq: 0};
var $elm$svg$Svg$line = $elm$svg$Svg$trustedNode('line');
var $elm$svg$Svg$Attributes$x1 = _VirtualDom_attribute('x1');
var $elm$svg$Svg$Attributes$x2 = _VirtualDom_attribute('x2');
var $elm$svg$Svg$Attributes$y1 = _VirtualDom_attribute('y1');
var $elm$svg$Svg$Attributes$y2 = _VirtualDom_attribute('y2');
var $author$project$Internals$Icons$wifi = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'wifi',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M5 12.55a11 11 0 0 1 14.08 0')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M1.42 9a16 16 0 0 1 21.16 0')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M8.53 16.11a6 6 0 0 1 6.95 0')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('12'),
						$elm$svg$Svg$Attributes$y1('20'),
						$elm$svg$Svg$Attributes$x2('12'),
						$elm$svg$Svg$Attributes$y2('20')
					]),
				_List_Nil)
			]));
};
var $author$project$Internals$Icons$wifiOff = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'wifi-off',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('1'),
						$elm$svg$Svg$Attributes$y1('1'),
						$elm$svg$Svg$Attributes$x2('23'),
						$elm$svg$Svg$Attributes$y2('23')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M16.72 11.06A10.94 10.94 0 0 1 19 12.55')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M5 12.55a10.94 10.94 0 0 1 5.17-2.39')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M10.71 5.05A16 16 0 0 1 22.58 9')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M1.42 9a15.91 15.91 0 0 1 4.7-2.88')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M8.53 16.11a6 6 0 0 1 6.95 0')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('12'),
						$elm$svg$Svg$Attributes$y1('20'),
						$elm$svg$Svg$Attributes$x2('12'),
						$elm$svg$Svg$Attributes$y2('20')
					]),
				_List_Nil)
			]));
};
var $author$project$Internals$CommonStyleHelpers$yellow4 = A3($mdgriffith$elm_ui$Element$rgb255, 244, 202, 100);
var $author$project$MurolAdmin$comsMonitorView = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$alignRight,
				$mdgriffith$elm_ui$Element$spacing(15),
				$mdgriffith$elm_ui$Element$paddingEach(
				_Utils_update(
					$author$project$Internals$CommonStyleHelpers$sides,
					{bl: 15})),
				$mdgriffith$elm_ui$Element$Border$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8)),
				$mdgriffith$elm_ui$Element$Border$widthEach(
				_Utils_update(
					$author$project$Internals$CommonStyleHelpers$sides,
					{bc: 2})),
				A2($mdgriffith$elm_ui$Element$paddingXY, 15, 0)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color(
						function () {
							var _v0 = $author$project$MurolAdmin$savingStatus(model);
							switch (_v0) {
								case 1:
									return $author$project$Internals$CommonStyleHelpers$yellow4;
								case 3:
									return $author$project$Internals$CommonStyleHelpers$red6;
								default:
									return $author$project$Internals$CommonStyleHelpers$grey6;
							}
						}()),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(20))
					]),
				$mdgriffith$elm_ui$Element$html(
					$author$project$Internals$Icons$save(18))),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color(
						$author$project$Auth$AuthPlugin$isLogged(model.p.be) ? $author$project$Internals$CommonStyleHelpers$green4 : $author$project$Internals$CommonStyleHelpers$red6),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(20))
					]),
				$mdgriffith$elm_ui$Element$html(
					$author$project$Auth$AuthPlugin$isLogged(model.p.be) ? $author$project$Internals$Icons$wifi(18) : $author$project$Internals$Icons$wifiOff(18)))
			]));
};
var $author$project$Internals$CommonHelpers$formatTime = A2(
	$elm$core$Basics$composeR,
	$elm$core$String$fromInt,
	A2($elm$core$String$padLeft, 2, '0'));
var $author$project$Internals$CommonStyleHelpers$noAttr = $mdgriffith$elm_ui$Element$htmlAttribute(
	$elm$html$Html$Attributes$class(''));
var $author$project$Internals$CommonHelpers$logTitleView = F2(
	function (l, zone) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(
							A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0.7, 0.7))
						]),
					$mdgriffith$elm_ui$Element$text(
						$author$project$Internals$CommonHelpers$formatTime(
							A2($elm$time$Time$toHour, zone, l.dm)) + (':' + $author$project$Internals$CommonHelpers$formatTime(
							A2($elm$time$Time$toMinute, zone, l.dm))))),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							l.dx ? $mdgriffith$elm_ui$Element$Font$color(
							A3($mdgriffith$elm_ui$Element$rgb, 1, 0, 0)) : $author$project$Internals$CommonStyleHelpers$noAttr
						]),
					$mdgriffith$elm_ui$Element$text(l.dG))
				]));
	});
var $mdgriffith$elm_ui$Internal$Flag$fontWeight = $mdgriffith$elm_ui$Internal$Flag$flag(13);
var $mdgriffith$elm_ui$Element$Font$bold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.id);
var $author$project$Internals$CommonStyleHelpers$grey7 = A3($mdgriffith$elm_ui$Element$rgb255, 248, 249, 250);
var $mdgriffith$elm_ui$Element$none = $mdgriffith$elm_ui$Internal$Model$Empty;
var $mdgriffith$elm_ui$Internal$Model$Paragraph = {$: 9};
var $mdgriffith$elm_ui$Element$paragraph = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asParagraph,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Paragraph),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$spacing(5),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontSize,
		$mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var $author$project$Internals$CommonHelpers$logsDictView = F3(
	function (logs, zone, toogleLog) {
		var logView = F2(
			function (i, _v1) {
				var k = _v1.a;
				var _v2 = _v1.b;
				var log = _v2.a;
				var message = log.dG;
				var mbDetails = log.es;
				var isError = log.dx;
				var timeStamp = log.dm;
				var isOpen = _v2.b;
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(5),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Events$onClick(
							toogleLog(k))
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									(!(!A2($elm$core$Basics$modBy, 2, i))) ? $mdgriffith$elm_ui$Element$Background$color(
									A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)) : $mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey7),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($mdgriffith$elm_ui$Element$paddingXY, 10, 7)
								]),
							A2($author$project$Internals$CommonHelpers$logTitleView, log, zone)),
							function () {
							if (mbDetails.$ === 1) {
								return $mdgriffith$elm_ui$Element$none;
							} else {
								var details = mbDetails.a;
								return isOpen ? A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$paddingEach(
											_Utils_update(
												$author$project$Internals$CommonStyleHelpers$sides,
												{bc: 20})),
											$mdgriffith$elm_ui$Element$Font$size(12)
										]),
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text(details)
										])) : $mdgriffith$elm_ui$Element$none;
							}
						}()
						]));
			});
		return A2($elm$core$List$indexedMap, logView, logs);
	});
var $mdgriffith$elm_ui$Internal$Model$MoveY = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveY = $mdgriffith$elm_ui$Internal$Flag$flag(26);
var $mdgriffith$elm_ui$Element$moveUp = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(-y));
};
var $mdgriffith$elm_ui$Internal$Flag$overflow = $mdgriffith$elm_ui$Internal$Flag$flag(20);
var $mdgriffith$elm_ui$Element$scrollbarY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.lh);
var $author$project$MurolAdmin$logsViewPanel = F4(
	function (logsOpen, logs, zone, toogleLog) {
		return logsOpen ? A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Border$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8)),
					$mdgriffith$elm_ui$Element$Border$widthEach(
					_Utils_update(
						$author$project$Internals$CommonStyleHelpers$sides,
						{bq: 2})),
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
					$mdgriffith$elm_ui$Element$moveUp(2)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Border$color(
							A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8)),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							_Utils_update(
								$author$project$Internals$CommonStyleHelpers$sides,
								{a2: 2})),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							A2($mdgriffith$elm_ui$Element$paddingXY, 10, 5)
						]),
					$mdgriffith$elm_ui$Element$text('Historique des notifications')),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(200)),
							$mdgriffith$elm_ui$Element$scrollbarY,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					A3($author$project$Internals$CommonHelpers$logsDictView, logs, zone, toogleLog))
				])) : $mdgriffith$elm_ui$Element$none;
	});
var $author$project$Internals$Icons$messageSquare = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'message-square',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z')
					]),
				_List_Nil)
			]));
};
var $author$project$MurolAdmin$notificationsPanelView = function (model) {
	var logs = $elm$core$List$reverse(
		A2(
			$elm$core$List$sortBy,
			A2(
				$elm$core$Basics$composeL,
				A2(
					$elm$core$Basics$composeL,
					A2(
						$elm$core$Basics$composeL,
						$elm$time$Time$posixToMillis,
						function ($) {
							return $.dm;
						}),
					$elm$core$Tuple$first),
				$elm$core$Tuple$second),
			$elm$core$Dict$toList(model.cI)));
	var newest = $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			function (_v3) {
				var _v4 = _v3.b;
				var l = _v4.a;
				return function ($) {
					return $.gG;
				}(l);
			},
			logs));
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(35)),
				$mdgriffith$elm_ui$Element$Border$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8)),
				$mdgriffith$elm_ui$Element$Border$widthEach(
				_Utils_update(
					$author$project$Internals$CommonStyleHelpers$sides,
					{bq: 2})),
				$mdgriffith$elm_ui$Element$above(
				A4($author$project$MurolAdmin$logsViewPanel, model.c9, logs, model.fY, $author$project$MurolAdmin$ToogleLog)),
				$mdgriffith$elm_ui$Element$spacing(15),
				$mdgriffith$elm_ui$Element$alignBottom
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Border$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8)),
						$mdgriffith$elm_ui$Element$Border$widthEach(
						_Utils_update(
							$author$project$Internals$CommonStyleHelpers$sides,
							{bl: 2})),
						A2($mdgriffith$elm_ui$Element$paddingXY, 10, 0)
					]),
				$mdgriffith$elm_ui$Element$html(
					$author$project$Internals$Icons$messageSquare(22))),
				function () {
				if (!newest.$) {
					var _v1 = newest.a;
					var _v2 = _v1.b;
					var l = _v2.a;
					return A2($author$project$Internals$CommonHelpers$logTitleView, l, model.fY);
				} else {
					return $mdgriffith$elm_ui$Element$none;
				}
			}(),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alignRight,
						$mdgriffith$elm_ui$Element$Events$onClick($author$project$MurolAdmin$ToogleLogs)
					]),
				model.c9 ? $mdgriffith$elm_ui$Element$html(
					$author$project$Internals$Icons$chevronsDown(22)) : $mdgriffith$elm_ui$Element$html(
					$author$project$Internals$Icons$chevronsUp(22))),
				$author$project$MurolAdmin$comsMonitorView(model)
			]));
};
var $author$project$MurolAdmin$SetCurrentTool = function (a) {
	return {$: 12, a: a};
};
var $mdgriffith$elm_ui$Element$moveDown = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(y));
};
var $mdgriffith$elm_ui$Element$Border$roundEach = function (_v0) {
	var topLeft = _v0.hA;
	var topRight = _v0.hB;
	var bottomLeft = _v0.f5;
	var bottomRight = _v0.f6;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + ($elm$core$String$fromInt(topLeft) + ('-' + ($elm$core$String$fromInt(topRight) + ($elm$core$String$fromInt(bottomLeft) + ('-' + $elm$core$String$fromInt(bottomRight)))))),
			'border-radius',
			$elm$core$String$fromInt(topLeft) + ('px ' + ($elm$core$String$fromInt(topRight) + ('px ' + ($elm$core$String$fromInt(bottomRight) + ('px ' + ($elm$core$String$fromInt(bottomLeft) + 'px'))))))));
};
var $author$project$MurolAdmin$tabView = F3(
	function (currentTool, tool, s) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Events$onClick(
						$author$project$MurolAdmin$SetCurrentTool(tool)),
						$mdgriffith$elm_ui$Element$Border$widthEach(
						{a2: 0, bc: 2, bl: 2, bq: 2}),
						$mdgriffith$elm_ui$Element$Border$roundEach(
						{f5: 0, f6: 0, hA: 8, hB: 8}),
						_Utils_eq(currentTool, tool) ? $mdgriffith$elm_ui$Element$Background$color(
						A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)) : $mdgriffith$elm_ui$Element$Background$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
					]),
				_Utils_eq(currentTool, tool) ? _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Border$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8))
					]) : _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Border$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9)),
						$mdgriffith$elm_ui$Element$pointer,
						$mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95))
							]))
					])),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					_List_Nil,
					_Utils_eq(currentTool, tool) ? _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Border$roundEach(
							{f5: 0, f6: 0, hA: 8, hB: 8}),
							$mdgriffith$elm_ui$Element$paddingEach(
							{a2: 7, bc: 12, bl: 12, bq: 3}),
							$mdgriffith$elm_ui$Element$Border$color(
							A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
							$mdgriffith$elm_ui$Element$moveDown(2),
							$mdgriffith$elm_ui$Element$Background$color(
							A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
						]) : _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$paddingEach(
							{a2: 5, bc: 12, bl: 12, bq: 5})
						])),
				$mdgriffith$elm_ui$Element$text(s)));
	});
var $author$project$Auth$AuthPlugin$ChangePluginMode = function (a) {
	return {$: 10, a: a};
};
var $author$project$Auth$AuthPlugin$Login = {$: 3};
var $author$project$Auth$AuthPlugin$SetPassword = function (a) {
	return {$: 1, a: a};
};
var $author$project$Auth$AuthPlugin$SetUsername = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Top = 0;
var $mdgriffith$elm_ui$Element$alignTop = $mdgriffith$elm_ui$Internal$Model$AlignY(0);
var $mdgriffith$elm_ui$Element$Input$TextInputNode = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Element$Input$TextArea = {$: 1};
var $mdgriffith$elm_ui$Internal$Model$LivePolite = {$: 6};
var $mdgriffith$elm_ui$Element$Region$announce = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$LivePolite);
var $mdgriffith$elm_ui$Element$Input$applyLabel = F3(
	function (attrs, label, input) {
		if (label.$ === 1) {
			var labelText = label.a;
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asColumn,
				$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
				attrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[input])));
		} else {
			var position = label.a;
			var labelAttrs = label.b;
			var labelChild = label.c;
			var labelElement = A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				labelAttrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[labelChild])));
			switch (position) {
				case 2:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						attrs,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
				case 3:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						attrs,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				case 0:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						attrs,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				default:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						attrs,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
			}
		}
	});
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $mdgriffith$elm_ui$Element$Input$autofill = A2(
	$elm$core$Basics$composeL,
	$mdgriffith$elm_ui$Internal$Model$Attr,
	$elm$html$Html$Attributes$attribute('autocomplete'));
var $mdgriffith$elm_ui$Internal$Model$Behind = 5;
var $mdgriffith$elm_ui$Element$behindContent = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, 5, element);
};
var $mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding = function (attrs) {
	var gatherSpacing = F2(
		function (attr, found) {
			if ((attr.$ === 4) && (attr.b.$ === 5)) {
				var _v2 = attr.b;
				var x = _v2.b;
				var y = _v2.c;
				if (found.$ === 1) {
					return $elm$core$Maybe$Just(y);
				} else {
					return found;
				}
			} else {
				return found;
			}
		});
	var _v0 = A3($elm$core$List$foldr, gatherSpacing, $elm$core$Maybe$Nothing, attrs);
	if (_v0.$ === 1) {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		var vSpace = _v0.a;
		return $mdgriffith$elm_ui$Element$moveUp(
			$elm$core$Basics$floor(vSpace / 2));
	}
};
var $mdgriffith$elm_ui$Element$clip = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.ix);
var $mdgriffith$elm_ui$Element$Input$darkGrey = A3($mdgriffith$elm_ui$Element$rgb, 186 / 255, 189 / 255, 182 / 255);
var $mdgriffith$elm_ui$Element$Input$defaultTextPadding = A2($mdgriffith$elm_ui$Element$paddingXY, 12, 12);
var $mdgriffith$elm_ui$Element$Input$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Input$defaultTextPadding,
		$mdgriffith$elm_ui$Element$Border$rounded(3),
		$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$darkGrey),
		$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
		$mdgriffith$elm_ui$Element$Border$width(1),
		$mdgriffith$elm_ui$Element$spacing(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
	]);
var $mdgriffith$elm_ui$Element$Input$getHeight = function (attr) {
	if (attr.$ === 8) {
		var h = attr.a;
		return $elm$core$Maybe$Just(h);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Label = function (a) {
	return {$: 5, a: a};
};
var $mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute = function (label) {
	if (label.$ === 1) {
		var textLabel = label.a;
		return $mdgriffith$elm_ui$Internal$Model$Describe(
			$mdgriffith$elm_ui$Internal$Model$Label(textLabel));
	} else {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	}
};
var $mdgriffith$elm_ui$Internal$Model$InFront = 4;
var $mdgriffith$elm_ui$Element$inFront = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, 4, element);
};
var $mdgriffith$elm_ui$Element$Input$isConstrained = function (len) {
	isConstrained:
	while (true) {
		switch (len.$) {
			case 1:
				return false;
			case 0:
				return true;
			case 2:
				return true;
			case 3:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isConstrained;
			default:
				var l = len.b;
				return true;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isHiddenLabel = function (label) {
	if (label.$ === 1) {
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$isStacked = function (label) {
	if (!label.$) {
		var loc = label.a;
		switch (loc) {
			case 0:
				return false;
			case 1:
				return false;
			case 2:
				return true;
			default:
				return true;
		}
	} else {
		return true;
	}
};
var $mdgriffith$elm_ui$Element$Input$negateBox = function (box) {
	return {a2: -box.a2, bc: -box.bc, bl: -box.bl, bq: -box.bq};
};
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 1, a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $mdgriffith$elm_ui$Element$Input$isFill = function (len) {
	isFill:
	while (true) {
		switch (len.$) {
			case 2:
				return true;
			case 1:
				return false;
			case 0:
				return false;
			case 3:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isPixel = function (len) {
	isPixel:
	while (true) {
		switch (len.$) {
			case 1:
				return false;
			case 0:
				return true;
			case 2:
				return false;
			case 3:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$redistributeOver = F4(
	function (isMultiline, stacked, attr, els) {
		switch (attr.$) {
			case 9:
				return _Utils_update(
					els,
					{
						eF: A2($elm$core$List$cons, attr, els.eF)
					});
			case 7:
				var width = attr.a;
				return $mdgriffith$elm_ui$Element$Input$isFill(width) ? _Utils_update(
					els,
					{
						t: A2($elm$core$List$cons, attr, els.t),
						W: A2($elm$core$List$cons, attr, els.W),
						eF: A2($elm$core$List$cons, attr, els.eF)
					}) : (stacked ? _Utils_update(
					els,
					{
						t: A2($elm$core$List$cons, attr, els.t)
					}) : _Utils_update(
					els,
					{
						eF: A2($elm$core$List$cons, attr, els.eF)
					}));
			case 8:
				var height = attr.a;
				return (!stacked) ? _Utils_update(
					els,
					{
						t: A2($elm$core$List$cons, attr, els.t),
						eF: A2($elm$core$List$cons, attr, els.eF)
					}) : ($mdgriffith$elm_ui$Element$Input$isFill(height) ? _Utils_update(
					els,
					{
						t: A2($elm$core$List$cons, attr, els.t),
						eF: A2($elm$core$List$cons, attr, els.eF)
					}) : ($mdgriffith$elm_ui$Element$Input$isPixel(height) ? _Utils_update(
					els,
					{
						eF: A2($elm$core$List$cons, attr, els.eF)
					}) : _Utils_update(
					els,
					{
						eF: A2($elm$core$List$cons, attr, els.eF)
					})));
			case 6:
				return _Utils_update(
					els,
					{
						t: A2($elm$core$List$cons, attr, els.t)
					});
			case 5:
				return _Utils_update(
					els,
					{
						t: A2($elm$core$List$cons, attr, els.t)
					});
			case 4:
				switch (attr.b.$) {
					case 5:
						var _v1 = attr.b;
						return _Utils_update(
							els,
							{
								t: A2($elm$core$List$cons, attr, els.t),
								W: A2($elm$core$List$cons, attr, els.W),
								eF: A2($elm$core$List$cons, attr, els.eF),
								$7: A2($elm$core$List$cons, attr, els.$7)
							});
					case 7:
						var cls = attr.a;
						var _v2 = attr.b;
						var pad = _v2.a;
						var t = _v2.b;
						var r = _v2.c;
						var b = _v2.d;
						var l = _v2.e;
						if (isMultiline) {
							return _Utils_update(
								els,
								{
									iM: A2($elm$core$List$cons, attr, els.iM),
									eF: A2($elm$core$List$cons, attr, els.eF)
								});
						} else {
							var reducedVerticalPadding = $mdgriffith$elm_ui$Element$paddingEach(
								{
									a2: b - A2($elm$core$Basics$min, t, b),
									bc: l,
									bl: r,
									bq: t - A2($elm$core$Basics$min, t, b)
								});
							var newLineHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'line-height',
									'calc(1.0em + ' + ($elm$core$String$fromInt(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'height',
									'calc(1.0em + ' + ($elm$core$String$fromInt(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							return _Utils_update(
								els,
								{
									iM: A2($elm$core$List$cons, attr, els.iM),
									W: A2(
										$elm$core$List$cons,
										newHeight,
										A2($elm$core$List$cons, newLineHeight, els.W)),
									eF: A2($elm$core$List$cons, reducedVerticalPadding, els.eF)
								});
						}
					case 6:
						var _v3 = attr.b;
						return _Utils_update(
							els,
							{
								iM: A2($elm$core$List$cons, attr, els.iM),
								eF: A2($elm$core$List$cons, attr, els.eF)
							});
					case 10:
						return _Utils_update(
							els,
							{
								iM: A2($elm$core$List$cons, attr, els.iM),
								eF: A2($elm$core$List$cons, attr, els.eF)
							});
					case 2:
						return _Utils_update(
							els,
							{
								t: A2($elm$core$List$cons, attr, els.t)
							});
					case 1:
						var _v4 = attr.b;
						return _Utils_update(
							els,
							{
								t: A2($elm$core$List$cons, attr, els.t)
							});
					default:
						var flag = attr.a;
						var cls = attr.b;
						return _Utils_update(
							els,
							{
								eF: A2($elm$core$List$cons, attr, els.eF)
							});
				}
			case 0:
				return els;
			case 1:
				var a = attr.a;
				return _Utils_update(
					els,
					{
						W: A2($elm$core$List$cons, attr, els.W)
					});
			case 2:
				return _Utils_update(
					els,
					{
						W: A2($elm$core$List$cons, attr, els.W)
					});
			case 3:
				return _Utils_update(
					els,
					{
						eF: A2($elm$core$List$cons, attr, els.eF)
					});
			default:
				return _Utils_update(
					els,
					{
						W: A2($elm$core$List$cons, attr, els.W)
					});
		}
	});
var $mdgriffith$elm_ui$Element$Input$redistribute = F3(
	function (isMultiline, stacked, attrs) {
		return function (redist) {
			return {
				iM: $elm$core$List$reverse(redist.iM),
				t: $elm$core$List$reverse(redist.t),
				W: $elm$core$List$reverse(redist.W),
				eF: $elm$core$List$reverse(redist.eF),
				$7: $elm$core$List$reverse(redist.$7)
			};
		}(
			A3(
				$elm$core$List$foldl,
				A2($mdgriffith$elm_ui$Element$Input$redistributeOver, isMultiline, stacked),
				{iM: _List_Nil, t: _List_Nil, W: _List_Nil, eF: _List_Nil, $7: _List_Nil},
				attrs));
	});
var $mdgriffith$elm_ui$Element$Input$renderBox = function (_v0) {
	var top = _v0.bq;
	var right = _v0.bl;
	var bottom = _v0.a2;
	var left = _v0.bc;
	return $elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px'))))));
};
var $mdgriffith$elm_ui$Internal$Model$Transparency = F2(
	function (a, b) {
		return {$: 12, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$transparency = $mdgriffith$elm_ui$Internal$Flag$flag(0);
var $mdgriffith$elm_ui$Element$alpha = function (o) {
	var transparency = function (x) {
		return 1 - x;
	}(
		A2(
			$elm$core$Basics$min,
			1.0,
			A2($elm$core$Basics$max, 0.0, o)));
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Transparency,
			'transparency-' + $mdgriffith$elm_ui$Internal$Model$floatClass(transparency),
			transparency));
};
var $mdgriffith$elm_ui$Element$Input$charcoal = A3($mdgriffith$elm_ui$Element$rgb, 136 / 255, 138 / 255, 133 / 255);
var $mdgriffith$elm_ui$Element$Input$renderPlaceholder = F3(
	function (_v0, forPlaceholder, on) {
		var placeholderAttrs = _v0.a;
		var placeholderEl = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				forPlaceholder,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$charcoal),
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.gV + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.kR)),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Border$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alpha(
							on ? 1 : 0)
						]),
					placeholderAttrs)),
			placeholderEl);
	});
var $elm$html$Html$span = _VirtualDom_node('span');
var $elm$html$Html$Attributes$spellcheck = $elm$html$Html$Attributes$boolProperty('spellcheck');
var $mdgriffith$elm_ui$Element$Input$spellcheck = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$spellcheck);
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $mdgriffith$elm_ui$Element$Input$value = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$value);
var $mdgriffith$elm_ui$Element$Input$textHelper = F3(
	function (textInput, attrs, textOptions) {
		var withDefaults = _Utils_ap($mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle, attrs);
		var redistributed = A3(
			$mdgriffith$elm_ui$Element$Input$redistribute,
			_Utils_eq(textInput.aj, $mdgriffith$elm_ui$Element$Input$TextArea),
			$mdgriffith$elm_ui$Element$Input$isStacked(textOptions.O),
			withDefaults);
		var onlySpacing = function (attr) {
			if ((attr.$ === 4) && (attr.b.$ === 5)) {
				var _v9 = attr.b;
				return true;
			} else {
				return false;
			}
		};
		var heightConstrained = function () {
			var _v7 = textInput.aj;
			if (!_v7.$) {
				var inputType = _v7.a;
				return false;
			} else {
				return A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						$mdgriffith$elm_ui$Element$Input$isConstrained,
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Element$Input$getHeight, withDefaults)))));
			}
		}();
		var getPadding = function (attr) {
			if ((attr.$ === 4) && (attr.b.$ === 7)) {
				var cls = attr.a;
				var _v6 = attr.b;
				var pad = _v6.a;
				var t = _v6.b;
				var r = _v6.c;
				var b = _v6.d;
				var l = _v6.e;
				return $elm$core$Maybe$Just(
					{
						a2: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(b - 3)),
						bc: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(l - 3)),
						bl: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(r - 3)),
						bq: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(t - 3))
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var parentPadding = A2(
			$elm$core$Maybe$withDefault,
			{a2: 0, bc: 0, bl: 0, bq: 0},
			$elm$core$List$head(
				$elm$core$List$reverse(
					A2($elm$core$List$filterMap, getPadding, withDefaults))));
		var inputElement = A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			function () {
				var _v3 = textInput.aj;
				if (!_v3.$) {
					var inputType = _v3.a;
					return $mdgriffith$elm_ui$Internal$Model$NodeName('input');
				} else {
					return $mdgriffith$elm_ui$Internal$Model$NodeName('textarea');
				}
			}(),
			_Utils_ap(
				function () {
					var _v4 = textInput.aj;
					if (!_v4.$) {
						var inputType = _v4.a;
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_(inputType)),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.jT)
							]);
					} else {
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$clip,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.jP),
								$mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding(withDefaults),
								$mdgriffith$elm_ui$Element$paddingEach(parentPadding),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2(
									$elm$html$Html$Attributes$style,
									'margin',
									$mdgriffith$elm_ui$Element$Input$renderBox(
										$mdgriffith$elm_ui$Element$Input$negateBox(parentPadding)))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$style, 'box-sizing', 'content-box'))
							]);
					}
				}(),
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Input$value(textOptions.dV),
							$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Events$onInput(textOptions.dJ)),
							$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(textOptions.O),
							$mdgriffith$elm_ui$Element$Input$spellcheck(textInput.bn),
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Internal$Model$NoAttribute,
							A2($elm$core$Maybe$map, $mdgriffith$elm_ui$Element$Input$autofill, textInput.a0))
						]),
					redistributed.W)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil));
		var wrappedInput = function () {
			var _v0 = textInput.aj;
			if (_v0.$ === 1) {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_Utils_ap(
						(heightConstrained ? $elm$core$List$cons($mdgriffith$elm_ui$Element$scrollbarY) : $elm$core$Basics$identity)(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.gm),
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.jS)
								])),
						redistributed.eF),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asParagraph,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$inFront(inputElement),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.jR),
												redistributed.$7)))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(
									function () {
										if (textOptions.dV === '') {
											var _v1 = textOptions.dO;
											if (_v1.$ === 1) {
												return _List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('\u00A0')
													]);
											} else {
												var place = _v1.a;
												return _List_fromArray(
													[
														A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, _List_Nil, textOptions.dV === '')
													]);
											}
										} else {
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Internal$Model$unstyled(
													A2(
														$elm$html$Html$span,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.jQ)
															]),
														_List_fromArray(
															[
																$elm$html$Html$text(textOptions.dV + '\u00A0')
															])))
												]);
										}
									}()))
							])));
			} else {
				var inputType = _v0.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2(
							$elm$core$List$cons,
							A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.gm),
							$elm$core$List$concat(
								_List_fromArray(
									[
										redistributed.eF,
										function () {
										var _v2 = textOptions.dO;
										if (_v2.$ === 1) {
											return _List_Nil;
										} else {
											var place = _v2.a;
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Element$behindContent(
													A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, redistributed.iM, textOptions.dV === ''))
												]);
										}
									}()
									])))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[inputElement])));
			}
		}();
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			A2(
				$elm$core$List$cons,
				A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.iR),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(textOptions.O) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(5),
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Region$announce, redistributed.t))),
			textOptions.O,
			wrappedInput);
	});
var $mdgriffith$elm_ui$Element$Input$currentPassword = F2(
	function (attrs, pass) {
		return A3(
			$mdgriffith$elm_ui$Element$Input$textHelper,
			{
				a0: $elm$core$Maybe$Just('current-password'),
				bn: false,
				aj: $mdgriffith$elm_ui$Element$Input$TextInputNode(
					pass.fI ? 'text' : 'password')
			},
			attrs,
			{O: pass.O, dJ: pass.dJ, dO: pass.dO, dV: pass.dV});
	});
var $mdgriffith$elm_ui$Element$Input$Label = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Element$Input$OnLeft = 1;
var $mdgriffith$elm_ui$Element$Input$labelLeft = $mdgriffith$elm_ui$Element$Input$Label(1);
var $mdgriffith$elm_ui$Element$Input$text = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		a0: $elm$core$Maybe$Nothing,
		bn: false,
		aj: $mdgriffith$elm_ui$Element$Input$TextInputNode('text')
	});
var $author$project$Internals$CommonStyleHelpers$textInputStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$width(
		$mdgriffith$elm_ui$Element$px(250)),
		A2($mdgriffith$elm_ui$Element$paddingXY, 5, 5),
		$mdgriffith$elm_ui$Element$spacing(15),
		$mdgriffith$elm_ui$Element$focused(
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$Border$glow,
				A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
				0)
			]))
	]);
var $author$project$Auth$AuthPlugin$loginView = F3(
	function (config, status_, model) {
		var waitingView = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Traitement en cours, veuillez patienter')
				]));
		var successView = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Connexion réussie!'),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Deconnexion'),
								aI: $elm$core$Maybe$Just(
									$author$project$Auth$AuthPlugin$ChangePluginMode(
										$author$project$Auth$AuthPlugin$LogoutMode(0)))
							})
						]))
				]));
		var initialView = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					$author$project$Internals$CommonStyleHelpers$textInputStyle,
					{
						O: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerY]),
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(110))
									]),
								$mdgriffith$elm_ui$Element$text('Nom utilisateur: '))),
						dJ: $author$project$Auth$AuthPlugin$SetUsername,
						dO: $elm$core$Maybe$Nothing,
						dV: model.bP
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$currentPassword,
					$author$project$Internals$CommonStyleHelpers$textInputStyle,
					{
						O: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerY]),
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(110))
									]),
								$mdgriffith$elm_ui$Element$text('Mot de passe: '))),
						dJ: $author$project$Auth$AuthPlugin$SetPassword,
						dO: $elm$core$Maybe$Nothing,
						fI: false,
						dV: model.cd
					}),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Connexion'),
								aI: $elm$core$Maybe$Just($author$project$Auth$AuthPlugin$Login)
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Nouvel utilisateur'),
								aI: $elm$core$Maybe$Just(
									$author$project$Auth$AuthPlugin$ChangePluginMode(
										$author$project$Auth$AuthPlugin$SignUpMode(0)))
							})
						]))
				]));
		var failureView = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Echec Connexion!'),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Réessayer'),
								aI: $elm$core$Maybe$Just(
									$author$project$Auth$AuthPlugin$ChangePluginMode(
										$author$project$Auth$AuthPlugin$LoginMode(0)))
							})
						]))
				]));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(15),
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$Font$size(16),
					$mdgriffith$elm_ui$Element$alignTop
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Connexion: '),
					function () {
					switch (status_) {
						case 0:
							return initialView;
						case 1:
							return waitingView;
						case 2:
							return successView;
						default:
							return failureView;
					}
				}()
				]));
	});
var $author$project$Auth$AuthPlugin$Logout = {$: 8};
var $author$project$Auth$AuthPlugin$logoutView = F3(
	function (config, status_, model) {
		var waitingView = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Traitement en cours, veuillez patienter')
				]));
		var successView = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Déconnexion réussie!'),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Connexion'),
								aI: $elm$core$Maybe$Just(
									$author$project$Auth$AuthPlugin$ChangePluginMode(
										$author$project$Auth$AuthPlugin$LoginMode(0)))
							})
						]))
				]));
		var initialView = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
					{
						O: $mdgriffith$elm_ui$Element$text('Se déconnecter'),
						aI: $elm$core$Maybe$Just($author$project$Auth$AuthPlugin$Logout)
					})
				]));
		var failureView = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Echec déconnexion!'),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Réessayer'),
								aI: $elm$core$Maybe$Just(
									$author$project$Auth$AuthPlugin$ChangePluginMode(
										$author$project$Auth$AuthPlugin$LogoutMode(0)))
							})
						]))
				]));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(15),
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$Font$size(16),
					$mdgriffith$elm_ui$Element$alignTop
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Déconnexion: '),
					function () {
					switch (status_) {
						case 0:
							return initialView;
						case 1:
							return waitingView;
						case 2:
							return successView;
						default:
							return failureView;
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Element$map = $mdgriffith$elm_ui$Internal$Model$map;
var $author$project$Auth$AuthPlugin$SetConfirmPassword = function (a) {
	return {$: 2, a: a};
};
var $author$project$Auth$AuthPlugin$SignUp = {$: 6};
var $mdgriffith$elm_ui$Element$Input$newPassword = F2(
	function (attrs, pass) {
		return A3(
			$mdgriffith$elm_ui$Element$Input$textHelper,
			{
				a0: $elm$core$Maybe$Just('new-password'),
				bn: false,
				aj: $mdgriffith$elm_ui$Element$Input$TextInputNode(
					pass.fI ? 'text' : 'password')
			},
			attrs,
			{O: pass.O, dJ: pass.dJ, dO: pass.dO, dV: pass.dV});
	});
var $author$project$Auth$AuthPlugin$signUpView = F3(
	function (config, status_, model) {
		var waitingView = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Traitement en cours, veuillez patienter')
				]));
		var successView = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Inscription réussie!'),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Connexion'),
								aI: $elm$core$Maybe$Just(
									$author$project$Auth$AuthPlugin$ChangePluginMode(
										$author$project$Auth$AuthPlugin$LoginMode(0)))
							})
						]))
				]));
		var initialView = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					$author$project$Internals$CommonStyleHelpers$textInputStyle,
					{
						O: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerY]),
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(110))
									]),
								$mdgriffith$elm_ui$Element$text('Nom utilisateur: '))),
						dJ: $author$project$Auth$AuthPlugin$SetUsername,
						dO: $elm$core$Maybe$Nothing,
						dV: model.bP
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$newPassword,
					$author$project$Internals$CommonStyleHelpers$textInputStyle,
					{
						O: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerY]),
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(110))
									]),
								$mdgriffith$elm_ui$Element$text('Mot de passe: '))),
						dJ: $author$project$Auth$AuthPlugin$SetPassword,
						dO: $elm$core$Maybe$Nothing,
						fI: false,
						dV: model.cd
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$newPassword,
					$author$project$Internals$CommonStyleHelpers$textInputStyle,
					{
						O: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerY]),
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(110))
									]),
								$mdgriffith$elm_ui$Element$text('Confirmation: '))),
						dJ: $author$project$Auth$AuthPlugin$SetConfirmPassword,
						dO: $elm$core$Maybe$Nothing,
						fI: false,
						dV: model.ds
					}),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Envoyer'),
								aI: $elm$core$Maybe$Just($author$project$Auth$AuthPlugin$SignUp)
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Retour'),
								aI: $elm$core$Maybe$Just(
									$author$project$Auth$AuthPlugin$ChangePluginMode(
										$author$project$Auth$AuthPlugin$LoginMode(0)))
							})
						]))
				]));
		var failureView = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Echec inscription!'),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Réessayer'),
								aI: $elm$core$Maybe$Just(
									$author$project$Auth$AuthPlugin$ChangePluginMode(
										$author$project$Auth$AuthPlugin$SignUpMode(0)))
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Retour'),
								aI: $elm$core$Maybe$Just(
									$author$project$Auth$AuthPlugin$ChangePluginMode(
										$author$project$Auth$AuthPlugin$LoginMode(0)))
							})
						]))
				]));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(15),
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$Font$size(16),
					$mdgriffith$elm_ui$Element$alignTop
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Nouvel utilisateur: '),
					function () {
					switch (status_) {
						case 0:
							return initialView;
						case 1:
							return waitingView;
						case 2:
							return successView;
						default:
							return failureView;
					}
				}()
				]));
	});
var $author$project$Auth$AuthPlugin$view = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$map,
			model.bY,
			function () {
				var _v0 = model.A;
				switch (_v0.$) {
					case 0:
						var status_ = _v0.a;
						return A3($author$project$Auth$AuthPlugin$signUpView, config, status_, model);
					case 1:
						var status_ = _v0.a;
						return A3($author$project$Auth$AuthPlugin$loginView, config, status_, model);
					default:
						var status_ = _v0.a;
						return A3($author$project$Auth$AuthPlugin$logoutView, config, status_, model);
				}
			}());
	});
var $mdgriffith$elm_ui$Element$Font$family = function (families) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontFamily,
		A2(
			$mdgriffith$elm_ui$Internal$Model$FontFamily,
			A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'ff-', families),
			families));
};
var $author$project$FileExplorer$FileExplorer$GoTo = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $author$project$FileExplorer$FileExplorer$NoOp = {$: 40};
var $author$project$FileExplorer$FileExplorer$SelectFsItem = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $author$project$FileExplorer$FileExplorer$onDoubleClick = function (msg) {
	var preventIfDoubleClick = function (n) {
		return (n > 1) ? _Utils_Tuple2(msg, true) : _Utils_Tuple2($author$project$FileExplorer$FileExplorer$NoOp, false);
	};
	var decodeNbrClicks = A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['detail']),
		$elm$json$Json$Decode$int);
	return $mdgriffith$elm_ui$Element$htmlAttribute(
		A2(
			$elm$html$Html$Events$preventDefaultOn,
			'mousedown',
			A2($elm$json$Json$Decode$map, preventIfDoubleClick, decodeNbrClicks)));
};
var $elm$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _v0) {
				var trues = _v0.a;
				var falses = _v0.b;
				return pred(x) ? _Utils_Tuple2(
					A2($elm$core$List$cons, x, trues),
					falses) : _Utils_Tuple2(
					trues,
					A2($elm$core$List$cons, x, falses));
			});
		return A3(
			$elm$core$List$foldr,
			step,
			_Utils_Tuple2(_List_Nil, _List_Nil),
			list);
	});
var $elm_community$string_extra$String$Extra$breaker = F3(
	function (width, string, acc) {
		breaker:
		while (true) {
			if (string === '') {
				return $elm$core$List$reverse(acc);
			} else {
				var $temp$width = width,
					$temp$string = A2($elm$core$String$dropLeft, width, string),
					$temp$acc = A2(
					$elm$core$List$cons,
					A3($elm$core$String$slice, 0, width, string),
					acc);
				width = $temp$width;
				string = $temp$string;
				acc = $temp$acc;
				continue breaker;
			}
		}
	});
var $elm_community$string_extra$String$Extra$break = F2(
	function (width, string) {
		return ((!width) || (string === '')) ? _List_fromArray(
			[string]) : A3($elm_community$string_extra$String$Extra$breaker, width, string, _List_Nil);
	});
var $author$project$FileExplorer$FileExplorer$customJoin = F4(
	function (acc, n, s, xs) {
		customJoin:
		while (true) {
			if (!xs.b) {
				return A2(
					$elm$core$String$join,
					s,
					$elm$core$List$reverse(acc));
			} else {
				if (xs.b.b) {
					var xs1 = xs.a;
					var _v1 = xs.b;
					var xs2 = _v1.a;
					var rest = _v1.b;
					if ((_Utils_cmp(
						$elm$core$String$length(xs1) + $elm$core$String$length(xs2),
						n) < 1) && (A2($elm$core$String$contains, '.', xs1) || A2($elm$core$String$contains, '.', xs2))) {
						var $temp$acc = A2(
							$elm$core$List$cons,
							_Utils_ap(xs1, xs2),
							acc),
							$temp$n = n,
							$temp$s = s,
							$temp$xs = rest;
						acc = $temp$acc;
						n = $temp$n;
						s = $temp$s;
						xs = $temp$xs;
						continue customJoin;
					} else {
						var $temp$acc = A2($elm$core$List$cons, xs1, acc),
							$temp$n = n,
							$temp$s = s,
							$temp$xs = A2($elm$core$List$cons, xs2, rest);
						acc = $temp$acc;
						n = $temp$n;
						s = $temp$s;
						xs = $temp$xs;
						continue customJoin;
					}
				} else {
					var xs1 = xs.a;
					var rest = xs.b;
					var $temp$acc = A2($elm$core$List$cons, xs1, acc),
						$temp$n = n,
						$temp$s = s,
						$temp$xs = rest;
					acc = $temp$acc;
					n = $temp$n;
					s = $temp$s;
					xs = $temp$xs;
					continue customJoin;
				}
			}
		}
	});
var $author$project$FileExplorer$FileExplorer$prettyName = F2(
	function (name, n) {
		return A4(
			$author$project$FileExplorer$FileExplorer$customJoin,
			_List_Nil,
			n,
			' ',
			function (xs) {
				return ($elm$core$List$length(xs) > 3) ? A2(
					$elm$core$List$take,
					3,
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (i, s) {
								return (i === 2) ? (($elm$core$String$length(s) >= 7) ? (A2($elm$core$String$left, 7, s) + '...') : (s + '...')) : s;
							}),
						xs)) : xs;
			}(
				A2(
					$elm$core$List$concatMap,
					$elm_community$string_extra$String$Extra$break(n),
					A2(
						$elm$core$List$concatMap,
						function (s) {
							var l = $elm$core$String$length(s);
							return (_Utils_cmp(l, n) > -1) ? $elm$core$String$words(
								A2(
									$elm$core$String$join,
									' .',
									A2($elm$core$String$split, '.', s))) : _List_fromArray(
								[s]);
						},
						$elm$core$String$words(name)))));
	});
var $mdgriffith$elm_ui$Element$Background$uncropped = function (src) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2($elm$virtual_dom$VirtualDom$style, 'background', 'url(\"' + (src + '\") center / contain no-repeat')));
};
var $author$project$FileExplorer$FileExplorer$filesysView = F2(
	function (config, model) {
		var folderView = F2(
			function (folder, _v11) {
				var name = _v11.I;
				var path = _v11.K;
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding(7),
								$mdgriffith$elm_ui$Element$Border$rounded(5),
								$mdgriffith$elm_ui$Element$mouseOver(
								function () {
									var _v9 = A2(
										$elm$core$Maybe$map,
										function (fsItem) {
											return _Utils_eq(
												$author$project$FileExplorer$FileExplorer$getPath(fsItem),
												path);
										},
										model.o);
									if ((!_v9.$) && _v9.a) {
										return _List_Nil;
									} else {
										return _List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Background$color(
												A4($mdgriffith$elm_ui$Element$rgba, 0.3, 0.4, 0.6, 0.3))
											]);
									}
								}()),
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A2($elm$html$Html$Attributes$style, 'transition', '0.1s')),
								$mdgriffith$elm_ui$Element$alignTop,
								function () {
								var _v10 = A2(
									$elm$core$Maybe$map,
									function (fsItem) {
										return _Utils_eq(
											$author$project$FileExplorer$FileExplorer$getPath(fsItem),
											path);
									},
									model.o);
								if ((!_v10.$) && _v10.a) {
									return $mdgriffith$elm_ui$Element$Background$color(
										A4($mdgriffith$elm_ui$Element$rgba, 0.3, 0.4, 0.6, 0.5));
								} else {
									return $author$project$Internals$CommonStyleHelpers$noAttr;
								}
							}()
							]),
						A2($elm$core$List$member, folder, model.G) ? _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$alpha(0.5),
								$author$project$FileExplorer$FileExplorer$onDoubleClick($author$project$FileExplorer$FileExplorer$NoOp)
							]) : _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$pointer,
								$mdgriffith$elm_ui$Element$Events$onClick(
								A2($author$project$FileExplorer$FileExplorer$SelectFsItem, config.h, folder)),
								$author$project$FileExplorer$FileExplorer$onDoubleClick(
								A2($author$project$FileExplorer$FileExplorer$GoTo, config.h, path))
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(80)),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(80)),
									$mdgriffith$elm_ui$Element$Background$color(
									A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
									$mdgriffith$elm_ui$Element$Background$uncropped('assets/images/folder.svg')
								]),
							$mdgriffith$elm_ui$Element$none),
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(80)),
									$mdgriffith$elm_ui$Element$clip,
									$mdgriffith$elm_ui$Element$Font$size(12),
									$mdgriffith$elm_ui$Element$Font$center,
									A2($mdgriffith$elm_ui$Element$paddingXY, 0, 5)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text(
									A2($author$project$FileExplorer$FileExplorer$prettyName, name, 10))
								]))
						]));
			});
		var fileView = F2(
			function (file, _v8) {
				var name = _v8.I;
				var path = _v8.K;
				var fileType = _v8.cA;
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding(7),
								$mdgriffith$elm_ui$Element$mouseOver(
								function () {
									var _v5 = A2(
										$elm$core$Maybe$map,
										function (fsItem) {
											return _Utils_eq(
												$author$project$FileExplorer$FileExplorer$getPath(fsItem),
												path);
										},
										model.o);
									if ((!_v5.$) && _v5.a) {
										return _List_Nil;
									} else {
										return _List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Background$color(
												A4($mdgriffith$elm_ui$Element$rgba, 0.3, 0.4, 0.6, 0.3))
											]);
									}
								}()),
								$mdgriffith$elm_ui$Element$Border$rounded(5),
								function () {
								var _v6 = A2(
									$elm$core$Maybe$map,
									function (fsItem) {
										return _Utils_eq(
											$author$project$FileExplorer$FileExplorer$getPath(fsItem),
											path);
									},
									model.o);
								if ((!_v6.$) && _v6.a) {
									return $mdgriffith$elm_ui$Element$Background$color(
										A4($mdgriffith$elm_ui$Element$rgba, 0.3, 0.4, 0.6, 0.5));
								} else {
									return $author$project$Internals$CommonStyleHelpers$noAttr;
								}
							}(),
								$author$project$FileExplorer$FileExplorer$onDoubleClick($author$project$FileExplorer$FileExplorer$NoOp),
								$mdgriffith$elm_ui$Element$alignTop
							]),
						A2($elm$core$List$member, file, model.G) ? _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$alpha(0.5)
							]) : _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$pointer,
								$mdgriffith$elm_ui$Element$Events$onClick(
								A2($author$project$FileExplorer$FileExplorer$SelectFsItem, config.h, file))
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(80)),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(80)),
									$mdgriffith$elm_ui$Element$Background$color(
									A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95)),
									$mdgriffith$elm_ui$Element$Border$rounded(5),
									$mdgriffith$elm_ui$Element$padding(0),
									$mdgriffith$elm_ui$Element$spacing(0),
									$mdgriffith$elm_ui$Element$htmlAttribute(
									A2($elm$html$Html$Attributes$style, 'transition', '0.1s'))
								]),
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(67)),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(67)),
										function () {
										if (!fileType.$) {
											return $mdgriffith$elm_ui$Element$Background$uncropped(
												A2($elm$core$String$join, '/', path));
										} else {
											return A2($elm$core$String$contains, '.pdf', name) ? $mdgriffith$elm_ui$Element$Background$uncropped('/assets/images/pdf.svg') : (A2($elm$core$String$contains, '.ppt', name) ? $mdgriffith$elm_ui$Element$Background$uncropped('/assets/images/ppt.svg') : (A2($elm$core$String$contains, '.doc', name) ? $mdgriffith$elm_ui$Element$Background$uncropped('/assets/images/doc.svg') : $mdgriffith$elm_ui$Element$Background$uncropped('/assets/images/file.svg')));
										}
									}(),
										$mdgriffith$elm_ui$Element$Background$color(
										A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 1)),
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$centerY
									]),
								$mdgriffith$elm_ui$Element$none)),
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(80)),
									$mdgriffith$elm_ui$Element$clip,
									$mdgriffith$elm_ui$Element$Font$size(12),
									A2($mdgriffith$elm_ui$Element$paddingXY, 0, 5),
									$mdgriffith$elm_ui$Element$Font$center
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text(
									A2($author$project$FileExplorer$FileExplorer$prettyName, name, 10))
								]))
						]));
			});
		var contentView = function (fsItem) {
			if (fsItem.$ === 1) {
				var meta = fsItem.a;
				return A2(fileView, fsItem, meta);
			} else {
				var meta = fsItem.a;
				return A2(folderView, fsItem, meta);
			}
		};
		var _v0 = A2($author$project$FileExplorer$FileExplorer$getCurrentFilesys, config.h, model);
		if (_v0.$ === 1) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$alignTop]),
				$mdgriffith$elm_ui$Element$text('Erreur système de fichier'));
		} else {
			var filesys = _v0.a;
			var _v1 = $author$project$FileExplorer$FileExplorer$extractFsItem(filesys);
			if (_v1.$ === 1) {
				var meta = _v1.a;
				return A2(
					fileView,
					$author$project$FileExplorer$FileExplorer$File(meta),
					meta);
			} else {
				var meta = _v1.a;
				var contents = _v1.b;
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$scrollbarY,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$padding(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(5)
								]),
							A2(
								$elm$core$List$map,
								contentView,
								function (_v3) {
									var files = _v3.a;
									var folders = _v3.b;
									return _Utils_ap(
										A2($elm$core$List$sortBy, $author$project$FileExplorer$FileExplorer$getName, folders),
										A2($elm$core$List$sortBy, $author$project$FileExplorer$FileExplorer$getName, files));
								}(
									A2(
										$elm$core$List$partition,
										function (f) {
											if (f.$ === 1) {
												return true;
											} else {
												return false;
											}
										},
										contents))))
						]));
			}
		}
	});
var $author$project$FileExplorer$FileExplorer$GoHome = function (a) {
	return {$: 0, a: a};
};
var $author$project$FileExplorer$FileExplorer$GoNext = function (a) {
	return {$: 1, a: a};
};
var $author$project$FileExplorer$FileExplorer$GoPrev = function (a) {
	return {$: 2, a: a};
};
var $author$project$FileExplorer$FileExplorer$SetRoot = function (a) {
	return {$: 38, a: a};
};
var $author$project$Internals$Icons$chevronLeft = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'chevron-left',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('15 18 9 12 15 6')
					]),
				_List_Nil)
			]));
};
var $author$project$Internals$Icons$chevronRight = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'chevron-right',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('9 18 15 12 9 6')
					]),
				_List_Nil)
			]));
};
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Padding = F5(
	function (a, b, c, d, e) {
		return {$: 0, a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Model$Spaced = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, _v0) {
				var pad = _v0.a;
				var spacing = _v0.b;
				return _Utils_Tuple2(
					function () {
						if (!pad.$) {
							var x = pad.a;
							return pad;
						} else {
							if ((attr.$ === 4) && (attr.b.$ === 7)) {
								var _v3 = attr.b;
								var name = _v3.a;
								var t = _v3.b;
								var r = _v3.c;
								var b = _v3.d;
								var l = _v3.e;
								return $elm$core$Maybe$Just(
									A5($mdgriffith$elm_ui$Internal$Model$Padding, name, t, r, b, l));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}(),
					function () {
						if (!spacing.$) {
							var x = spacing.a;
							return spacing;
						} else {
							if ((attr.$ === 4) && (attr.b.$ === 5)) {
								var _v6 = attr.b;
								var name = _v6.a;
								var x = _v6.b;
								var y = _v6.c;
								return $elm$core$Maybe$Just(
									A3($mdgriffith$elm_ui$Internal$Model$Spaced, name, x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}());
			}),
		_Utils_Tuple2($elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing),
		attrs);
};
var $mdgriffith$elm_ui$Element$wrappedRow = F2(
	function (attrs, children) {
		var _v0 = $mdgriffith$elm_ui$Internal$Model$extractSpacingAndPadding(attrs);
		var padded = _v0.a;
		var spaced = _v0.b;
		if (spaced.$ === 1) {
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asRow,
				$mdgriffith$elm_ui$Internal$Model$div,
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.dt + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.bU + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.fV)))),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							attrs))),
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
		} else {
			var _v2 = spaced.a;
			var spaceName = _v2.a;
			var x = _v2.b;
			var y = _v2.c;
			var newPadding = function () {
				if (!padded.$) {
					var _v5 = padded.a;
					var name = _v5.a;
					var t = _v5.b;
					var r = _v5.c;
					var b = _v5.d;
					var l = _v5.e;
					return ((_Utils_cmp(r, (x / 2) | 0) > -1) && (_Utils_cmp(b, (y / 2) | 0) > -1)) ? $elm$core$Maybe$Just(
						$mdgriffith$elm_ui$Element$paddingEach(
							{a2: b - ((y / 2) | 0), bc: l - ((x / 2) | 0), bl: r - ((x / 2) | 0), bq: t - ((y / 2) | 0)})) : $elm$core$Maybe$Nothing;
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}();
			if (!newPadding.$) {
				var pad = newPadding.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asRow,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.dt + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.bU + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.fV)))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								_Utils_ap(
									attrs,
									_List_fromArray(
										[pad]))))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
			} else {
				var halfY = -(y / 2);
				var halfX = -(x / 2);
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					attrs,
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asRow,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.dt + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.bU + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.fV)))),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											A2(
												$elm$html$Html$Attributes$style,
												'margin',
												$elm$core$String$fromFloat(halfY) + ('px' + (' ' + ($elm$core$String$fromFloat(halfX) + 'px'))))),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Internal$Model$Attr(
												A2(
													$elm$html$Html$Attributes$style,
													'width',
													'calc(100% + ' + ($elm$core$String$fromInt(x) + 'px)'))),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$Attr(
													A2(
														$elm$html$Html$Attributes$style,
														'height',
														'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))),
												A2(
													$elm$core$List$cons,
													A2(
														$mdgriffith$elm_ui$Internal$Model$StyleClass,
														$mdgriffith$elm_ui$Internal$Flag$spacing,
														A3($mdgriffith$elm_ui$Internal$Model$SpacingStyle, spaceName, x, y)),
													_List_Nil))))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(children))
							])));
			}
		}
	});
var $author$project$FileExplorer$FileExplorer$clickablePath = F2(
	function (config, model) {
		var getEveryPaths = F2(
			function (acc, path) {
				getEveryPaths:
				while (true) {
					if (!path.b) {
						return acc;
					} else {
						var current = path.a;
						var rest = path.b;
						var $temp$acc = A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								current,
								$elm$core$List$reverse(path)),
							acc),
							$temp$path = rest;
						acc = $temp$acc;
						path = $temp$path;
						continue getEveryPaths;
					}
				}
			});
		var fsItemView = function (_v1) {
			var f = _v1.a;
			var p = _v1.b;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Events$onClick(
						A2($author$project$FileExplorer$FileExplorer$GoTo, config.h, p)),
						A2($mdgriffith$elm_ui$Element$paddingXY, 2, 4),
						$mdgriffith$elm_ui$Element$pointer,
						$mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color(
								A4($mdgriffith$elm_ui$Element$rgba, 0.3, 0.4, 0.6, 0.5))
							]))
					]),
				$mdgriffith$elm_ui$Element$text(f));
		};
		return A2(
			$mdgriffith$elm_ui$Element$wrappedRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
					$mdgriffith$elm_ui$Element$padding(4),
					$mdgriffith$elm_ui$Element$Border$rounded(5)
				]),
			function (res) {
				return A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$text('/'),
					res);
			}(
				A2(
					$elm$core$List$intersperse,
					$mdgriffith$elm_ui$Element$text('/'),
					A2(
						$elm$core$List$map,
						fsItemView,
						A2(
							getEveryPaths,
							_List_Nil,
							$elm$core$List$reverse(
								A2(
									$elm$core$Maybe$withDefault,
									_List_Nil,
									A2(
										$elm$core$Maybe$map,
										$author$project$FileExplorer$FileExplorer$getPath,
										A2(
											$elm$core$Maybe$map,
											$author$project$FileExplorer$FileExplorer$extractFsItem,
											A2($author$project$FileExplorer$FileExplorer$getCurrentFilesys, config.h, model))))))))));
	});
var $author$project$Internals$Icons$fileText = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'file-text',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('14 2 14 8 20 8')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('16'),
						$elm$svg$Svg$Attributes$y1('13'),
						$elm$svg$Svg$Attributes$x2('8'),
						$elm$svg$Svg$Attributes$y2('13')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('16'),
						$elm$svg$Svg$Attributes$y1('17'),
						$elm$svg$Svg$Attributes$x2('8'),
						$elm$svg$Svg$Attributes$y2('17')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('10 9 9 9 8 9')
					]),
				_List_Nil)
			]));
};
var $author$project$Internals$Icons$home = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'home',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('9 22 9 12 15 12 15 22')
					]),
				_List_Nil)
			]));
};
var $elm$svg$Svg$circle = $elm$svg$Svg$trustedNode('circle');
var $elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');
var $elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');
var $elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');
var $elm$svg$Svg$rect = $elm$svg$Svg$trustedNode('rect');
var $elm$svg$Svg$Attributes$rx = _VirtualDom_attribute('rx');
var $elm$svg$Svg$Attributes$ry = _VirtualDom_attribute('ry');
var $elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var $elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var $author$project$Internals$Icons$imageIcon = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'image',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$rect,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x('3'),
						$elm$svg$Svg$Attributes$y('3'),
						$elm$svg$Svg$Attributes$width('18'),
						$elm$svg$Svg$Attributes$height('18'),
						$elm$svg$Svg$Attributes$rx('2'),
						$elm$svg$Svg$Attributes$ry('2')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$circle,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$cx('8.5'),
						$elm$svg$Svg$Attributes$cy('8.5'),
						$elm$svg$Svg$Attributes$r('1.5')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('21 15 16 10 5 21')
					]),
				_List_Nil)
			]));
};
var $author$project$Internals$CommonStyleHelpers$toogleButtonStyle = F2(
	function (isPressed, isActive) {
		return _Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$rounded(5),
					$mdgriffith$elm_ui$Element$Font$center,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$focused(
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Border$glow,
							A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
							0)
						]))
				]),
			isActive ? _Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0.3, 0.3, 0.3))
							]))
					]),
				isPressed ? _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9)),
						$mdgriffith$elm_ui$Element$Border$width(1),
						$mdgriffith$elm_ui$Element$Border$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9)),
						$mdgriffith$elm_ui$Element$Border$shadow(
						{
							ic: 0.5,
							iA: A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5),
							kD: _Utils_Tuple2(1, 1),
							fJ: 1
						}),
						$mdgriffith$elm_ui$Element$focused(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Border$shadow(
								{
									ic: 0.5,
									iA: A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5),
									kD: _Utils_Tuple2(1, 1),
									fJ: 1
								})
							]))
					]) : _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9)),
						$mdgriffith$elm_ui$Element$Border$width(1),
						$mdgriffith$elm_ui$Element$Border$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
					])) : _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95)),
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0.7, 0.7)),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'cursor', 'default')),
					$mdgriffith$elm_ui$Element$Border$width(1),
					$mdgriffith$elm_ui$Element$Border$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95))
				]));
	});
var $author$project$FileExplorer$FileExplorer$mainInterface = F2(
	function (config, model) {
		var iconSize = 22;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95)),
					A2($mdgriffith$elm_ui$Element$paddingXY, 15, 10)
				]),
			_List_fromArray(
				[
					_Utils_eq(config.h, $author$project$FileExplorer$FileExplorer$Full) ? A2(
					$mdgriffith$elm_ui$Element$Input$button,
					A2($author$project$Internals$CommonStyleHelpers$toogleButtonStyle, model.Z === 1, true),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$html(
									$author$project$Internals$Icons$fileText(iconSize))
								])),
						aI: $elm$core$Maybe$Just(
							$author$project$FileExplorer$FileExplorer$SetRoot(1))
					}) : $mdgriffith$elm_ui$Element$none,
					_Utils_eq(config.h, $author$project$FileExplorer$FileExplorer$Full) ? A2(
					$mdgriffith$elm_ui$Element$Input$button,
					A2($author$project$Internals$CommonStyleHelpers$toogleButtonStyle, !model.Z, true),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$html(
									$author$project$Internals$Icons$imageIcon(iconSize))
								])),
						aI: $elm$core$Maybe$Just(
							$author$project$FileExplorer$FileExplorer$SetRoot(0))
					}) : $mdgriffith$elm_ui$Element$none,
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$html(
									$author$project$Internals$Icons$chevronLeft(iconSize))
								])),
						aI: $elm$core$Maybe$Just(
							$author$project$FileExplorer$FileExplorer$GoPrev(config.h))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					$author$project$Internals$CommonStyleHelpers$buttonStyle(
						!_Utils_eq(model.bF, $elm$core$Maybe$Nothing)),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$html(
									$author$project$Internals$Icons$chevronRight(iconSize))
								])),
						aI: (!_Utils_eq(model.bF, $elm$core$Maybe$Nothing)) ? $elm$core$Maybe$Just(
							$author$project$FileExplorer$FileExplorer$GoNext(config.h)) : $elm$core$Maybe$Nothing
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$html(
									$author$project$Internals$Icons$home(iconSize))
								])),
						aI: $elm$core$Maybe$Just(
							$author$project$FileExplorer$FileExplorer$GoHome(config.h))
					}),
					A2($author$project$FileExplorer$FileExplorer$clickablePath, config, model)
				]));
	});
var $author$project$FileExplorer$FileExplorer$Cut = function (a) {
	return {$: 8, a: a};
};
var $author$project$FileExplorer$FileExplorer$Delete = F2(
	function (a, b) {
		return {$: 7, a: a, b: b};
	});
var $author$project$FileExplorer$FileExplorer$NewFolder = F2(
	function (a, b) {
		return {$: 6, a: a, b: b};
	});
var $author$project$FileExplorer$FileExplorer$NewFolderInput = function (a) {
	return {$: 5, a: a};
};
var $author$project$FileExplorer$FileExplorer$Paste = F2(
	function (a, b) {
		return {$: 9, a: a, b: b};
	});
var $author$project$FileExplorer$FileExplorer$ReadOnly = function (a) {
	return {$: 0, a: a};
};
var $author$project$FileExplorer$FileExplorer$Rename = F2(
	function (a, b) {
		return {$: 11, a: a, b: b};
	});
var $author$project$FileExplorer$FileExplorer$RenameInput = function (a) {
	return {$: 10, a: a};
};
var $author$project$FileExplorer$FileExplorer$ToogleUploadView = {$: 13};
var $mdgriffith$elm_ui$Internal$Model$Left = 0;
var $mdgriffith$elm_ui$Element$alignLeft = $mdgriffith$elm_ui$Internal$Model$AlignX(0);
var $author$project$FileExplorer$FileExplorer$compileFolderInfo = function (fsItem) {
	var helper = F2(
		function (fsItem_, acc) {
			var nbrFiles = acc.ex;
			var size = acc.fJ;
			var nbrFolders = acc.dI;
			if (fsItem_.$ === 1) {
				var fileSize = fsItem_.a.b$;
				return _Utils_update(
					acc,
					{
						ex: nbrFiles + 1,
						fJ: A2($elm$core$Maybe$withDefault, 0, fileSize) + size
					});
			} else {
				var children = fsItem_.b;
				return A3(
					$elm$core$List$foldr,
					F2(
						function (f, acc_) {
							return A2(helper, f, acc_);
						}),
					_Utils_update(
						acc,
						{dI: acc.dI + 1}),
					children);
			}
		});
	return A2(
		helper,
		fsItem,
		{ex: 0, dI: -1, fJ: 0});
};
var $author$project$Internals$CommonStyleHelpers$red4 = A3($mdgriffith$elm_ui$Element$rgb255, 220, 48, 48);
var $author$project$Internals$CommonStyleHelpers$red5 = A3($mdgriffith$elm_ui$Element$rgb255, 228, 100, 100);
var $author$project$Internals$CommonStyleHelpers$deleteButtonStyle = function (isActive) {
	return _Utils_ap(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Border$rounded(5),
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$padding(5),
				$mdgriffith$elm_ui$Element$focused(
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Border$glow,
						A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
						0)
					]))
			]),
		isActive ? _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$red5),
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$red4)
					])),
				$mdgriffith$elm_ui$Element$Border$width(1),
				$mdgriffith$elm_ui$Element$Border$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
			]) : _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95)),
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0.7, 0.7)),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'cursor', 'default')),
				$mdgriffith$elm_ui$Element$Border$width(1),
				$mdgriffith$elm_ui$Element$Border$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95))
			]));
};
var $elm$html$Html$Attributes$download = function (fileName) {
	return A2($elm$html$Html$Attributes$stringProperty, 'download', fileName);
};
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $mdgriffith$elm_ui$Element$download = F2(
	function (attrs, _v0) {
		var url = _v0.d$;
		var label = _v0.O;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$download('')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.ea),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.bU),
									attrs)))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Element$Keyed$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Keyed(
				_List_fromArray(
					[child])));
	});
var $author$project$Internals$Icons$folderPlus = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'folder-plus',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('12'),
						$elm$svg$Svg$Attributes$y1('11'),
						$elm$svg$Svg$Attributes$x2('12'),
						$elm$svg$Svg$Attributes$y2('17')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('9'),
						$elm$svg$Svg$Attributes$y1('14'),
						$elm$svg$Svg$Attributes$x2('15'),
						$elm$svg$Svg$Attributes$y2('14')
					]),
				_List_Nil)
			]));
};
var $basti1302$elm_human_readable_filesize$Filesize$Base10 = 0;
var $basti1302$elm_human_readable_filesize$Filesize$defaultSettings = {e7: 2, eh: '.', d_: 0};
var $basti1302$elm_human_readable_filesize$Filesize$base10UnitList = _List_fromArray(
	[
		{S: 'B', Q: 1},
		{S: 'kB', Q: 1000},
		{S: 'MB', Q: 1000000},
		{S: 'GB', Q: 1000000000},
		{S: 'TB', Q: 1000000000000},
		{S: 'PB', Q: 1000000000000000},
		{S: 'EB', Q: 1000000000000000000}
	]);
var $basti1302$elm_human_readable_filesize$Filesize$base2UnitList = _List_fromArray(
	[
		{S: 'B', Q: 1},
		{S: 'KiB', Q: 1024},
		{S: 'MiB', Q: 1048576},
		{S: 'GiB', Q: 1073741824},
		{S: 'TiB', Q: 1099511627776},
		{S: 'PiB', Q: 1125899906842624}
	]);
var $basti1302$elm_human_readable_filesize$Filesize$getUnitDefinitionList = function (units) {
	if (!units) {
		return $basti1302$elm_human_readable_filesize$Filesize$base10UnitList;
	} else {
		return $basti1302$elm_human_readable_filesize$Filesize$base2UnitList;
	}
};
var $basti1302$elm_human_readable_filesize$Filesize$decimalSeparatorRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('\\.'));
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $myrho$elm_round$Round$addSign = F2(
	function (signed, str) {
		var isNotZero = A2(
			$elm$core$List$any,
			function (c) {
				return (c !== '0') && (c !== '.');
			},
			$elm$core$String$toList(str));
		return _Utils_ap(
			(signed && isNotZero) ? '-' : '',
			str);
	});
var $myrho$elm_round$Round$increaseNum = function (_v0) {
	var head = _v0.a;
	var tail = _v0.b;
	if (head === '9') {
		var _v1 = $elm$core$String$uncons(tail);
		if (_v1.$ === 1) {
			return '01';
		} else {
			var headtail = _v1.a;
			return A2(
				$elm$core$String$cons,
				'0',
				$myrho$elm_round$Round$increaseNum(headtail));
		}
	} else {
		var c = $elm$core$Char$toCode(head);
		return ((c >= 48) && (c < 57)) ? A2(
			$elm$core$String$cons,
			$elm$core$Char$fromCode(c + 1),
			tail) : '0';
	}
};
var $elm$core$Basics$isInfinite = _Basics_isInfinite;
var $elm$core$Basics$isNaN = _Basics_isNaN;
var $elm$core$String$padRight = F3(
	function (n, _char, string) {
		return _Utils_ap(
			string,
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)));
	});
var $elm$core$String$reverse = _String_reverse;
var $myrho$elm_round$Round$splitComma = function (str) {
	var _v0 = A2($elm$core$String$split, '.', str);
	if (_v0.b) {
		if (_v0.b.b) {
			var before = _v0.a;
			var _v1 = _v0.b;
			var after = _v1.a;
			return _Utils_Tuple2(before, after);
		} else {
			var before = _v0.a;
			return _Utils_Tuple2(before, '0');
		}
	} else {
		return _Utils_Tuple2('0', '0');
	}
};
var $myrho$elm_round$Round$toDecimal = function (fl) {
	var _v0 = A2(
		$elm$core$String$split,
		'e',
		$elm$core$String$fromFloat(
			$elm$core$Basics$abs(fl)));
	if (_v0.b) {
		if (_v0.b.b) {
			var num = _v0.a;
			var _v1 = _v0.b;
			var exp = _v1.a;
			var e = A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(
					A2($elm$core$String$startsWith, '+', exp) ? A2($elm$core$String$dropLeft, 1, exp) : exp));
			var _v2 = $myrho$elm_round$Round$splitComma(num);
			var before = _v2.a;
			var after = _v2.b;
			var total = _Utils_ap(before, after);
			var zeroed = (e < 0) ? A2(
				$elm$core$Maybe$withDefault,
				'0',
				A2(
					$elm$core$Maybe$map,
					function (_v3) {
						var a = _v3.a;
						var b = _v3.b;
						return a + ('.' + b);
					},
					A2(
						$elm$core$Maybe$map,
						$elm$core$Tuple$mapFirst($elm$core$String$fromChar),
						$elm$core$String$uncons(
							_Utils_ap(
								A2(
									$elm$core$String$repeat,
									$elm$core$Basics$abs(e),
									'0'),
								total))))) : A3($elm$core$String$padRight, e + 1, '0', total);
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				zeroed);
		} else {
			var num = _v0.a;
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				num);
		}
	} else {
		return '';
	}
};
var $myrho$elm_round$Round$roundFun = F3(
	function (functor, s, fl) {
		if ($elm$core$Basics$isInfinite(fl) || $elm$core$Basics$isNaN(fl)) {
			return $elm$core$String$fromFloat(fl);
		} else {
			var signed = fl < 0;
			var _v0 = $myrho$elm_round$Round$splitComma(
				$myrho$elm_round$Round$toDecimal(
					$elm$core$Basics$abs(fl)));
			var before = _v0.a;
			var after = _v0.b;
			var r = $elm$core$String$length(before) + s;
			var normalized = _Utils_ap(
				A2($elm$core$String$repeat, (-r) + 1, '0'),
				A3(
					$elm$core$String$padRight,
					r,
					'0',
					_Utils_ap(before, after)));
			var totalLen = $elm$core$String$length(normalized);
			var roundDigitIndex = A2($elm$core$Basics$max, 1, r);
			var increase = A2(
				functor,
				signed,
				A3($elm$core$String$slice, roundDigitIndex, totalLen, normalized));
			var remains = A3($elm$core$String$slice, 0, roundDigitIndex, normalized);
			var num = increase ? $elm$core$String$reverse(
				A2(
					$elm$core$Maybe$withDefault,
					'1',
					A2(
						$elm$core$Maybe$map,
						$myrho$elm_round$Round$increaseNum,
						$elm$core$String$uncons(
							$elm$core$String$reverse(remains))))) : remains;
			var numLen = $elm$core$String$length(num);
			var numZeroed = (num === '0') ? num : ((s <= 0) ? _Utils_ap(
				num,
				A2(
					$elm$core$String$repeat,
					$elm$core$Basics$abs(s),
					'0')) : ((_Utils_cmp(
				s,
				$elm$core$String$length(after)) < 0) ? (A3($elm$core$String$slice, 0, numLen - s, num) + ('.' + A3($elm$core$String$slice, numLen - s, numLen, num))) : _Utils_ap(
				before + '.',
				A3($elm$core$String$padRight, s, '0', after))));
			return A2($myrho$elm_round$Round$addSign, signed, numZeroed);
		}
	});
var $myrho$elm_round$Round$floor = $myrho$elm_round$Round$roundFun(
	F2(
		function (signed, str) {
			var _v0 = $elm$core$String$uncons(str);
			if (_v0.$ === 1) {
				return false;
			} else {
				if ('0' === _v0.a.a) {
					var _v1 = _v0.a;
					var rest = _v1.b;
					return signed && A2(
						$elm$core$List$any,
						$elm$core$Basics$neq('0'),
						$elm$core$String$toList(rest));
				} else {
					return signed;
				}
			}
		}));
var $basti1302$elm_human_readable_filesize$Filesize$removeTrailingZeroesRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^(\\d+\\.[^0]*)(0+)$'));
var $elm$regex$Regex$replaceAtMost = _Regex_replaceAtMost;
var $basti1302$elm_human_readable_filesize$Filesize$roundToDecimalPlaces = F2(
	function (settings, num) {
		var rounded = A2($myrho$elm_round$Round$floor, settings.e7, num);
		var withoutTrailingZeroes = A4(
			$elm$regex$Regex$replaceAtMost,
			1,
			$basti1302$elm_human_readable_filesize$Filesize$removeTrailingZeroesRegex,
			function (_v1) {
				var submatches = _v1.lS;
				return A2(
					$elm$core$String$join,
					'',
					A2(
						$elm$core$List$map,
						$elm$core$Maybe$withDefault(''),
						A2($elm$core$List$take, 1, submatches)));
			},
			rounded);
		var withoutTrailingDot = A2($elm$core$String$endsWith, '.', withoutTrailingZeroes) ? A2($elm$core$String$dropRight, 1, withoutTrailingZeroes) : withoutTrailingZeroes;
		return (settings.eh === '.') ? withoutTrailingDot : A4(
			$elm$regex$Regex$replaceAtMost,
			1,
			$basti1302$elm_human_readable_filesize$Filesize$decimalSeparatorRegex,
			function (_v0) {
				return settings.eh;
			},
			withoutTrailingDot);
	});
var $basti1302$elm_human_readable_filesize$Filesize$unknownUnit = {S: '?', Q: 1};
var $basti1302$elm_human_readable_filesize$Filesize$formatWithSplit = F2(
	function (settings, num) {
		if (!num) {
			return _Utils_Tuple2('0', 'B');
		} else {
			var unitDefinitionList = $basti1302$elm_human_readable_filesize$Filesize$getUnitDefinitionList(settings.d_);
			var _v0 = (num < 0) ? _Utils_Tuple2(-num, '-') : _Utils_Tuple2(num, '');
			var num2 = _v0.a;
			var negativePrefix = _v0.b;
			var unitDefinition = A2(
				$elm$core$Maybe$withDefault,
				$basti1302$elm_human_readable_filesize$Filesize$unknownUnit,
				$elm$core$List$head(
					$elm$core$List$reverse(
						A2(
							$elm$core$List$filter,
							function (unitDef) {
								return _Utils_cmp(num2, unitDef.Q) > -1;
							},
							unitDefinitionList))));
			var formattedNumber = A2($basti1302$elm_human_readable_filesize$Filesize$roundToDecimalPlaces, settings, num2 / unitDefinition.Q);
			return _Utils_Tuple2(
				_Utils_ap(negativePrefix, formattedNumber),
				unitDefinition.S);
		}
	});
var $basti1302$elm_human_readable_filesize$Filesize$format = function (num) {
	var _v0 = A2($basti1302$elm_human_readable_filesize$Filesize$formatWithSplit, $basti1302$elm_human_readable_filesize$Filesize$defaultSettings, num);
	var size = _v0.a;
	var unit = _v0.b;
	return size + (' ' + unit);
};
var $mdgriffith$elm_ui$Element$Input$Placeholder = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$placeholder = $mdgriffith$elm_ui$Element$Input$Placeholder;
var $author$project$Internals$CommonStyleHelpers$green3 = A3($mdgriffith$elm_ui$Element$rgb255, 37, 157, 88);
var $author$project$Internals$CommonStyleHelpers$saveButtonStyle = function (isActive) {
	return _Utils_ap(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Border$rounded(5),
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$padding(5),
				$mdgriffith$elm_ui$Element$focused(
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Border$glow,
						A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
						0)
					]))
			]),
		isActive ? _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$green4),
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$green3)
					])),
				$mdgriffith$elm_ui$Element$Border$width(1),
				$mdgriffith$elm_ui$Element$Border$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
			]) : _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95)),
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0.7, 0.7)),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'cursor', 'default')),
				$mdgriffith$elm_ui$Element$Border$width(1),
				$mdgriffith$elm_ui$Element$Border$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95))
			]));
};
var $author$project$Internals$Icons$scissors = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'scissors',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$circle,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$cx('6'),
						$elm$svg$Svg$Attributes$cy('6'),
						$elm$svg$Svg$Attributes$r('3')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$circle,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$cx('6'),
						$elm$svg$Svg$Attributes$cy('18'),
						$elm$svg$Svg$Attributes$r('3')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('20'),
						$elm$svg$Svg$Attributes$y1('4'),
						$elm$svg$Svg$Attributes$x2('8.12'),
						$elm$svg$Svg$Attributes$y2('15.88')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('14.47'),
						$elm$svg$Svg$Attributes$y1('14.48'),
						$elm$svg$Svg$Attributes$x2('20'),
						$elm$svg$Svg$Attributes$y2('20')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('8.12'),
						$elm$svg$Svg$Attributes$y1('8.12'),
						$elm$svg$Svg$Attributes$x2('12'),
						$elm$svg$Svg$Attributes$y2('12')
					]),
				_List_Nil)
			]));
};
var $mdgriffith$elm_ui$Element$Font$typeface = $mdgriffith$elm_ui$Internal$Model$Typeface;
var $mdgriffith$elm_ui$Element$Font$underline = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.hF);
var $author$project$Internals$Icons$upload = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'upload',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('17 8 12 3 7 8')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('12'),
						$elm$svg$Svg$Attributes$y1('3'),
						$elm$svg$Svg$Attributes$x2('12'),
						$elm$svg$Svg$Attributes$y2('15')
					]),
				_List_Nil)
			]));
};
var $author$project$Internals$Icons$xSquare = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'x-square',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$rect,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x('3'),
						$elm$svg$Svg$Attributes$y('3'),
						$elm$svg$Svg$Attributes$width('18'),
						$elm$svg$Svg$Attributes$height('18'),
						$elm$svg$Svg$Attributes$rx('2'),
						$elm$svg$Svg$Attributes$ry('2')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('9'),
						$elm$svg$Svg$Attributes$y1('9'),
						$elm$svg$Svg$Attributes$x2('15'),
						$elm$svg$Svg$Attributes$y2('15')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('15'),
						$elm$svg$Svg$Attributes$y1('9'),
						$elm$svg$Svg$Attributes$x2('9'),
						$elm$svg$Svg$Attributes$y2('15')
					]),
				_List_Nil)
			]));
};
var $author$project$FileExplorer$FileExplorer$sidePanelView = F2(
	function (config, model) {
		var regFilePreviewPanel = function (meta) {
			return A2(
				$mdgriffith$elm_ui$Element$download,
				_List_Nil,
				{
					O: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 1)),
								$mdgriffith$elm_ui$Element$Font$underline
							]),
						$mdgriffith$elm_ui$Element$text('Télécharger')),
					d$: A2($elm$core$String$join, '/', meta.K)
				});
		};
		var imagePreviewPanel = F2(
			function (meta, imgSize) {
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(300)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$Font$family(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$typeface('Arial')
								]))
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(250)),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(250)),
									$mdgriffith$elm_ui$Element$Background$color(
									A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9)),
									$mdgriffith$elm_ui$Element$Border$rounded(5),
									$mdgriffith$elm_ui$Element$padding(0),
									$mdgriffith$elm_ui$Element$spacing(0)
								]),
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(237)),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(237)),
										$mdgriffith$elm_ui$Element$Background$uncropped(
										A2($elm$core$String$join, '/', meta.K)),
										$mdgriffith$elm_ui$Element$Background$color(
										A4($mdgriffith$elm_ui$Element$rgba, 1, 1, 1, 1)),
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$centerY
									]),
								$mdgriffith$elm_ui$Element$none)),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$Font$center]),
							$mdgriffith$elm_ui$Element$text(
								$elm$core$String$fromInt(imgSize.mt) + ('x' + ($elm$core$String$fromInt(imgSize.jx) + 'px')))),
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Element$none,
							A2(
								$elm$core$Maybe$map,
								function (fs) {
									return A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$center]),
										$mdgriffith$elm_ui$Element$text(
											$basti1302$elm_human_readable_filesize$Filesize$format(fs)));
								},
								meta.b$)),
							A2(
							$mdgriffith$elm_ui$Element$download,
							_List_Nil,
							{
								O: A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$color(
											A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 1)),
											$mdgriffith$elm_ui$Element$Font$underline
										]),
									$mdgriffith$elm_ui$Element$text('Télécharger')),
								d$: A2($elm$core$String$join, '/', meta.K)
							})
						]));
			});
		var iconSize = 22;
		var noSelectionControlsPanel = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					_Utils_eq(config.h, $author$project$FileExplorer$FileExplorer$Full) ? A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Keyed$el,
							_List_Nil,
							_Utils_Tuple2(
								'newFolder',
								A2(
									$mdgriffith$elm_ui$Element$Input$text,
									_Utils_ap(
										$author$project$Internals$CommonStyleHelpers$textInputStyle,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(195)),
												$mdgriffith$elm_ui$Element$spacing(0)
											])),
									{
										O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
										dJ: $author$project$FileExplorer$FileExplorer$NewFolderInput,
										dO: $elm$core$Maybe$Just(
											A2(
												$mdgriffith$elm_ui$Element$Input$placeholder,
												_List_Nil,
												$mdgriffith$elm_ui$Element$text('Nouveau dossier'))),
										dV: model.bf
									}))),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_Utils_ap(
								$author$project$Internals$CommonStyleHelpers$buttonStyle(model.bf !== ''),
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$alignRight])),
							{
								O: A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$html(
											$author$project$Internals$Icons$folderPlus(iconSize))
										])),
								aI: (model.bf !== '') ? A2(
									$elm$core$Maybe$map,
									$author$project$FileExplorer$FileExplorer$NewFolder(config.h),
									A2(
										$elm$core$Maybe$map,
										$author$project$FileExplorer$FileExplorer$extractFsItem,
										A2($author$project$FileExplorer$FileExplorer$getCurrentFilesys, config.h, model))) : $elm$core$Maybe$Nothing
							})
						])) : $mdgriffith$elm_ui$Element$none,
					function () {
					var _v6 = config.h;
					if (!_v6.$) {
						return $mdgriffith$elm_ui$Element$none;
					} else {
						return A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									_Utils_ap(
										$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$alignLeft])),
									{
										O: A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_Nil,
													$mdgriffith$elm_ui$Element$html(
														$author$project$Internals$Icons$upload(iconSize))),
													$mdgriffith$elm_ui$Element$text('Mettre en ligne')
												])),
										aI: $elm$core$Maybe$Just($author$project$FileExplorer$FileExplorer$ToogleUploadView)
									}),
									_Utils_eq(config.h, $author$project$FileExplorer$FileExplorer$Full) ? A2(
									$mdgriffith$elm_ui$Element$Input$button,
									_Utils_ap(
										$author$project$Internals$CommonStyleHelpers$saveButtonStyle(
											!_Utils_eq(model.bv, $elm$core$Maybe$Nothing)),
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$alignRight])),
									{
										O: A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$text('Coller')
												])),
										aI: (!_Utils_eq(model.bv, $elm$core$Maybe$Nothing)) ? A2(
											$elm$core$Maybe$map,
											A2(
												$elm$core$Basics$composeL,
												$author$project$FileExplorer$FileExplorer$Paste(config.h),
												$author$project$FileExplorer$FileExplorer$extractFsItem),
											A2($author$project$FileExplorer$FileExplorer$getCurrentFilesys, config.h, model)) : $elm$core$Maybe$Nothing
									}) : $mdgriffith$elm_ui$Element$none
								]));
					}
				}()
				]));
		var selectionControlsPanel = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					function () {
					var _v4 = config.h;
					if (!_v4.$) {
						return A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Element$none,
							A2(
								$elm$core$Maybe$map,
								function (s) {
									return A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_Nil,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text(s)
											]));
								},
								A2($elm$core$Maybe$map, $author$project$FileExplorer$FileExplorer$getName, model.o)));
					} else {
						return A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Keyed$el,
									_List_Nil,
									_Utils_Tuple2(
										'rename',
										A2(
											$mdgriffith$elm_ui$Element$Input$text,
											_Utils_ap(
												$author$project$Internals$CommonStyleHelpers$textInputStyle,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$width(
														$mdgriffith$elm_ui$Element$px(195)),
														$mdgriffith$elm_ui$Element$spacing(0)
													])),
											{
												O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
												dJ: $author$project$FileExplorer$FileExplorer$RenameInput,
												dO: A2(
													$elm$core$Maybe$map,
													$mdgriffith$elm_ui$Element$Input$placeholder(
														_List_fromArray(
															[$mdgriffith$elm_ui$Element$clip])),
													A2(
														$elm$core$Maybe$map,
														$mdgriffith$elm_ui$Element$text,
														A2($elm$core$Maybe$map, $author$project$FileExplorer$FileExplorer$getName, model.o))),
												dV: model.bJ
											}))),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$buttonStyle(
										A2(
											$elm$core$Maybe$withDefault,
											false,
											A2(
												$elm$core$Maybe$map,
												function (n) {
													return !_Utils_eq(n, model.bJ);
												},
												A2($elm$core$Maybe$map, $author$project$FileExplorer$FileExplorer$getName, model.o)))),
									{
										O: A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$text('Renommer')
												])),
										aI: (model.bJ !== '') ? A2(
											$elm$core$Maybe$map,
											$author$project$FileExplorer$FileExplorer$Rename(config.h),
											model.o) : $elm$core$Maybe$Nothing
									})
								]));
					}
				}(),
					_Utils_eq(config.h, $author$project$FileExplorer$FileExplorer$Full) ? A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_Utils_ap(
								$author$project$Internals$CommonStyleHelpers$deleteButtonStyle(true),
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$alignLeft])),
							{
								O: A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_Nil,
											$mdgriffith$elm_ui$Element$html(
												$author$project$Internals$Icons$xSquare(iconSize))),
											$mdgriffith$elm_ui$Element$text('Supprimer')
										])),
								aI: A2(
									$elm$core$Maybe$map,
									$author$project$FileExplorer$FileExplorer$Delete(config.h),
									model.o)
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							_Utils_ap(
								$author$project$Internals$CommonStyleHelpers$buttonStyle(
									_Utils_eq(model.bv, $elm$core$Maybe$Nothing)),
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$alignRight])),
							{
								O: A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_Nil,
											$mdgriffith$elm_ui$Element$html(
												$author$project$Internals$Icons$scissors(iconSize))),
											$mdgriffith$elm_ui$Element$text('Couper')
										])),
								aI: function () {
									var _v5 = model.bv;
									if (_v5.$ === 1) {
										return A2($elm$core$Maybe$map, $author$project$FileExplorer$FileExplorer$Cut, model.o);
									} else {
										return $elm$core$Maybe$Nothing;
									}
								}()
							})
						])) : $mdgriffith$elm_ui$Element$none
				]));
		var folderInfoPanel = function (fsItem) {
			var folderInfo = $author$project$FileExplorer$FileExplorer$compileFolderInfo(fsItem);
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$Font$center]),
						$mdgriffith$elm_ui$Element$text(
							$basti1302$elm_human_readable_filesize$Filesize$format(folderInfo.fJ))),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$Font$center]),
						$mdgriffith$elm_ui$Element$text(
							'Nbr fichiers: ' + $elm$core$String$fromInt(folderInfo.ex))),
						$mdgriffith$elm_ui$Element$text(
						'Nbr dossiers: ' + $elm$core$String$fromInt(folderInfo.dI))
					]));
		};
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					(_Utils_eq(
					config.h,
					$author$project$FileExplorer$FileExplorer$ReadOnly(1)) || ((model.b5 === 1) && (!_Utils_eq(config.h, $author$project$FileExplorer$FileExplorer$Full)))) ? $mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(180)) : $mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(330)),
					$mdgriffith$elm_ui$Element$padding(15),
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95)),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$clip
				]),
			function () {
				var _v0 = model.b5;
				if (_v0 === 1) {
					return _List_Nil;
				} else {
					var _v1 = model.o;
					if (_v1.$ === 1) {
						return _List_fromArray(
							[noSelectionControlsPanel]);
					} else {
						var fsItem = _v1.a;
						if (!fsItem.$) {
							var meta = fsItem.a;
							return _List_fromArray(
								[
									selectionControlsPanel,
									folderInfoPanel(fsItem)
								]);
						} else {
							var meta = fsItem.a;
							var _v3 = meta.cA;
							if (!_v3.$) {
								var imgSize = _v3.a;
								return _List_fromArray(
									[
										selectionControlsPanel,
										A2(imagePreviewPanel, meta, imgSize)
									]);
							} else {
								return _List_fromArray(
									[
										selectionControlsPanel,
										regFilePreviewPanel(meta)
									]);
							}
						}
					}
				}
			}());
	});
var $author$project$FileExplorer$FileExplorer$BlockLinks = 1;
var $author$project$FileExplorer$FileExplorer$BulkUpload = 0;
var $author$project$FileExplorer$FileExplorer$Fiches = 2;
var $author$project$FileExplorer$FileExplorer$FilesRequested = function (a) {
	return {$: 16, a: a};
};
var $author$project$FileExplorer$FileExplorer$ImagesRequested = {$: 19};
var $author$project$FileExplorer$FileExplorer$News = 0;
var $author$project$FileExplorer$FileExplorer$SetImageSize = function (a) {
	return {$: 23, a: a};
};
var $author$project$FileExplorer$FileExplorer$SetImageUploadType = function (a) {
	return {$: 14, a: a};
};
var $author$project$FileExplorer$FileExplorer$ManualUpload = function (a) {
	return {$: 25, a: a};
};
var $author$project$FileExplorer$FileExplorer$Reset = {$: 24};
var $author$project$FileExplorer$FileExplorer$itemStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(15),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey7),
		$mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var $author$project$Internals$CommonStyleHelpers$okMark = A2(
	$mdgriffith$elm_ui$Element$el,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Font$bold,
			$mdgriffith$elm_ui$Element$Font$color(
			A3($mdgriffith$elm_ui$Element$rgb255, 92, 184, 92))
		]),
	$mdgriffith$elm_ui$Element$text('✓'));
var $mdgriffith$elm_ui$Element$fillPortion = $mdgriffith$elm_ui$Internal$Model$Fill;
var $mdgriffith$elm_ui$Element$Border$innerShadow = function (almostShade) {
	var shade = {ic: almostShade.ic, iA: almostShade.iA, gD: true, kD: almostShade.kD, fJ: almostShade.fJ};
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$shadows,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			$mdgriffith$elm_ui$Internal$Model$boxShadowClass(shade),
			'box-shadow',
			$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(shade)));
};
var $author$project$Internals$CommonStyleHelpers$progressBar = function (n) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(200)),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(25)),
				$mdgriffith$elm_ui$Element$Border$innerShadow(
				{
					ic: 1,
					iA: A3($mdgriffith$elm_ui$Element$rgb255, 127, 127, 127),
					kD: _Utils_Tuple2(0, 1),
					fJ: 1
				}),
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb255, 245, 245, 245)),
				$mdgriffith$elm_ui$Element$Border$rounded(5),
				$mdgriffith$elm_ui$Element$clip,
				$mdgriffith$elm_ui$Element$inFront(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(200)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(25)),
							$mdgriffith$elm_ui$Element$Font$center
						]),
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
						$mdgriffith$elm_ui$Element$text(
							A2(
								$author$project$Internals$CommonStyleHelpers$strCons,
								'%',
								A3(
									$elm$core$String$padLeft,
									2,
									'0',
									$elm$core$String$fromInt(n)))))))
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$fillPortion(n)),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Background$color(
						(n < 25) ? A3($mdgriffith$elm_ui$Element$rgb255, 217, 83, 79) : ((n < 50) ? A3($mdgriffith$elm_ui$Element$rgb255, 240, 173, 78) : ((n < 75) ? A3($mdgriffith$elm_ui$Element$rgb255, 91, 192, 222) : A3($mdgriffith$elm_ui$Element$rgb255, 92, 184, 92)))),
						$mdgriffith$elm_ui$Element$Font$center
					]),
				$mdgriffith$elm_ui$Element$none),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$fillPortion(100 - n)),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
					]),
				$mdgriffith$elm_ui$Element$none)
			]));
};
var $author$project$Internals$CommonStyleHelpers$teal1 = A3($mdgriffith$elm_ui$Element$rgb255, 18, 69, 68);
var $author$project$FileExplorer$FileExplorer$bulkImageUploadView_ = F2(
	function (config, model) {
		var progress = function (_v11) {
			var sent = _v11.a;
			var size = _v11.b;
			var us = _v11.c;
			var p = $elm$core$Basics$floor((100 * sent) / size);
			return _Utils_eq(
				us,
				$elm$core$Maybe$Just($author$project$Internals$CommonHelpers$UploadSuccessful)) ? 100 : A2($elm$core$Basics$min, 99, p);
		};
		var canEdit = A2(
			$elm$core$List$all,
			function (us) {
				return _Utils_eq(
					us,
					$elm$core$Maybe$Just($author$project$Internals$CommonHelpers$UploadSuccessful));
			},
			A3(
				$elm$core$Dict$foldr,
				F3(
					function (_v9, _v10, acc) {
						var us = _v10.c;
						return A2($elm$core$List$cons, us, acc);
					}),
				_List_Nil,
				model.j));
		var progressTotal = function (t) {
			return canEdit ? 100 : A2($elm$core$Basics$min, 99, t);
		}(
			$elm$core$Basics$round(
				function (_v8) {
					var tsent = _v8.a;
					var tsize = _v8.b;
					return (100 * tsent) / tsize;
				}(
					A3(
						$elm$core$Dict$foldr,
						F3(
							function (k, _v6, _v7) {
								var sent = _v6.a;
								var size = _v6.b;
								var totalSent = _v7.a;
								var totalSize = _v7.b;
								return _Utils_Tuple2(sent + totalSent, size + totalSize);
							}),
						_Utils_Tuple2(0, 0),
						model.j))));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						$author$project$FileExplorer$FileExplorer$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(15)
							])),
					_Utils_ap(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$bold,
										$mdgriffith$elm_ui$Element$Font$size(18)
									]),
								$mdgriffith$elm_ui$Element$text('Mise en ligne')),
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(25)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(140))
											]),
										$mdgriffith$elm_ui$Element$text('Transfert image(s): ')),
										$author$project$Internals$CommonStyleHelpers$progressBar(progressTotal)
									]))
							]),
						A2(
							$elm$core$List$map,
							function (p) {
								return A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(15)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$padding(5),
													$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
													$mdgriffith$elm_ui$Element$Border$rounded(5)
												]),
											A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$width(
														$mdgriffith$elm_ui$Element$px(140)),
														$mdgriffith$elm_ui$Element$height(
														$mdgriffith$elm_ui$Element$px(105)),
														$mdgriffith$elm_ui$Element$centerX,
														$mdgriffith$elm_ui$Element$Background$uncropped(p.iI),
														$mdgriffith$elm_ui$Element$alignLeft
													]),
												$mdgriffith$elm_ui$Element$none)),
											A2(
											$mdgriffith$elm_ui$Element$column,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$alignTop,
													$mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal1)
														]),
													$mdgriffith$elm_ui$Element$text(p.E)),
													$mdgriffith$elm_ui$Element$text(
													'Taille originale: ' + A2(
														$elm$core$Maybe$withDefault,
														'Erreur',
														A2(
															$elm$core$Maybe$map,
															$basti1302$elm_human_readable_filesize$Filesize$format,
															A2($elm$core$Dict$get, p.E, model.b0)))),
													$mdgriffith$elm_ui$Element$text(
													'Nouvelle taille: ' + $basti1302$elm_human_readable_filesize$Filesize$format(p.fJ)),
													A2(
													$mdgriffith$elm_ui$Element$row,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$spacing(15)
														]),
													_List_fromArray(
														[
															function () {
															var _v0 = A2($elm$core$Dict$get, p.E, model.j);
															if (((!_v0.$) && (!_v0.a.c.$)) && (_v0.a.c.a.$ === 1)) {
																var _v1 = _v0.a;
																var e = _v1.c.a.a;
																return A2(
																	$mdgriffith$elm_ui$Element$row,
																	_List_fromArray(
																		[
																			$mdgriffith$elm_ui$Element$spacing(5)
																		]),
																	_List_fromArray(
																		[
																			$mdgriffith$elm_ui$Element$text('Echec transfert: '),
																			A2(
																			$mdgriffith$elm_ui$Element$el,
																			_List_fromArray(
																				[
																					$mdgriffith$elm_ui$Element$Font$color(
																					A3($mdgriffith$elm_ui$Element$rgb255, 217, 83, 79))
																				]),
																			$mdgriffith$elm_ui$Element$text(e))
																		]));
															} else {
																return $mdgriffith$elm_ui$Element$text(
																	'Transfert: ' + A2(
																		$author$project$Internals$CommonStyleHelpers$strCons,
																		'%',
																		A3(
																			$elm$core$String$padLeft,
																			2,
																			'0',
																			$elm$core$String$fromInt(
																				A2(
																					$elm$core$Maybe$withDefault,
																					0,
																					A2(
																						$elm$core$Maybe$map,
																						progress,
																						A2($elm$core$Dict$get, p.E, model.j)))))));
															}
														}(),
															function () {
															var _v2 = A2($elm$core$Dict$get, p.E, model.j);
															if ((!_v2.$) && (!_v2.a.c.$)) {
																if (_v2.a.c.a.$ === 1) {
																	var _v3 = _v2.a;
																	var e = _v3.c.a.a;
																	return A2(
																		$mdgriffith$elm_ui$Element$Input$button,
																		$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
																		{
																			O: $mdgriffith$elm_ui$Element$text('Réessayer'),
																			aI: $elm$core$Maybe$Just(
																				$author$project$FileExplorer$FileExplorer$ManualUpload(p.E))
																		});
																} else {
																	var _v4 = _v2.a;
																	var _v5 = _v4.c.a;
																	return $author$project$Internals$CommonStyleHelpers$okMark;
																}
															} else {
																return $mdgriffith$elm_ui$Element$none;
															}
														}()
														]))
												]))
										]));
							},
							$elm$core$Dict$values(model.a_)))),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						$author$project$FileExplorer$FileExplorer$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Retour'),
								aI: $elm$core$Maybe$Just($author$project$FileExplorer$FileExplorer$Reset)
							})
						]))
				]));
	});
var $author$project$FileExplorer$FileExplorer$ManualFileUpload = function (a) {
	return {$: 18, a: a};
};
var $author$project$FileExplorer$FileExplorer$bulkUploadView_ = F2(
	function (config, model) {
		var progress = function (_v9) {
			var sent = _v9.a;
			var size = _v9.b;
			var us = _v9.c;
			var p = $elm$core$Basics$floor((100 * sent) / size);
			return _Utils_eq(
				us,
				$elm$core$Maybe$Just($author$project$Internals$CommonHelpers$UploadSuccessful)) ? 100 : A2($elm$core$Basics$min, 99, p);
		};
		var canEdit = A2(
			$elm$core$List$all,
			function (us) {
				return _Utils_eq(
					us,
					$elm$core$Maybe$Just($author$project$Internals$CommonHelpers$UploadSuccessful));
			},
			A3(
				$elm$core$Dict$foldr,
				F3(
					function (_v7, _v8, acc) {
						var us = _v8.c;
						return A2($elm$core$List$cons, us, acc);
					}),
				_List_Nil,
				model.j));
		var progressTotal = function (t) {
			return canEdit ? 100 : A2($elm$core$Basics$min, 99, t);
		}(
			$elm$core$Basics$round(
				function (_v6) {
					var tsent = _v6.a;
					var tsize = _v6.b;
					return (100 * tsent) / tsize;
				}(
					A3(
						$elm$core$Dict$foldr,
						F3(
							function (k, _v4, _v5) {
								var sent = _v4.a;
								var size = _v4.b;
								var totalSent = _v5.a;
								var totalSize = _v5.b;
								return _Utils_Tuple2(sent + totalSent, size + totalSize);
							}),
						_Utils_Tuple2(0, 0),
						model.j))));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						$author$project$FileExplorer$FileExplorer$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(15)
							])),
					_Utils_ap(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$bold,
										$mdgriffith$elm_ui$Element$Font$size(18)
									]),
								$mdgriffith$elm_ui$Element$text('Mise en ligne')),
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(25)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(140))
											]),
										$mdgriffith$elm_ui$Element$text('Transfert fichier(s): ')),
										$author$project$Internals$CommonStyleHelpers$progressBar(progressTotal)
									]))
							]),
						$elm$core$Dict$values(
							A2(
								$elm$core$Dict$map,
								F2(
									function (filename, _v0) {
										var sent = _v0.a;
										var size = _v0.b;
										var uploadStatus = _v0.c;
										return A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$spacing(15)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$column,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$alignTop,
															$mdgriffith$elm_ui$Element$spacing(10)
														]),
													_List_fromArray(
														[
															A2(
															$mdgriffith$elm_ui$Element$el,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal1)
																]),
															$mdgriffith$elm_ui$Element$text(filename)),
															A2(
															$mdgriffith$elm_ui$Element$row,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$spacing(15)
																]),
															_List_fromArray(
																[
																	function () {
																	if ((!uploadStatus.$) && (uploadStatus.a.$ === 1)) {
																		var e = uploadStatus.a.a;
																		return A2(
																			$mdgriffith$elm_ui$Element$row,
																			_List_fromArray(
																				[
																					$mdgriffith$elm_ui$Element$spacing(5)
																				]),
																			_List_fromArray(
																				[
																					$mdgriffith$elm_ui$Element$text('Echec transfert: '),
																					A2(
																					$mdgriffith$elm_ui$Element$el,
																					_List_fromArray(
																						[
																							$mdgriffith$elm_ui$Element$Font$color(
																							A3($mdgriffith$elm_ui$Element$rgb255, 217, 83, 79))
																						]),
																					$mdgriffith$elm_ui$Element$text(e))
																				]));
																	} else {
																		return $mdgriffith$elm_ui$Element$text(
																			'Transfert: ' + A2(
																				$author$project$Internals$CommonStyleHelpers$strCons,
																				'%',
																				A3(
																					$elm$core$String$padLeft,
																					2,
																					'0',
																					$elm$core$String$fromInt(
																						progress(
																							_Utils_Tuple3(sent, size, uploadStatus))))));
																	}
																}(),
																	function () {
																	if (!uploadStatus.$) {
																		if (uploadStatus.a.$ === 1) {
																			var e = uploadStatus.a.a;
																			return A2(
																				$mdgriffith$elm_ui$Element$Input$button,
																				$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
																				{
																					O: $mdgriffith$elm_ui$Element$text('Réessayer'),
																					aI: $elm$core$Maybe$Just(
																						$author$project$FileExplorer$FileExplorer$ManualFileUpload(filename))
																				});
																		} else {
																			var _v3 = uploadStatus.a;
																			return $author$project$Internals$CommonStyleHelpers$okMark;
																		}
																	} else {
																		return $mdgriffith$elm_ui$Element$none;
																	}
																}()
																]))
														]))
												]));
									}),
								model.j)))),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						$author$project$FileExplorer$FileExplorer$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Retour'),
								aI: $elm$core$Maybe$Just($author$project$FileExplorer$FileExplorer$Reset)
							})
						]))
				]));
	});
var $author$project$FileExplorer$FileExplorer$FileRead = function (a) {
	return {$: 29, a: a};
};
var $author$project$FileExplorer$FileExplorer$ImageRead = function (a) {
	return {$: 30, a: a};
};
var $author$project$FileExplorer$FileExplorer$ImageFromFile = F5(
	function (contents, filename, width, height, filesize) {
		return {cv: contents, E: filename, cB: filesize, jx: height, mt: width};
	});
var $author$project$FileExplorer$FileExplorer$decodeImageData = function (msg) {
	return A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['target', 'fileData']),
		A2(
			$elm$json$Json$Decode$map,
			msg,
			A6(
				$elm$json$Json$Decode$map5,
				$author$project$FileExplorer$FileExplorer$ImageFromFile,
				A2($elm$json$Json$Decode$field, 'contents', $elm$json$Json$Decode$string),
				A2($elm$json$Json$Decode$field, 'filename', $elm$json$Json$Decode$string),
				A2($elm$json$Json$Decode$field, 'width', $elm$json$Json$Decode$int),
				A2($elm$json$Json$Decode$field, 'height', $elm$json$Json$Decode$int),
				A2($elm$json$Json$Decode$field, 'filesize', $elm$json$Json$Decode$int))));
};
var $author$project$FileExplorer$FileExplorer$ResetImageController = {$: 37};
var $author$project$FileExplorer$FileExplorer$Resize = function (a) {
	return {$: 34, a: a};
};
var $author$project$FileExplorer$FileExplorer$RotateLeft = {$: 33};
var $author$project$FileExplorer$FileExplorer$RotateRight = {$: 32};
var $author$project$FileExplorer$FileExplorer$SetFilename = function (a) {
	return {$: 36, a: a};
};
var $author$project$FileExplorer$FileExplorer$SetResize = {$: 35};
var $author$project$FileExplorer$FileExplorer$UploadImage = function (a) {
	return {$: 15, a: a};
};
var $mdgriffith$elm_ui$Element$Input$Thumb = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Element$Input$defaultThumb = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$width(
		$mdgriffith$elm_ui$Element$px(16)),
		$mdgriffith$elm_ui$Element$height(
		$mdgriffith$elm_ui$Element$px(16)),
		$mdgriffith$elm_ui$Element$Border$rounded(8),
		$mdgriffith$elm_ui$Element$Border$width(1),
		$mdgriffith$elm_ui$Element$Border$color(
		A3($mdgriffith$elm_ui$Element$rgb, 0.5, 0.5, 0.5)),
		$mdgriffith$elm_ui$Element$Background$color(
		A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
	]);
var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty('alt');
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $mdgriffith$elm_ui$Element$image = F2(
	function (attrs, _v0) {
		var src = _v0.fK;
		var description = _v0.ei;
		var imageAttributes = A2(
			$elm$core$List$filter,
			function (a) {
				switch (a.$) {
					case 7:
						return true;
					case 8:
						return true;
					default:
						return false;
				}
			},
			attrs);
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.jG),
				attrs),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('img'),
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$src(src)),
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$alt(description))
								]),
							imageAttributes),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil))
					])));
	});
var $author$project$Internals$Icons$rotateCcw = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'rotate-ccw',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('1 4 1 10 7 10')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M3.51 15a9 9 0 1 0 2.13-9.36L1 10')
					]),
				_List_Nil)
			]));
};
var $author$project$Internals$Icons$rotateCw = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'rotate-cw',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('23 4 23 10 17 10')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M20.49 15a9 9 0 1 1-2.12-9.36L23 10')
					]),
				_List_Nil)
			]));
};
var $mdgriffith$elm_ui$Element$scrollbars = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.lf);
var $mdgriffith$elm_ui$Internal$Flag$active = $mdgriffith$elm_ui$Internal$Flag$flag(32);
var $mdgriffith$elm_ui$Internal$Model$getHeight = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, acc) {
				if (!acc.$) {
					var x = acc.a;
					return $elm$core$Maybe$Just(x);
				} else {
					if (attr.$ === 8) {
						var len = attr.a;
						return $elm$core$Maybe$Just(len);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}
			}),
		$elm$core$Maybe$Nothing,
		attrs);
};
var $mdgriffith$elm_ui$Internal$Model$getSpacing = F2(
	function (attrs, _default) {
		return A2(
			$elm$core$Maybe$withDefault,
			_default,
			A3(
				$elm$core$List$foldr,
				F2(
					function (attr, acc) {
						if (!acc.$) {
							var x = acc.a;
							return $elm$core$Maybe$Just(x);
						} else {
							if ((attr.$ === 4) && (attr.b.$ === 5)) {
								var _v2 = attr.b;
								var x = _v2.b;
								var y = _v2.c;
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(x, y));
							} else {
								return $elm$core$Maybe$Nothing;
							}
						}
					}),
				$elm$core$Maybe$Nothing,
				attrs));
	});
var $mdgriffith$elm_ui$Internal$Model$getWidth = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (attr, acc) {
				if (!acc.$) {
					var x = acc.a;
					return $elm$core$Maybe$Just(x);
				} else {
					if (attr.$ === 7) {
						var len = attr.a;
						return $elm$core$Maybe$Just(len);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}
			}),
		$elm$core$Maybe$Nothing,
		attrs);
};
var $elm$html$Html$Attributes$max = $elm$html$Html$Attributes$stringProperty('max');
var $elm$html$Html$Attributes$min = $elm$html$Html$Attributes$stringProperty('min');
var $mdgriffith$elm_ui$Element$spacingXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$spacing,
			A3(
				$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
				A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, y),
				x,
				y));
	});
var $elm$html$Html$Attributes$step = function (n) {
	return A2($elm$html$Html$Attributes$stringProperty, 'step', n);
};
var $mdgriffith$elm_ui$Internal$Model$mapAttr = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 0:
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 2:
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 6:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 5:
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 7:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 8:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 3:
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 4:
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 9:
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 1:
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Element$Input$viewHorizontalThumb = F3(
	function (factor, thumbAttributes, trackHeight) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackHeight)),
					$mdgriffith$elm_ui$Element$centerY
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(factor * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$centerY,
						A2(
							$elm$core$List$map,
							$mdgriffith$elm_ui$Internal$Model$mapAttr($elm$core$Basics$never),
							thumbAttributes)),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(
									$elm$core$Basics$abs(1 - factor) * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	});
var $mdgriffith$elm_ui$Element$Input$viewVerticalThumb = F3(
	function (factor, thumbAttributes, trackWidth) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width(
					A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
					$mdgriffith$elm_ui$Element$centerX
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(
									$elm$core$Basics$abs(1 - factor) * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$centerX,
						A2(
							$elm$core$List$map,
							$mdgriffith$elm_ui$Internal$Model$mapAttr($elm$core$Basics$never),
							thumbAttributes)),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$fillPortion(
								$elm$core$Basics$round(factor * 10000)))
						]),
					$mdgriffith$elm_ui$Element$none)
				]));
	});
var $mdgriffith$elm_ui$Element$Input$slider = F2(
	function (attributes, input) {
		var trackWidth = $mdgriffith$elm_ui$Internal$Model$getWidth(attributes);
		var trackHeight = $mdgriffith$elm_ui$Internal$Model$getHeight(attributes);
		var vertical = function () {
			var _v8 = _Utils_Tuple2(trackWidth, trackHeight);
			_v8$3:
			while (true) {
				if (_v8.a.$ === 1) {
					if (_v8.b.$ === 1) {
						var _v9 = _v8.a;
						var _v10 = _v8.b;
						return false;
					} else {
						break _v8$3;
					}
				} else {
					if ((!_v8.a.a.$) && (!_v8.b.$)) {
						switch (_v8.b.a.$) {
							case 0:
								var w = _v8.a.a.a;
								var h = _v8.b.a.a;
								return _Utils_cmp(h, w) > 0;
							case 2:
								return true;
							default:
								break _v8$3;
						}
					} else {
						break _v8$3;
					}
				}
			}
			return false;
		}();
		var factor = (input.hG - input.kg) / (input.kd - input.kg);
		var _v0 = input.mf;
		var thumbAttributes = _v0;
		var height = $mdgriffith$elm_ui$Internal$Model$getHeight(thumbAttributes);
		var thumbHeightString = function () {
			if (height.$ === 1) {
				return '20px';
			} else {
				if (!height.a.$) {
					var px = height.a.a;
					return $elm$core$String$fromInt(px) + 'px';
				} else {
					return '100%';
				}
			}
		}();
		var width = $mdgriffith$elm_ui$Internal$Model$getWidth(thumbAttributes);
		var thumbWidthString = function () {
			if (width.$ === 1) {
				return '20px';
			} else {
				if (!width.a.$) {
					var px = width.a.a;
					return $elm$core$String$fromInt(px) + 'px';
				} else {
					return '100%';
				}
			}
		}();
		var className = 'thmb-' + (thumbWidthString + ('-' + thumbHeightString));
		var thumbShadowStyle = _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', thumbWidthString),
				A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', thumbHeightString)
			]);
		var _v1 = A2(
			$mdgriffith$elm_ui$Internal$Model$getSpacing,
			attributes,
			_Utils_Tuple2(5, 5));
		var spacingX = _v1.a;
		var spacingY = _v1.b;
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(input.O) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : A2($mdgriffith$elm_ui$Element$spacingXY, spacingX, spacingY),
					$mdgriffith$elm_ui$Element$Region$announce,
					$mdgriffith$elm_ui$Element$width(
					function () {
						if (trackWidth.$ === 1) {
							return $mdgriffith$elm_ui$Element$fill;
						} else {
							if (!trackWidth.a.$) {
								return $mdgriffith$elm_ui$Element$shrink;
							} else {
								var x = trackWidth.a;
								return x;
							}
						}
					}()),
					$mdgriffith$elm_ui$Element$height(
					function () {
						if (trackHeight.$ === 1) {
							return $mdgriffith$elm_ui$Element$shrink;
						} else {
							if (!trackHeight.a.$) {
								return $mdgriffith$elm_ui$Element$shrink;
							} else {
								var x = trackHeight.a;
								return x;
							}
						}
					}())
				]),
			input.O,
			A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
						$mdgriffith$elm_ui$Element$height(
						A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Element$px(20),
							trackHeight))
					]),
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('input'),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.O),
								A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$active,
								A2($mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-moz-range-thumb'), thumbShadowStyle)),
								A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$hover,
								A2($mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-webkit-slider-thumb'), thumbShadowStyle)),
								A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$focus,
								A2($mdgriffith$elm_ui$Internal$Model$Style, 'input[type=\"range\"].' + (className + '::-ms-thumb'), thumbShadowStyle)),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$class(className + ' focusable-parent')),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Events$onInput(
									function (str) {
										var _v4 = $elm$core$String$toFloat(str);
										if (_v4.$ === 1) {
											return input.dJ(0);
										} else {
											var val = _v4.a;
											return input.dJ(val);
										}
									})),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_('range')),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$step(
									function () {
										var _v5 = input.lO;
										if (_v5.$ === 1) {
											return 'any';
										} else {
											var step = _v5.a;
											return $elm$core$String$fromFloat(step);
										}
									}())),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$min(
									$elm$core$String$fromFloat(input.kg))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$max(
									$elm$core$String$fromFloat(input.kd))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$value(
									$elm$core$String$fromFloat(input.hG))),
								vertical ? $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'orient', 'vertical')) : $mdgriffith$elm_ui$Internal$Model$NoAttribute,
								$mdgriffith$elm_ui$Element$width(
								vertical ? A2(
									$elm$core$Maybe$withDefault,
									$mdgriffith$elm_ui$Element$px(20),
									trackHeight) : A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
								$mdgriffith$elm_ui$Element$height(
								vertical ? A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth) : A2(
									$elm$core$Maybe$withDefault,
									$mdgriffith$elm_ui$Element$px(20),
									trackHeight))
							]),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil)),
						A2(
						$mdgriffith$elm_ui$Element$el,
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width(
								A2($elm$core$Maybe$withDefault, $mdgriffith$elm_ui$Element$fill, trackWidth)),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height(
									A2(
										$elm$core$Maybe$withDefault,
										$mdgriffith$elm_ui$Element$px(20),
										trackHeight)),
								_Utils_ap(
									attributes,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$behindContent(
											vertical ? A3($mdgriffith$elm_ui$Element$Input$viewVerticalThumb, factor, thumbAttributes, trackWidth) : A3($mdgriffith$elm_ui$Element$Input$viewHorizontalThumb, factor, thumbAttributes, trackHeight))
										])))),
						$mdgriffith$elm_ui$Element$none)
					])));
	});
var $author$project$FileExplorer$FileExplorer$editView = F2(
	function (config, model) {
		var iconSize = 18;
		var _v0 = _Utils_Tuple3(model.bG, model.aY, model.aX);
		if (((!_v0.a.$) && (!_v0.b.$)) && (!_v0.c.$)) {
			var f = _v0.a.a;
			var oriW = _v0.b.a;
			var oriH = _v0.c.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(10),
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(500))
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$Input$text,
										$author$project$Internals$CommonStyleHelpers$textInputStyle,
										{
											O: A2(
												$mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$centerY]),
												A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$width(
															$mdgriffith$elm_ui$Element$px(110))
														]),
													$mdgriffith$elm_ui$Element$text('Nom de fichier: '))),
											dJ: $author$project$FileExplorer$FileExplorer$SetFilename,
											dO: $elm$core$Maybe$Nothing,
											dV: A2($elm$core$Maybe$withDefault, f.E, model.c1)
										})
									])),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$html(
											$author$project$Internals$Icons$rotateCcw(iconSize))),
									aI: $elm$core$Maybe$Just($author$project$FileExplorer$FileExplorer$RotateLeft)
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$html(
											$author$project$Internals$Icons$rotateCw(iconSize))),
									aI: $elm$core$Maybe$Just($author$project$FileExplorer$FileExplorer$RotateRight)
								})
							])),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(10),
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(500))
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(110))
											]),
										$mdgriffith$elm_ui$Element$text('Dimensions: ')),
										A2(
										$mdgriffith$elm_ui$Element$Input$slider,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(30)),
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(250)),
												$mdgriffith$elm_ui$Element$behindContent(
												A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
															$mdgriffith$elm_ui$Element$height(
															$mdgriffith$elm_ui$Element$px(2)),
															$mdgriffith$elm_ui$Element$centerY,
															$mdgriffith$elm_ui$Element$Background$color(
															A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9)),
															$mdgriffith$elm_ui$Element$Border$rounded(2)
														]),
													$mdgriffith$elm_ui$Element$none))
											]),
										{
											O: A2(
												$mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$centerY]),
												$mdgriffith$elm_ui$Element$none),
											kd: 100,
											kg: 0,
											dJ: $author$project$FileExplorer$FileExplorer$Resize,
											lO: $elm$core$Maybe$Just(1),
											mf: $mdgriffith$elm_ui$Element$Input$defaultThumb,
											hG: model.di
										}),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(100))
											]),
										$mdgriffith$elm_ui$Element$text(
											A2(
												$elm$core$Maybe$withDefault,
												$elm$core$String$fromInt(oriW),
												A2($elm$core$Maybe$map, $elm$core$String$fromInt, model.aP)) + ('x' + A2(
												$elm$core$Maybe$withDefault,
												$elm$core$String$fromInt(oriH),
												A2($elm$core$Maybe$map, $elm$core$String$fromInt, model.aN)))))
									])),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(model.bT),
								{
									O: $mdgriffith$elm_ui$Element$text('Redimensionner'),
									aI: model.bT ? $elm$core$Maybe$Just($author$project$FileExplorer$FileExplorer$SetResize) : $elm$core$Maybe$Nothing
								})
							])),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Taille originale: ')),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text(
											A2(
												$elm$core$Maybe$withDefault,
												'Erreur',
												A2($elm$core$Maybe$map, $basti1302$elm_human_readable_filesize$Filesize$format, model.da))))
									])),
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Taille actuelle: ')),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text(
											A2(
												$elm$core$Maybe$withDefault,
												'Erreur',
												A2(
													$elm$core$Maybe$map,
													$basti1302$elm_human_readable_filesize$Filesize$format,
													A2(
														$elm$core$Maybe$map,
														function ($) {
															return $.cB;
														},
														model.bG)))))
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: $mdgriffith$elm_ui$Element$text('Nouveau fichier'),
									aI: $elm$core$Maybe$Just($author$project$FileExplorer$FileExplorer$ResetImageController)
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: $mdgriffith$elm_ui$Element$text('Retour'),
									aI: $elm$core$Maybe$Just($author$project$FileExplorer$FileExplorer$ToogleUploadView)
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$saveButtonStyle(true),
								{
									O: $mdgriffith$elm_ui$Element$text('Valider et envoyer'),
									aI: A2(
										$elm$core$Maybe$map,
										$author$project$FileExplorer$FileExplorer$UploadImage,
										A2(
											$elm$core$Maybe$map,
											$author$project$FileExplorer$FileExplorer$extractFsItem,
											A2($author$project$FileExplorer$FileExplorer$getCurrentFilesys, config.h, model)))
								})
							])),
						$mdgriffith$elm_ui$Element$text('Aperçu: '),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								A2($mdgriffith$elm_ui$Element$maximum, 650, $mdgriffith$elm_ui$Element$fill)),
								$mdgriffith$elm_ui$Element$height(
								A2($mdgriffith$elm_ui$Element$maximum, 550, $mdgriffith$elm_ui$Element$fill)),
								$mdgriffith$elm_ui$Element$scrollbars
							]),
						A2(
							$mdgriffith$elm_ui$Element$image,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerY, $mdgriffith$elm_ui$Element$centerX]),
							{ei: f.E, fK: f.cv}))
					]));
		} else {
			return $mdgriffith$elm_ui$Element$text('no file data');
		}
	});
var $author$project$FileExplorer$FileExplorer$fileReaderView = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(15)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text('Charger une image depuis votre PC: '))
					]))
			]));
};
var $elm$html$Html$Attributes$hidden = $elm$html$Html$Attributes$boolProperty('hidden');
var $elm$html$Html$input = _VirtualDom_node('input');
var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
var $author$project$FileExplorer$FileExplorer$imageController = function (attributes) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_Nil,
		$mdgriffith$elm_ui$Element$html(
			A3(
				$elm$html$Html$node,
				'image-controller',
				attributes,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$input,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$type_('file')
							]),
						_List_Nil)
					]))));
};
var $author$project$Internals$CommonStyleHelpers$noHtmlAttr = $elm$html$Html$Attributes$class('');
var $elm$html$Html$Attributes$property = $elm$virtual_dom$VirtualDom$property;
var $author$project$FileExplorer$FileExplorer$imageControllerView = F3(
	function (config, model, imgContMode) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$Font$size(16),
					$mdgriffith$elm_ui$Element$padding(15),
					$mdgriffith$elm_ui$Element$alignTop
				]),
			_List_fromArray(
				[
					function () {
					if (!imgContMode) {
						return $author$project$FileExplorer$FileExplorer$fileReaderView(model);
					} else {
						return A2($author$project$FileExplorer$FileExplorer$editView, config, model);
					}
				}(),
					$author$project$FileExplorer$FileExplorer$imageController(
					_Utils_ap(
						_List_fromArray(
							[
								A2(
								$elm$html$Html$Events$on,
								'fileRead',
								$author$project$FileExplorer$FileExplorer$decodeImageData($author$project$FileExplorer$FileExplorer$FileRead)),
								A2(
								$elm$html$Html$Events$on,
								'imageRead',
								$author$project$FileExplorer$FileExplorer$decodeImageData($author$project$FileExplorer$FileExplorer$ImageRead)),
								(!(!imgContMode)) ? $elm$html$Html$Attributes$hidden(true) : $author$project$Internals$CommonStyleHelpers$noHtmlAttr,
								model.b9 ? A2(
								$elm$html$Html$Attributes$property,
								'rotationAngle',
								$elm$json$Json$Encode$int(model.aO)) : $author$project$Internals$CommonStyleHelpers$noHtmlAttr
							]),
						model.b8 ? _List_fromArray(
							[
								A2(
								$elm$core$Maybe$withDefault,
								$author$project$Internals$CommonStyleHelpers$noHtmlAttr,
								A2(
									$elm$core$Maybe$map,
									function (val) {
										return A2($elm$html$Html$Attributes$property, 'desiredSize', val);
									},
									A2(
										$elm$core$Maybe$map,
										function (h) {
											return $elm$json$Json$Encode$int(h);
										},
										((model.aO === 90) || (model.aO === 270)) ? model.aP : model.aN)))
							]) : _List_Nil)),
					function () {
					if (!imgContMode) {
						return A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Retour'),
								aI: $elm$core$Maybe$Just($author$project$FileExplorer$FileExplorer$ToogleUploadView)
							});
					} else {
						return $mdgriffith$elm_ui$Element$none;
					}
				}()
				]));
	});
var $author$project$FileExplorer$FileExplorer$GoToUpload = {$: 26};
var $author$project$FileExplorer$FileExplorer$imageProcessingView = F2(
	function (config, model) {
		var canUpload = _Utils_eq(
			$elm$core$Dict$size(model.b0),
			$elm$core$Dict$size(model.a_));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						$author$project$FileExplorer$FileExplorer$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(15)
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('Chargement et mise à  l\'échelle des images...')),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text(
										A3(
											$elm$core$Basics$apR,
											A3(
												$elm$core$String$padLeft,
												2,
												'0',
												$elm$core$String$fromInt(
													$elm$core$Dict$size(model.b0))),
											$author$project$Internals$CommonStyleHelpers$strCons,
											A2(
												$author$project$Internals$CommonStyleHelpers$strCons,
												' \\ ',
												A3(
													$elm$core$String$padLeft,
													2,
													'0',
													$elm$core$String$fromInt(
														$elm$core$Dict$size(model.a_))))))),
									canUpload ? $author$project$Internals$CommonStyleHelpers$okMark : $mdgriffith$elm_ui$Element$none
								]))
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						$author$project$FileExplorer$FileExplorer$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Annuler'),
								aI: $elm$core$Maybe$Just($author$project$FileExplorer$FileExplorer$Reset)
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(canUpload),
							{
								O: $mdgriffith$elm_ui$Element$text('Continuer'),
								aI: canUpload ? $elm$core$Maybe$Just($author$project$FileExplorer$FileExplorer$GoToUpload) : $elm$core$Maybe$Nothing
							})
						]))
				]));
	});
var $mdgriffith$elm_ui$Element$Input$Option = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Input$defaultRadioOption = F2(
	function (optionLabel, status) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(14)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(14)),
							$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
							$mdgriffith$elm_ui$Element$Border$rounded(7),
							function () {
							if (status === 2) {
								return $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
							} else {
								return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
							}
						}(),
							$mdgriffith$elm_ui$Element$Border$width(
							function () {
								switch (status) {
									case 0:
										return 1;
									case 1:
										return 1;
									default:
										return 5;
								}
							}()),
							$mdgriffith$elm_ui$Element$Border$color(
							function () {
								switch (status) {
									case 0:
										return A3($mdgriffith$elm_ui$Element$rgb, 208 / 255, 208 / 255, 208 / 255);
									case 1:
										return A3($mdgriffith$elm_ui$Element$rgb, 208 / 255, 208 / 255, 208 / 255);
									default:
										return A3($mdgriffith$elm_ui$Element$rgb, 59 / 255, 153 / 255, 252 / 255);
								}
							}())
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Internal$Model$htmlClass('unfocusable')
						]),
					optionLabel)
				]));
	});
var $mdgriffith$elm_ui$Element$Input$option = F2(
	function (val, txt) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$Option,
			val,
			$mdgriffith$elm_ui$Element$Input$defaultRadioOption(txt));
	});
var $mdgriffith$elm_ui$Element$Input$Row = 0;
var $mdgriffith$elm_ui$Element$Input$AfterFound = 2;
var $mdgriffith$elm_ui$Element$Input$BeforeFound = 1;
var $mdgriffith$elm_ui$Element$Input$Idle = 0;
var $mdgriffith$elm_ui$Element$Input$NotFound = 0;
var $mdgriffith$elm_ui$Element$Input$Selected = 2;
var $mdgriffith$elm_ui$Element$Input$column = F2(
	function (attributes, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					attributes)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$Input$downArrow = 'ArrowDown';
var $mdgriffith$elm_ui$Internal$Model$filter = function (attrs) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (x, _v0) {
				var found = _v0.a;
				var has = _v0.b;
				switch (x.$) {
					case 0:
						return _Utils_Tuple2(found, has);
					case 3:
						var key = x.a;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 1:
						var attr = x.a;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 4:
						var style = x.b;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 7:
						var width = x.a;
						return A2($elm$core$Set$member, 'width', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'width', has));
					case 8:
						var height = x.a;
						return A2($elm$core$Set$member, 'height', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'height', has));
					case 2:
						var description = x.a;
						return A2($elm$core$Set$member, 'described', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'described', has));
					case 9:
						var location = x.a;
						var elem = x.b;
						return _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							has);
					case 6:
						return A2($elm$core$Set$member, 'align-x', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'align-x', has));
					case 5:
						return A2($elm$core$Set$member, 'align-y', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'align-y', has));
					default:
						return A2($elm$core$Set$member, 'transform', has) ? _Utils_Tuple2(found, has) : _Utils_Tuple2(
							A2($elm$core$List$cons, x, found),
							A2($elm$core$Set$insert, 'transform', has));
				}
			}),
		_Utils_Tuple2(_List_Nil, $elm$core$Set$empty),
		attrs).a;
};
var $mdgriffith$elm_ui$Internal$Model$get = F2(
	function (attrs, isAttr) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, found) {
					return isAttr(x) ? A2($elm$core$List$cons, x, found) : found;
				}),
			_List_Nil,
			$mdgriffith$elm_ui$Internal$Model$filter(attrs));
	});
var $mdgriffith$elm_ui$Element$Input$leftArrow = 'ArrowLeft';
var $mdgriffith$elm_ui$Element$Input$onKeyLookup = function (lookup) {
	var decode = function (code) {
		var _v0 = lookup(code);
		if (_v0.$ === 1) {
			return $elm$json$Json$Decode$fail('No key matched');
		} else {
			var msg = _v0.a;
			return $elm$json$Json$Decode$succeed(msg);
		}
	};
	var isKey = A2(
		$elm$json$Json$Decode$andThen,
		decode,
		A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2($elm$html$Html$Events$on, 'keyup', isKey));
};
var $mdgriffith$elm_ui$Element$Input$rightArrow = 'ArrowRight';
var $mdgriffith$elm_ui$Element$Input$row = F2(
	function (attributes, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				attributes),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Element$Input$space = ' ';
var $mdgriffith$elm_ui$Element$Input$tabindex = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$tabindex);
var $mdgriffith$elm_ui$Element$Input$upArrow = 'ArrowUp';
var $mdgriffith$elm_ui$Element$Input$radioHelper = F3(
	function (orientation, attrs, input) {
		var track = F2(
			function (opt, _v14) {
				var found = _v14.a;
				var prev = _v14.b;
				var nxt = _v14.c;
				var val = opt.a;
				switch (found) {
					case 0:
						return _Utils_eq(
							$elm$core$Maybe$Just(val),
							input.hm) ? _Utils_Tuple3(1, prev, nxt) : _Utils_Tuple3(found, val, nxt);
					case 1:
						return _Utils_Tuple3(2, prev, val);
					default:
						return _Utils_Tuple3(found, prev, nxt);
				}
			});
		var renderOption = function (_v11) {
			var val = _v11.a;
			var view = _v11.b;
			var status = _Utils_eq(
				$elm$core$Maybe$Just(val),
				input.hm) ? 2 : 0;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$pointer,
						function () {
						if (!orientation) {
							return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink);
						} else {
							return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill);
						}
					}(),
						$mdgriffith$elm_ui$Element$Events$onClick(
						input.dJ(val)),
						function () {
						if (status === 2) {
							return $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'aria-checked', 'true'));
						} else {
							return $mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'aria-checked', 'false'));
						}
					}(),
						$mdgriffith$elm_ui$Internal$Model$Attr(
						A2($elm$html$Html$Attributes$attribute, 'role', 'radio'))
					]),
				view(status));
		};
		var prevNext = function () {
			var _v5 = input.g2;
			if (!_v5.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var _v6 = _v5.a;
				var val = _v6.a;
				return function (_v7) {
					var found = _v7.a;
					var b = _v7.b;
					var a = _v7.c;
					switch (found) {
						case 0:
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, val));
						case 1:
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, val));
						default:
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(b, a));
					}
				}(
					A3(
						$elm$core$List$foldl,
						track,
						_Utils_Tuple3(0, val, val),
						input.g2));
			}
		}();
		var optionArea = function () {
			if (!orientation) {
				return A2(
					$mdgriffith$elm_ui$Element$Input$row,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.O),
						attrs),
					A2($elm$core$List$map, renderOption, input.g2));
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$Input$column,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(input.O),
						attrs),
					A2($elm$core$List$map, renderOption, input.g2));
			}
		}();
		var events = A2(
			$mdgriffith$elm_ui$Internal$Model$get,
			attrs,
			function (attr) {
				_v3$3:
				while (true) {
					switch (attr.$) {
						case 7:
							if (attr.a.$ === 2) {
								return true;
							} else {
								break _v3$3;
							}
						case 8:
							if (attr.a.$ === 2) {
								return true;
							} else {
								break _v3$3;
							}
						case 1:
							return true;
						default:
							break _v3$3;
					}
				}
				return false;
			});
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			_Utils_ap(
				A2(
					$elm$core$List$filterMap,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							$elm$core$Maybe$Just($mdgriffith$elm_ui$Element$alignLeft),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Element$Input$tabindex(0)),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Internal$Model$htmlClass('focus')),
							$elm$core$Maybe$Just($mdgriffith$elm_ui$Element$Region$announce),
							$elm$core$Maybe$Just(
							$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$attribute, 'role', 'radiogroup'))),
							function () {
							if (prevNext.$ === 1) {
								return $elm$core$Maybe$Nothing;
							} else {
								var _v1 = prevNext.a;
								var prev = _v1.a;
								var next = _v1.b;
								return $elm$core$Maybe$Just(
									$mdgriffith$elm_ui$Element$Input$onKeyLookup(
										function (code) {
											if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$leftArrow)) {
												return $elm$core$Maybe$Just(
													input.dJ(prev));
											} else {
												if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$upArrow)) {
													return $elm$core$Maybe$Just(
														input.dJ(prev));
												} else {
													if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$rightArrow)) {
														return $elm$core$Maybe$Just(
															input.dJ(next));
													} else {
														if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$downArrow)) {
															return $elm$core$Maybe$Just(
																input.dJ(next));
														} else {
															if (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space)) {
																var _v2 = input.hm;
																if (_v2.$ === 1) {
																	return $elm$core$Maybe$Just(
																		input.dJ(prev));
																} else {
																	return $elm$core$Maybe$Nothing;
																}
															} else {
																return $elm$core$Maybe$Nothing;
															}
														}
													}
												}
											}
										}));
							}
						}()
						])),
				events),
			input.O,
			optionArea);
	});
var $mdgriffith$elm_ui$Element$Input$radioRow = $mdgriffith$elm_ui$Element$Input$radioHelper(0);
var $author$project$FileExplorer$FileExplorer$uploadView = F2(
	function (config, model) {
		var bulkUploadView = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					function () {
					var _v3 = model.dr;
					if (!_v3) {
						return A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(15)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$Input$button,
											$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
											{
												O: $mdgriffith$elm_ui$Element$text('Retour'),
												aI: $elm$core$Maybe$Just($author$project$FileExplorer$FileExplorer$ToogleUploadView)
											}),
											A2(
											$mdgriffith$elm_ui$Element$Input$button,
											$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
											{
												O: $mdgriffith$elm_ui$Element$text('Choix fichiers'),
												aI: A2(
													$elm$core$Maybe$map,
													$author$project$FileExplorer$FileExplorer$FilesRequested,
													A2(
														$elm$core$Maybe$map,
														$author$project$FileExplorer$FileExplorer$extractFsItem,
														A2($author$project$FileExplorer$FileExplorer$getCurrentFilesys, config.h, model)))
											})
										]))
								]));
					} else {
						return A2($author$project$FileExplorer$FileExplorer$bulkUploadView_, config, model);
					}
				}()
				]));
		var bulkImageUploadView = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					function () {
					var _v2 = model.ct;
					switch (_v2) {
						case 0:
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(15)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$Input$radioRow,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(15)
											]),
										{
											O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
											dJ: $author$project$FileExplorer$FileExplorer$SetImageSize,
											g2: _List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$Input$option,
													0,
													$mdgriffith$elm_ui$Element$text('image(s) actualités')),
													A2(
													$mdgriffith$elm_ui$Element$Input$option,
													1,
													$mdgriffith$elm_ui$Element$text('image(s) bloc de liens')),
													A2(
													$mdgriffith$elm_ui$Element$Input$option,
													2,
													$mdgriffith$elm_ui$Element$text('image(s) fiches')),
													A2(
													$mdgriffith$elm_ui$Element$Input$option,
													3,
													$mdgriffith$elm_ui$Element$text('image(s) page'))
												]),
											hm: $elm$core$Maybe$Just(model.dq)
										}),
										A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(15)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$Input$button,
												$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
												{
													O: $mdgriffith$elm_ui$Element$text('Retour'),
													aI: $elm$core$Maybe$Just($author$project$FileExplorer$FileExplorer$ToogleUploadView)
												}),
												A2(
												$mdgriffith$elm_ui$Element$Input$button,
												$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
												{
													O: $mdgriffith$elm_ui$Element$text('Choix fichiers'),
													aI: $elm$core$Maybe$Just($author$project$FileExplorer$FileExplorer$ImagesRequested)
												})
											]))
									]));
						case 2:
							return A2($author$project$FileExplorer$FileExplorer$bulkImageUploadView_, config, model);
						default:
							return A2($author$project$FileExplorer$FileExplorer$imageProcessingView, config, model);
					}
				}()
				]));
		var imagesUploadView = A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$radioRow,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					{
						O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
						dJ: $author$project$FileExplorer$FileExplorer$SetImageUploadType,
						g2: _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$option,
								0,
								$mdgriffith$elm_ui$Element$text('Mise à l\'échelle automatique')),
								A2(
								$mdgriffith$elm_ui$Element$Input$option,
								1,
								$mdgriffith$elm_ui$Element$text('Mise à l\'échelle manuelle'))
							]),
						hm: $elm$core$Maybe$Just(model.dv)
					}),
					function () {
					var _v1 = model.dv;
					if (!_v1) {
						return A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Mettre des images en ligne'),
									bulkImageUploadView
								]));
					} else {
						return A3($author$project$FileExplorer$FileExplorer$imageControllerView, config, model, model.cE);
					}
				}()
				]));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$scrollbarY,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$padding(15),
					$mdgriffith$elm_ui$Element$Font$family(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$typeface('Arial')
						]))
				]),
			_List_fromArray(
				[
					function () {
					var _v0 = A2($author$project$FileExplorer$FileExplorer$modeRoot, config.h, model.Z);
					if (!_v0) {
						return imagesUploadView;
					} else {
						return A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Mettre des documents en ligne: '),
									bulkUploadView
								]));
					}
				}()
				]));
	});
var $author$project$FileExplorer$FileExplorer$view = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$map,
			model.bY,
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$Font$size(16),
						$mdgriffith$elm_ui$Element$Font$family(_List_Nil),
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$padding(15),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height(
						A2($mdgriffith$elm_ui$Element$maximum, config.fr, $mdgriffith$elm_ui$Element$fill))
					]),
				_List_fromArray(
					[
						A2($author$project$FileExplorer$FileExplorer$mainInterface, config, model),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$clip,
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A2($elm$html$Html$Attributes$style, 'flex-shrink', '1')),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								A2($author$project$FileExplorer$FileExplorer$sidePanelView, config, model),
								function () {
								var _v0 = model.b5;
								if (!_v0) {
									return A2($author$project$FileExplorer$FileExplorer$filesysView, config, model);
								} else {
									return A2($author$project$FileExplorer$FileExplorer$uploadView, config, model);
								}
							}()
							]))
					])));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$EditFiche = 1;
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FilterByActiv = function (a) {
	return {$: 2, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FilterByCat = function (a) {
	return {$: 1, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FilterByLabel = function (a) {
	return {$: 3, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FilterByName = function (a) {
	return {$: 0, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectFiche = function (a) {
	return {$: 4, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(15),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
		$mdgriffith$elm_ui$Element$Border$rounded(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
	]);
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(15),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey7),
		$mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var $author$project$Internals$CommonStyleHelpers$grey1 = A3($mdgriffith$elm_ui$Element$rgb255, 33, 41, 52);
var $author$project$Internals$CommonStyleHelpers$grey3 = A3($mdgriffith$elm_ui$Element$rgb255, 136, 149, 167);
var $author$project$Internals$CommonStyleHelpers$grey2 = A3($mdgriffith$elm_ui$Element$rgb255, 95, 107, 122);
var $author$project$Internals$CommonStyleHelpers$grey4 = A3($mdgriffith$elm_ui$Element$rgb255, 184, 196, 206);
var $author$project$Internals$CommonStyleHelpers$teal3 = A3($mdgriffith$elm_ui$Element$rgb255, 42, 145, 135);
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView = F4(
	function (isFicheData, selected, handler, entry) {
		return A2(
			$mdgriffith$elm_ui$Element$Keyed$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2($mdgriffith$elm_ui$Element$paddingXY, 5, 5),
					$mdgriffith$elm_ui$Element$Events$onClick(handler),
					$mdgriffith$elm_ui$Element$pointer,
					_Utils_eq(
					$elm$core$Maybe$Just(entry),
					selected) ? $mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey4) : $author$project$Internals$CommonStyleHelpers$noAttr,
					isFicheData ? $mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3) : $mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey2)
				]),
			_Utils_Tuple2(
				entry,
				$mdgriffith$elm_ui$Element$text(entry)));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$ficheSelectorView = function (model) {
	var nameFilterFun = function () {
		var _v10 = model.km;
		if (!_v10.$) {
			if (_v10.a === '') {
				return $elm$core$Basics$always(true);
			} else {
				var name = _v10.a;
				return function (_v11) {
					var k = _v11.a;
					var f = _v11.b;
					return A2(
						$elm$core$String$contains,
						$elm$core$String$toLower(name),
						$elm$core$String$toLower(f.kB));
				};
			}
		} else {
			return $elm$core$Basics$always(true);
		}
	}();
	var labelFilterFun = function () {
		var _v8 = model.j_;
		if (!_v8.$) {
			var label = _v8.a;
			return function (_v9) {
				var k = _v9.a;
				var f = _v9.b;
				return A2(
					$elm$core$List$any,
					function (l) {
						return _Utils_eq(l.kA, label);
					},
					f.O);
			};
		} else {
			return $elm$core$Basics$always(true);
		}
	}();
	var isSelected = function (name) {
		var _v7 = model.lt;
		if (_v7.$ === 1) {
			return false;
		} else {
			var id = _v7.a;
			return A2(
				$elm$core$Maybe$withDefault,
				false,
				A2(
					$elm$core$Maybe$map,
					function (f) {
						return _Utils_eq(f.kB, name);
					},
					A2($elm$core$Dict$get, id, model.jg)));
		}
	};
	var filterView = F3(
		function (selected, handler, entry) {
			return A2(
				$mdgriffith$elm_ui$Element$Keyed$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2($mdgriffith$elm_ui$Element$paddingXY, 5, 5),
						$mdgriffith$elm_ui$Element$Events$onClick(handler),
						$mdgriffith$elm_ui$Element$pointer,
						(_Utils_eq(
						$elm$core$Maybe$Just(entry),
						selected) || isSelected(entry)) ? $mdgriffith$elm_ui$Element$Background$color(
						A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 0.3)) : $author$project$Internals$CommonStyleHelpers$noAttr
					]),
				_Utils_Tuple2(
					entry,
					$mdgriffith$elm_ui$Element$text(entry)));
		});
	var catFilterFun = function () {
		var _v5 = model.io;
		if (!_v5.$) {
			var cat = _v5.a;
			return function (_v6) {
				var k = _v6.a;
				var f = _v6.b;
				return A2($elm$core$List$member, cat, f.cZ);
			};
		} else {
			return $elm$core$Basics$always(true);
		}
	}();
	var activFilterFun = function () {
		var _v3 = model.hP;
		if (!_v3.$) {
			var activ = _v3.a;
			return function (_v4) {
				var k = _v4.a;
				var f = _v4.b;
				return A2($elm$core$List$member, activ, f.ko);
			};
		} else {
			return $elm$core$Basics$always(true);
		}
	}();
	var filteredFiches = A2(
		$elm$core$List$sortBy,
		function (_v2) {
			var k = _v2.a;
			var f = _v2.b;
			return $elm$core$String$toLower(f.kB);
		},
		A2(
			$elm$core$List$filter,
			labelFilterFun,
			A2(
				$elm$core$List$filter,
				activFilterFun,
				A2(
					$elm$core$List$filter,
					catFilterFun,
					A2(
						$elm$core$List$filter,
						nameFilterFun,
						$elm$core$Dict$toList(model.jg))))));
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(15),
				$mdgriffith$elm_ui$Element$alignTop,
				$mdgriffith$elm_ui$Element$Border$widthEach(
				{a2: 0, bc: 0, bl: 2, bq: 0}),
				$mdgriffith$elm_ui$Element$Border$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8)),
				$mdgriffith$elm_ui$Element$paddingEach(
				{a2: 0, bc: 0, bl: 15, bq: 0}),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(780)),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$scrollbarY
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$bold,
						$mdgriffith$elm_ui$Element$Font$size(18)
					]),
				$mdgriffith$elm_ui$Element$text('Selection fiche')),
				A2(
				$mdgriffith$elm_ui$Element$el,
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle,
				A2(
					$mdgriffith$elm_ui$Element$row,
					$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$text,
							_Utils_ap(
								$author$project$Internals$CommonStyleHelpers$textInputStyle,
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Element$spacingXY, 0, 15),
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(400))
									])),
							{
								O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
								dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FilterByName,
								dO: $elm$core$Maybe$Just(
									A2(
										$mdgriffith$elm_ui$Element$Input$placeholder,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Filtrer par nom entité'))),
								dV: A2($elm$core$Maybe$withDefault, '', model.km)
							})
						]))),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15),
									$mdgriffith$elm_ui$Element$alignTop
								]),
							$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$bold,
										$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
									]),
								$mdgriffith$elm_ui$Element$text('Catégories ')),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Border$width(2),
										$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(150)),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(200)),
										$mdgriffith$elm_ui$Element$scrollbars
									]),
								A2(
									$elm$core$List$map,
									function (e) {
										return A4(
											$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
											false,
											model.io,
											$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FilterByCat(e),
											e);
									},
									$elm$core$Set$toList(model.cZ)))
							])),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15),
									$mdgriffith$elm_ui$Element$alignTop
								]),
							$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$bold,
										$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
									]),
								$mdgriffith$elm_ui$Element$text('Nature activité')),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Border$width(2),
										$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(300)),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(200)),
										$mdgriffith$elm_ui$Element$scrollbars
									]),
								A2(
									$elm$core$List$map,
									function (e) {
										return A4(
											$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
											false,
											model.hP,
											$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FilterByActiv(e),
											e);
									},
									$elm$core$Set$toList(model.hQ)))
							])),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15),
									$mdgriffith$elm_ui$Element$alignTop
								]),
							$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$bold,
										$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
									]),
								$mdgriffith$elm_ui$Element$text('Labels')),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Border$width(2),
										$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(150)),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(200)),
										$mdgriffith$elm_ui$Element$scrollbars
									]),
								A2(
									$elm$core$List$map,
									function (e) {
										return A4(
											$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
											false,
											model.j_,
											$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$FilterByLabel(e),
											e);
									},
									A2(
										$elm$core$List$map,
										function ($) {
											return $.kA;
										},
										model.j1)))
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$Font$bold]),
				$mdgriffith$elm_ui$Element$text('Nom fiche entité')),
				A2(
				$mdgriffith$elm_ui$Element$column,
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle,
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_Utils_ap(
							$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								])),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$Font$bold]),
								$mdgriffith$elm_ui$Element$text('Nom fiche entité')),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Border$width(2),
										$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(480)),
										$mdgriffith$elm_ui$Element$scrollbars
									]),
								A2(
									$elm$core$List$map,
									function (_v1) {
										var k = _v1.a;
										var n = _v1.b;
										return A3(
											filterView,
											model.lt,
											$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectFiche(k),
											n);
									},
									A2(
										$elm$core$List$map,
										function (_v0) {
											var k = _v0.a;
											var v = _v0.b;
											return _Utils_Tuple2(k, v.kB);
										},
										filteredFiches)))
							]))
					]))
			]));
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SaveFiche = {$: 75};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRightPanelDisplay = function (a) {
	return {$: 78, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddActivToFiche = {$: 17};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyActiv = {$: 16};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveActivFromFiche = {$: 18};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectActivInFiche = function (a) {
	return {$: 13, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectAvailableActiv = function (a) {
	return {$: 14, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetActivite = function (a) {
	return {$: 15, a: a};
};
var $author$project$Internals$CommonStyleHelpers$redStar = A2(
	$mdgriffith$elm_ui$Element$el,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$red4),
			$mdgriffith$elm_ui$Element$Font$size(18)
		]),
	$mdgriffith$elm_ui$Element$text('*'));
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setActivs = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15),
									$mdgriffith$elm_ui$Element$alignTop
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$bold,
											$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
										]),
									$mdgriffith$elm_ui$Element$text('Activités disponibles')),
									A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Border$width(2),
											$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(350)),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(200)),
											$mdgriffith$elm_ui$Element$scrollbars
										]),
									A2(
										$elm$core$List$map,
										function (e) {
											return A4(
												$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
												false,
												model.ln,
												$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectAvailableActiv(e),
												e);
										},
										$elm$core$Set$toList(model.hQ)))
								])),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15),
									$mdgriffith$elm_ui$Element$alignTop
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_Nil,
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$bold,
													$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
												]),
											$mdgriffith$elm_ui$Element$text('Activités fiche')),
											$author$project$Internals$CommonStyleHelpers$redStar
										])),
									A2(
									$mdgriffith$elm_ui$Element$Input$text,
									_Utils_ap(
										$author$project$Internals$CommonStyleHelpers$textInputStyle,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Element$spacingXY, 0, 15),
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(180)),
												$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
											])),
									{
										O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
										dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetActivite,
										dO: $elm$core$Maybe$Just(
											A2(
												$mdgriffith$elm_ui$Element$Input$placeholder,
												_List_Nil,
												$mdgriffith$elm_ui$Element$text('Nouvelle activité'))),
										dV: A2($elm$core$Maybe$withDefault, '', model.hO)
									}),
									A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Border$width(2),
											$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(180)),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(155)),
											$mdgriffith$elm_ui$Element$scrollbars
										]),
									A2(
										$elm$core$List$map,
										function (e) {
											return A4(
												$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
												true,
												model.lm,
												$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectActivInFiche(e),
												e);
										},
										model.jf.ko))
								]))
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					function () {
						var canRemove = (!_Utils_eq(model.lm, $elm$core$Maybe$Nothing)) && _Utils_eq(model.ln, $elm$core$Maybe$Nothing);
						var canModify = function () {
							var _v2 = _Utils_Tuple2(model.ln, model.hO);
							if ((!_v2.a.$) && (!_v2.b.$)) {
								var avActiv = _v2.a.a;
								var newActiv = _v2.b.a;
								return !_Utils_eq(avActiv, newActiv);
							} else {
								return false;
							}
						}();
						var canAdd = function () {
							var _v0 = _Utils_Tuple2(model.ln, model.hO);
							_v0$2:
							while (true) {
								if (!_v0.a.$) {
									if (!_v0.b.$) {
										var avActiv = _v0.a.a;
										var newActiv = _v0.b.a;
										return _Utils_eq(avActiv, newActiv);
									} else {
										break _v0$2;
									}
								} else {
									if (!_v0.b.$) {
										var _v1 = _v0.a;
										var newActiv = _v0.b.a;
										return true;
									} else {
										break _v0$2;
									}
								}
							}
							return false;
						}();
						return _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(canAdd),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Ajouter activité')),
									aI: canAdd ? $elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddActivToFiche) : $elm$core$Maybe$Nothing
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(canRemove),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Supprimer activité')),
									aI: canRemove ? $elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveActivFromFiche) : $elm$core$Maybe$Nothing
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$saveButtonStyle(canModify),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Modifier activité')),
									aI: canModify ? $elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyActiv) : $elm$core$Maybe$Nothing
								})
							]);
					}())
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddCatToFiche = {$: 11};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyCat = {$: 10};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveCatFromFiche = {$: 12};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectAvailableCat = function (a) {
	return {$: 8, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectCatInFiche = function (a) {
	return {$: 7, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetCategorie = function (a) {
	return {$: 9, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setCats = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15),
									$mdgriffith$elm_ui$Element$alignTop
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$bold,
											$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
										]),
									$mdgriffith$elm_ui$Element$text('Catégories disponibles')),
									A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Border$width(2),
											$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(150)),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(200)),
											$mdgriffith$elm_ui$Element$scrollbars
										]),
									A2(
										$elm$core$List$map,
										function (e) {
											return A4(
												$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
												false,
												model.lo,
												$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectAvailableCat(e),
												e);
										},
										$elm$core$Set$toList(model.cZ)))
								])),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15),
									$mdgriffith$elm_ui$Element$alignTop
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_Nil,
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$bold,
													$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
												]),
											$mdgriffith$elm_ui$Element$text('Catégories fiche')),
											$author$project$Internals$CommonStyleHelpers$redStar
										])),
									A2(
									$mdgriffith$elm_ui$Element$Input$text,
									_Utils_ap(
										$author$project$Internals$CommonStyleHelpers$textInputStyle,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Element$spacingXY, 0, 15),
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(180)),
												$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
											])),
									{
										O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
										dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetCategorie,
										dO: $elm$core$Maybe$Just(
											A2(
												$mdgriffith$elm_ui$Element$Input$placeholder,
												_List_Nil,
												$mdgriffith$elm_ui$Element$text('Nouvelle catégorie'))),
										dV: A2($elm$core$Maybe$withDefault, '', model.$9)
									}),
									A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Border$width(2),
											$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(180)),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(155)),
											$mdgriffith$elm_ui$Element$scrollbars
										]),
									A2(
										$elm$core$List$map,
										function (e) {
											return A4(
												$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
												true,
												model.lq,
												$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectCatInFiche(e),
												e);
										},
										model.jf.cZ))
								]))
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					function () {
						var canRemove = (!_Utils_eq(model.lq, $elm$core$Maybe$Nothing)) && _Utils_eq(model.lo, $elm$core$Maybe$Nothing);
						var canModify = function () {
							var _v2 = _Utils_Tuple2(model.lo, model.$9);
							if ((!_v2.a.$) && (!_v2.b.$)) {
								var avCat = _v2.a.a;
								var newCat = _v2.b.a;
								return !_Utils_eq(avCat, newCat);
							} else {
								return false;
							}
						}();
						var canAdd = function () {
							var _v0 = _Utils_Tuple2(model.lo, model.$9);
							_v0$2:
							while (true) {
								if (!_v0.a.$) {
									if (!_v0.b.$) {
										var avCat = _v0.a.a;
										var newCat = _v0.b.a;
										return _Utils_eq(avCat, newCat);
									} else {
										break _v0$2;
									}
								} else {
									if (!_v0.b.$) {
										var _v1 = _v0.a;
										var newCat = _v0.b.a;
										return true;
									} else {
										break _v0$2;
									}
								}
							}
							return false;
						}();
						return _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(canAdd),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Ajouter catégorie')),
									aI: canAdd ? $elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddCatToFiche) : $elm$core$Maybe$Nothing
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(canRemove),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Supprimer catégorie')),
									aI: canRemove ? $elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveCatFromFiche) : $elm$core$Maybe$Nothing
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$saveButtonStyle(canModify),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Modifier catégorie')),
									aI: canModify ? $elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyCat) : $elm$core$Maybe$Nothing
								})
							]);
					}())
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$catsActivsCont = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$map,
			model.bY,
			A2(
				$mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(20)
						]),
					$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle),
				_List_fromArray(
					[
						A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setCats, config, model),
						A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setActivs, config, model)
					])));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetAddress = function (a) {
	return {$: 40, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setAdresse = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						$author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(400)),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerY]),
							A2(
								$mdgriffith$elm_ui$Element$row,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$bold,
												$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
											]),
										$mdgriffith$elm_ui$Element$text('Adresse / Siège social')),
										$author$project$Internals$CommonStyleHelpers$redStar
									]))),
						dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetAddress,
						dO: $elm$core$Maybe$Nothing,
						dV: model.jf.hT
					})
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddEmail = {$: 47};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyEmail = {$: 46};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveEmail = {$: 48};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectEmailInFiche = function (a) {
	return {$: 44, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetEmail = function (a) {
	return {$: 45, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setEmails = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$bold,
									$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
								]),
							$mdgriffith$elm_ui$Element$text('Emails')),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Border$width(2),
									$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(400)),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(200)),
									$mdgriffith$elm_ui$Element$scrollbars
								]),
							A2(
								$elm$core$List$map,
								function (s) {
									return A4(
										$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
										true,
										model.ls,
										$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectEmailInFiche(s),
										s);
								},
								model.jf.i4))
						])),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					function () {
						var isExistingEmail = _Utils_eq(
							A2(
								$elm$core$Maybe$map,
								function (e) {
									return A2($elm$core$List$member, e, model.jf.i4);
								},
								model.i5),
							$elm$core$Maybe$Just(true));
						var canModify = (!_Utils_eq(model.ls, $elm$core$Maybe$Nothing)) && ((!_Utils_eq(
							model.i5,
							$elm$core$Maybe$Just(''))) && (!isExistingEmail));
						var canDeleteEmail = (!_Utils_eq(model.ls, $elm$core$Maybe$Nothing)) && isExistingEmail;
						var canAddEmail = (!_Utils_eq(model.i5, $elm$core$Maybe$Nothing)) && (_Utils_eq(model.ls, $elm$core$Maybe$Nothing) && (!isExistingEmail));
						return _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$text,
								_Utils_ap(
									$author$project$Internals$CommonStyleHelpers$textInputStyle,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(180)),
											A2($mdgriffith$elm_ui$Element$spacingXY, 0, 15),
											$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
										])),
								{
									O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
									dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetEmail,
									dO: $elm$core$Maybe$Just(
										A2(
											$mdgriffith$elm_ui$Element$Input$placeholder,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text('Nouvel Email'))),
									dV: A2($elm$core$Maybe$withDefault, '', model.i5)
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(canModify),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Modifier email')),
									aI: canModify ? $elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyEmail) : $elm$core$Maybe$Nothing
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(canAddEmail),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Ajouter email')),
									aI: canAddEmail ? $elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddEmail) : $elm$core$Maybe$Nothing
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(canDeleteEmail),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Supprimer email')),
									aI: canDeleteEmail ? $elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveEmail) : $elm$core$Maybe$Nothing
								})
							]);
					}())
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetFax = function (a) {
	return {$: 43, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setFax = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$text,
			_Utils_ap(
				$author$project$Internals$CommonStyleHelpers$textInputStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(120)),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
					])),
			{
				O: A2(
					$mdgriffith$elm_ui$Element$Input$labelLeft,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerY]),
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$bold,
								$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
							]),
						$mdgriffith$elm_ui$Element$text('Fax'))),
				dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetFax,
				dO: $elm$core$Maybe$Nothing,
				dV: A2($elm$core$Maybe$withDefault, '', model.jf.je)
			});
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddResp = {$: 38};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyResp = {$: 37};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveResp = {$: 39};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectRespInFiche = function (a) {
	return {$: 32, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRespNom = function (a) {
	return {$: 34, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRespPoste = function (a) {
	return {$: 33, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRespTelFixe = function (a) {
	return {$: 35, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRespTelPortable = function (a) {
	return {$: 36, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirHelpers$getTFixe = function (tel) {
	switch (tel.$) {
		case 0:
			var n = tel.a;
			return $elm$core$Maybe$Just(n);
		case 1:
			var n = tel.a;
			return $elm$core$Maybe$Nothing;
		default:
			var _v1 = tel.a;
			var n1 = _v1.a;
			var n2 = _v1.b;
			return $elm$core$Maybe$Just(n1);
	}
};
var $author$project$GeneralDirectoryEditor$GeneralDirHelpers$getTPortable = function (tel) {
	switch (tel.$) {
		case 0:
			var n = tel.a;
			return $elm$core$Maybe$Nothing;
		case 1:
			var n = tel.a;
			return $elm$core$Maybe$Just(n);
		default:
			var _v1 = tel.a;
			var n1 = _v1.a;
			var n2 = _v1.b;
			return $elm$core$Maybe$Just(n2);
	}
};
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setResponsables = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$bold,
									$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
								]),
							$mdgriffith$elm_ui$Element$text('Responsables')),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Border$width(2),
									$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(400)),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(200)),
									$mdgriffith$elm_ui$Element$scrollbars
								]),
							A2(
								$elm$core$List$map,
								function (_v0) {
									var r = _v0.a;
									var e = _v0.b;
									return A4(
										$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
										true,
										A2(
											$elm$core$Maybe$map,
											function ($) {
												return $.kA;
											},
											model.lw),
										$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectRespInFiche(r),
										e);
								},
								A2(
									$elm$core$List$map,
									function (r) {
										return _Utils_Tuple2(
											r,
											function ($) {
												return $.kA;
											}(r));
									},
									model.jf.k9)))
						])),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$text,
							_Utils_ap(
								$author$project$Internals$CommonStyleHelpers$textInputStyle,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(180)),
										$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
									])),
							{
								O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
								dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRespNom,
								dO: $elm$core$Maybe$Just(
									A2(
										$mdgriffith$elm_ui$Element$Input$placeholder,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Nom'))),
								dV: A2(
									$elm$core$Maybe$withDefault,
									'',
									A2(
										$elm$core$Maybe$map,
										function ($) {
											return $.kA;
										},
										model.k8))
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$text,
							_Utils_ap(
								$author$project$Internals$CommonStyleHelpers$textInputStyle,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(180)),
										$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
									])),
							{
								O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
								dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRespPoste,
								dO: $elm$core$Maybe$Just(
									A2(
										$mdgriffith$elm_ui$Element$Input$placeholder,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Poste'))),
								dV: A2(
									$elm$core$Maybe$withDefault,
									'',
									A2(
										$elm$core$Maybe$map,
										function ($) {
											return $.kY;
										},
										model.k8))
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$text,
							_Utils_ap(
								$author$project$Internals$CommonStyleHelpers$textInputStyle,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(180)),
										$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
									])),
							{
								O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
								dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRespTelFixe,
								dO: $elm$core$Maybe$Just(
									A2(
										$mdgriffith$elm_ui$Element$Input$placeholder,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Tel. fixe'))),
								dV: A2(
									$elm$core$Maybe$withDefault,
									'',
									A2(
										$elm$core$Maybe$andThen,
										$author$project$GeneralDirectoryEditor$GeneralDirHelpers$getTFixe,
										A2(
											$elm$core$Maybe$map,
											function ($) {
												return $.l_;
											},
											model.k8)))
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$text,
							_Utils_ap(
								$author$project$Internals$CommonStyleHelpers$textInputStyle,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(180)),
										$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
									])),
							{
								O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
								dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRespTelPortable,
								dO: $elm$core$Maybe$Just(
									A2(
										$mdgriffith$elm_ui$Element$Input$placeholder,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Tel. portable'))),
								dV: A2(
									$elm$core$Maybe$withDefault,
									'',
									A2(
										$elm$core$Maybe$andThen,
										$author$project$GeneralDirectoryEditor$GeneralDirHelpers$getTPortable,
										A2(
											$elm$core$Maybe$map,
											function ($) {
												return $.l_;
											},
											model.k8)))
							})
						])),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					function () {
						var isExistingResp = _Utils_eq(
							A2(
								$elm$core$Maybe$map,
								function (r) {
									return A2($elm$core$List$member, r, model.jf.k9);
								},
								model.k8),
							$elm$core$Maybe$Just(true));
						var canModify = (!_Utils_eq(model.lw, $elm$core$Maybe$Nothing)) && ((!_Utils_eq(
							model.k8,
							$elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyResp))) && (!isExistingResp));
						var canDeleteResp = (!_Utils_eq(model.lw, $elm$core$Maybe$Nothing)) && isExistingResp;
						var canAddResp = (!_Utils_eq(model.k8, $elm$core$Maybe$Nothing)) && (_Utils_eq(model.lw, $elm$core$Maybe$Nothing) && (!isExistingResp));
						return _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(canModify),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Modifier responsable')),
									aI: canModify ? $elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyResp) : $elm$core$Maybe$Nothing
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(canAddResp),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Ajouter responsable')),
									aI: canAddResp ? $elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddResp) : $elm$core$Maybe$Nothing
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(canDeleteResp),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Supprimer responsable')),
									aI: canDeleteResp ? $elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveResp) : $elm$core$Maybe$Nothing
								})
							]);
					}())
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetSiteLabel = function (a) {
	return {$: 50, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetSiteUrl = function (a) {
	return {$: 49, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setSite = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						$author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(180)),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerY]),
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$bold,
										$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
									]),
								$mdgriffith$elm_ui$Element$text('Nom site'))),
						dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetSiteLabel,
						dO: $elm$core$Maybe$Nothing,
						dV: A2(
							$elm$core$Maybe$withDefault,
							'',
							A2($elm$core$Maybe$map, $elm$core$Tuple$first, model.jf.lE))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						$author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(180)),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerY]),
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$bold,
										$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
									]),
								$mdgriffith$elm_ui$Element$text('Url site'))),
						dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetSiteUrl,
						dO: $elm$core$Maybe$Nothing,
						dV: A2(
							$elm$core$Maybe$withDefault,
							'',
							A2($elm$core$Maybe$map, $elm$core$Tuple$second, model.jf.lE))
					})
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetTelFixe = function (a) {
	return {$: 41, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetTelPortable = function (a) {
	return {$: 42, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setTel = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						$author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(120)),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerY]),
							A2(
								$mdgriffith$elm_ui$Element$row,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$bold,
												$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
											]),
										$mdgriffith$elm_ui$Element$text('Tel. fixe')),
										$author$project$Internals$CommonStyleHelpers$redStar
									]))),
						dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetTelFixe,
						dO: $elm$core$Maybe$Nothing,
						dV: A2(
							$elm$core$Maybe$withDefault,
							'',
							A2($elm$core$Maybe$andThen, $author$project$GeneralDirectoryEditor$GeneralDirHelpers$getTFixe, model.jf.l$))
					}),
					$mdgriffith$elm_ui$Element$text('et / ou'),
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						$author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(120)),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerY]),
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$bold,
										$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
									]),
								$mdgriffith$elm_ui$Element$text('Tel. portable'))),
						dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetTelPortable,
						dO: $elm$core$Maybe$Nothing,
						dV: A2(
							$elm$core$Maybe$withDefault,
							'',
							A2($elm$core$Maybe$andThen, $author$project$GeneralDirectoryEditor$GeneralDirHelpers$getTPortable, model.jf.l$))
					})
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$contactsCont = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$map,
			model.bY,
			A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(20)
						]),
					$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle),
				_List_fromArray(
					[
						A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setAdresse, config, model),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
						_List_fromArray(
							[
								A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setTel, config, model),
								A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setFax, config, model)
							])),
						A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setEmails, config, model),
						A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setSite, config, model),
						A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setResponsables, config, model)
					])));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddDescription = {$: 62};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyDescr = {$: 61};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$MoveDescrDown = {$: 65};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$MoveDescrUp = {$: 64};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveDescription = {$: 63};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectDescrInFiche = function (a) {
	return {$: 59, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetDescription = function (a) {
	return {$: 60, a: a};
};
var $mdgriffith$elm_ui$Element$Input$HiddenLabel = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Element$Input$labelHidden = $mdgriffith$elm_ui$Element$Input$HiddenLabel;
var $mdgriffith$elm_ui$Element$Input$multiline = F2(
	function (attrs, multi) {
		return A3(
			$mdgriffith$elm_ui$Element$Input$textHelper,
			{a0: $elm$core$Maybe$Nothing, bn: multi.lJ, aj: $mdgriffith$elm_ui$Element$Input$TextArea},
			attrs,
			{O: multi.O, dJ: multi.dJ, dO: multi.dO, dV: multi.dV});
	});
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setDescriptions = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$bold,
									$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
								]),
							$mdgriffith$elm_ui$Element$text('Descriptions')),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Border$width(2),
									$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(400)),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(200)),
									$mdgriffith$elm_ui$Element$scrollbars
								]),
							A2(
								$elm$core$List$map,
								function (d) {
									return A4(
										$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
										true,
										model.lr,
										$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectDescrInFiche(d),
										d);
								},
								model.jf.ei))
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Keyed$el,
							_List_Nil,
							_Utils_Tuple2(
								'descrMultilineKey' + $elm$core$String$fromInt(
									A2(
										$Skinney$murmur3$Murmur3$hashString,
										0,
										function (s) {
											return _Utils_ap(
												s,
												A2($elm$core$Maybe$withDefault, '', model.lr));
										}(
											A2($elm$core$String$join, '', model.jf.ei)))),
								A2(
									$mdgriffith$elm_ui$Element$Input$multiline,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(400)),
											$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
										]),
									{
										O: $mdgriffith$elm_ui$Element$Input$labelHidden(''),
										dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetDescription,
										dO: $elm$core$Maybe$Just(
											A2(
												$mdgriffith$elm_ui$Element$Input$placeholder,
												_List_Nil,
												$mdgriffith$elm_ui$Element$text('Ajouter un paragraphe'))),
										lJ: false,
										dV: A2($elm$core$Maybe$withDefault, '', model.i$)
									}))),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(model.lr, $elm$core$Maybe$Nothing)),
									{
										O: A2(
											$mdgriffith$elm_ui$Element$el,
											_List_Nil,
											$mdgriffith$elm_ui$Element$html(
												$author$project$Internals$Icons$chevronsUp(18))),
										aI: A2(
											$elm$core$Maybe$map,
											function (_v0) {
												return $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$MoveDescrUp;
											},
											model.lr)
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(model.lr, $elm$core$Maybe$Nothing)),
									{
										O: A2(
											$mdgriffith$elm_ui$Element$el,
											_List_Nil,
											$mdgriffith$elm_ui$Element$html(
												$author$project$Internals$Icons$chevronsDown(18))),
										aI: A2(
											$elm$core$Maybe$map,
											function (_v1) {
												return $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$MoveDescrDown;
											},
											model.lr)
									})
								]))
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					function () {
						var isExisting = _Utils_eq(
							A2(
								$elm$core$Maybe$map,
								function (r) {
									return A2($elm$core$List$member, r, model.jf.ei);
								},
								model.i$),
							$elm$core$Maybe$Just(true));
						var canModify = (!_Utils_eq(model.lr, $elm$core$Maybe$Nothing)) && ((!_Utils_eq(
							model.i$,
							$elm$core$Maybe$Just(''))) && (!isExisting));
						var canDelete = (!_Utils_eq(model.lr, $elm$core$Maybe$Nothing)) && isExisting;
						var canAdd = (!_Utils_eq(model.i$, $elm$core$Maybe$Nothing)) && (_Utils_eq(model.lr, $elm$core$Maybe$Nothing) && (!isExisting));
						return _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(canModify),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Modifier description')),
									aI: canModify ? $elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyDescr) : $elm$core$Maybe$Nothing
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(canAdd),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Ajouter description')),
									aI: canAdd ? $elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddDescription) : $elm$core$Maybe$Nothing
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(canDelete),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Supprimer description')),
									aI: canDelete ? $elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveDescription) : $elm$core$Maybe$Nothing
								})
							]);
					}())
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$descrCont = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$map,
			model.bY,
			A2(
				$mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(20)
						]),
					$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle),
				_List_fromArray(
					[
						A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setDescriptions, config, model)
					])));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirHelpers$isValidFiche = function (f) {
	return ($elm$core$List$length(f.cZ) >= 1) && (($elm$core$List$length(f.ko) >= 1) && ((f.kB !== '') && ((f.hT !== '') && (((!_Utils_eq(f.l$, $elm$core$Maybe$Nothing)) || ($elm$core$List$length(f.k9) >= 1)) && (f.mr !== '')))));
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddLabelToFiche = {$: 24};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyLabel = {$: 26};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveLabelFromFiche = {$: 25};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectAvailableLabel = function (a) {
	return {$: 20, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectLabelInFiche = function (a) {
	return {$: 19, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLabelLink = function (a) {
	return {$: 22, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLabelName = function (a) {
	return {$: 21, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Below = 1;
var $mdgriffith$elm_ui$Element$below = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, 1, element);
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$CloseLabelVisualPicker = {$: 55};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLabelVisual = function (a) {
	return {$: 23, a: a};
};
var $author$project$Internals$CommonHelpers$PickedDoc = function (a) {
	return {$: 1, a: a};
};
var $author$project$Internals$CommonHelpers$PickedImage = function (a) {
	return {$: 0, a: a};
};
var $author$project$FileExplorer$FileExplorer$ReadWrite = function (a) {
	return {$: 1, a: a};
};
var $author$project$FileExplorer$FileExplorer$getSelectedDoc = function (model) {
	var _v0 = model.o;
	if ((!_v0.$) && (_v0.a.$ === 1)) {
		var path = _v0.a.a.K;
		var name = _v0.a.a.I;
		var fileType = _v0.a.a.cA;
		var fileSize = _v0.a.a.b$;
		if (fileType.$ === 1) {
			return $elm$core$Maybe$Just(
				'/' + A2($elm$core$String$join, '/', path));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$FileExplorer$FileExplorer$getSelectedImage = function (model) {
	var _v0 = model.o;
	if ((!_v0.$) && (_v0.a.$ === 1)) {
		var path = _v0.a.a.K;
		var name = _v0.a.a.I;
		var fileType = _v0.a.a.cA;
		var fileSize = _v0.a.a.b$;
		if (!fileType.$) {
			var width = fileType.a.mt;
			var height = fileType.a.jx;
			return $elm$core$Maybe$Just(
				{
					jx: height,
					fK: '/' + A2($elm$core$String$join, '/', path),
					mt: width
				});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$FileExplorer$FileExplorer$pickerView = F5(
	function (backMsg, confirmMsg, root, config, externalMsg) {
		var selector = function (m) {
			if (!root) {
				return A2(
					$elm$core$Maybe$map,
					function (_v1) {
						var src = _v1.fK;
						var width = _v1.mt;
						var height = _v1.jx;
						return $author$project$Internals$CommonHelpers$PickedImage(
							{jx: height, d$: src, mt: width});
					},
					$author$project$FileExplorer$FileExplorer$getSelectedImage(m));
			} else {
				return A2(
					$elm$core$Maybe$map,
					$author$project$Internals$CommonHelpers$PickedDoc,
					$author$project$FileExplorer$FileExplorer$getSelectedDoc(m));
			}
		};
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$paddingEach(
					{a2: 15, bc: 0, bl: 0, bq: 0})
				]),
			_List_fromArray(
				[
					A2(
					$author$project$FileExplorer$FileExplorer$view,
					{
						be: config.be,
						fr: (config.fr < 800) ? 400 : 500,
						h: $author$project$FileExplorer$FileExplorer$ReadWrite(root),
						fY: config.fY
					},
					config.fd),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							A2($mdgriffith$elm_ui$Element$paddingXY, 15, 0)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Retour'),
								aI: $elm$core$Maybe$Just(
									externalMsg(backMsg))
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(
									selector(config.fd),
									$elm$core$Maybe$Nothing)),
							{
								O: $mdgriffith$elm_ui$Element$text('Valider'),
								aI: A2(
									$elm$core$Maybe$map,
									A2($elm$core$Basics$composeL, externalMsg, confirmMsg),
									selector(config.fd))
							})
						]))
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$labelVisualPickerView = F2(
	function (config, model) {
		return A5($author$project$FileExplorer$FileExplorer$pickerView, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$CloseLabelVisualPicker, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLabelVisual, 0, config, model.bY);
	});
var $mdgriffith$elm_ui$Internal$Model$Min = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$minimum = F2(
	function (i, l) {
		return A2($mdgriffith$elm_ui$Internal$Model$Min, i, l);
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$OpenLabelVisualPicker = {$: 54};
var $author$project$Internals$CommonStyleHelpers$grey5 = A3($mdgriffith$elm_ui$Element$rgb255, 207, 214, 222);
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setLabelVisual = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(150)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(113)),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey5)
						]),
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(138)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(104)),
								$mdgriffith$elm_ui$Element$Background$uncropped(
								A2(
									$elm$core$Maybe$withDefault,
									'',
									A2(
										$elm$core$Maybe$map,
										A2(
											$elm$core$Basics$composeL,
											function ($) {
												return $.d$;
											},
											function ($) {
												return $.j9;
											}),
										model.jZ))),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY
							]),
						$mdgriffith$elm_ui$Element$none)),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('Choisir visuel')),
						aI: $elm$core$Maybe$Just(
							model.bY($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$OpenLabelVisualPicker))
					})
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setLabels = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$below(
							(!model.j0) ? $mdgriffith$elm_ui$Element$none : A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color(
										A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
										$mdgriffith$elm_ui$Element$width(
										A2(
											$mdgriffith$elm_ui$Element$minimum,
											850,
											A2($mdgriffith$elm_ui$Element$maximum, 920, $mdgriffith$elm_ui$Element$shrink))),
										$mdgriffith$elm_ui$Element$Border$shadow(
										{
											ic: 10,
											iA: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
											kD: _Utils_Tuple2(4, 4),
											fJ: 5
										})
									]),
								A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$labelVisualPickerView, config, model)))
						]),
					$mdgriffith$elm_ui$Element$none),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$map,
							model.bY,
							A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(15),
										$mdgriffith$elm_ui$Element$alignTop
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$bold,
												$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
											]),
										$mdgriffith$elm_ui$Element$text('Labels disponibles')),
										A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Border$width(2),
												$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(150)),
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(242)),
												$mdgriffith$elm_ui$Element$scrollbars
											]),
										A2(
											$elm$core$List$map,
											function (e) {
												return A4(
													$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
													false,
													model.lp,
													$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectAvailableLabel(e),
													e);
											},
											A2(
												$elm$core$List$map,
												function ($) {
													return $.kA;
												},
												model.j1)))
									]))),
							A2(
							$mdgriffith$elm_ui$Element$map,
							model.bY,
							A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(15),
										$mdgriffith$elm_ui$Element$alignTop
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$bold,
												$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
											]),
										$mdgriffith$elm_ui$Element$text('Labels fiche')),
										A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Border$width(2),
												$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(180)),
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(242)),
												$mdgriffith$elm_ui$Element$scrollbars
											]),
										A2(
											$elm$core$List$map,
											function (e) {
												return A4(
													$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$selectView,
													true,
													model.lu,
													$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectLabelInFiche(e),
													e);
											},
											A2(
												$elm$core$List$map,
												function ($) {
													return $.kA;
												},
												model.jf.O)))
									]))),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15),
									$mdgriffith$elm_ui$Element$alignTop
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$bold,
											$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
										]),
									$mdgriffith$elm_ui$Element$text('Créer / Modifier label')),
									A2(
									$mdgriffith$elm_ui$Element$map,
									model.bY,
									A2(
										$mdgriffith$elm_ui$Element$Input$text,
										_Utils_ap(
											$author$project$Internals$CommonStyleHelpers$textInputStyle,
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Element$spacingXY, 0, 15),
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(180)),
													$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
												])),
										{
											O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
											dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLabelName,
											dO: $elm$core$Maybe$Just(
												A2(
													$mdgriffith$elm_ui$Element$Input$placeholder,
													_List_Nil,
													$mdgriffith$elm_ui$Element$text('Nom label'))),
											dV: A2(
												$elm$core$Maybe$withDefault,
												'',
												A2(
													$elm$core$Maybe$map,
													function ($) {
														return $.kA;
													},
													model.jZ))
										})),
									A2(
									$mdgriffith$elm_ui$Element$map,
									model.bY,
									A2(
										$mdgriffith$elm_ui$Element$Input$text,
										_Utils_ap(
											$author$project$Internals$CommonStyleHelpers$textInputStyle,
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Element$spacingXY, 0, 15),
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(180)),
													$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
												])),
										{
											O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
											dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLabelLink,
											dO: $elm$core$Maybe$Just(
												A2(
													$mdgriffith$elm_ui$Element$Input$placeholder,
													_List_Nil,
													$mdgriffith$elm_ui$Element$text('Lien label'))),
											dV: A2(
												$elm$core$Maybe$withDefault,
												'',
												A2(
													$elm$core$Maybe$map,
													function ($) {
														return $.j2;
													},
													model.jZ))
										})),
									A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setLabelVisual, config, model)
								]))
						])),
					A2(
					$mdgriffith$elm_ui$Element$map,
					model.bY,
					A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						function () {
							var canRemove = (!_Utils_eq(model.lu, $elm$core$Maybe$Nothing)) && _Utils_eq(model.lp, $elm$core$Maybe$Nothing);
							var canModify = function () {
								var _v2 = _Utils_Tuple2(
									A2($author$project$GeneralDirectoryEditor$GeneralDirHelpers$extractLabel, model, model.lp),
									model.jZ);
								if ((!_v2.a.$) && (!_v2.b.$)) {
									var avLabel = _v2.a.a;
									var newLabel = _v2.b.a;
									return (!_Utils_eq(avLabel, newLabel)) && $author$project$GeneralDirectoryEditor$GeneralDirHelpers$validLabel(newLabel);
								} else {
									return false;
								}
							}();
							var canAdd = function () {
								var _v0 = _Utils_Tuple2(
									A2($author$project$GeneralDirectoryEditor$GeneralDirHelpers$extractLabel, model, model.lp),
									model.jZ);
								_v0$2:
								while (true) {
									if (!_v0.a.$) {
										if (!_v0.b.$) {
											var avLabel = _v0.a.a;
											var newLabel = _v0.b.a;
											return _Utils_eq(avLabel, newLabel);
										} else {
											break _v0$2;
										}
									} else {
										if (!_v0.b.$) {
											var _v1 = _v0.a;
											var newLabel = _v0.b.a;
											return $author$project$GeneralDirectoryEditor$GeneralDirHelpers$validLabel(newLabel);
										} else {
											break _v0$2;
										}
									}
								}
								return false;
							}();
							return _List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$buttonStyle(canAdd),
									{
										O: A2(
											$mdgriffith$elm_ui$Element$el,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text('Ajouter label')),
										aI: canAdd ? $elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddLabelToFiche) : $elm$core$Maybe$Nothing
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$buttonStyle(canRemove),
									{
										O: A2(
											$mdgriffith$elm_ui$Element$el,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text('Supprimer label')),
										aI: canRemove ? $elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveLabelFromFiche) : $elm$core$Maybe$Nothing
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$saveButtonStyle(canModify),
									{
										O: A2(
											$mdgriffith$elm_ui$Element$el,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text('Modifier label')),
										aI: canModify ? $elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyLabel) : $elm$core$Maybe$Nothing
									})
								]);
						}()))
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRefOtLink = function (a) {
	return {$: 28, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRefOtNbr = function (a) {
	return {$: 27, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setOt = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						$author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(100)),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerY]),
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$bold,
										$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
									]),
								$mdgriffith$elm_ui$Element$text('Référence OT'))),
						dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRefOtNbr,
						dO: $elm$core$Maybe$Nothing,
						dV: A2(
							$elm$core$Maybe$withDefault,
							'',
							A2(
								$elm$core$Maybe$map,
								$elm$core$String$fromInt,
								A2($elm$core$Maybe$map, $elm$core$Tuple$first, model.jf.k3)))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						$author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(100)),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerY]),
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$bold,
										$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
									]),
								$mdgriffith$elm_ui$Element$text('Lien OT'))),
						dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRefOtLink,
						dO: $elm$core$Maybe$Nothing,
						dV: A2(
							$elm$core$Maybe$withDefault,
							'',
							A2($elm$core$Maybe$map, $elm$core$Tuple$second, model.jf.k3))
					})
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetEpis = function (a) {
	return {$: 30, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetStars = function (a) {
	return {$: 29, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setRank = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$alignTop
					]),
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						$author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(100)),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerY]),
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$bold,
										$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
									]),
								$mdgriffith$elm_ui$Element$text('Etoiles'))),
						dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetStars,
						dO: $elm$core$Maybe$Nothing,
						dV: A2(
							$elm$core$Maybe$withDefault,
							'',
							A2($elm$core$Maybe$map, $elm$core$String$fromInt, model.jf.k0.lK))
					}),
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						$author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(100)),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerY]),
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$bold,
										$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
									]),
								$mdgriffith$elm_ui$Element$text('Epis'))),
						dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetEpis,
						dO: $elm$core$Maybe$Nothing,
						dV: A2(
							$elm$core$Maybe$withDefault,
							'',
							A2($elm$core$Maybe$map, $elm$core$String$fromInt, model.jf.k0.gh))
					})
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$labOtRankCont = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(20)
					]),
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle),
			_List_fromArray(
				[
					A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setLabels, config, model),
					A2(
					$mdgriffith$elm_ui$Element$map,
					model.bY,
					A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$alignTop,
								$mdgriffith$elm_ui$Element$alignRight
							]),
						_List_fromArray(
							[
								A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setOt, config, model),
								A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setRank, config, model)
							])))
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddLinkedDoc = {$: 68};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyLinkedDoc = {$: 67};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$OpenDocPicker = {$: 56};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveLinkedDoc = {$: 69};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLinkedDocDescr = function (a) {
	return {$: 72, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLinkedDocExpiry = function (a) {
	return {$: 73, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLinkedDocLabel = function (a) {
	return {$: 71, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$CloseDocPicker = {$: 57};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLinkedDocUrl = function (a) {
	return {$: 70, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$docPickerView = F2(
	function (config, model) {
		return A5($author$project$FileExplorer$FileExplorer$pickerView, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$CloseDocPicker, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLinkedDocUrl, 1, config, model.bY);
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectLinkedDoc = function (a) {
	return {$: 66, a: a};
};
var $mdgriffith$elm_ui$Element$Keyed$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.iJ + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.dt)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Keyed(children));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$hashLinkedDoc = function (_v0) {
	var url = _v0.d$;
	var descr = _v0.i_;
	var label = _v0.O;
	var expiryDate = _v0.i9;
	return $elm$core$String$fromInt(
		A2(
			$Skinney$murmur3$Murmur3$hashString,
			0,
			'linkedDocViewKey: ' + (url + (label + (A2($elm$core$Maybe$withDefault, 'descr', descr) + A2(
				$elm$core$Maybe$withDefault,
				'expiryDate',
				A2(
					$elm$core$Maybe$map,
					$elm$core$String$fromInt,
					A2(
						$elm$core$Maybe$map,
						$elm$time$Time$toMillis($elm$time$Time$utc),
						expiryDate))))))));
};
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$linkedDocView = F4(
	function (externalMsg, zone, selected, ld) {
		var url = ld.d$;
		var descr = ld.i_;
		var label = ld.O;
		var expiryDate = ld.i9;
		var key = function (res) {
			return _Utils_ap(
				res,
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$hashLinkedDoc(ld));
		}(
			A2(
				$elm$core$Maybe$withDefault,
				'NoLinkedDoc',
				A2($elm$core$Maybe$map, $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$hashLinkedDoc, selected)));
		var fileName = A2(
			$elm$core$Maybe$withDefault,
			'',
			$elm$core$List$head(
				$elm$core$List$reverse(
					A2(
						$elm$core$List$filter,
						function (x) {
							return x !== '';
						},
						A2($elm$core$String$split, '/', url)))));
		var expiryDateStr = A2(
			$elm$core$Maybe$map,
			$author$project$Internals$CommonHelpers$dateToStr(zone),
			expiryDate);
		return A2(
			$mdgriffith$elm_ui$Element$Keyed$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$Events$onClick(
					externalMsg(
						$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SelectLinkedDoc(ld))),
					$mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$padding(5),
					_Utils_eq(
					$elm$core$Maybe$Just(ld),
					selected) ? $mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey4) : $author$project$Internals$CommonStyleHelpers$noAttr,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
				]),
			A2(
				$elm$core$List$map,
				function (e) {
					return _Utils_Tuple2(key, e);
				},
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$bold,
										$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1),
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(300)),
										$mdgriffith$elm_ui$Element$clip
									]),
								$mdgriffith$elm_ui$Element$text(label)),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$size(12),
										$mdgriffith$elm_ui$Element$alignRight,
										$mdgriffith$elm_ui$Element$width(
										A2($mdgriffith$elm_ui$Element$maximum, 300, $mdgriffith$elm_ui$Element$fill)),
										$mdgriffith$elm_ui$Element$clip
									]),
								$mdgriffith$elm_ui$Element$text(fileName))
							])),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								A2(
								$elm$core$Maybe$withDefault,
								$mdgriffith$elm_ui$Element$none,
								A2(
									$elm$core$Maybe$map,
									function (d) {
										return A2(
											$mdgriffith$elm_ui$Element$el,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text(d));
									},
									descr)),
								A2(
								$elm$core$Maybe$withDefault,
								$mdgriffith$elm_ui$Element$none,
								A2(
									$elm$core$Maybe$map,
									function (ed) {
										return A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$alignRight]),
											$mdgriffith$elm_ui$Element$text(ed));
									},
									expiryDateStr))
							]))
					])));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setLinkedDocs = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
						]),
					$mdgriffith$elm_ui$Element$text('Documents associés')),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Border$width(2),
									$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(600)),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(200)),
									$mdgriffith$elm_ui$Element$scrollbars
								]),
							A2(
								$elm$core$List$map,
								function (ld) {
									return A4($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$linkedDocView, model.bY, config.fY, model.lv, ld);
								},
								model.jf.j4)),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$text,
									_Utils_ap(
										$author$project$Internals$CommonStyleHelpers$textInputStyle,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(230)),
												A2($mdgriffith$elm_ui$Element$spacingXY, 0, 15),
												$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
											])),
									{
										O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
										dJ: A2($elm$core$Basics$composeL, model.bY, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLinkedDocLabel),
										dO: $elm$core$Maybe$Just(
											A2(
												$mdgriffith$elm_ui$Element$Input$placeholder,
												_List_Nil,
												$mdgriffith$elm_ui$Element$text('Titre du document'))),
										dV: A2(
											$elm$core$Maybe$withDefault,
											'',
											A2(
												$elm$core$Maybe$map,
												function ($) {
													return $.O;
												},
												model.j3))
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$text,
									_Utils_ap(
										$author$project$Internals$CommonStyleHelpers$textInputStyle,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(230)),
												A2($mdgriffith$elm_ui$Element$spacingXY, 0, 15),
												$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
											])),
									{
										O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
										dJ: A2($elm$core$Basics$composeL, model.bY, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLinkedDocDescr),
										dO: $elm$core$Maybe$Just(
											A2(
												$mdgriffith$elm_ui$Element$Input$placeholder,
												_List_Nil,
												$mdgriffith$elm_ui$Element$text('Remarques/commentaires'))),
										dV: A2(
											$elm$core$Maybe$withDefault,
											'',
											A2(
												$elm$core$Maybe$andThen,
												function ($) {
													return $.i_;
												},
												model.j3))
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$text,
									_Utils_ap(
										$author$project$Internals$CommonStyleHelpers$textInputStyle,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(230)),
												(!_Utils_eq(
												A2(
													$elm$core$Maybe$andThen,
													function ($) {
														return $.i9;
													},
													model.j3),
												$elm$core$Maybe$Nothing)) ? $mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$green4) : $mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$red4),
												A2($mdgriffith$elm_ui$Element$spacingXY, 0, 15)
											])),
									{
										O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
										dJ: A2($elm$core$Basics$composeL, model.bY, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetLinkedDocExpiry),
										dO: $elm$core$Maybe$Just(
											A2(
												$mdgriffith$elm_ui$Element$Input$placeholder,
												_List_Nil,
												$mdgriffith$elm_ui$Element$text('Date expiration (jj/mm/aaaa))'))),
										dV: function () {
											var _v0 = A2(
												$elm$core$Maybe$andThen,
												function ($) {
													return $.i9;
												},
												model.j3);
											if (_v0.$ === 1) {
												return A2($elm$core$Maybe$withDefault, '', model.ja);
											} else {
												var t = _v0.a;
												return A2($author$project$Internals$CommonHelpers$dateToStr, config.fY, t);
											}
										}()
									}),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									A2(
										$mdgriffith$elm_ui$Element$Input$button,
										$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
										{
											O: A2(
												$mdgriffith$elm_ui$Element$el,
												_List_Nil,
												$mdgriffith$elm_ui$Element$text('Sélectionner document')),
											aI: $elm$core$Maybe$Just(
												model.bY($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$OpenDocPicker))
										}))
								]))
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$above(
							(!model.i1) ? $mdgriffith$elm_ui$Element$none : A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color(
										A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
										$mdgriffith$elm_ui$Element$width(
										A2(
											$mdgriffith$elm_ui$Element$minimum,
											850,
											A2($mdgriffith$elm_ui$Element$maximum, 920, $mdgriffith$elm_ui$Element$shrink))),
										$mdgriffith$elm_ui$Element$Border$shadow(
										{
											ic: 10,
											iA: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
											kD: _Utils_Tuple2(4, 4),
											fJ: 5
										})
									]),
								A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$docPickerView, config, model)))
						]),
					function () {
						var isExisting = _Utils_eq(
							A2(
								$elm$core$Maybe$map,
								function (ld) {
									return A2($elm$core$List$member, ld, model.jf.j4);
								},
								model.j3),
							$elm$core$Maybe$Just(true));
						var canModify = (!_Utils_eq(model.lv, $elm$core$Maybe$Nothing)) && ((!_Utils_eq(
							model.j3,
							$elm$core$Maybe$Just($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$emptyLinkedDoc))) && (!isExisting));
						var canDelete = (!_Utils_eq(model.lv, $elm$core$Maybe$Nothing)) && isExisting;
						var canAdd = function (res) {
							return _Utils_eq(
								res,
								$elm$core$Maybe$Just(true));
						}(
							A2($elm$core$Maybe$map, $author$project$GeneralDirectoryEditor$GeneralDirHelpers$validLinkedDoc, model.j3)) && (_Utils_eq(model.lv, $elm$core$Maybe$Nothing) && (!isExisting));
						return _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(canModify),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Modifier document')),
									aI: canModify ? $elm$core$Maybe$Just(
										model.bY($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ModifyLinkedDoc)) : $elm$core$Maybe$Nothing
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(canAdd),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Ajouter document')),
									aI: canAdd ? $elm$core$Maybe$Just(
										model.bY($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$AddLinkedDoc)) : $elm$core$Maybe$Nothing
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(canDelete),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Supprimer document')),
									aI: canDelete ? $elm$core$Maybe$Just(
										model.bY($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveLinkedDoc)) : $elm$core$Maybe$Nothing
								})
							]);
					}())
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$linkDocsCont = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(20)
					]),
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle),
			_List_fromArray(
				[
					A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setLinkedDocs, config, model)
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetNomEntite = function (a) {
	return {$: 31, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setNomEntite = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$alignTop
					]),
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						$author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(500)),
								$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
							])),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$Input$labelLeft,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerY]),
							A2(
								$mdgriffith$elm_ui$Element$row,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$bold,
												$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
											]),
										$mdgriffith$elm_ui$Element$text('Nom entité')),
										$author$project$Internals$CommonStyleHelpers$redStar
									]))),
						dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetNomEntite,
						dO: $elm$core$Maybe$Nothing,
						dV: model.jf.kB
					})
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$OpenVisualPicker = {$: 52};
var $mdgriffith$elm_ui$Element$Background$image = function (src) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2($elm$virtual_dom$VirtualDom$style, 'background', 'url(\"' + (src + '\") center / cover no-repeat')));
};
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setVisual = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$alignRight
					]),
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(150)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(113)),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey5)
						]),
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(138)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(104)),
								$mdgriffith$elm_ui$Element$Background$image(model.jf.mr),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY
							]),
						$mdgriffith$elm_ui$Element$none)),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$row,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text('Choisir visuel')),
									$author$project$Internals$CommonStyleHelpers$redStar
								])),
						aI: $elm$core$Maybe$Just(
							model.bY($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$OpenVisualPicker))
					})
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$nameVisualCont = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(20)
					]),
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$map,
					model.bY,
					A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setNomEntite, config, model)),
					A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setVisual, config, model)
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetOuverture = function (a) {
	return {$: 74, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setOuverture = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$formItemStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
						]),
					$mdgriffith$elm_ui$Element$text('Période d\'ouverture')),
					A2(
					$mdgriffith$elm_ui$Element$Input$radioRow,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					{
						O: $mdgriffith$elm_ui$Element$Input$labelHidden(''),
						dJ: $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetOuverture,
						g2: _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$option,
								1,
								$mdgriffith$elm_ui$Element$text('Toute l\'année')),
								A2(
								$mdgriffith$elm_ui$Element$Input$option,
								0,
								$mdgriffith$elm_ui$Element$text('Saisonniere'))
							]),
						hm: function () {
							var _v0 = model.jf.kN;
							if (!_v0.$) {
								var o = _v0.a;
								return $elm$core$Maybe$Just(o);
							} else {
								return $elm$core$Maybe$Just(1);
							}
						}()
					})
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$ouvertureCont = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$map,
			model.bY,
			A2(
				$mdgriffith$elm_ui$Element$column,
				$author$project$GeneralDirectoryEditor$GeneralDirMainFormView$containerStyle,
				_List_fromArray(
					[
						A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$setOuverture, config, model)
					])));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$CloseVisualPicker = {$: 53};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ConfirmVisual = function (a) {
	return {$: 58, a: a};
};
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$visualPickerView = F2(
	function (config, model) {
		return A5($author$project$FileExplorer$FileExplorer$pickerView, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$CloseVisualPicker, $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$ConfirmVisual, 0, config, model.bY);
	});
var $author$project$GeneralDirectoryEditor$GeneralDirMainFormView$editFicheView = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(20),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'flex-shrink', '1')),
					$mdgriffith$elm_ui$Element$clip,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$bold,
									$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1),
									$mdgriffith$elm_ui$Element$Font$size(18)
								]),
							$mdgriffith$elm_ui$Element$text('Modification/création fiche')),
							(!_Utils_eq(
							model.jf.dy,
							$elm$time$Time$millisToPosix(0))) ? A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignRight]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$bold,
											$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
										]),
									$mdgriffith$elm_ui$Element$text('Date dernière modification: ')),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text(
										A2($author$project$Internals$CommonHelpers$dateToStr, config.fY, model.jf.dy)))
								])) : $mdgriffith$elm_ui$Element$none
						])),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							A2($mdgriffith$elm_ui$Element$maximum, config.fr - 120, $mdgriffith$elm_ui$Element$fill)),
							$mdgriffith$elm_ui$Element$scrollbarY,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$inFront(
							(!model.mq) ? $mdgriffith$elm_ui$Element$none : A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color(
										A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
										$mdgriffith$elm_ui$Element$width(
										A2(
											$mdgriffith$elm_ui$Element$minimum,
											850,
											A2($mdgriffith$elm_ui$Element$maximum, 920, $mdgriffith$elm_ui$Element$shrink))),
										$mdgriffith$elm_ui$Element$Border$shadow(
										{
											ic: 10,
											iA: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
											kD: _Utils_Tuple2(4, 4),
											fJ: 5
										})
									]),
								A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$visualPickerView, config, model)))
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(35)
								]),
							_List_fromArray(
								[
									A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$nameVisualCont, config, model),
									A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$catsActivsCont, config, model),
									A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$labOtRankCont, config, model),
									A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$contactsCont, config, model),
									A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$descrCont, config, model),
									A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$linkDocsCont, config, model),
									A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$ouvertureCont, config, model)
								]))
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text('Annuler')),
								aI: $elm$core$Maybe$Just(
									model.bY(
										$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRightPanelDisplay(0)))
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$saveButtonStyle(
								$author$project$GeneralDirectoryEditor$GeneralDirHelpers$isValidFiche(model.jf)),
							{
								O: A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text('Sauvegarder fiche')),
								aI: $author$project$GeneralDirectoryEditor$GeneralDirHelpers$isValidFiche(model.jf) ? $elm$core$Maybe$Just(
									model.bY($author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SaveFiche)) : $elm$core$Maybe$Nothing
							})
						]))
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$NoOp = {$: 79};
var $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveFiche = {$: 76};
var $author$project$GeneralDirectoryEditor$FichePreview$subBlockStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(10),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey7),
		$mdgriffith$elm_ui$Element$Border$rounded(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
	]);
var $author$project$GeneralDirectoryEditor$FichePreview$activView = function (_v0) {
	var natureActiv = _v0.ko;
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_Utils_ap(
			$author$project$GeneralDirectoryEditor$FichePreview$subBlockStyle,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$bold, $mdgriffith$elm_ui$Element$Font$center])),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(
				A2($elm$core$String$join, ', ', natureActiv))
			]));
};
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $elm$html$Html$Attributes$target = $elm$html$Html$Attributes$stringProperty('target');
var $mdgriffith$elm_ui$Element$newTabLink = F2(
	function (attrs, _v0) {
		var url = _v0.d$;
		var label = _v0.O;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Attributes$target('_blank')),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.ea + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.bU + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.dB)))),
									attrs)))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$GeneralDirectoryEditor$FichePreview$telPreview = function (tel) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(10)
			]),
		function () {
			switch (tel.$) {
				case 0:
					var s = tel.a;
					return (s === '') ? _List_Nil : _List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$Font$bold]),
									$mdgriffith$elm_ui$Element$text('Tel. fixe: ')),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text(s))
								]))
						]);
				case 1:
					var s = tel.a;
					return (s === '') ? _List_Nil : _List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$Font$bold]),
									$mdgriffith$elm_ui$Element$text('Tel. portable: ')),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text(s))
								]))
						]);
				default:
					var _v1 = tel.a;
					var s1 = _v1.a;
					var s2 = _v1.b;
					return _List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$Font$bold]),
									$mdgriffith$elm_ui$Element$text('Tel. fixe: ')),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text(s1))
								])),
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$Font$bold]),
									$mdgriffith$elm_ui$Element$text('Tel. portable: ')),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text(s2))
								]))
						]);
			}
		}());
};
var $author$project$GeneralDirectoryEditor$FichePreview$responsablesView = function (responsables) {
	var respView = function (_v1) {
		var nom = _v1.kA;
		var poste = _v1.kY;
		var tel = _v1.l_;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(7),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text(poste)),
							(poste === '') ? $mdgriffith$elm_ui$Element$none : $mdgriffith$elm_ui$Element$text(', '),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text(nom))
						])),
					$author$project$GeneralDirectoryEditor$FichePreview$telPreview(tel)
				]));
	};
	if (!responsables.b) {
		return $mdgriffith$elm_ui$Element$none;
	} else {
		if (!responsables.b.b) {
			var resp = responsables.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(10)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$Font$bold]),
						$mdgriffith$elm_ui$Element$text('Responsable:')),
						respView(resp)
					]));
		} else {
			var resps = responsables;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(10)
					]),
				_Utils_ap(
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$Font$bold]),
							$mdgriffith$elm_ui$Element$text('Responsables:'))
						]),
					A2($elm$core$List$map, respView, resps)));
		}
	}
};
var $author$project$Internals$CommonStyleHelpers$teal4 = A3($mdgriffith$elm_ui$Element$rgb255, 60, 174, 163);
var $author$project$GeneralDirectoryEditor$FichePreview$contactView = function (_v0) {
	var adresse = _v0.hT;
	var telNumber = _v0.l$;
	var fax = _v0.je;
	var email = _v0.i4;
	var site = _v0.lE;
	var responsables = _v0.k9;
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_Utils_ap(
			$author$project$GeneralDirectoryEditor$FichePreview$subBlockStyle,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10)
				])),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(5)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$Font$bold]),
						$mdgriffith$elm_ui$Element$text('Adresse: ')),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text(adresse))
					])),
				A2(
				$elm$core$Maybe$withDefault,
				$mdgriffith$elm_ui$Element$none,
				A2($elm$core$Maybe$map, $author$project$GeneralDirectoryEditor$FichePreview$telPreview, telNumber)),
				A2(
				$elm$core$Maybe$withDefault,
				$mdgriffith$elm_ui$Element$none,
				A2(
					$elm$core$Maybe$map,
					function (f) {
						return A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(5)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$Font$bold]),
									$mdgriffith$elm_ui$Element$text('Fax:')),
									$mdgriffith$elm_ui$Element$text(f)
								]));
					},
					fax)),
				function () {
				if (!email.b) {
					return $mdgriffith$elm_ui$Element$none;
				} else {
					if (!email.b.b) {
						var mail = email.a;
						return A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(5)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$Font$bold]),
									$mdgriffith$elm_ui$Element$text('Email:')),
									$mdgriffith$elm_ui$Element$text(mail)
								]));
					} else {
						var emails = email;
						return A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$Font$bold]),
									$mdgriffith$elm_ui$Element$text('Emails: ')),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text(
										A2($elm$core$String$join, ', ', emails)))
								]));
					}
				}
			}(),
				A2(
				$elm$core$Maybe$withDefault,
				$mdgriffith$elm_ui$Element$none,
				A2(
					$elm$core$Maybe$map,
					function (_v2) {
						var siteName = _v2.a;
						var siteUrl = _v2.b;
						return A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$Font$bold]),
									$mdgriffith$elm_ui$Element$text('Site: ')),
									A2(
									$mdgriffith$elm_ui$Element$newTabLink,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal4)
										]),
									{
										O: $mdgriffith$elm_ui$Element$text(siteName),
										d$: siteUrl
									})
								]));
					},
					site)),
				$author$project$GeneralDirectoryEditor$FichePreview$responsablesView(responsables)
			]));
};
var $mdgriffith$elm_ui$Element$Font$italic = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.jW);
var $elm_community$string_extra$String$Extra$changeCase = F2(
	function (mutator, word) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function (_v0) {
					var head = _v0.a;
					var tail = _v0.b;
					return A2(
						$elm$core$String$cons,
						mutator(head),
						tail);
				},
				$elm$core$String$uncons(word)));
	});
var $elm$core$Char$toUpper = _Char_toUpper;
var $elm_community$string_extra$String$Extra$toSentenceCase = function (word) {
	return A2($elm_community$string_extra$String$Extra$changeCase, $elm$core$Char$toUpper, word);
};
var $author$project$GeneralDirectoryEditor$FichePreview$descriptionView = function (_v0) {
	var description = _v0.ei;
	var ouverture = _v0.kN;
	var _v1 = function () {
		if ((!ouverture.$) && (!ouverture.a)) {
			var _v3 = ouverture.a;
			return _Utils_Tuple2(
				true,
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$bold]),
					$mdgriffith$elm_ui$Element$text('Ouverture saisonniere')));
		} else {
			return _Utils_Tuple2(false, $mdgriffith$elm_ui$Element$none);
		}
	}();
	var displayOuv = _v1.a;
	var ouvertureView = _v1.b;
	if (!description.b) {
		return displayOuv ? A2(
			$mdgriffith$elm_ui$Element$column,
			$author$project$GeneralDirectoryEditor$FichePreview$subBlockStyle,
			_List_fromArray(
				[ouvertureView])) : $mdgriffith$elm_ui$Element$none;
	} else {
		var descr = description;
		var descrView = function (d) {
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$Font$italic]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text(
						$elm_community$string_extra$String$Extra$toSentenceCase(d))
					]));
		};
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				$author$project$GeneralDirectoryEditor$FichePreview$subBlockStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(10)
					])),
			_Utils_ap(
				A2($elm$core$List$map, descrView, descr),
				_List_fromArray(
					[ouvertureView])));
	}
};
var $author$project$GeneralDirectoryEditor$FichePreview$linkedDocsView = F2(
	function (currentTime, _v0) {
		var linkedDocs = _v0.j4;
		if (!linkedDocs.b) {
			return $mdgriffith$elm_ui$Element$none;
		} else {
			var ldocs = linkedDocs;
			var ldView = function (_v3) {
				var url = _v3.d$;
				var label = _v3.O;
				var descr = _v3.i_;
				var expiryDate = _v3.i9;
				var resView = A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(7),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{a2: 1, bc: 0, bl: 0, bq: 0}),
							$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey6),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							A2($mdgriffith$elm_ui$Element$paddingXY, 0, 5)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$newTabLink,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal4)
								]),
							{
								O: A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(5)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(16)),
													$mdgriffith$elm_ui$Element$height(
													$mdgriffith$elm_ui$Element$px(16)),
													$mdgriffith$elm_ui$Element$Background$uncropped('/assets/images/pdf.svg')
												]),
											$mdgriffith$elm_ui$Element$none),
											$mdgriffith$elm_ui$Element$text(label)
										])),
								d$: url
							}),
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Element$none,
							A2(
								$elm$core$Maybe$map,
								function (d) {
									return A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$size(14)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text(d)
											]));
								},
								descr))
						]));
				if (expiryDate.$ === 1) {
					return resView;
				} else {
					var ed = expiryDate.a;
					return (_Utils_cmp(
						$elm$time$Time$posixToMillis(ed),
						$elm$time$Time$posixToMillis(currentTime)) < 0) ? $mdgriffith$elm_ui$Element$none : resView;
				}
			};
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					$author$project$GeneralDirectoryEditor$FichePreview$subBlockStyle,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10)
						])),
				_Utils_ap(
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$Font$bold]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text('EN SAVOIR PLUS'))
								]))
						]),
					A2($elm$core$List$map, ldView, ldocs)));
		}
	});
var $elm$core$List$sort = function (xs) {
	return A2($elm$core$List$sortBy, $elm$core$Basics$identity, xs);
};
var $mdgriffith$elm_ui$Internal$Flag$bgGradient = $mdgriffith$elm_ui$Internal$Flag$flag(10);
var $mdgriffith$elm_ui$Element$Background$gradient = function (_v0) {
	var angle = _v0.h2;
	var steps = _v0.lP;
	if (!steps.b) {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		if (!steps.b.b) {
			var clr = steps.a;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$bgColor,
				A3(
					$mdgriffith$elm_ui$Internal$Model$Colored,
					'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
					'background-color',
					clr));
		} else {
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$bgGradient,
				A3(
					$mdgriffith$elm_ui$Internal$Model$Single,
					'bg-grad-' + A2(
						$elm$core$String$join,
						'-',
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$floatClass(angle),
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$formatColorClass, steps))),
					'background-image',
					'linear-gradient(' + (A2(
						$elm$core$String$join,
						', ',
						A2(
							$elm$core$List$cons,
							$elm$core$String$fromFloat(angle) + 'rad',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$formatColor, steps))) + ')')));
		}
	}
};
var $mdgriffith$elm_ui$Internal$Model$formatTextShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		_List_fromArray(
			[
				$elm$core$String$fromFloat(shadow.kD.a) + 'px',
				$elm$core$String$fromFloat(shadow.kD.b) + 'px',
				$elm$core$String$fromFloat(shadow.ic) + 'px',
				$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.iA)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textShadowClass = function (shadow) {
	return $elm$core$String$concat(
		_List_fromArray(
			[
				'txt',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.kD.a) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.kD.b) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.ic) + 'px',
				$mdgriffith$elm_ui$Internal$Model$formatColorClass(shadow.iA)
			]));
};
var $mdgriffith$elm_ui$Internal$Flag$txtShadows = $mdgriffith$elm_ui$Internal$Flag$flag(18);
var $mdgriffith$elm_ui$Element$Font$shadow = function (shade) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$txtShadows,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			$mdgriffith$elm_ui$Internal$Model$textShadowClass(shade),
			'text-shadow',
			$mdgriffith$elm_ui$Internal$Model$formatTextShadow(shade)));
};
var $author$project$GeneralDirectoryEditor$FichePreview$starsView = function (n) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(80)),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(50)),
				$mdgriffith$elm_ui$Element$Background$gradient(
				{
					h2: 0,
					lP: _List_fromArray(
						[
							A3($mdgriffith$elm_ui$Element$rgb255, 85, 112, 83),
							A3($mdgriffith$elm_ui$Element$rgb255, 143, 188, 139),
							A3($mdgriffith$elm_ui$Element$rgb255, 85, 112, 83)
						])
				})
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$paddingEach(
						{a2: 0, bc: 0, bl: 0, bq: 5}),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Font$center,
						$mdgriffith$elm_ui$Element$Font$size(12),
						$mdgriffith$elm_ui$Element$Font$color(
						A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 255))
					]),
				$mdgriffith$elm_ui$Element$text('Classement')),
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Font$center,
								$mdgriffith$elm_ui$Element$Font$size(18),
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb255, 255, 215, 0)),
								$mdgriffith$elm_ui$Element$Font$shadow(
								{
									ic: 1,
									iA: A3($mdgriffith$elm_ui$Element$rgb255, 25, 21, 0),
									kD: _Utils_Tuple2(1, 0)
								})
							]),
						$mdgriffith$elm_ui$Element$text(
							A2($elm$core$String$repeat, n, '🟊')))
					]))
			]));
};
var $author$project$GeneralDirectoryEditor$FichePreview$refView = F2(
	function (maxWidth, _v0) {
		var refOt = _v0.k3;
		var label = _v0.O;
		var rank = _v0.k0;
		var toImage = function (_v8) {
			var lien = _v8.j2;
			var logo = _v8.j9;
			return {jx: logo.jx, dB: lien, d$: logo.d$, mt: logo.mt};
		};
		var refOtView = function () {
			if (!refOt.$) {
				var _v7 = refOt.a;
				var ref = _v7.a;
				var link = _v7.b;
				return A2(
					$mdgriffith$elm_ui$Element$wrappedRow,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(5)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$Font$bold]),
							$mdgriffith$elm_ui$Element$text('Référence office de tourisme:  ')),
							A2(
							$mdgriffith$elm_ui$Element$newTabLink,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal4)
								]),
							{
								O: $mdgriffith$elm_ui$Element$text(
									$elm$core$String$fromInt(ref)),
								d$: link
							})
						]));
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		}();
		var _v1 = function () {
			var _v2 = rank.lK;
			if (!_v2.$) {
				var n = _v2.a;
				return _Utils_Tuple2(
					_List_fromArray(
						[
							{jx: 50, dB: 'https://etoiles-de-france.fr/', d$: 'stars', mt: 80}
						]),
					n);
			} else {
				return _Utils_Tuple2(_List_Nil, 0);
			}
		}();
		var stars = _v1.a;
		var nbrStars = _v1.b;
		var images = _Utils_ap(
			stars,
			A2($elm$core$List$map, toImage, label));
		var minHeight = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				$elm$core$Basics$min(50),
				$elm$core$List$head(
					$elm$core$List$sort(
						A2(
							$elm$core$List$map,
							function ($) {
								return $.jx;
							},
							images)))));
		var imgsScaledToMinHeight = function () {
			var scale = function (_v5) {
				var url = _v5.d$;
				var width = _v5.mt;
				var height = _v5.jx;
				var link = _v5.dB;
				return {jx: minHeight + 5, dB: link, d$: url, mt: (minHeight * width) / height};
			};
			return A2($elm$core$List$map, scale, images);
		}();
		var totalImgWidth = A3(
			$elm$core$List$foldr,
			F2(
				function (i, n) {
					return i.mt + n;
				}),
			0,
			imgsScaledToMinHeight);
		var logoView = function (_v4) {
			var url = _v4.d$;
			var width = _v4.mt;
			var height = _v4.jx;
			var link = _v4.dB;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						(_Utils_cmp(totalImgWidth, maxWidth) < 0) ? $mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(
							$elm$core$Basics$round(width))) : $mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$fillPortion(
							$elm$core$Basics$floor((10000 * width) / totalImgWidth)))
					]),
				A2(
					$mdgriffith$elm_ui$Element$newTabLink,
					_List_Nil,
					{
						O: (url === 'stars') ? $author$project$GeneralDirectoryEditor$FichePreview$starsView(nbrStars) : A2(
							$mdgriffith$elm_ui$Element$image,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							{ei: '', fK: url}),
						d$: link
					}));
		};
		var logosView = function () {
			if (!images.b) {
				return $mdgriffith$elm_ui$Element$none;
			} else {
				return A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					A2($elm$core$List$map, logoView, imgsScaledToMinHeight));
			}
		}();
		return (_Utils_eq(refOt, $elm$core$Maybe$Nothing) && _Utils_eq(images, _List_Nil)) ? $mdgriffith$elm_ui$Element$none : A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				$author$project$GeneralDirectoryEditor$FichePreview$subBlockStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(10)
					])),
			_List_fromArray(
				[refOtView, logosView]));
	});
var $mdgriffith$elm_ui$Element$rgba255 = F4(
	function (red, green, blue, a) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, a);
	});
var $author$project$Internals$CommonStyleHelpers$aliceBlue = A4($mdgriffith$elm_ui$Element$rgba255, 240, 248, 255, 1);
var $author$project$Internals$CommonStyleHelpers$blockLinkGrey = A3($mdgriffith$elm_ui$Element$rgb255, 119, 136, 153);
var $author$project$Internals$CommonStyleHelpers$blockLinkGreyAlpha = function (a) {
	return A4($mdgriffith$elm_ui$Element$rgba255, 119, 136, 153, a);
};
var $author$project$Internals$CommonStyleHelpers$unselectable = A2(
	$elm$core$List$map,
	$mdgriffith$elm_ui$Element$htmlAttribute,
	_List_fromArray(
		[
			A2($elm$html$Html$Attributes$style, '-webkit-touch-callout', 'none'),
			A2($elm$html$Html$Attributes$style, '-webkit-user-select', 'none'),
			A2($elm$html$Html$Attributes$style, '-khtml-user-select', 'none'),
			A2($elm$html$Html$Attributes$style, '-moz-user-select', 'none'),
			A2($elm$html$Html$Attributes$style, '-ms-user-select', 'none'),
			A2($elm$html$Html$Attributes$style, 'user-select', 'none')
		]));
var $author$project$GeneralDirectoryEditor$FichePreview$visualPreview = F3(
	function (handler, maxWidth, _v0) {
		var uuid = _v0.fS;
		var nomEntite = _v0.kB;
		var visuel = _v0.mr;
		var w = $elm$core$Basics$round(maxWidth);
		var h = $elm$core$Basics$round(maxWidth / 1.333333333);
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(w)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(h)),
					$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$blockLinkGrey),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							$author$project$Internals$CommonStyleHelpers$blockLinkGreyAlpha(0.5))
						])),
					$mdgriffith$elm_ui$Element$Events$onClick(
					handler(
						$TSFoster$elm_uuid$UUID$toString(uuid))),
					$mdgriffith$elm_ui$Element$pointer
				]),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(w - 12)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(h - 12)),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Background$image(visuel),
						$mdgriffith$elm_ui$Element$inFront(
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$alignBottom,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$padding(10),
									$mdgriffith$elm_ui$Element$Background$color(
									$author$project$Internals$CommonStyleHelpers$blockLinkGreyAlpha(0.8)),
									$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$aliceBlue)
								]),
							A2(
								$mdgriffith$elm_ui$Element$el,
								_Utils_ap(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$center,
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
										]),
									$author$project$Internals$CommonStyleHelpers$unselectable),
								A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_Nil,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text(nomEntite)
										])))))
					]),
				$mdgriffith$elm_ui$Element$none));
	});
var $author$project$GeneralDirectoryEditor$FichePreview$wrapperStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(10),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
		$mdgriffith$elm_ui$Element$Border$rounded(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
	]);
var $author$project$GeneralDirectoryEditor$FichePreview$ficheView = F5(
	function (handler, currentTime, maxWidth, isOpen, fiche) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(
						$elm$core$Basics$round(maxWidth))),
					$mdgriffith$elm_ui$Element$clip
				]),
			_List_fromArray(
				[
					A3($author$project$GeneralDirectoryEditor$FichePreview$visualPreview, handler, maxWidth, fiche),
					isOpen ? A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						$author$project$GeneralDirectoryEditor$FichePreview$wrapperStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(10)
							])),
					_List_fromArray(
						[
							$author$project$GeneralDirectoryEditor$FichePreview$activView(fiche),
							A2($author$project$GeneralDirectoryEditor$FichePreview$refView, maxWidth, fiche),
							$author$project$GeneralDirectoryEditor$FichePreview$contactView(fiche),
							$author$project$GeneralDirectoryEditor$FichePreview$descriptionView(fiche),
							A2($author$project$GeneralDirectoryEditor$FichePreview$linkedDocsView, currentTime, fiche)
						])) : $mdgriffith$elm_ui$Element$none
				]));
	});
var $author$project$GeneralDirectoryEditor$FichePreview$fichePreview = F3(
	function (handler, currentTime, f) {
		return A5($author$project$GeneralDirectoryEditor$FichePreview$ficheView, handler, currentTime, 440, true, f);
	});
var $author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$previewFicheView = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(15),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$scrollbarY,
				$mdgriffith$elm_ui$Element$alignTop
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$bold,
						$mdgriffith$elm_ui$Element$Font$size(18)
					]),
				$mdgriffith$elm_ui$Element$text('Aperçu fiche')),
				A2(
				$elm$core$Maybe$withDefault,
				$mdgriffith$elm_ui$Element$none,
				A2(
					$elm$core$Maybe$map,
					A2(
						$author$project$GeneralDirectoryEditor$FichePreview$fichePreview,
						function (_v0) {
							return $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$NoOp;
						},
						model.iP),
					A2(
						$elm$core$Maybe$andThen,
						function (id) {
							return A2($elm$core$Dict$get, id, model.jg);
						},
						model.lt))),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						function () {
						var _v1 = model.lt;
						if (_v1.$ === 1) {
							return A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Nouvelle fiche')),
									aI: $elm$core$Maybe$Just(
										$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRightPanelDisplay(1))
								});
						} else {
							return A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Modifier fiche')),
									aI: $elm$core$Maybe$Just(
										$author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$SetRightPanelDisplay(1))
								});
						}
					}(),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$deleteButtonStyle(
							!_Utils_eq(model.lt, $elm$core$Maybe$Nothing)),
						{
							O: A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$text('Supprimer fiche')),
							aI: A2(
								$elm$core$Maybe$map,
								function (_v2) {
									return $author$project$GeneralDirectoryEditor$GeneralDirCommonTypes$RemoveFiche;
								},
								model.lt)
						})
					]))
			]));
};
var $author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$formsView = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					function () {
					var _v0 = model.lb;
					if (!_v0) {
						return A2(
							$mdgriffith$elm_ui$Element$map,
							model.bY,
							$author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$previewFicheView(model));
					} else {
						return A2($author$project$GeneralDirectoryEditor$GeneralDirMainFormView$editFicheView, config, model);
					}
				}()
				]));
	});
var $author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$view = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(15),
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'flex-shrink', '1')),
					$mdgriffith$elm_ui$Element$clip,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					A2($mdgriffith$elm_ui$Element$maximum, config.fr, $mdgriffith$elm_ui$Element$fill))
				]),
			_List_fromArray(
				[
					(model.lb === 1) ? $mdgriffith$elm_ui$Element$none : A2(
					$mdgriffith$elm_ui$Element$map,
					model.bY,
					$author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$ficheSelectorView(model)),
					A2($author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$formsView, config, model)
				]));
	});
var $author$project$Help$Help$Toogle = function (a) {
	return {$: 0, a: a};
};
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$getTree = function (_v0) {
	var tree = _v0.a;
	return tree;
};
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$current = A2($elm$core$Basics$composeL, $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$item, $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$getTree);
var $turboMaCk$lazy_tree_with_zipper$Lazy$force = function (piece) {
	if (piece.$ === 1) {
		var a = piece.a;
		return a;
	} else {
		var thunk = piece.a;
		return thunk(0);
	}
};
var $turboMaCk$lazy_tree_with_zipper$Lazy$LList$toList = $turboMaCk$lazy_tree_with_zipper$Lazy$force;
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$children = A2(
	$elm$core$Basics$composeL,
	A2(
		$elm$core$Basics$composeL,
		$elm$core$List$map($turboMaCk$lazy_tree_with_zipper$Lazy$Tree$item),
		$turboMaCk$lazy_tree_with_zipper$Lazy$LList$toList),
	$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$descendants);
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$isEmpty = A2($elm$core$Basics$composeL, $elm$core$List$isEmpty, $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$children);
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$isEmpty = function (_v0) {
	var tree = _v0.a;
	return $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$isEmpty(tree);
};
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$Breadcrumb = $elm$core$Basics$identity;
var $turboMaCk$lazy_tree_with_zipper$Lazy$LList$empty = A2($turboMaCk$lazy_tree_with_zipper$Lazy$LList$llist, $elm$core$Basics$identity, _List_Nil);
var $turboMaCk$lazy_tree_with_zipper$Lazy$map = F2(
	function (f, a) {
		return $turboMaCk$lazy_tree_with_zipper$Lazy$lazy(
			function (_v0) {
				return f(
					$turboMaCk$lazy_tree_with_zipper$Lazy$force(a));
			});
	});
var $turboMaCk$lazy_tree_with_zipper$Lazy$LList$cons = function (a) {
	return $turboMaCk$lazy_tree_with_zipper$Lazy$map(
		$elm$core$List$cons(a));
};
var $turboMaCk$lazy_tree_with_zipper$Lazy$LList$fromList = $turboMaCk$lazy_tree_with_zipper$Lazy$LList$llist($elm$core$Basics$identity);
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$sliceForest_ = F3(
	function (acc, left, right) {
		sliceForest_:
		while (true) {
			var _v0 = $turboMaCk$lazy_tree_with_zipper$Lazy$LList$toList(right);
			if (!_v0.b) {
				return $elm$core$List$reverse(acc);
			} else {
				var head = _v0.a;
				var tail = _v0.b;
				var newItem = _Utils_Tuple3(
					left,
					head,
					$turboMaCk$lazy_tree_with_zipper$Lazy$LList$fromList(tail));
				var $temp$acc = A2($elm$core$List$cons, newItem, acc),
					$temp$left = A2($turboMaCk$lazy_tree_with_zipper$Lazy$LList$cons, head, left),
					$temp$right = $turboMaCk$lazy_tree_with_zipper$Lazy$LList$fromList(tail);
				acc = $temp$acc;
				left = $temp$left;
				right = $temp$right;
				continue sliceForest_;
			}
		}
	});
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$sliceForest = A2($turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$sliceForest_, _List_Nil, $turboMaCk$lazy_tree_with_zipper$Lazy$LList$empty);
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$openAll = function (_v0) {
	var tree = _v0.a;
	var zipperBreadcrumbs = _v0.b;
	return A2(
		$elm$core$List$map,
		function (_v1) {
			var left = _v1.a;
			var parent = _v1.b;
			var right = _v1.c;
			return A2(
				$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$Zipper,
				parent,
				A2(
					$elm$core$List$cons,
					{
						bc: left,
						eF: $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$item(tree),
						bl: right
					},
					zipperBreadcrumbs));
		},
		$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$sliceForest(
			$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$descendants(tree)));
};
var $author$project$Help$Help$indexView = F3(
	function (model, offset, zipper) {
		var _v0 = $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$current(zipper);
		var isOpen = _v0.a;
		var entry = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(7),
							$mdgriffith$elm_ui$Element$Font$size(15),
							A2($mdgriffith$elm_ui$Element$paddingXY, 0, 6)
						]),
					_List_fromArray(
						[
							(!$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$isEmpty(zipper)) ? A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Events$onClick(
									$author$project$Help$Help$Toogle(zipper)),
									$mdgriffith$elm_ui$Element$pointer
								]),
							$mdgriffith$elm_ui$Element$text(
								isOpen ? '-' : '+')) : $mdgriffith$elm_ui$Element$text(' '),
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$pointer,
									$mdgriffith$elm_ui$Element$Events$onClick(
									A2($author$project$Help$Help$SetCurrentPage, false, entry.a)),
									_Utils_eq(entry.a, model.cx) ? $mdgriffith$elm_ui$Element$Font$color(
									A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 1)) : $author$project$Internals$CommonStyleHelpers$noAttr
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text(entry.fP)
								]))
						])),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Element$paddingXY, 10, 0)
						]),
					isOpen ? A2(
						$elm$core$List$map,
						A2($author$project$Help$Help$indexView, model, offset + 1),
						$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$openAll(zipper)) : _List_Nil)
				]));
	});
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$attempt = F2(
	function (action, zipper) {
		return A2(
			$elm$core$Maybe$withDefault,
			zipper,
			action(zipper));
	});
var $turboMaCk$lazy_tree_with_zipper$Lazy$map2 = F3(
	function (f, a, b) {
		return $turboMaCk$lazy_tree_with_zipper$Lazy$lazy(
			function (_v0) {
				return A2(
					f,
					$turboMaCk$lazy_tree_with_zipper$Lazy$force(a),
					$turboMaCk$lazy_tree_with_zipper$Lazy$force(b));
			});
	});
var $turboMaCk$lazy_tree_with_zipper$Lazy$LList$append = $turboMaCk$lazy_tree_with_zipper$Lazy$map2($elm$core$Basics$append);
var $turboMaCk$lazy_tree_with_zipper$Lazy$LList$reverse = $turboMaCk$lazy_tree_with_zipper$Lazy$map($elm$core$List$reverse);
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$up = function (_v0) {
	var tree = _v0.a;
	var zipperBreadcrumbs = _v0.b;
	if (!zipperBreadcrumbs.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var left = zipperBreadcrumbs.a.bc;
		var parent = zipperBreadcrumbs.a.eF;
		var right = zipperBreadcrumbs.a.bl;
		var tail = zipperBreadcrumbs.b;
		return $elm$core$Maybe$Just(
			A2(
				$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$Zipper,
				A2(
					$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Tree,
					parent,
					A2(
						$turboMaCk$lazy_tree_with_zipper$Lazy$LList$append,
						$turboMaCk$lazy_tree_with_zipper$Lazy$LList$reverse(left),
						A2($turboMaCk$lazy_tree_with_zipper$Lazy$LList$cons, tree, right))),
				tail));
	}
};
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$upwards = F2(
	function (n, zipper) {
		return (n < 0) ? $elm$core$Maybe$Nothing : ((!n) ? $elm$core$Maybe$Just(zipper) : A2(
			$elm$core$Maybe$andThen,
			$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$upwards(n - 1),
			$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$up(zipper)));
	});
var $turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$root = function (zipper) {
	var zipperBreadcrumbs = zipper.b;
	return A2(
		$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$attempt,
		$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$upwards(
			$elm$core$List$length(zipperBreadcrumbs)),
		zipper);
};
var $mdgriffith$elm_ui$Internal$Flag$borderStyle = $mdgriffith$elm_ui$Internal$Flag$flag(11);
var $mdgriffith$elm_ui$Element$Border$solid = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$borderStyle, $mdgriffith$elm_ui$Internal$Style$classes.ih);
var $author$project$Help$Help$leftPanelView = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$Font$size(16),
					$mdgriffith$elm_ui$Element$Font$family(_List_Nil),
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$padding(15),
					$mdgriffith$elm_ui$Element$height(
					A2($mdgriffith$elm_ui$Element$maximum, config.fr, $mdgriffith$elm_ui$Element$fill))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$scrollbars,
							$mdgriffith$elm_ui$Element$width(
							A2(
								$mdgriffith$elm_ui$Element$minimum,
								400,
								A2($mdgriffith$elm_ui$Element$maximum, 500, $mdgriffith$elm_ui$Element$fill))),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$Border$solid,
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{a2: 0, bc: 0, bl: 2, bq: 0}),
							$mdgriffith$elm_ui$Element$Border$color(
							A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8))
						]),
					function () {
						var _v0 = model.gB;
						if (!_v0.$) {
							var zipper = _v0.a;
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_List_Nil,
								_List_fromArray(
									[
										A3(
										$author$project$Help$Help$indexView,
										model,
										0,
										$turboMaCk$lazy_tree_with_zipper$Lazy$Tree$Zipper$root(zipper))
									]));
						} else {
							return $mdgriffith$elm_ui$Element$none;
						}
					}())
				]));
	});
var $author$project$Help$Help$ImgLoaded = function (a) {
	return {$: 4, a: a};
};
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $elm$html$Html$img = _VirtualDom_node('img');
var $elm$core$Dict$isEmpty = function (dict) {
	if (dict.$ === -2) {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Set$isEmpty = function (_v0) {
	var dict = _v0;
	return $elm$core$Dict$isEmpty(dict);
};
var $author$project$Help$Help$mainView = F2(
	function (config, model) {
		var _v0 = model.cx;
		var currentAnchor = _v0.a;
		var currentId = _v0.b;
		var contentView = function (_v1) {
			var anchor = _v1.a;
			var url = _v1.b;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					A2($elm$core$Set$member, url, model.dD) ? _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(600)),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(800))
						]) : _List_Nil),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$image,
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$htmlAttribute(
									$elm$html$Html$Attributes$id(
										currentId + (' ' + $elm$core$String$fromInt(anchor)))),
									$mdgriffith$elm_ui$Element$centerX
								]),
							A2($elm$core$Set$member, url, model.dD) ? _List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY, $mdgriffith$elm_ui$Element$clip]) : _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									A2($mdgriffith$elm_ui$Element$maximum, 800, $mdgriffith$elm_ui$Element$fill))
								])),
						{
							ei: '',
							fK: A2($elm$core$Set$member, url, model.dD) ? '/assets/images/loading.gif' : url
						}),
						$mdgriffith$elm_ui$Element$html(
						A2(
							$elm$html$Html$img,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$hidden(true),
									A2(
									$elm$html$Html$Events$on,
									'load',
									$elm$json$Json$Decode$succeed(
										$author$project$Help$Help$ImgLoaded(url))),
									$elm$html$Html$Attributes$src(url)
								]),
							_List_Nil))
					]));
		};
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$scrollbarY,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id('MainPanel')),
					(!$elm$core$Set$isEmpty(model.dD)) ? $mdgriffith$elm_ui$Element$alpha(0.7) : $author$project$Internals$CommonStyleHelpers$noAttr
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$padding(15),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$id(currentId + ' 0')),
							$mdgriffith$elm_ui$Element$Font$size(22),
							$mdgriffith$elm_ui$Element$Font$bold
						]),
					$mdgriffith$elm_ui$Element$text(
						A2(
							$elm$core$Maybe$withDefault,
							'',
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.fP;
								},
								A2($elm$core$Dict$get, currentId, model.dd))))),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$id('MainContent'))
						]),
					A2(
						$elm$core$List$map,
						contentView,
						A2(
							$elm$core$Maybe$withDefault,
							_List_Nil,
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.iI;
								},
								A2($elm$core$Dict$get, currentId, model.dd)))))
				]));
	});
var $author$project$Help$Help$view = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$map,
			model.bY,
			A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$clip,
						$mdgriffith$elm_ui$Element$htmlAttribute(
						A2($elm$html$Html$Attributes$style, 'flex-shrink', '1')),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2($author$project$Help$Help$leftPanelView, config, model),
						A2($author$project$Help$Help$mainView, config, model)
					])));
	});
var $author$project$NewsEditor$NewsEditor$SaveNews = {$: 12};
var $author$project$NewsEditor$NewsEditor$SetExpiry = function (a) {
	return {$: 3, a: a};
};
var $author$project$NewsEditor$NewsEditor$SetTitle = function (a) {
	return {$: 2, a: a};
};
var $author$project$NewsEditor$NewsEditor$ToNewsSelector = {$: 5};
var $author$project$NewsEditor$NewsEditor$ToogleContentPreview = {$: 6};
var $author$project$NewsEditor$NewsEditor$containerStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(15),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
		$mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var $author$project$NewsEditor$NewsEditor$itemStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(15),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey7),
		$mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$GetHtmlContent = function (a) {
	return {$: 0, a: a};
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$GetSelection = {$: 1};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$InsertDocLink = function (a) {
	return {$: 9, a: a};
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$InsertInternalLink = function (a) {
	return {$: 7, a: a};
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$OpenBackgroundColorPicker = {$: 5};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$OpenDocPicker = {$: 8};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$OpenFontColorPicker = {$: 4};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$OpenInternalLinks = {$: 6};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$SetAlignMent = function (a) {
	return {$: 14, a: a};
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$SetBackgroundColor = F2(
	function (a, b) {
		return {$: 11, a: a, b: b};
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$SetFont = F2(
	function (a, b) {
		return {$: 12, a: a, b: b};
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$SetFontSize = F2(
	function (a, b) {
		return {$: 13, a: a, b: b};
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$SetTextColor = F2(
	function (a, b) {
		return {$: 10, a: a, b: b};
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$UndoStyle = {$: 15};
var $author$project$Internals$Icons$alignCenter = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'align-center',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('18'),
						$elm$svg$Svg$Attributes$y1('10'),
						$elm$svg$Svg$Attributes$x2('6'),
						$elm$svg$Svg$Attributes$y2('10')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('21'),
						$elm$svg$Svg$Attributes$y1('6'),
						$elm$svg$Svg$Attributes$x2('3'),
						$elm$svg$Svg$Attributes$y2('6')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('21'),
						$elm$svg$Svg$Attributes$y1('14'),
						$elm$svg$Svg$Attributes$x2('3'),
						$elm$svg$Svg$Attributes$y2('14')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('18'),
						$elm$svg$Svg$Attributes$y1('18'),
						$elm$svg$Svg$Attributes$x2('6'),
						$elm$svg$Svg$Attributes$y2('18')
					]),
				_List_Nil)
			]));
};
var $author$project$Internals$Icons$alignJustify = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'align-justify',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('21'),
						$elm$svg$Svg$Attributes$y1('10'),
						$elm$svg$Svg$Attributes$x2('3'),
						$elm$svg$Svg$Attributes$y2('10')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('21'),
						$elm$svg$Svg$Attributes$y1('6'),
						$elm$svg$Svg$Attributes$x2('3'),
						$elm$svg$Svg$Attributes$y2('6')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('21'),
						$elm$svg$Svg$Attributes$y1('14'),
						$elm$svg$Svg$Attributes$x2('3'),
						$elm$svg$Svg$Attributes$y2('14')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('21'),
						$elm$svg$Svg$Attributes$y1('18'),
						$elm$svg$Svg$Attributes$x2('3'),
						$elm$svg$Svg$Attributes$y2('18')
					]),
				_List_Nil)
			]));
};
var $author$project$Internals$Icons$alignLeft = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'align-left',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('17'),
						$elm$svg$Svg$Attributes$y1('10'),
						$elm$svg$Svg$Attributes$x2('3'),
						$elm$svg$Svg$Attributes$y2('10')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('21'),
						$elm$svg$Svg$Attributes$y1('6'),
						$elm$svg$Svg$Attributes$x2('3'),
						$elm$svg$Svg$Attributes$y2('6')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('21'),
						$elm$svg$Svg$Attributes$y1('14'),
						$elm$svg$Svg$Attributes$x2('3'),
						$elm$svg$Svg$Attributes$y2('14')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('17'),
						$elm$svg$Svg$Attributes$y1('18'),
						$elm$svg$Svg$Attributes$x2('3'),
						$elm$svg$Svg$Attributes$y2('18')
					]),
				_List_Nil)
			]));
};
var $author$project$Internals$Icons$alignRight = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'align-right',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('21'),
						$elm$svg$Svg$Attributes$y1('10'),
						$elm$svg$Svg$Attributes$x2('7'),
						$elm$svg$Svg$Attributes$y2('10')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('21'),
						$elm$svg$Svg$Attributes$y1('6'),
						$elm$svg$Svg$Attributes$x2('3'),
						$elm$svg$Svg$Attributes$y2('6')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('21'),
						$elm$svg$Svg$Attributes$y1('14'),
						$elm$svg$Svg$Attributes$x2('3'),
						$elm$svg$Svg$Attributes$y2('14')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('21'),
						$elm$svg$Svg$Attributes$y1('18'),
						$elm$svg$Svg$Attributes$x2('7'),
						$elm$svg$Svg$Attributes$y2('18')
					]),
				_List_Nil)
			]));
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$buttonStyle = function (isActive) {
	return _Utils_ap(
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Border$rounded(5),
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$padding(5),
				$mdgriffith$elm_ui$Element$focused(
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Border$glow,
						A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
						0)
					]))
			]),
		isActive ? _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9)),
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color(
						A3($mdgriffith$elm_ui$Element$rgb, 255, 255, 255))
					])),
				$mdgriffith$elm_ui$Element$Border$width(1),
				$mdgriffith$elm_ui$Element$Border$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
			]) : _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95)),
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0.7, 0.7)),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'cursor', 'default')),
				$mdgriffith$elm_ui$Element$Border$width(1),
				$mdgriffith$elm_ui$Element$Border$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95))
			]));
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$chunks = F2(
	function (n, xs) {
		var helper = F2(
			function (acc, ys) {
				helper:
				while (true) {
					if (!ys.b) {
						return $elm$core$List$reverse(acc);
					} else {
						var $temp$acc = A2(
							$elm$core$List$cons,
							A2($elm$core$List$take, n, ys),
							acc),
							$temp$ys = A2($elm$core$List$drop, n, ys);
						acc = $temp$acc;
						ys = $temp$ys;
						continue helper;
					}
				}
			});
		return A2(helper, _List_Nil, xs);
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$hexToColor = function (hexColor) {
	var hexColor_ = $elm$core$String$toLower(hexColor);
	var red = A2(
		$elm$core$Result$withDefault,
		0,
		$rtfeldman$elm_hex$Hex$fromString(
			A2($elm$core$String$left, 2, hexColor_)));
	var green = A2(
		$elm$core$Result$withDefault,
		0,
		$rtfeldman$elm_hex$Hex$fromString(
			A2(
				$elm$core$String$left,
				2,
				A2($elm$core$String$dropLeft, 2, hexColor_))));
	var blue = A2(
		$elm$core$Result$withDefault,
		0,
		$rtfeldman$elm_hex$Hex$fromString(
			A2(
				$elm$core$String$left,
				2,
				A2($elm$core$String$dropLeft, 4, hexColor_))));
	return A3($mdgriffith$elm_ui$Element$rgb, red / 255, green / 255, blue / 255);
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$colorPicker = F7(
	function (id, isActive, colorPickerOpen, currentColor, openMsg, handler, label) {
		var currentColor_ = A2(
			$elm$core$Maybe$withDefault,
			A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
			A2(
				$elm$core$Maybe$map,
				$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$hexToColor,
				A2(
					$elm$core$Maybe$andThen,
					function (c) {
						return A2($elm$core$Dict$get, c, $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$webColors);
					},
					currentColor)));
		var colorPanView = function (_v0) {
			var colname = _v0.a;
			var colhex = _v0.b;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(14)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(14)),
						$mdgriffith$elm_ui$Element$Background$color(
						$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$hexToColor(colhex)),
						$mdgriffith$elm_ui$Element$Border$width(1),
						$mdgriffith$elm_ui$Element$Border$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0)),
						$mdgriffith$elm_ui$Element$pointer,
						$mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Border$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
							])),
						$mdgriffith$elm_ui$Element$Events$onClick(
						handler(colname))
					]),
				$mdgriffith$elm_ui$Element$none);
		};
		var colors = A2(
			$elm$core$List$map,
			function (r) {
				return A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(3)
						]),
					A2($elm$core$List$map, colorPanView, r));
			},
			A2(
				$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$chunks,
				12,
				$elm$core$Dict$toList($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$webColors)));
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$below(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95))
							]),
						colorPickerOpen ? A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(3),
									$mdgriffith$elm_ui$Element$padding(10)
								]),
							colors) : $mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id(id))
				]),
			A2(
				$mdgriffith$elm_ui$Element$Input$button,
				$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$buttonStyle(isActive),
				{
					O: A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(10)
							]),
						_List_fromArray(
							[
								label,
								A2(
								$mdgriffith$elm_ui$Element$Keyed$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(14)),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(14)),
										$mdgriffith$elm_ui$Element$Background$color(currentColor_),
										$mdgriffith$elm_ui$Element$Border$width(1),
										$mdgriffith$elm_ui$Element$Border$color(
										A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0))
									]),
								_Utils_Tuple2(
									A2($elm$core$Maybe$withDefault, '', currentColor),
									$mdgriffith$elm_ui$Element$none))
							])),
					aI: isActive ? $elm$core$Maybe$Just(openMsg) : $elm$core$Maybe$Nothing
				}));
	});
var $author$project$Internals$Icons$externalLink = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'external-link',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('15 3 21 3 21 9')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('10'),
						$elm$svg$Svg$Attributes$y1('14'),
						$elm$svg$Svg$Attributes$x2('21'),
						$elm$svg$Svg$Attributes$y2('3')
					]),
				_List_Nil)
			]));
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$iconSize = 18;
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$chooseDocView = F5(
	function (maxHeight, externalMsg, fileExplorer, zone, logInfo) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$paddingEach(
					{a2: 15, bc: 0, bl: 0, bq: 0}),
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					$author$project$FileExplorer$FileExplorer$view,
					{
						be: logInfo,
						fr: maxHeight,
						h: $author$project$FileExplorer$FileExplorer$ReadWrite(1),
						fY: zone
					},
					fileExplorer),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Element$paddingXY, 15, 0)
						]),
					A2(
						$mdgriffith$elm_ui$Element$Input$button,
						_Utils_ap(
							$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$buttonStyle(
								!_Utils_eq(
									$author$project$FileExplorer$FileExplorer$getSelectedDoc(fileExplorer),
									$elm$core$Maybe$Nothing)),
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignTop])),
						{
							O: A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$html(
											$author$project$Internals$Icons$externalLink($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$iconSize))),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Valider'))
									])),
							aI: A2(
								$elm$core$Maybe$map,
								A2($elm$core$Basics$composeL, externalMsg, $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$InsertDocLink),
								$author$project$FileExplorer$FileExplorer$getSelectedDoc(fileExplorer))
						}))
				]));
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$noAttr = $mdgriffith$elm_ui$Element$htmlAttribute(
	$elm$html$Html$Attributes$class(''));
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$docPicker = F8(
	function (config, externalMsg, id, isActive, docPickerOpen, currentLink, openMsg, handler) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$below(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95))
							]),
						docPickerOpen ? A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Background$color(
									A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(850)),
									$mdgriffith$elm_ui$Element$Border$shadow(
									{
										ic: 10,
										iA: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
										kD: _Utils_Tuple2(4, 4),
										fJ: 5
									})
								]),
							_List_fromArray(
								[
									function () {
									if (!currentLink.$) {
										var path = currentLink.a;
										return A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$spacing(10),
													$mdgriffith$elm_ui$Element$padding(15)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[$mdgriffith$elm_ui$Element$Font$bold]),
													$mdgriffith$elm_ui$Element$text('Lien pour:')),
													A2(
													$mdgriffith$elm_ui$Element$paragraph,
													_List_Nil,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$text(path)
														]))
												]));
									} else {
										return $mdgriffith$elm_ui$Element$none;
									}
								}(),
									A5($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$chooseDocView, config.fr - 140, externalMsg, config.fd, config.fY, config.be)
								])) : $mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id(id))
				]),
			A2(
				$mdgriffith$elm_ui$Element$Input$button,
				_Utils_ap(
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$buttonStyle(isActive),
					_List_fromArray(
						[
							_Utils_eq(
							A2(
								$elm$core$Maybe$map,
								$elm$core$String$startsWith('doc:'),
								currentLink),
							$elm$core$Maybe$Just(true)) ? $mdgriffith$elm_ui$Element$Background$color(
							A3($mdgriffith$elm_ui$Element$rgb255, 203, 238, 250)) : $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$noAttr
						])),
				{
					O: A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(5)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$html(
									$author$project$Internals$Icons$fileText($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$iconSize)))
							])),
					aI: isActive ? $elm$core$Maybe$Just(
						externalMsg(openMsg)) : $elm$core$Maybe$Nothing
				}));
	});
var $author$project$Internals$Icons$droplet = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'droplet',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z')
					]),
				_List_Nil)
			]));
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$fontSizes = _List_fromArray(
	['6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '18', '20', '22', '24', '26', '28', '32', '36', '40', '44', '48', '54', '60', '66', '72', '80', '88', '96']);
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$fonts = _List_fromArray(
	['Arial', 'Helvetica', 'Times New Roman', 'Times', 'Courier New', 'Courier', 'Verdana', 'Georgia', 'Palatino', 'Garamond', 'Bookman', 'Comic Sans MS', 'Trebuchet MS', 'Arial Black', 'Impact', 'Libre Baskerville']);
var $author$project$PageTreeEditor$PageTreeEditor$Select = 4;
var $author$project$PageTreeEditor$PageTreeEditor$internalPageSelectedPageInfo = function (model) {
	var _v0 = model.c6;
	if (_v0.$ === 1) {
		return $elm$core$Maybe$Nothing;
	} else {
		var _v1 = _v0.a;
		var pageInfo = _v1.a;
		var xs = _v1.b;
		return $elm$core$Maybe$Just(pageInfo);
	}
};
var $author$project$PageTreeEditor$PageTreeEditor$CutPage = {$: 17};
var $author$project$PageTreeEditor$PageTreeEditor$DeletePage = {$: 16};
var $author$project$PageTreeEditor$PageTreeEditor$PastePage = {$: 18};
var $author$project$PageTreeEditor$PageTreeEditor$RenamePage = {$: 14};
var $author$project$PageTreeEditor$PageTreeEditor$RenamePageInput = function (a) {
	return {$: 13, a: a};
};
var $author$project$PageTreeEditor$PageTreeEditor$Swap = function (a) {
	return {$: 19, a: a};
};
var $author$project$PageTreeEditor$PageTreeEditor$KeywordInput = function (a) {
	return {$: 22, a: a};
};
var $author$project$PageTreeEditor$PageTreeEditor$NewKeyword = {$: 23};
var $author$project$PageTreeEditor$PageTreeEditor$SelectKeyword = function (a) {
	return {$: 20, a: a};
};
var $author$project$PageTreeEditor$PageTreeEditor$SelectPageKeyword = function (a) {
	return {$: 21, a: a};
};
var $author$project$PageTreeEditor$PageTreeEditor$SetKeyword = {$: 24};
var $author$project$PageTreeEditor$PageTreeEditor$UnsetKeyword = {$: 25};
var $elm$html$Html$a = _VirtualDom_node('a');
var $truqu$elm_base64$Base64$Encode$intToBase64 = function (i) {
	switch (i) {
		case 0:
			return 'A';
		case 1:
			return 'B';
		case 2:
			return 'C';
		case 3:
			return 'D';
		case 4:
			return 'E';
		case 5:
			return 'F';
		case 6:
			return 'G';
		case 7:
			return 'H';
		case 8:
			return 'I';
		case 9:
			return 'J';
		case 10:
			return 'K';
		case 11:
			return 'L';
		case 12:
			return 'M';
		case 13:
			return 'N';
		case 14:
			return 'O';
		case 15:
			return 'P';
		case 16:
			return 'Q';
		case 17:
			return 'R';
		case 18:
			return 'S';
		case 19:
			return 'T';
		case 20:
			return 'U';
		case 21:
			return 'V';
		case 22:
			return 'W';
		case 23:
			return 'X';
		case 24:
			return 'Y';
		case 25:
			return 'Z';
		case 26:
			return 'a';
		case 27:
			return 'b';
		case 28:
			return 'c';
		case 29:
			return 'd';
		case 30:
			return 'e';
		case 31:
			return 'f';
		case 32:
			return 'g';
		case 33:
			return 'h';
		case 34:
			return 'i';
		case 35:
			return 'j';
		case 36:
			return 'k';
		case 37:
			return 'l';
		case 38:
			return 'm';
		case 39:
			return 'n';
		case 40:
			return 'o';
		case 41:
			return 'p';
		case 42:
			return 'q';
		case 43:
			return 'r';
		case 44:
			return 's';
		case 45:
			return 't';
		case 46:
			return 'u';
		case 47:
			return 'v';
		case 48:
			return 'w';
		case 49:
			return 'x';
		case 50:
			return 'y';
		case 51:
			return 'z';
		case 52:
			return '0';
		case 53:
			return '1';
		case 54:
			return '2';
		case 55:
			return '3';
		case 56:
			return '4';
		case 57:
			return '5';
		case 58:
			return '6';
		case 59:
			return '7';
		case 60:
			return '8';
		case 61:
			return '9';
		case 62:
			return '+';
		default:
			return '/';
	}
};
var $truqu$elm_base64$Base64$Encode$toBase64 = function (_int) {
	return _Utils_ap(
		$truqu$elm_base64$Base64$Encode$intToBase64(63 & (_int >>> 18)),
		_Utils_ap(
			$truqu$elm_base64$Base64$Encode$intToBase64(63 & (_int >>> 12)),
			_Utils_ap(
				$truqu$elm_base64$Base64$Encode$intToBase64(63 & (_int >>> 6)),
				$truqu$elm_base64$Base64$Encode$intToBase64(63 & (_int >>> 0)))));
};
var $truqu$elm_base64$Base64$Encode$add = F2(
	function (_char, _v0) {
		var res = _v0.a;
		var count = _v0.b;
		var acc = _v0.c;
		var current = (acc << 8) | _char;
		if (count === 2) {
			return _Utils_Tuple3(
				_Utils_ap(
					res,
					$truqu$elm_base64$Base64$Encode$toBase64(current)),
				0,
				0);
		} else {
			return _Utils_Tuple3(res, count + 1, current);
		}
	});
var $truqu$elm_base64$Base64$Encode$chomp = F2(
	function (char_, acc) {
		var _char = $elm$core$Char$toCode(char_);
		return (_char < 128) ? A2($truqu$elm_base64$Base64$Encode$add, _char, acc) : ((_char < 2048) ? A2(
			$truqu$elm_base64$Base64$Encode$add,
			128 | (63 & _char),
			A2($truqu$elm_base64$Base64$Encode$add, 192 | (_char >>> 6), acc)) : (((_char < 55296) || ((_char >= 57344) && (_char <= 65535))) ? A2(
			$truqu$elm_base64$Base64$Encode$add,
			128 | (63 & _char),
			A2(
				$truqu$elm_base64$Base64$Encode$add,
				128 | (63 & (_char >>> 6)),
				A2($truqu$elm_base64$Base64$Encode$add, 224 | (_char >>> 12), acc))) : A2(
			$truqu$elm_base64$Base64$Encode$add,
			128 | (63 & _char),
			A2(
				$truqu$elm_base64$Base64$Encode$add,
				128 | (63 & (_char >>> 6)),
				A2(
					$truqu$elm_base64$Base64$Encode$add,
					128 | (63 & (_char >>> 12)),
					A2($truqu$elm_base64$Base64$Encode$add, 240 | (_char >>> 18), acc))))));
	});
var $truqu$elm_base64$Base64$Encode$initial = _Utils_Tuple3('', 0, 0);
var $truqu$elm_base64$Base64$Encode$wrapUp = function (_v0) {
	var res = _v0.a;
	var cnt = _v0.b;
	var acc = _v0.c;
	switch (cnt) {
		case 1:
			return res + ($truqu$elm_base64$Base64$Encode$intToBase64(63 & (acc >>> 2)) + ($truqu$elm_base64$Base64$Encode$intToBase64(63 & (acc << 4)) + '=='));
		case 2:
			return res + ($truqu$elm_base64$Base64$Encode$intToBase64(63 & (acc >>> 10)) + ($truqu$elm_base64$Base64$Encode$intToBase64(63 & (acc >>> 4)) + ($truqu$elm_base64$Base64$Encode$intToBase64(63 & (acc << 2)) + '=')));
		default:
			return res;
	}
};
var $truqu$elm_base64$Base64$Encode$encode = function (input) {
	return $truqu$elm_base64$Base64$Encode$wrapUp(
		A3($elm$core$String$foldl, $truqu$elm_base64$Base64$Encode$chomp, $truqu$elm_base64$Base64$Encode$initial, input));
};
var $truqu$elm_base64$Base64$encode = $truqu$elm_base64$Base64$Encode$encode;
var $elm$core$Set$map = F2(
	function (func, set) {
		return $elm$core$Set$fromList(
			A3(
				$elm$core$Set$foldl,
				F2(
					function (x, xs) {
						return A2(
							$elm$core$List$cons,
							func(x),
							xs);
					}),
				_List_Nil,
				set));
	});
var $author$project$Internals$CommonHelpers$dateToW3c = function (d) {
	var dateRec = $AdrianRibao$elm_derberos_date$Derberos$Date$Core$posixToCivil(
		A2($AdrianRibao$elm_derberos_date$Derberos$Date$Core$addTimezoneMilliseconds, $elm$time$Time$utc, d));
	return $elm$core$String$fromInt(dateRec.fX) + ('-' + (A3(
		$elm$core$String$padLeft,
		2,
		'0',
		$elm$core$String$fromInt(dateRec.ft)) + ('-' + (A3(
		$elm$core$String$padLeft,
		2,
		'0',
		$elm$core$String$fromInt(dateRec.e5)) + ('T' + (A3(
		$elm$core$String$padLeft,
		2,
		'0',
		$elm$core$String$fromInt(dateRec.gz)) + (':' + (A3(
		$elm$core$String$padLeft,
		2,
		'0',
		$elm$core$String$fromInt(dateRec.gP)) + (':' + (A3(
		$elm$core$String$padLeft,
		2,
		'0',
		$elm$core$String$fromInt(dateRec.lk)) + 'Z'))))))))));
};
var $author$project$PageTreeEditor$PageTreeEditor$siteMap = F2(
	function (model, page) {
		var _v0 = model.iP;
		if (!_v0.$) {
			var ct = _v0.a;
			var urlStr = function (loc) {
				return '<url>\n' + ('<loc>' + (loc + ('</loc>\n' + ('<lastmod>' + ($author$project$Internals$CommonHelpers$dateToW3c(ct) + ('</lastmod>\n' + '</url>\n'))))));
			};
			var helper = function (_v1) {
				var pageInfo = _v1.a;
				var children = _v1.b;
				return _Utils_ap(
					urlStr(
						'https://www.murol.fr/' + A2(
							$elm$core$String$join,
							'/',
							A2($elm$core$List$map, $elm$url$Url$percentEncode, pageInfo.K))),
					A2(
						$elm$core$String$join,
						'',
						A2($elm$core$List$map, helper, children)));
			};
			return '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + ('<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n' + (helper(page) + (urlStr('https://www.murol.fr/accueil/plan%20de%20site') + (urlStr('https://www.murol.fr/accueil/contact') + (urlStr('https://www.murol.fr/accueil/mentions%20l%C3%A9gales') + '</urlset>\n')))));
		} else {
			return '';
		}
	});
var $author$project$PageTreeEditor$PageTreeEditor$keywordsAdminView = F2(
	function (config, model) {
		var visibleKeywords = A2(
			$elm$core$List$filter,
			function (k) {
				return A2(
					$elm$core$String$contains,
					A2($elm$core$Maybe$withDefault, '', model.aC),
					k);
			},
			$elm$core$Set$toList(
				A2($elm$core$Set$map, $elm$core$Tuple$first, model.X)));
		var pageKeywords = function () {
			var _v2 = A2($elm$core$Maybe$andThen, $author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.hm);
			if (_v2.$ === 1) {
				return _List_Nil;
			} else {
				var contentId = _v2.a;
				return $elm$core$Set$toList(
					A2(
						$elm$core$Set$map,
						$elm$core$Tuple$first,
						A2(
							$elm$core$Set$filter,
							function (_v3) {
								var c = _v3.a;
								var cId = _v3.b;
								return _Utils_eq(
									cId,
									$TSFoster$elm_uuid$UUID$toString(contentId));
							},
							model.X)));
			}
		}();
		var keywordView = F2(
			function (isPageKeyword, k) {
				var _v1 = isPageKeyword ? _Utils_Tuple2(
					$mdgriffith$elm_ui$Element$Events$onClick(
						$author$project$PageTreeEditor$PageTreeEditor$SelectPageKeyword(k)),
					_Utils_eq(
						model.bL,
						$elm$core$Maybe$Just(k))) : _Utils_Tuple2(
					$mdgriffith$elm_ui$Element$Events$onClick(
						$author$project$PageTreeEditor$PageTreeEditor$SelectKeyword(k)),
					_Utils_eq(
						model.aK,
						$elm$core$Maybe$Just(k)));
				var handler = _v1.a;
				var selected = _v1.b;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							handler,
							A2($mdgriffith$elm_ui$Element$paddingXY, 5, 5),
							$mdgriffith$elm_ui$Element$pointer,
							selected ? $mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 0.3)) : $author$project$Internals$CommonStyleHelpers$noAttr
						]),
					$mdgriffith$elm_ui$Element$text(k));
			});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$Border$widthEach(
					{a2: 0, bc: 0, bl: 0, bq: 2}),
					$mdgriffith$elm_ui$Element$Border$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8)),
					$mdgriffith$elm_ui$Element$paddingEach(
					{a2: 0, bc: 0, bl: 0, bq: 15}),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{a2: 2, bc: 0, bl: 0, bq: 0}),
							$mdgriffith$elm_ui$Element$Border$color(
							A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8)),
							$mdgriffith$elm_ui$Element$paddingEach(
							{a2: 15, bc: 0, bl: 0, bq: 0}),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					function () {
						var _v0 = A2($elm$core$Maybe$map, $author$project$PageTreeEditor$PageTreeEditor$extractPage, model.i);
						if (_v0.$ === 1) {
							return $mdgriffith$elm_ui$Element$none;
						} else {
							var page = _v0.a;
							return A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(10)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('SiteMap: ')),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$html(
											A2(
												$elm$html$Html$a,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$href(
														'data:application/octet-stream;charset=utf-16le;base64,' + $truqu$elm_base64$Base64$encode(
															A2($author$project$PageTreeEditor$PageTreeEditor$siteMap, model, page))),
														$elm$html$Html$Attributes$download('sitemap.xml')
													]),
												_List_fromArray(
													[
														$elm$html$Html$text('sitemap.xml')
													]))))
									]));
						}
					}()),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$size(18)
						]),
					$mdgriffith$elm_ui$Element$text('Gestion mots clés')),
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						$author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(300)),
								$mdgriffith$elm_ui$Element$spacing(0)
							])),
					{
						O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
						dJ: $author$project$PageTreeEditor$PageTreeEditor$KeywordInput,
						dO: $elm$core$Maybe$Nothing,
						dV: _Utils_eq(model.aC, $elm$core$Maybe$Nothing) ? A2($elm$core$Maybe$withDefault, '', model.aK) : A2($elm$core$Maybe$withDefault, '', model.aC)
					}),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Border$width(2),
									$mdgriffith$elm_ui$Element$Border$color(
									A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8)),
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(200)),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(400)),
									$mdgriffith$elm_ui$Element$scrollbars
								]),
							A2(
								$elm$core$List$map,
								keywordView(false),
								visibleKeywords)),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Border$width(2),
									$mdgriffith$elm_ui$Element$Border$color(
									A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8)),
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(200)),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(400)),
									$mdgriffith$elm_ui$Element$scrollbars
								]),
							A2(
								$elm$core$List$map,
								keywordView(true),
								pageKeywords))
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$saveButtonStyle(
								(!_Utils_eq(
									A2($elm$core$Maybe$andThen, $author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.hm),
									$elm$core$Maybe$Nothing)) && ((!_Utils_eq(model.aK, $elm$core$Maybe$Nothing)) || $author$project$PageTreeEditor$PageTreeEditor$validMbStr(model.aC))),
							{
								O: A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text('Associer mot clé')
										])),
								aI: ((!_Utils_eq(
									A2($elm$core$Maybe$andThen, $author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.hm),
									$elm$core$Maybe$Nothing)) && (!_Utils_eq(model.aK, $elm$core$Maybe$Nothing))) ? $elm$core$Maybe$Just($author$project$PageTreeEditor$PageTreeEditor$SetKeyword) : (((!_Utils_eq(
									A2($elm$core$Maybe$andThen, $author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.hm),
									$elm$core$Maybe$Nothing)) && $author$project$PageTreeEditor$PageTreeEditor$validMbStr(model.aC)) ? $elm$core$Maybe$Just($author$project$PageTreeEditor$PageTreeEditor$NewKeyword) : $elm$core$Maybe$Nothing)
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$saveButtonStyle(
								(!_Utils_eq(
									A2($elm$core$Maybe$andThen, $author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.hm),
									$elm$core$Maybe$Nothing)) && (!_Utils_eq(model.bL, $elm$core$Maybe$Nothing))),
							{
								O: A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text('Dissocier mot clé')
										])),
								aI: ((!_Utils_eq(
									A2($elm$core$Maybe$andThen, $author$project$PageTreeEditor$PageTreeEditor$getMbContentId, model.hm),
									$elm$core$Maybe$Nothing)) && (!_Utils_eq(model.bL, $elm$core$Maybe$Nothing))) ? $elm$core$Maybe$Just($author$project$PageTreeEditor$PageTreeEditor$UnsetKeyword) : $elm$core$Maybe$Nothing
							})
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$Monospace = {$: 2};
var $mdgriffith$elm_ui$Element$Font$monospace = $mdgriffith$elm_ui$Internal$Model$Monospace;
var $author$project$PageTreeEditor$PageTreeEditor$FileIOSelectPage = function (a) {
	return {$: 1, a: a};
};
var $author$project$PageTreeEditor$PageTreeEditor$LastChild = function (a) {
	return {$: 0, a: a};
};
var $author$project$PageTreeEditor$PageTreeEditor$NotLastChild = function (a) {
	return {$: 1, a: a};
};
var $author$project$PageTreeEditor$PageTreeEditor$SaveNewSelectPage = function (a) {
	return {$: 3, a: a};
};
var $author$project$PageTreeEditor$PageTreeEditor$SelectInternalPage = function (a) {
	return {$: 2, a: a};
};
var $author$project$PageTreeEditor$PageTreeEditor$SelectPage = function (a) {
	return {$: 0, a: a};
};
var $author$project$PageTreeEditor$PageTreeEditor$isSubPage = F2(
	function (mbSubPage, page) {
		var xs = page.b;
		return A3(
			$elm$core$List$foldr,
			F2(
				function (p, acc) {
					return _Utils_eq(p, mbSubPage) || acc;
				}),
			_Utils_eq(page, mbSubPage),
			xs);
	});
var $author$project$PageTreeEditor$PageTreeEditor$prefix = function (offsets) {
	var attrs = function (sel) {
		return _List_fromArray(
			[
				sel ? $mdgriffith$elm_ui$Element$Font$color(
				A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1)) : $mdgriffith$elm_ui$Element$Font$color(
				A4($mdgriffith$elm_ui$Element$rgba, 0.8, 0.8, 0.8, 1))
			]);
	};
	var helper = F2(
		function (acc, indexes) {
			helper:
			while (true) {
				if (!indexes.b) {
					return _List_fromArray(
						[
							A2($mdgriffith$elm_ui$Element$row, _List_Nil, acc)
						]);
				} else {
					if (!indexes.a.$) {
						if (!indexes.b.b) {
							var sel = indexes.a.a;
							return _Utils_ap(
								acc,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										attrs(sel),
										$mdgriffith$elm_ui$Element$text(
											A2($elm$core$String$repeat, 3, ' ') + '└─ '))
									]));
						} else {
							var sel = indexes.a.a;
							var xs = indexes.b;
							var $temp$acc = _Utils_ap(
								acc,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$row,
										attrs(sel),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text(
												A2($elm$core$String$repeat, 3, ' ') + ' ')
											]))
									])),
								$temp$indexes = xs;
							acc = $temp$acc;
							indexes = $temp$indexes;
							continue helper;
						}
					} else {
						if (!indexes.b.b) {
							var sel = indexes.a.a;
							return _Utils_ap(
								acc,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										attrs(sel),
										$mdgriffith$elm_ui$Element$text(
											A2($elm$core$String$repeat, 3, ' ') + '├─ '))
									]));
						} else {
							var sel = indexes.a.a;
							var xs = indexes.b;
							var $temp$acc = _Utils_ap(
								acc,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										attrs(sel),
										$mdgriffith$elm_ui$Element$text(
											A2($elm$core$String$repeat, 3, ' ') + '│'))
									])),
								$temp$indexes = xs;
							acc = $temp$acc;
							indexes = $temp$indexes;
							continue helper;
						}
					}
				}
			}
		});
	return A2(
		helper,
		_List_Nil,
		$elm$core$List$reverse(offsets));
};
var $author$project$PageTreeEditor$PageTreeEditor$pageTreeView_ = F6(
	function (config, offsets, selected, contents, locked, _v0) {
		var pageInfo = _v0.a;
		var children = _v0.b;
		var l = $elm$core$List$length(children);
		var isLocked = A2(
			$elm$core$List$any,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$map,
				$author$project$PageTreeEditor$PageTreeEditor$isSubPage(
					A2($author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children)),
				locked));
		var attrs = function () {
			var _v2 = config.h;
			switch (_v2) {
				case 0:
					var selectable = !isLocked;
					return _Utils_ap(
						selectable ? _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Events$onClick(
								$author$project$PageTreeEditor$PageTreeEditor$SelectPage(
									A2($author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))),
								$mdgriffith$elm_ui$Element$pointer,
								$mdgriffith$elm_ui$Element$mouseOver(
								_List_fromArray(
									[
										_Utils_eq(
										selected,
										$elm$core$Maybe$Just(
											A2($author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))) ? $mdgriffith$elm_ui$Element$Font$color(
										A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1)) : $mdgriffith$elm_ui$Element$Font$color(
										A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 0.5))
									]))
							]) : _List_Nil,
						_List_fromArray(
							[
								_Utils_eq(
								selected,
								$elm$core$Maybe$Just(
									A2($author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))) ? $mdgriffith$elm_ui$Element$Font$color(
								A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1)) : $author$project$Internals$CommonStyleHelpers$noAttr
							]));
				case 1:
					return _List_fromArray(
						[
							_Utils_eq(
							selected,
							$elm$core$Maybe$Just(
								A2($author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))) ? $mdgriffith$elm_ui$Element$Font$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1)) : $mdgriffith$elm_ui$Element$Font$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0.8, 0.8, 0.8, 1))
						]);
				case 2:
					var fontColor = function () {
						var _v3 = pageInfo.kf;
						if (_v3.$ === 1) {
							return $mdgriffith$elm_ui$Element$Font$color(
								A4($mdgriffith$elm_ui$Element$rgba, 0.8, 0.8, 0.8, 1));
						} else {
							var contentId = _v3.a;
							var _v4 = A2(
								$elm$core$Dict$get,
								$TSFoster$elm_uuid$UUID$toString(contentId),
								contents);
							if (!_v4.$) {
								return $author$project$Internals$CommonStyleHelpers$noAttr;
							} else {
								return $mdgriffith$elm_ui$Element$Font$color(
									A4($mdgriffith$elm_ui$Element$rgba, 1, 0, 0, 0.7));
							}
						}
					}();
					return _Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Events$onClick(
								$author$project$PageTreeEditor$PageTreeEditor$SaveNewSelectPage(
									A2($author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))),
								$mdgriffith$elm_ui$Element$pointer,
								$mdgriffith$elm_ui$Element$mouseOver(
								_List_fromArray(
									[
										_Utils_eq(
										selected,
										$elm$core$Maybe$Just(
											A2($author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))) ? $mdgriffith$elm_ui$Element$Font$color(
										A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1)) : $mdgriffith$elm_ui$Element$Font$color(
										A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 0.5))
									]))
							]),
						_List_fromArray(
							[
								_Utils_eq(
								selected,
								$elm$core$Maybe$Just(
									A2($author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))) ? $mdgriffith$elm_ui$Element$Font$color(
								A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1)) : fontColor
							]));
				case 3:
					var selectable = function (res) {
						return !_Utils_eq(res, $elm$core$Maybe$Nothing);
					}(
						A2(
							$elm$core$Maybe$map,
							function (k) {
								return A2(
									$elm$core$Dict$get,
									$TSFoster$elm_uuid$UUID$toString(k),
									contents);
							},
							pageInfo.kf));
					var fontColor = function () {
						var _v5 = pageInfo.kf;
						if (_v5.$ === 1) {
							return $mdgriffith$elm_ui$Element$Font$color(
								A4($mdgriffith$elm_ui$Element$rgba, 0.8, 0.8, 0.8, 1));
						} else {
							var contentId = _v5.a;
							var _v6 = A2(
								$elm$core$Dict$get,
								$TSFoster$elm_uuid$UUID$toString(contentId),
								contents);
							if (!_v6.$) {
								return $author$project$Internals$CommonStyleHelpers$noAttr;
							} else {
								return $mdgriffith$elm_ui$Element$Font$color(
									A4($mdgriffith$elm_ui$Element$rgba, 1, 0, 0, 0.7));
							}
						}
					}();
					return _Utils_ap(
						selectable ? _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Events$onClick(
								$author$project$PageTreeEditor$PageTreeEditor$FileIOSelectPage(
									A2($author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))),
								$mdgriffith$elm_ui$Element$pointer,
								$mdgriffith$elm_ui$Element$mouseOver(
								_List_fromArray(
									[
										_Utils_eq(
										selected,
										$elm$core$Maybe$Just(
											A2($author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))) ? $mdgriffith$elm_ui$Element$Font$color(
										A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1)) : $mdgriffith$elm_ui$Element$Font$color(
										A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 0.5))
									]))
							]) : _List_Nil,
						_List_fromArray(
							[
								_Utils_eq(
								selected,
								$elm$core$Maybe$Just(
									A2($author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))) ? $mdgriffith$elm_ui$Element$Font$color(
								A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1)) : fontColor
							]));
				default:
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$PageTreeEditor$PageTreeEditor$SelectInternalPage(
								A2($author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))),
							$mdgriffith$elm_ui$Element$pointer,
							$mdgriffith$elm_ui$Element$mouseOver(
							_List_fromArray(
								[
									_Utils_eq(
									selected,
									$elm$core$Maybe$Just(
										A2($author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))) ? $mdgriffith$elm_ui$Element$Font$color(
									A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1)) : $mdgriffith$elm_ui$Element$Font$color(
									A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 0.5))
								])),
							_Utils_eq(
							selected,
							$elm$core$Maybe$Just(
								A2($author$project$PageTreeEditor$PageTreeEditor$Page, pageInfo, children))) ? $mdgriffith$elm_ui$Element$Font$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1)) : $author$project$Internals$CommonStyleHelpers$noAttr
						]);
			}
		}();
		var _v1 = _Utils_Tuple2(
			A2($elm$core$List$take, l - 1, children),
			A2($elm$core$List$drop, l - 1, children));
		var firsts = _v1.a;
		var last = _v1.b;
		return _Utils_ap(
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_Utils_ap(
						$author$project$PageTreeEditor$PageTreeEditor$prefix(offsets),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Keyed$el,
								_Utils_ap(
									attrs,
									_List_fromArray(
										[
											isLocked ? $mdgriffith$elm_ui$Element$Font$color(
											A4($mdgriffith$elm_ui$Element$rgba, 0.8, 0.8, 0.8, 1)) : $author$project$Internals$CommonStyleHelpers$noAttr
										])),
								_Utils_Tuple2(
									A2($elm$core$String$join, '/', pageInfo.K),
									$mdgriffith$elm_ui$Element$text(pageInfo.I)))
							])))
				]),
			_Utils_ap(
				A2(
					$elm$core$List$concatMap,
					A5(
						$author$project$PageTreeEditor$PageTreeEditor$pageTreeView_,
						config,
						A2(
							$elm$core$List$cons,
							$author$project$PageTreeEditor$PageTreeEditor$NotLastChild(true),
							offsets),
						selected,
						contents,
						locked),
					firsts),
				A2(
					$elm$core$List$concatMap,
					A5(
						$author$project$PageTreeEditor$PageTreeEditor$pageTreeView_,
						config,
						A2(
							$elm$core$List$cons,
							$author$project$PageTreeEditor$PageTreeEditor$LastChild(true),
							offsets),
						selected,
						contents,
						locked),
					last)));
	});
var $author$project$PageTreeEditor$PageTreeEditor$pageTreeView = F2(
	function (config, model) {
		var selected = function () {
			var _v0 = config.h;
			switch (_v0) {
				case 0:
					return model.hm;
				case 4:
					return model.c6;
				case 2:
					return model.dg;
				default:
					return model.ao;
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(2),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Font$size(14),
					$mdgriffith$elm_ui$Element$Font$family(
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$monospace])),
					$mdgriffith$elm_ui$Element$scrollbars,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2(
					$elm$core$Maybe$map,
					A5($author$project$PageTreeEditor$PageTreeEditor$pageTreeView_, config, _List_Nil, selected, model.cv, model.P),
					A2(
						$elm$core$Maybe$map,
						$author$project$PageTreeEditor$PageTreeEditor$extractPage,
						A2($elm$core$Maybe$map, $author$project$PageTreeEditor$PageTreeEditor$rewind, model.i)))));
	});
var $author$project$PageTreeEditor$PageTreeEditor$fullView = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'flex-shrink', '1')),
					$mdgriffith$elm_ui$Element$clip,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$Border$solid,
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{a2: 0, bc: 0, bl: 2, bq: 0}),
							$mdgriffith$elm_ui$Element$Border$color(
							A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(430)),
							$mdgriffith$elm_ui$Element$paddingEach(
							{a2: 0, bc: 0, bl: 15, bq: 0}),
							$mdgriffith$elm_ui$Element$scrollbarY
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$bold,
									$mdgriffith$elm_ui$Element$Font$size(18)
								]),
							$mdgriffith$elm_ui$Element$text('Modification arborescence')),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$text,
									_Utils_ap(
										$author$project$Internals$CommonStyleHelpers$textInputStyle,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(250)),
												$mdgriffith$elm_ui$Element$spacing(0)
											])),
									{
										O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
										dJ: $author$project$PageTreeEditor$PageTreeEditor$RenamePageInput,
										dO: $elm$core$Maybe$Nothing,
										dV: _Utils_eq(model.bK, $elm$core$Maybe$Nothing) ? A2(
											$elm$core$Maybe$withDefault,
											'',
											A2($elm$core$Maybe$map, $author$project$PageTreeEditor$PageTreeEditor$getName, model.hm)) : A2($elm$core$Maybe$withDefault, '', model.bK)
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$saveButtonStyle(
										!_Utils_eq(model.hm, $elm$core$Maybe$Nothing)),
									{
										O: A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$text('Renommer')
												])),
										aI: A2(
											$elm$core$Maybe$map,
											function (_v0) {
												return $author$project$PageTreeEditor$PageTreeEditor$RenamePage;
											},
											model.hm)
									})
								])),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$saveButtonStyle(
										!_Utils_eq(model.hm, $elm$core$Maybe$Nothing)),
									{
										O: A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_Nil,
													$mdgriffith$elm_ui$Element$html(
														$author$project$Internals$Icons$chevronsUp(18))),
													$mdgriffith$elm_ui$Element$text('Monter')
												])),
										aI: A2(
											$elm$core$Maybe$map,
											function (_v1) {
												return $author$project$PageTreeEditor$PageTreeEditor$Swap(true);
											},
											model.hm)
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$saveButtonStyle(
										!_Utils_eq(model.hm, $elm$core$Maybe$Nothing)),
									{
										O: A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_Nil,
													$mdgriffith$elm_ui$Element$html(
														$author$project$Internals$Icons$chevronsDown(18))),
													$mdgriffith$elm_ui$Element$text('Descendre')
												])),
										aI: A2(
											$elm$core$Maybe$map,
											function (_v2) {
												return $author$project$PageTreeEditor$PageTreeEditor$Swap(false);
											},
											model.hm)
									})
								])),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$buttonStyle(
										(!_Utils_eq(model.hm, $elm$core$Maybe$Nothing)) && _Utils_eq(model.bi, $elm$core$Maybe$Nothing)),
									{
										O: A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$text('Couper')
												])),
										aI: _Utils_eq(model.bi, $elm$core$Maybe$Nothing) ? A2(
											$elm$core$Maybe$map,
											function (_v3) {
												return $author$project$PageTreeEditor$PageTreeEditor$CutPage;
											},
											model.hm) : $elm$core$Maybe$Nothing
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$saveButtonStyle(
										(!_Utils_eq(model.hm, $elm$core$Maybe$Nothing)) && (!_Utils_eq(model.bi, $elm$core$Maybe$Nothing))),
									{
										O: A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$text('Coller')
												])),
										aI: (!_Utils_eq(model.bi, $elm$core$Maybe$Nothing)) ? A2(
											$elm$core$Maybe$map,
											function (_v4) {
												return $author$project$PageTreeEditor$PageTreeEditor$PastePage;
											},
											model.hm) : $elm$core$Maybe$Nothing
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$deleteButtonStyle(
										!_Utils_eq(model.hm, $elm$core$Maybe$Nothing)),
									{
										O: A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$text('Supprimer')
												])),
										aI: A2(
											$elm$core$Maybe$map,
											function (_v5) {
												return $author$project$PageTreeEditor$PageTreeEditor$DeletePage;
											},
											model.hm)
									})
								])),
							A2($author$project$PageTreeEditor$PageTreeEditor$keywordsAdminView, config, model)
						])),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'flex-shrink', '1')),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Element$paddingXY, 15, 10),
									$mdgriffith$elm_ui$Element$Background$color(
									A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95)),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$wrappedRow,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$Background$color(
											A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
											$mdgriffith$elm_ui$Element$padding(4),
											$mdgriffith$elm_ui$Element$Border$rounded(5),
											$mdgriffith$elm_ui$Element$Font$family(
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$Font$monospace]))
										]),
									A2(
										$elm$core$Maybe$withDefault,
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Element$paddingXY, 2, 4)
													]),
												$mdgriffith$elm_ui$Element$text('/'))
											]),
										A2(
											$elm$core$Maybe$map,
											function (res) {
												return A2(
													$elm$core$List$cons,
													A2(
														$mdgriffith$elm_ui$Element$el,
														_List_fromArray(
															[
																A2($mdgriffith$elm_ui$Element$paddingXY, 2, 4)
															]),
														$mdgriffith$elm_ui$Element$text('/')),
													res);
											},
											A2(
												$elm$core$Maybe$map,
												$elm$core$List$intersperse(
													A2(
														$mdgriffith$elm_ui$Element$el,
														_List_fromArray(
															[
																A2($mdgriffith$elm_ui$Element$paddingXY, 2, 4)
															]),
														$mdgriffith$elm_ui$Element$text('/'))),
												A2(
													$elm$core$Maybe$map,
													$elm$core$List$map($mdgriffith$elm_ui$Element$text),
													A2($elm$core$Maybe$map, $author$project$PageTreeEditor$PageTreeEditor$getPath, model.hm))))))
								])),
							A2($author$project$PageTreeEditor$PageTreeEditor$pageTreeView, config, model)
						]))
				]));
	});
var $author$project$PageTreeEditor$PageTreeEditor$openView = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'flex-shrink', '1')),
					$mdgriffith$elm_ui$Element$clip,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$size(18)
						]),
					$mdgriffith$elm_ui$Element$text('Charger une page')),
					A2($author$project$PageTreeEditor$PageTreeEditor$pageTreeView, config, model)
				]));
	});
var $author$project$PageTreeEditor$PageTreeEditor$NewPage = {$: 9};
var $author$project$PageTreeEditor$PageTreeEditor$NewPageInput = function (a) {
	return {$: 15, a: a};
};
var $author$project$PageTreeEditor$PageTreeEditor$saveNewView = F2(
	function (config, model) {
		var canSave = (!_Utils_eq(model.dg, $elm$core$Maybe$Nothing)) && (model.ca !== '');
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(20),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'flex-shrink', '1')),
					$mdgriffith$elm_ui$Element$clip,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$size(18)
						]),
					$mdgriffith$elm_ui$Element$text('Enregistrement nouvelle page')),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'flex-shrink', '1')),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('Emplacement de la page dans l\'arborescence:')),
							A2($author$project$PageTreeEditor$PageTreeEditor$pageTreeView, config, model)
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$text,
							_Utils_ap(
								$author$project$Internals$CommonStyleHelpers$textInputStyle,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(250)),
										$mdgriffith$elm_ui$Element$spacing(0)
									])),
							{
								O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
								dJ: $author$project$PageTreeEditor$PageTreeEditor$NewPageInput,
								dO: $elm$core$Maybe$Just(
									A2(
										$mdgriffith$elm_ui$Element$Input$placeholder,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('titre de la nouvelle page'))),
								dV: model.ca
							})
						])),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					$author$project$Internals$CommonStyleHelpers$saveButtonStyle(canSave),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Enregistrer')
								])),
						aI: canSave ? $elm$core$Maybe$Just($author$project$PageTreeEditor$PageTreeEditor$NewPage) : $elm$core$Maybe$Nothing
					})
				]));
	});
var $author$project$PageTreeEditor$PageTreeEditor$saveView = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$padding(5),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'flex-shrink', '1')),
					$mdgriffith$elm_ui$Element$clip,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$size(18)
						]),
					$mdgriffith$elm_ui$Element$text('Enregistrer')),
					A2($author$project$PageTreeEditor$PageTreeEditor$pageTreeView, config, model),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					$author$project$Internals$CommonStyleHelpers$saveButtonStyle(
						!_Utils_eq(model.ao, $elm$core$Maybe$Nothing)),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Valider')
								])),
						aI: A2($elm$core$Maybe$map, $author$project$PageTreeEditor$PageTreeEditor$SaveContent, model.ao)
					})
				]));
	});
var $author$project$PageTreeEditor$PageTreeEditor$selectView = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'flex-shrink', '1')),
					$mdgriffith$elm_ui$Element$clip,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2($author$project$PageTreeEditor$PageTreeEditor$pageTreeView, config, model)
				]));
	});
var $author$project$PageTreeEditor$PageTreeEditor$view = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$map,
			model.bY,
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$Font$size(16),
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$padding(10),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height(
						A2($mdgriffith$elm_ui$Element$maximum, config.fr, $mdgriffith$elm_ui$Element$fill))
					]),
				_List_fromArray(
					[
						function () {
						var _v0 = config.h;
						switch (_v0) {
							case 0:
								return A2($author$project$PageTreeEditor$PageTreeEditor$fullView, config, model);
							case 1:
								return A2($author$project$PageTreeEditor$PageTreeEditor$saveView, config, model);
							case 2:
								return A2($author$project$PageTreeEditor$PageTreeEditor$saveNewView, config, model);
							case 3:
								return A2($author$project$PageTreeEditor$PageTreeEditor$openView, config, model);
							default:
								return A2($author$project$PageTreeEditor$PageTreeEditor$selectView, config, model);
						}
					}()
					])));
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$chooseInternalPageView = F5(
	function (maxHeight, externalMsg, pageTreeEditor, zone, logInfo) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$paddingEach(
					{a2: 15, bc: 0, bl: 0, bq: 0}),
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$author$project$PageTreeEditor$PageTreeEditor$view,
					{be: logInfo, fr: maxHeight, h: 4, fY: zone},
					pageTreeEditor),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Element$paddingXY, 15, 0)
						]),
					A2(
						$mdgriffith$elm_ui$Element$Input$button,
						_Utils_ap(
							$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$buttonStyle(
								!_Utils_eq(
									$author$project$PageTreeEditor$PageTreeEditor$internalPageSelectedPageInfo(pageTreeEditor),
									$elm$core$Maybe$Nothing)),
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignTop])),
						{
							O: A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$html(
											$author$project$Internals$Icons$externalLink($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$iconSize))),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Valider'))
									])),
							aI: A2(
								$elm$core$Maybe$map,
								A2($elm$core$Basics$composeL, externalMsg, $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$InsertInternalLink),
								A2(
									$elm$core$Maybe$map,
									$TSFoster$elm_uuid$UUID$toString,
									A2(
										$elm$core$Maybe$andThen,
										function ($) {
											return $.kf;
										},
										$author$project$PageTreeEditor$PageTreeEditor$internalPageSelectedPageInfo(pageTreeEditor))))
						}))
				]));
	});
var $author$project$Internals$Icons$link2 = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'link-2',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('8'),
						$elm$svg$Svg$Attributes$y1('12'),
						$elm$svg$Svg$Attributes$x2('16'),
						$elm$svg$Svg$Attributes$y2('12')
					]),
				_List_Nil)
			]));
};
var $elm$url$Url$percentDecode = _Url_percentDecode;
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$linkPicker = F8(
	function (config, externalMsg, id, isActive, linkPickerOpen, currentLink, openMsg, handler) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$below(
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95))
							]),
						linkPickerOpen ? A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Background$color(
									A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(850)),
									$mdgriffith$elm_ui$Element$Border$shadow(
									{
										ic: 10,
										iA: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
										kD: _Utils_Tuple2(4, 4),
										fJ: 5
									}),
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									function () {
									var _v0 = A2(
										$elm$core$Maybe$andThen,
										$author$project$PageTreeEditor$PageTreeEditor$getPathFromId(config.J),
										A2(
											$elm$core$Maybe$map,
											$elm$core$String$dropLeft(
												$elm$core$String$length('lien-interne:')),
											currentLink));
									if (!_v0.$) {
										var path = _v0.a;
										return A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$spacing(10),
													$mdgriffith$elm_ui$Element$padding(15)
												]),
											_List_fromArray(
												[
													A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[$mdgriffith$elm_ui$Element$Font$bold]),
													$mdgriffith$elm_ui$Element$text('Lien pour:')),
													A2(
													$mdgriffith$elm_ui$Element$paragraph,
													_List_Nil,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$text(
															A2(
																$elm$core$Maybe$withDefault,
																path,
																$elm$url$Url$percentDecode(path)))
														]))
												]));
									} else {
										return $mdgriffith$elm_ui$Element$none;
									}
								}(),
									A5($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$chooseInternalPageView, config.fr - 140, externalMsg, config.J, config.fY, config.be)
								])) : $mdgriffith$elm_ui$Element$none)),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					$elm$html$Html$Attributes$id(id))
				]),
			A2(
				$mdgriffith$elm_ui$Element$Input$button,
				_Utils_ap(
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$buttonStyle(isActive),
					_List_fromArray(
						[
							_Utils_eq(
							A2(
								$elm$core$Maybe$map,
								$elm$core$String$startsWith('lien-interne:'),
								currentLink),
							$elm$core$Maybe$Just(true)) ? $mdgriffith$elm_ui$Element$Background$color(
							A3($mdgriffith$elm_ui$Element$rgb255, 203, 238, 250)) : $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$noAttr
						])),
				{
					O: A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(5)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$html(
									$author$project$Internals$Icons$link2($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$iconSize)))
							])),
					aI: isActive ? $elm$core$Maybe$Just(
						externalMsg(openMsg)) : $elm$core$Maybe$Nothing
				}));
	});
var $elm$html$Html$option = _VirtualDom_node('option');
var $rtfeldman$elm_hex$Hex$unsafeToDigit = function (num) {
	unsafeToDigit:
	while (true) {
		switch (num) {
			case 0:
				return '0';
			case 1:
				return '1';
			case 2:
				return '2';
			case 3:
				return '3';
			case 4:
				return '4';
			case 5:
				return '5';
			case 6:
				return '6';
			case 7:
				return '7';
			case 8:
				return '8';
			case 9:
				return '9';
			case 10:
				return 'a';
			case 11:
				return 'b';
			case 12:
				return 'c';
			case 13:
				return 'd';
			case 14:
				return 'e';
			case 15:
				return 'f';
			default:
				var $temp$num = num;
				num = $temp$num;
				continue unsafeToDigit;
		}
	}
};
var $rtfeldman$elm_hex$Hex$unsafePositiveToDigits = F2(
	function (digits, num) {
		unsafePositiveToDigits:
		while (true) {
			if (num < 16) {
				return A2(
					$elm$core$List$cons,
					$rtfeldman$elm_hex$Hex$unsafeToDigit(num),
					digits);
			} else {
				var $temp$digits = A2(
					$elm$core$List$cons,
					$rtfeldman$elm_hex$Hex$unsafeToDigit(
						A2($elm$core$Basics$modBy, 16, num)),
					digits),
					$temp$num = (num / 16) | 0;
				digits = $temp$digits;
				num = $temp$num;
				continue unsafePositiveToDigits;
			}
		}
	});
var $rtfeldman$elm_hex$Hex$toString = function (num) {
	return $elm$core$String$fromList(
		(num < 0) ? A2(
			$elm$core$List$cons,
			'-',
			A2($rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, -num)) : A2($rtfeldman$elm_hex$Hex$unsafePositiveToDigits, _List_Nil, num));
};
var $elm$core$String$toUpper = _String_toUpper;
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$rgbToHex = function (s) {
	var _v0 = A2(
		$elm$core$List$filterMap,
		$elm$core$String$toInt,
		A2(
			$elm$core$String$split,
			',',
			A3(
				$elm$core$String$replace,
				' ',
				'',
				A2(
					$elm$core$String$dropRight,
					1,
					A2($elm$core$String$dropLeft, 4, s)))));
	if (((_v0.b && _v0.b.b) && _v0.b.b.b) && (!_v0.b.b.b.b)) {
		var r = _v0.a;
		var _v1 = _v0.b;
		var g = _v1.a;
		var _v2 = _v1.b;
		var b = _v2.a;
		return $elm$core$String$toUpper(
			_Utils_ap(
				A3(
					$elm$core$String$padLeft,
					2,
					'0',
					$rtfeldman$elm_hex$Hex$toString(r)),
				_Utils_ap(
					A3(
						$elm$core$String$padLeft,
						2,
						'0',
						$rtfeldman$elm_hex$Hex$toString(g)),
					A3(
						$elm$core$String$padLeft,
						2,
						'0',
						$rtfeldman$elm_hex$Hex$toString(b)))));
	} else {
		return '000000';
	}
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$webColorsReversed = $elm$core$Dict$fromList(
	A2(
		$elm$core$List$map,
		function (_v0) {
			var a = _v0.a;
			var b = _v0.b;
			return _Utils_Tuple2(b, a);
		},
		$elm$core$Dict$toList($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$webColors)));
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$parseColor = function (s) {
	var _v0 = function (hex) {
		return A2($elm$core$Dict$get, hex, $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$webColorsReversed);
	}(
		A2($elm$core$String$startsWith, '#', s) ? A2($elm$core$String$dropLeft, 1, s) : s);
	if (!_v0.$) {
		var c = _v0.a;
		return $elm$core$Maybe$Just(c);
	} else {
		return A2(
			$elm$core$Dict$get,
			$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$rgbToHex(s),
			$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$webColorsReversed);
	}
};
var $author$project$Internals$Icons$penTool = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'pen-tool',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M12 19l7-7 3 3-7 7-3-3z')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M18 13l-1.5-7.5L2 2l3.5 14.5L13 18l5-5z')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M2 2l7.586 7.586')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$circle,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$cx('11'),
						$elm$svg$Svg$Attributes$cy('11'),
						$elm$svg$Svg$Attributes$r('2')
					]),
				_List_Nil)
			]));
};
var $elm$html$Html$select = _VirtualDom_node('select');
var $elm$html$Html$Attributes$selected = $elm$html$Html$Attributes$boolProperty('selected');
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$customToolbar = F2(
	function (config, model) {
		var wholeTextBlocAttrs = $elm$core$Dict$fromList(
			A2($elm$core$List$concatMap, $author$project$Document$DocumentViews$StyleSheets$docAttrToCss, model.x));
		var selectionCollapsed = function () {
			var _v5 = model.aq;
			if (_v5.$ === 1) {
				return $elm$core$Maybe$Nothing;
			} else {
				var start = _v5.a.bo;
				var end = _v5.a.a4;
				return $elm$core$Maybe$Just(
					_Utils_eq(start, end));
			}
		}();
		var selectionAttrs = A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.y;
			},
			model.aq);
		var textFont = A2(
			$elm$core$Maybe$withDefault,
			'Arial',
			A2(
				$elm$core$Maybe$andThen,
				$elm$core$Dict$get('textFont'),
				selectionAttrs));
		var href = A2(
			$elm$core$Maybe$andThen,
			$elm$core$Dict$get('href'),
			selectionAttrs);
		var fontSizeOptionView = F2(
			function (selectedSize, fs) {
				var selected = A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						function (fs_) {
							return _Utils_eq(selectedSize, fs_);
						},
						$elm$core$String$toInt(fs)));
				return A2(
					$elm$html$Html$option,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$value(fs),
							$elm$html$Html$Attributes$selected(selected)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(fs)
						]));
			});
		var fontSize = A2(
			$elm$core$Maybe$withDefault,
			16,
			A2(
				$elm$core$Maybe$andThen,
				$elm$core$String$toInt,
				A2(
					$elm$core$Maybe$map,
					A2($elm$core$String$replace, 'px', ''),
					A2(
						$elm$core$Maybe$andThen,
						$elm$core$Dict$get('fontSize'),
						selectionAttrs))));
		var fontOptionView = F2(
			function (selectedFont, f) {
				return A2(
					$elm$html$Html$option,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$value(f),
							$elm$html$Html$Attributes$selected(
							_Utils_eq(selectedFont, f))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(f)
						]));
			});
		var fontColor = function () {
			var _v3 = A2(
				$elm$core$Maybe$andThen,
				$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$parseColor,
				A2(
					$elm$core$Maybe$andThen,
					$elm$core$Dict$get('foregroundColor'),
					selectionAttrs));
			if (!_v3.$) {
				var c = _v3.a;
				return $elm$core$Maybe$Just(c);
			} else {
				var _v4 = A2(
					$elm$core$Maybe$andThen,
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$parseColor,
					A2($elm$core$Dict$get, 'color', wholeTextBlocAttrs));
				if (!_v4.$) {
					var c = _v4.a;
					return $elm$core$Maybe$Just(c);
				} else {
					return $elm$core$Maybe$Just('black');
				}
			}
		}();
		var canUpdateGlobalAttr = function () {
			var _v2 = model.aq;
			if (_v2.$ === 1) {
				return true;
			} else {
				var start = _v2.a.bo;
				var end = _v2.a.a4;
				return _Utils_eq(start, end);
			}
		}();
		var backgroundColor = function () {
			var _v0 = A2(
				$elm$core$Maybe$andThen,
				$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$parseColor,
				A2(
					$elm$core$Maybe$andThen,
					$elm$core$Dict$get('backgroundColor'),
					selectionAttrs));
			if (!_v0.$) {
				var c = _v0.a;
				return $elm$core$Maybe$Just(c);
			} else {
				var _v1 = A2(
					$elm$core$Maybe$andThen,
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$parseColor,
					A2($elm$core$Dict$get, 'background-color', wholeTextBlocAttrs));
				if (!_v1.$) {
					var c = _v1.a;
					return $elm$core$Maybe$Just(c);
				} else {
					return $elm$core$Maybe$Just('white');
				}
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A8(
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$linkPicker,
					config,
					model.bY,
					'internalLinkPicker',
					_Utils_eq(
						selectionCollapsed,
						$elm$core$Maybe$Just(false)),
					_Utils_eq(
						model.n,
						$elm$core$Maybe$Just(2)),
					href,
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$OpenInternalLinks,
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$InsertInternalLink),
					A8(
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$docPicker,
					config,
					model.bY,
					'docPicker',
					_Utils_eq(
						selectionCollapsed,
						$elm$core$Maybe$Just(false)),
					_Utils_eq(
						model.n,
						$elm$core$Maybe$Just(4)),
					href,
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$OpenDocPicker,
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$InsertDocLink),
					A2(
					$mdgriffith$elm_ui$Element$map,
					model.bY,
					A7(
						$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$colorPicker,
						'fontColorPicker',
						true,
						_Utils_eq(
							model.n,
							$elm$core$Maybe$Just(0)),
						fontColor,
						$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$OpenFontColorPicker,
						$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$SetTextColor(
							_Utils_eq(
								selectionCollapsed,
								$elm$core$Maybe$Just(true)) || _Utils_eq(selectionCollapsed, $elm$core$Maybe$Nothing)),
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$html(
								$author$project$Internals$Icons$penTool($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$iconSize))))),
					A2(
					$mdgriffith$elm_ui$Element$map,
					model.bY,
					A7(
						$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$colorPicker,
						'backgroundColorPicker',
						true,
						_Utils_eq(
							model.n,
							$elm$core$Maybe$Just(1)),
						backgroundColor,
						$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$OpenBackgroundColorPicker,
						$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$SetBackgroundColor(
							_Utils_eq(
								selectionCollapsed,
								$elm$core$Maybe$Just(true)) || _Utils_eq(selectionCollapsed, $elm$core$Maybe$Nothing)),
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$html(
								$author$project$Internals$Icons$droplet($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$iconSize))))),
					A2(
					$mdgriffith$elm_ui$Element$map,
					model.bY,
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_Nil,
						$mdgriffith$elm_ui$Element$html(
							A2(
								$elm$html$Html$select,
								_List_fromArray(
									[
										$elm$html$Html$Events$onInput(
										$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$SetFont(
											_Utils_eq(
												selectionCollapsed,
												$elm$core$Maybe$Just(true)) || _Utils_eq(selectionCollapsed, $elm$core$Maybe$Nothing)))
									]),
								A2(
									$elm$core$List$map,
									fontOptionView(textFont),
									$elm$core$List$sort($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$fonts)))))),
					A2(
					$mdgriffith$elm_ui$Element$map,
					model.bY,
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_Nil,
						$mdgriffith$elm_ui$Element$html(
							A2(
								$elm$html$Html$select,
								_List_fromArray(
									[
										$elm$html$Html$Events$onInput(
										function (n) {
											return A2(
												$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$SetFontSize,
												_Utils_eq(
													selectionCollapsed,
													$elm$core$Maybe$Just(true)) || _Utils_eq(selectionCollapsed, $elm$core$Maybe$Nothing),
												A2(
													$elm$core$Maybe$withDefault,
													16,
													$elm$core$String$toInt(n)));
										})
									]),
								A2(
									$elm$core$List$map,
									fontSizeOptionView(fontSize),
									$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$fontSizes))))),
					A2(
					$mdgriffith$elm_ui$Element$map,
					model.bY,
					A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(10)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								A2(
									$author$project$Internals$CommonStyleHelpers$toogleButtonStyle,
									A2($elm$core$List$member, $author$project$Document$Document$FontAlignLeft, model.x),
									canUpdateGlobalAttr),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$html(
											$author$project$Internals$Icons$alignLeft($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$iconSize))),
									aI: canUpdateGlobalAttr ? $elm$core$Maybe$Just(
										$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$SetAlignMent($author$project$Document$Document$FontAlignLeft)) : $elm$core$Maybe$Nothing
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								A2(
									$author$project$Internals$CommonStyleHelpers$toogleButtonStyle,
									A2($elm$core$List$member, $author$project$Document$Document$Center, model.x),
									canUpdateGlobalAttr),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$html(
											$author$project$Internals$Icons$alignCenter($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$iconSize))),
									aI: canUpdateGlobalAttr ? $elm$core$Maybe$Just(
										$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$SetAlignMent($author$project$Document$Document$Center)) : $elm$core$Maybe$Nothing
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								A2(
									$author$project$Internals$CommonStyleHelpers$toogleButtonStyle,
									A2($elm$core$List$member, $author$project$Document$Document$FontAlignRight, model.x),
									canUpdateGlobalAttr),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$html(
											$author$project$Internals$Icons$alignRight($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$iconSize))),
									aI: canUpdateGlobalAttr ? $elm$core$Maybe$Just(
										$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$SetAlignMent($author$project$Document$Document$FontAlignRight)) : $elm$core$Maybe$Nothing
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								A2(
									$author$project$Internals$CommonStyleHelpers$toogleButtonStyle,
									A2($elm$core$List$member, $author$project$Document$Document$Justify, model.x),
									canUpdateGlobalAttr),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$html(
											$author$project$Internals$Icons$alignJustify($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$iconSize))),
									aI: canUpdateGlobalAttr ? $elm$core$Maybe$Just(
										$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$SetAlignMent($author$project$Document$Document$Justify)) : $elm$core$Maybe$Nothing
								})
							]))),
					A2(
					$mdgriffith$elm_ui$Element$map,
					model.bY,
					function () {
						var canUndoStyle = !_Utils_eq(
							selectionAttrs,
							$elm$core$Maybe$Just($elm$core$Dict$empty));
						return A2(
							$mdgriffith$elm_ui$Element$Input$button,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$alignRight,
								$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$buttonStyle(canUndoStyle)),
							{
								O: A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$html(
										$author$project$Internals$Icons$xSquare($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$iconSize))),
								aI: canUndoStyle ? $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$UndoStyle) : $elm$core$Maybe$Nothing
							});
					}())
				]));
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$decodeEditorMarkup = A3(
	$elm$json$Json$Decode$map2,
	$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$HtmlContent,
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['target', 'value']),
		$elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['target', 'textContent']),
		$elm$json$Json$Decode$string));
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$trixEditor = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$customToolbar, config, model),
					A2(
					$mdgriffith$elm_ui$Element$map,
					model.bY,
					A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(700))
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$html(
								A2(
									$elm$html$Html$div,
									_List_Nil,
									_List_fromArray(
										[
											A3(
											$elm$html$Html$node,
											'trix-toolbar',
											_List_fromArray(
												[
													$elm$html$Html$Attributes$id('trix-toolbar')
												]),
											_List_Nil),
											A3(
											$elm$html$Html$node,
											'input',
											_List_fromArray(
												[
													$elm$html$Html$Attributes$type_('hidden'),
													$elm$html$Html$Attributes$id('reset'),
													$elm$html$Html$Attributes$value('')
												]),
											_List_Nil),
											A3(
											$elm$html$Html$node,
											'trix-editor',
											_List_fromArray(
												[
													A2(
													$elm$html$Html$Events$on,
													'trix-change',
													A2($elm$json$Json$Decode$map, $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$GetHtmlContent, $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$decodeEditorMarkup)),
													A2(
													$elm$html$Html$Events$on,
													'trix-selection-change',
													A2(
														$elm$json$Json$Decode$map,
														$elm$core$Basics$always($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$GetSelection),
														$elm$json$Json$Decode$succeed(0))),
													$elm$html$Html$Attributes$class('trix-content'),
													$elm$html$Html$Attributes$class('trix-content-editor'),
													A2($elm$html$Html$Attributes$attribute, 'toolbar', 'trix-toolbar'),
													A2($elm$html$Html$Attributes$attribute, 'input', 'reset'),
													A2(
													$elm$html$Html$Attributes$style,
													'maxHeight',
													$elm$core$String$fromInt(config.fr - 155) + 'px'),
													A2($elm$html$Html$Attributes$style, 'overflow-y', 'auto')
												]),
											_List_Nil)
										])))
							])))
				]));
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$editor = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$trixEditor, config, model)
				]));
	});
var $author$project$Document$DocumentViews$StyleSheets$defaultStyleSheetCss = function (config) {
	var tags = $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'p',
				_List_fromArray(
					[
						_Utils_Tuple2('width', '100%')
					])),
				_Utils_Tuple2(
				'a',
				_List_fromArray(
					[
						_Utils_Tuple2('color', 'rgb(0,127,127)'),
						_Utils_Tuple2('text-decoration', 'none')
					]))
			]));
	var headings = function () {
		var seasonAttr = function () {
			var _v1 = config.lj;
			switch (_v1) {
				case 0:
					return $elm$core$Dict$fromList(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'h1',
								_List_fromArray(
									[
										_Utils_Tuple2('background-color', 'rgb(102 153 140)'),
										_Utils_Tuple2('color', 'rgb(240 248 255)')
									])),
								_Utils_Tuple2(
								'h2',
								_List_fromArray(
									[
										_Utils_Tuple2('background-color', 'rgb(102 153 140)'),
										_Utils_Tuple2('color', 'rgb(240 248 255)')
									])),
								_Utils_Tuple2('h3', _List_Nil)
							]));
				case 1:
					return $elm$core$Dict$fromList(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'h1',
								_List_fromArray(
									[
										_Utils_Tuple2('background-color', 'rgb(186 172 145)'),
										_Utils_Tuple2('color', 'rgb(0 0 0)')
									])),
								_Utils_Tuple2(
								'h2',
								_List_fromArray(
									[
										_Utils_Tuple2('background-color', 'rgb(255 193 58)'),
										_Utils_Tuple2('color', 'rgb(0 0 0)')
									])),
								_Utils_Tuple2('h3', _List_Nil)
							]));
				case 2:
					return $elm$core$Dict$fromList(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'h1',
								_List_fromArray(
									[
										_Utils_Tuple2('background-color', 'rgb(205 133 63)'),
										_Utils_Tuple2('color', 'rgb(67 46 42)')
									])),
								_Utils_Tuple2(
								'h2',
								_List_fromArray(
									[
										_Utils_Tuple2('background-color', 'rgb(205 133 63)'),
										_Utils_Tuple2('color', 'rgb(67 46 42)')
									])),
								_Utils_Tuple2('h3', _List_Nil)
							]));
				default:
					return $elm$core$Dict$fromList(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'h1',
								_List_fromArray(
									[
										_Utils_Tuple2('background-color', 'rgb(51 51 102)'),
										_Utils_Tuple2('color', 'rgb(240 248 255)')
									])),
								_Utils_Tuple2(
								'h2',
								_List_fromArray(
									[
										_Utils_Tuple2('background-color', 'rgb(51 51 102)'),
										_Utils_Tuple2('color', 'rgb(240 248 255)')
									])),
								_Utils_Tuple2('h3', _List_Nil)
							]));
			}
		}();
		var commonAttr = $elm$core$Dict$fromList(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'h1',
					_List_fromArray(
						[
							_Utils_Tuple2('font-size', '18px'),
							_Utils_Tuple2('text-align', 'center'),
							_Utils_Tuple2('font-weight', 'bold'),
							_Utils_Tuple2('padding', '10px 0px'),
							_Utils_Tuple2('margin-bottom', '15px'),
							_Utils_Tuple2('width', '100%')
						])),
					_Utils_Tuple2(
					'h2',
					_List_fromArray(
						[
							_Utils_Tuple2('font-size', '16px'),
							_Utils_Tuple2('text-align', 'center'),
							_Utils_Tuple2('font-weight', 'bold'),
							_Utils_Tuple2('padding', '2px 0px'),
							_Utils_Tuple2('width', '100%'),
							_Utils_Tuple2('margin-bottom', '15px'),
							_Utils_Tuple2('margin-top', '15px')
						])),
					_Utils_Tuple2(
					'h3',
					_List_fromArray(
						[
							_Utils_Tuple2('font-size', '16px'),
							_Utils_Tuple2('color', 'rgb(0 127 0)'),
							_Utils_Tuple2('font-weight', 'bold'),
							_Utils_Tuple2('margin-bottom', '15px'),
							_Utils_Tuple2('margin-top', '15px')
						]))
				]));
		return A3(
			$elm$core$Dict$foldr,
			F3(
				function (k, v, acc) {
					return A3(
						$elm$core$Dict$update,
						k,
						function (mbSeasonAttr) {
							if (!mbSeasonAttr.$) {
								var attrs = mbSeasonAttr.a;
								return $elm$core$Maybe$Just(
									_Utils_ap(v, attrs));
							} else {
								return $elm$core$Maybe$Just(v);
							}
						},
						acc);
				}),
			commonAttr,
			seasonAttr);
	}();
	return A3(
		$elm$core$List$foldr,
		$elm$core$Dict$union,
		$elm$core$Dict$empty,
		_List_fromArray(
			[headings, tags]));
};
var $author$project$Document$DocumentViews$StyleSheets$stringifyAttributes = function (attributes) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$map,
			function (_v0) {
				var attr = _v0.a;
				var value = _v0.b;
				return attr + (': ' + (value + ';'));
			},
			attributes));
};
var $author$project$Document$DocumentViews$StyleSheets$embeddedStyleSheet = F2(
	function (renderConfig, wholeTextBlocAttr) {
		var templateStylesheet = function () {
			var className = renderConfig.an ? '.trix-content-editor ' : '.trix-content ';
			var tagStyle = function (_v1) {
				var tag = _v1.a;
				var styles = _v1.b;
				return function (s) {
					return className + (tag + ('{' + (s + '}')));
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2(
							$elm$core$List$map,
							function (_v0) {
								var a = _v0.a;
								var v = _v0.b;
								return a + (':' + (v + ';'));
							},
							styles)));
			};
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					tagStyle,
					$elm$core$Dict$toList(
						$author$project$Document$DocumentViews$StyleSheets$defaultStyleSheetCss(renderConfig))));
		}();
		var styleSheet = A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A3(
					$elm$html$Html$node,
					'style',
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(
							templateStylesheet + (' .trix-content-editor{' + ($author$project$Document$DocumentViews$StyleSheets$stringifyAttributes(
								A2($elm$core$List$concatMap, $author$project$Document$DocumentViews$StyleSheets$docAttrToCss, wholeTextBlocAttr)) + ('\n                                }\n                            ' + ' \n\n                            .trix-content-editor p {\n                                display: block;\n                                margin: 0;\n                                padding : 0;\n                                line-height: 150%;\n                            }\n                            .trix-content p {\n                                display: block;\n                                margin: 0;\n                                padding : 0;\n                                line-height: 150%;\n                            }\n                            \n                    '))))
						]))
				]));
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_Nil,
			$mdgriffith$elm_ui$Element$html(styleSheet));
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$newsEditorView = F3(
	function (config, renderConfig, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_Nil,
			_List_fromArray(
				[
					A2($author$project$Document$DocumentViews$StyleSheets$embeddedStyleSheet, renderConfig, model.x),
					A2($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$editor, config, model)
				]));
	});
var $author$project$NewsEditor$NewsEditor$NoOp = {$: 16};
var $author$project$NewsEditor$NewsEditor$renderConfig = function (externalMsg) {
	return {
		e1: false,
		iP: $elm$time$Time$millisToPosix(0),
		iS: $elm$core$Dict$empty,
		an: true,
		jg: $elm$core$Dict$empty,
		jl: $elm$core$Dict$empty,
		jx: 1080,
		kb: 75,
		gT: $elm$core$Dict$empty,
		kK: $elm$core$Basics$always(
			externalMsg($author$project$NewsEditor$NewsEditor$NoOp)),
		kL: $elm$core$Basics$always(
			externalMsg($author$project$NewsEditor$NewsEditor$NoOp)),
		kM: $elm$core$Set$empty,
		g1: $elm$core$Set$empty,
		dM: $elm$core$Dict$empty,
		eH: 1,
		fB: $elm$core$Maybe$Nothing,
		lj: 0,
		mt: 1920,
		mw: $elm$core$Maybe$Nothing,
		fY: $elm$time$Time$utc
	};
};
var $author$project$NewsEditor$NewsEditor$OpenPicPicker = {$: 9};
var $author$project$NewsEditor$NewsEditor$setVisual = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				$author$project$NewsEditor$NewsEditor$itemStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$alignTop
					])),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$Font$bold]),
							$mdgriffith$elm_ui$Element$text('Image ')),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('(optionnel)'))
						])),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(190)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(190)),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey5)
						]),
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(178)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(178)),
								$mdgriffith$elm_ui$Element$Background$uncropped(
								A2(
									$elm$core$Maybe$withDefault,
									'',
									A2(
										$elm$core$Maybe$map,
										function ($) {
											return $.d$;
										},
										A2(
											$elm$core$Maybe$andThen,
											function ($) {
												return $.kS;
											},
											model.e)))),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY
							]),
						$mdgriffith$elm_ui$Element$none)),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$row,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text('Choisir'))
								])),
						aI: $elm$core$Maybe$Just(
							model.bY($author$project$NewsEditor$NewsEditor$OpenPicPicker))
					})
				]));
	});
var $mdgriffith$elm_ui$Element$spaceEvenly = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$spacing, $mdgriffith$elm_ui$Internal$Style$classes.lH);
var $mdgriffith$elm_ui$Element$BigDesktop = 3;
var $mdgriffith$elm_ui$Element$Desktop = 2;
var $mdgriffith$elm_ui$Element$Landscape = 1;
var $mdgriffith$elm_ui$Element$Phone = 0;
var $mdgriffith$elm_ui$Element$Portrait = 0;
var $mdgriffith$elm_ui$Element$Tablet = 1;
var $mdgriffith$elm_ui$Element$classifyDevice = function (window) {
	return {
		c$: function () {
			var shortSide = A2($elm$core$Basics$min, window.mt, window.jx);
			var longSide = A2($elm$core$Basics$max, window.mt, window.jx);
			return (shortSide < 600) ? 0 : ((longSide <= 1200) ? 1 : (((longSide > 1200) && (longSide <= 1920)) ? 2 : 3));
		}(),
		eD: (_Utils_cmp(window.mt, window.jx) < 0) ? 0 : 1
	};
};
var $author$project$Document$DocumentViews$StyleSheets$docMaxWidth = F3(
	function (_v0, editMode, previewMode) {
		var winWidth = _v0.a;
		var winHeight = _v0.b;
		var device = $mdgriffith$elm_ui$Element$classifyDevice(
			{jx: winHeight, mt: winWidth});
		if (editMode) {
			switch (previewMode) {
				case 0:
					return 1000;
				case 2:
					return 768;
				case 3:
					return 320;
				default:
					return 950;
			}
		} else {
			if (device.c$ === 3) {
				return 1000;
			} else {
				return 1000;
			}
		}
	});
var $author$project$Document$DocumentViews$StyleSheets$headingStyles = F3(
	function (season, _v0, editMode) {
		var winWidth = _v0.a;
		var winHeight = _v0.b;
		var seasonAttr = function () {
			switch (season) {
				case 0:
					return $elm$core$Dict$fromList(
						_List_fromArray(
							[
								_Utils_Tuple2(
								1,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color(
										A4($mdgriffith$elm_ui$Element$rgba255, 102, 153, 140, 1)),
										$mdgriffith$elm_ui$Element$Font$color(
										A4($mdgriffith$elm_ui$Element$rgba255, 240, 248, 255, 1))
									])),
								_Utils_Tuple2(
								2,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color(
										A4($mdgriffith$elm_ui$Element$rgba255, 102, 153, 140, 1)),
										$mdgriffith$elm_ui$Element$Font$color(
										A4($mdgriffith$elm_ui$Element$rgba255, 240, 248, 255, 1))
									])),
								_Utils_Tuple2(3, _List_Nil)
							]));
				case 1:
					return $elm$core$Dict$fromList(
						_List_fromArray(
							[
								_Utils_Tuple2(
								1,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color(
										A4($mdgriffith$elm_ui$Element$rgba255, 186, 172, 145, 1)),
										$mdgriffith$elm_ui$Element$Font$color(
										A4($mdgriffith$elm_ui$Element$rgba255, 0, 0, 0, 1))
									])),
								_Utils_Tuple2(
								2,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color(
										A4($mdgriffith$elm_ui$Element$rgba255, 255, 193, 58, 1)),
										$mdgriffith$elm_ui$Element$Font$color(
										A4($mdgriffith$elm_ui$Element$rgba255, 0, 0, 0, 1))
									])),
								_Utils_Tuple2(3, _List_Nil)
							]));
				case 2:
					return $elm$core$Dict$fromList(
						_List_fromArray(
							[
								_Utils_Tuple2(
								1,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color(
										A4($mdgriffith$elm_ui$Element$rgba255, 205, 133, 63, 1)),
										$mdgriffith$elm_ui$Element$Font$color(
										A4($mdgriffith$elm_ui$Element$rgba255, 67, 46, 42, 1))
									])),
								_Utils_Tuple2(
								2,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color(
										A4($mdgriffith$elm_ui$Element$rgba255, 205, 133, 63, 1)),
										$mdgriffith$elm_ui$Element$Font$color(
										A4($mdgriffith$elm_ui$Element$rgba255, 67, 46, 42, 1))
									])),
								_Utils_Tuple2(3, _List_Nil)
							]));
				default:
					return $elm$core$Dict$fromList(
						_List_fromArray(
							[
								_Utils_Tuple2(
								1,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color(
										A4($mdgriffith$elm_ui$Element$rgba255, 51, 51, 102, 1)),
										$mdgriffith$elm_ui$Element$Font$color(
										A4($mdgriffith$elm_ui$Element$rgba255, 240, 248, 255, 1))
									])),
								_Utils_Tuple2(
								2,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color(
										A4($mdgriffith$elm_ui$Element$rgba255, 51, 51, 102, 1)),
										$mdgriffith$elm_ui$Element$Font$color(
										A4($mdgriffith$elm_ui$Element$rgba255, 240, 248, 255, 1))
									])),
								_Utils_Tuple2(3, _List_Nil)
							]));
			}
		}();
		var commonAttr = $elm$core$Dict$fromList(
			_List_fromArray(
				[
					_Utils_Tuple2(
					1,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(18),
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$Font$bold,
							A2($mdgriffith$elm_ui$Element$paddingXY, 0, 10),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						])),
					_Utils_Tuple2(
					2,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(16),
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$Font$bold,
							A2($mdgriffith$elm_ui$Element$paddingXY, 0, 2),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						])),
					_Utils_Tuple2(
					3,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(16),
							$mdgriffith$elm_ui$Element$Font$color(
							A3($mdgriffith$elm_ui$Element$rgb, 0, 0.5, 0)),
							$mdgriffith$elm_ui$Element$Font$bold
						]))
				]));
		return A3(
			$elm$core$Dict$foldr,
			F3(
				function (k, v, acc) {
					return A3(
						$elm$core$Dict$update,
						k,
						function (mbSeasonAttr) {
							if (!mbSeasonAttr.$) {
								var attrs = mbSeasonAttr.a;
								return $elm$core$Maybe$Just(
									_Utils_ap(v, attrs));
							} else {
								return $elm$core$Maybe$Just(v);
							}
						},
						acc);
				}),
			commonAttr,
			seasonAttr);
	});
var $author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet = function (config) {
	return {
		ib: _List_Nil,
		iB: _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(15),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		iT: {
			br: $elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'colImg',
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX])),
						_Utils_Tuple2('rowImg', _List_Nil),
						_Utils_Tuple2(
						'selected',
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Border$shadow(
								{
									ic: 10,
									iA: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
									kD: _Utils_Tuple2(4, 4),
									fJ: 5
								})
							]))
					])),
			jD: $elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'root',
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding(20),
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$Font$family(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$typeface('Arial')
									])),
								$mdgriffith$elm_ui$Element$Font$size(16),
								$mdgriffith$elm_ui$Element$width(
								A2(
									$mdgriffith$elm_ui$Element$maximum,
									A3(
										$author$project$Document$DocumentViews$StyleSheets$docMaxWidth,
										_Utils_Tuple2(config.mt, config.jx),
										config.an,
										config.eH),
									$mdgriffith$elm_ui$Element$fill)),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$centerX
							]))
					]))
		},
		jv: A3(
			$author$project$Document$DocumentViews$StyleSheets$headingStyles,
			config.lj,
			_Utils_Tuple2(config.mt, config.jx),
			config.an),
		jH: _List_Nil,
		gN: _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$color(
				A3($mdgriffith$elm_ui$Element$rgb, 0, 0.5, 0.5))
			]),
		kQ: _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		kU: function () {
			var _v0 = config.lj;
			switch (_v0) {
				case 0:
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							A3($mdgriffith$elm_ui$Element$rgb255, 41, 80, 0))
						]);
				case 1:
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba255, 255, 193, 58, 1))
						]);
				case 2:
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							A3($mdgriffith$elm_ui$Element$rgb255, 255, 211, 37))
						]);
				default:
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							A3($mdgriffith$elm_ui$Element$rgb255, 0, 128, 128))
						]);
			}
		}(),
		k7: _List_Nil,
		lc: _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(15)
			]),
		l1: _List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(15),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		mc: _List_Nil
	};
};
var $mdgriffith$elm_ui$Internal$Model$Heading = function (a) {
	return {$: 4, a: a};
};
var $mdgriffith$elm_ui$Element$Region$heading = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Describe, $mdgriffith$elm_ui$Internal$Model$Heading);
var $author$project$Document$DocumentViews$DocumentView$idStyle = F2(
	function (_v0, _v1) {
		var customStyles = _v0.iT;
		var uid = _v1.cW;
		var docStyleId = _v1.bx;
		var htmlId = _v1.bE;
		var classes = _v1.br;
		return _Utils_ap(
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2(
					$elm$core$Maybe$andThen,
					function (id) {
						return A2($elm$core$Dict$get, id, customStyles.jD);
					},
					docStyleId)),
			_Utils_ap(
				A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2(
						$elm$core$Maybe$map,
						function (hid) {
							return _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$htmlAttribute(
									$elm$html$Html$Attributes$id(hid))
								]);
						},
						htmlId)),
				$elm$core$List$concat(
					A2(
						$elm$core$List$filterMap,
						function (c) {
							return A2($elm$core$Dict$get, c, customStyles.br);
						},
						$elm$core$Set$toList(classes)))));
	});
var $author$project$Document$DocumentViews$DocumentView$processLinks = F2(
	function (config, node) {
		var processLinkAttrs = F2(
			function (processed, toProcess) {
				processLinkAttrs:
				while (true) {
					if (toProcess.b) {
						if (toProcess.a.a === 'href') {
							var _v1 = toProcess.a;
							var url = _v1.b;
							var xs = toProcess.b;
							return config.an ? _Utils_ap(
								$elm$core$List$reverse(processed),
								xs) : (A2($elm$core$String$startsWith, 'lien-interne:', url) ? A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									'href',
									A2(
										$elm$core$Maybe$withDefault,
										url,
										function (cId) {
											return A2($elm$core$Dict$get, cId, config.dM);
										}(
											A2(
												$elm$core$String$dropLeft,
												$elm$core$String$length('lien-interne:'),
												url)))),
								_Utils_ap(
									$elm$core$List$reverse(processed),
									xs)) : (A2($elm$core$String$startsWith, 'doc:', url) ? A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									'href',
									A2(
										$elm$core$String$dropLeft,
										$elm$core$String$length('doc:'),
										url)),
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2('target', '_blank'),
									_Utils_ap(
										$elm$core$List$reverse(processed),
										xs))) : (A2($elm$core$Dict$member, url, config.dM) ? A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									'href',
									A2(
										$elm$core$Maybe$withDefault,
										'',
										A2($elm$core$Dict$get, url, config.dM))),
								_Utils_ap(
									$elm$core$List$reverse(processed),
									xs)) : A2(
								$elm$core$List$cons,
								_Utils_Tuple2('href', url),
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2('target', '_blank'),
									_Utils_ap(
										$elm$core$List$reverse(processed),
										xs))))));
						} else {
							var other = toProcess.a;
							var xs = toProcess.b;
							var $temp$processed = A2($elm$core$List$cons, other, processed),
								$temp$toProcess = xs;
							processed = $temp$processed;
							toProcess = $temp$toProcess;
							continue processLinkAttrs;
						}
					} else {
						return processed;
					}
				}
			});
		switch (node.$) {
			case 1:
				if (node.a === 'a') {
					var attrs = node.b;
					var nodes = node.c;
					return A3(
						$hecrj$html_parser$Html$Parser$Element,
						'a',
						A2(processLinkAttrs, _List_Nil, attrs),
						A2(
							$elm$core$List$map,
							$author$project$Document$DocumentViews$DocumentView$processLinks(config),
							nodes));
				} else {
					var tag = node.a;
					var attrs = node.b;
					var nodes = node.c;
					return A3(
						$hecrj$html_parser$Html$Parser$Element,
						tag,
						attrs,
						A2(
							$elm$core$List$map,
							$author$project$Document$DocumentViews$DocumentView$processLinks(config),
							nodes));
				}
			case 0:
				var value = node.a;
				return $hecrj$html_parser$Html$Parser$Text(value);
			default:
				var value = node.a;
				return $hecrj$html_parser$Html$Parser$Comment(value);
		}
	});
var $mdgriffith$elm_ui$Element$Font$alignLeft = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.l6);
var $mdgriffith$elm_ui$Element$Font$alignRight = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.ma);
var $author$project$Document$DocumentViews$StyleSheets$getDevice = function (config) {
	if (config.an) {
		var _v0 = config.eH;
		switch (_v0) {
			case 0:
				return {c$: 3, eD: 1};
			case 1:
				return {c$: 2, eD: 1};
			case 2:
				return {c$: 1, eD: 0};
			default:
				return {c$: 0, eD: 0};
		}
	} else {
		return $mdgriffith$elm_ui$Element$classifyDevice(
			{jx: config.jx, mt: config.mt});
	}
};
var $mdgriffith$elm_ui$Element$Font$justify = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.l5);
var $elm$html$Html$Events$onDoubleClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'dblclick',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onDoubleClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onDoubleClick);
var $author$project$Document$Document$toSeColor = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	return A3($mdgriffith$elm_ui$Element$rgb, r, g, b);
};
var $author$project$Document$DocumentViews$DocumentView$renderAttrs = F2(
	function (config, attrs) {
		var device = $author$project$Document$DocumentViews$StyleSheets$getDevice(config);
		var renderAttr = function (attr) {
			switch (attr.$) {
				case 0:
					var pad = attr.a;
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$paddingEach(pad)
						]);
				case 1:
					var spcX = attr.a;
					var spcY = attr.b;
					return _List_fromArray(
						[
							A2($mdgriffith$elm_ui$Element$spacingXY, spcX, spcY)
						]);
				case 2:
					return ((!device.c$) || (device.c$ === 1)) ? _List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]) : _Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$alignRight,
								$mdgriffith$elm_ui$Element$paddingEach(
								{a2: 0, bc: 15, bl: 0, bq: 0})
							]),
						config.an ? _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A2($elm$html$Html$Attributes$style, 'z-index', '1'))
							]) : _List_Nil);
				case 3:
					return ((!device.c$) || (device.c$ === 1)) ? _List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]) : _Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$alignLeft,
								$mdgriffith$elm_ui$Element$paddingEach(
								{a2: 0, bc: 0, bl: 15, bq: 0})
							]),
						config.an ? _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$htmlAttribute(
								A2($elm$html$Html$Attributes$style, 'z-index', '1'))
							]) : _List_Nil);
				case 4:
					return _List_fromArray(
						[$mdgriffith$elm_ui$Element$pointer]);
				case 5:
					var color = attr.a;
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							$author$project$Document$Document$toSeColor(color))
						]);
				case 8:
					var n = attr.a;
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(n))
						]);
				case 9:
					var n = attr.a;
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(n))
						]);
				case 7:
					var _v1 = device.c$;
					switch (_v1) {
						case 0:
							return _List_Nil;
						case 1:
							return _List_Nil;
						default:
							return _List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink)
								]);
					}
				case 6:
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]);
				case 10:
					var n = attr.a;
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$fillPortion(n))
						]);
				case 11:
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Border$color(
							A3($mdgriffith$elm_ui$Element$rgb, 127, 127, 127)),
							$mdgriffith$elm_ui$Element$Border$width(1),
							$mdgriffith$elm_ui$Element$Border$solid
						]);
				case 13:
					var color = attr.a;
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color(
							$author$project$Document$Document$toSeColor(color))
						]);
				case 12:
					var s = attr.a;
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$family(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$typeface(s)
								]))
						]);
				case 16:
					return _List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$alignRight]);
				case 15:
					return _List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$alignLeft]);
				case 14:
					var n = attr.a;
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(n)
						]);
				case 17:
					return _List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$center]);
				case 18:
					return _List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$justify]);
				case 19:
					return _List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$bold]);
				case 20:
					return _List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$italic]);
				case 21:
					return _List_Nil;
				default:
					var uid = attr.a;
					var zipperEventHandler = attr.b;
					var _v2 = config.mw;
					if (_v2.$ === 1) {
						return _List_Nil;
					} else {
						var handlers = _v2.a;
						switch (zipperEventHandler) {
							case 0:
								return _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Events$onClick(
										handlers.iE(uid))
									]);
							case 1:
								return _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Events$onDoubleClick(
										handlers.iF(uid))
									]);
							case 2:
								return _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$mouseOver(
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Background$color(
												A4($mdgriffith$elm_ui$Element$rgba, 0.8, 0.8, 0.8, 0.5))
											])),
										$mdgriffith$elm_ui$Element$pointer,
										$mdgriffith$elm_ui$Element$htmlAttribute(
										A2($elm$html$Html$Attributes$style, 'transition', '0.3s'))
									]);
							case 4:
								return _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$pointer,
										$mdgriffith$elm_ui$Element$mouseOver(
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Background$color(
												A4($mdgriffith$elm_ui$Element$rgba, 0.8, 0.8, 0.8, 0.5))
											])),
										$mdgriffith$elm_ui$Element$htmlAttribute(
										A2($elm$html$Html$Attributes$style, 'transition', '0.3s')),
										$mdgriffith$elm_ui$Element$Events$onDoubleClick(handlers.ip)
									]);
							default:
								return _List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Events$onClick(
										handlers.kr(uid)),
										$mdgriffith$elm_ui$Element$pointer
									]);
						}
					}
			}
		};
		return A2($elm$core$List$concatMap, renderAttr, attrs);
	});
var $mdgriffith$elm_ui$Element$link = F2(
	function (attrs, _v0) {
		var url = _v0.d$;
		var label = _v0.O;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.ea + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.bU + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.dB)))),
								attrs))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$Document$DocumentViews$DocumentView$renderTextBlockPrimitive = F3(
	function (config, tbAttrs, p) {
		var styleSheet = $author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		if (!p.$) {
			var attrs = p.a;
			var s = p.b;
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					styleSheet.mc,
					_Utils_ap(
						A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, tbAttrs),
						A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				$mdgriffith$elm_ui$Element$text(s));
		} else {
			var attrs = p.a;
			var targetBlank = p.b.hy;
			var url = p.b.d$;
			var label = p.b.O;
			var url_ = targetBlank ? url : A2(
				$elm$core$Maybe$withDefault,
				'',
				A2($elm$core$Dict$get, url, config.dM));
			var linkFun = targetBlank ? $mdgriffith$elm_ui$Element$newTabLink : $mdgriffith$elm_ui$Element$link;
			return config.an ? A2(
				$mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					styleSheet.gN,
					_Utils_ap(
						A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, tbAttrs),
						A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				$mdgriffith$elm_ui$Element$text(label)) : A2(
				linkFun,
				_Utils_ap(
					styleSheet.gN,
					_Utils_ap(
						A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, tbAttrs),
						A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				{
					O: $mdgriffith$elm_ui$Element$text(label),
					d$: url_
				});
		}
	});
var $author$project$Document$DocumentViews$DocumentView$renderLi = F3(
	function (config, tbAttrs, li) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$paddingEach(
						{a2: 0, bc: 20, bl: 0, bq: 0})
					]),
				A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, tbAttrs)),
			_Utils_ap(
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text('•  '))
					]),
				A2(
					$elm$core$List$map,
					A2($author$project$Document$DocumentViews$DocumentView$renderTextBlockPrimitive, config, tbAttrs),
					li)));
	});
var $author$project$Document$DocumentViews$DocumentView$toHtml = F3(
	function (config, level, node) {
		switch (node.$) {
			case 1:
				var tag = node.a;
				var attrs = node.b;
				var nodes = node.c;
				var templateTagAttr = function (s) {
					return A2($elm$html$Html$Attributes$attribute, 'style', s);
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2(
							$elm$core$List$map,
							function (_v2) {
								var a = _v2.a;
								var v = _v2.b;
								return a + (':' + (v + ';'));
							},
							A2(
								$elm$core$Maybe$withDefault,
								_List_Nil,
								A2(
									$elm$core$Dict$get,
									tag,
									$author$project$Document$DocumentViews$StyleSheets$defaultStyleSheetCss(config))))));
				var attrs_ = A2(
					$elm$core$List$cons,
					templateTagAttr,
					A2(
						$elm$core$List$map,
						function (_v1) {
							var a = _v1.a;
							var v = _v1.b;
							return A2($elm$html$Html$Attributes$attribute, a, v);
						},
						attrs));
				return A3(
					$elm$html$Html$node,
					tag,
					attrs_,
					A2(
						$elm$core$List$map,
						A2($author$project$Document$DocumentViews$DocumentView$toHtml, config, level),
						nodes));
			case 0:
				var value = node.a;
				return $elm$html$Html$text(value);
			default:
				var value = node.a;
				return A2($elm$html$Html$span, _List_Nil, _List_Nil);
		}
	});
var $author$project$Document$DocumentViews$DocumentView$renderTextBlockElement = F4(
	function (config, id, tbAttrs, tbe) {
		var styleSheet = $author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		switch (tbe.$) {
			case 0:
				var attrs = tbe.a;
				var xs = tbe.b;
				return A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_Utils_ap(
						styleSheet.kQ,
						_Utils_ap(
							A2($author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
							_Utils_ap(
								A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, tbAttrs),
								A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs)))),
					A2(
						$elm$core$List$map,
						A2($author$project$Document$DocumentViews$DocumentView$renderTextBlockPrimitive, config, tbAttrs),
						xs));
			case 1:
				var attrs = tbe.a;
				var xs = tbe.b;
				return A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_Utils_ap(
						A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, tbAttrs),
						_Utils_ap(
							A2($author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
							_Utils_ap(
								A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(10)
									])))),
					A2(
						$elm$core$List$map,
						A2($author$project$Document$DocumentViews$DocumentView$renderLi, config, tbAttrs),
						xs));
			case 2:
				var attrs = tbe.a;
				var _v1 = tbe.b;
				var level = _v1.a;
				var s = _v1.b;
				var headingStyle = A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2($elm$core$Dict$get, level, styleSheet.jv));
				return A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Region$heading(level)
							]),
						_Utils_ap(
							headingStyle,
							_Utils_ap(
								A2($author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
								_Utils_ap(
									A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, tbAttrs),
									A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))))),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(s)
						]));
			case 3:
				var p = tbe.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					A2($author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
					A3($author$project$Document$DocumentViews$DocumentView$renderTextBlockPrimitive, config, tbAttrs, p));
			default:
				var html = tbe.a;
				return function (r) {
					return A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_Utils_ap(
								A2($author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
								A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, tbAttrs))),
						_List_fromArray(
							[
								A2($author$project$Document$DocumentViews$StyleSheets$embeddedStyleSheet, config, tbAttrs),
								$mdgriffith$elm_ui$Element$html(r)
							]));
				}(
					A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('trix-content'),
								A2(
								$elm$html$Html$Attributes$attribute,
								'style',
								'width: 100%;' + $author$project$Document$DocumentViews$StyleSheets$stringifyAttributes(
									A2($elm$core$List$concatMap, $author$project$Document$DocumentViews$StyleSheets$docAttrToCss, tbAttrs)))
							]),
						A2(
							$elm$core$List$map,
							A2($author$project$Document$DocumentViews$DocumentView$toHtml, config, 0),
							A2(
								$elm$core$List$map,
								$author$project$Document$DocumentViews$DocumentView$processLinks(config),
								A2(
									$elm$core$Result$withDefault,
									_List_Nil,
									$hecrj$html_parser$Html$Parser$run(html))))));
		}
	});
var $author$project$Document$DocumentViews$DocumentView$renderTextBlock = F4(
	function (config, id, attrs, xs) {
		return A2(
			$elm$core$List$map,
			A3($author$project$Document$DocumentViews$DocumentView$renderTextBlockElement, config, id, attrs),
			xs);
	});
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$textBlockPreview = F2(
	function (model, config) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					A2(
						$mdgriffith$elm_ui$Element$minimum,
						500,
						A2($mdgriffith$elm_ui$Element$maximum, 700, $mdgriffith$elm_ui$Element$fill))),
					$mdgriffith$elm_ui$Element$height(
					A2($mdgriffith$elm_ui$Element$maximum, 500, $mdgriffith$elm_ui$Element$fill)),
					$mdgriffith$elm_ui$Element$scrollbarY,
					$mdgriffith$elm_ui$Element$spacing(20),
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$Border$shadow(
					{
						ic: 10,
						iA: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.16),
						kD: _Utils_Tuple2(4, 4),
						fJ: 5
					}),
					$mdgriffith$elm_ui$Element$padding(15)
				]),
			A4(
				$author$project$Document$DocumentViews$DocumentView$renderTextBlock,
				config,
				{br: $elm$core$Set$empty, bx: $elm$core$Maybe$Nothing, bE: $elm$core$Maybe$Nothing, cW: -1},
				model.x,
				model.q));
	});
var $author$project$NewsEditor$NewsEditor$validNews = function (_v0) {
	var title = _v0.fP;
	var content = _v0.iI;
	var expiry = _v0.i8;
	return (title !== '') && ((!_Utils_eq(content, $elm$core$Maybe$Nothing)) && ((!_Utils_eq(
		A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.lZ;
			},
			content),
		$elm$core$Maybe$Nothing)) && ((!_Utils_eq(
		A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.lZ;
			},
			content),
		$elm$core$Maybe$Just(_List_Nil))) && (!_Utils_eq(
		expiry,
		$elm$time$Time$millisToPosix(0))))));
};
var $author$project$NewsEditor$NewsEditor$ClosePicPicker = {$: 10};
var $author$project$NewsEditor$NewsEditor$ConfirmPic = function (a) {
	return {$: 11, a: a};
};
var $author$project$NewsEditor$NewsEditor$visualPickerView = F2(
	function (config, model) {
		return A5($author$project$FileExplorer$FileExplorer$pickerView, $author$project$NewsEditor$NewsEditor$ClosePicPicker, $author$project$NewsEditor$NewsEditor$ConfirmPic, 0, config, model.bY);
	});
var $author$project$NewsEditor$NewsEditor$newsEditorView = F2(
	function (config, model) {
		var textBlockConfig = {fd: config.fd, be: config.be, fr: 400, J: config.J, fY: config.fY};
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				$author$project$NewsEditor$NewsEditor$containerStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					])),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$row,
							_Utils_ap(
								$author$project$NewsEditor$NewsEditor$itemStyle,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(705))
									])),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$below(
											(!model.bI) ? $mdgriffith$elm_ui$Element$none : A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$Background$color(
														A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
														$mdgriffith$elm_ui$Element$width(
														A2(
															$mdgriffith$elm_ui$Element$minimum,
															850,
															A2($mdgriffith$elm_ui$Element$maximum, 920, $mdgriffith$elm_ui$Element$shrink))),
														$mdgriffith$elm_ui$Element$Border$shadow(
														{
															ic: 10,
															iA: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
															kD: _Utils_Tuple2(4, 4),
															fJ: 5
														})
													]),
												A2($author$project$NewsEditor$NewsEditor$visualPickerView, config, model)))
										]),
									$mdgriffith$elm_ui$Element$none),
									A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$Font$bold]),
											$mdgriffith$elm_ui$Element$text('Titre actualité')),
											A2(
											$mdgriffith$elm_ui$Element$Input$text,
											_Utils_ap(
												$author$project$Internals$CommonStyleHelpers$textInputStyle,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$width(
														$mdgriffith$elm_ui$Element$px(500)),
														$mdgriffith$elm_ui$Element$spacing(0)
													])),
											{
												O: $mdgriffith$elm_ui$Element$Input$labelHidden(''),
												dJ: A2($elm$core$Basics$composeL, model.bY, $author$project$NewsEditor$NewsEditor$SetTitle),
												dO: $elm$core$Maybe$Nothing,
												dV: A2(
													$elm$core$Maybe$withDefault,
													'',
													A2(
														$elm$core$Maybe$map,
														function ($) {
															return $.fP;
														},
														model.e))
											})
										])),
									A2(
									$mdgriffith$elm_ui$Element$column,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$alignRight,
											$mdgriffith$elm_ui$Element$spacing(10)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$Font$bold]),
											$mdgriffith$elm_ui$Element$text('Limite validité')),
											A2(
											$mdgriffith$elm_ui$Element$Input$text,
											_Utils_ap(
												$author$project$Internals$CommonStyleHelpers$textInputStyle,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$width(
														$mdgriffith$elm_ui$Element$px(150)),
														(!_Utils_eq(
														A2(
															$elm$core$Maybe$map,
															function ($) {
																return $.i8;
															},
															model.e),
														$elm$core$Maybe$Just(
															$elm$time$Time$millisToPosix(0)))) ? $mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$green4) : $mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$red4)
													])),
											{
												O: $mdgriffith$elm_ui$Element$Input$labelHidden(''),
												dJ: A2($elm$core$Basics$composeL, model.bY, $author$project$NewsEditor$NewsEditor$SetExpiry),
												dO: $elm$core$Maybe$Just(
													A2(
														$mdgriffith$elm_ui$Element$Input$placeholder,
														_List_fromArray(
															[$mdgriffith$elm_ui$Element$clip]),
														$mdgriffith$elm_ui$Element$text('jj/mm/aaaa'))),
												dV: function () {
													var _v0 = A2(
														$elm$core$Maybe$map,
														function ($) {
															return $.i8;
														},
														model.e);
													if (_v0.$ === 1) {
														return model.bA;
													} else {
														var t = _v0.a;
														return _Utils_eq(
															t,
															$elm$time$Time$millisToPosix(0)) ? model.bA : A2($author$project$Internals$CommonHelpers$dateToStr, config.fY, t);
													}
												}()
											})
										]))
								])),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_Utils_ap(
								$author$project$NewsEditor$NewsEditor$itemStyle,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(10)
									])),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$Font$bold]),
											$mdgriffith$elm_ui$Element$text('Contenu actualité')),
											A2(
											$mdgriffith$elm_ui$Element$Input$button,
											_Utils_ap(
												$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$alignRight])),
											{
												O: model.bt ? $mdgriffith$elm_ui$Element$text('Edition') : $mdgriffith$elm_ui$Element$text('Aperçu'),
												aI: $elm$core$Maybe$Just(
													model.bY($author$project$NewsEditor$NewsEditor$ToogleContentPreview))
											})
										])),
									model.bt ? A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(675)),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(396))
										]),
									A2(
										$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$textBlockPreview,
										model.co,
										$author$project$NewsEditor$NewsEditor$renderConfig(model.bY))) : A3(
									$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$newsEditorView,
									textBlockConfig,
									$author$project$NewsEditor$NewsEditor$renderConfig(model.bY),
									model.co)
								]))
						])),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2($author$project$NewsEditor$NewsEditor$setVisual, config, model),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_Utils_ap(
								$author$project$NewsEditor$NewsEditor$itemStyle,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spaceEvenly,
										$mdgriffith$elm_ui$Element$alignBottom,
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									])),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$saveButtonStyle(
										A2(
											$elm$core$Maybe$withDefault,
											false,
											A2($elm$core$Maybe$map, $author$project$NewsEditor$NewsEditor$validNews, model.e))),
									{
										O: $mdgriffith$elm_ui$Element$text('Sauvegarder'),
										aI: function () {
											var _v1 = A2($elm$core$Maybe$map, $author$project$NewsEditor$NewsEditor$validNews, model.e);
											if ((!_v1.$) && _v1.a) {
												return $elm$core$Maybe$Just(
													model.bY($author$project$NewsEditor$NewsEditor$SaveNews));
											} else {
												return $elm$core$Maybe$Nothing;
											}
										}()
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
									{
										O: $mdgriffith$elm_ui$Element$text('Retour'),
										aI: $elm$core$Maybe$Just(
											model.bY($author$project$NewsEditor$NewsEditor$ToNewsSelector))
									})
								]))
						]))
				]));
	});
var $author$project$NewsEditor$NewsEditor$EditContent = {$: 4};
var $author$project$NewsEditor$NewsEditor$RemoveNews = {$: 7};
var $author$project$NewsEditor$NewsEditor$ToogleNews = function (a) {
	return {$: 1, a: a};
};
var $author$project$Internals$Icons$checkSquare = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'check-square',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('9 11 12 14 22 4')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11')
					]),
				_List_Nil)
			]));
};
var $mdgriffith$elm_ui$Element$Keyed$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.dt + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.bU)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Keyed(children));
	});
var $author$project$Internals$Icons$square = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'square',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$rect,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x('3'),
						$elm$svg$Svg$Attributes$y('3'),
						$elm$svg$Svg$Attributes$width('18'),
						$elm$svg$Svg$Attributes$height('18'),
						$elm$svg$Svg$Attributes$rx('2'),
						$elm$svg$Svg$Attributes$ry('2')
					]),
				_List_Nil)
			]));
};
var $author$project$NewsEditor$NewsEditor$checkView = F8(
	function (isChecked, isBuffer, newsId, title, zone, date, expiry, currentTime) {
		return A2(
			$mdgriffith$elm_ui$Element$Keyed$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2($mdgriffith$elm_ui$Element$paddingXY, 5, 5),
					$mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$NewsEditor$NewsEditor$ToogleNews(newsId)),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							isBuffer ? $mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey4) : $mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey5)
						])),
					isBuffer ? $mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey4) : $author$project$Internals$CommonStyleHelpers$noAttr,
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					_Utils_Tuple2(
					title,
					A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(10)
							]),
						_List_fromArray(
							[
								isChecked ? A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
									]),
								$mdgriffith$elm_ui$Element$html(
									$author$project$Internals$Icons$checkSquare(18))) : A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
									]),
								$mdgriffith$elm_ui$Element$html(
									$author$project$Internals$Icons$square(18))),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey2)
									]),
								$mdgriffith$elm_ui$Element$text(title))
							]))),
					_Utils_Tuple2(
					title,
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$alignRight,
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(150))
							]),
						$mdgriffith$elm_ui$Element$text(
							A2($author$project$Internals$CommonHelpers$dateToStr, zone, date)))),
					_Utils_Tuple2(
					title,
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$alignRight,
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(150)),
								(_Utils_cmp(
								$elm$time$Time$posixToMillis(expiry),
								$elm$time$Time$posixToMillis(currentTime)) < 0) ? $mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$red4) : $author$project$Internals$CommonStyleHelpers$noAttr
							]),
						$mdgriffith$elm_ui$Element$text(
							A2($author$project$Internals$CommonHelpers$dateToStr, zone, expiry))))
				]));
	});
var $elm$core$Set$size = function (_v0) {
	var dict = _v0;
	return $elm$core$Dict$size(dict);
};
var $author$project$NewsEditor$NewsEditor$newsSelectorView = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				$author$project$NewsEditor$NewsEditor$containerStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					])),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						$author$project$NewsEditor$NewsEditor$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(940))
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(
								_Utils_eq(model.e, $elm$core$Maybe$Nothing)),
							{
								O: $mdgriffith$elm_ui$Element$text('Créer actualité'),
								aI: function () {
									var _v0 = model.e;
									if (_v0.$ === 1) {
										return $elm$core$Maybe$Just($author$project$NewsEditor$NewsEditor$EditContent);
									} else {
										return $elm$core$Maybe$Nothing;
									}
								}()
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(model.e, $elm$core$Maybe$Nothing)),
							{
								O: $mdgriffith$elm_ui$Element$text('Modifier actualité'),
								aI: A2(
									$elm$core$Maybe$map,
									$elm$core$Basics$always($author$project$NewsEditor$NewsEditor$EditContent),
									model.e)
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$deleteButtonStyle(
								!$elm$core$Set$isEmpty(model._)),
							{
								O: $mdgriffith$elm_ui$Element$text(
									function (n) {
										return (n > 1) ? 'Supprimer actualités' : 'Supprimer actualité';
									}(
										$elm$core$Set$size(model._))),
								aI: (!$elm$core$Set$isEmpty(model._)) ? $elm$core$Maybe$Just($author$project$NewsEditor$NewsEditor$RemoveNews) : $elm$core$Maybe$Nothing
							})
						])),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						$author$project$NewsEditor$NewsEditor$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(10),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$spacing(15),
									A2($mdgriffith$elm_ui$Element$paddingXY, 10, 0)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$Font$bold]),
									$mdgriffith$elm_ui$Element$text('Titre actualité')),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$bold,
											$mdgriffith$elm_ui$Element$alignRight,
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(150))
										]),
									$mdgriffith$elm_ui$Element$text('Date de création')),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$bold,
											$mdgriffith$elm_ui$Element$alignRight,
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(163))
										]),
									$mdgriffith$elm_ui$Element$text('Limite de validité'))
								])),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Border$width(2),
									$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
									$mdgriffith$elm_ui$Element$width(
									A2($mdgriffith$elm_ui$Element$minimum, 800, $mdgriffith$elm_ui$Element$fill)),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(435)),
									$mdgriffith$elm_ui$Element$scrollbars
								]),
							A2(
								$elm$core$List$map,
								function (_v1) {
									var id = _v1.a;
									var n = _v1.b;
									return A8(
										$author$project$NewsEditor$NewsEditor$checkView,
										A2($elm$core$Set$member, id, model._),
										_Utils_eq(
											A2(
												$elm$core$Maybe$map,
												function (b) {
													return _Utils_eq(
														A2($elm$core$Maybe$map, $TSFoster$elm_uuid$UUID$toString, b.fS),
														$elm$core$Maybe$Just(id));
												},
												model.e),
											$elm$core$Maybe$Just(true)),
										id,
										n.fP,
										config.fY,
										n.eg,
										n.i8,
										model.iP);
								},
								$elm$core$List$reverse(
									A2(
										$elm$core$List$sortBy,
										A2(
											$elm$core$Basics$composeL,
											A2(
												$elm$core$Basics$composeL,
												$elm$time$Time$posixToMillis,
												function ($) {
													return $.eg;
												}),
											$elm$core$Tuple$second),
										$elm$core$Dict$toList(model.gT)))))
						]))
				]));
	});
var $author$project$NewsEditor$NewsEditor$view = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(15),
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'flex-shrink', '1')),
					$mdgriffith$elm_ui$Element$clip,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					A2($mdgriffith$elm_ui$Element$maximum, config.fr, $mdgriffith$elm_ui$Element$fill)),
					$mdgriffith$elm_ui$Element$scrollbarY
				]),
			_List_fromArray(
				[
					function () {
					var _v0 = model.cN;
					if (!_v0) {
						return A2(
							$mdgriffith$elm_ui$Element$map,
							model.bY,
							A2($author$project$NewsEditor$NewsEditor$newsSelectorView, config, model));
					} else {
						return A2($author$project$NewsEditor$NewsEditor$newsEditorView, config, model);
					}
				}()
				]));
	});
var $author$project$PageEditor$PageEditor$MenuClickOff = {$: 27};
var $author$project$PageEditor$PageEditor$ZipToUid = function (a) {
	return {$: 7, a: a};
};
var $author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$LastChild = function (a) {
	return {$: 0, a: a};
};
var $author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$NotLastChild = function (a) {
	return {$: 1, a: a};
};
var $author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$cellContentToString = function (lc) {
	switch (lc.$) {
		case 0:
			return 'Image';
		case 1:
			return 'Video';
		case 2:
			return 'Tableau';
		case 3:
			var s = lc.a;
			return 'Element spécial: ' + s;
		case 4:
			return 'Zone blocs de liens';
		case 5:
			return 'Fiches';
		case 7:
			return 'Zone actualités';
		case 6:
			var xs = lc.a;
			return 'Bloc de texte';
		case 8:
			return 'Mini calendrier';
		case 9:
			return 'Calendrier animation';
		case 10:
			return 'Calendrier salle Murol';
		case 11:
			return 'Calendrier salle Beaune';
		case 12:
			return 'Météo';
		case 13:
			return 'Panoramique aérien';
		case 14:
			return 'Bandeau images liens';
		case 15:
			return 'Album photothèque';
		case 16:
			return 'Murol infos';
		case 17:
			return 'Délibérations';
		case 18:
			return 'Bulletins municipaux';
		default:
			return 'Cellule vide';
	}
};
var $author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$containerLabelToColor = function (cl) {
	switch (cl) {
		case 0:
			return A4($mdgriffith$elm_ui$Element$rgba, 0, 1, 0, 0.6);
		case 1:
			return A4($mdgriffith$elm_ui$Element$rgba, 1, 0, 0, 0.6);
		case 2:
			return A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 0.6);
		default:
			return A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 1);
	}
};
var $author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$containerLabelToString = function (cl) {
	switch (cl) {
		case 0:
			return 'Colonne';
		case 1:
			return 'Ligne';
		case 2:
			return 'Colonne de texte';
		default:
			return 'Bloc réactif';
	}
};
var $author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$prefix = function (offsets) {
	var attrs = function (sel) {
		return _List_fromArray(
			[
				sel ? $mdgriffith$elm_ui$Element$Font$color(
				A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1)) : $mdgriffith$elm_ui$Element$Font$color(
				A4($mdgriffith$elm_ui$Element$rgba, 0.8, 0.8, 0.8, 1))
			]);
	};
	var helper = F2(
		function (acc, indexes) {
			helper:
			while (true) {
				if (!indexes.b) {
					return _List_fromArray(
						[
							A2($mdgriffith$elm_ui$Element$row, _List_Nil, acc)
						]);
				} else {
					if (!indexes.a.$) {
						if (!indexes.b.b) {
							var sel = indexes.a.a;
							return _Utils_ap(
								acc,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										attrs(sel),
										$mdgriffith$elm_ui$Element$text(
											A2($elm$core$String$repeat, 3, ' ') + '└─ '))
									]));
						} else {
							var sel = indexes.a.a;
							var xs = indexes.b;
							var $temp$acc = _Utils_ap(
								acc,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$row,
										attrs(sel),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text(
												A2($elm$core$String$repeat, 3, ' ') + ' ')
											]))
									])),
								$temp$indexes = xs;
							acc = $temp$acc;
							indexes = $temp$indexes;
							continue helper;
						}
					} else {
						if (!indexes.b.b) {
							var sel = indexes.a.a;
							return _Utils_ap(
								acc,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										attrs(sel),
										$mdgriffith$elm_ui$Element$text(
											A2($elm$core$String$repeat, 3, ' ') + '├─ '))
									]));
						} else {
							var sel = indexes.a.a;
							var xs = indexes.b;
							var $temp$acc = _Utils_ap(
								acc,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										attrs(sel),
										$mdgriffith$elm_ui$Element$text(
											A2($elm$core$String$repeat, 3, ' ') + '│'))
									])),
								$temp$indexes = xs;
							acc = $temp$acc;
							indexes = $temp$indexes;
							continue helper;
						}
					}
				}
			}
		});
	return A2(
		helper,
		_List_Nil,
		$elm$core$List$reverse(offsets));
};
var $author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$docTreeView = F4(
	function (config, offsets, _v0, document) {
		var sContainer = _v0.a;
		var selection = _v0.b;
		var sel = selection || function (i) {
			return _Utils_eq(
				i,
				$author$project$Document$Document$getUid(document));
		}(sContainer);
		var labelFontColor = sel ? $mdgriffith$elm_ui$Element$Font$color(
			A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 1)) : $mdgriffith$elm_ui$Element$Font$color(
			A4($mdgriffith$elm_ui$Element$rgba, 0.8, 0.8, 0.8, 1));
		if (!document.$) {
			var containerLabel = document.a.bs;
			var id = document.a.a;
			var attrs = document.a.y;
			var xs = document.b;
			var l = $elm$core$List$length(xs);
			var _v2 = _Utils_Tuple2(
				A2($elm$core$List$take, l - 1, xs),
				A2($elm$core$List$drop, l - 1, xs));
			var firsts = _v2.a;
			var last = _v2.b;
			return _Utils_ap(
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_Utils_ap(
							$author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$prefix(offsets),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_Utils_ap(
										_List_fromArray(
											[
												(config.iH && sel) ? $mdgriffith$elm_ui$Element$Font$color(
												$author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$containerLabelToColor(containerLabel)) : labelFontColor
											]),
										config.gF ? _List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Events$onClick(
												config.hM(id.cW)),
												$mdgriffith$elm_ui$Element$pointer,
												$mdgriffith$elm_ui$Element$mouseOver(
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$Font$color(
														A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1))
													]))
											]) : _List_Nil),
									$mdgriffith$elm_ui$Element$text(
										$author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$containerLabelToString(containerLabel)))
								])))
					]),
				_Utils_ap(
					A2(
						$elm$core$List$concatMap,
						A3(
							$author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$docTreeView,
							config,
							A2(
								$elm$core$List$cons,
								$author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$NotLastChild(sel),
								offsets),
							_Utils_Tuple2(sContainer, sel)),
						firsts),
					A2(
						$elm$core$List$concatMap,
						A3(
							$author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$docTreeView,
							config,
							A2(
								$elm$core$List$cons,
								$author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$LastChild(sel),
								offsets),
							_Utils_Tuple2(sContainer, sel)),
						last)));
		} else {
			var cellContent = document.a.at;
			var id = document.a.a;
			var attrs = document.a.y;
			return _List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_Nil,
					_Utils_ap(
						$author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$prefix(offsets),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_Utils_ap(
									_List_fromArray(
										[labelFontColor]),
									config.gF ? _List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Events$onClick(
											config.hM(id.cW)),
											$mdgriffith$elm_ui$Element$pointer,
											$mdgriffith$elm_ui$Element$mouseOver(
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$color(
													A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 1))
												]))
										]) : _List_Nil),
								$mdgriffith$elm_ui$Element$text(
									$author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$cellContentToString(cellContent)))
							])))
				]);
		}
	});
var $author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$mainPanel = F3(
	function (config, selectedContainer, document) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(2),
					$mdgriffith$elm_ui$Element$padding(15)
				]),
			A4(
				$author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$docTreeView,
				config,
				_List_Nil,
				_Utils_Tuple2(selectedContainer, false),
				document));
	});
var $author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$menuView = function (config) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(15)
			]),
		_List_Nil);
};
var $author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$documentStructView = F3(
	function (config, selectedContainer, document) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$scrollbars,
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$maximum, 330, $mdgriffith$elm_ui$Element$fill)),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$Font$size(14),
					$mdgriffith$elm_ui$Element$Font$family(
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$monospace])),
					$mdgriffith$elm_ui$Element$Border$solid,
					$mdgriffith$elm_ui$Element$Border$widthEach(
					{a2: 0, bc: 0, bl: 2, bq: 0}),
					$mdgriffith$elm_ui$Element$Border$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8))
				]),
			_List_fromArray(
				[
					$author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$menuView(config),
					A3($author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$mainPanel, config, selectedContainer, document)
				]));
	});
var $author$project$Document$Document$OnCellClick = 4;
var $author$project$Document$Document$OnContainerClick = 0;
var $author$project$Document$Document$OnContainerDblClick = 1;
var $author$project$Document$Document$OnContainerMouseOver = 2;
var $author$project$Document$Document$OnNeighbourClick = 3;
var $author$project$Document$Document$ZipperAttr = F2(
	function (a, b) {
		return {$: 22, a: a, b: b};
	});
var $author$project$Document$Document$addAttrs = F2(
	function (doc, newAttrs) {
		if (doc.$ === 1) {
			var lv = doc.a;
			var cellContent = lv.at;
			var id = lv.a;
			var attrs = lv.y;
			return $author$project$Document$Document$Cell(
				_Utils_update(
					lv,
					{
						y: _Utils_ap(newAttrs, attrs)
					}));
		} else {
			var nv = doc.a;
			var containerLabel = nv.bs;
			var id = nv.a;
			var attrs = nv.y;
			var children = doc.b;
			return A2(
				$author$project$Document$Document$Container,
				_Utils_update(
					nv,
					{
						y: _Utils_ap(newAttrs, attrs)
					}),
				children);
		}
	});
var $author$project$PageEditor$Internals$DocumentZipper$applyToContexts = F3(
	function (f, path, zipper) {
		var uid = $author$project$Document$Document$getUid(
			$author$project$PageEditor$Internals$DocumentZipper$extractDoc(zipper));
		var shouldNotApply = function (currentUid) {
			return A2($elm$core$List$member, currentUid, path) || _Utils_eq(currentUid, uid);
		};
		var helper = function (doc) {
			var currentUid = $author$project$Document$Document$getUid(doc);
			if (doc.$ === 1) {
				var lv = doc.a;
				return _Utils_eq(currentUid, uid) ? doc : f(doc);
			} else {
				var cv = doc.a;
				var xs = doc.b;
				return A2($elm$core$List$member, currentUid, path) ? (_Utils_eq(currentUid, uid) ? doc : A2(
					$author$project$Document$Document$Container,
					cv,
					A2($elm$core$List$map, helper, xs))) : f(
					A2(
						$author$project$Document$Document$Container,
						cv,
						A2($elm$core$List$map, helper, xs)));
			}
		};
		var document = $author$project$PageEditor$Internals$DocumentZipper$extractDoc(
			$author$project$PageEditor$Internals$DocumentZipper$rewind(zipper));
		return $author$project$PageEditor$Internals$DocumentZipper$initZip(
			helper(document));
	});
var $author$project$PageEditor$Internals$DocumentZipper$getPath = function (document) {
	var helper = F2(
		function (doc, acc) {
			helper:
			while (true) {
				var _v0 = $author$project$PageEditor$Internals$DocumentZipper$zipUp(doc);
				if (_v0.$ === 1) {
					return _Utils_Tuple2(
						A2(
							$elm$core$List$cons,
							$author$project$Document$Document$getUid(
								$author$project$PageEditor$Internals$DocumentZipper$extractDoc(doc)),
							acc),
						doc);
				} else {
					var parent = _v0.a;
					var $temp$doc = parent,
						$temp$acc = A2(
						$elm$core$List$cons,
						$author$project$Document$Document$getUid(
							$author$project$PageEditor$Internals$DocumentZipper$extractDoc(doc)),
						acc);
					doc = $temp$doc;
					acc = $temp$acc;
					continue helper;
				}
			}
		});
	return A2(helper, document, _List_Nil);
};
var $author$project$Document$Document$toogleClass = F2(
	function (_class, document) {
		var newId = function (id) {
			return _Utils_update(
				id,
				{
					br: A2($elm$core$Set$member, _class, id.br) ? A2($elm$core$Set$remove, _class, id.br) : A2($elm$core$Set$insert, _class, id.br)
				});
		};
		if (!document.$) {
			var nv = document.a;
			var children = document.b;
			return A2(
				$author$project$Document$Document$Container,
				_Utils_update(
					nv,
					{
						a: newId(nv.a)
					}),
				children);
		} else {
			var lv = document.a;
			return $author$project$Document$Document$Cell(
				_Utils_update(
					lv,
					{
						a: newId(lv.a)
					}));
		}
	});
var $author$project$PageEditor$Internals$DocumentZipper$zipDownPath = F2(
	function (path, document) {
		zipDownPath:
		while (true) {
			if (!path.b) {
				return $elm$core$Maybe$Just(document);
			} else {
				var uid = path.a;
				var xs = path.b;
				var _v1 = A2(
					$author$project$PageEditor$Internals$DocumentZipper$zipDown,
					$author$project$Document$Document$hasUid(uid),
					document);
				if (_v1.$ === 1) {
					return $elm$core$Maybe$Nothing;
				} else {
					var child = _v1.a;
					var $temp$path = xs,
						$temp$document = child;
					path = $temp$path;
					document = $temp$document;
					continue zipDownPath;
				}
			}
		}
	});
var $author$project$PageEditor$Internals$DocumentZipper$addZipperHandlers = function (dz) {
	var handlers = function (uid) {
		return _List_fromArray(
			[
				A2($author$project$Document$Document$ZipperAttr, uid, 0),
				A2($author$project$Document$Document$ZipperAttr, uid, 1),
				A2($author$project$Document$Document$ZipperAttr, uid, 2)
			]);
	};
	var addHandlersToChild = function (doc) {
		return A2(
			$author$project$Document$Document$addAttrs,
			doc,
			handlers(
				$author$project$Document$Document$getUid(doc)));
	};
	var addHandlerToNeighbours = function (doc) {
		var path = A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			$elm$core$List$tail(
				$author$project$PageEditor$Internals$DocumentZipper$getPath(doc).a));
		var newDoc = A3(
			$author$project$PageEditor$Internals$DocumentZipper$applyToContexts,
			function (d) {
				return A2(
					$author$project$Document$Document$addAttrs,
					d,
					_List_fromArray(
						[
							A2(
							$author$project$Document$Document$ZipperAttr,
							$author$project$Document$Document$getUid(d),
							3)
						]));
			},
			$author$project$PageEditor$Internals$DocumentZipper$getPath(doc).a,
			doc);
		return A2(
			$elm$core$Maybe$withDefault,
			doc,
			A2($author$project$PageEditor$Internals$DocumentZipper$zipDownPath, path, newDoc));
	};
	var _v0 = addHandlerToNeighbours(dz);
	var current = _v0.a3;
	var contexts = _v0.bu;
	var currentWithCssSelectors = A2($author$project$Document$Document$toogleClass, 'selected', current);
	if (!currentWithCssSelectors.$) {
		var nv = currentWithCssSelectors.a;
		var children = currentWithCssSelectors.b;
		return {
			bu: contexts,
			a3: A2(
				$author$project$Document$Document$Container,
				nv,
				A2($elm$core$List$map, addHandlersToChild, children))
		};
	} else {
		var lv = currentWithCssSelectors.a;
		var cellContent = lv.at;
		var id = lv.a;
		var attrs = lv.y;
		var newCell = $author$project$Document$Document$Cell(
			_Utils_update(
				lv,
				{
					y: A2(
						$elm$core$List$cons,
						A2($author$project$Document$Document$ZipperAttr, id.cW, 4),
						attrs)
				}));
		return {bu: contexts, a3: newCell};
	}
};
var $author$project$Document$DocumentViews$StyleSheets$chunkBy = F5(
	function (config, n1, n2, n3, n4) {
		var device = $author$project$Document$DocumentViews$StyleSheets$getDevice(config);
		var _v0 = device.c$;
		switch (_v0) {
			case 0:
				return n1;
			case 1:
				return n2;
			case 2:
				return n3;
			default:
				return n4;
		}
	});
var $author$project$Internals$CommonHelpers$chunks = F2(
	function (n, xs) {
		var helper = F2(
			function (acc, ys) {
				helper:
				while (true) {
					if (!ys.b) {
						return $elm$core$List$reverse(acc);
					} else {
						var $temp$acc = A2(
							$elm$core$List$cons,
							A2($elm$core$List$take, n, ys),
							acc),
							$temp$ys = A2($elm$core$List$drop, n, ys);
						acc = $temp$acc;
						ys = $temp$ys;
						continue helper;
					}
				}
			});
		return A2(helper, _List_Nil, xs);
	});
var $author$project$Document$DocumentViews$StyleSheets$getContainerWidth = function (config) {
	if (config.an) {
		var _v0 = config.eH;
		switch (_v0) {
			case 1:
				return 980;
			case 2:
				return 800;
			case 3:
				return 350;
			default:
				return config.mt;
		}
	} else {
		return config.mt;
	}
};
var $author$project$Document$DocumentViews$DocumentView$renderBlocksLinksMeta = F5(
	function (nbrChunks, config, id, attrs, _v0) {
		var image = _v0.jF;
		var label = _v0.O;
		var targetBlank = _v0.hy;
		var url = _v0.d$;
		var url_ = targetBlank ? url : A2(
			$elm$core$Maybe$withDefault,
			'',
			A2($elm$core$Dict$get, url, config.dM));
		var styleSheet = $author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		var linkFun = targetBlank ? $mdgriffith$elm_ui$Element$newTabLink : $mdgriffith$elm_ui$Element$link;
		var containerWidth = $author$project$Document$DocumentViews$StyleSheets$getContainerWidth(config);
		var maxWidth = function () {
			var spacing = 10;
			var padding = 40;
			return A2($elm$core$Basics$min, ((containerWidth - padding) - ((nbrChunks - 1) * padding)) / nbrChunks, 300);
		}();
		var bw = $elm$core$Basics$round(maxWidth);
		var bh = $elm$core$Basics$round(maxWidth / (300 / 225));
		var block = A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				styleSheet.ib,
				_Utils_ap(
					A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(bw)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(bh)),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$blockLinkGrey),
							(!config.an) ? $mdgriffith$elm_ui$Element$mouseOver(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Background$color(
									$author$project$Internals$CommonStyleHelpers$blockLinkGreyAlpha(0.5))
								])) : $author$project$Internals$CommonStyleHelpers$noAttr
						]))),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(bw - 12)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(bh - 12)),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Background$image(image),
						$mdgriffith$elm_ui$Element$inFront(
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$alignBottom,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$padding(10),
									$mdgriffith$elm_ui$Element$Background$color(
									$author$project$Internals$CommonStyleHelpers$blockLinkGreyAlpha(0.8)),
									$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$aliceBlue)
								]),
							A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_Utils_ap(
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$center,
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
												]),
											$author$project$Internals$CommonStyleHelpers$unselectable),
										$mdgriffith$elm_ui$Element$text(
											$elm_community$string_extra$String$Extra$toSentenceCase(label))),
										targetBlank ? A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$alignRight,
												$mdgriffith$elm_ui$Element$Font$color(
												A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
											]),
										$mdgriffith$elm_ui$Element$html(
											$author$project$Internals$Icons$externalLink(16))) : $mdgriffith$elm_ui$Element$none
									]))))
					]),
				$mdgriffith$elm_ui$Element$none));
		return config.an ? A2(
			$mdgriffith$elm_ui$Element$Keyed$el,
			_List_Nil,
			_Utils_Tuple2(
				$elm$core$String$fromInt(
					A2(
						$Skinney$murmur3$Murmur3$hashString,
						0,
						_Utils_ap(
							image,
							_Utils_ap(url, label)))),
				block)) : A2(
			linkFun,
			_List_Nil,
			{O: block, d$: url_});
	});
var $author$project$Document$DocumentViews$DocumentView$renderBlockLinks = F4(
	function (config, id, attrs, meta) {
		var styleSheet = $author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		var nbrChunks = A5($author$project$Document$DocumentViews$StyleSheets$chunkBy, config, 1, 2, 3, 3);
		var rows = A2(
			$elm$core$List$map,
			$mdgriffith$elm_ui$Element$row(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$spacing(10)
					])),
			A2(
				$author$project$Internals$CommonHelpers$chunks,
				nbrChunks,
				A2(
					$elm$core$List$map,
					A4($author$project$Document$DocumentViews$DocumentView$renderBlocksLinksMeta, nbrChunks, config, id, attrs),
					meta)));
		var maxWidth = A3(
			$author$project$Document$DocumentViews$StyleSheets$docMaxWidth,
			_Utils_Tuple2(config.mt, config.jx),
			config.an,
			config.eH);
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					_Utils_ap(
						A2($author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
						A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				rows)
			]);
	});
var $author$project$Publications$PublicationsView$indexView = F3(
	function (issue, n, _v0) {
		var topic = _v0.a;
		var page = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					(!A2($elm$core$Basics$modBy, 2, n)) ? $mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey7) : $mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 221, 221, 221)),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2($mdgriffith$elm_ui$Element$paddingXY, 10, 5),
					$mdgriffith$elm_ui$Element$Font$size(16),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$newTabLink,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$mouseOver(
							_List_fromArray(
								[
									(!A2($elm$core$Basics$modBy, 2, n)) ? $mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey5) : $mdgriffith$elm_ui$Element$Font$color(
									A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
								])),
							$mdgriffith$elm_ui$Element$pointer,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('●'),
									A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_Nil,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text(topic)
										]))
								])),
						d$: '/baseDocumentaire/publications/bulletins/' + function (s) {
							return s + ('.pdf#page=' + $elm$core$String$fromInt(page));
						}(
							A3(
								$elm$core$String$padLeft,
								3,
								'0',
								$elm$core$String$fromInt(issue)))
					})
				]));
	});
var $author$project$Publications$PublicationsView$maxWidth = function (config) {
	return A2(
		$elm$core$Basics$min,
		config.mt,
		A3(
			$author$project$Document$DocumentViews$StyleSheets$docMaxWidth,
			_Utils_Tuple2(config.mt, config.jx),
			config.an,
			config.eH)) - 40;
};
var $author$project$Publications$PublicationsView$yearView = F3(
	function (year, xs, f) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(20),
							$mdgriffith$elm_ui$Element$Font$color(
							A3($mdgriffith$elm_ui$Element$rgb, 0, 0.5, 0)),
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$paddingEach(
							{a2: 5, bc: 0, bl: 0, bq: 0}),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{a2: 1, bc: 0, bl: 0, bq: 0}),
							$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey4)
						]),
					$mdgriffith$elm_ui$Element$text(
						$elm$core$String$fromInt(year))),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					A2(
						$elm$core$List$map,
						f,
						$elm$core$List$reverse(xs)))
				]));
	});
var $author$project$Publications$PublicationsView$bulletinsView = function (config) {
	var bulletinView = function (_v2) {
		var issue = _v2.gH;
		var date = _v2.eg;
		var cover = _v2.iM;
		var index = _v2.gB;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$Font$bold]),
									$mdgriffith$elm_ui$Element$text('Numéro: ')),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text(
										$elm$core$String$fromInt(issue)))
								])),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignRight]),
							$mdgriffith$elm_ui$Element$text(
								A2($author$project$Internals$CommonHelpers$dateToStr, config.fY, date))),
							A2(
							$mdgriffith$elm_ui$Element$download,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$alignRight,
									$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$teal4),
									$mdgriffith$elm_ui$Element$mouseOver(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$color(
											A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
										])),
									$mdgriffith$elm_ui$Element$pointer,
									$mdgriffith$elm_ui$Element$Border$rounded(5),
									A2($mdgriffith$elm_ui$Element$paddingXY, 7, 5)
								]),
							{
								O: $mdgriffith$elm_ui$Element$text('Télécharger'),
								d$: '/baseDocumentaire/publications/bulletins/' + function (s) {
									return s + '.pdf';
								}(
									A3(
										$elm$core$String$padLeft,
										3,
										'0',
										$elm$core$String$fromInt(issue)))
							})
						])),
					(($author$project$Publications$PublicationsView$maxWidth(config) < 800) ? $mdgriffith$elm_ui$Element$column(
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX])) : $mdgriffith$elm_ui$Element$row(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6)
						])))(
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$image,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									A2($mdgriffith$elm_ui$Element$maximum, 595, $mdgriffith$elm_ui$Element$fill)),
									$mdgriffith$elm_ui$Element$alignTop
								]),
							{ei: '', fK: cover}),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$alignTop,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height(
									A2($mdgriffith$elm_ui$Element$maximum, 842, $mdgriffith$elm_ui$Element$fill)),
									$mdgriffith$elm_ui$Element$scrollbarY
								]),
							_Utils_ap(
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$bold,
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												A2($mdgriffith$elm_ui$Element$paddingXY, 10, 5),
												$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey5)
											]),
										$mdgriffith$elm_ui$Element$text('Dans ce numéro: '))
									]),
								A2(
									$elm$core$List$indexedMap,
									$author$project$Publications$PublicationsView$indexView(issue),
									index)))
						]))
				]));
	};
	var _v0 = config.fB;
	if (!_v0.$) {
		var bulletins = _v0.a.ij;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(40),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			A3(
				$elm$core$Dict$foldl,
				F3(
					function (k, v, acc) {
						return A2(
							$elm$core$List$cons,
							A3($author$project$Publications$PublicationsView$yearView, k, v, bulletinView),
							acc);
					}),
				_List_Nil,
				A3(
					$elm$core$List$foldr,
					F2(
						function (k, acc) {
							return A3(
								$elm$core$Dict$update,
								A2($elm$time$Time$toYear, config.fY, k.eg),
								function (mbVal) {
									if (mbVal.$ === 1) {
										return $elm$core$Maybe$Just(
											_List_fromArray(
												[k]));
									} else {
										var xs = mbVal.a;
										return $elm$core$Maybe$Just(
											A2($elm$core$List$cons, k, xs));
									}
								},
								acc);
						}),
					$elm$core$Dict$empty,
					$elm$core$Dict$values(bulletins))));
	} else {
		return $mdgriffith$elm_ui$Element$none;
	}
};
var $author$project$Document$DocumentViews$DocumentView$renderBulletin = F3(
	function (config, id, attrs) {
		var _v0 = config.fB;
		if (_v0.$ === 1) {
			return _List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
							A2($mdgriffith$elm_ui$Element$paddingXY, 0, 7),
							$mdgriffith$elm_ui$Element$Font$center
						]),
					$mdgriffith$elm_ui$Element$text('Bulletins municipaux'))
				]);
		} else {
			var delibs = _v0.a.iW;
			return _List_fromArray(
				[
					$author$project$Publications$PublicationsView$bulletinsView(config)
				]);
		}
	});
var $author$project$Document$DocumentViews$DocumentView$customHeading = F4(
	function (config, level, attrs, title) {
		return A4(
			$author$project$Document$DocumentViews$DocumentView$renderTextBlockElement,
			config,
			{
				br: $elm$core$Set$empty,
				bx: $elm$core$Maybe$Nothing,
				bE: $elm$core$Maybe$Just(
					'defaultHtmlId' + $elm$core$String$fromInt(0)),
				cW: 0
			},
			_List_Nil,
			A2(
				$author$project$Document$Document$Heading,
				attrs,
				_Utils_Tuple2(level, title)));
	});
var $elm$html$Html$Attributes$height = function (n) {
	return A2(
		_VirtualDom_attribute,
		'height',
		$elm$core$String$fromInt(n));
};
var $elm$html$Html$iframe = _VirtualDom_node('iframe');
var $author$project$Document$DocumentViews$DocumentView$renderCalendar = F3(
	function (config, id, attrs) {
		var maxWidth = A2(
			$elm$core$Basics$min,
			A3(
				$author$project$Document$DocumentViews$StyleSheets$docMaxWidth,
				_Utils_Tuple2(config.mt, config.jx),
				config.an,
				config.eH),
			config.mt) - 40;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(maxWidth)),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A4($author$project$Document$DocumentViews$DocumentView$customHeading, config, 1, _List_Nil, 'Calendrier'),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height(
								A3($elm$core$Basics$composeL, $mdgriffith$elm_ui$Element$px, $elm$core$Basics$round, maxWidth / 1.333333))
							]),
						(maxWidth <= 500) ? $mdgriffith$elm_ui$Element$html(
							A2(
								$elm$html$Html$iframe,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$src('https://calendar.google.com/calendar/embed?showTitle=0&showTabs=0&showNav=0&showPrint=0&showCalendars=0&showTz=0&mode=AGENDA&height=150&wkst=2&hl=fr&bgcolor=%23FFFFFF&src=1claq68scg7llpg29j2fasprtk%40group.calendar.google.com&;color=%23fe3b00&;src=n1jce3hgvarkt6n3o69c6nl66g%40group.calendar.google.com&;color=%23007451&;src=r46rbonnui234n2b2glau5btoo%40group.calendar.google.com&;color=%2305f2ff&ctz=Europe%2FParis'),
										A2($elm$html$Html$Attributes$style, 'border-width', '0')
									]),
								_List_Nil)) : $mdgriffith$elm_ui$Element$html(
							A2(
								$elm$html$Html$iframe,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$src(
										'https://calendar.google.com/calendar/embed?showTitle=0&height=' + (A3($elm$core$Basics$composeL, $elm$core$String$fromInt, $elm$core$Basics$round, maxWidth / 1.333333) + '&wkst=1&;bgcolor=%23FFFFFF&src=1claq68scg7llpg29j2fasprtk%40group.calendar.google.com&;color=%23fe3b00&;src=n1jce3hgvarkt6n3o69c6nl66g%40group.calendar.google.com&;color=%23007451&;src=r46rbonnui234n2b2glau5btoo%40group.calendar.google.com&;color=%2305f2ff&ctz=Europe%2FParis')),
										$elm$html$Html$Attributes$height(
										$elm$core$Basics$round(maxWidth / 1.333333)),
										A2($elm$html$Html$Attributes$style, 'border-width', '0')
									]),
								_List_Nil)))
					]))
			]);
	});
var $author$project$Document$DocumentViews$DocumentView$renderCalendarSalleBeaune = F3(
	function (config, id, attrs) {
		var maxWidth = A2(
			$elm$core$Basics$min,
			A3(
				$author$project$Document$DocumentViews$StyleSheets$docMaxWidth,
				_Utils_Tuple2(config.mt, config.jx),
				config.an,
				config.eH),
			config.mt) - 40;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(maxWidth)),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A4($author$project$Document$DocumentViews$DocumentView$customHeading, config, 1, _List_Nil, 'Calendrier'),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height(
								A3($elm$core$Basics$composeL, $mdgriffith$elm_ui$Element$px, $elm$core$Basics$round, maxWidth / 1.333333))
							]),
						(maxWidth <= 500) ? $mdgriffith$elm_ui$Element$html(
							A2(
								$elm$html$Html$iframe,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$src('https://calendar.google.com/calendar/embed?showTitle=0&showTabs=0&showNav=0&showPrint=0&showCalendars=0&showTz=0&mode=AGENDA&height=150&wkst=2&hl=fr&bgcolor=%23FFFFFF&src=n1jce3hgvarkt6n3o69c6nl66g%40group.calendar.google.com&ctz=Europe%2FParis'),
										A2($elm$html$Html$Attributes$style, 'border-width', '0')
									]),
								_List_Nil)) : $mdgriffith$elm_ui$Element$html(
							A2(
								$elm$html$Html$iframe,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$src(
										'https://calendar.google.com/calendar/embed?showTitle=0&height=' + (A3($elm$core$Basics$composeL, $elm$core$String$fromInt, $elm$core$Basics$round, maxWidth / 1.333333) + '&wkst=1&;bgcolor=%23FFFFFF&src=n1jce3hgvarkt6n3o69c6nl66g%40group.calendar.google.com&ctz=Europe%2FParis')),
										$elm$html$Html$Attributes$height(
										$elm$core$Basics$round(maxWidth / 1.333333)),
										A2($elm$html$Html$Attributes$style, 'border-width', '0')
									]),
								_List_Nil)))
					]))
			]);
	});
var $author$project$Document$DocumentViews$DocumentView$renderCalendarSalleMurol = F3(
	function (config, id, attrs) {
		var maxWidth = A2(
			$elm$core$Basics$min,
			A3(
				$author$project$Document$DocumentViews$StyleSheets$docMaxWidth,
				_Utils_Tuple2(config.mt, config.jx),
				config.an,
				config.eH),
			config.mt) - 40;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(maxWidth)),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A4($author$project$Document$DocumentViews$DocumentView$customHeading, config, 1, _List_Nil, 'Calendrier'),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height(
								A3($elm$core$Basics$composeL, $mdgriffith$elm_ui$Element$px, $elm$core$Basics$round, maxWidth / 1.333333))
							]),
						(maxWidth <= 500) ? $mdgriffith$elm_ui$Element$html(
							A2(
								$elm$html$Html$iframe,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$src('https://calendar.google.com/calendar/embed?showTitle=0&showTabs=0&showNav=0&showPrint=0&showCalendars=0&showTz=0&mode=AGENDA&height=150&wkst=2&hl=fr&bgcolor=%23FFFFFF&src=r46rbonnui234n2b2glau5btoo%40group.calendar.google.com&ctz=Europe%2FParis'),
										A2($elm$html$Html$Attributes$style, 'border-width', '0')
									]),
								_List_Nil)) : $mdgriffith$elm_ui$Element$html(
							A2(
								$elm$html$Html$iframe,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$src(
										'https://calendar.google.com/calendar/embed?showTitle=0&height=' + (A3($elm$core$Basics$composeL, $elm$core$String$fromInt, $elm$core$Basics$round, maxWidth / 1.333333) + '&wkst=1&;bgcolor=%23FFFFFF&src=r46rbonnui234n2b2glau5btoo%40group.calendar.google.com&ctz=Europe%2FParis')),
										$elm$html$Html$Attributes$height(
										$elm$core$Basics$round(maxWidth / 1.333333)),
										A2($elm$html$Html$Attributes$style, 'border-width', '0')
									]),
								_List_Nil)))
					]))
			]);
	});
var $author$project$Document$DocumentViews$DocumentView$renderCalendarWidget = F3(
	function (config, id, attrs) {
		var device = $author$project$Document$DocumentViews$StyleSheets$getDevice(config);
		var widgetWidth = function () {
			var _v0 = device.c$;
			switch (_v0) {
				case 0:
					return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill);
				case 1:
					return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill);
				default:
					return $mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(300));
			}
		}();
		var containerWidth = $author$project$Document$DocumentViews$StyleSheets$getContainerWidth(config);
		var maxWidth = containerWidth - 40;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							widgetWidth,
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					_Utils_ap(
						A2(
							$author$project$Document$DocumentViews$DocumentView$idStyle,
							$author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config),
							id),
						A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				_List_fromArray(
					[
						A4($author$project$Document$DocumentViews$DocumentView$customHeading, config, 1, _List_Nil, 'AGENDA'),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						$mdgriffith$elm_ui$Element$html(
							A2(
								$elm$html$Html$iframe,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$src('https://calendar.google.com/calendar/embed?showTitle=0&showTabs=0&showNav=0&showPrint=0&showCalendars=0&showTz=0&mode=AGENDA&height=150&wkst=2&hl=fr&bgcolor=%23FFFFFF&src=1claq68scg7llpg29j2fasprtk%40group.calendar.google.com&;color=%23fe3b00&;src=n1jce3hgvarkt6n3o69c6nl66g%40group.calendar.google.com&;color=%23007451&;src=r46rbonnui234n2b2glau5btoo%40group.calendar.google.com&;color=%2305f2ff&ctz=Europe%2FParis'),
										A2($elm$html$Html$Attributes$style, 'border-width', '0')
									]),
								_List_Nil)))
					]))
			]);
	});
var $author$project$Document$DocumentViews$DocumentView$renderCustomElement = F4(
	function (config, id, attrs, s) {
		return _List_fromArray(
			[
				A2(
				$elm$core$Maybe$withDefault,
				$mdgriffith$elm_ui$Element$none,
				A2($elm$core$Dict$get, s, config.iS))
			]);
	});
var $author$project$Publications$PublicationsView$delibTopicView = F3(
	function (issue, n, _v0) {
		var topic = _v0.a;
		var page = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					(!A2($elm$core$Basics$modBy, 2, n)) ? $mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6) : $mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 221, 221, 221)),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2($mdgriffith$elm_ui$Element$paddingXY, 10, 5),
					$mdgriffith$elm_ui$Element$Font$size(16),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$newTabLink,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$mouseOver(
							_List_fromArray(
								[
									(!A2($elm$core$Basics$modBy, 2, n)) ? $mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey5) : $mdgriffith$elm_ui$Element$Font$color(
									A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
								])),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$pointer
						]),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text(topic)
								])),
						d$: '/baseDocumentaire/publications/delibs/' + function (s) {
							return s + ('.pdf#page=' + $elm$core$String$fromInt(page));
						}(issue)
					})
				]));
	});
var $author$project$Publications$PublicationsView$delibsView = function (config) {
	var delibView = function (_v2) {
		var date = _v2.eg;
		var index = _v2.gB;
		var issue = A3(
			$elm$core$String$replace,
			'/',
			'-',
			A2($author$project$Internals$CommonHelpers$dateToStr, config.fY, date));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_Utils_ap(
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$text(
									A2($author$project$Internals$CommonHelpers$dateToStr, config.fY, date))),
								A2(
								$mdgriffith$elm_ui$Element$newTabLink,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$alignRight,
										$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$teal4),
										$mdgriffith$elm_ui$Element$mouseOver(
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$color(
												A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
											])),
										$mdgriffith$elm_ui$Element$pointer,
										$mdgriffith$elm_ui$Element$Border$rounded(5),
										A2($mdgriffith$elm_ui$Element$paddingXY, 7, 5)
									]),
								{
									O: $mdgriffith$elm_ui$Element$text('Télécharger'),
									d$: '/baseDocumentaire/publications/delibs/' + function (s) {
										return s + '.pdf';
									}(issue)
								})
							]))
					]),
				A2(
					$elm$core$List$indexedMap,
					$author$project$Publications$PublicationsView$delibTopicView(issue),
					index)));
	};
	var _v0 = config.fB;
	if (!_v0.$) {
		var delibs = _v0.a.iW;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(40),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			A3(
				$elm$core$Dict$foldl,
				F3(
					function (k, v, acc) {
						return A2(
							$elm$core$List$cons,
							A3($author$project$Publications$PublicationsView$yearView, k, v, delibView),
							acc);
					}),
				_List_Nil,
				A3(
					$elm$core$List$foldr,
					F2(
						function (k, acc) {
							return A3(
								$elm$core$Dict$update,
								A2($elm$time$Time$toYear, config.fY, k.eg),
								function (mbVal) {
									if (mbVal.$ === 1) {
										return $elm$core$Maybe$Just(
											_List_fromArray(
												[k]));
									} else {
										var xs = mbVal.a;
										return $elm$core$Maybe$Just(
											A2($elm$core$List$cons, k, xs));
									}
								},
								acc);
						}),
					$elm$core$Dict$empty,
					$elm$core$Dict$values(delibs))));
	} else {
		return $mdgriffith$elm_ui$Element$none;
	}
};
var $author$project$Document$DocumentViews$DocumentView$renderDelib = F3(
	function (config, id, attrs) {
		var _v0 = config.fB;
		if (_v0.$ === 1) {
			return _List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
							A2($mdgriffith$elm_ui$Element$paddingXY, 0, 7),
							$mdgriffith$elm_ui$Element$Font$center
						]),
					$mdgriffith$elm_ui$Element$text('Délibérations'))
				]);
		} else {
			var delibs = _v0.a.iW;
			return _List_fromArray(
				[
					$author$project$Publications$PublicationsView$delibsView(config)
				]);
		}
	});
var $author$project$Document$DocumentViews$DocumentView$renderDronePanorama = F3(
	function (config, id, attrs) {
		var device = $author$project$Document$DocumentViews$StyleSheets$getDevice(config);
		var widgetWidth = function () {
			var _v0 = device.c$;
			switch (_v0) {
				case 0:
					return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill);
				case 1:
					return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill);
				default:
					return $mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(300));
			}
		}();
		var containerWidth = $author$project$Document$DocumentViews$StyleSheets$getContainerWidth(config);
		var maxWidth = containerWidth - 40;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							widgetWidth,
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					_Utils_ap(
						A2(
							$author$project$Document$DocumentViews$DocumentView$idStyle,
							$author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config),
							id),
						A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				_List_fromArray(
					[
						A4($author$project$Document$DocumentViews$DocumentView$customHeading, config, 1, _List_Nil, 'VISITE VIRTUELLE AERIENNE'),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color(
								A3($mdgriffith$elm_ui$Element$rgb255, 169, 169, 169)),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$padding(15),
								$mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$newTabLink,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$centerX
									]),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(200)),
												$mdgriffith$elm_ui$Element$height(
												$mdgriffith$elm_ui$Element$px(160)),
												$mdgriffith$elm_ui$Element$Background$image('assets/images/misc/visiteVirt.jpg'),
												$mdgriffith$elm_ui$Element$Border$width(5),
												$mdgriffith$elm_ui$Element$Border$color(
												A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
											]),
										$mdgriffith$elm_ui$Element$none),
									d$: 'visite/visite-virtuelle-aerienne-murol.html'
								}),
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$centerX]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Réalisée par la société ')),
										A2(
										$mdgriffith$elm_ui$Element$newTabLink,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3)
											]),
										{
											O: $mdgriffith$elm_ui$Element$text('W3D\'s'),
											d$: 'https://www.w3ds.fr/'
										})
									]))
							]))
					]))
			]);
	});
var $author$project$Document$DocumentViews$DocumentView$renderEmptyCell = F3(
	function (config, id, attrs) {
		var styleSheet = $author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(100)),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 0.2))
						]),
					_Utils_ap(
						A2($author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
						A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
						$mdgriffith$elm_ui$Element$text('Cellule vide'))
					]))
			]);
	});
var $author$project$Document$DocumentViews$DocumentView$renderFiches = F4(
	function (config, id, attrs, fichesId) {
		var styleSheet = $author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		var nbrCols = A5($author$project$Document$DocumentViews$StyleSheets$chunkBy, config, 1, 2, 2, 2);
		var mw = function () {
			switch (nbrCols) {
				case 3:
					return 300;
				case 2:
					return 440;
				default:
					return 440;
			}
		}();
		var fiches = A2(
			$elm$core$List$filterMap,
			function (fId) {
				return A2($elm$core$Dict$get, fId, config.jg);
			},
			fichesId);
		var containerWidth = $author$project$Document$DocumentViews$StyleSheets$getContainerWidth(config);
		var maxWidth = function () {
			var spacing = 10;
			var padding = 40;
			return A2($elm$core$Basics$min, ((containerWidth - padding) - ((nbrCols - 1) * padding)) / nbrCols, mw);
		}();
		var ficheView_ = function (f) {
			return A5(
				$author$project$GeneralDirectoryEditor$FichePreview$ficheView,
				config.kK,
				config.iP,
				maxWidth,
				config.an || A2(
					$elm$core$Set$member,
					$TSFoster$elm_uuid$UUID$toString(f.fS),
					config.kM),
				f);
		};
		var cols = A2(
			$elm$core$List$map,
			$mdgriffith$elm_ui$Element$column(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$spacing(10)
					])),
			A2(
				$author$project$Internals$CommonHelpers$chunks,
				$elm$core$Basics$ceiling(
					$elm$core$List$length(fiches) / nbrCols),
				A2(
					$elm$core$List$map,
					ficheView_,
					A2(
						$elm$core$List$sortBy,
						function ($) {
							return $.kB;
						},
						fiches))));
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					_Utils_ap(
						A2($author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
						A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				cols)
			]);
	});
var $author$project$Internals$Streams$current = function (bs) {
	return function ($) {
		return $.hG;
	}(bs);
};
var $author$project$Gallery$Gallery$maxWidth = function (config) {
	return A2(
		$elm$core$Basics$min,
		650,
		A2(
			$elm$core$Basics$min,
			config.mt,
			A3(
				$author$project$Document$DocumentViews$StyleSheets$docMaxWidth,
				_Utils_Tuple2(config.mt, config.jx),
				config.an,
				config.eH)) - 40);
};
var $author$project$Gallery$Gallery$captionRow = F2(
	function (config, model) {
		var w = $author$project$Gallery$Gallery$maxWidth(config);
		var _v0 = $author$project$Internals$Streams$current(model.af);
		if (((_v0.b && _v0.b.b) && _v0.b.b.b) && (!_v0.b.b.b.b)) {
			var l = _v0.a;
			var _v1 = _v0.b;
			var c = _v1.a;
			var _v2 = _v1.b;
			var r = _v2.a;
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						A2($mdgriffith$elm_ui$Element$maximum, w, $mdgriffith$elm_ui$Element$fill)),
						$mdgriffith$elm_ui$Element$padding(15),
						$mdgriffith$elm_ui$Element$spacing(20)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(
								A2($elm$core$Maybe$withDefault, ' ', c.f7))
							])),
						function () {
						var _v3 = _Utils_Tuple2(c.fK, model.fh);
						if ((!_v3.a.$) && _v3.b) {
							var src = _v3.a.a;
							return A2(
								$mdgriffith$elm_ui$Element$download,
								_Utils_ap(
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$alignRight]),
									$author$project$Internals$CommonStyleHelpers$buttonStyle(true)),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$color(
												A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 1)),
												$mdgriffith$elm_ui$Element$Font$underline
											]),
										$mdgriffith$elm_ui$Element$text('Télécharger version HD')),
									d$: $author$project$Internals$CommonHelpers$hdSrc(src)
								});
						} else {
							return $mdgriffith$elm_ui$Element$none;
						}
					}(),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$alignRight]),
						$mdgriffith$elm_ui$Element$text(
							A3(
								$elm$core$String$padLeft,
								2,
								'0',
								$elm$core$String$fromInt(1 + model.af.gB)) + ('/' + A3(
								$elm$core$String$padLeft,
								2,
								'0',
								$elm$core$String$fromInt(model.af.fJ)))))
					]));
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Gallery$Gallery$Next = {$: 2};
var $author$project$Gallery$Gallery$Previous = {$: 3};
var $author$project$Gallery$Gallery$DragAt = function (a) {
	return {$: 6, a: a};
};
var $author$project$Gallery$Gallery$DragEnd = {$: 7};
var $author$project$Gallery$Gallery$DragStart = function (a) {
	return {$: 5, a: a};
};
var $author$project$Gallery$GalleryHelpers$Position = F2(
	function (x, y) {
		return {ak: x, mv: y};
	});
var $author$project$Gallery$GalleryHelpers$decodePosition = function () {
	var decoder = A3(
		$elm$json$Json$Decode$map2,
		$author$project$Gallery$GalleryHelpers$Position,
		A2(
			$elm$json$Json$Decode$field,
			'pageX',
			A2($elm$json$Json$Decode$map, $elm$core$Basics$floor, $elm$json$Json$Decode$float)),
		A2(
			$elm$json$Json$Decode$field,
			'pageY',
			A2($elm$json$Json$Decode$map, $elm$core$Basics$floor, $elm$json$Json$Decode$float)));
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				decoder,
				A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					['touches', '0']),
				decoder)
			]));
}();
var $author$project$Gallery$GalleryHelpers$moveEvent = F2(
	function (drag, _v0) {
		var dragStart = _v0.a;
		var dragAt = _v0.b;
		var dragEnd = _v0.c;
		if (!drag.$) {
			return _List_fromArray(
				[
					A2(
					$elm$html$Html$Events$preventDefaultOn,
					'mousemove',
					A2(
						$elm$json$Json$Decode$map,
						function (p) {
							return _Utils_Tuple2(
								dragAt(p),
								true);
						},
						$author$project$Gallery$GalleryHelpers$decodePosition)),
					A2(
					$elm$html$Html$Events$preventDefaultOn,
					'touchmove',
					A2(
						$elm$json$Json$Decode$map,
						function (p) {
							return _Utils_Tuple2(
								dragAt(p),
								true);
						},
						$author$project$Gallery$GalleryHelpers$decodePosition)),
					A2(
					$elm$html$Html$Events$on,
					'mouseup',
					$elm$json$Json$Decode$succeed(dragEnd)),
					A2(
					$elm$html$Html$Events$on,
					'mouseleave',
					$elm$json$Json$Decode$succeed(dragEnd)),
					A2(
					$elm$html$Html$Events$on,
					'touchend',
					$elm$json$Json$Decode$succeed(dragEnd)),
					A2(
					$elm$html$Html$Events$on,
					'touchcancel',
					$elm$json$Json$Decode$succeed(dragEnd))
				]);
		} else {
			return _List_Nil;
		}
	});
var $author$project$Gallery$GalleryHelpers$events = F2(
	function (drag, _v0) {
		var dragStart = _v0.a;
		var dragAt = _v0.b;
		var dragEnd = _v0.c;
		return A2(
			$elm$core$List$map,
			$mdgriffith$elm_ui$Element$htmlAttribute,
			_Utils_ap(
				A2(
					$author$project$Gallery$GalleryHelpers$moveEvent,
					drag,
					_Utils_Tuple3(dragStart, dragAt, dragEnd)),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$Events$on,
						'mousedown',
						A2($elm$json$Json$Decode$map, dragStart, $author$project$Gallery$GalleryHelpers$decodePosition)),
						A2(
						$elm$html$Html$Events$on,
						'touchstart',
						A2($elm$json$Json$Decode$map, dragStart, $author$project$Gallery$GalleryHelpers$decodePosition))
					])));
	});
var $mdgriffith$elm_ui$Element$Lazy$embed = function (x) {
	switch (x.$) {
		case 0:
			var html = x.a;
			return html;
		case 1:
			var styled = x.a;
			return styled.gA(
				A2(
					$mdgriffith$elm_ui$Internal$Model$OnlyDynamic,
					{
						gl: {h6: $elm$core$Maybe$Nothing, ie: $elm$core$Maybe$Nothing, lC: $elm$core$Maybe$Nothing},
						jA: 1,
						h: 0
					},
					styled.hu));
		case 2:
			var text = x.a;
			return $elm$core$Basics$always(
				$elm$virtual_dom$VirtualDom$text(text));
		default:
			return $elm$core$Basics$always(
				$elm$virtual_dom$VirtualDom$text(''));
	}
};
var $mdgriffith$elm_ui$Element$Lazy$apply1 = F2(
	function (fn, a) {
		return $mdgriffith$elm_ui$Element$Lazy$embed(
			fn(a));
	});
var $elm$virtual_dom$VirtualDom$lazy3 = _VirtualDom_lazy3;
var $mdgriffith$elm_ui$Element$Lazy$lazy = F2(
	function (fn, a) {
		return $mdgriffith$elm_ui$Internal$Model$Unstyled(
			A3($elm$virtual_dom$VirtualDom$lazy3, $mdgriffith$elm_ui$Element$Lazy$apply1, fn, a));
	});
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $elm$core$Basics$cos = _Basics_cos;
var $elm$core$Basics$pi = _Basics_pi;
var $mgold$elm_animation$Animation$defaultEase = function (x) {
	return (1 - $elm$core$Basics$cos($elm$core$Basics$pi * x)) / 2;
};
var $mgold$elm_animation$Animation$dur = F3(
	function (dos, from_, to_) {
		if (!dos.$) {
			var t = dos.a;
			return t;
		} else {
			var s = dos.a;
			return $elm$core$Basics$abs(to_ - from_) / s;
		}
	});
var $mgold$elm_animation$Animation$animate = F2(
	function (clock, _v0) {
		var start = _v0.bo;
		var delay_ = _v0.am;
		var dos = _v0.V;
		var ramp = _v0.bk;
		var from_ = _v0.F;
		var to_ = _v0.w;
		var ease_ = _v0.bz;
		var duration_ = A3($mgold$elm_animation$Animation$dur, dos, from_, to_);
		var fr = A3($elm$core$Basics$clamp, 0, 1, ((clock - start) - delay_) / duration_);
		var eased = ease_(fr);
		var correction = function () {
			if (ramp.$ === 1) {
				return 0;
			} else {
				var vel = ramp.a;
				var from__ = vel * (clock - start);
				var eased_ = $mgold$elm_animation$Animation$defaultEase(fr);
				return from__ - (from__ * eased_);
			}
		}();
		return (from_ + ((to_ - from_) * eased)) + correction;
	});
var $mdgriffith$elm_ui$Internal$Model$MoveX = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveX = $mdgriffith$elm_ui$Internal$Flag$flag(25);
var $mdgriffith$elm_ui$Element$moveLeft = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(-x));
};
var $mdgriffith$elm_ui$Element$moveRight = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(x));
};
var $author$project$Gallery$Gallery$moveChunk = F2(
	function (config, model) {
		var w = $author$project$Gallery$Gallery$maxWidth(config);
		var animFun = function () {
			var _v2 = model.v;
			if (_v2.$ === 1) {
				return $mdgriffith$elm_ui$Element$moveLeft(w);
			} else {
				if (!_v2.a.b) {
					var _v3 = _v2.a;
					var anim = _v3.a;
					var _v4 = _v3.b;
					return $mdgriffith$elm_ui$Element$moveLeft(
						w + A2($mgold$elm_animation$Animation$animate, model.c0, anim));
				} else {
					var _v5 = _v2.a;
					var anim = _v5.a;
					var _v6 = _v5.b;
					return $mdgriffith$elm_ui$Element$moveRight(
						((-1) * w) + A2($mgold$elm_animation$Animation$animate, model.c0, anim));
				}
			}
		}();
		var _v0 = model.aG;
		if (_v0.$ === 1) {
			return animFun;
		} else {
			var _v1 = _v0.a;
			var start = _v1.a;
			var stop = _v1.b;
			return ((start.ak - stop.ak) <= 0) ? $mdgriffith$elm_ui$Element$moveRight(
				((-1) * w) + $elm$core$Basics$abs(start.ak - stop.ak)) : $mdgriffith$elm_ui$Element$moveLeft((w + start.ak) - stop.ak);
		}
	});
var $author$project$Gallery$Gallery$ImgLoaded = function (a) {
	return {$: 8, a: a};
};
var $author$project$Gallery$Gallery$picView = F3(
	function (config, model, _v0) {
		var src = _v0.fK;
		var size = _v0.fJ;
		var w = $author$project$Gallery$Gallery$maxWidth(config);
		var h = A2(
			$elm$core$Basics$min,
			600,
			$elm$core$Basics$round(w / 1.333333));
		if (!src.$) {
			var src_ = src.a;
			return A2($elm$core$Set$member, src_, model.dD) ? A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey5)
					]),
				A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(w)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(h)),
								$mdgriffith$elm_ui$Element$Background$uncropped(src_)
							]),
						$author$project$Internals$CommonStyleHelpers$unselectable),
					$mdgriffith$elm_ui$Element$none)) : A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey5),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(w)),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(h))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY, $mdgriffith$elm_ui$Element$clip]),
						{ei: 'chargement en cours', fK: '/assets/images/loading.gif'}),
						$mdgriffith$elm_ui$Element$html(
						A2(
							$elm$html$Html$img,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$hidden(true),
									A2(
									$elm$html$Html$Events$on,
									'load',
									$elm$json$Json$Decode$succeed(
										$author$project$Gallery$Gallery$ImgLoaded(src_))),
									$elm$html$Html$Attributes$src(src_)
								]),
							_List_Nil))
					]));
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$Gallery$Gallery$chunkView = F3(
	function (config, model, chunk) {
		var w = $author$project$Gallery$Gallery$maxWidth(config);
		var h = A2(
			$elm$core$Basics$min,
			600,
			$elm$core$Basics$round(w / 1.333333));
		if (((chunk.b && chunk.b.b) && chunk.b.b.b) && (!chunk.b.b.b.b)) {
			var l = chunk.a;
			var _v1 = chunk.b;
			var c = _v1.a;
			var _v2 = _v1.b;
			var r = _v2.a;
			return A2(
				$mdgriffith$elm_ui$Element$Lazy$lazy,
				function (mc) {
					return A2(
						$mdgriffith$elm_ui$Element$row,
						_Utils_ap(
							A2(
								$author$project$Gallery$GalleryHelpers$events,
								model.aG,
								_Utils_Tuple3($author$project$Gallery$Gallery$DragStart, $author$project$Gallery$Gallery$DragAt, $author$project$Gallery$Gallery$DragEnd)),
							_List_fromArray(
								[mc])),
						_List_fromArray(
							[
								A3($author$project$Gallery$Gallery$picView, config, model, l),
								A3($author$project$Gallery$Gallery$picView, config, model, c),
								A3($author$project$Gallery$Gallery$picView, config, model, r)
							]));
				},
				A2($author$project$Gallery$Gallery$moveChunk, config, model));
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $mdgriffith$elm_ui$Element$clipX = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.iy);
var $author$project$Gallery$Gallery$galleryView = F2(
	function (config, model) {
		var w = $author$project$Gallery$Gallery$maxWidth(config);
		var h = A2(
			$elm$core$Basics$min,
			600,
			$elm$core$Basics$round(w / 1.333333));
		var controlPanel = F3(
			function (attr, msg, icon) {
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_Utils_ap(
						_List_fromArray(
							[
								(config.mt > 750) ? $mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px((w / 3) | 0)) : $mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(50)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(h)),
								$mdgriffith$elm_ui$Element$pointer,
								$mdgriffith$elm_ui$Element$alpha(0),
								$mdgriffith$elm_ui$Element$mouseOver(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$alpha(1)
									])),
								$mdgriffith$elm_ui$Element$Events$onClick(msg),
								A2($mdgriffith$elm_ui$Element$paddingXY, 5, 0)
							]),
						attr),
					A2(
						$mdgriffith$elm_ui$Element$el,
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$bold,
									$mdgriffith$elm_ui$Element$centerY,
									$mdgriffith$elm_ui$Element$Font$color(
									A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 255)),
									$mdgriffith$elm_ui$Element$Border$rounded(20),
									$mdgriffith$elm_ui$Element$Background$color(
									A4($mdgriffith$elm_ui$Element$rgba, 255, 255, 255, 0.5))
								]),
							attr),
						$mdgriffith$elm_ui$Element$html(
							icon(
								(config.mt > 750) ? 55 : 40))));
			});
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$clipX,
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(w)),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$inFront(
					A3(controlPanel, _List_Nil, $author$project$Gallery$Gallery$Previous, $author$project$Internals$Icons$chevronLeft)),
					$mdgriffith$elm_ui$Element$inFront(
					A3(
						controlPanel,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$alignRight]),
						$author$project$Gallery$Gallery$Next,
						$author$project$Internals$Icons$chevronRight))
				]),
			A3(
				$author$project$Gallery$Gallery$chunkView,
				config,
				model,
				$author$project$Internals$Streams$current(model.af)));
	});
var $author$project$Gallery$Gallery$Select = function (a) {
	return {$: 1, a: a};
};
var $author$project$Gallery$Gallery$ThumbLoaded = function (a) {
	return {$: 9, a: a};
};
var $author$project$Gallery$Gallery$gridView = F2(
	function (config, model) {
		var w = $author$project$Gallery$Gallery$maxWidth(config);
		var thumbSize = 135;
		var thumbView = function (src) {
			if (!src.$) {
				var src_ = src.a;
				return A2($elm$core$Set$member, src_, model.dE) ? A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(5),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
							$mdgriffith$elm_ui$Element$mouseOver(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey4)
								])),
							$mdgriffith$elm_ui$Element$Border$rounded(5),
							$mdgriffith$elm_ui$Element$Events$onClick(
							$author$project$Gallery$Gallery$Select(src)),
							$mdgriffith$elm_ui$Element$pointer
						]),
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(thumbSize)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(thumbSize)),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$mouseOver(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$alpha(0.5)
									])),
								$mdgriffith$elm_ui$Element$Background$uncropped(
								$author$project$Internals$CommonHelpers$thumbSrc(src_))
							]),
						$mdgriffith$elm_ui$Element$none)) : A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(5),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
							$mdgriffith$elm_ui$Element$mouseOver(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey4)
								])),
							$mdgriffith$elm_ui$Element$Border$rounded(5),
							$mdgriffith$elm_ui$Element$pointer,
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(thumbSize + 10)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(thumbSize + 10))
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$html(
							A2(
								$elm$html$Html$img,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$hidden(true),
										A2(
										$elm$html$Html$Events$on,
										'load',
										$elm$json$Json$Decode$succeed(
											$author$project$Gallery$Gallery$ThumbLoaded(src_))),
										$elm$html$Html$Attributes$src(
										$author$project$Internals$CommonHelpers$thumbSrc(src_))
									]),
								_List_Nil)),
							A2(
							$mdgriffith$elm_ui$Element$image,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
							{ei: 'chargement', fK: '/assets/images/loading.gif'})
						]));
			} else {
				return $mdgriffith$elm_ui$Element$none;
			}
		};
		var h = A2(
			$elm$core$Basics$min,
			600,
			$elm$core$Basics$round(w / 1.333333));
		var chunkSize = ((w - 15) / (thumbSize + 10)) | 0;
		var rows = A2(
			$elm$core$List$map,
			$mdgriffith$elm_ui$Element$row(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spaceEvenly,
						A2($mdgriffith$elm_ui$Element$paddingXY, 10, 0)
					])),
			A2(
				$author$project$Internals$CommonHelpers$chunks,
				chunkSize,
				A2($elm$core$List$map, thumbView, model.fl)));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey5),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(w)),
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(h)),
					$mdgriffith$elm_ui$Element$scrollbarY,
					$mdgriffith$elm_ui$Element$spacing(10),
					A2($mdgriffith$elm_ui$Element$paddingXY, 0, 10)
				]),
			rows);
	});
var $author$project$Gallery$Gallery$ToogleDisplayMode = {$: 0};
var $author$project$Internals$Icons$grid = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'grid',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$rect,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x('3'),
						$elm$svg$Svg$Attributes$y('3'),
						$elm$svg$Svg$Attributes$width('7'),
						$elm$svg$Svg$Attributes$height('7')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$rect,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x('14'),
						$elm$svg$Svg$Attributes$y('3'),
						$elm$svg$Svg$Attributes$width('7'),
						$elm$svg$Svg$Attributes$height('7')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$rect,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x('14'),
						$elm$svg$Svg$Attributes$y('14'),
						$elm$svg$Svg$Attributes$width('7'),
						$elm$svg$Svg$Attributes$height('7')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$rect,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x('3'),
						$elm$svg$Svg$Attributes$y('14'),
						$elm$svg$Svg$Attributes$width('7'),
						$elm$svg$Svg$Attributes$height('7')
					]),
				_List_Nil)
			]));
};
var $author$project$Gallery$Gallery$titleRow = F2(
	function (config, model) {
		var w = $author$project$Gallery$Gallery$maxWidth(config);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$maximum, w, $mdgriffith$elm_ui$Element$fill)),
					A2($mdgriffith$elm_ui$Element$paddingXY, 15, 5),
					$mdgriffith$elm_ui$Element$spacing(20)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$size(16),
							$mdgriffith$elm_ui$Element$Font$color(
							A3($mdgriffith$elm_ui$Element$rgb, 0, 0.5, 0)),
							$mdgriffith$elm_ui$Element$Font$bold
						]),
					$mdgriffith$elm_ui$Element$text(
						$elm_community$string_extra$String$Extra$toSentenceCase(model.fP))),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					_Utils_ap(
						$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$alignRight])),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Element$paddingXY, 0, 0)
								]),
							$mdgriffith$elm_ui$Element$html(
								function () {
									var _v0 = model.bW;
									if (!_v0) {
										return $author$project$Internals$Icons$grid(22);
									} else {
										return $author$project$Internals$Icons$imageIcon(22);
									}
								}())),
						aI: $elm$core$Maybe$Just($author$project$Gallery$Gallery$ToogleDisplayMode)
					})
				]));
	});
var $author$project$Gallery$Gallery$view = F2(
	function (config, model) {
		var w = $author$project$Gallery$Gallery$maxWidth(config);
		var h = A2(
			$elm$core$Basics$min,
			600,
			$elm$core$Basics$round(w / 1.333333));
		return A2(
			$mdgriffith$elm_ui$Element$map,
			model.bY,
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
						$mdgriffith$elm_ui$Element$Border$rounded(5),
						$mdgriffith$elm_ui$Element$centerX
					]),
				_List_fromArray(
					[
						A2($author$project$Gallery$Gallery$titleRow, config, model),
						function () {
						var _v0 = model.bW;
						if (!_v0) {
							return A2($author$project$Gallery$Gallery$galleryView, config, model);
						} else {
							return A2($author$project$Gallery$Gallery$gridView, config, model);
						}
					}(),
						A2($author$project$Gallery$Gallery$captionRow, config, model)
					])));
	});
var $author$project$Document$DocumentViews$DocumentView$renderGallery = F4(
	function (config, id, attrs, galleryMeta) {
		var _v0 = A2(
			$elm$core$Dict$get,
			$TSFoster$elm_uuid$UUID$toString(galleryMeta.fS),
			config.jl);
		if (!_v0.$) {
			var gallery = _v0.a;
			return _List_fromArray(
				[
					A2($author$project$Gallery$Gallery$view, config, gallery)
				]);
		} else {
			return config.an ? _List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(400)),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
								$mdgriffith$elm_ui$Element$Border$rounded(5),
								$mdgriffith$elm_ui$Element$centerX
							]),
						A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs)),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($mdgriffith$elm_ui$Element$paddingXY, 15, 5)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$size(16),
											$mdgriffith$elm_ui$Element$Font$color(
											A3($mdgriffith$elm_ui$Element$rgb, 0, 0.5, 0)),
											$mdgriffith$elm_ui$Element$Font$bold
										]),
									$mdgriffith$elm_ui$Element$text(
										$elm_community$string_extra$String$Extra$toSentenceCase(galleryMeta.fP))),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$alignRight]),
									$mdgriffith$elm_ui$Element$text(
										$elm$core$String$fromInt(
											$elm$core$List$length(galleryMeta.jI)) + ' images'))
								])),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey7)
								]),
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(400)),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(
											$elm$core$Basics$round(400 / 1.333333))),
										$mdgriffith$elm_ui$Element$Background$uncropped(
										function () {
											var _v1 = A2(
												$elm$core$Maybe$map,
												function ($) {
													return $.fK;
												},
												$elm$core$List$head(galleryMeta.jI));
											if ((!_v1.$) && (!_v1.a.$)) {
												var src = _v1.a.a;
												return src;
											} else {
												return '';
											}
										}())
									]),
								$mdgriffith$elm_ui$Element$none))
						]))
				]) : _List_Nil;
		}
	});
var $author$project$Document$DocumentViews$DocumentView$renderImage = F4(
	function (config, id, attrs, _v0) {
		var uid = id.cW;
		var docStyleId = id.bx;
		var classes = id.br;
		var src = _v0.fK;
		var caption = _v0.f7;
		var size = _v0.fJ;
		var styleSheet = $author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		var src_ = function () {
			if (src.$ === 1) {
				var f = src.a;
				var s = src.b;
				return s;
			} else {
				var s = src.a;
				return s;
			}
		}();
		var attrs_ = _Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width(
					A2($mdgriffith$elm_ui$Element$maximum, size.jL, $mdgriffith$elm_ui$Element$fill))
				]),
			_Utils_ap(
				styleSheet.jH,
				_Utils_ap(
					A2($author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
					A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))));
		return _List_fromArray(
			[
				function () {
				if (!caption.$) {
					var c = caption.a;
					return A2(
						$mdgriffith$elm_ui$Element$column,
						attrs_,
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$image,
								_List_Nil,
								{ei: '', fK: src_}),
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$italic,
										$mdgriffith$elm_ui$Element$Font$size(14),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$Font$center,
										A2($mdgriffith$elm_ui$Element$paddingXY, 0, 5)
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text(c)
									]))
							]));
				} else {
					return A2(
						$mdgriffith$elm_ui$Element$image,
						attrs_,
						{ei: '', fK: src_});
				}
			}()
			]);
	});
var $author$project$Publications$PublicationsView$topicView = F2(
	function (n, s) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[
					(!A2($elm$core$Basics$modBy, 2, n)) ? $mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6) : $mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb255, 221, 221, 221)),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2($mdgriffith$elm_ui$Element$paddingXY, 10, 5),
					$mdgriffith$elm_ui$Element$Font$size(16),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(s)
				]));
	});
var $author$project$Publications$PublicationsView$murolInfosView = function (config) {
	var murolInfoView = function (_v2) {
		var issue = _v2.gH;
		var date = _v2.eg;
		var topics = _v2.mi;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_Utils_ap(
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('Numéro: ')),
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text(
											$elm$core$String$fromInt(issue)))
									])),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$alignRight]),
								$mdgriffith$elm_ui$Element$text(
									A2(
										$elm$core$String$dropLeft,
										3,
										A2($author$project$Internals$CommonHelpers$dateToStr, config.fY, date)))),
								A2(
								$mdgriffith$elm_ui$Element$newTabLink,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$alignRight,
										$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$teal4),
										$mdgriffith$elm_ui$Element$mouseOver(
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$color(
												A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
											])),
										$mdgriffith$elm_ui$Element$pointer,
										$mdgriffith$elm_ui$Element$Border$rounded(5),
										A2($mdgriffith$elm_ui$Element$paddingXY, 7, 5)
									]),
								{
									O: $mdgriffith$elm_ui$Element$text('Télécharger'),
									d$: '/baseDocumentaire/publications/murolInfos/' + function (s) {
										return s + '.pdf';
									}(
										A3(
											$elm$core$String$padLeft,
											3,
											'0',
											$elm$core$String$fromInt(issue)))
								})
							]))
					]),
				A2($elm$core$List$indexedMap, $author$project$Publications$PublicationsView$topicView, topics)));
	};
	var _v0 = config.fB;
	if (!_v0.$) {
		var murolInfos = _v0.a.kl;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(40),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			A3(
				$elm$core$Dict$foldl,
				F3(
					function (k, v, acc) {
						return A2(
							$elm$core$List$cons,
							A3($author$project$Publications$PublicationsView$yearView, k, v, murolInfoView),
							acc);
					}),
				_List_Nil,
				A2(
					$elm$core$Dict$map,
					F2(
						function (k, v) {
							return A2(
								$elm$core$List$sortBy,
								function ($) {
									return $.gH;
								},
								v);
						}),
					A3(
						$elm$core$List$foldr,
						F2(
							function (k, acc) {
								return A3(
									$elm$core$Dict$update,
									A2($elm$time$Time$toYear, config.fY, k.eg),
									function (mbVal) {
										if (mbVal.$ === 1) {
											return $elm$core$Maybe$Just(
												_List_fromArray(
													[k]));
										} else {
											var xs = mbVal.a;
											return $elm$core$Maybe$Just(
												A2($elm$core$List$cons, k, xs));
										}
									},
									acc);
							}),
						$elm$core$Dict$empty,
						$elm$core$Dict$values(murolInfos)))));
	} else {
		return $mdgriffith$elm_ui$Element$none;
	}
};
var $author$project$Document$DocumentViews$DocumentView$renderMurolInfo = F3(
	function (config, id, attrs) {
		var _v0 = config.fB;
		if (_v0.$ === 1) {
			return _List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
							A2($mdgriffith$elm_ui$Element$paddingXY, 0, 7),
							$mdgriffith$elm_ui$Element$Font$center
						]),
					$mdgriffith$elm_ui$Element$text('Murol infos'))
				]);
		} else {
			var murolInfos = _v0.a.kl;
			return _List_fromArray(
				[
					$author$project$Publications$PublicationsView$murolInfosView(config)
				]);
		}
	});
var $elm$time$Time$Fri = 4;
var $elm$time$Time$Mon = 0;
var $elm$time$Time$Sat = 5;
var $elm$time$Time$Sun = 6;
var $elm$time$Time$Thu = 3;
var $elm$time$Time$Tue = 1;
var $elm$time$Time$Wed = 2;
var $elm$time$Time$toWeekday = F2(
	function (zone, time) {
		var _v0 = A2(
			$elm$core$Basics$modBy,
			7,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60 * 24));
		switch (_v0) {
			case 0:
				return 3;
			case 1:
				return 4;
			case 2:
				return 5;
			case 3:
				return 6;
			case 4:
				return 0;
			case 5:
				return 1;
			default:
				return 2;
		}
	});
var $author$project$Internals$CommonHelpers$dateToFrench = F2(
	function (zone, t) {
		var currentYear = $elm$core$String$fromInt(
			A2($elm$time$Time$toYear, zone, t));
		var currentWeekday = function () {
			var _v1 = A2($elm$time$Time$toWeekday, zone, t);
			switch (_v1) {
				case 0:
					return 'lundi';
				case 1:
					return 'mardi';
				case 2:
					return 'mercredi';
				case 3:
					return 'jeudi';
				case 4:
					return 'vendredi';
				case 5:
					return 'samedi';
				default:
					return 'dimanche';
			}
		}();
		var currentMonth = function () {
			var _v0 = A2($elm$time$Time$toMonth, zone, t);
			switch (_v0) {
				case 0:
					return 'janvier';
				case 1:
					return 'février';
				case 2:
					return 'mars';
				case 3:
					return 'avril';
				case 4:
					return 'mai';
				case 5:
					return 'juin';
				case 6:
					return 'juillet';
				case 7:
					return 'août';
				case 8:
					return 'septembre';
				case 9:
					return 'octobre';
				case 10:
					return 'novembre';
				default:
					return 'décembre';
			}
		}();
		var currentDay = $elm$core$String$fromInt(
			A2($elm$time$Time$toDay, zone, t));
		return currentWeekday + (' ' + (currentDay + (' ' + (currentMonth + (' ' + currentYear)))));
	});
var $mdgriffith$elm_ui$Internal$Model$AsTextColumn = 5;
var $mdgriffith$elm_ui$Internal$Model$asTextColumn = 5;
var $mdgriffith$elm_ui$Element$textColumn = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asTextColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width(
					A2(
						$mdgriffith$elm_ui$Element$maximum,
						750,
						A2($mdgriffith$elm_ui$Element$minimum, 500, $mdgriffith$elm_ui$Element$fill))),
				attrs),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$Document$DocumentViews$DocumentView$renderNews = F3(
	function (config, id, attrs) {
		var styleSheet = $author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		var sortedNews = $elm$core$List$reverse(
			A2(
				$elm$core$List$sortBy,
				A2(
					$elm$core$Basics$composeL,
					$elm$time$Time$posixToMillis,
					function ($) {
						return $.eg;
					}),
				$elm$core$Dict$values(config.gT)));
		var lastUpdate = A2(
			$elm$core$Maybe$map,
			$elm$time$Time$millisToPosix,
			$elm$core$List$head(
				$elm$core$List$reverse(
					$elm$core$List$sort(
						A2(
							$elm$core$List$map,
							A2(
								$elm$core$Basics$composeL,
								$elm$time$Time$posixToMillis,
								function ($) {
									return $.eg;
								}),
							$elm$core$Dict$values(config.gT))))));
		var device = $author$project$Document$DocumentViews$StyleSheets$getDevice(config);
		var renderNewsBody = F3(
			function (uuid, pic, content) {
				var picView = function (url) {
					return A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(266)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(200)),
								$mdgriffith$elm_ui$Element$Background$uncropped(url)
							]),
						$mdgriffith$elm_ui$Element$none);
				};
				var bodyAttr = _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Background$color(
						A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 255)),
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$padding(10),
						$mdgriffith$elm_ui$Element$Border$roundEach(
						{f5: 5, f6: 5, hA: 0, hB: 0}),
						$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey4),
						$mdgriffith$elm_ui$Element$Border$widthEach(
						{a2: 1, bc: 1, bl: 1, bq: 0})
					]);
				if (A2(
					$elm$core$Set$member,
					$TSFoster$elm_uuid$UUID$toString(uuid),
					config.g1)) {
					var _v3 = _Utils_Tuple2(pic, device.c$);
					if (!_v3.a.$) {
						if (!_v3.b) {
							var url = _v3.a.a.d$;
							var _v4 = _v3.b;
							return _List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$column,
									bodyAttr,
									_Utils_ap(
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$centerX]),
												picView(url))
											]),
										A4($author$project$Document$DocumentViews$DocumentView$renderTextBlock, config, id, content.y, content.lZ)))
								]);
						} else {
							var url = _v3.a.a.d$;
							return _List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$textColumn,
									bodyAttr,
									_Utils_ap(
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$paddingEach(
														{a2: 0, bc: 0, bl: 10, bq: 0}),
														$mdgriffith$elm_ui$Element$alignLeft
													]),
												picView(url))
											]),
										A4($author$project$Document$DocumentViews$DocumentView$renderTextBlock, config, id, content.y, content.lZ)))
								]);
						}
					} else {
						var _v5 = _v3.a;
						return _List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$column,
								bodyAttr,
								A4($author$project$Document$DocumentViews$DocumentView$renderTextBlock, config, id, content.y, content.lZ))
							]);
					}
				} else {
					return _List_Nil;
				}
			});
		var renderNewsHeader = F3(
			function (uuid, title, date) {
				var titleView = A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1),
							$mdgriffith$elm_ui$Element$paddingEach(
							{a2: 0, bc: 0, bl: 0, bq: 0})
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(
							$elm_community$string_extra$String$Extra$toSentenceCase(title))
						]));
				var headerAttr = _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Events$onClick(
						config.kL(
							$TSFoster$elm_uuid$UUID$toString(uuid))),
						$mdgriffith$elm_ui$Element$pointer,
						$mdgriffith$elm_ui$Element$paddingEach(
						{a2: 5, bc: 5, bl: 0, bq: 5}),
						$mdgriffith$elm_ui$Element$Border$roundEach(
						{f5: 0, f6: 0, hA: 2, hB: 2}),
						$mdgriffith$elm_ui$Element$Border$widthEach(
						{a2: 1, bc: 0, bl: 0, bq: 0}),
						$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey6),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey5),
						$mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6)
							]))
					]);
				var dateAttr = _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey6),
						$mdgriffith$elm_ui$Element$Border$widthEach(
						{a2: 0, bc: 1, bl: 0, bq: 0}),
						$mdgriffith$elm_ui$Element$paddingEach(
						{a2: 5, bc: 9, bl: 5, bq: 5})
					]);
				var chevronsView = A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$alignRight,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey3)
						]),
					$mdgriffith$elm_ui$Element$html(
						A2(
							$elm$core$Set$member,
							$TSFoster$elm_uuid$UUID$toString(uuid),
							config.g1) ? $author$project$Internals$Icons$chevronsUp(18) : $author$project$Internals$Icons$chevronsDown(18)));
				var _v2 = device.c$;
				if (!_v2) {
					return A2(
						$mdgriffith$elm_ui$Element$column,
						headerAttr,
						_List_fromArray(
							[
								titleView,
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										dateAttr,
										$mdgriffith$elm_ui$Element$text(
											A2($author$project$Internals$CommonHelpers$dateToStr, config.fY, date))),
										chevronsView
									]))
							]));
				} else {
					return A2(
						$mdgriffith$elm_ui$Element$row,
						headerAttr,
						_List_fromArray(
							[
								titleView,
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(7)
									]),
								_List_fromArray(
									[
										chevronsView,
										A2(
										$mdgriffith$elm_ui$Element$el,
										_Utils_ap(
											dateAttr,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$alignRight])),
										$mdgriffith$elm_ui$Element$text(
											A2($author$project$Internals$CommonHelpers$dateToStr, config.fY, date)))
									]))
							]));
				}
			});
		var renderNewsItem = function (_v1) {
			var uuid = _v1.fS;
			var title = _v1.fP;
			var content = _v1.iI;
			var date = _v1.eg;
			var pic = _v1.kS;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_Utils_ap(
					_List_fromArray(
						[
							A3(renderNewsHeader, uuid, title, date)
						]),
					function () {
						if (!content.$) {
							var c = content.a;
							return A3(renderNewsBody, uuid, pic, c);
						} else {
							return _List_Nil;
						}
					}()));
		};
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alignTop
						]),
					_Utils_ap(
						A2($author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
						A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				_Utils_ap(
					_List_fromArray(
						[
							A4($author$project$Document$DocumentViews$DocumentView$customHeading, config, 1, _List_Nil, 'ACTUALITES DE LA COMMUNE'),
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Element$none,
							A2(
								$elm$core$Maybe$map,
								function (lastUp) {
									return A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_Nil,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text(
												'Dernière mise à jour le ' + A2($author$project$Internals$CommonHelpers$dateToFrench, config.fY, lastUp))
											]));
								},
								lastUpdate))
						]),
					A2($elm$core$List$map, renderNewsItem, sortedNews)))
			]);
	});
var $author$project$Document$DocumentViews$DocumentView$renderPictureLinks = F4(
	function (config, id, attrs, picLinks) {
		var styleSheet = $author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		var minHeight = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				$elm$core$Basics$min(50),
				$elm$core$List$head(
					$elm$core$List$sort(
						A2(
							$elm$core$List$map,
							A2(
								$elm$core$Basics$composeL,
								A2(
									$elm$core$Basics$composeL,
									function ($) {
										return $.jK;
									},
									function ($) {
										return $.fJ;
									}),
								function ($) {
									return $.jJ;
								}),
							picLinks)))));
		var imgsScaledToMinHeight = function () {
			var scale = function (picLink) {
				var img = picLink.jJ;
				return _Utils_update(
					picLink,
					{
						jJ: _Utils_update(
							img,
							{
								fJ: {
									jK: minHeight + 5,
									jL: $elm$core$Basics$round((minHeight * img.fJ.jL) / img.fJ.jK)
								}
							})
					});
			};
			return A2($elm$core$List$map, scale, picLinks);
		}();
		var totalImgWidth = A3(
			$elm$core$List$foldr,
			F2(
				function (pl, n) {
					return pl.jJ.fJ.jL + n;
				}),
			0,
			imgsScaledToMinHeight);
		var logoView = function (_v3) {
			var url = _v3.d$;
			var img = _v3.jJ;
			return config.an ? A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$fillPortion(
							$elm$core$Basics$floor((10000 * img.fJ.jL) / totalImgWidth)))
					]),
				A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
						]),
					{
						ei: '',
						fK: function () {
							var _v1 = img.fK;
							if (!_v1.$) {
								var urlSrc = _v1.a;
								return urlSrc;
							} else {
								return '';
							}
						}()
					})) : A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$fillPortion(
							$elm$core$Basics$floor((10000 * img.fJ.jL) / totalImgWidth)))
					]),
				A2(
					$mdgriffith$elm_ui$Element$newTabLink,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$pointer,
							$mdgriffith$elm_ui$Element$Border$width(2),
							$mdgriffith$elm_ui$Element$Border$color(
							A4($mdgriffith$elm_ui$Element$rgba255, 255, 255, 255, 0)),
							$mdgriffith$elm_ui$Element$Border$rounded(2),
							$mdgriffith$elm_ui$Element$mouseOver(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Border$color(
									A3($mdgriffith$elm_ui$Element$rgb255, 255, 255, 255))
								]))
						]),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$image,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							{
								ei: '',
								fK: function () {
									var _v2 = img.fK;
									if (!_v2.$) {
										var urlSrc = _v2.a;
										return urlSrc;
									} else {
										return '';
									}
								}()
							}),
						d$: url
					}));
		};
		if (!picLinks.b) {
			return _List_Nil;
		} else {
			return _List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(10),
								$mdgriffith$elm_ui$Element$padding(10)
							]),
						_Utils_ap(
							styleSheet.kU,
							_Utils_ap(
								A2($author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
								A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs)))),
					A2($elm$core$List$map, logoView, imgsScaledToMinHeight))
				]);
		}
	});
var $mdgriffith$elm_ui$Element$InternalIndexedColumn = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$GridPosition = function (a) {
	return {$: 9, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$GridTemplateStyle = function (a) {
	return {$: 8, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsGrid = 3;
var $mdgriffith$elm_ui$Internal$Model$asGrid = 3;
var $mdgriffith$elm_ui$Internal$Flag$gridPosition = $mdgriffith$elm_ui$Internal$Flag$flag(35);
var $mdgriffith$elm_ui$Internal$Flag$gridTemplate = $mdgriffith$elm_ui$Internal$Flag$flag(34);
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $mdgriffith$elm_ui$Element$tableHelper = F2(
	function (attrs, config) {
		var onGrid = F3(
			function (rowLevel, columnLevel, elem) {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$StyleClass,
							$mdgriffith$elm_ui$Internal$Flag$gridPosition,
							$mdgriffith$elm_ui$Internal$Model$GridPosition(
								{gb: columnLevel, jx: 1, hi: rowLevel, mt: 1}))
						]),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[elem])));
			});
		var columnWidth = function (col) {
			if (!col.$) {
				var colConfig = col.a;
				return colConfig.mt;
			} else {
				var colConfig = col.a;
				return colConfig.mt;
			}
		};
		var columnHeader = function (col) {
			if (!col.$) {
				var colConfig = col.a;
				return colConfig.ju;
			} else {
				var colConfig = col.a;
				return colConfig.ju;
			}
		};
		var maybeHeaders = function (headers) {
			return A2(
				$elm$core$List$all,
				$elm$core$Basics$eq($mdgriffith$elm_ui$Internal$Model$Empty),
				headers) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (col, header) {
							return A3(onGrid, 1, col + 1, header);
						}),
					headers));
		}(
			A2($elm$core$List$map, columnHeader, config.iC));
		var add = F3(
			function (cell, columnConfig, cursor) {
				if (!columnConfig.$) {
					var col = columnConfig.a;
					return _Utils_update(
						cursor,
						{
							e0: cursor.e0 + 1,
							ab: A2(
								$elm$core$List$cons,
								A3(
									onGrid,
									cursor.hi,
									cursor.e0,
									A2(
										col.mp,
										_Utils_eq(maybeHeaders, $elm$core$Maybe$Nothing) ? (cursor.hi - 1) : (cursor.hi - 2),
										cell)),
								cursor.ab)
						});
				} else {
					var col = columnConfig.a;
					return {
						e0: cursor.e0 + 1,
						ab: A2(
							$elm$core$List$cons,
							A3(
								onGrid,
								cursor.hi,
								cursor.e0,
								col.mp(cell)),
							cursor.ab),
						hi: cursor.hi
					};
				}
			});
		var build = F3(
			function (columns, rowData, cursor) {
				var newCursor = A3(
					$elm$core$List$foldl,
					add(rowData),
					cursor,
					columns);
				return {e0: 1, ab: newCursor.ab, hi: cursor.hi + 1};
			});
		var children = A3(
			$elm$core$List$foldl,
			build(config.iC),
			{
				e0: 1,
				ab: _List_Nil,
				hi: _Utils_eq(maybeHeaders, $elm$core$Maybe$Nothing) ? 1 : 2
			},
			config.iU);
		var _v0 = A2(
			$mdgriffith$elm_ui$Internal$Model$getSpacing,
			attrs,
			_Utils_Tuple2(0, 0));
		var sX = _v0.a;
		var sY = _v0.b;
		var template = A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$gridTemplate,
			$mdgriffith$elm_ui$Internal$Model$GridTemplateStyle(
				{
					iC: A2($elm$core$List$map, columnWidth, config.iC),
					ld: A2(
						$elm$core$List$repeat,
						$elm$core$List$length(config.iU),
						$mdgriffith$elm_ui$Internal$Model$Content),
					lI: _Utils_Tuple2(
						$mdgriffith$elm_ui$Element$px(sX),
						$mdgriffith$elm_ui$Element$px(sY))
				}));
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asGrid,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				A2($elm$core$List$cons, template, attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				function () {
					if (maybeHeaders.$ === 1) {
						return children.ab;
					} else {
						var renderedHeaders = maybeHeaders.a;
						return _Utils_ap(
							renderedHeaders,
							$elm$core$List$reverse(children.ab));
					}
				}()));
	});
var $mdgriffith$elm_ui$Element$indexedTable = F2(
	function (attrs, config) {
		return A2(
			$mdgriffith$elm_ui$Element$tableHelper,
			attrs,
			{
				iC: A2($elm$core$List$map, $mdgriffith$elm_ui$Element$InternalIndexedColumn, config.iC),
				iU: config.iU
			});
	});
var $mdgriffith$elm_ui$Element$scrollbarX = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.lg);
var $author$project$Document$DocumentViews$DocumentView$renderTable = F4(
	function (config, id, attrs, _v0) {
		var style = _v0.lR;
		var nbrRows = _v0.kq;
		var nbrCols = _v0.kp;
		var data = _v0.iU;
		var styleSheet = $author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		var containerWidth = $author$project$Document$DocumentViews$StyleSheets$getContainerWidth(config);
		var maxWidth = containerWidth - 40;
		var columns = A2(
			$elm$core$List$map,
			function (ci) {
				return {
					ju: $mdgriffith$elm_ui$Element$none,
					mp: F2(
						function (ri, row) {
							return A2(
								$mdgriffith$elm_ui$Element$el,
								function (s) {
									return A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										s);
								}(
									A2(
										$elm$core$Maybe$withDefault,
										_List_Nil,
										A2(
											$elm$core$Maybe$map,
											function ($) {
												return $.iG;
											},
											A2($elm$core$Dict$get, style, $author$project$Document$DocumentViews$StyleSheets$tableStyles)))),
								A2(
									$mdgriffith$elm_ui$Element$el,
									_Utils_ap(
										A2(
											$elm$core$Maybe$withDefault,
											function (_v1) {
												return _List_Nil;
											},
											A2(
												$elm$core$Maybe$map,
												function ($) {
													return $.iq;
												},
												A2($elm$core$Dict$get, style, $author$project$Document$DocumentViews$StyleSheets$tableStyles)))(ri),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Element$paddingXY, 15, 5),
												$mdgriffith$elm_ui$Element$height(
												A2($mdgriffith$elm_ui$Element$minimum, 30, $mdgriffith$elm_ui$Element$fill))
											])),
									A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_Nil,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text(
												A2(
													$elm$core$Maybe$withDefault,
													'',
													A2($elm$core$Array$get, ci, row)))
											]))));
						}),
					mt: $mdgriffith$elm_ui$Element$fill
				};
			},
			A2($elm$core$List$range, 0, nbrCols - 1));
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						A2($mdgriffith$elm_ui$Element$maximum, maxWidth, $mdgriffith$elm_ui$Element$fill))
					]),
				A2(
					$mdgriffith$elm_ui$Element$indexedTable,
					_Utils_ap(
						A2(
							$elm$core$Maybe$withDefault,
							_List_Nil,
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.lV;
								},
								A2($elm$core$Dict$get, style, $author$project$Document$DocumentViews$StyleSheets$tableStyles))),
						_Utils_ap(
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$clipX, $mdgriffith$elm_ui$Element$scrollbarX]),
							_Utils_ap(
								A2($author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
								A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs)))),
					{iC: columns, iU: data}))
			]);
	});
var $author$project$PageEditor$Internals$DocumentEditorHelpers$buildYoutubeUrl = F2(
	function (src, videoMeta) {
		var params = function (s) {
			return (s === '') ? s : ('?' + s);
		}(
			A2(
				$elm$core$String$join,
				'&',
				A2(
					$elm$core$List$filterMap,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							A2(
							$elm$core$Maybe$map,
							function (n) {
								return 'start=' + $elm$core$String$fromInt(n);
							},
							videoMeta.lL),
							(!videoMeta.jj) ? $elm$core$Maybe$Just('frameborder=0') : $elm$core$Maybe$Nothing,
							(!videoMeta.lU) ? $elm$core$Maybe$Just('rel=0') : $elm$core$Maybe$Nothing,
							(!videoMeta.iL) ? $elm$core$Maybe$Just('controls=0') : $elm$core$Maybe$Nothing,
							(!videoMeta.fP) ? $elm$core$Maybe$Just('showinfo=0') : $elm$core$Maybe$Nothing
						]))));
		return 'https://www.youtube' + ((videoMeta.k_ ? '-nocookie' : '') + ('.com/embed/' + (src + params)));
	});
var $elm$html$Html$Attributes$width = function (n) {
	return A2(
		_VirtualDom_attribute,
		'width',
		$elm$core$String$fromInt(n));
};
var $author$project$Document$DocumentViews$DocumentView$renderVideo = F4(
	function (config, id, attrs, vidMeta) {
		var uid = id.cW;
		var docStyleId = id.bx;
		var classes = id.br;
		var styleSheet = $author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		var attrs_ = _Utils_ap(
			A2($author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
			A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs));
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_Utils_ap(
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					attrs_),
				$mdgriffith$elm_ui$Element$html(
					A2(
						$elm$html$Html$iframe,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$src(
								A2($author$project$PageEditor$Internals$DocumentEditorHelpers$buildYoutubeUrl, vidMeta.fK, vidMeta)),
								$elm$html$Html$Attributes$width(vidMeta.fJ.mo),
								$elm$html$Html$Attributes$height(vidMeta.fJ.mn),
								vidMeta.jj ? $author$project$Internals$CommonStyleHelpers$noHtmlAttr : A2($elm$html$Html$Attributes$attribute, 'frameborder', '0'),
								A2($elm$html$Html$Attributes$attribute, 'allowfullscreen', 'true'),
								A2($elm$html$Html$Attributes$attribute, 'allow', 'autoplay; encrypted-media')
							]),
						_List_Nil)))
			]);
	});
var $author$project$Document$DocumentViews$DocumentView$renderWeatherWidget = F3(
	function (config, id, attrs) {
		var device = $author$project$Document$DocumentViews$StyleSheets$getDevice(config);
		var widgetWidth = function () {
			var _v0 = device.c$;
			switch (_v0) {
				case 0:
					return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill);
				case 1:
					return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill);
				default:
					return $mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(300));
			}
		}();
		var containerWidth = $author$project$Document$DocumentViews$StyleSheets$getContainerWidth(config);
		var maxWidth = containerWidth - 40;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					_List_fromArray(
						[
							widgetWidth,
							$mdgriffith$elm_ui$Element$alignTop,
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$spacing(10)
						]),
					_Utils_ap(
						A2(
							$author$project$Document$DocumentViews$DocumentView$idStyle,
							$author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config),
							id),
						A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				_List_fromArray(
					[
						A4($author$project$Document$DocumentViews$DocumentView$customHeading, config, 1, _List_Nil, 'METEO'),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerX]),
						$mdgriffith$elm_ui$Element$html(
							A2(
								$elm$html$Html$iframe,
								_List_fromArray(
									[
										A2($elm$html$Html$Attributes$style, 'border-width', '0'),
										A2($elm$html$Html$Attributes$style, 'width', '300'),
										$elm$html$Html$Attributes$src('/meteo.html')
									]),
								_List_Nil)))
					]))
			]);
	});
var $author$project$Document$DocumentViews$DocumentView$renderColumn = F4(
	function (config, id, attrs, children) {
		var styleSheet = $author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					styleSheet.iB,
					_Utils_ap(
						config.e1 ? _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color(
								A4($mdgriffith$elm_ui$Element$rgba, 0, 1, 0, 0.3))
							]) : _List_Nil,
						_Utils_ap(
							A2($author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
							_Utils_ap(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										A2($mdgriffith$elm_ui$Element$maximum, config.mt, $mdgriffith$elm_ui$Element$fill)),
										$mdgriffith$elm_ui$Element$alignTop
									]),
								A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))))),
				A2(
					$elm$core$List$concatMap,
					$author$project$Document$DocumentViews$DocumentView$renderDoc(config),
					children))
			]);
	});
var $author$project$Document$DocumentViews$DocumentView$renderDoc = F2(
	function (config, document) {
		if (!document.$) {
			var containerLabel = document.a.bs;
			var id = document.a.a;
			var attrs = document.a.y;
			var children = document.b;
			switch (containerLabel) {
				case 0:
					return A4($author$project$Document$DocumentViews$DocumentView$renderColumn, config, id, attrs, children);
				case 1:
					return A4($author$project$Document$DocumentViews$DocumentView$renderRow, config, id, attrs, children);
				case 2:
					return A4($author$project$Document$DocumentViews$DocumentView$renderTextColumn, config, id, attrs, children);
				default:
					return A4($author$project$Document$DocumentViews$DocumentView$renderResponsiveBloc, config, id, attrs, children);
			}
		} else {
			var cellContent = document.a.at;
			var id = document.a.a;
			var attrs = document.a.y;
			switch (cellContent.$) {
				case 0:
					var meta = cellContent.a;
					return A4($author$project$Document$DocumentViews$DocumentView$renderImage, config, id, attrs, meta);
				case 1:
					var meta = cellContent.a;
					return A4($author$project$Document$DocumentViews$DocumentView$renderVideo, config, id, attrs, meta);
				case 4:
					var meta = cellContent.a;
					return A4($author$project$Document$DocumentViews$DocumentView$renderBlockLinks, config, id, attrs, meta);
				case 5:
					var fichesId = cellContent.a;
					return A4($author$project$Document$DocumentViews$DocumentView$renderFiches, config, id, attrs, fichesId);
				case 7:
					return A3($author$project$Document$DocumentViews$DocumentView$renderNews, config, id, attrs);
				case 6:
					var xs = cellContent.a;
					return A4($author$project$Document$DocumentViews$DocumentView$renderTextBlock, config, id, attrs, xs);
				case 2:
					var meta = cellContent.a;
					return A4($author$project$Document$DocumentViews$DocumentView$renderTable, config, id, attrs, meta);
				case 3:
					var s = cellContent.a;
					return A4($author$project$Document$DocumentViews$DocumentView$renderCustomElement, config, id, attrs, s);
				case 14:
					var picLinks = cellContent.a;
					return A4($author$project$Document$DocumentViews$DocumentView$renderPictureLinks, config, id, attrs, picLinks);
				case 15:
					var galleryMeta = cellContent.a;
					return A4($author$project$Document$DocumentViews$DocumentView$renderGallery, config, id, attrs, galleryMeta);
				case 8:
					return A3($author$project$Document$DocumentViews$DocumentView$renderCalendarWidget, config, id, attrs);
				case 9:
					return A3($author$project$Document$DocumentViews$DocumentView$renderCalendar, config, id, attrs);
				case 10:
					return A3($author$project$Document$DocumentViews$DocumentView$renderCalendarSalleMurol, config, id, attrs);
				case 11:
					return A3($author$project$Document$DocumentViews$DocumentView$renderCalendarSalleBeaune, config, id, attrs);
				case 12:
					return A3($author$project$Document$DocumentViews$DocumentView$renderWeatherWidget, config, id, attrs);
				case 13:
					return A3($author$project$Document$DocumentViews$DocumentView$renderDronePanorama, config, id, attrs);
				case 16:
					return A3($author$project$Document$DocumentViews$DocumentView$renderMurolInfo, config, id, attrs);
				case 17:
					return A3($author$project$Document$DocumentViews$DocumentView$renderDelib, config, id, attrs);
				case 18:
					return A3($author$project$Document$DocumentViews$DocumentView$renderBulletin, config, id, attrs);
				default:
					return A3($author$project$Document$DocumentViews$DocumentView$renderEmptyCell, config, id, attrs);
			}
		}
	});
var $author$project$Document$DocumentViews$DocumentView$renderResponsiveBloc = F4(
	function (config, id, attrs, children) {
		var styleSheet = $author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					styleSheet.k7,
					_Utils_ap(
						A2($author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
						A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs))),
				A2(
					$elm$core$List$concatMap,
					$author$project$Document$DocumentViews$DocumentView$renderDoc(config),
					children))
			]);
	});
var $author$project$Document$DocumentViews$DocumentView$renderRow = F4(
	function (config, id, attrs, children) {
		var styleSheet = $author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					styleSheet.lc,
					_Utils_ap(
						config.e1 ? _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color(
								A4($mdgriffith$elm_ui$Element$rgba, 1, 0, 0, 0.3))
							]) : _List_Nil,
						_Utils_ap(
							A2($author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
							A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs)))),
				A2(
					$elm$core$List$concatMap,
					$author$project$Document$DocumentViews$DocumentView$renderDoc(config),
					children))
			]);
	});
var $author$project$Document$DocumentViews$DocumentView$renderTextColumn = F4(
	function (config, id, attrs, children) {
		var styleSheet = $author$project$Document$DocumentViews$StyleSheets$defaultStyleSheet(config);
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$textColumn,
				_Utils_ap(
					styleSheet.l1,
					_Utils_ap(
						config.e1 ? _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color(
								A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 0.3))
							]) : _List_Nil,
						_Utils_ap(
							A2($author$project$Document$DocumentViews$DocumentView$idStyle, styleSheet, id),
							A2($author$project$Document$DocumentViews$DocumentView$renderAttrs, config, attrs)))),
				A2(
					$elm$core$List$concatMap,
					$author$project$Document$DocumentViews$DocumentView$renderDoc(config),
					children))
			]);
	});
var $author$project$Document$Document$containsOnly = F2(
	function (p, document) {
		if (!document.$) {
			var nv = document.a;
			var children = document.b;
			return A3(
				$elm$core$List$foldr,
				F2(
					function (d, acc) {
						return p(d) && acc;
					}),
				true,
				children);
		} else {
			return false;
		}
	});
var $author$project$Document$DocumentViews$DocumentResponsive$flipTable = function (_v0) {
	var style = _v0.lR;
	var nbrRows = _v0.kq;
	var nbrCols = _v0.kp;
	var data = _v0.iU;
	var uncons = function (xs) {
		if (xs.b) {
			var x = xs.a;
			var xs_ = xs.b;
			return $elm$core$Maybe$Just(
				_Utils_Tuple2(x, xs_));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var inverse = F2(
		function (acc, xs) {
			inverse:
			while (true) {
				if (!xs.b) {
					return $elm$core$List$reverse(acc);
				} else {
					var xs_ = xs;
					var _v2 = A3(
						$elm$core$List$foldr,
						F2(
							function (_v3, _v4) {
								var h = _v3.a;
								var t = _v3.b;
								var hs = _v4.a;
								var ts = _v4.b;
								return _Utils_Tuple2(
									A2($elm$core$List$cons, h, hs),
									A2($elm$core$List$cons, t, ts));
							}),
						_Utils_Tuple2(_List_Nil, _List_Nil),
						A2($elm$core$List$filterMap, uncons, xs_));
					var heads = _v2.a;
					var tails = _v2.b;
					var tails_ = A2($elm$core$List$member, _List_Nil, tails) ? _List_Nil : tails;
					var $temp$acc = A2($elm$core$List$cons, heads, acc),
						$temp$xs = tails_;
					acc = $temp$acc;
					xs = $temp$xs;
					continue inverse;
				}
			}
		});
	var newData = A2(
		$elm$core$List$map,
		$elm$core$Array$fromList,
		A2(
			inverse,
			_List_Nil,
			A2($elm$core$List$map, $elm$core$Array$toList, data)));
	return {iU: newData, kp: nbrRows, kq: nbrCols, lR: style};
};
var $author$project$Document$Document$isImage = function (document) {
	if (document.$ === 1) {
		var lv = document.a;
		var _v1 = lv.at;
		if (!_v1.$) {
			return true;
		} else {
			return false;
		}
	} else {
		return false;
	}
};
var $author$project$Document$DocumentViews$DocumentResponsive$renderSameHeightImgRow = F2(
	function (containerWidth, document) {
		if (document.$ === 1) {
			return document;
		} else {
			var id_ = document.a;
			var children = document.b;
			var imgSizes = function (imgs) {
				return A2(
					$elm$core$List$map,
					function (i) {
						return i.dH.fJ;
					},
					imgs);
			};
			var minHeight = function (imgs) {
				return A2(
					$elm$core$Maybe$withDefault,
					0,
					$elm$core$List$head(
						$elm$core$List$sort(
							A2(
								$elm$core$List$map,
								function ($) {
									return $.jK;
								},
								imgSizes(imgs)))));
			};
			var images = A3(
				$elm$core$List$foldr,
				F2(
					function (doc, acc) {
						if (!doc.$) {
							return acc;
						} else {
							var lv = doc.a;
							var _v3 = lv.at;
							if (!_v3.$) {
								var meta = _v3.a;
								var src = meta.fK;
								var caption = meta.f7;
								var size = meta.fJ;
								return A2(
									$elm$core$List$cons,
									{y: lv.y, a: lv.a, dH: meta, gS: 0, ey: 0},
									acc);
							} else {
								return acc;
							}
						}
					}),
				_List_Nil,
				children);
			var imgsScaledToMinHeight = function () {
				var mh = minHeight(images);
				var scale = function (_v1) {
					var meta = _v1.dH;
					var attrs = _v1.y;
					var id = _v1.a;
					return {y: attrs, a: id, dH: meta, gS: mh + 5, ey: (mh * meta.fJ.jL) / meta.fJ.jK};
				};
				return A2($elm$core$List$map, scale, images);
			}();
			var totalImgWidth = A3(
				$elm$core$List$foldr,
				F2(
					function (i, n) {
						return i.ey + n;
					}),
				0,
				imgsScaledToMinHeight);
			return A2(
				$author$project$Document$Document$Container,
				_Utils_update(
					id_,
					{
						y: _Utils_ap(
							id_.y,
							_List_fromArray(
								[
									A2($author$project$Document$Document$SpacingXY, 7, 0)
								]))
					}),
				A2(
					$elm$core$List$map,
					function (im) {
						return $author$project$Document$Document$Cell(
							{
								y: _Utils_ap(
									_List_fromArray(
										[
											$author$project$Document$Document$FillPortion(
											$elm$core$Basics$floor((10000 * im.ey) / totalImgWidth))
										]),
									im.y),
								at: $author$project$Document$Document$Image(im.dH),
								a: im.a
							});
					},
					imgsScaledToMinHeight));
		}
	});
var $author$project$Document$DocumentViews$DocumentResponsive$responsivePreFormat = F2(
	function (config, document) {
		var device = $author$project$Document$DocumentViews$StyleSheets$getDevice(config);
		if (!document.$) {
			var nv = document.a;
			var containerLabel = nv.bs;
			var id = nv.a;
			var attrs = nv.y;
			var children = document.b;
			switch (containerLabel) {
				case 0:
					var addColImgClass = function (doc) {
						if (doc.$ === 1) {
							var l = doc;
							var lv = l.a;
							var _v3 = lv.at;
							if (!_v3.$) {
								var meta = _v3.a;
								var lId = lv.a;
								return $author$project$Document$Document$Cell(
									{
										y: lv.y,
										at: lv.at,
										a: _Utils_update(
											lId,
											{
												br: A2($elm$core$Set$insert, 'colImg', lId.br)
											})
									});
							} else {
								return l;
							}
						} else {
							var doc_ = doc;
							return doc_;
						}
					};
					var children_ = A2($elm$core$List$map, addColImgClass, children);
					return A2(
						$author$project$Document$Document$Container,
						nv,
						A2(
							$elm$core$List$map,
							$author$project$Document$DocumentViews$DocumentResponsive$responsivePreFormat(config),
							children_));
				case 1:
					return ((!device.c$) || (device.c$ === 1)) ? A2(
						$author$project$Document$DocumentViews$DocumentResponsive$responsivePreFormat,
						config,
						A2(
							$author$project$Document$Document$Container,
							_Utils_update(
								nv,
								{bs: 0}),
							children)) : (A2($author$project$Document$Document$containsOnly, $author$project$Document$Document$isImage, document) ? A2($author$project$Document$DocumentViews$DocumentResponsive$renderSameHeightImgRow, config.mt, document) : A2(
						$author$project$Document$Document$Container,
						nv,
						A2(
							$elm$core$List$map,
							$author$project$Document$DocumentViews$DocumentResponsive$responsivePreFormat(config),
							children)));
				case 2:
					return ((!device.c$) || (device.c$ === 1)) ? A2(
						$author$project$Document$DocumentViews$DocumentResponsive$responsivePreFormat,
						config,
						A2(
							$author$project$Document$Document$Container,
							_Utils_update(
								nv,
								{bs: 0}),
							children)) : A2(
						$author$project$Document$Document$Container,
						nv,
						A2(
							$elm$core$List$map,
							$author$project$Document$DocumentViews$DocumentResponsive$responsivePreFormat(config),
							children));
				default:
					return A2(
						$author$project$Document$Document$Container,
						nv,
						A2(
							$elm$core$List$map,
							$author$project$Document$DocumentViews$DocumentResponsive$responsivePreFormat(config),
							children));
			}
		} else {
			var l = document;
			var cellContent = l.a.at;
			var id = l.a.a;
			var attrs = l.a.y;
			switch (cellContent.$) {
				case 0:
					var meta = cellContent.a;
					return l;
				case 1:
					var meta = cellContent.a;
					return l;
				case 4:
					var meta = cellContent.a;
					return l;
				case 5:
					var f = cellContent.a;
					return l;
				case 7:
					return l;
				case 6:
					var xs = cellContent.a;
					return l;
				case 2:
					var meta = cellContent.a;
					return (((!device.c$) || (device.c$ === 1)) && (_Utils_cmp(meta.kp, meta.kq) > 0)) ? $author$project$Document$Document$Cell(
						{
							y: attrs,
							at: $author$project$Document$Document$Table(
								$author$project$Document$DocumentViews$DocumentResponsive$flipTable(meta)),
							a: id
						}) : l;
				case 3:
					var s = cellContent.a;
					return l;
				case 19:
					return l;
				default:
					return l;
			}
		}
	});
var $author$project$PageEditor$PageEditor$documentView = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$clip,
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'flex-shrink', '1')),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(35)),
							$mdgriffith$elm_ui$Element$Border$color(
							A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8)),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							_Utils_update(
								$author$project$Internals$CommonStyleHelpers$sides,
								{a2: 2}))
						]),
					A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$spacing(10)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$bold,
										$mdgriffith$elm_ui$Element$Font$size(16)
									]),
								$mdgriffith$elm_ui$Element$text('Edition page:')),
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$text(
									function () {
										var _v0 = $author$project$PageTreeEditor$PageTreeEditor$fileIoSelectedPageInfo(config.J);
										if (!_v0.$) {
											var name = _v0.a.I;
											return name;
										} else {
											return 'nouvelle page';
										}
									}()))
							]))),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$scrollbarY,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$htmlAttribute(
							$elm$html$Html$Attributes$id('documentContainer'))
						]),
					A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								function () {
								var _v1 = model.f.eH;
								switch (_v1) {
									case 0:
										return $mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill);
									case 1:
										return $mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(980));
									case 2:
										return $mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(800));
									default:
										return $mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(350));
								}
							}(),
								$mdgriffith$elm_ui$Element$centerX
							]),
						A2(
							$author$project$Document$DocumentViews$DocumentView$renderDoc,
							model.f,
							A2(
								$author$project$Document$DocumentViews$DocumentResponsive$responsivePreFormat,
								model.f,
								$author$project$PageEditor$Internals$DocumentZipper$extractDoc(
									$author$project$PageEditor$Internals$DocumentZipper$rewind(
										$author$project$PageEditor$Internals$DocumentZipper$addZipperHandlers(model.i2)))))))
				]));
	});
var $author$project$NewsEditor$NewsEditor$getNewsDict = function (model) {
	return model.gT;
};
var $author$project$Document$Document$isContainer = function (document) {
	if (!document.$) {
		return true;
	} else {
		return false;
	}
};
var $author$project$PageEditor$PageEditor$AddNewInside = {$: 15};
var $author$project$PageEditor$PageEditor$AddNewLeft = {$: 16};
var $author$project$PageEditor$PageEditor$AddNewRight = {$: 17};
var $author$project$PageEditor$PageEditor$DeleteSelected = {$: 21};
var $author$project$PageEditor$PageEditor$EditContainer = {$: 12};
var $author$project$PageEditor$PageEditor$NewPage = {$: 57};
var $author$project$PageEditor$PageEditor$SwapLeft = {$: 9};
var $author$project$PageEditor$PageEditor$SwapRight = {$: 10};
var $elm$svg$Svg$polygon = $elm$svg$Svg$trustedNode('polygon');
var $author$project$Internals$Icons$edit = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'edit',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M20 14.66V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$polygon,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('18 2 22 6 12 16 8 16 8 12 18 2')
					]),
				_List_Nil)
			]));
};
var $author$project$Internals$Icons$file = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'file',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$d('M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('13 2 13 9 20 9')
					]),
				_List_Nil)
			]));
};
var $author$project$PageEditor$PageEditor$iconSize = 18;
var $author$project$PageEditor$PageEditor$Copy = {$: 22};
var $author$project$PageEditor$PageEditor$Cut = {$: 23};
var $author$project$PageEditor$PageEditor$MenuClick = {$: 26};
var $author$project$PageTreeEditor$PageTreeEditor$Open = 3;
var $author$project$PageEditor$Internals$DocumentEditorHelpers$PageTreeEditorPlugin = function (a) {
	return {$: 9, a: a};
};
var $author$project$PageEditor$PageEditor$Paste = {$: 24};
var $author$project$Document$DocumentViews$StyleSheets$PreviewBigScreen = 0;
var $author$project$Document$DocumentViews$StyleSheets$PreviewPhone = 3;
var $author$project$PageEditor$PageEditor$RequestDownload = {$: 52};
var $author$project$PageEditor$PageEditor$RequestLoad = {$: 54};
var $author$project$PageTreeEditor$PageTreeEditor$Save = 1;
var $author$project$PageTreeEditor$PageTreeEditor$SaveNew = 2;
var $author$project$PageEditor$PageEditor$SetEditorPlugin = function (a) {
	return {$: 33, a: a};
};
var $author$project$PageEditor$PageEditor$SetPreviewMode = function (a) {
	return {$: 29, a: a};
};
var $author$project$PageEditor$PageEditor$ToogleCountainersColors = {$: 31};
var $author$project$PageEditor$PageEditor$ToogleShowAdvancedControls = {$: 32};
var $author$project$PageEditor$PageEditor$TopEntryFocused = function (a) {
	return {$: 28, a: a};
};
var $author$project$PageEditor$PageEditor$Undo = {$: 25};
var $elm$html$Html$Events$onMouseEnter = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseenter',
		$elm$json$Json$Decode$succeed(msg));
};
var $mdgriffith$elm_ui$Element$Events$onMouseEnter = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onMouseEnter);
var $author$project$PageEditor$PageEditor$mainMenu = function (config) {
	var menuEntry = function (_v1) {
		var label = _v1.O;
		var msg = _v1.c;
		var icon = _v1.jC;
		var isActive = _v1.gF;
		var isSelected = _v1.aA;
		var isSelectable = _v1.az;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2($mdgriffith$elm_ui$Element$paddingXY, 10, 5),
						$mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
							])),
						$mdgriffith$elm_ui$Element$spacing(5)
					]),
				isActive ? _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Events$onClick(msg),
						$mdgriffith$elm_ui$Element$pointer
					]) : _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0.7, 0.7)),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						A2($elm$html$Html$Attributes$style, 'cursor', 'default'))
					])),
			isSelected ? _List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_Nil,
					$mdgriffith$elm_ui$Element$html(
						$author$project$Internals$Icons$checkSquare(15))),
					$mdgriffith$elm_ui$Element$text(label)
				]) : (isSelectable ? _List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_Nil,
					$mdgriffith$elm_ui$Element$html(
						$author$project$Internals$Icons$square(15))),
					$mdgriffith$elm_ui$Element$text(label)
				]) : _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(label)
				])));
	};
	var groupEntry = function (group) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(0),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			A2($elm$core$List$map, menuEntry, group));
	};
	var topEntry = function (_v0) {
		var label = _v0.a;
		var submenu = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
							])),
						$mdgriffith$elm_ui$Element$Events$onMouseEnter(
						$author$project$PageEditor$PageEditor$TopEntryFocused(label)),
						$mdgriffith$elm_ui$Element$Events$onClick($author$project$PageEditor$PageEditor$MenuClick),
						A2($mdgriffith$elm_ui$Element$paddingXY, 10, 5)
					]),
				(config.e_ && _Utils_eq(config.e3, label)) ? _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$below(
						A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(5),
									A2($mdgriffith$elm_ui$Element$paddingXY, 0, 5),
									$mdgriffith$elm_ui$Element$Background$color(
									A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
									$mdgriffith$elm_ui$Element$Border$width(1),
									$mdgriffith$elm_ui$Element$Border$color(
									A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8))
								]),
							A2(
								$elm$core$List$intersperse,
								A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
											$mdgriffith$elm_ui$Element$Font$center,
											$mdgriffith$elm_ui$Element$Border$widthEach(
											{a2: 0, bc: 0, bl: 0, bq: 1}),
											$mdgriffith$elm_ui$Element$Border$color(
											A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
										]),
									$mdgriffith$elm_ui$Element$none),
								A2($elm$core$List$map, groupEntry, submenu)))),
						$mdgriffith$elm_ui$Element$Background$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
					]) : _List_Nil),
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$pointer]),
				$mdgriffith$elm_ui$Element$text(label)));
	};
	var defEntry = {jC: $elm$core$Maybe$Nothing, gF: true, az: false, aA: false, O: '', c: $author$project$PageEditor$PageEditor$NoOp};
	var menuData = _List_fromArray(
		[
			_Utils_Tuple2(
			'Fichier',
			_List_fromArray(
				[
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{
							gF: !config.u,
							O: 'Ouvrir page',
							c: $author$project$PageEditor$PageEditor$SetEditorPlugin(
								$elm$core$Maybe$Just(
									$author$project$PageEditor$Internals$DocumentEditorHelpers$PageTreeEditorPlugin(3)))
						}),
						_Utils_update(
						defEntry,
						{
							gF: !config.u,
							O: 'Synchroniser',
							c: config.d5 ? $author$project$PageEditor$PageEditor$SetEditorPlugin(
								$elm$core$Maybe$Just(
									$author$project$PageEditor$Internals$DocumentEditorHelpers$PageTreeEditorPlugin(1))) : $author$project$PageEditor$PageEditor$SetEditorPlugin(
								$elm$core$Maybe$Just(
									$author$project$PageEditor$Internals$DocumentEditorHelpers$PageTreeEditorPlugin(2)))
						})
					]),
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{gF: !config.u, O: 'Ouvrir fichier', c: $author$project$PageEditor$PageEditor$RequestLoad}),
						_Utils_update(
						defEntry,
						{gF: !config.u, O: 'Sauvegarde locale', c: $author$project$PageEditor$PageEditor$RequestDownload})
					]),
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{
							gF: !config.u,
							O: 'Administration avancée',
							c: $author$project$PageEditor$PageEditor$SetEditorPlugin(
								$elm$core$Maybe$Just($author$project$PageEditor$Internals$DocumentEditorHelpers$PersistencePlugin))
						})
					])
				])),
			_Utils_Tuple2(
			'Mise en page',
			_List_fromArray(
				[
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{gF: !config.u, O: 'Copier', c: $author$project$PageEditor$PageEditor$Copy}),
						_Utils_update(
						defEntry,
						{gF: !config.u, O: 'Couper', c: $author$project$PageEditor$PageEditor$Cut}),
						_Utils_update(
						defEntry,
						{gF: (!config.e$) && (!config.u), O: 'Coller', c: $author$project$PageEditor$PageEditor$Paste})
					]),
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{gF: (!config.fQ) && (!config.u), O: 'Annuler', c: $author$project$PageEditor$PageEditor$Undo})
					]),
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{gF: (!config.u) && (!config.bm), O: 'Supprimer'}),
						_Utils_update(
						defEntry,
						{gF: (!config.u) && ((!config.dR) && (!config.bm)), O: 'Modifier selection', c: $author$project$PageEditor$PageEditor$EditCell})
					])
				])),
			_Utils_Tuple2(
			'Affichage',
			_List_fromArray(
				[
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{
							az: true,
							aA: !config.eH,
							O: 'Grand écran',
							c: $author$project$PageEditor$PageEditor$SetPreviewMode(0)
						}),
						_Utils_update(
						defEntry,
						{
							az: true,
							aA: config.eH === 1,
							O: 'Petit écran',
							c: $author$project$PageEditor$PageEditor$SetPreviewMode(1)
						}),
						_Utils_update(
						defEntry,
						{
							az: true,
							aA: config.eH === 2,
							O: 'Tablette',
							c: $author$project$PageEditor$PageEditor$SetPreviewMode(2)
						}),
						_Utils_update(
						defEntry,
						{
							az: true,
							aA: config.eH === 3,
							O: 'Téléphone',
							c: $author$project$PageEditor$PageEditor$SetPreviewMode(3)
						})
					]),
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{az: true, aA: config.aL, O: 'Afficher l\'interface avancée', c: $author$project$PageEditor$PageEditor$ToogleShowAdvancedControls})
					]),
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{az: true, aA: config.e1, O: 'Couleurs conteneurs', c: $author$project$PageEditor$PageEditor$ToogleCountainersColors})
					]),
					_List_fromArray(
					[
						_Utils_update(
						defEntry,
						{
							gF: true,
							az: true,
							aA: !config.lj,
							O: 'Printemps',
							c: $author$project$PageEditor$PageEditor$SetSeason(0)
						}),
						_Utils_update(
						defEntry,
						{
							gF: true,
							az: true,
							aA: config.lj === 1,
							O: 'Eté',
							c: $author$project$PageEditor$PageEditor$SetSeason(1)
						}),
						_Utils_update(
						defEntry,
						{
							gF: true,
							az: true,
							aA: config.lj === 2,
							O: 'Automne',
							c: $author$project$PageEditor$PageEditor$SetSeason(2)
						}),
						_Utils_update(
						defEntry,
						{
							gF: true,
							az: true,
							aA: config.lj === 3,
							O: 'Hiver',
							c: $author$project$PageEditor$PageEditor$SetSeason(3)
						})
					])
				]))
		]);
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		A2($elm$core$List$map, topEntry, menuData));
};
var $author$project$Internals$Icons$plusSquare = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'plus-square',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$rect,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x('3'),
						$elm$svg$Svg$Attributes$y('3'),
						$elm$svg$Svg$Attributes$width('18'),
						$elm$svg$Svg$Attributes$height('18'),
						$elm$svg$Svg$Attributes$rx('2'),
						$elm$svg$Svg$Attributes$ry('2')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('12'),
						$elm$svg$Svg$Attributes$y1('8'),
						$elm$svg$Svg$Attributes$x2('12'),
						$elm$svg$Svg$Attributes$y2('16')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$line,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1('8'),
						$elm$svg$Svg$Attributes$y1('12'),
						$elm$svg$Svg$Attributes$x2('16'),
						$elm$svg$Svg$Attributes$y2('12')
					]),
				_List_Nil)
			]));
};
var $author$project$PageEditor$PageEditor$mainInterface = function (config) {
	var menuButtonStyle = function (isActive) {
		return _Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Border$rounded(5),
					$mdgriffith$elm_ui$Element$Font$center,
					$mdgriffith$elm_ui$Element$centerY,
					A2($mdgriffith$elm_ui$Element$paddingXY, 5, 3),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95))
						]))
				]),
			isActive ? _List_fromArray(
				[$mdgriffith$elm_ui$Element$pointer]) : _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0.7, 0.7)),
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'cursor', 'default'))
				]));
	};
	var interfaceButton = function (buttonConfig) {
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			menuButtonStyle(buttonConfig.gF),
			{
				O: function () {
					var _v0 = buttonConfig.a8;
					if (!_v0.b) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text(buttonConfig.aR));
					} else {
						var icons_ = _v0;
						return A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_Nil,
									A2(
										$elm$core$List$map,
										function (i) {
											return A2(
												$mdgriffith$elm_ui$Element$el,
												_List_Nil,
												$mdgriffith$elm_ui$Element$html(i));
										},
										icons_)),
									$mdgriffith$elm_ui$Element$text(buttonConfig.aR)
								]));
					}
				}(),
				aI: buttonConfig.gF ? buttonConfig.c : $elm$core$Maybe$Nothing
			});
	};
	var defButtonConfig = {a8: _List_Nil, gF: !config.u, aR: '', c: $elm$core$Maybe$Nothing};
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Font$size(15),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				$elm$html$Html$Attributes$id('mainInterface'))
			]),
		_List_fromArray(
			[
				$author$project$PageEditor$PageEditor$mainMenu(config),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(15),
						A2($mdgriffith$elm_ui$Element$paddingXY, 15, 10),
						$mdgriffith$elm_ui$Element$Background$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.9, 0.9))
					]),
				A2(
					$elm$core$List$map,
					interfaceButton,
					_List_fromArray(
						[
							_Utils_update(
							defButtonConfig,
							{
								a8: _List_fromArray(
									[
										$author$project$Internals$Icons$file($author$project$PageEditor$PageEditor$iconSize)
									]),
								gF: (!config.u) && config.d5,
								aR: 'Nouvelle page',
								c: $elm$core$Maybe$Just($author$project$PageEditor$PageEditor$NewPage)
							}),
							_Utils_update(
							defButtonConfig,
							{
								a8: _List_fromArray(
									[
										$author$project$Internals$Icons$plusSquare($author$project$PageEditor$PageEditor$iconSize)
									]),
								gF: (!config.u) && config.dR,
								aR: 'Ajouter',
								c: $elm$core$Maybe$Just($author$project$PageEditor$PageEditor$AddNewInside)
							}),
							_Utils_update(
							defButtonConfig,
							{
								a8: _List_fromArray(
									[
										$author$project$Internals$Icons$plusSquare($author$project$PageEditor$PageEditor$iconSize),
										$author$project$Internals$Icons$chevronsUp($author$project$PageEditor$PageEditor$iconSize)
									]),
								gF: (!config.u) && (!config.bm),
								aR: 'Ajouter au dessus',
								c: $elm$core$Maybe$Just($author$project$PageEditor$PageEditor$AddNewLeft)
							}),
							_Utils_update(
							defButtonConfig,
							{
								a8: _List_fromArray(
									[
										$author$project$Internals$Icons$plusSquare($author$project$PageEditor$PageEditor$iconSize),
										$author$project$Internals$Icons$chevronsDown($author$project$PageEditor$PageEditor$iconSize)
									]),
								gF: (!config.u) && (!config.bm),
								aR: 'Ajouter en dessous',
								c: $elm$core$Maybe$Just($author$project$PageEditor$PageEditor$AddNewRight)
							}),
							_Utils_update(
							defButtonConfig,
							{
								a8: _List_fromArray(
									[
										$author$project$Internals$Icons$edit($author$project$PageEditor$PageEditor$iconSize)
									]),
								gF: (!config.u) && (!config.bm),
								aR: 'Modifier',
								c: config.dR ? $elm$core$Maybe$Just($author$project$PageEditor$PageEditor$EditContainer) : $elm$core$Maybe$Just($author$project$PageEditor$PageEditor$EditCell)
							}),
							_Utils_update(
							defButtonConfig,
							{
								a8: _List_fromArray(
									[
										$author$project$Internals$Icons$xSquare($author$project$PageEditor$PageEditor$iconSize)
									]),
								gF: (!config.u) && (!config.bm),
								aR: 'Supprimer',
								c: $elm$core$Maybe$Just($author$project$PageEditor$PageEditor$DeleteSelected)
							}),
							_Utils_update(
							defButtonConfig,
							{
								a8: _List_fromArray(
									[
										$author$project$Internals$Icons$chevronsUp($author$project$PageEditor$PageEditor$iconSize)
									]),
								gF: (!config.u) && (!config.bm),
								aR: 'Monter',
								c: $elm$core$Maybe$Just($author$project$PageEditor$PageEditor$SwapLeft)
							}),
							_Utils_update(
							defButtonConfig,
							{
								a8: _List_fromArray(
									[
										$author$project$Internals$Icons$chevronsDown($author$project$PageEditor$PageEditor$iconSize)
									]),
								gF: (!config.u) && (!config.bm),
								aR: 'Descendre',
								c: $elm$core$Maybe$Just($author$project$PageEditor$PageEditor$SwapRight)
							})
						])))
			]));
};
var $author$project$PageEditor$PageEditor$ClearLocalStorage = {$: 49};
var $author$project$PageEditor$PageEditor$CreateNewCell = function (a) {
	return {$: 19, a: a};
};
var $author$project$PageEditor$PageEditor$CreateNewContainer = function (a) {
	return {$: 18, a: a};
};
var $author$project$PageEditor$PageEditor$GetFromLocalStorage = {$: 46};
var $author$project$PageEditor$PageEditor$InsertNewCell = function (a) {
	return {$: 20, a: a};
};
var $author$project$PageEditor$PageEditor$LoadDocument = {$: 58};
var $author$project$PageEditor$PageEditor$LoadLocalStorageDocument = {$: 42};
var $author$project$PageEditor$PageEditor$PutInLocalStorage = {$: 47};
var $author$project$PageEditor$PageEditor$RemoveFromLocalStorage = {$: 48};
var $author$project$PageEditor$PageEditor$SetJsonBuffer = function (a) {
	return {$: 45, a: a};
};
var $author$project$PageEditor$PageEditor$SetLocalStorageKey = function (a) {
	return {$: 43, a: a};
};
var $author$project$PageEditor$PageEditor$SetLocalStorageValue = function (a) {
	return {$: 44, a: a};
};
var $author$project$PageEditor$PageEditor$SwapContainerType = function (a) {
	return {$: 13, a: a};
};
var $author$project$PageEditor$PageEditor$UpdateContainerAttr = function (a) {
	return {$: 14, a: a};
};
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SelectBlock = function (a) {
	return {$: 9, a: a};
};
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$blockLinksPreview = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$wrappedRow,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height(
					A2($mdgriffith$elm_ui$Element$maximum, config.jx - 300, $mdgriffith$elm_ui$Element$fill)),
					$mdgriffith$elm_ui$Element$scrollbarY
				]),
			A3(
				$elm$core$Dict$foldr,
				F3(
					function (id, block, acc) {
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Events$onClick(
										model.bY(
											$author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SelectBlock(id))),
										_Utils_eq(
										model.l,
										$elm$core$Maybe$Just(id)) ? $mdgriffith$elm_ui$Element$Border$shadow(
										{
											ic: 10,
											iA: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
											kD: _Utils_Tuple2(4, 4),
											fJ: 5
										}) : $author$project$Internals$CommonStyleHelpers$noAttr,
										$mdgriffith$elm_ui$Element$padding(7)
									]),
								A5(
									$author$project$Document$DocumentViews$DocumentView$renderBlocksLinksMeta,
									1,
									config,
									{br: $elm$core$Set$empty, bx: $elm$core$Maybe$Nothing, bE: $elm$core$Maybe$Nothing, cW: 0},
									_List_Nil,
									block)),
							acc);
					}),
				_List_Nil,
				model.k));
	});
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Quit = {$: 13};
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SaveAndQuit = {$: 14};
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$bottomInterfaceView = A2(
	$mdgriffith$elm_ui$Element$row,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$spacing(15),
			$mdgriffith$elm_ui$Element$paddingEach(
			{a2: 15, bc: 0, bl: 0, bq: 0})
		]),
	_List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$Input$button,
			$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
			{
				O: $mdgriffith$elm_ui$Element$text('Quitter'),
				aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Quit)
			}),
			A2(
			$mdgriffith$elm_ui$Element$Input$button,
			$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
			{
				O: $mdgriffith$elm_ui$Element$text('Valider et Quitter'),
				aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SaveAndQuit)
			})
		]));
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$AddBlock = {$: 10};
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$LabelPromptInput = function (a) {
	return {$: 4, a: a};
};
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Move = function (a) {
	return {$: 12, a: a};
};
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$RemoveBlock = {$: 11};
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Right = 1;
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SelectingImages = 1;
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SelectingLink = 2;
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SetSelector = function (a) {
	return {$: 0, a: a};
};
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$UpdateLabel = {$: 5};
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ConfirmExternalLink = {$: 7};
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$DocLink = 1;
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ExternalLink = 2;
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ExternalLinkPromptInput = function (a) {
	return {$: 6, a: a};
};
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SetLinkType = function (a) {
	return {$: 8, a: a};
};
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ConfirmDocUrl = function (a) {
	return {$: 1, a: a};
};
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$iconSize = 18;
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$chooseDocView = F5(
	function (model, renderConfig, fileExplorer, zone, logInfo) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$paddingEach(
					{a2: 15, bc: 0, bl: 0, bq: 0}),
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Element$paddingXY, 15, 0)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('Document: ')),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$family(
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$Font$monospace]))
								]),
							function (t) {
								return A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$family(
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$Font$monospace]))
										]),
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text(t)
										]));
							}(
								A2(
									$elm$core$Maybe$withDefault,
									'',
									A2(
										$elm$core$Maybe$map,
										function (url) {
											return A2($elm$core$String$startsWith, '/baseDocumentaire', url) ? url : '';
										},
										A2(
											$elm$core$Maybe$map,
											function ($) {
												return $.d$;
											},
											A2(
												$elm$core$Maybe$andThen,
												function (id) {
													return A2($elm$core$Dict$get, id, model.k);
												},
												model.l))))))
						])),
					A2(
					$author$project$FileExplorer$FileExplorer$view,
					{
						be: logInfo,
						fr: A2($elm$core$Basics$max, 250, renderConfig.jx - 400),
						h: $author$project$FileExplorer$FileExplorer$ReadWrite(1),
						fY: zone
					},
					fileExplorer),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Retour'),
								aI: $elm$core$Maybe$Just(
									model.bY(
										$author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SetSelector(0)))
							}),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Element$paddingXY, 15, 0)
								]),
							A2(
								$mdgriffith$elm_ui$Element$Input$button,
								_Utils_ap(
									$author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(
											$author$project$FileExplorer$FileExplorer$getSelectedDoc(fileExplorer),
											$elm$core$Maybe$Nothing)),
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$alignTop])),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(5)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_Nil,
												$mdgriffith$elm_ui$Element$html(
													$author$project$Internals$Icons$externalLink($author$project$PageEditor$EditorPlugins$BlockLinksPlugin$iconSize))),
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_Nil,
												$mdgriffith$elm_ui$Element$text('Valider'))
											])),
									aI: A2(
										$elm$core$Maybe$map,
										A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ConfirmDocUrl),
										$author$project$FileExplorer$FileExplorer$getSelectedDoc(fileExplorer))
								}))
						]))
				]));
	});
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ConfirmInternalPageUrl = function (a) {
	return {$: 3, a: a};
};
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$chooseInternalPageView = F5(
	function (model, renderConfig, pageTreeEditor, zone, logInfo) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$paddingEach(
					{a2: 15, bc: 0, bl: 0, bq: 0}),
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Element$paddingXY, 15, 0)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('Url: ')),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$family(
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$Font$monospace]))
								]),
							$mdgriffith$elm_ui$Element$text(
								A2(
									$elm$core$Maybe$withDefault,
									'',
									A2(
										$elm$core$Maybe$andThen,
										function (url) {
											return A2($author$project$PageTreeEditor$PageTreeEditor$getPathFromId, pageTreeEditor, url);
										},
										A2(
											$elm$core$Maybe$map,
											function ($) {
												return $.d$;
											},
											A2(
												$elm$core$Maybe$andThen,
												function (id) {
													return A2($elm$core$Dict$get, id, model.k);
												},
												model.l))))))
						])),
					A2(
					$author$project$PageTreeEditor$PageTreeEditor$view,
					{
						be: logInfo,
						fr: A2($elm$core$Basics$max, 250, renderConfig.jx - 400),
						h: 4,
						fY: zone
					},
					pageTreeEditor),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Retour'),
								aI: $elm$core$Maybe$Just(
									model.bY(
										$author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SetSelector(0)))
							}),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Element$paddingXY, 15, 0)
								]),
							A2(
								$mdgriffith$elm_ui$Element$Input$button,
								_Utils_ap(
									$author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(
											$author$project$PageTreeEditor$PageTreeEditor$internalPageSelectedPageInfo(pageTreeEditor),
											$elm$core$Maybe$Nothing)),
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$alignTop])),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(5)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_Nil,
												$mdgriffith$elm_ui$Element$html(
													$author$project$Internals$Icons$externalLink($author$project$PageEditor$EditorPlugins$BlockLinksPlugin$iconSize))),
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_Nil,
												$mdgriffith$elm_ui$Element$text('Valider'))
											])),
									aI: A2(
										$elm$core$Maybe$map,
										A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ConfirmInternalPageUrl),
										A2(
											$elm$core$Maybe$map,
											$TSFoster$elm_uuid$UUID$toString,
											A2(
												$elm$core$Maybe$andThen,
												function ($) {
													return $.kf;
												},
												$author$project$PageTreeEditor$PageTreeEditor$internalPageSelectedPageInfo(pageTreeEditor))))
								}))
						]))
				]));
	});
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SelectImage = function (a) {
	return {$: 2, a: a};
};
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$imagePickerView = F3(
	function (config, renderConfig, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$paddingEach(
					{a2: 15, bc: 0, bl: 0, bq: 0})
				]),
			_List_fromArray(
				[
					A2(
					$author$project$FileExplorer$FileExplorer$view,
					{
						be: config.be,
						fr: A2($elm$core$Basics$max, 250, renderConfig.jx - 400),
						h: $author$project$FileExplorer$FileExplorer$ReadWrite(0),
						fY: config.fY
					},
					config.fd),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							A2($mdgriffith$elm_ui$Element$paddingXY, 15, 0)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Retour'),
								aI: $elm$core$Maybe$Just(
									model.bY(
										$author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SetSelector(0)))
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(
									$author$project$FileExplorer$FileExplorer$getSelectedImage(config.fd),
									$elm$core$Maybe$Nothing)),
							{
								O: $mdgriffith$elm_ui$Element$text('Valider'),
								aI: A2(
									$elm$core$Maybe$map,
									A2(
										$elm$core$Basics$composeL,
										A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SelectImage),
										function ($) {
											return $.fK;
										}),
									$author$project$FileExplorer$FileExplorer$getSelectedImage(config.fd))
							})
						]))
				]));
	});
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$dropDownView = F3(
	function (config, renderConfig, model) {
		var _v0 = model.a$;
		switch (_v0) {
			case 1:
				return A3($author$project$PageEditor$EditorPlugins$BlockLinksPlugin$imagePickerView, config, renderConfig, model);
			case 2:
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$radioRow,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$padding(15),
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							{
								O: $mdgriffith$elm_ui$Element$Input$labelHidden(''),
								dJ: A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SetLinkType),
								g2: _List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$Input$option,
										0,
										$mdgriffith$elm_ui$Element$text('Lien interne')),
										A2(
										$mdgriffith$elm_ui$Element$Input$option,
										1,
										$mdgriffith$elm_ui$Element$text('Lien document')),
										A2(
										$mdgriffith$elm_ui$Element$Input$option,
										2,
										$mdgriffith$elm_ui$Element$text('Lien externe'))
									]),
								hm: $elm$core$Maybe$Just(model.dC)
							}),
							function () {
							var _v1 = model.dC;
							switch (_v1) {
								case 0:
									return A5($author$project$PageEditor$EditorPlugins$BlockLinksPlugin$chooseInternalPageView, model, renderConfig, config.J, config.fY, config.be);
								case 1:
									return A5($author$project$PageEditor$EditorPlugins$BlockLinksPlugin$chooseDocView, model, renderConfig, config.fd, config.fY, config.be);
								default:
									return A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(15),
												$mdgriffith$elm_ui$Element$padding(15)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$row,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$spacing(15)
													]),
												_List_fromArray(
													[
														A2(
														$mdgriffith$elm_ui$Element$Input$text,
														_Utils_ap(
															$author$project$Internals$CommonStyleHelpers$textInputStyle,
															_List_fromArray(
																[
																	$mdgriffith$elm_ui$Element$width(
																	$mdgriffith$elm_ui$Element$px(300))
																])),
														{
															O: A2(
																$mdgriffith$elm_ui$Element$Input$labelLeft,
																_List_fromArray(
																	[$mdgriffith$elm_ui$Element$centerY]),
																A2(
																	$mdgriffith$elm_ui$Element$el,
																	_List_Nil,
																	$mdgriffith$elm_ui$Element$text('Url lien externe: '))),
															dJ: A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ExternalLinkPromptInput),
															dO: $elm$core$Maybe$Nothing,
															dV: _Utils_eq(model.bB, $elm$core$Maybe$Nothing) ? A2(
																$elm$core$Maybe$withDefault,
																'',
																A2(
																	$elm$core$Maybe$map,
																	function (block) {
																		return block.hy ? block.d$ : '';
																	},
																	A2(
																		$elm$core$Maybe$andThen,
																		function (id) {
																			return A2($elm$core$Dict$get, id, model.k);
																		},
																		model.l))) : A2($elm$core$Maybe$withDefault, '', model.bB)
														})
													])),
												A2(
												$mdgriffith$elm_ui$Element$row,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$spacing(15)
													]),
												_List_fromArray(
													[
														A2(
														$mdgriffith$elm_ui$Element$Input$button,
														$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
														{
															O: $mdgriffith$elm_ui$Element$text('Retour'),
															aI: $elm$core$Maybe$Just(
																model.bY(
																	$author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SetSelector(0)))
														}),
														A2(
														$mdgriffith$elm_ui$Element$Input$button,
														$author$project$Internals$CommonStyleHelpers$buttonStyle(
															!_Utils_eq(model.bB, $elm$core$Maybe$Nothing)),
														{
															O: $mdgriffith$elm_ui$Element$text('Valider'),
															aI: A2(
																$elm$core$Maybe$map,
																function (_v2) {
																	return model.bY($author$project$PageEditor$EditorPlugins$BlockLinksPlugin$ConfirmExternalLink);
																},
																model.bB)
														})
													]))
											]));
							}
						}()
						]));
			default:
				return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$topInterfaceView = F3(
	function (config, renderConfig, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$below(
					(!model.a$) ? $mdgriffith$elm_ui$Element$none : A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color(
								A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
								$mdgriffith$elm_ui$Element$width(
								A2(
									$mdgriffith$elm_ui$Element$minimum,
									850,
									A2($mdgriffith$elm_ui$Element$maximum, 920, $mdgriffith$elm_ui$Element$shrink))),
								$mdgriffith$elm_ui$Element$Border$shadow(
								{
									ic: 10,
									iA: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
									kD: _Utils_Tuple2(4, 4),
									fJ: 5
								})
							]),
						A3($author$project$PageEditor$EditorPlugins$BlockLinksPlugin$dropDownView, config, renderConfig, model)))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$text,
							_Utils_ap(
								$author$project$Internals$CommonStyleHelpers$textInputStyle,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(300))
									])),
							{
								O: A2(
									$mdgriffith$elm_ui$Element$Input$labelLeft,
									_List_Nil,
									A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$centerY]),
										$mdgriffith$elm_ui$Element$text('Nom du bloc: '))),
								dJ: A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$LabelPromptInput),
								dO: $elm$core$Maybe$Nothing,
								dV: _Utils_eq(model.b3, $elm$core$Maybe$Nothing) ? A2(
									$elm$core$Maybe$withDefault,
									'',
									A2(
										$elm$core$Maybe$map,
										function ($) {
											return $.O;
										},
										A2(
											$elm$core$Maybe$andThen,
											function (id) {
												return A2($elm$core$Dict$get, id, model.k);
											},
											model.l))) : A2($elm$core$Maybe$withDefault, '', model.b3)
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(model.b3, $elm$core$Maybe$Nothing)),
							{
								O: $mdgriffith$elm_ui$Element$text('Valider'),
								aI: $elm$core$Maybe$Just(
									model.bY($author$project$PageEditor$EditorPlugins$BlockLinksPlugin$UpdateLabel))
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(
								(!_Utils_eq(model.l, $elm$core$Maybe$Nothing)) && (!model.a$)),
							{
								O: $mdgriffith$elm_ui$Element$text('Modifier Image'),
								aI: A2(
									$elm$core$Maybe$map,
									function (_v0) {
										return model.bY(
											$author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SetSelector(1));
									},
									model.l)
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(
								(!_Utils_eq(model.l, $elm$core$Maybe$Nothing)) && (!model.a$)),
							{
								O: $mdgriffith$elm_ui$Element$text('Modifier lien'),
								aI: A2(
									$elm$core$Maybe$map,
									function (_v1) {
										return model.bY(
											$author$project$PageEditor$EditorPlugins$BlockLinksPlugin$SetSelector(2));
									},
									model.l)
							})
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Nouveau bloc'),
								aI: $elm$core$Maybe$Just(
									model.bY($author$project$PageEditor$EditorPlugins$BlockLinksPlugin$AddBlock))
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(model.l, $elm$core$Maybe$Nothing)),
							{
								O: $mdgriffith$elm_ui$Element$text('Supprimer bloc'),
								aI: A2(
									$elm$core$Maybe$map,
									function (_v2) {
										return model.bY($author$project$PageEditor$EditorPlugins$BlockLinksPlugin$RemoveBlock);
									},
									model.l)
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(model.l, $elm$core$Maybe$Nothing)),
							{
								O: $mdgriffith$elm_ui$Element$text('Déplacer à gauche'),
								aI: A2(
									$elm$core$Maybe$map,
									function (_v3) {
										return model.bY(
											$author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Move(0));
									},
									model.l)
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(model.l, $elm$core$Maybe$Nothing)),
							{
								O: $mdgriffith$elm_ui$Element$text('Déplacer à droite'),
								aI: A2(
									$elm$core$Maybe$map,
									function (_v4) {
										return model.bY(
											$author$project$PageEditor$EditorPlugins$BlockLinksPlugin$Move(1));
									},
									model.l)
							})
						]))
				]));
	});
var $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$view = F3(
	function (config, renderConfig, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(15),
					$mdgriffith$elm_ui$Element$padding(15),
					$mdgriffith$elm_ui$Element$alignTop,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A3($author$project$PageEditor$EditorPlugins$BlockLinksPlugin$topInterfaceView, config, renderConfig, model),
					A2($author$project$PageEditor$EditorPlugins$BlockLinksPlugin$blockLinksPreview, renderConfig, model),
					A2($mdgriffith$elm_ui$Element$map, model.bY, $author$project$PageEditor$EditorPlugins$BlockLinksPlugin$bottomInterfaceView)
				]));
	});
var $author$project$PageEditor$EditorPlugins$ContainerEditPlugin$containerLabelToString = function (cl) {
	switch (cl) {
		case 0:
			return 'colonne';
		case 1:
			return 'ligne';
		case 2:
			return 'colonne de texte';
		default:
			return 'bloc réactif';
	}
};
var $author$project$PageEditor$EditorPlugins$ContainerEditPlugin$itemStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(15),
		$mdgriffith$elm_ui$Element$spacing(15),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey7),
		$mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var $author$project$PageEditor$EditorPlugins$ContainerEditPlugin$changeContainerTypeView = function (config) {
	var containerLabel = config.ge.bs;
	return A2(
		$mdgriffith$elm_ui$Element$column,
		$author$project$PageEditor$EditorPlugins$ContainerEditPlugin$itemStyle,
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$Font$bold]),
				$mdgriffith$elm_ui$Element$text('Modification du type de containeur: ')),
				$mdgriffith$elm_ui$Element$text(
				'Transformer ' + ($author$project$PageEditor$EditorPlugins$ContainerEditPlugin$containerLabelToString(containerLabel) + ' en: ')),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(!(!containerLabel)),
						{
							O: A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(10)
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('Colonne')
									])),
							aI: (!(!containerLabel)) ? $elm$core$Maybe$Just(
								config.fO(0)) : $elm$core$Maybe$Nothing
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(containerLabel !== 1),
						{
							O: A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(10)
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('Ligne')
									])),
							aI: (containerLabel !== 1) ? $elm$core$Maybe$Just(
								config.fO(1)) : $elm$core$Maybe$Nothing
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(containerLabel !== 2),
						{
							O: A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(10)
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('Colonne de texte')
									])),
							aI: (containerLabel !== 2) ? $elm$core$Maybe$Just(
								config.fO(2)) : $elm$core$Maybe$Nothing
						})
					]))
			]));
};
var $author$project$PageEditor$EditorPlugins$ContainerEditPlugin$changeContainerWidthView = function (config) {
	var attrs = config.ge.y;
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_Utils_ap($author$project$PageEditor$EditorPlugins$ContainerEditPlugin$itemStyle, _List_Nil),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[$mdgriffith$elm_ui$Element$Font$bold]),
				$mdgriffith$elm_ui$Element$text('Adapter la largeur du containeur au: ')),
				A2(
				$mdgriffith$elm_ui$Element$Input$radioRow,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				{
					O: $mdgriffith$elm_ui$Element$Input$labelHidden(''),
					dJ: config.ml,
					g2: _List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$option,
							_Utils_Tuple2(
								$elm$core$Maybe$Just($author$project$Document$Document$WidthShrink),
								$elm$core$Maybe$Just($author$project$Document$Document$WidthFill)),
							$mdgriffith$elm_ui$Element$text('contenant')),
							A2(
							$mdgriffith$elm_ui$Element$Input$option,
							_Utils_Tuple2(
								$elm$core$Maybe$Just($author$project$Document$Document$WidthFill),
								$elm$core$Maybe$Just($author$project$Document$Document$WidthShrink)),
							$mdgriffith$elm_ui$Element$text('contenu'))
						]),
					hm: A2($elm$core$List$member, $author$project$Document$Document$WidthShrink, attrs) ? $elm$core$Maybe$Just(
						_Utils_Tuple2(
							$elm$core$Maybe$Just($author$project$Document$Document$WidthFill),
							$elm$core$Maybe$Just($author$project$Document$Document$WidthShrink))) : $elm$core$Maybe$Just(
						_Utils_Tuple2(
							$elm$core$Maybe$Just($author$project$Document$Document$WidthShrink),
							$elm$core$Maybe$Just($author$project$Document$Document$WidthFill)))
				})
			]));
};
var $author$project$PageEditor$EditorPlugins$ContainerEditPlugin$containerStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(15),
		$mdgriffith$elm_ui$Element$spacing(15),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
		$mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var $author$project$PageEditor$EditorPlugins$ContainerEditPlugin$view = function (config) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$padding(15),
				$mdgriffith$elm_ui$Element$alignTop
			]),
		A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				$author$project$PageEditor$EditorPlugins$ContainerEditPlugin$containerStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(16)
					])),
			_List_fromArray(
				[
					$author$project$PageEditor$EditorPlugins$ContainerEditPlugin$changeContainerTypeView(config),
					$author$project$PageEditor$EditorPlugins$ContainerEditPlugin$changeContainerWidthView(config),
					A2(
					$mdgriffith$elm_ui$Element$Input$button,
					$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Retour')
								])),
						aI: $elm$core$Maybe$Just(config.js)
					})
				])));
};
var $author$project$PageEditor$EditorPlugins$FichesPlugin$Quit = {$: 6};
var $author$project$PageEditor$EditorPlugins$FichesPlugin$SaveAndQuit = {$: 7};
var $author$project$PageEditor$EditorPlugins$FichesPlugin$FilterByActiv = function (a) {
	return {$: 2, a: a};
};
var $author$project$PageEditor$EditorPlugins$FichesPlugin$formItemStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(15),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey7),
		$mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var $author$project$PageEditor$EditorPlugins$FichesPlugin$selectView = F4(
	function (isFicheData, selected, handler, entry) {
		return A2(
			$mdgriffith$elm_ui$Element$Keyed$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2($mdgriffith$elm_ui$Element$paddingXY, 5, 5),
					$mdgriffith$elm_ui$Element$Events$onClick(handler),
					$mdgriffith$elm_ui$Element$pointer,
					_Utils_eq(
					$elm$core$Maybe$Just(entry),
					selected) ? $mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey4) : $author$project$Internals$CommonStyleHelpers$noAttr,
					isFicheData ? $mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal3) : $mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey2)
				]),
			_Utils_Tuple2(
				entry,
				$mdgriffith$elm_ui$Element$text(entry)));
	});
var $author$project$PageEditor$EditorPlugins$FichesPlugin$activSelector = F2(
	function (_v0, model) {
		var genDirEditor = _v0.gp;
		var activites = $author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeActivs(
			$author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$fichesData(genDirEditor));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$alignTop
					]),
				$author$project$PageEditor$EditorPlugins$FichesPlugin$formItemStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
						]),
					$mdgriffith$elm_ui$Element$text('Activités disponibles')),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Border$width(2),
							$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(350)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(200)),
							$mdgriffith$elm_ui$Element$scrollbars
						]),
					A2(
						$elm$core$List$map,
						function (e) {
							return A4(
								$author$project$PageEditor$EditorPlugins$FichesPlugin$selectView,
								false,
								model.hP,
								$author$project$PageEditor$EditorPlugins$FichesPlugin$FilterByActiv(e),
								e);
						},
						$elm$core$Set$toList(activites)))
				]));
	});
var $author$project$PageEditor$EditorPlugins$FichesPlugin$FilterByCat = function (a) {
	return {$: 1, a: a};
};
var $author$project$PageEditor$EditorPlugins$FichesPlugin$catSelector = F2(
	function (_v0, model) {
		var genDirEditor = _v0.gp;
		var categories = $author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeCats(
			$author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$fichesData(genDirEditor));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$alignTop
					]),
				$author$project$PageEditor$EditorPlugins$FichesPlugin$formItemStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
						]),
					$mdgriffith$elm_ui$Element$text('Catégories disponibles')),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Border$width(2),
							$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(150)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(200)),
							$mdgriffith$elm_ui$Element$scrollbars
						]),
					A2(
						$elm$core$List$map,
						function (e) {
							return A4(
								$author$project$PageEditor$EditorPlugins$FichesPlugin$selectView,
								false,
								model.io,
								$author$project$PageEditor$EditorPlugins$FichesPlugin$FilterByCat(e),
								e);
						},
						$elm$core$Set$toList(categories)))
				]));
	});
var $author$project$PageEditor$EditorPlugins$FichesPlugin$containerStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(15),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
		$mdgriffith$elm_ui$Element$Border$rounded(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
	]);
var $author$project$PageEditor$EditorPlugins$FichesPlugin$All = 0;
var $author$project$PageEditor$EditorPlugins$FichesPlugin$GroupSel = function (a) {
	return {$: 4, a: a};
};
var $author$project$PageEditor$EditorPlugins$FichesPlugin$None = 1;
var $author$project$PageEditor$EditorPlugins$FichesPlugin$ToogleFiche = function (a) {
	return {$: 5, a: a};
};
var $author$project$PageEditor$EditorPlugins$FichesPlugin$checkView = F3(
	function (isChecked, ficheId, entry) {
		return A2(
			$mdgriffith$elm_ui$Element$Keyed$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2($mdgriffith$elm_ui$Element$paddingXY, 5, 5),
					$mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$Events$onClick(
					$author$project$PageEditor$EditorPlugins$FichesPlugin$ToogleFiche(ficheId)),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey4)
						])),
					$mdgriffith$elm_ui$Element$spacing(10)
				]),
			_List_fromArray(
				[
					_Utils_Tuple2(
					entry,
					isChecked ? A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
							]),
						$mdgriffith$elm_ui$Element$html(
							$author$project$Internals$Icons$checkSquare(18))) : A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
							]),
						$mdgriffith$elm_ui$Element$html(
							$author$project$Internals$Icons$square(18)))),
					_Utils_Tuple2(
					entry,
					A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey2)
							]),
						$mdgriffith$elm_ui$Element$text(entry)))
				]));
	});
var $author$project$PageEditor$EditorPlugins$FichesPlugin$ficheSelector = F2(
	function (config, model) {
		var isChecked = function (fId) {
			return A2($elm$core$Set$member, fId, model.ai);
		};
		return A2(
			$mdgriffith$elm_ui$Element$column,
			$author$project$PageEditor$EditorPlugins$FichesPlugin$containerStyle,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						$author$project$PageEditor$EditorPlugins$FichesPlugin$formItemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$Font$bold]),
							$mdgriffith$elm_ui$Element$text('Nom fiche entité')),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Border$width(2),
									$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(480)),
									$mdgriffith$elm_ui$Element$scrollbars
								]),
							A2(
								$elm$core$List$map,
								function (_v1) {
									var k = _v1.a;
									var n = _v1.b;
									return A3(
										$author$project$PageEditor$EditorPlugins$FichesPlugin$checkView,
										isChecked(k),
										k,
										n);
								},
								A2(
									$elm$core$List$map,
									function (_v0) {
										var k = _v0.a;
										var v = _v0.b;
										return _Utils_Tuple2(k, v.kB);
									},
									A2($author$project$PageEditor$EditorPlugins$FichesPlugin$filteredFiches, config, model))))
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						$author$project$PageEditor$EditorPlugins$FichesPlugin$formItemStyle),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$bold,
									$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
								]),
							$mdgriffith$elm_ui$Element$text('Sélection groupée')),
							A2(
							$mdgriffith$elm_ui$Element$Input$radioRow,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							{
								O: $mdgriffith$elm_ui$Element$Input$labelHidden(''),
								dJ: $author$project$PageEditor$EditorPlugins$FichesPlugin$GroupSel,
								g2: _List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$Input$option,
										0,
										$mdgriffith$elm_ui$Element$text('Tout')),
										A2(
										$mdgriffith$elm_ui$Element$Input$option,
										1,
										$mdgriffith$elm_ui$Element$text('Rien'))
									]),
								hm: model.a7
							})
						]))
				]));
	});
var $author$project$PageEditor$EditorPlugins$FichesPlugin$FilterByLabel = function (a) {
	return {$: 3, a: a};
};
var $author$project$PageEditor$EditorPlugins$FichesPlugin$labelSelector = F2(
	function (_v0, model) {
		var genDirEditor = _v0.gp;
		var labels = $author$project$GeneralDirectoryEditor$GeneralDirHelpers$computeLabels(
			$author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$fichesData(genDirEditor));
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$alignTop
					]),
				$author$project$PageEditor$EditorPlugins$FichesPlugin$formItemStyle),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
						]),
					$mdgriffith$elm_ui$Element$text('Labels disponibles')),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Border$width(2),
							$mdgriffith$elm_ui$Element$Border$color($author$project$Internals$CommonStyleHelpers$grey3),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(150)),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(200)),
							$mdgriffith$elm_ui$Element$scrollbars
						]),
					A2(
						$elm$core$List$map,
						function (e) {
							return A4(
								$author$project$PageEditor$EditorPlugins$FichesPlugin$selectView,
								false,
								model.j_,
								$author$project$PageEditor$EditorPlugins$FichesPlugin$FilterByLabel(e),
								e);
						},
						A2(
							$elm$core$List$map,
							function ($) {
								return $.kA;
							},
							labels)))
				]));
	});
var $author$project$PageEditor$EditorPlugins$FichesPlugin$FilterByName = function (a) {
	return {$: 0, a: a};
};
var $author$project$PageEditor$EditorPlugins$FichesPlugin$nameSelector = F2(
	function (_v0, model) {
		var genDirEditor = _v0.gp;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			$author$project$PageEditor$EditorPlugins$FichesPlugin$formItemStyle,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$Input$text,
					_Utils_ap(
						$author$project$Internals$CommonStyleHelpers$textInputStyle,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Element$spacingXY, 0, 15),
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(400))
							])),
					{
						O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
						dJ: $author$project$PageEditor$EditorPlugins$FichesPlugin$FilterByName,
						dO: $elm$core$Maybe$Just(
							A2(
								$mdgriffith$elm_ui$Element$Input$placeholder,
								_List_Nil,
								$mdgriffith$elm_ui$Element$text('Filtrer par nom entité'))),
						dV: A2($elm$core$Maybe$withDefault, '', model.km)
					})
				]));
	});
var $author$project$PageEditor$EditorPlugins$FichesPlugin$view = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$map,
			model.bY,
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$scrollbarY
					]),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$padding(15),
							$mdgriffith$elm_ui$Element$alignTop
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							$author$project$PageEditor$EditorPlugins$FichesPlugin$containerStyle,
							A2($author$project$PageEditor$EditorPlugins$FichesPlugin$nameSelector, config, model)),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_Utils_ap(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(15)
									]),
								$author$project$PageEditor$EditorPlugins$FichesPlugin$containerStyle),
							_List_fromArray(
								[
									A2($author$project$PageEditor$EditorPlugins$FichesPlugin$catSelector, config, model),
									A2($author$project$PageEditor$EditorPlugins$FichesPlugin$activSelector, config, model),
									A2($author$project$PageEditor$EditorPlugins$FichesPlugin$labelSelector, config, model)
								])),
							A2($author$project$PageEditor$EditorPlugins$FichesPlugin$ficheSelector, config, model),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
									{
										O: $mdgriffith$elm_ui$Element$text('Retour'),
										aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$FichesPlugin$Quit)
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(model.ai, $elm$core$Set$empty)),
									{
										O: $mdgriffith$elm_ui$Element$text('Valider'),
										aI: (!_Utils_eq(model.ai, $elm$core$Set$empty)) ? $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$FichesPlugin$SaveAndQuit) : $elm$core$Maybe$Nothing
									})
								]))
						]))));
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$containerStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(15),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
		$mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$ImagesRequested = {$: 0};
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$Quit = {$: 20};
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$Reset = {$: 15};
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$SaveAndQuit = {$: 19};
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$CaptionPrompt = F2(
	function (a, b) {
		return {$: 5, a: a, b: b};
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$DeletePic = function (a) {
	return {$: 8, a: a};
};
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$NoOp = {$: 21};
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$SwapDown = function (a) {
	return {$: 7, a: a};
};
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$SwapUp = function (a) {
	return {$: 6, a: a};
};
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$captionEditorView = F3(
	function (lockedPic, id, imgMeta) {
		var src = imgMeta.fK;
		var caption = imgMeta.f7;
		if (!src.$) {
			var src_ = src.a;
			var isLocked = _Utils_eq(
				$elm$core$Maybe$Just(imgMeta),
				lockedPic);
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey5),
						$mdgriffith$elm_ui$Element$Border$rounded(5),
						$mdgriffith$elm_ui$Element$padding(5),
						$mdgriffith$elm_ui$Element$spacing(15),
						isLocked ? $mdgriffith$elm_ui$Element$alpha(0.7) : $author$project$Internals$CommonStyleHelpers$noAttr
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$padding(5),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
								$mdgriffith$elm_ui$Element$Border$rounded(5)
							]),
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(140)),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(105)),
									$mdgriffith$elm_ui$Element$centerX,
									$mdgriffith$elm_ui$Element$Background$uncropped(
									$author$project$Internals$CommonHelpers$thumbSrc(src_)),
									$mdgriffith$elm_ui$Element$alignLeft
								]),
							$mdgriffith$elm_ui$Element$none)),
						A2(
						$mdgriffith$elm_ui$Element$Input$text,
						_Utils_ap(
							$author$project$Internals$CommonStyleHelpers$textInputStyle,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignLeft])),
						{
							O: $mdgriffith$elm_ui$Element$Input$labelHidden(''),
							dJ: isLocked ? $elm$core$Basics$always($author$project$PageEditor$EditorPlugins$GalleryPlugin$NoOp) : $author$project$PageEditor$EditorPlugins$GalleryPlugin$CaptionPrompt(src_),
							dO: $elm$core$Maybe$Just(
								A2(
									$mdgriffith$elm_ui$Element$Input$placeholder,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text('Legende optionnelle'))),
							dV: A2($elm$core$Maybe$withDefault, '', caption)
						}),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								A2($mdgriffith$elm_ui$Element$paddingXY, 15, 0),
								$mdgriffith$elm_ui$Element$alignRight
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$html(
											$author$project$Internals$Icons$chevronsUp(18))),
									aI: isLocked ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
										$author$project$PageEditor$EditorPlugins$GalleryPlugin$SwapUp(id))
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$html(
											$author$project$Internals$Icons$chevronsDown(18))),
									aI: isLocked ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
										$author$project$PageEditor$EditorPlugins$GalleryPlugin$SwapDown(id))
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$deleteButtonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$html(
											$author$project$Internals$Icons$xSquare(18))),
									aI: isLocked ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
										$author$project$PageEditor$EditorPlugins$GalleryPlugin$DeletePic(id))
								})
							]))
					]));
		} else {
			return $mdgriffith$elm_ui$Element$none;
		}
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$itemStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(15),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey7),
		$mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$galleryEditorView = F2(
	function (config, model) {
		var _v0 = model.q;
		if (_v0.$ === 1) {
			return _List_Nil;
		} else {
			var output = _v0.a;
			return _List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						$author$project$PageEditor$EditorPlugins$GalleryPlugin$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							])),
					_Utils_ap(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$bold,
												$mdgriffith$elm_ui$Element$Font$size(18)
											]),
										$mdgriffith$elm_ui$Element$text('Ajout / modification album')),
										A2(
										$mdgriffith$elm_ui$Element$Input$button,
										_Utils_ap(
											$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$alignRight])),
										{
											O: $mdgriffith$elm_ui$Element$text('Ajouter images'),
											aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$GalleryPlugin$ImagesRequested)
										})
									]))
							]),
						A2(
							$elm$core$List$indexedMap,
							$author$project$PageEditor$EditorPlugins$GalleryPlugin$captionEditorView(model.cH),
							output.jI))),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						$author$project$PageEditor$EditorPlugins$GalleryPlugin$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							])),
					_List_fromArray(
						[
							(!model.fL) ? A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Retour'),
								aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$GalleryPlugin$Reset)
							}) : $mdgriffith$elm_ui$Element$none,
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Annuler'),
								aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$GalleryPlugin$Quit)
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Valider et quitter'),
								aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$GalleryPlugin$SaveAndQuit)
							})
						]))
				]);
		}
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$GalleryTitlePrompt = function (a) {
	return {$: 4, a: a};
};
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$ToogleKeepHqAssets = function (a) {
	return {$: 10, a: a};
};
var $mdgriffith$elm_ui$Element$Input$checkbox = F2(
	function (attrs, _v0) {
		var label = _v0.O;
		var icon = _v0.jC;
		var checked = _v0.it;
		var onChange = _v0.dJ;
		var attributes = _Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(label) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(6),
					$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Events$onClick(
						onChange(!checked))),
					$mdgriffith$elm_ui$Element$Region$announce,
					$mdgriffith$elm_ui$Element$Input$onKeyLookup(
					function (code) {
						return _Utils_eq(code, $mdgriffith$elm_ui$Element$Input$enter) ? $elm$core$Maybe$Just(
							onChange(!checked)) : (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space) ? $elm$core$Maybe$Just(
							onChange(!checked)) : $elm$core$Maybe$Nothing);
					}),
					$mdgriffith$elm_ui$Element$Input$tabindex(0),
					$mdgriffith$elm_ui$Element$pointer,
					$mdgriffith$elm_ui$Element$alignLeft,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			attrs);
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			attributes,
			label,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Internal$Model$Attr(
						A2($elm$html$Html$Attributes$attribute, 'role', 'checkbox')),
						$mdgriffith$elm_ui$Internal$Model$Attr(
						A2(
							$elm$html$Html$Attributes$attribute,
							'aria-checked',
							checked ? 'true' : 'false')),
						$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(label),
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink)
					]),
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[
							icon(checked)
						]))));
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$PickGallery = F3(
	function (a, b, c) {
		return {$: 11, a: a, b: b, c: c};
	});
var $author$project$FileExplorer$FileExplorer$indexPhototheque = function (model) {
	var getPaths = F2(
		function (_v0, files) {
			getPaths:
			while (true) {
				var hq = _v0.a;
				var acc = _v0.b;
				if (!files.b) {
					return _Utils_Tuple2(
						hq,
						$elm$core$List$reverse(acc));
				} else {
					if (!files.a.$) {
						var _v2 = files.a;
						var meta = _v2.a;
						var xs = files.b;
						if (meta.I === 'HQ') {
							var $temp$_v0 = _Utils_Tuple2(true, acc),
								$temp$files = xs;
							_v0 = $temp$_v0;
							files = $temp$files;
							continue getPaths;
						} else {
							var $temp$_v0 = _Utils_Tuple2(hq, acc),
								$temp$files = xs;
							_v0 = $temp$_v0;
							files = $temp$files;
							continue getPaths;
						}
					} else {
						var meta = files.a.a;
						var xs = files.b;
						var $temp$_v0 = _Utils_Tuple2(
							hq,
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									meta.I,
									'/' + A2($elm$core$String$join, '/', meta.K)),
								acc)),
							$temp$files = xs;
						_v0 = $temp$_v0;
						files = $temp$files;
						continue getPaths;
					}
				}
			}
		});
	var _v3 = A2(
		$elm$core$Maybe$map,
		$author$project$FileExplorer$FileExplorer$extractFsItem,
		A2(
			$elm$core$Maybe$andThen,
			$author$project$FileExplorer$FileExplorer$zipToFsItem(
				_List_fromArray(
					['images', 'phototheque'])),
			A2(
				$elm$core$Maybe$map,
				$author$project$FileExplorer$FileExplorer$rewindFilesys,
				A2(
					$author$project$FileExplorer$FileExplorer$getCurrentFilesys,
					$author$project$FileExplorer$FileExplorer$ReadOnly(0),
					model))));
	if ((!_v3.$) && (!_v3.a.$)) {
		var _v4 = _v3.a;
		var galleries = _v4.b;
		return A3(
			$elm$core$List$foldr,
			F2(
				function (g, acc) {
					if (g.$ === 1) {
						var meta = g.a;
						return acc;
					} else {
						var meta = g.a;
						var pictures = g.b;
						return A3(
							$elm$core$Dict$insert,
							meta.I,
							A2(
								getPaths,
								_Utils_Tuple2(false, _List_Nil),
								pictures),
							acc);
					}
				}),
			$elm$core$Dict$empty,
			galleries);
	} else {
		return $elm$core$Dict$empty;
	}
};
var $author$project$Internals$CommonStyleHelpers$teal5 = A3($mdgriffith$elm_ui$Element$rgb255, 110, 215, 211);
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$galleryPickerView = F2(
	function (config, model) {
		var phototheque = $elm$core$Dict$toList(
			$author$project$FileExplorer$FileExplorer$indexPhototheque(config.fd));
		var galleryPreview = function (_v0) {
			var name = _v0.a;
			var _v1 = _v0.b;
			var hq = _v1.a;
			var pics = _v1.b;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(10),
						$mdgriffith$elm_ui$Element$padding(10),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(150)),
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey5),
						$mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6)
							])),
						$mdgriffith$elm_ui$Element$Border$rounded(5),
						$mdgriffith$elm_ui$Element$pointer,
						$mdgriffith$elm_ui$Element$Events$onClick(
						A3($author$project$PageEditor$EditorPlugins$GalleryPlugin$PickGallery, hq, name, pics))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$bold,
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Font$center,
								$mdgriffith$elm_ui$Element$clip
							]),
						$mdgriffith$elm_ui$Element$text(
							$elm_community$string_extra$String$Extra$toSentenceCase(name))),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(140)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(105)),
								$mdgriffith$elm_ui$Element$centerX,
								hq ? $mdgriffith$elm_ui$Element$inFront(
								A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(140)),
											$mdgriffith$elm_ui$Element$height(
											$mdgriffith$elm_ui$Element$px(105))
										]),
									A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$alignRight,
												$mdgriffith$elm_ui$Element$alignBottom,
												A2($mdgriffith$elm_ui$Element$paddingXY, 7, 3),
												$mdgriffith$elm_ui$Element$Font$size(22),
												$mdgriffith$elm_ui$Element$Font$bold,
												$mdgriffith$elm_ui$Element$Font$color(
												A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
												$mdgriffith$elm_ui$Element$Border$rounded(4),
												$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$teal5)
											]),
										$mdgriffith$elm_ui$Element$text('HD')))) : $author$project$Internals$CommonStyleHelpers$noAttr,
								$mdgriffith$elm_ui$Element$Background$image(
								$author$project$Internals$CommonHelpers$thumbSrc(
									A2(
										$elm$core$Maybe$withDefault,
										'',
										A2(
											$elm$core$Maybe$map,
											$elm$core$Tuple$second,
											$elm$core$List$head(pics)))))
							]),
						$mdgriffith$elm_ui$Element$none),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Font$center
							]),
						$mdgriffith$elm_ui$Element$text(
							'Nbr images: ' + $elm$core$String$fromInt(
								$elm$core$List$length(pics))))
					]));
		};
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				$author$project$PageEditor$EditorPlugins$GalleryPlugin$itemStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(15)
					])),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$bold,
							$mdgriffith$elm_ui$Element$Font$size(18)
						]),
					$mdgriffith$elm_ui$Element$text('Utiliser un album existant')),
					A2(
					$mdgriffith$elm_ui$Element$wrappedRow,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					A2($elm$core$List$map, galleryPreview, phototheque))
				]));
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$homeView = F2(
	function (config, model) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					$author$project$PageEditor$EditorPlugins$GalleryPlugin$itemStyle,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						])),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$bold,
								$mdgriffith$elm_ui$Element$Font$size(18)
							]),
						$mdgriffith$elm_ui$Element$text('Créer un nouvel album')),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$text,
								$author$project$Internals$CommonStyleHelpers$textInputStyle,
								{
									O: $mdgriffith$elm_ui$Element$Input$labelHidden(''),
									dJ: $author$project$PageEditor$EditorPlugins$GalleryPlugin$GalleryTitlePrompt,
									dO: $elm$core$Maybe$Just(
										A2(
											$mdgriffith$elm_ui$Element$Input$placeholder,
											_List_Nil,
											$mdgriffith$elm_ui$Element$text('Nom de l\'album'))),
									dV: A2($elm$core$Maybe$withDefault, '', model.a5)
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$checkbox,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								{
									it: model.ba,
									jC: function (b) {
										return b ? A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
												]),
											$mdgriffith$elm_ui$Element$html(
												$author$project$Internals$Icons$checkSquare(18))) : A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$grey1)
												]),
											$mdgriffith$elm_ui$Element$html(
												$author$project$Internals$Icons$square(18)));
									},
									O: A2(
										$mdgriffith$elm_ui$Element$Input$labelLeft,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('images HD')),
									dJ: $author$project$PageEditor$EditorPlugins$GalleryPlugin$ToogleKeepHqAssets
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(
									!_Utils_eq(model.a5, $elm$core$Maybe$Nothing)),
								{
									O: $mdgriffith$elm_ui$Element$text('Nouvel album'),
									aI: (!_Utils_eq(model.a5, $elm$core$Maybe$Nothing)) ? $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$GalleryPlugin$ImagesRequested) : $elm$core$Maybe$Nothing
								})
							]))
					])),
				A2($author$project$PageEditor$EditorPlugins$GalleryPlugin$galleryPickerView, config, model),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					$author$project$PageEditor$EditorPlugins$GalleryPlugin$itemStyle,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						])),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							O: $mdgriffith$elm_ui$Element$text('Annuler'),
							aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$GalleryPlugin$Quit)
						})
					]))
			]);
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$GoToUpload = {$: 17};
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$imageProcessingView = F2(
	function (config, model) {
		var canUpload = _Utils_eq(
			$elm$core$Dict$size(model.b0),
			$elm$core$Dict$size(model.a_));
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					$author$project$PageEditor$EditorPlugins$GalleryPlugin$itemStyle,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(15)
						])),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text('Chargement et mise à  l\'échelle des images...')),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$text(
									A3(
										$elm$core$Basics$apR,
										A3(
											$elm$core$String$padLeft,
											2,
											'0',
											$elm$core$String$fromInt(
												$elm$core$Dict$size(model.b0))),
										$author$project$Internals$CommonStyleHelpers$strCons,
										A2(
											$author$project$Internals$CommonStyleHelpers$strCons,
											' \\ ',
											A3(
												$elm$core$String$padLeft,
												2,
												'0',
												$elm$core$String$fromInt(
													$elm$core$Dict$size(model.a_))))))),
								canUpload ? $author$project$Internals$CommonStyleHelpers$okMark : $mdgriffith$elm_ui$Element$none
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					$author$project$PageEditor$EditorPlugins$GalleryPlugin$itemStyle,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						])),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							O: $mdgriffith$elm_ui$Element$text('Annuler'),
							aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$GalleryPlugin$Reset)
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(canUpload),
						{
							O: $mdgriffith$elm_ui$Element$text('Continuer'),
							aI: canUpload ? $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$GalleryPlugin$GoToUpload) : $elm$core$Maybe$Nothing
						})
					]))
			]);
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$GoToEdit = {$: 18};
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$ManualUpload = function (a) {
	return {$: 16, a: a};
};
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$uploadView = F2(
	function (config, model) {
		var progress = function (_v11) {
			var sent = _v11.a;
			var size = _v11.b;
			var us = _v11.c;
			var p = $elm$core$Basics$floor((100 * sent) / size);
			return _Utils_eq(
				us,
				$elm$core$Maybe$Just($author$project$Internals$CommonHelpers$UploadSuccessful)) ? 100 : A2($elm$core$Basics$min, 99, p);
		};
		var canEdit = A2(
			$elm$core$List$all,
			function (us) {
				return _Utils_eq(
					us,
					$elm$core$Maybe$Just($author$project$Internals$CommonHelpers$UploadSuccessful));
			},
			A3(
				$elm$core$Dict$foldr,
				F3(
					function (_v9, _v10, acc) {
						var us = _v10.c;
						return A2($elm$core$List$cons, us, acc);
					}),
				_List_Nil,
				model.j));
		var progressTotal = function (t) {
			return canEdit ? 100 : A2($elm$core$Basics$min, 99, t);
		}(
			$elm$core$Basics$round(
				function (_v8) {
					var tsent = _v8.a;
					var tsize = _v8.b;
					return (100 * tsent) / tsize;
				}(
					A3(
						$elm$core$Dict$foldr,
						F3(
							function (k, _v6, _v7) {
								var sent = _v6.a;
								var size = _v6.b;
								var totalSent = _v7.a;
								var totalSize = _v7.b;
								return _Utils_Tuple2(sent + totalSent, size + totalSize);
							}),
						_Utils_Tuple2(0, 0),
						model.j))));
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_Utils_ap(
					$author$project$PageEditor$EditorPlugins$GalleryPlugin$itemStyle,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(15)
						])),
				_Utils_ap(
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$bold,
									$mdgriffith$elm_ui$Element$Font$size(18)
								]),
							$mdgriffith$elm_ui$Element$text('Mise en ligne')),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(25)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(140))
										]),
									$mdgriffith$elm_ui$Element$text('Transfert album: ')),
									$author$project$Internals$CommonStyleHelpers$progressBar(progressTotal)
								]))
						]),
					A2(
						$elm$core$List$map,
						function (p) {
							return A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(15)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$padding(5),
												$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
												$mdgriffith$elm_ui$Element$Border$rounded(5)
											]),
										A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(140)),
													$mdgriffith$elm_ui$Element$height(
													$mdgriffith$elm_ui$Element$px(105)),
													$mdgriffith$elm_ui$Element$centerX,
													$mdgriffith$elm_ui$Element$Background$uncropped(p.iI),
													$mdgriffith$elm_ui$Element$alignLeft
												]),
											$mdgriffith$elm_ui$Element$none)),
										A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$alignTop,
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$teal1)
													]),
												$mdgriffith$elm_ui$Element$text(p.E)),
												$mdgriffith$elm_ui$Element$text(
												'Taille originale: ' + A2(
													$elm$core$Maybe$withDefault,
													'Erreur',
													A2(
														$elm$core$Maybe$map,
														$basti1302$elm_human_readable_filesize$Filesize$format,
														A2($elm$core$Dict$get, p.E, model.b0)))),
												$mdgriffith$elm_ui$Element$text(
												'Nouvelle taille: ' + $basti1302$elm_human_readable_filesize$Filesize$format(p.fJ)),
												A2(
												$mdgriffith$elm_ui$Element$row,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$spacing(15)
													]),
												_List_fromArray(
													[
														function () {
														var _v0 = A2($elm$core$Dict$get, p.E, model.j);
														if (((!_v0.$) && (!_v0.a.c.$)) && (_v0.a.c.a.$ === 1)) {
															var _v1 = _v0.a;
															var e = _v1.c.a.a;
															return A2(
																$mdgriffith$elm_ui$Element$row,
																_List_fromArray(
																	[
																		$mdgriffith$elm_ui$Element$spacing(5)
																	]),
																_List_fromArray(
																	[
																		$mdgriffith$elm_ui$Element$text('Echec transfert: '),
																		A2(
																		$mdgriffith$elm_ui$Element$el,
																		_List_fromArray(
																			[
																				$mdgriffith$elm_ui$Element$Font$color(
																				A3($mdgriffith$elm_ui$Element$rgb255, 217, 83, 79))
																			]),
																		$mdgriffith$elm_ui$Element$text(e))
																	]));
														} else {
															return $mdgriffith$elm_ui$Element$text(
																'Transfert: ' + A2(
																	$author$project$Internals$CommonStyleHelpers$strCons,
																	'%',
																	A3(
																		$elm$core$String$padLeft,
																		2,
																		'0',
																		$elm$core$String$fromInt(
																			A2(
																				$elm$core$Maybe$withDefault,
																				0,
																				A2(
																					$elm$core$Maybe$map,
																					progress,
																					A2($elm$core$Dict$get, p.E, model.j)))))));
														}
													}(),
														function () {
														var _v2 = A2($elm$core$Dict$get, p.E, model.j);
														if ((!_v2.$) && (!_v2.a.c.$)) {
															if (_v2.a.c.a.$ === 1) {
																var _v3 = _v2.a;
																var e = _v3.c.a.a;
																return A2(
																	$mdgriffith$elm_ui$Element$Input$button,
																	$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
																	{
																		O: $mdgriffith$elm_ui$Element$text('Réessayer'),
																		aI: $elm$core$Maybe$Just(
																			$author$project$PageEditor$EditorPlugins$GalleryPlugin$ManualUpload(p.E))
																	});
															} else {
																var _v4 = _v2.a;
																var _v5 = _v4.c.a;
																return $author$project$Internals$CommonStyleHelpers$okMark;
															}
														} else {
															return $mdgriffith$elm_ui$Element$none;
														}
													}()
													]))
											]))
									]));
						},
						$elm$core$Dict$values(model.a_)))),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_Utils_ap(
					$author$project$PageEditor$EditorPlugins$GalleryPlugin$itemStyle,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						])),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							O: $mdgriffith$elm_ui$Element$text('Annuler'),
							aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$GalleryPlugin$Reset)
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(canEdit),
						{
							O: $mdgriffith$elm_ui$Element$text('Continuer'),
							aI: canEdit ? $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$GalleryPlugin$GoToEdit) : $elm$core$Maybe$Nothing
						})
					]))
			]);
	});
var $author$project$PageEditor$EditorPlugins$GalleryPlugin$view = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$map,
			model.bY,
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$scrollbarY,
						$mdgriffith$elm_ui$Element$padding(15)
					]),
				A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$alignTop,
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(800))
							]),
						$author$project$PageEditor$EditorPlugins$GalleryPlugin$containerStyle),
					function () {
						var _v0 = model.cg;
						switch (_v0) {
							case 0:
								return A2($author$project$PageEditor$EditorPlugins$GalleryPlugin$homeView, config, model);
							case 2:
								return A2($author$project$PageEditor$EditorPlugins$GalleryPlugin$uploadView, config, model);
							case 1:
								return A2($author$project$PageEditor$EditorPlugins$GalleryPlugin$imageProcessingView, config, model);
							default:
								return A2($author$project$PageEditor$EditorPlugins$GalleryPlugin$galleryEditorView, config, model);
						}
					}())));
	});
var $author$project$PageEditor$EditorPlugins$ImagePlugin$ChangeMode = function (a) {
	return {$: 3, a: a};
};
var $author$project$PageEditor$EditorPlugins$ImagePlugin$ImagePicker = 1;
var $author$project$PageEditor$EditorPlugins$ImagePlugin$Quit = {$: 5};
var $author$project$PageEditor$EditorPlugins$ImagePlugin$SaveAndQuit = {$: 4};
var $author$project$PageEditor$EditorPlugins$ImagePlugin$SetAlignment = function (a) {
	return {$: 0, a: a};
};
var $author$project$PageEditor$EditorPlugins$ImagePlugin$SetCaption = function (a) {
	return {$: 1, a: a};
};
var $author$project$PageEditor$EditorPlugins$ImagePlugin$iconSize = 18;
var $author$project$PageEditor$EditorPlugins$ImagePlugin$imageAttributeEditorView = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(15),
				$mdgriffith$elm_ui$Element$Font$size(16),
				$mdgriffith$elm_ui$Element$padding(15),
				$mdgriffith$elm_ui$Element$alignTop
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text('Insérer / Modifier une Image:'),
				$mdgriffith$elm_ui$Element$text('Alignement: '),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						A2($author$project$Internals$CommonStyleHelpers$toogleButtonStyle, model.bQ === 2, true),
						{
							O: A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$html(
									$author$project$Internals$Icons$alignLeft($author$project$PageEditor$EditorPlugins$ImagePlugin$iconSize))),
							aI: $elm$core$Maybe$Just(
								$author$project$PageEditor$EditorPlugins$ImagePlugin$SetAlignment(2))
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						A2($author$project$Internals$CommonStyleHelpers$toogleButtonStyle, model.bQ === 1, true),
						{
							O: A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$html(
									$author$project$Internals$Icons$alignCenter($author$project$PageEditor$EditorPlugins$ImagePlugin$iconSize))),
							aI: $elm$core$Maybe$Just(
								$author$project$PageEditor$EditorPlugins$ImagePlugin$SetAlignment(1))
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						A2($author$project$Internals$CommonStyleHelpers$toogleButtonStyle, !model.bQ, true),
						{
							O: A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$html(
									$author$project$Internals$Icons$alignRight($author$project$PageEditor$EditorPlugins$ImagePlugin$iconSize))),
							aI: $elm$core$Maybe$Just(
								$author$project$PageEditor$EditorPlugins$ImagePlugin$SetAlignment(0))
						})
					])),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$text,
						$author$project$Internals$CommonStyleHelpers$textInputStyle,
						{
							O: A2(
								$mdgriffith$elm_ui$Element$Input$labelLeft,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$centerY]),
								A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(110))
										]),
									$mdgriffith$elm_ui$Element$text('Légende: '))),
							dJ: $author$project$PageEditor$EditorPlugins$ImagePlugin$SetCaption,
							dO: $elm$core$Maybe$Nothing,
							dV: A2($elm$core$Maybe$withDefault, '', model.b6)
						})
					])),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						function () {
						var _v0 = model.b7;
						if (_v0.$ === 1) {
							return $mdgriffith$elm_ui$Element$none;
						} else {
							return $mdgriffith$elm_ui$Element$text('Aperçu: ');
						}
					}(),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							O: function () {
								var _v1 = model.b7;
								if (_v1.$ === 1) {
									return A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Nouvelle Image'));
								} else {
									return A2(
										$mdgriffith$elm_ui$Element$el,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Remplacer Image'));
								}
							}(),
							aI: $elm$core$Maybe$Just(
								$author$project$PageEditor$EditorPlugins$ImagePlugin$ChangeMode(1))
						})
					])),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						A2($mdgriffith$elm_ui$Element$maximum, 650, $mdgriffith$elm_ui$Element$fill)),
						$mdgriffith$elm_ui$Element$height(
						A2($mdgriffith$elm_ui$Element$maximum, 525, $mdgriffith$elm_ui$Element$fill)),
						$mdgriffith$elm_ui$Element$scrollbars
					]),
				A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerY, $mdgriffith$elm_ui$Element$centerX]),
					{
						ei: A2($elm$core$Maybe$withDefault, '', model.b6),
						fK: A2(
							$elm$core$Maybe$withDefault,
							'',
							A2(
								$elm$core$Maybe$map,
								function (src) {
									if (src.$ === 1) {
										var base64 = src.b;
										return base64;
									} else {
										var url = src.a;
										return url;
									}
								},
								A2(
									$elm$core$Maybe$map,
									function ($) {
										return $.fK;
									},
									model.b7)))
					})),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							O: $mdgriffith$elm_ui$Element$text('Quitter'),
							aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$ImagePlugin$Quit)
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							O: $mdgriffith$elm_ui$Element$text('Valider et Quitter'),
							aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$ImagePlugin$SaveAndQuit)
						})
					]))
			]));
};
var $author$project$PageEditor$EditorPlugins$ImagePlugin$SelectImage = function (a) {
	return {$: 2, a: a};
};
var $author$project$PageEditor$EditorPlugins$ImagePlugin$imagePickerView = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$paddingEach(
					{a2: 15, bc: 0, bl: 0, bq: 0})
				]),
			_List_fromArray(
				[
					A2(
					$author$project$FileExplorer$FileExplorer$view,
					{
						be: config.be,
						fr: config.fr - 50,
						h: $author$project$FileExplorer$FileExplorer$ReadWrite(0),
						fY: config.fY
					},
					config.fd),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							A2($mdgriffith$elm_ui$Element$paddingXY, 15, 0)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Retour'),
								aI: $elm$core$Maybe$Just(
									model.bY(
										$author$project$PageEditor$EditorPlugins$ImagePlugin$ChangeMode(0)))
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(
									$author$project$FileExplorer$FileExplorer$getSelectedImage(config.fd),
									$elm$core$Maybe$Nothing)),
							{
								O: $mdgriffith$elm_ui$Element$text('Valider'),
								aI: A2(
									$elm$core$Maybe$map,
									A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$EditorPlugins$ImagePlugin$SelectImage),
									$author$project$FileExplorer$FileExplorer$getSelectedImage(config.fd))
							})
						]))
				]));
	});
var $author$project$PageEditor$EditorPlugins$ImagePlugin$view = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$scrollbarY
				]),
			_List_fromArray(
				[
					function () {
					var _v0 = model.h;
					if (!_v0) {
						return A2(
							$mdgriffith$elm_ui$Element$map,
							model.bY,
							$author$project$PageEditor$EditorPlugins$ImagePlugin$imageAttributeEditorView(model));
					} else {
						return A2($author$project$PageEditor$EditorPlugins$ImagePlugin$imagePickerView, config, model);
					}
				}()
				]));
	});
var $author$project$PageEditor$EditorPlugins$NewDocPlugin$view = function (config) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size(16),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$alignTop,
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$padding(15)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$Border$width(1),
						$mdgriffith$elm_ui$Element$Border$color(
						A4($mdgriffith$elm_ui$Element$rgba, 0.9, 0.9, 0.9, 1)),
						$mdgriffith$elm_ui$Element$padding(15)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(18)
							]),
						$mdgriffith$elm_ui$Element$text('Nouveau conteneur')),
						A2(
						$mdgriffith$elm_ui$Element$wrappedRow,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Créer colonne')
											])),
									aI: $elm$core$Maybe$Just(
										config.e2(0))
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Créer ligne')
											])),
									aI: $elm$core$Maybe$Just(
										config.e2(1))
								}),
								(!config.aL) ? $mdgriffith$elm_ui$Element$none : A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Créer colonne de texte')
											])),
									aI: $elm$core$Maybe$Just(
										config.e2(2))
								})
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$padding(15),
						$mdgriffith$elm_ui$Element$Border$width(1),
						$mdgriffith$elm_ui$Element$Border$color(
						A4($mdgriffith$elm_ui$Element$rgba, 0.9, 0.9, 0.9, 1))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(18)
							]),
						$mdgriffith$elm_ui$Element$text('Nouvelle cellule')),
						A2(
						$mdgriffith$elm_ui$Element$wrappedRow,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Bloc de texte')
											])),
									aI: $elm$core$Maybe$Just(
										config.bV($author$project$PageEditor$Internals$DocumentEditorHelpers$TextBlockPlugin))
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Zone blocs de liens')
											])),
									aI: $elm$core$Maybe$Just(
										config.bV($author$project$PageEditor$Internals$DocumentEditorHelpers$BlockLinksPlugin))
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Zone de fiches')
											])),
									aI: $elm$core$Maybe$Just(
										config.bV($author$project$PageEditor$Internals$DocumentEditorHelpers$FichesPlugin))
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Image')
											])),
									aI: $elm$core$Maybe$Just(
										config.bV($author$project$PageEditor$Internals$DocumentEditorHelpers$ImagePlugin))
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Video')
											])),
									aI: $elm$core$Maybe$Just(
										config.bV($author$project$PageEditor$Internals$DocumentEditorHelpers$VideoPlugin))
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Tableau')
											])),
									aI: $elm$core$Maybe$Just(
										config.bV($author$project$PageEditor$Internals$DocumentEditorHelpers$TablePlugin))
								}),
								(!config.aL) ? $mdgriffith$elm_ui$Element$none : A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Bandeau liens images')
											])),
									aI: $elm$core$Maybe$Just(
										config.bV($author$project$PageEditor$Internals$DocumentEditorHelpers$PictureLinksPlugin))
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Album photothèque')
											])),
									aI: $elm$core$Maybe$Just(
										config.bV($author$project$PageEditor$Internals$DocumentEditorHelpers$GalleryPlugin))
								}),
								(!config.aL) ? $mdgriffith$elm_ui$Element$none : A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Zone actualités')
											])),
									aI: $elm$core$Maybe$Just(
										config.a9('NewsBlock'))
								}),
								(!config.aL) ? $mdgriffith$elm_ui$Element$none : A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Mini calendrier')
											])),
									aI: $elm$core$Maybe$Just(
										config.a9('CalendarWidget'))
								}),
								(!config.aL) ? $mdgriffith$elm_ui$Element$none : A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Calendrier animation')
											])),
									aI: $elm$core$Maybe$Just(
										config.a9('Calendar'))
								}),
								(!config.aL) ? $mdgriffith$elm_ui$Element$none : A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Calendrier salle Murol')
											])),
									aI: $elm$core$Maybe$Just(
										config.a9('CalendarSalleMurol'))
								}),
								(!config.aL) ? $mdgriffith$elm_ui$Element$none : A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Calendrier salle Beaune')
											])),
									aI: $elm$core$Maybe$Just(
										config.a9('CalendarSalleBeaune'))
								}),
								(!config.aL) ? $mdgriffith$elm_ui$Element$none : A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Météo')
											])),
									aI: $elm$core$Maybe$Just(
										config.a9('WeatherWidget'))
								}),
								(!config.aL) ? $mdgriffith$elm_ui$Element$none : A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Panoramique aérien')
											])),
									aI: $elm$core$Maybe$Just(
										config.a9('DronePanorama'))
								}),
								(!config.aL) ? $mdgriffith$elm_ui$Element$none : A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Murol infos')
											])),
									aI: $elm$core$Maybe$Just(
										config.a9('MurolInfos'))
								}),
								(!config.aL) ? $mdgriffith$elm_ui$Element$none : A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Délibérations')
											])),
									aI: $elm$core$Maybe$Just(
										config.a9('Delibs'))
								}),
								(!config.aL) ? $mdgriffith$elm_ui$Element$none : A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Bulletins municipaux')
											])),
									aI: $elm$core$Maybe$Just(
										config.a9('Bulletins'))
								})
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Element$Input$button,
				$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
				{
					O: A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(10)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('Retour')
							])),
					aI: $elm$core$Maybe$Just(config.js)
				})
			]));
};
var $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$MovePicDown = {$: 7};
var $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$MovePicUp = {$: 6};
var $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$OpenPicker = {$: 1};
var $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$Quit = {$: 10};
var $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$RemovePic = {$: 8};
var $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$SaveAndQuit = {$: 11};
var $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$SetUrl = {$: 5};
var $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$UrlInput = function (a) {
	return {$: 4, a: a};
};
var $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$containerStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(15),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
		$mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$ClosePicker = {$: 2};
var $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$NewPicLink = function (a) {
	return {$: 3, a: a};
};
var $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$imagePickerView = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$paddingEach(
					{a2: 15, bc: 0, bl: 0, bq: 0})
				]),
			_List_fromArray(
				[
					A2(
					$author$project$FileExplorer$FileExplorer$view,
					{
						be: config.be,
						fr: 500,
						h: $author$project$FileExplorer$FileExplorer$ReadWrite(0),
						fY: config.fY
					},
					config.fd),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15),
							A2($mdgriffith$elm_ui$Element$paddingXY, 15, 0)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Retour'),
								aI: $elm$core$Maybe$Just(
									model.bY($author$project$PageEditor$EditorPlugins$PictureLinksPlugin$ClosePicker))
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(
									$author$project$FileExplorer$FileExplorer$getSelectedImage(config.fd),
									$elm$core$Maybe$Nothing)),
							{
								O: $mdgriffith$elm_ui$Element$text('Valider'),
								aI: A2(
									$elm$core$Maybe$map,
									A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$NewPicLink),
									$author$project$FileExplorer$FileExplorer$getSelectedImage(config.fd))
							})
						]))
				]));
	});
var $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$itemStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(15),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey7),
		$mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$SelectPic = function (a) {
	return {$: 9, a: a};
};
var $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$picLinkListView = F2(
	function (mbSelected, xs) {
		var picLinkView = function (_v1) {
			var uuid = _v1.fS;
			var picLink = _v1.ce;
			return A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$pointer,
						$mdgriffith$elm_ui$Element$padding(7),
						$mdgriffith$elm_ui$Element$Border$rounded(5),
						_Utils_eq(
						$elm$core$Maybe$Just(
							$TSFoster$elm_uuid$UUID$toString(uuid)),
						mbSelected) ? $mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey5) : $author$project$Internals$CommonStyleHelpers$noAttr,
						$mdgriffith$elm_ui$Element$mouseOver(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6)
							])),
						$mdgriffith$elm_ui$Element$Events$onClick(
						$author$project$PageEditor$EditorPlugins$PictureLinksPlugin$SelectPic(
							$TSFoster$elm_uuid$UUID$toString(uuid)))
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(100)),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(100)),
								$mdgriffith$elm_ui$Element$Background$uncropped(
								function () {
									var _v0 = picLink.jJ.fK;
									if (!_v0.$) {
										var s = _v0.a;
										return s;
									} else {
										return '';
									}
								}())
							]),
						$mdgriffith$elm_ui$Element$none),
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_Nil,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(
								(picLink.d$ === '') ? 'pas de lien associé' : picLink.d$)
							]))
					]));
		};
		return A2($elm$core$List$map, picLinkView, xs);
	});
var $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$view = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$scrollbarY,
					$mdgriffith$elm_ui$Element$padding(15),
					$mdgriffith$elm_ui$Element$spacing(15)
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						$author$project$PageEditor$EditorPlugins$PictureLinksPlugin$containerStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15)
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$row,
							_Utils_ap(
								$author$project$PageEditor$EditorPlugins$PictureLinksPlugin$itemStyle,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(15),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$below(
										(!model.c5) ? $mdgriffith$elm_ui$Element$none : A2(
											$mdgriffith$elm_ui$Element$el,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Background$color(
													A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
													$mdgriffith$elm_ui$Element$width(
													A2(
														$mdgriffith$elm_ui$Element$minimum,
														850,
														A2($mdgriffith$elm_ui$Element$maximum, 920, $mdgriffith$elm_ui$Element$shrink))),
													$mdgriffith$elm_ui$Element$Border$shadow(
													{
														ic: 10,
														iA: A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.45),
														kD: _Utils_Tuple2(4, 4),
														fJ: 5
													})
												]),
											A2($author$project$PageEditor$EditorPlugins$PictureLinksPlugin$imagePickerView, config, model)))
									])),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
									{
										O: $mdgriffith$elm_ui$Element$text('Nouveau lien image'),
										aI: $elm$core$Maybe$Just(
											model.bY($author$project$PageEditor$EditorPlugins$PictureLinksPlugin$OpenPicker))
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(model.L, $elm$core$Maybe$Nothing)),
									{
										O: $mdgriffith$elm_ui$Element$text('Monter'),
										aI: A2(
											$elm$core$Maybe$map,
											$elm$core$Basics$always(
												model.bY($author$project$PageEditor$EditorPlugins$PictureLinksPlugin$MovePicUp)),
											model.L)
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(model.L, $elm$core$Maybe$Nothing)),
									{
										O: $mdgriffith$elm_ui$Element$text('Descendre'),
										aI: A2(
											$elm$core$Maybe$map,
											$elm$core$Basics$always(
												model.bY($author$project$PageEditor$EditorPlugins$PictureLinksPlugin$MovePicDown)),
											model.L)
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$buttonStyle(
										!_Utils_eq(model.L, $elm$core$Maybe$Nothing)),
									{
										O: $mdgriffith$elm_ui$Element$text('Supprimer'),
										aI: A2(
											$elm$core$Maybe$map,
											$elm$core$Basics$always(
												model.bY($author$project$PageEditor$EditorPlugins$PictureLinksPlugin$RemovePic)),
											model.L)
									})
								])),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_Utils_ap(
								$author$project$PageEditor$EditorPlugins$PictureLinksPlugin$itemStyle,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(15)
									])),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$text,
									_Utils_ap(
										$author$project$Internals$CommonStyleHelpers$textInputStyle,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(400)),
												$mdgriffith$elm_ui$Element$spacing(10)
											])),
									{
										O: A2(
											$mdgriffith$elm_ui$Element$Input$labelLeft,
											_List_fromArray(
												[$mdgriffith$elm_ui$Element$centerY]),
											$mdgriffith$elm_ui$Element$text('Lien associé')),
										dJ: A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$EditorPlugins$PictureLinksPlugin$UrlInput),
										dO: $elm$core$Maybe$Nothing,
										dV: A2($elm$core$Maybe$withDefault, '', model.bO)
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$buttonStyle(
										(!_Utils_eq(model.bO, $elm$core$Maybe$Nothing)) && (!_Utils_eq(model.L, $elm$core$Maybe$Nothing))),
									{
										O: $mdgriffith$elm_ui$Element$text('Valider'),
										aI: ((!_Utils_eq(model.bO, $elm$core$Maybe$Nothing)) && (!_Utils_eq(model.L, $elm$core$Maybe$Nothing))) ? $elm$core$Maybe$Just(
											model.bY($author$project$PageEditor$EditorPlugins$PictureLinksPlugin$SetUrl)) : $elm$core$Maybe$Nothing
									})
								])),
							A2(
							$mdgriffith$elm_ui$Element$map,
							model.bY,
							function () {
								var _v0 = model.e;
								if (!_v0.b) {
									return $mdgriffith$elm_ui$Element$none;
								} else {
									return A2(
										$mdgriffith$elm_ui$Element$column,
										_Utils_ap(
											$author$project$PageEditor$EditorPlugins$PictureLinksPlugin$itemStyle,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$spacing(15),
													$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
												])),
										A2($author$project$PageEditor$EditorPlugins$PictureLinksPlugin$picLinkListView, model.L, model.e));
								}
							}())
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(15)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Retour'),
								aI: $elm$core$Maybe$Just(
									model.bY($author$project$PageEditor$EditorPlugins$PictureLinksPlugin$Quit))
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(
								!_Utils_eq(model.e, _List_Nil)),
							{
								O: $mdgriffith$elm_ui$Element$text('Valider et quitter'),
								aI: (!_Utils_eq(model.e, _List_Nil)) ? $elm$core$Maybe$Just(
									model.bY($author$project$PageEditor$EditorPlugins$PictureLinksPlugin$SaveAndQuit)) : $elm$core$Maybe$Nothing
							})
						]))
				]));
	});
var $author$project$PageEditor$EditorPlugins$TablePlugin$StyleSelectorClickOff = {$: 4};
var $author$project$PageEditor$EditorPlugins$TablePlugin$SwapDisplayMode = {$: 11};
var $author$project$PageEditor$EditorPlugins$TablePlugin$displayOnlyView = function (model) {
	var interfaceView = A2(
		$mdgriffith$elm_ui$Element$column,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							O: $mdgriffith$elm_ui$Element$text('Modifier'),
							aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$TablePlugin$SwapDisplayMode)
						})
					]))
			]));
	var dataForTable = $elm$core$Array$toList(model.iU);
	var columns = A2(
		$elm$core$List$map,
		function (ci) {
			return {
				ju: $mdgriffith$elm_ui$Element$none,
				mp: F2(
					function (ri, row) {
						return A2(
							$mdgriffith$elm_ui$Element$el,
							function (s) {
								return A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
									s);
							}(
								A2(
									$elm$core$Maybe$withDefault,
									_List_Nil,
									A2(
										$elm$core$Maybe$map,
										function ($) {
											return $.iG;
										},
										A2($elm$core$Dict$get, model.al, $author$project$Document$DocumentViews$StyleSheets$tableStyles)))),
							A2(
								$mdgriffith$elm_ui$Element$el,
								_Utils_ap(
									A2(
										$elm$core$Maybe$withDefault,
										function (_v0) {
											return _List_Nil;
										},
										A2(
											$elm$core$Maybe$map,
											function ($) {
												return $.iq;
											},
											A2($elm$core$Dict$get, model.al, $author$project$Document$DocumentViews$StyleSheets$tableStyles)))(ri),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Element$paddingXY, 15, 5),
											$mdgriffith$elm_ui$Element$height(
											A2($mdgriffith$elm_ui$Element$minimum, 30, $mdgriffith$elm_ui$Element$fill))
										])),
								A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_List_Nil,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text(
											A2(
												$elm$core$Maybe$withDefault,
												'',
												A2($elm$core$Array$get, ci, row)))
										]))));
					}),
				mt: $mdgriffith$elm_ui$Element$fill
			};
		},
		A2($elm$core$List$range, 0, model.kp - 1));
	var tableView = model.cj ? A2(
		$mdgriffith$elm_ui$Element$indexedTable,
		A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.lV;
				},
				A2($elm$core$Dict$get, model.al, $author$project$Document$DocumentViews$StyleSheets$tableStyles))),
		{iC: columns, iU: dataForTable}) : $mdgriffith$elm_ui$Element$none;
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(15),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[interfaceView, tableView]));
};
var $author$project$PageEditor$EditorPlugins$TablePlugin$AddNew = function (a) {
	return {$: 10, a: a};
};
var $author$project$PageEditor$EditorPlugins$TablePlugin$CellFocused = function (a) {
	return {$: 7, a: a};
};
var $author$project$PageEditor$EditorPlugins$TablePlugin$DataInput = F2(
	function (a, b) {
		return {$: 6, a: a, b: b};
	});
var $author$project$PageEditor$EditorPlugins$TablePlugin$Down = 1;
var $author$project$PageEditor$EditorPlugins$TablePlugin$InitializeTable = {$: 5};
var $author$project$PageEditor$EditorPlugins$TablePlugin$Left = 2;
var $author$project$PageEditor$EditorPlugins$TablePlugin$Quit = {$: 13};
var $author$project$PageEditor$EditorPlugins$TablePlugin$RemoveSelectedCol = {$: 9};
var $author$project$PageEditor$EditorPlugins$TablePlugin$RemoveSelectedRow = {$: 8};
var $author$project$PageEditor$EditorPlugins$TablePlugin$Right = 3;
var $author$project$PageEditor$EditorPlugins$TablePlugin$SaveAndQuit = {$: 12};
var $author$project$PageEditor$EditorPlugins$TablePlugin$SetNbrCols = function (a) {
	return {$: 1, a: a};
};
var $author$project$PageEditor$EditorPlugins$TablePlugin$SetNbrRows = function (a) {
	return {$: 0, a: a};
};
var $author$project$PageEditor$EditorPlugins$TablePlugin$Up = 0;
var $author$project$PageEditor$EditorPlugins$TablePlugin$focusIsValid = F2(
	function (mbFocus, data) {
		return A2(
			$elm$core$Maybe$withDefault,
			false,
			A2(
				$elm$core$Maybe$map,
				function (_v1) {
					return true;
				},
				A2(
					$elm$core$Maybe$andThen,
					function (_v0) {
						var i = _v0.a;
						var j = _v0.b;
						return A2(
							$elm$core$Maybe$map,
							function (row) {
								return A2($elm$core$Array$get, j, row);
							},
							A2($elm$core$Array$get, i, data));
					},
					mbFocus)));
	});
var $author$project$PageEditor$EditorPlugins$TablePlugin$SetStyle = function (a) {
	return {$: 2, a: a};
};
var $author$project$PageEditor$EditorPlugins$TablePlugin$StyleSelectorClick = {$: 3};
var $author$project$PageEditor$EditorPlugins$TablePlugin$styleSelector = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$Input$text,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Events$onClick($author$project$PageEditor$EditorPlugins$TablePlugin$StyleSelectorClick),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(150)),
						$mdgriffith$elm_ui$Element$below(
						model.cl ? A2(
							$mdgriffith$elm_ui$Element$column,
							_List_Nil,
							A2(
								$elm$core$List$map,
								function (s) {
									return A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Events$onClick(
												$author$project$PageEditor$EditorPlugins$TablePlugin$SetStyle(s)),
												$mdgriffith$elm_ui$Element$pointer,
												$mdgriffith$elm_ui$Element$mouseOver(
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$Font$color(
														A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
														$mdgriffith$elm_ui$Element$Background$color(
														A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0.7, 0.7))
													])),
												$mdgriffith$elm_ui$Element$Background$color(
												A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
												$mdgriffith$elm_ui$Element$width(
												$mdgriffith$elm_ui$Element$px(150)),
												A2($mdgriffith$elm_ui$Element$paddingXY, 15, 5)
											]),
										$mdgriffith$elm_ui$Element$text(s));
								},
								$elm$core$Dict$keys($author$project$Document$DocumentViews$StyleSheets$tableStyles))) : $mdgriffith$elm_ui$Element$none),
						$mdgriffith$elm_ui$Element$spacing(15),
						A2($mdgriffith$elm_ui$Element$paddingXY, 15, 5),
						$mdgriffith$elm_ui$Element$focused(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Border$glow,
								A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
								0)
							]))
					]),
				{
					O: A2(
						$mdgriffith$elm_ui$Element$Input$labelLeft,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerY]),
						A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text('Style'))),
					dJ: $author$project$PageEditor$EditorPlugins$TablePlugin$SetStyle,
					dO: $elm$core$Maybe$Just(
						A2(
							$mdgriffith$elm_ui$Element$Input$placeholder,
							_List_Nil,
							A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$text(model.al)))),
					dV: model.dT
				})
			]));
};
var $author$project$PageEditor$EditorPlugins$TablePlugin$textInputStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$width(
		$mdgriffith$elm_ui$Element$px(50)),
		A2($mdgriffith$elm_ui$Element$paddingXY, 5, 5),
		$mdgriffith$elm_ui$Element$spacing(15)
	]);
var $author$project$PageEditor$EditorPlugins$TablePlugin$editView = function (model) {
	var dataForTable = $elm$core$Array$toList(model.iU);
	var columns = A2(
		$elm$core$List$map,
		function (ci) {
			return {
				ju: $mdgriffith$elm_ui$Element$none,
				mp: F2(
					function (ri, row) {
						return A2(
							$mdgriffith$elm_ui$Element$Keyed$el,
							_Utils_ap(
								A2(
									$elm$core$Maybe$withDefault,
									_List_Nil,
									A2(
										$elm$core$Maybe$map,
										function ($) {
											return $.iG;
										},
										A2($elm$core$Dict$get, model.al, $author$project$Document$DocumentViews$StyleSheets$tableStyles))),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
									])),
							_Utils_Tuple2(
								$elm$core$String$fromInt((ri * 100) + ci),
								A2(
									$mdgriffith$elm_ui$Element$Input$multiline,
									_Utils_ap(
										A2(
											$elm$core$Maybe$withDefault,
											function (_v0) {
												return _List_Nil;
											},
											A2(
												$elm$core$Maybe$map,
												function ($) {
													return $.iq;
												},
												A2($elm$core$Dict$get, model.al, $author$project$Document$DocumentViews$StyleSheets$tableStyles)))(ri),
										_Utils_ap(
											function () {
												var _v1 = model.N;
												if (_v1.$ === 1) {
													return _List_Nil;
												} else {
													var _v2 = _v1.a;
													var i = _v2.a;
													var j = _v2.b;
													return (_Utils_eq(i, ri) && _Utils_eq(j, ci)) ? _List_fromArray(
														[
															$mdgriffith$elm_ui$Element$Background$color(
															A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 1, 0.2))
														]) : _List_Nil;
												}
											}(),
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$Events$onClick(
													$author$project$PageEditor$EditorPlugins$TablePlugin$CellFocused(
														$elm$core$Maybe$Just(
															_Utils_Tuple2(ri, ci)))),
													$mdgriffith$elm_ui$Element$centerY,
													$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
												]))),
									{
										O: $mdgriffith$elm_ui$Element$Input$labelHidden(''),
										dJ: $author$project$PageEditor$EditorPlugins$TablePlugin$DataInput(
											_Utils_Tuple2(ri, ci)),
										dO: $elm$core$Maybe$Nothing,
										lJ: false,
										dV: A2(
											$elm$core$Maybe$withDefault,
											'',
											A2($elm$core$Array$get, ci, row))
									})));
					}),
				mt: $mdgriffith$elm_ui$Element$fill
			};
		},
		A2($elm$core$List$range, 0, model.kp - 1));
	var tableView = model.cj ? A2(
		$mdgriffith$elm_ui$Element$indexedTable,
		A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.lV;
				},
				A2($elm$core$Dict$get, model.al, $author$project$Document$DocumentViews$StyleSheets$tableStyles))),
		{iC: columns, iU: dataForTable}) : $mdgriffith$elm_ui$Element$none;
	var canRemove = A2($author$project$PageEditor$EditorPlugins$TablePlugin$focusIsValid, model.N, model.iU);
	var interfaceView = model.cj ? A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(15)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							O: $mdgriffith$elm_ui$Element$text('Aperçu'),
							aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$TablePlugin$SwapDisplayMode)
						}),
						$author$project$PageEditor$EditorPlugins$TablePlugin$styleSelector(model),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(canRemove),
						{
							O: $mdgriffith$elm_ui$Element$text('Supprimer ligne'),
							aI: canRemove ? $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$TablePlugin$RemoveSelectedRow) : $elm$core$Maybe$Nothing
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(canRemove),
						{
							O: $mdgriffith$elm_ui$Element$text('Supprimer colonne'),
							aI: canRemove ? $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$TablePlugin$RemoveSelectedCol) : $elm$core$Maybe$Nothing
						})
					])),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							O: $mdgriffith$elm_ui$Element$text('Insérer au dessus'),
							aI: $elm$core$Maybe$Just(
								$author$project$PageEditor$EditorPlugins$TablePlugin$AddNew(0))
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							O: $mdgriffith$elm_ui$Element$text('Insérer en dessous'),
							aI: $elm$core$Maybe$Just(
								$author$project$PageEditor$EditorPlugins$TablePlugin$AddNew(1))
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							O: $mdgriffith$elm_ui$Element$text('Insérer à gauche'),
							aI: $elm$core$Maybe$Just(
								$author$project$PageEditor$EditorPlugins$TablePlugin$AddNew(2))
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							O: $mdgriffith$elm_ui$Element$text('Insérer à droite'),
							aI: $elm$core$Maybe$Just(
								$author$project$PageEditor$EditorPlugins$TablePlugin$AddNew(3))
						})
					]))
			])) : A2(
		$mdgriffith$elm_ui$Element$column,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$text,
						$author$project$PageEditor$EditorPlugins$TablePlugin$textInputStyle,
						{
							O: A2(
								$mdgriffith$elm_ui$Element$Input$labelLeft,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$centerY]),
								A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text('Nbr colonnes'))),
							dJ: $author$project$PageEditor$EditorPlugins$TablePlugin$SetNbrCols,
							dO: $elm$core$Maybe$Nothing,
							dV: model.cK
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$text,
						$author$project$PageEditor$EditorPlugins$TablePlugin$textInputStyle,
						{
							O: A2(
								$mdgriffith$elm_ui$Element$Input$labelLeft,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$centerY]),
								A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$text('Nbr lignes'))),
							dJ: $author$project$PageEditor$EditorPlugins$TablePlugin$SetNbrRows,
							dO: $elm$core$Maybe$Nothing,
							dV: model.cL
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							O: $mdgriffith$elm_ui$Element$text('Créer table'),
							aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$TablePlugin$InitializeTable)
						})
					])),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_Nil,
				$mdgriffith$elm_ui$Element$text(model.el))
			]));
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(15),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				interfaceView,
				tableView,
				model.cj ? A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$paddingEach(
						{a2: 15, bc: 0, bl: 0, bq: 0})
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							O: $mdgriffith$elm_ui$Element$text('Quitter'),
							aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$TablePlugin$Quit)
						}),
						A2(
						$mdgriffith$elm_ui$Element$Input$button,
						$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
						{
							O: $mdgriffith$elm_ui$Element$text('Valider et Quitter'),
							aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$TablePlugin$SaveAndQuit)
						})
					])) : $mdgriffith$elm_ui$Element$none
			]));
};
var $author$project$PageEditor$EditorPlugins$TablePlugin$view = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$map,
		model.bY,
		A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(16),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$scrollbarY,
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$padding(15),
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				model.cl ? _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Events$onClick($author$project$PageEditor$EditorPlugins$TablePlugin$StyleSelectorClickOff)
					]) : _List_Nil),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('Insérer / Modifier un tableau: '),
					function () {
					var _v0 = model.h;
					if (!_v0) {
						return $author$project$PageEditor$EditorPlugins$TablePlugin$displayOnlyView(model);
					} else {
						return $author$project$PageEditor$EditorPlugins$TablePlugin$editView(model);
					}
				}()
				])));
};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$Quit = {$: 18};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$SaveAndQuit = {$: 17};
var $author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$view = F3(
	function (config, renderConfig, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2($author$project$Document$DocumentViews$StyleSheets$embeddedStyleSheet, renderConfig, model.x),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$padding(15),
							$mdgriffith$elm_ui$Element$spacing(15),
							$mdgriffith$elm_ui$Element$scrollbarY,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$editor, config, model),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15),
									$mdgriffith$elm_ui$Element$Font$size(16),
									$mdgriffith$elm_ui$Element$paddingEach(
									{a2: 15, bc: 0, bl: 0, bq: 0})
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$buttonStyle(true),
									{
										O: $mdgriffith$elm_ui$Element$text('Quitter'),
										aI: $elm$core$Maybe$Just(
											model.bY($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$Quit))
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$buttonStyle(true),
									{
										O: $mdgriffith$elm_ui$Element$text('Valider et Quitter'),
										aI: $elm$core$Maybe$Just(
											model.bY($author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$SaveAndQuit))
									})
								]))
						]))
				]));
	});
var $author$project$PageEditor$EditorPlugins$VideoPlugin$CheckControls = function (a) {
	return {$: 4, a: a};
};
var $author$project$PageEditor$EditorPlugins$VideoPlugin$CheckFrameBorder = function (a) {
	return {$: 3, a: a};
};
var $author$project$PageEditor$EditorPlugins$VideoPlugin$CheckPrivacy = function (a) {
	return {$: 5, a: a};
};
var $author$project$PageEditor$EditorPlugins$VideoPlugin$CheckSuggestions = function (a) {
	return {$: 7, a: a};
};
var $author$project$PageEditor$EditorPlugins$VideoPlugin$CheckTitle = function (a) {
	return {$: 6, a: a};
};
var $author$project$PageEditor$EditorPlugins$VideoPlugin$ParseHtml = {$: 1};
var $author$project$PageEditor$EditorPlugins$VideoPlugin$Quit = {$: 11};
var $author$project$PageEditor$EditorPlugins$VideoPlugin$SaveAndQuit = {$: 12};
var $author$project$PageEditor$EditorPlugins$VideoPlugin$SetAlignment = function (a) {
	return {$: 2, a: a};
};
var $author$project$PageEditor$EditorPlugins$VideoPlugin$SetEmbedString = function (a) {
	return {$: 0, a: a};
};
var $author$project$PageEditor$EditorPlugins$VideoPlugin$SetHeight = function (a) {
	return {$: 10, a: a};
};
var $author$project$PageEditor$EditorPlugins$VideoPlugin$SetStartAt = function (a) {
	return {$: 8, a: a};
};
var $author$project$PageEditor$EditorPlugins$VideoPlugin$SetWidth = function (a) {
	return {$: 9, a: a};
};
var $author$project$PageEditor$EditorPlugins$VideoPlugin$checkIcon = function (c) {
	return c ? $mdgriffith$elm_ui$Element$html(
		$author$project$Internals$Icons$checkSquare(15)) : $mdgriffith$elm_ui$Element$html(
		$author$project$Internals$Icons$square(15));
};
var $author$project$PageEditor$EditorPlugins$VideoPlugin$iconSize = 18;
var $mdgriffith$elm_ui$Element$Input$Above = 2;
var $mdgriffith$elm_ui$Element$Input$labelAbove = $mdgriffith$elm_ui$Element$Input$Label(2);
var $author$project$PageEditor$EditorPlugins$VideoPlugin$view = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$map,
			model.bY,
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$padding(15),
						$mdgriffith$elm_ui$Element$alignTop,
						$mdgriffith$elm_ui$Element$Font$size(16),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$scrollbars
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text('Insérer / Modifier une video:'),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(10),
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(500))
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$multiline,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$Input$labelAbove,
										_List_Nil,
										$mdgriffith$elm_ui$Element$text('Copier ici le code d\'intégration:')),
									dJ: $author$project$PageEditor$EditorPlugins$VideoPlugin$SetEmbedString,
									dO: $elm$core$Maybe$Nothing,
									lJ: false,
									dV: A2($elm$core$Maybe$withDefault, '', model.cR)
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(
									!_Utils_eq(model.cR, $elm$core$Maybe$Nothing)),
								{
									O: $mdgriffith$elm_ui$Element$text('Valider'),
									aI: (!_Utils_eq(model.cR, $elm$core$Maybe$Nothing)) ? $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$VideoPlugin$ParseHtml) : $elm$core$Maybe$Nothing
								})
							])),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('Alignement: '),
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(15)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$Input$button,
										A2($author$project$Internals$CommonStyleHelpers$toogleButtonStyle, model.bQ === 2, true),
										{
											O: A2(
												$mdgriffith$elm_ui$Element$el,
												_List_Nil,
												$mdgriffith$elm_ui$Element$html(
													$author$project$Internals$Icons$alignLeft($author$project$PageEditor$EditorPlugins$VideoPlugin$iconSize))),
											aI: $elm$core$Maybe$Just(
												$author$project$PageEditor$EditorPlugins$VideoPlugin$SetAlignment(2))
										}),
										A2(
										$mdgriffith$elm_ui$Element$Input$button,
										A2($author$project$Internals$CommonStyleHelpers$toogleButtonStyle, model.bQ === 1, true),
										{
											O: A2(
												$mdgriffith$elm_ui$Element$el,
												_List_Nil,
												$mdgriffith$elm_ui$Element$html(
													$author$project$Internals$Icons$alignCenter($author$project$PageEditor$EditorPlugins$VideoPlugin$iconSize))),
											aI: $elm$core$Maybe$Just(
												$author$project$PageEditor$EditorPlugins$VideoPlugin$SetAlignment(1))
										}),
										A2(
										$mdgriffith$elm_ui$Element$Input$button,
										A2($author$project$Internals$CommonStyleHelpers$toogleButtonStyle, !model.bQ, true),
										{
											O: A2(
												$mdgriffith$elm_ui$Element$el,
												_List_Nil,
												$mdgriffith$elm_ui$Element$html(
													$author$project$Internals$Icons$alignRight($author$project$PageEditor$EditorPlugins$VideoPlugin$iconSize))),
											aI: $elm$core$Maybe$Just(
												$author$project$PageEditor$EditorPlugins$VideoPlugin$SetAlignment(0))
										})
									])),
								$mdgriffith$elm_ui$Element$text('Options: '),
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(15)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$Input$checkbox,
										_List_Nil,
										{
											it: model.jj,
											jC: $author$project$PageEditor$EditorPlugins$VideoPlugin$checkIcon,
											O: A2(
												$mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_Nil,
												$mdgriffith$elm_ui$Element$text('Bordure')),
											dJ: $author$project$PageEditor$EditorPlugins$VideoPlugin$CheckFrameBorder
										}),
										A2(
										$mdgriffith$elm_ui$Element$Input$checkbox,
										_List_Nil,
										{
											it: model.fP,
											jC: $author$project$PageEditor$EditorPlugins$VideoPlugin$checkIcon,
											O: A2(
												$mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_Nil,
												$mdgriffith$elm_ui$Element$text('Afficher titre')),
											dJ: $author$project$PageEditor$EditorPlugins$VideoPlugin$CheckTitle
										}),
										A2(
										$mdgriffith$elm_ui$Element$Input$checkbox,
										_List_Nil,
										{
											it: model.iL,
											jC: $author$project$PageEditor$EditorPlugins$VideoPlugin$checkIcon,
											O: A2(
												$mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_Nil,
												$mdgriffith$elm_ui$Element$text('Commandes')),
											dJ: $author$project$PageEditor$EditorPlugins$VideoPlugin$CheckControls
										}),
										A2(
										$mdgriffith$elm_ui$Element$Input$checkbox,
										_List_Nil,
										{
											it: model.lU,
											jC: $author$project$PageEditor$EditorPlugins$VideoPlugin$checkIcon,
											O: A2(
												$mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_Nil,
												$mdgriffith$elm_ui$Element$text('Suggestions')),
											dJ: $author$project$PageEditor$EditorPlugins$VideoPlugin$CheckSuggestions
										}),
										A2(
										$mdgriffith$elm_ui$Element$Input$checkbox,
										_List_Nil,
										{
											it: model.k_,
											jC: $author$project$PageEditor$EditorPlugins$VideoPlugin$checkIcon,
											O: A2(
												$mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_Nil,
												$mdgriffith$elm_ui$Element$text('Mode privé')),
											dJ: $author$project$PageEditor$EditorPlugins$VideoPlugin$CheckPrivacy
										})
									])),
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(15)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$Input$text,
										_Utils_ap(
											$author$project$Internals$CommonStyleHelpers$textInputStyle,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(50))
												])),
										{
											O: A2(
												$mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$centerY]),
												$mdgriffith$elm_ui$Element$text('largeur: ')),
											dJ: $author$project$PageEditor$EditorPlugins$VideoPlugin$SetWidth,
											dO: $elm$core$Maybe$Nothing,
											dV: $elm$core$String$fromInt(model.fJ.mo)
										}),
										A2(
										$mdgriffith$elm_ui$Element$Input$text,
										_Utils_ap(
											$author$project$Internals$CommonStyleHelpers$textInputStyle,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(50))
												])),
										{
											O: A2(
												$mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$centerY]),
												$mdgriffith$elm_ui$Element$text('hauteur: ')),
											dJ: $author$project$PageEditor$EditorPlugins$VideoPlugin$SetHeight,
											dO: $elm$core$Maybe$Nothing,
											dV: $elm$core$String$fromInt(model.fJ.mn)
										}),
										A2(
										$mdgriffith$elm_ui$Element$Input$text,
										_Utils_ap(
											$author$project$Internals$CommonStyleHelpers$textInputStyle,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$width(
													$mdgriffith$elm_ui$Element$px(100))
												])),
										{
											O: A2(
												$mdgriffith$elm_ui$Element$Input$labelLeft,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$centerY]),
												$mdgriffith$elm_ui$Element$text('Commencer lecture à: ')),
											dJ: $author$project$PageEditor$EditorPlugins$VideoPlugin$SetStartAt,
											dO: $elm$core$Maybe$Just(
												A2(
													$mdgriffith$elm_ui$Element$Input$placeholder,
													_List_Nil,
													$mdgriffith$elm_ui$Element$text('hh:mm:ss'))),
											dV: A2(
												$elm$core$Maybe$withDefault,
												'',
												A2($elm$core$Maybe$map, $elm$core$String$fromInt, model.lL))
										})
									]))
							])),
						function () {
						var _v0 = model.cM;
						if (!_v0.$) {
							var url = _v0.a;
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_Nil,
								$mdgriffith$elm_ui$Element$html(
									A2(
										$elm$html$Html$iframe,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$src(
												A2($author$project$PageEditor$Internals$DocumentEditorHelpers$buildYoutubeUrl, url, model)),
												$elm$html$Html$Attributes$width(model.fJ.mo),
												$elm$html$Html$Attributes$height(model.fJ.mn),
												model.jj ? $author$project$Internals$CommonStyleHelpers$noHtmlAttr : A2($elm$html$Html$Attributes$attribute, 'frameborder', '0'),
												A2($elm$html$Html$Attributes$attribute, 'allowfullscreen', 'true'),
												A2($elm$html$Html$Attributes$attribute, 'allow', 'autoplay; encrypted-media')
											]),
										_List_Nil)));
						} else {
							var _v1 = model.et;
							if (!_v1.$) {
								var vidMeta = _v1.a;
								return A2(
									$mdgriffith$elm_ui$Element$el,
									_List_Nil,
									$mdgriffith$elm_ui$Element$html(
										A2(
											$elm$html$Html$iframe,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$src(
													A2($author$project$PageEditor$Internals$DocumentEditorHelpers$buildYoutubeUrl, vidMeta.fK, model)),
													$elm$html$Html$Attributes$width(model.fJ.mo),
													$elm$html$Html$Attributes$height(model.fJ.mn),
													model.jj ? $author$project$Internals$CommonStyleHelpers$noHtmlAttr : A2($elm$html$Html$Attributes$attribute, 'frameborder', '0'),
													A2($elm$html$Html$Attributes$attribute, 'allowfullscreen', 'true'),
													A2($elm$html$Html$Attributes$attribute, 'allow', 'autoplay; encrypted-media')
												]),
											_List_Nil)));
							} else {
								return $mdgriffith$elm_ui$Element$none;
							}
						}
					}(),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$paddingEach(
								{a2: 15, bc: 0, bl: 0, bq: 0})
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: $mdgriffith$elm_ui$Element$text('Quitter'),
									aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$VideoPlugin$Quit)
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: $mdgriffith$elm_ui$Element$text('Valider et Quitter'),
									aI: $elm$core$Maybe$Just($author$project$PageEditor$EditorPlugins$VideoPlugin$SaveAndQuit)
								})
							]))
					])));
	});
var $author$project$PageEditor$Internals$PersistencePlugin$view = function (config) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(15),
				$mdgriffith$elm_ui$Element$padding(15),
				$mdgriffith$elm_ui$Element$Font$size(16),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$scrollbarY
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$bold,
						$mdgriffith$elm_ui$Element$Font$size(18)
					]),
				$mdgriffith$elm_ui$Element$text('Persistence dans le cache du navigateur')),
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$Background$color(
						A3($mdgriffith$elm_ui$Element$rgb, 0.95, 0.95, 0.95)),
						$mdgriffith$elm_ui$Element$padding(10),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(500))
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text('Fichiers disponibles:'),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Element$spacingXY, 15, 0),
								$mdgriffith$elm_ui$Element$Background$color(
								A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height(
								$mdgriffith$elm_ui$Element$px(150)),
								$mdgriffith$elm_ui$Element$scrollbars
							]),
						A2(
							$elm$core$List$map,
							function (f) {
								return A2(
									$mdgriffith$elm_ui$Element$el,
									_Utils_ap(
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Events$onClick(
												config.hq(f)),
												$mdgriffith$elm_ui$Element$pointer,
												A2($mdgriffith$elm_ui$Element$paddingXY, 5, 3)
											]),
										_Utils_eq(f, config.ep) ? _List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Background$color(
												A4($mdgriffith$elm_ui$Element$rgba, 0.3, 0, 1, 0.3))
											]) : _List_Nil),
									$mdgriffith$elm_ui$Element$text(f));
							},
							config.j7)),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Effacer fichier')
											])),
									aI: $elm$core$Maybe$Just(config.k5)
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Vider cache')
											])),
									aI: $elm$core$Maybe$Just(config.iv)
								})
							])),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Charger fichier')
											])),
									aI: $elm$core$Maybe$Just(config.jp)
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Conversion Json -> Document')
											])),
									aI: $elm$core$Maybe$Just(config.j5)
								})
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text('Prévisualisation Json: '))
					])),
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$Keyed$el,
						_List_Nil,
						_Utils_Tuple2(
							config.fq,
							A2(
								$mdgriffith$elm_ui$Element$Input$multiline,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(500)),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(350)),
										$mdgriffith$elm_ui$Element$scrollbars,
										$mdgriffith$elm_ui$Element$htmlAttribute(
										A2($elm$html$Html$Attributes$style, 'background-color', 'Beige')),
										$mdgriffith$elm_ui$Element$Font$size(14),
										$mdgriffith$elm_ui$Element$padding(10)
									]),
								{
									O: A2($mdgriffith$elm_ui$Element$Input$labelLeft, _List_Nil, $mdgriffith$elm_ui$Element$none),
									dJ: config.lA,
									dO: $elm$core$Maybe$Nothing,
									lJ: false,
									dV: config.fq
								}))),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$text,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(150)),
										$mdgriffith$elm_ui$Element$spacing(5),
										A2($mdgriffith$elm_ui$Element$paddingXY, 15, 5),
										$mdgriffith$elm_ui$Element$focused(
										_List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$Border$glow,
												A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1),
												0)
											])),
										$mdgriffith$elm_ui$Element$Font$family(
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$Font$monospace]))
									]),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$Input$labelLeft,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$centerY, $mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('Nom du fichier: ')),
									dJ: config.hq,
									dO: $elm$core$Maybe$Nothing,
									dV: config.ep
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Conversion Document -> Json')
											])),
									aI: $elm$core$Maybe$Just(
										config.lB(
											$author$project$Document$Json$DocumentSerializer$encodeDocument(config.i2)))
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(10)
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Sauvegarder')
											])),
									aI: $elm$core$Maybe$Just(config.k$)
								})
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$Font$bold]),
						$mdgriffith$elm_ui$Element$text('Lien téléchargement: ')),
						$mdgriffith$elm_ui$Element$html(
						A2(
							$elm$html$Html$a,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$href(
									'data:application/octet-stream;charset=utf-16le;base64,' + $truqu$elm_base64$Base64$encode(config.fq)),
									$elm$html$Html$Attributes$download(config.ep + '.json')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(config.ep + '.json')
								])))
					])),
				A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$paddingEach(
						{a2: 15, bc: 0, bl: 0, bq: 0})
					]),
				A2(
					$mdgriffith$elm_ui$Element$Input$button,
					$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
					{
						O: A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(10)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$text('Retour')
								])),
						aI: $elm$core$Maybe$Just(
							config.lz($elm$core$Maybe$Nothing))
					}))
			]));
};
var $author$project$PageEditor$PageEditor$pluginView = F3(
	function (config, model, plugin) {
		switch (plugin.$) {
			case 0:
				return A2(
					$author$project$PageEditor$EditorPlugins$ImagePlugin$view,
					{fd: config.fd, be: config.be, fr: (model.f.jx - model.f.kb) - 70, kT: _List_Nil, fY: config.fY},
					model.b2);
			case 2:
				return $author$project$PageEditor$EditorPlugins$TablePlugin$view(model.cn);
			case 3:
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text('Nothing  here yet!'));
			case 4:
				return A3(
					$author$project$PageEditor$EditorPlugins$TrixTextBlockPlugin$view,
					{fd: config.fd, be: config.be, fr: (model.f.jx - model.f.kb) - 70, J: config.J, fY: config.fY},
					model.f,
					model.co);
			case 5:
				return $author$project$PageEditor$EditorPlugins$NewDocPlugin$view(
					{
						bV: A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$CreateNewCell),
						e2: A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$CreateNewContainer),
						js: model.bY(
							$author$project$PageEditor$PageEditor$SetEditorPlugin($elm$core$Maybe$Nothing)),
						a9: A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$InsertNewCell),
						gU: model.gU,
						aL: model.aL
					});
			case 6:
				var _v1 = $author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2);
				if (!_v1.$) {
					var cv = _v1.a;
					return $author$project$PageEditor$EditorPlugins$ContainerEditPlugin$view(
						{
							ge: cv,
							js: model.bY(
								$author$project$PageEditor$PageEditor$SetEditorPlugin($elm$core$Maybe$Nothing)),
							fO: A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$SwapContainerType),
							ml: A2($elm$core$Basics$composeL, model.bY, $author$project$PageEditor$PageEditor$UpdateContainerAttr)
						});
				} else {
					return $mdgriffith$elm_ui$Element$text('Aucun containeur sélectionné');
				}
			case 1:
				return A2($author$project$PageEditor$EditorPlugins$VideoPlugin$view, _List_Nil, model.cq);
			case 7:
				return A3(
					$author$project$PageEditor$EditorPlugins$BlockLinksPlugin$view,
					{fd: config.fd, be: config.be, J: config.J, fY: config.fY},
					model.f,
					model.bS);
			case 10:
				return A2(
					$author$project$PageEditor$EditorPlugins$FichesPlugin$view,
					{gp: config.gp},
					model.bZ);
			case 11:
				return A2(
					$author$project$PageEditor$EditorPlugins$PictureLinksPlugin$view,
					{fd: config.fd, be: config.be, fY: config.fY},
					model.cf);
			case 12:
				return A2(
					$author$project$PageEditor$EditorPlugins$GalleryPlugin$view,
					{fd: config.fd, be: config.be, fY: config.fY},
					model.bD);
			case 8:
				return A2(
					$mdgriffith$elm_ui$Element$map,
					model.bY,
					$author$project$PageEditor$Internals$PersistencePlugin$view(
						{
							iv: $author$project$PageEditor$PageEditor$ClearLocalStorage,
							i2: $author$project$PageEditor$Internals$DocumentZipper$extractDoc(
								$author$project$PageEditor$Internals$DocumentZipper$rewind(model.i2)),
							jp: $author$project$PageEditor$PageEditor$GetFromLocalStorage,
							fq: model.fq,
							j5: $author$project$PageEditor$PageEditor$LoadLocalStorageDocument,
							ep: model.ep,
							j7: model.j7,
							bd: model.bd,
							ks: $author$project$PageEditor$PageEditor$NoOp,
							k$: $author$project$PageEditor$PageEditor$PutInLocalStorage,
							k5: $author$project$PageEditor$PageEditor$RemoveFromLocalStorage,
							lz: $author$project$PageEditor$PageEditor$SetEditorPlugin,
							lA: $author$project$PageEditor$PageEditor$SetJsonBuffer,
							hq: $author$project$PageEditor$PageEditor$SetLocalStorageKey,
							lB: $author$project$PageEditor$PageEditor$SetLocalStorageValue
						}));
			default:
				var mode = plugin.a;
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$author$project$PageTreeEditor$PageTreeEditor$view,
							{be: config.be, fr: (model.f.jx - model.f.kb) - 120, h: mode, fY: config.fY},
							config.J),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Element$paddingXY, 15, 0),
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
									{
										O: A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$text('Retour')
												])),
										aI: $elm$core$Maybe$Just(
											model.bY(
												$author$project$PageEditor$PageEditor$SetEditorPlugin($elm$core$Maybe$Nothing)))
									}),
									(mode === 3) ? A2(
									$mdgriffith$elm_ui$Element$Input$button,
									$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
									{
										O: A2(
											$mdgriffith$elm_ui$Element$row,
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$spacing(10)
												]),
											_List_fromArray(
												[
													$mdgriffith$elm_ui$Element$text('Ouvrir')
												])),
										aI: $elm$core$Maybe$Just(
											model.bY($author$project$PageEditor$PageEditor$LoadDocument))
									}) : $mdgriffith$elm_ui$Element$none
								]))
						]));
		}
	});
var $author$project$PageEditor$PageEditor$view = F2(
	function (config, model) {
		var renderConfig = model.f;
		var newConfig = _Utils_update(
			renderConfig,
			{
				jg: $author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$fichesData(config.gp),
				gT: $author$project$NewsEditor$NewsEditor$getNewsDict(config.aH)
			});
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height(
						A2($mdgriffith$elm_ui$Element$maximum, newConfig.jx - 70, $mdgriffith$elm_ui$Element$fill))
					]),
				model.cJ ? _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Events$onClick(
						model.bY($author$project$PageEditor$PageEditor$MenuClickOff))
					]) : _List_Nil),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$map,
					model.bY,
					$author$project$PageEditor$PageEditor$mainInterface(
						{
							d5: !_Utils_eq(
								$author$project$PageTreeEditor$PageTreeEditor$fileIoSelectedPageInfo(config.J),
								$elm$core$Maybe$Nothing),
							e_: model.cJ,
							e$: _Utils_eq(model.cu, $elm$core$Maybe$Nothing),
							e1: newConfig.e1,
							e3: model.eu,
							u: !_Utils_eq(model.b, $elm$core$Maybe$Nothing),
							be: config.be,
							eH: newConfig.eH,
							lj: newConfig.lj,
							dR: $author$project$Document$Document$isContainer(
								$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2)),
							bm: _Utils_eq(
								$author$project$PageEditor$Internals$DocumentZipper$zipUp(model.i2),
								$elm$core$Maybe$Nothing),
							aL: model.aL,
							fQ: _Utils_eq(model.bN, _List_Nil)
						})),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$htmlAttribute(
							A2($elm$html$Html$Attributes$style, 'flex-shrink', '1')),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$map,
							model.bY,
							A3(
								$author$project$PageEditor$EditorPlugins$SidePanels$DocumentStructView$documentStructView,
								{
									iH: newConfig.e1,
									gF: _Utils_eq(model.b, $elm$core$Maybe$Nothing),
									gU: model.gU,
									hM: $author$project$PageEditor$PageEditor$ZipToUid
								},
								$author$project$Document$Document$getUid(
									$author$project$PageEditor$Internals$DocumentZipper$extractDoc(model.i2)),
								$author$project$PageEditor$Internals$DocumentZipper$extractDoc(
									$author$project$PageEditor$Internals$DocumentZipper$rewind(model.i2)))),
							function () {
							var _v0 = model.b;
							if (_v0.$ === 1) {
								return A2(
									$author$project$PageEditor$PageEditor$documentView,
									config,
									_Utils_update(
										model,
										{f: newConfig}));
							} else {
								var plugin = _v0.a;
								return A3(
									$author$project$PageEditor$PageEditor$pluginView,
									config,
									_Utils_update(
										model,
										{f: newConfig}),
									plugin);
							}
						}()
						]))
				]));
	});
var $author$project$Publications$Publications$DeleteBulletin = function (a) {
	return {$: 32, a: a};
};
var $author$project$Publications$Publications$DeleteDelib = function (a) {
	return {$: 28, a: a};
};
var $author$project$Publications$Publications$DeleteMurolInfo = function (a) {
	return {$: 24, a: a};
};
var $author$project$Publications$Publications$FileRequested = {$: 16};
var $author$project$Publications$Publications$SelectBulletin = function (a) {
	return {$: 4, a: a};
};
var $author$project$Publications$Publications$SelectDelib = function (a) {
	return {$: 3, a: a};
};
var $author$project$Publications$Publications$SelectMurolInfo = function (a) {
	return {$: 2, a: a};
};
var $author$project$Publications$Publications$SetPubType = function (a) {
	return {$: 0, a: a};
};
var $author$project$Internals$CommonStyleHelpers$blue6 = A3($mdgriffith$elm_ui$Element$rgb255, 170, 212, 245);
var $author$project$Internals$CommonStyleHelpers$blue7 = A3($mdgriffith$elm_ui$Element$rgb255, 239, 248, 255);
var $author$project$Publications$Publications$containerStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(15),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
		$mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var $author$project$Publications$Publications$itemStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$padding(15),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey7),
		$mdgriffith$elm_ui$Element$Border$rounded(5)
	]);
var $author$project$Internals$CommonStyleHelpers$teal7 = A3($mdgriffith$elm_ui$Element$rgb255, 231, 255, 254);
var $author$project$Publications$Publications$initialView = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				$author$project$Publications$Publications$containerStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					])),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						$author$project$Publications$Publications$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(940))
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$bold,
									$mdgriffith$elm_ui$Element$Font$size(20)
								]),
							$mdgriffith$elm_ui$Element$text('Type de publication')),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$Input$radioRow,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$spacing(20)
										]),
									{
										O: $mdgriffith$elm_ui$Element$Input$labelHidden(''),
										dJ: $author$project$Publications$Publications$SetPubType,
										g2: _List_fromArray(
											[
												A2(
												$mdgriffith$elm_ui$Element$Input$option,
												0,
												$mdgriffith$elm_ui$Element$text('Murol info')),
												A2(
												$mdgriffith$elm_ui$Element$Input$option,
												1,
												$mdgriffith$elm_ui$Element$text('Délibération')),
												A2(
												$mdgriffith$elm_ui$Element$Input$option,
												2,
												$mdgriffith$elm_ui$Element$text('Bulletin municipal'))
											]),
										hm: $elm$core$Maybe$Just(
											$author$project$Publications$Publications$extractPubType(model))
									}),
									A2(
									$mdgriffith$elm_ui$Element$Input$button,
									_Utils_ap(
										$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$alignRight])),
									{
										O: $mdgriffith$elm_ui$Element$text('Mettre en ligne'),
										aI: $elm$core$Maybe$Just($author$project$Publications$Publications$FileRequested)
									})
								])),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_Utils_ap(
								$author$project$Publications$Publications$itemStyle,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(500)),
										$mdgriffith$elm_ui$Element$scrollbarY,
										$mdgriffith$elm_ui$Element$Background$color(
										A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
									])),
							function () {
								var _v0 = $author$project$Publications$Publications$extractPubType(model);
								switch (_v0) {
									case 0:
										return A3(
											$elm$core$Dict$foldl,
											F3(
												function (n, _v1, _v2) {
													var issue = _v1.gH;
													var date = _v1.eg;
													var acc = _v2.a;
													var flag = _v2.b;
													return _Utils_Tuple2(
														A2(
															$elm$core$List$cons,
															A2(
																$mdgriffith$elm_ui$Element$row,
																_List_fromArray(
																	[
																		$mdgriffith$elm_ui$Element$spacing(15),
																		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																		flag ? $mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$teal7) : $mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$blue7),
																		A2($mdgriffith$elm_ui$Element$paddingXY, 7, 7)
																	]),
																_List_fromArray(
																	[
																		A2(
																		$mdgriffith$elm_ui$Element$row,
																		_List_Nil,
																		_List_fromArray(
																			[
																				A2(
																				$mdgriffith$elm_ui$Element$el,
																				_List_fromArray(
																					[$mdgriffith$elm_ui$Element$Font$bold]),
																				$mdgriffith$elm_ui$Element$text('Numéro: ')),
																				$mdgriffith$elm_ui$Element$text(
																				$elm$core$String$fromInt(issue))
																			])),
																		A2(
																		$mdgriffith$elm_ui$Element$row,
																		_List_Nil,
																		_List_fromArray(
																			[
																				A2(
																				$mdgriffith$elm_ui$Element$el,
																				_List_fromArray(
																					[$mdgriffith$elm_ui$Element$Font$bold]),
																				$mdgriffith$elm_ui$Element$text('Date: ')),
																				$mdgriffith$elm_ui$Element$text(
																				A2($author$project$Internals$CommonHelpers$dateToStr, config.fY, date))
																			])),
																		A2(
																		$mdgriffith$elm_ui$Element$row,
																		_List_fromArray(
																			[
																				$mdgriffith$elm_ui$Element$spacing(15),
																				$mdgriffith$elm_ui$Element$alignRight
																			]),
																		_List_fromArray(
																			[
																				A2(
																				$mdgriffith$elm_ui$Element$Input$button,
																				$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
																				{
																					O: $mdgriffith$elm_ui$Element$text('Modifier'),
																					aI: $elm$core$Maybe$Just(
																						$author$project$Publications$Publications$SelectMurolInfo(n))
																				}),
																				A2(
																				$mdgriffith$elm_ui$Element$Input$button,
																				$author$project$Internals$CommonStyleHelpers$deleteButtonStyle(true),
																				{
																					O: $mdgriffith$elm_ui$Element$text('Supprimer'),
																					aI: $elm$core$Maybe$Just(
																						$author$project$Publications$Publications$DeleteMurolInfo(n))
																				})
																			]))
																	])),
															acc),
														!flag);
												}),
											_Utils_Tuple2(_List_Nil, true),
											model.kl).a;
									case 1:
										return A3(
											$elm$core$Dict$foldl,
											F3(
												function (n, _v3, _v4) {
													var date = _v3.eg;
													var acc = _v4.a;
													var flag = _v4.b;
													return _Utils_Tuple2(
														A2(
															$elm$core$List$cons,
															A2(
																$mdgriffith$elm_ui$Element$row,
																_List_fromArray(
																	[
																		$mdgriffith$elm_ui$Element$spacing(15),
																		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																		flag ? $mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$teal7) : $mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$blue7),
																		A2($mdgriffith$elm_ui$Element$paddingXY, 7, 7)
																	]),
																_List_fromArray(
																	[
																		A2(
																		$mdgriffith$elm_ui$Element$row,
																		_List_Nil,
																		_List_fromArray(
																			[
																				A2(
																				$mdgriffith$elm_ui$Element$el,
																				_List_fromArray(
																					[$mdgriffith$elm_ui$Element$Font$bold]),
																				$mdgriffith$elm_ui$Element$text('Date: ')),
																				$mdgriffith$elm_ui$Element$text(
																				A2($author$project$Internals$CommonHelpers$dateToStr, config.fY, date))
																			])),
																		A2(
																		$mdgriffith$elm_ui$Element$row,
																		_List_fromArray(
																			[
																				$mdgriffith$elm_ui$Element$spacing(15),
																				$mdgriffith$elm_ui$Element$alignRight
																			]),
																		_List_fromArray(
																			[
																				A2(
																				$mdgriffith$elm_ui$Element$Input$button,
																				$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
																				{
																					O: $mdgriffith$elm_ui$Element$text('Modifier'),
																					aI: $elm$core$Maybe$Just(
																						$author$project$Publications$Publications$SelectDelib(n))
																				}),
																				A2(
																				$mdgriffith$elm_ui$Element$Input$button,
																				$author$project$Internals$CommonStyleHelpers$deleteButtonStyle(true),
																				{
																					O: $mdgriffith$elm_ui$Element$text('Supprimer'),
																					aI: $elm$core$Maybe$Just(
																						$author$project$Publications$Publications$DeleteDelib(n))
																				})
																			]))
																	])),
															acc),
														!flag);
												}),
											_Utils_Tuple2(_List_Nil, true),
											model.iW).a;
									default:
										return A3(
											$elm$core$Dict$foldl,
											F3(
												function (n, _v5, _v6) {
													var issue = _v5.gH;
													var date = _v5.eg;
													var acc = _v6.a;
													var flag = _v6.b;
													return _Utils_Tuple2(
														A2(
															$elm$core$List$cons,
															A2(
																$mdgriffith$elm_ui$Element$row,
																_List_fromArray(
																	[
																		$mdgriffith$elm_ui$Element$spacing(15),
																		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																		flag ? $mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$blue6) : $mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$blue7),
																		A2($mdgriffith$elm_ui$Element$paddingXY, 7, 7)
																	]),
																_List_fromArray(
																	[
																		A2(
																		$mdgriffith$elm_ui$Element$row,
																		_List_Nil,
																		_List_fromArray(
																			[
																				A2(
																				$mdgriffith$elm_ui$Element$el,
																				_List_fromArray(
																					[$mdgriffith$elm_ui$Element$Font$bold]),
																				$mdgriffith$elm_ui$Element$text('Numéro: ')),
																				$mdgriffith$elm_ui$Element$text(
																				$elm$core$String$fromInt(issue))
																			])),
																		A2(
																		$mdgriffith$elm_ui$Element$row,
																		_List_Nil,
																		_List_fromArray(
																			[
																				A2(
																				$mdgriffith$elm_ui$Element$el,
																				_List_fromArray(
																					[$mdgriffith$elm_ui$Element$Font$bold]),
																				$mdgriffith$elm_ui$Element$text('Date: ')),
																				$mdgriffith$elm_ui$Element$text(
																				A2($author$project$Internals$CommonHelpers$dateToStr, config.fY, date))
																			])),
																		A2(
																		$mdgriffith$elm_ui$Element$row,
																		_List_fromArray(
																			[
																				$mdgriffith$elm_ui$Element$spacing(15),
																				$mdgriffith$elm_ui$Element$alignRight
																			]),
																		_List_fromArray(
																			[
																				A2(
																				$mdgriffith$elm_ui$Element$Input$button,
																				$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
																				{
																					O: $mdgriffith$elm_ui$Element$text('Modifier'),
																					aI: $elm$core$Maybe$Just(
																						$author$project$Publications$Publications$SelectBulletin(n))
																				}),
																				A2(
																				$mdgriffith$elm_ui$Element$Input$button,
																				$author$project$Internals$CommonStyleHelpers$deleteButtonStyle(true),
																				{
																					O: $mdgriffith$elm_ui$Element$text('Supprimer'),
																					aI: $elm$core$Maybe$Just(
																						$author$project$Publications$Publications$DeleteBulletin(n))
																				})
																			]))
																	])),
															acc),
														!flag);
												}),
											_Utils_Tuple2(_List_Nil, true),
											model.ij).a;
								}
							}())
						]))
				]));
	});
var $author$project$Publications$Publications$Reset = {$: 34};
var $author$project$Publications$Publications$SaveBulletin = {$: 30};
var $author$project$Publications$Publications$SetDate = function (a) {
	return {$: 6, a: a};
};
var $author$project$Publications$Publications$dateInputView = F2(
	function (config, model) {
		var _v0 = _Utils_Tuple2(
			$author$project$Publications$Publications$extractPubType(model),
			model.H);
		if ((_v0.a === 1) && _v0.b) {
			var _v1 = _v0.a;
			return $mdgriffith$elm_ui$Element$text(model.bw);
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$Input$text,
				_Utils_ap(
					$author$project$Internals$CommonStyleHelpers$textInputStyle,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(150)),
							function () {
							var _v2 = model.aa;
							if (!_v2.$) {
								return $mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$green4);
							} else {
								return $mdgriffith$elm_ui$Element$Font$color($author$project$Internals$CommonStyleHelpers$red4);
							}
						}()
						])),
				{
					O: A2(
						$mdgriffith$elm_ui$Element$Input$labelLeft,
						_List_fromArray(
							[$mdgriffith$elm_ui$Element$centerY, $mdgriffith$elm_ui$Element$Font$bold]),
						$mdgriffith$elm_ui$Element$text('Date: ')),
					dJ: $author$project$Publications$Publications$SetDate,
					dO: $elm$core$Maybe$Just(
						A2(
							$mdgriffith$elm_ui$Element$Input$placeholder,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$clip]),
							$mdgriffith$elm_ui$Element$text('jj/mm/aaaa'))),
					dV: function () {
						var _v3 = model.aa;
						if (_v3.$ === 1) {
							return model.bw;
						} else {
							var t = _v3.a;
							return A2($author$project$Internals$CommonHelpers$dateToStr, config.fY, t);
						}
					}()
				});
		}
	});
var $author$project$Publications$Publications$NewIndexEntry = {$: 10};
var $author$project$Publications$Publications$RemoveIndexEntry = function (a) {
	return {$: 13, a: a};
};
var $author$project$Publications$Publications$SetIndexEntryPageNbr = F2(
	function (a, b) {
		return {$: 12, a: a, b: b};
	});
var $author$project$Publications$Publications$SetIndexEntryTopic = F2(
	function (a, b) {
		return {$: 11, a: a, b: b};
	});
var $author$project$Publications$Publications$SwapDown = function (a) {
	return {$: 15, a: a};
};
var $author$project$Publications$Publications$SwapUp = function (a) {
	return {$: 14, a: a};
};
var $author$project$Internals$Icons$chevronDown = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'chevron-down',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('6 9 12 15 18 9')
					]),
				_List_Nil)
			]));
};
var $author$project$Internals$Icons$chevronUp = function (size) {
	return A3(
		$author$project$Internals$Icons$customSvgFeatherIcon,
		size,
		'chevron-up',
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$polyline,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$points('18 15 12 9 6 15')
					]),
				_List_Nil)
			]));
};
var $author$project$Publications$Publications$indexEditorView = F2(
	function (config, model) {
		var topicView = function (_v0) {
			var i = _v0.a;
			var _v1 = _v0.b;
			var n = _v1.a;
			var _v2 = _v1.b;
			var t = _v2.a;
			var p = _v2.b;
			return A2(
				$mdgriffith$elm_ui$Element$Keyed$el,
				_List_Nil,
				_Utils_Tuple2(
					$elm$core$String$fromInt(i),
					A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$text,
								_Utils_ap(
									$author$project$Internals$CommonStyleHelpers$textInputStyle,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(600))
										])),
								{
									O: $mdgriffith$elm_ui$Element$Input$labelHidden(''),
									dJ: $author$project$Publications$Publications$SetIndexEntryTopic(n),
									dO: $elm$core$Maybe$Nothing,
									dV: A2($elm$core$Maybe$withDefault, '', t)
								}),
								A2(
								$mdgriffith$elm_ui$Element$Input$text,
								_Utils_ap(
									$author$project$Internals$CommonStyleHelpers$textInputStyle,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(50))
										])),
								{
									O: A2(
										$mdgriffith$elm_ui$Element$Input$labelLeft,
										_List_fromArray(
											[$mdgriffith$elm_ui$Element$centerY, $mdgriffith$elm_ui$Element$Font$bold]),
										$mdgriffith$elm_ui$Element$text('Page: ')),
									dJ: $author$project$Publications$Publications$SetIndexEntryPageNbr(n),
									dO: $elm$core$Maybe$Nothing,
									dV: A2(
										$elm$core$Maybe$withDefault,
										'',
										A2($elm$core$Maybe$map, $elm$core$String$fromInt, p))
								}),
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$Input$button,
										$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
										{
											O: A2(
												$mdgriffith$elm_ui$Element$el,
												_List_Nil,
												$mdgriffith$elm_ui$Element$html(
													$author$project$Internals$Icons$chevronUp(14))),
											aI: $elm$core$Maybe$Just(
												$author$project$Publications$Publications$SwapUp(i))
										}),
										A2(
										$mdgriffith$elm_ui$Element$Input$button,
										$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
										{
											O: A2(
												$mdgriffith$elm_ui$Element$el,
												_List_Nil,
												$mdgriffith$elm_ui$Element$html(
													$author$project$Internals$Icons$chevronDown(14))),
											aI: $elm$core$Maybe$Just(
												$author$project$Publications$Publications$SwapDown(i))
										})
									])),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: $mdgriffith$elm_ui$Element$text('Supprimer'),
									aI: $elm$core$Maybe$Just(
										$author$project$Publications$Publications$RemoveIndexEntry(n))
								})
							]))));
		};
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				$author$project$Publications$Publications$itemStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(940))
					])),
			_Utils_ap(
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(30)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$Font$bold]),
								$mdgriffith$elm_ui$Element$text('Sujets: '))
							]))
					]),
				_Utils_ap(
					A2(
						$elm$core$List$map,
						topicView,
						A2(
							$elm$core$List$indexedMap,
							$elm$core$Tuple$pair,
							$elm$core$Dict$toList(model.gB))),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Nouveau sujet'),
								aI: $elm$core$Maybe$Just($author$project$Publications$Publications$NewIndexEntry)
							})
						]))));
	});
var $author$project$Publications$Publications$SetIssue = function (a) {
	return {$: 5, a: a};
};
var $author$project$Publications$Publications$issueInputView = F2(
	function (config, model) {
		return model.H ? A2(
			$mdgriffith$elm_ui$Element$row,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$bold]),
					$mdgriffith$elm_ui$Element$text('Numéro: ')),
					$mdgriffith$elm_ui$Element$text(
					A2($elm$core$Maybe$withDefault, '', model.aB))
				])) : A2(
			$mdgriffith$elm_ui$Element$Input$text,
			_Utils_ap(
				$author$project$Internals$CommonStyleHelpers$textInputStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(50))
					])),
			{
				O: A2(
					$mdgriffith$elm_ui$Element$Input$labelLeft,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerY, $mdgriffith$elm_ui$Element$Font$bold]),
					$mdgriffith$elm_ui$Element$text('Numéro: ')),
				dJ: $author$project$Publications$Publications$SetIssue,
				dO: $elm$core$Maybe$Nothing,
				dV: A2($elm$core$Maybe$withDefault, '', model.aB)
			});
	});
var $author$project$Publications$Publications$newBulletinView = F2(
	function (config, model) {
		var canUpload = function () {
			var _v1 = _Utils_Tuple3(
				A2($elm$core$Maybe$andThen, $elm$core$String$toInt, model.aB),
				model.aa,
				A3(
					$elm$core$List$foldr,
					F2(
						function (v, acc) {
							if ((!v.a.$) && (!v.b.$)) {
								var topic = v.a.a;
								var pageNbr = v.b.a;
								return A2(
									$elm$core$List$cons,
									_Utils_Tuple2(topic, pageNbr),
									acc);
							} else {
								return acc;
							}
						}),
					_List_Nil,
					$elm$core$Dict$values(model.gB)));
			if (((!_v1.a.$) && (!_v1.b.$)) && _v1.c.b) {
				var issue = _v1.a.a;
				var date = _v1.b.a;
				var _v3 = _v1.c;
				var x = _v3.a;
				var xs = _v3.b;
				return (model.H || (!A2($elm$core$Dict$member, issue, model.ij))) && (_Utils_eq(
					$elm$core$List$length(
						A2($elm$core$List$cons, x, xs)),
					$elm$core$Dict$size(model.gB)) && (model.H || (!_Utils_eq(model.ay, $elm$core$Maybe$Nothing))));
			} else {
				return false;
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				$author$project$Publications$Publications$containerStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					])),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						$author$project$Publications$Publications$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(940))
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$Font$bold,
											$mdgriffith$elm_ui$Element$Font$size(20)
										]),
									$mdgriffith$elm_ui$Element$text('Nouveau bulletin municipal: ')),
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$padding(10),
											$mdgriffith$elm_ui$Element$Border$rounded(5),
											$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey7)
										]),
									function () {
										var _v0 = model.cY;
										if (!_v0.$) {
											var cover = _v0.a;
											return A2(
												$mdgriffith$elm_ui$Element$el,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$centerY,
														$mdgriffith$elm_ui$Element$centerX,
														$mdgriffith$elm_ui$Element$width(
														$mdgriffith$elm_ui$Element$px(105)),
														$mdgriffith$elm_ui$Element$height(
														$mdgriffith$elm_ui$Element$px((297 / 2) | 0)),
														$mdgriffith$elm_ui$Element$Background$image(cover)
													]),
												$mdgriffith$elm_ui$Element$none);
										} else {
											if (model.H) {
												var imgSrc = A2(
													$elm$core$Maybe$withDefault,
													'',
													A2(
														$elm$core$Maybe$map,
														function (s) {
															return '/baseDocumentaire/publications/bulletins/miniatures/' + (s + '.jpg');
														},
														A2(
															$elm$core$Maybe$map,
															A2($elm$core$String$padLeft, 3, '0'),
															model.aB)));
												return A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$centerY,
															$mdgriffith$elm_ui$Element$centerX,
															$mdgriffith$elm_ui$Element$width(
															$mdgriffith$elm_ui$Element$px(105)),
															$mdgriffith$elm_ui$Element$height(
															$mdgriffith$elm_ui$Element$px((297 / 2) | 0)),
															$mdgriffith$elm_ui$Element$Background$image(imgSrc)
														]),
													$mdgriffith$elm_ui$Element$none);
											} else {
												return A2(
													$mdgriffith$elm_ui$Element$el,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$width(
															$mdgriffith$elm_ui$Element$px(105)),
															$mdgriffith$elm_ui$Element$height(
															$mdgriffith$elm_ui$Element$px((297 / 2) | 0)),
															$mdgriffith$elm_ui$Element$centerY,
															$mdgriffith$elm_ui$Element$centerX,
															$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6)
														]),
													A2(
														$mdgriffith$elm_ui$Element$image,
														_List_fromArray(
															[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY, $mdgriffith$elm_ui$Element$clip]),
														{ei: 'chargement', fK: '/assets/images/loading.gif'}));
											}
										}
									}())
								])),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignRight, $mdgriffith$elm_ui$Element$alignTop]),
							$mdgriffith$elm_ui$Element$text(
								A2(
									$elm$core$Maybe$withDefault,
									'',
									A2($elm$core$Maybe$map, $elm$file$File$name, model.ay))))
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						$author$project$Publications$Publications$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(940))
							])),
					_List_fromArray(
						[
							A2($author$project$Publications$Publications$issueInputView, config, model),
							A2($author$project$Publications$Publications$dateInputView, config, model)
						])),
					A2($author$project$Publications$Publications$indexEditorView, config, model),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						$author$project$Publications$Publications$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(940)),
								$mdgriffith$elm_ui$Element$spacing(15)
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$saveButtonStyle(canUpload),
							{
								O: $mdgriffith$elm_ui$Element$text('Valider'),
								aI: canUpload ? $elm$core$Maybe$Just($author$project$Publications$Publications$SaveBulletin) : $elm$core$Maybe$Nothing
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Annuler'),
								aI: $elm$core$Maybe$Just($author$project$Publications$Publications$Reset)
							})
						]))
				]));
	});
var $author$project$Publications$Publications$SaveDelib = {$: 26};
var $author$project$Publications$Publications$newDelibView = F2(
	function (config, model) {
		var canUpload = function () {
			var _v0 = _Utils_Tuple2(
				model.aa,
				A3(
					$elm$core$List$foldr,
					F2(
						function (v, acc) {
							if ((!v.a.$) && (!v.b.$)) {
								var topic = v.a.a;
								var pageNbr = v.b.a;
								return A2(
									$elm$core$List$cons,
									_Utils_Tuple2(topic, pageNbr),
									acc);
							} else {
								return acc;
							}
						}),
					_List_Nil,
					$elm$core$Dict$values(model.gB)));
			if ((!_v0.a.$) && _v0.b.b) {
				var date = _v0.a.a;
				var _v2 = _v0.b;
				var x = _v2.a;
				var xs = _v2.b;
				return (model.H || (!A2(
					$elm$core$Dict$member,
					$elm$time$Time$posixToMillis(date),
					model.iW))) && (_Utils_eq(
					$elm$core$List$length(
						A2($elm$core$List$cons, x, xs)),
					$elm$core$Dict$size(model.gB)) && (model.H || (!_Utils_eq(model.ay, $elm$core$Maybe$Nothing))));
			} else {
				return false;
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				$author$project$Publications$Publications$containerStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					])),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						$author$project$Publications$Publications$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(940))
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$bold,
									$mdgriffith$elm_ui$Element$Font$size(20)
								]),
							$mdgriffith$elm_ui$Element$text('Nouvelle séance du conseil municipal:')),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignRight]),
							$mdgriffith$elm_ui$Element$text(
								A2(
									$elm$core$Maybe$withDefault,
									'',
									A2($elm$core$Maybe$map, $elm$file$File$name, model.ay))))
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						$author$project$Publications$Publications$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(940))
							])),
					_List_fromArray(
						[
							A2($author$project$Publications$Publications$dateInputView, config, model)
						])),
					A2($author$project$Publications$Publications$indexEditorView, config, model),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						$author$project$Publications$Publications$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(940)),
								$mdgriffith$elm_ui$Element$spacing(15)
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$saveButtonStyle(canUpload),
							{
								O: $mdgriffith$elm_ui$Element$text('Valider'),
								aI: canUpload ? $elm$core$Maybe$Just($author$project$Publications$Publications$SaveDelib) : $elm$core$Maybe$Nothing
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Annuler'),
								aI: $elm$core$Maybe$Just($author$project$Publications$Publications$Reset)
							})
						]))
				]));
	});
var $author$project$Publications$Publications$SaveMurolInfo = {$: 22};
var $author$project$Publications$Publications$NewTopic = {$: 7};
var $author$project$Publications$Publications$RemoveTopic = function (a) {
	return {$: 9, a: a};
};
var $author$project$Publications$Publications$SetTopic = F2(
	function (a, b) {
		return {$: 8, a: a, b: b};
	});
var $author$project$Publications$Publications$topicEditorView = F2(
	function (config, model) {
		var topicView = function (_v1) {
			var i = _v1.a;
			var _v2 = _v1.b;
			var n = _v2.a;
			var t = _v2.b;
			return A2(
				$mdgriffith$elm_ui$Element$Keyed$el,
				_List_Nil,
				_Utils_Tuple2(
					$elm$core$String$fromInt(i),
					A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$spacing(15)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$Input$text,
								_Utils_ap(
									$author$project$Internals$CommonStyleHelpers$textInputStyle,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$width(
											$mdgriffith$elm_ui$Element$px(600))
										])),
								{
									O: $mdgriffith$elm_ui$Element$Input$labelHidden(''),
									dJ: $author$project$Publications$Publications$SetTopic(n),
									dO: $elm$core$Maybe$Nothing,
									dV: A2($elm$core$Maybe$withDefault, '', t)
								}),
								A2(
								$mdgriffith$elm_ui$Element$row,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$Input$button,
										$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
										{
											O: A2(
												$mdgriffith$elm_ui$Element$el,
												_List_Nil,
												$mdgriffith$elm_ui$Element$html(
													$author$project$Internals$Icons$chevronUp(14))),
											aI: $elm$core$Maybe$Just(
												$author$project$Publications$Publications$SwapUp(i))
										}),
										A2(
										$mdgriffith$elm_ui$Element$Input$button,
										$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
										{
											O: A2(
												$mdgriffith$elm_ui$Element$el,
												_List_Nil,
												$mdgriffith$elm_ui$Element$html(
													$author$project$Internals$Icons$chevronDown(14))),
											aI: $elm$core$Maybe$Just(
												$author$project$Publications$Publications$SwapDown(i))
										})
									])),
								A2(
								$mdgriffith$elm_ui$Element$Input$button,
								$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
								{
									O: $mdgriffith$elm_ui$Element$text('Supprimer'),
									aI: $elm$core$Maybe$Just(
										$author$project$Publications$Publications$RemoveTopic(n))
								})
							]))));
		};
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				$author$project$Publications$Publications$itemStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(940))
					])),
			_Utils_ap(
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(30)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$Font$bold]),
								$mdgriffith$elm_ui$Element$text('Sujets: '))
							]))
					]),
				_Utils_ap(
					A2(
						$elm$core$List$map,
						topicView,
						A2(
							$elm$core$List$indexedMap,
							$elm$core$Tuple$pair,
							$elm$core$Dict$toList(model.mi))),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: function () {
									var _v0 = $author$project$Publications$Publications$extractPubType(model);
									if (_v0 === 1) {
										return $mdgriffith$elm_ui$Element$text('Nouvel article de l\'ordre du jour');
									} else {
										return $mdgriffith$elm_ui$Element$text('Nouveau sujet');
									}
								}(),
								aI: $elm$core$Maybe$Just($author$project$Publications$Publications$NewTopic)
							})
						]))));
	});
var $author$project$Publications$Publications$newMurolInfoView = F2(
	function (config, model) {
		var canUpload = function () {
			var _v0 = _Utils_Tuple3(
				A2($elm$core$Maybe$andThen, $elm$core$String$toInt, model.aB),
				model.aa,
				A2(
					$elm$core$List$filterMap,
					$elm$core$Basics$identity,
					$elm$core$Dict$values(model.mi)));
			if (((!_v0.a.$) && (!_v0.b.$)) && _v0.c.b) {
				var issue = _v0.a.a;
				var date = _v0.b.a;
				var _v1 = _v0.c;
				var t = _v1.a;
				var ts = _v1.b;
				return (model.H || (!A2($elm$core$Dict$member, issue, model.kl))) && (_Utils_eq(
					$elm$core$List$length(
						A2($elm$core$List$cons, t, ts)),
					$elm$core$Dict$size(model.mi)) && (model.H || (!_Utils_eq(model.ay, $elm$core$Maybe$Nothing))));
			} else {
				return false;
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				$author$project$Publications$Publications$containerStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					])),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						$author$project$Publications$Publications$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(940))
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$bold,
									$mdgriffith$elm_ui$Element$Font$size(20)
								]),
							$mdgriffith$elm_ui$Element$text('Nouveau Murol info: ')),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignRight]),
							$mdgriffith$elm_ui$Element$text(
								A2(
									$elm$core$Maybe$withDefault,
									'',
									A2($elm$core$Maybe$map, $elm$file$File$name, model.ay))))
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						$author$project$Publications$Publications$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(940))
							])),
					_List_fromArray(
						[
							A2($author$project$Publications$Publications$issueInputView, config, model),
							A2($author$project$Publications$Publications$dateInputView, config, model)
						])),
					A2($author$project$Publications$Publications$topicEditorView, config, model),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						$author$project$Publications$Publications$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(940)),
								$mdgriffith$elm_ui$Element$spacing(15)
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$saveButtonStyle(canUpload),
							{
								O: $mdgriffith$elm_ui$Element$text('Valider'),
								aI: canUpload ? $elm$core$Maybe$Just($author$project$Publications$Publications$SaveMurolInfo) : $elm$core$Maybe$Nothing
							}),
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(true),
							{
								O: $mdgriffith$elm_ui$Element$text('Annuler'),
								aI: $elm$core$Maybe$Just($author$project$Publications$Publications$Reset)
							})
						]))
				]));
	});
var $author$project$Publications$Publications$uploadView = F2(
	function (config, model) {
		var canReset = model.Y === 2;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				$author$project$Publications$Publications$containerStyle,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(15)
					])),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						$author$project$Publications$Publications$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(940))
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$bold,
									$mdgriffith$elm_ui$Element$Font$size(20)
								]),
							$mdgriffith$elm_ui$Element$text('Mise en ligne...'))
						])),
					A2(
					$mdgriffith$elm_ui$Element$column,
					_Utils_ap(
						$author$project$Publications$Publications$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(940))
							])),
					_List_fromArray(
						[
							model.H ? $mdgriffith$elm_ui$Element$none : A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$Font$bold]),
									$mdgriffith$elm_ui$Element$text('Transfert fichier: ')),
									$author$project$Internals$CommonStyleHelpers$progressBar(
									A2(
										$elm$core$Maybe$withDefault,
										0,
										A2($elm$core$Maybe$map, $elm$core$Tuple$first, model.j)))
								])),
							A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$el,
									_List_fromArray(
										[$mdgriffith$elm_ui$Element$Font$bold]),
									$mdgriffith$elm_ui$Element$text('Transfert metadonnées: ')),
									function () {
									var _v0 = model.Y;
									switch (_v0) {
										case 1:
											return $mdgriffith$elm_ui$Element$text('En cours...');
										case 2:
											return $mdgriffith$elm_ui$Element$text('Terminé');
										default:
											return $mdgriffith$elm_ui$Element$text('Erreur');
									}
								}()
								]))
						])),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						$author$project$Publications$Publications$itemStyle,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width(
								$mdgriffith$elm_ui$Element$px(940)),
								$mdgriffith$elm_ui$Element$spacing(15)
							])),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$Input$button,
							$author$project$Internals$CommonStyleHelpers$buttonStyle(canReset),
							{
								O: $mdgriffith$elm_ui$Element$text('Retour'),
								aI: canReset ? $elm$core$Maybe$Just($author$project$Publications$Publications$Reset) : $elm$core$Maybe$Nothing
							})
						]))
				]));
	});
var $author$project$Publications$Publications$view = F2(
	function (config, model) {
		return A2(
			$mdgriffith$elm_ui$Element$map,
			model.bY,
			A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(15),
						$mdgriffith$elm_ui$Element$spacing(15),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$htmlAttribute(
						A2($elm$html$Html$Attributes$style, 'flex-shrink', '1')),
						$mdgriffith$elm_ui$Element$clip,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height(
						A2($mdgriffith$elm_ui$Element$maximum, config.fr, $mdgriffith$elm_ui$Element$fill)),
						$mdgriffith$elm_ui$Element$scrollbarY
					]),
				_List_fromArray(
					[
						function () {
						var _v0 = model.bW;
						switch (_v0.$) {
							case 0:
								return A2($author$project$Publications$Publications$initialView, config, model);
							case 1:
								switch (_v0.a) {
									case 0:
										var _v1 = _v0.a;
										return A2($author$project$Publications$Publications$newMurolInfoView, config, model);
									case 1:
										var _v2 = _v0.a;
										return A2($author$project$Publications$Publications$newDelibView, config, model);
									default:
										var _v3 = _v0.a;
										return A2($author$project$Publications$Publications$newBulletinView, config, model);
								}
							default:
								return A2($author$project$Publications$Publications$uploadView, config, model);
						}
					}()
					])));
	});
var $author$project$MurolAdmin$view = function (model) {
	return {
		eY: _List_fromArray(
			[
				A3(
				$mdgriffith$elm_ui$Element$layoutWith,
				{
					g2: _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$focusStyle(
							{h6: $elm$core$Maybe$Nothing, ie: $elm$core$Maybe$Nothing, lC: $elm$core$Maybe$Nothing})
						])
				},
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height(
						A2($mdgriffith$elm_ui$Element$maximum, model.aM, $mdgriffith$elm_ui$Element$fill)),
						$mdgriffith$elm_ui$Element$Font$size(16)
					]),
				function () {
					var _v0 = model.b4;
					switch (_v0) {
						case 0:
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$centerY,
										$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
										$mdgriffith$elm_ui$Element$Border$rounded(5),
										$mdgriffith$elm_ui$Element$padding(15),
										$mdgriffith$elm_ui$Element$spacing(15)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$center,
												$mdgriffith$elm_ui$Element$Background$color(
												A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$padding(15)
											]),
										$mdgriffith$elm_ui$Element$text('MurolAdmin')),
										A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(15),
												$mdgriffith$elm_ui$Element$padding(15),
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$centerY,
												$mdgriffith$elm_ui$Element$Background$color(
												A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
											]),
										_List_fromArray(
											[
												A2(
												$author$project$Auth$AuthPlugin$view,
												{fY: model.fY},
												model.p)
											]))
									]));
						case 1:
							var loadingComplete = A2(
								$elm$core$List$all,
								function (ls) {
									return _Utils_eq(ls, $author$project$Internals$ToolHelpers$ToolLoadingSuccess);
								},
								_List_fromArray(
									[
										$author$project$FileExplorer$FileExplorer$loadingStatus(model.fd),
										$author$project$PageTreeEditor$PageTreeEditor$loadingStatus(model.J),
										$author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$loadingStatus(model.a6),
										$author$project$NewsEditor$NewsEditor$loadingStatus(model.aH)
									]));
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$centerY,
										$mdgriffith$elm_ui$Element$Background$color($author$project$Internals$CommonStyleHelpers$grey6),
										$mdgriffith$elm_ui$Element$Border$rounded(5),
										$mdgriffith$elm_ui$Element$padding(15),
										$mdgriffith$elm_ui$Element$spacing(15)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$el,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$center,
												$mdgriffith$elm_ui$Element$Background$color(
												A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1)),
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$padding(15)
											]),
										$mdgriffith$elm_ui$Element$text('MurolAdmin')),
										A2(
										$mdgriffith$elm_ui$Element$column,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$spacing(15),
												$mdgriffith$elm_ui$Element$padding(15),
												$mdgriffith$elm_ui$Element$centerX,
												$mdgriffith$elm_ui$Element$centerY,
												$mdgriffith$elm_ui$Element$Background$color(
												A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1))
											]),
										_List_fromArray(
											[
												$author$project$FileExplorer$FileExplorer$loadingView(model.fd),
												$author$project$PageTreeEditor$PageTreeEditor$loadingView(model.J),
												$author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$loadingView(model.a6),
												$author$project$NewsEditor$NewsEditor$loadingView(model.aH),
												$author$project$Publications$Publications$loadingView(model.fB),
												A2(
												$mdgriffith$elm_ui$Element$Input$button,
												$author$project$Internals$CommonStyleHelpers$buttonStyle(loadingComplete),
												{
													O: $mdgriffith$elm_ui$Element$text('Commencer'),
													aI: $elm$core$Maybe$Just($author$project$MurolAdmin$Launch)
												})
											]))
									]));
						default:
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$paddingEach(
										{a2: 0, bc: 0, bl: 0, bq: 5}),
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$height(
										A2($mdgriffith$elm_ui$Element$maximum, model.aM, $mdgriffith$elm_ui$Element$fill)),
										$mdgriffith$elm_ui$Element$htmlAttribute(
										A2($elm$html$Html$Attributes$style, 'flex-shrink', '1'))
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$row,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Border$widthEach(
												{a2: 2, bc: 0, bl: 0, bq: 0}),
												$mdgriffith$elm_ui$Element$spacing(5),
												$mdgriffith$elm_ui$Element$paddingEach(
												{a2: 0, bc: 5, bl: 0, bq: 0}),
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$Border$color(
												A3($mdgriffith$elm_ui$Element$rgb, 0.8, 0.8, 0.8))
											]),
										_List_fromArray(
											[
												A3($author$project$MurolAdmin$tabView, model.D, 0, 'Editeur de page'),
												A3($author$project$MurolAdmin$tabView, model.D, 5, 'Editeur actualités'),
												A3($author$project$MurolAdmin$tabView, model.D, 4, 'Répertoire général'),
												A3($author$project$MurolAdmin$tabView, model.D, 3, 'Structure du site'),
												A3($author$project$MurolAdmin$tabView, model.D, 1, 'Explorateur de fichiers'),
												A3($author$project$MurolAdmin$tabView, model.D, 6, 'Publications'),
												A3($author$project$MurolAdmin$tabView, model.D, 2, 'Authentification'),
												A3($author$project$MurolAdmin$tabView, model.D, 7, 'Aide')
											])),
										function () {
										var _v1 = model.D;
										switch (_v1) {
											case 0:
												return A2(
													$author$project$PageEditor$PageEditor$view,
													{
														fd: model.fd,
														gp: model.a6,
														be: $author$project$Auth$AuthPlugin$getLogInfo(model.p),
														aH: model.aH,
														J: model.J,
														fY: model.fY
													},
													model.cP);
											case 1:
												return A2(
													$author$project$FileExplorer$FileExplorer$view,
													{
														be: $author$project$Auth$AuthPlugin$getLogInfo(model.p),
														fr: model.aM - 70,
														h: $author$project$FileExplorer$FileExplorer$Full,
														fY: model.fY
													},
													model.fd);
											case 2:
												return A2(
													$author$project$Auth$AuthPlugin$view,
													{fY: model.fY},
													model.p);
											case 3:
												return A2(
													$author$project$PageTreeEditor$PageTreeEditor$view,
													{
														be: $author$project$Auth$AuthPlugin$getLogInfo(model.p),
														fr: model.aM - 70,
														h: 0,
														fY: model.fY
													},
													model.J);
											case 4:
												return A2(
													$author$project$GeneralDirectoryEditor$GeneralDirectoryEditor$view,
													{
														fd: model.fd,
														be: $author$project$Auth$AuthPlugin$getLogInfo(model.p),
														fr: model.aM - 70,
														fY: model.fY
													},
													model.a6);
											case 5:
												return A2(
													$author$project$NewsEditor$NewsEditor$view,
													{
														fd: model.fd,
														be: $author$project$Auth$AuthPlugin$getLogInfo(model.p),
														fr: model.aM - 70,
														J: model.J,
														fY: model.fY
													},
													model.aH);
											case 6:
												return A2(
													$author$project$Publications$Publications$view,
													{
														be: $author$project$Auth$AuthPlugin$getLogInfo(model.p),
														fr: model.aM - 70,
														fY: model.fY
													},
													model.fB);
											default:
												return A2(
													$author$project$Help$Help$view,
													{fr: model.aM - 70, ke: model.d0},
													model.b1);
										}
									}(),
										$author$project$MurolAdmin$notificationsPanelView(model)
									]));
					}
				}())
			]),
		fP: 'MurolAdmin'
	};
};
var $author$project$MurolAdmin$main = $elm$browser$Browser$document(
	{jO: $author$project$MurolAdmin$init, lT: $author$project$MurolAdmin$subscriptions, mk: $author$project$MurolAdmin$update, mp: $author$project$MurolAdmin$view});
_Platform_export({'MurolAdmin':{'init':$author$project$MurolAdmin$main(
	A2(
		$elm$json$Json$Decode$andThen,
		function (currentTime) {
			return $elm$json$Json$Decode$succeed(
				{iP: currentTime});
		},
		A2($elm$json$Json$Decode$field, 'currentTime', $elm$json$Json$Decode$int)))(0)}});}(this));